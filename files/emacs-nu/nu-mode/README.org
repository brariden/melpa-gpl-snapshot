* Rationale

/Learning curves suck./

*Emacs has to be easy to learn*. The way is to adhere to standard keybinding & conventions.

*Emacs has to be easy to use*. Standard keybinding are not usable.

*Emacs has to be self-advertising*. OK, Emacs is self documenting : but Emacs users spend hours reading blogs.

/The solution is to improve prefix keys/. To Evil users : modal editing is compatible with NU-MODE.

* Welcome to NU-MODE

** One prefix key , many functions

Prompts are enhanced prefix keys : a standard shortcut raises an informative *Help* frame which allows user to discover many available functions.

Prompts are not pretty, but useful.
1. Prompts are automatically populated from keymaps.
2. They rely on standard keys to be invoked, then inform the user - thus, no learning curve.
3. Prompts advertise while direct shortcuts could have produce the invoked function.
4. This is way more ergonomic. Key sequences are the way to go.
5. Prompts are discoverable.
6. Prompts feature context sensitivity. Some functions will not appear depending on the context. Or, toggling the "replace" prompts while in read-only-mode will toggle read-only only.
7. Prompts allows to use arguments comfortably (directly input a number, then invoke the function).
8. Prompts conveniently offer to describe-function.
9. NU-MODE prompts work with repeat command.


Technically, a prompt is a function associated with a keymap (which is regenerated while prompts is called, in order for example to check for major/minor modes). It will check for user input. It will offer to scroll up/down or enter digits. Functionaly, prompts serve as methaphor.


- FIND (ctrl+f): also to move.
- OPEN (ctrl+o) : files obviously, but also agenda, recent files, bookmark, buffers...
- REPLACE (ctrl+r): actually this is "change" : transpose, join lines, upcase,...
- PASTE (alt+v) : more largely "insert".
- SAVE (alt+s) : you can also save bookmark, goal-column, keyboard macro...
- PRINT (ctrl+p) : printing is evaluating! last-sexp, async shell, make,...
- SELECT-ALL (ctrl+a) : select (sentence, word, defun, rectangle) / cd
- CLOSE (ctrl+w) : close document standard shortcut is extended to "window" management.
- DELETE (alt+d) : this one is for comfort =)



** A bit of speed

Obviously, while key sequences can solve learning curve for hundred(s) of functions, the most common one should be accessible directly. Imagine you need 15 keys for your prompts. You still have many keys to directly move (char, line, word), delete (char, line, word), cut, copy, paste, undo, find, select, ... Since, appart from the paddle, *direct keys also rely on standard shortcuts*, you're free from learning curve.

The only part you have to learn is the paddle : ijkl to move up left down right. That's all. 


* Relationships

** What NU-MODE uses

NU-MODE uses cua-selection-mode (& temporarily cua-rectangle, but this is going to disappear with 24.4), recetnf, undo-tree, ace-jump. It is capable to invoke functions from magit or org-mode. help-fns+ is there to describe-keymap but its not really leverared.

Prompts are inspired from make-help-screen.

** How is that different from?

evil : modal editing is compatible with NU-MODE.

makey.el : these are customed prompts, not automatic.

The keybind part /could/ use ErgoEmacs.

god-mode : this one is technically compatible, but functionaly NOT. (inversing god-mode control/alt would solve this.)

