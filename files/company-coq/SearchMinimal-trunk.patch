From c9cffb1fe41a6e566aec480f182cd8549e6015ab Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Cl=C3=A9ment=20Pit--Claudel?= <clement.pitclaudel@live.com>
Date: Mon, 16 Feb 2015 12:20:56 -0500
Subject: [PATCH] search: Add a minimal search option

When set, search results only display symbol names, instead of
displaying full terms. This is useful when the list of symbols is needed
by an external program.

Adapted from branch SearchMinimal on cpitclaudel/coq
---
 interp/constrextern.ml    | 4 ++++
 interp/constrextern.mli   | 1 +
 toplevel/search.ml        | 8 +++++---
 toplevel/vernacentries.ml | 9 +++++++++
 4 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/interp/constrextern.ml b/interp/constrextern.ml
index f57772e..fece226 100644
--- a/interp/constrextern.ml
+++ b/interp/constrextern.ml
@@ -42,6 +42,10 @@ let print_arguments = ref false
 (* If true, prints local context of evars *)
 let print_evar_arguments = Detyping.print_evar_arguments
 
+(* This suppresses types from the output of search functions, so they only
+include symbol names *)
+let search_minimal = ref false
+
 (* This governs printing of implicit arguments.  When
    [print_implicits] is on then [print_implicits_explicit_args] tells
    how implicit args are printed. If on, implicit args are printed
diff --git a/interp/constrextern.mli b/interp/constrextern.mli
index b797e45..6c4964d 100644
--- a/interp/constrextern.mli
+++ b/interp/constrextern.mli
@@ -45,6 +45,7 @@ val extern_rel_context : constr option -> env -> Evd.evar_map ->
   rel_context -> local_binder list
 
 (** Printing options *)
+val search_minimal : bool ref
 val print_implicits : bool ref
 val print_implicits_defensive : bool ref
 val print_arguments : bool ref
diff --git a/toplevel/search.ml b/toplevel/search.ml
index 59283ed..47caea5 100644
--- a/toplevel/search.ml
+++ b/toplevel/search.ml
@@ -98,11 +98,13 @@ let generic_search glnumopt fn =
   iter_declarations fn
 
 (** Standard display *)
-
 let plain_display accu ref env c =
-  let pc = pr_lconstr_env env Evd.empty c in
   let pr = pr_global ref in
-  accu := hov 2 (pr ++ str":" ++ spc () ++ pc) :: !accu
+  if !Constrextern.search_minimal then
+    accu := pr :: !accu
+  else
+    let pc = pr_lconstr_env env Evd.empty c in
+    accu := hov 2 (pr ++ str":" ++ spc () ++ pc) :: !accu
 
 let format_display l = prlist_with_sep fnl (fun x -> x) (List.rev l)
 
diff --git a/toplevel/vernacentries.ml b/toplevel/vernacentries.ml
index 52b4dc8..4c7fa5d 100644
--- a/toplevel/vernacentries.ml
+++ b/toplevel/vernacentries.ml
@@ -1171,6 +1171,15 @@ let vernac_generalizable locality =
 
 let _ =
   declare_bool_option
+    { optsync  = true;
+      optdepr  = false;
+      optname  = "minimal search output";
+      optkey   = ["Search";"Minimal"];
+      optread  = (fun () -> !Constrextern.search_minimal);
+      optwrite = (:=) Constrextern.search_minimal }
+
+let _ =
+  declare_bool_option
     { optsync  = false;
       optdepr  = false;
       optname  = "silent";
-- 
1.9.1

