From 901dec08911007d7381af9db95e61dcebab7a066 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Cl=C3=A9ment=20Pit--Claudel?= <clement.pitclaudel@live.com>
Date: Mon, 16 Feb 2015 12:20:56 -0500
Subject: [PATCH] search: Add a minimal search option

When set, search results only display symbol names, instead of
displaying full terms. This is useful when the list of symbols is needed
by an external program.

Extracted from 198b9c47dedf4fa3b2a95ab7102b2d2d4ada392f on branch SearchAny
---
 interp/constrextern.ml    | 3 +++
 interp/constrextern.mli   | 1 +
 toplevel/search.ml        | 7 +++++--
 toplevel/vernacentries.ml | 9 +++++++++
 4 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/interp/constrextern.ml b/interp/constrextern.ml
index ee529fe..2269ec3 100644
--- a/interp/constrextern.ml
+++ b/interp/constrextern.ml
@@ -40,6 +40,9 @@ let print_arguments = ref false
 (* If true, prints local context of evars, whatever print_arguments *)
 let print_evar_arguments = ref false
 
+(* If true, search results only include symbol names *)
+let search_minimal = ref false
+
 (* This governs printing of implicit arguments.  When
    [print_implicits] is on then [print_implicits_explicit_args] tells
    how implicit args are printed. If on, implicit args are printed
diff --git a/interp/constrextern.mli b/interp/constrextern.mli
index 55fabab..ea71127 100644
--- a/interp/constrextern.mli
+++ b/interp/constrextern.mli
@@ -41,6 +41,7 @@ val extern_rel_context : constr option -> env ->
   rel_context -> local_binder list
 
 (** Printing options *)
+val search_minimal : bool ref
 val print_implicits : bool ref
 val print_implicits_defensive : bool ref
 val print_arguments : bool ref
diff --git a/toplevel/search.ml b/toplevel/search.ml
index 19d696a..bb00897 100644
--- a/toplevel/search.ml
+++ b/toplevel/search.ml
@@ -106,9 +106,12 @@ let rec head c =
 let xor a b = (a or b) & (not (a & b))
 
 let plain_display ref a c =
-  let pc = pr_lconstr_env a c in
   let pr = pr_global ref in
-  msg (hov 2 (pr ++ str":" ++ spc () ++ pc) ++ fnl ())
+  if !Constrextern.search_minimal then
+    msg (pr ++ fnl ())
+  else
+    let pc = pr_lconstr_env a c in
+    msg (hov 2 (pr ++ str":" ++ spc () ++ pc) ++ fnl ())
 
 let filter_by_module (module_list:dir_path list) (accept:bool)
   (ref:global_reference) _ _ =
diff --git a/toplevel/vernacentries.ml b/toplevel/vernacentries.ml
index 75efe13..d92226c 100644
--- a/toplevel/vernacentries.ml
+++ b/toplevel/vernacentries.ml
@@ -953,6 +953,15 @@ let make_silent_if_not_pcoq b =
 
 let _ =
   declare_bool_option
+    { optsync  = true;
+      optdepr  = false;
+      optname  = "minimal search output";
+      optkey   = ["Search";"Minimal"];
+      optread  = (fun () -> !Constrextern.search_minimal);
+      optwrite = (:=) Constrextern.search_minimal }
+
+let _ =
+  declare_bool_option
     { optsync  = false;
       optdepr  = false;
       optname  = "silent";
-- 
1.9.1

