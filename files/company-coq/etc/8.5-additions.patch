From 90c51dad521eed147e78571a13ff158f23dccdc5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Cl=C3=A9ment=20Pit--Claudel?= <clement.pitclaudel@live.com>
Date: Mon, 16 Feb 2015 12:20:56 -0500
Subject: [PATCH 1/2] search: Add an output-name-only search option

When set, search results only display symbol names, instead of
displaying full terms with types. This is useful when the list of
symbols is needed by an external program, in particular for doing
completion in IDEs.
---
 doc/refman/RefMan-oth.tex |  8 ++++++++
 toplevel/search.ml        | 27 ++++++++++++++++++++++++---
 2 files changed, 32 insertions(+), 3 deletions(-)

diff --git a/doc/refman/RefMan-oth.tex b/doc/refman/RefMan-oth.tex
index 0a24330..aea2bae 100644
--- a/doc/refman/RefMan-oth.tex
+++ b/doc/refman/RefMan-oth.tex
@@ -914,6 +914,14 @@ This command turns off the normal displaying.
 \subsection[\tt Unset Silent.]{\tt Unset Silent.\optindex{Silent}}
 This command turns the normal display on.
 
+\subsection[\tt Set Search Output Name Only.]{\tt Set Search Output Name Only.\optindex{Search Output Name Only}
+\label{Search-Output-Name-Only}
+\index{Search Output Name Only mode}}
+This command restricts the output of search commands to identifier names; turning it on causes invocations of {\tt Search}, {\tt SearchHead}, {\tt SearchPattern}, {\tt SearchRewrite} etc. to omit types from their output, printing only identifiers.
+
+\subsection[\tt Unset Search Output Name Only.]{\tt Unset Search Output Name Only.\optindex{Search Output Name Only}}
+This command turns type display in search results back on.
+
 \subsection[\tt Set Printing Width {\integer}.]{\tt Set Printing Width {\integer}.\optindex{Printing Width}}
 \label{SetPrintingWidth}
 This command sets which left-aligned part of the width of the screen
diff --git a/toplevel/search.ml b/toplevel/search.ml
index 9e67eef..9c32bdd 100644
--- a/toplevel/search.ml
+++ b/toplevel/search.ml
@@ -18,10 +18,28 @@ open Printer
 open Libnames
 open Globnames
 open Nametab
+open Goptions
 
 type filter_function = global_reference -> env -> constr -> bool
 type display_function = global_reference -> env -> constr -> unit
 
+(* This option restricts the output of [SearchPattern ...],
+[SearchAbout ...], etc. to the names of the symbols matching the
+query, separated by a newline. This type of output is useful for
+editors (like emacs), to generate a list of completion candidates
+without having to parse thorugh the types of all symbols. *)
+
+let search_output_name_only = ref false
+
+let _ =
+  declare_bool_option
+    { optsync  = true;
+      optdepr  = false;
+      optname  = "output-name-only search";
+      optkey   = ["Search";"Output";"Name";"Only"];
+      optread  = (fun () -> !search_output_name_only);
+      optwrite = (:=) search_output_name_only }
+
 type glob_search_about_item =
   | GlobSearchSubPattern of constr_pattern
   | GlobSearchString of string
@@ -98,11 +116,14 @@ let generic_search glnumopt fn =
   iter_declarations fn
 
 (** Standard display *)
-
 let plain_display accu ref env c =
-  let pc = pr_lconstr_env env Evd.empty c in
   let pr = pr_global ref in
-  accu := hov 2 (pr ++ str":" ++ spc () ++ pc) :: !accu
+  if !search_output_name_only then
+    accu := pr :: !accu
+  else begin
+    let pc = pr_lconstr_env env Evd.empty c in
+    accu := hov 2 (pr ++ str":" ++ spc () ++ pc) :: !accu
+  end
 
 let format_display l = prlist_with_sep fnl (fun x -> x) (List.rev l)
 
-- 
2.7.0


From 966a110f6e070752ed05b2a45972d5de5d0a1985 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Cl=C3=A9ment=20Pit--Claudel?= <clement.pitclaudel@live.com>
Date: Wed, 6 May 2015 22:45:29 -0400
Subject: [PATCH 2/2] Add a [Print Ltac Signatures] construct to print all
 known tactics

---
 intf/vernacexpr.mli       |  1 +
 library/nametab.ml        | 10 ++++++++++
 library/nametab.mli       |  1 +
 parsing/g_vernac.ml4      |  1 +
 printing/ppvernac.ml      |  2 ++
 tactics/tacintern.ml      |  7 +++++++
 tactics/tacintern.mli     |  1 +
 toplevel/vernacentries.ml |  1 +
 8 files changed, 24 insertions(+)

diff --git a/intf/vernacexpr.mli b/intf/vernacexpr.mli
index 99264db..19266bf 100644
--- a/intf/vernacexpr.mli
+++ b/intf/vernacexpr.mli
@@ -63,6 +63,7 @@ type printable =
   | PrintTypeClasses
   | PrintInstances of reference or_by_notation
   | PrintLtac of reference
+  | PrintLtacSignatures
   | PrintCoercions
   | PrintCoercionPaths of class_rawexpr * class_rawexpr
   | PrintCanonicalConversions
diff --git a/library/nametab.ml b/library/nametab.ml
index 5b6d7cd..0e02f5d 100644
--- a/library/nametab.ml
+++ b/library/nametab.ml
@@ -71,6 +71,7 @@ module type NAMETREE = sig
   val push : visibility -> user_name -> elt -> t -> t
   val locate : qualid -> t -> elt
   val find : user_name -> t -> elt
+  val elements : t -> elt list
   val exists : user_name -> t -> bool
   val user_name : qualid -> t -> user_name
   val shortest_qualid : Id.Set.t -> user_name -> t -> qualid
@@ -193,6 +194,13 @@ let find_node qid tab =
   let (dir,id) = repr_qualid qid in
     search (Id.Map.find id tab) (DirPath.repr dir)
 
+let elements tab =
+  let f k v acc =
+    match v.path with
+    | Absolute (_, o) | Relative (_, o) -> o :: acc
+    | Nothing                           -> acc
+  in Id.Map.fold_right f tab []
+
 let locate qid tab =
   let o = match find_node qid tab with
     | Absolute (uname,o) | Relative (uname,o) -> o
@@ -403,6 +411,8 @@ let full_name_modtype qid = MPTab.user_name qid !the_modtypetab
 
 let locate_tactic qid = KnTab.locate qid !the_tactictab
 
+let all_tactics () = KnTab.elements !the_tactictab
+
 let locate_dir qid = DirTab.locate qid !the_dirtab
 
 let locate_module qid =
diff --git a/library/nametab.mli b/library/nametab.mli
index e3aeb67..547ee8d 100644
--- a/library/nametab.mli
+++ b/library/nametab.mli
@@ -98,6 +98,7 @@ val locate_dir : qualid -> global_dir_reference
 val locate_module : qualid -> module_path
 val locate_section : qualid -> DirPath.t
 val locate_tactic : qualid -> ltac_constant
+val all_tactics : unit -> ltac_constant list
 
 (** These functions globalize user-level references into global
    references, like [locate] and co, but raise a nice error message
diff --git a/parsing/g_vernac.ml4 b/parsing/g_vernac.ml4
index 1f9f57f..2a3ce6e 100644
--- a/parsing/g_vernac.ml4
+++ b/parsing/g_vernac.ml4
@@ -944,6 +944,7 @@ GEXTEND Gram
       | IDENT "TypeClasses" -> PrintTypeClasses
       | IDENT "Instances"; qid = smart_global -> PrintInstances qid
       | IDENT "Ltac"; qid = global -> PrintLtac qid
+      | IDENT "Ltac"; IDENT "Signatures" -> PrintLtacSignatures
       | IDENT "Coercions" -> PrintCoercions
       | IDENT "Coercion"; IDENT "Paths"; s = class_rawexpr; t = class_rawexpr
          -> PrintCoercionPaths (s,t)
diff --git a/printing/ppvernac.ml b/printing/ppvernac.ml
index 72b9caf..8a6c86c 100644
--- a/printing/ppvernac.ml
+++ b/printing/ppvernac.ml
@@ -475,6 +475,8 @@ module Make
         keyword "Print Instances" ++ spc () ++ pr_smart_global qid
       | PrintLtac qid ->
         keyword "Print Ltac" ++ spc() ++ pr_ltac_ref qid
+      | PrintLtacSignatures  ->
+        keyword "Print Ltac Signatures"
       | PrintCoercions ->
         keyword "Print Coercions"
       | PrintCoercionPaths (s,t) ->
diff --git a/tactics/tacintern.ml b/tactics/tacintern.ml
index 1778221..1b31019 100644
--- a/tactics/tacintern.ml
+++ b/tactics/tacintern.ml
@@ -832,6 +832,13 @@ let print_ltac id =
    errorlabstrm "print_ltac"
     (pr_qualid id ++ spc() ++ str "is not a user defined tactic.")
 
+let print_ltac_signatures () =
+  let tacs = Nametab.all_tactics () in
+  let print_one tac =
+    let l,t = split_ltac_fun (Tacenv.interp_ltac tac) in
+    hov 2 (pr_qualid (Nametab.shortest_qualid_of_tactic tac) ++ prlist pr_ltac_fun_arg l) in
+  prlist_with_sep fnl print_one tacs
+
 (** Registering *)
 
 let lift intern = (); fun ist x -> (ist, intern ist x)
diff --git a/tactics/tacintern.mli b/tactics/tacintern.mli
index a6e28d5..9b52302 100644
--- a/tactics/tacintern.mli
+++ b/tactics/tacintern.mli
@@ -55,6 +55,7 @@ val intern_genarg : glob_sign -> raw_generic_argument -> glob_generic_argument
 
 (** printing *)
 val print_ltac : Libnames.qualid -> std_ppcmds
+val print_ltac_signatures : unit -> std_ppcmds
 
 (** Reduction expressions *)
 
diff --git a/toplevel/vernacentries.ml b/toplevel/vernacentries.ml
index 2b23323..424ba8d 100644
--- a/toplevel/vernacentries.ml
+++ b/toplevel/vernacentries.ml
@@ -1614,6 +1614,7 @@ let vernac_print = function
   | PrintTypeClasses -> msg_notice (Prettyp.print_typeclasses())
   | PrintInstances c -> msg_notice (Prettyp.print_instances (smart_global c))
   | PrintLtac qid -> msg_notice (Tacintern.print_ltac (snd (qualid_of_reference qid)))
+  | PrintLtacSignatures -> msg_notice (Tacintern.print_ltac_signatures ())
   | PrintCoercions -> msg_notice (Prettyp.print_coercions())
   | PrintCoercionPaths (cls,clt) ->
       msg_notice (Prettyp.print_path_between (cl_of_qualid cls) (cl_of_qualid clt))
-- 
2.7.0

