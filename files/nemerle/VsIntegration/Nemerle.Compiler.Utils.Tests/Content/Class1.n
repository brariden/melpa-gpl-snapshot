using /*using*/System.Console;
//using System;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;

using SYZ = System.Collections.Generic;

class CompleteInBaseType1[TTest] : str/*Complete in base type 1:-0*/, IDisposable { }
class CompleteInBaseType2 : string, System.IDisposab/*Complete in base type 2:-0*/ { }
class A[TTest] : IComparable[TT/*Complete in base type 3:-0*/] { }

variant TestVariant
{
 | A { field : int; }
 | B { field : int; }
 | C
}

class GoToInfoTest
{
  mutable field1 : int;

  public this() { field1 = 123; }
  public Prop1 : int { get { field1 } }
  public Method1() : void
  {
    field1++;
    def x = field1/*GoToInfoTest_001:-1*/ + 1;
    def field1 = x;
    _ = field1;
  }
  
  public Method2() : void { _ = this.field1 + 1; }

  public Method3() : void
  {
    match (6 : object)
    {
      | yyyy is int => WriteLine(yyyy/*GoToInfoTest_002:-1*/);
      | yyyy/*GoToInfoTest_004:-1*/ => WriteLine(yyyy);
    }
  }

  public Method4() : void
  {
    match (TestVariant.A(1) : TestVariant)
    {
      | A(yyy) | B(yyy/*GoToInfoTest_003:-1*/) => WriteLine(yyy);
      | C => WriteLine(0);
    }
  }

  Test1(xyz/*GoToInfoTest_005:-1*/ : string) : void
  {
    def str/*GoToInfoTest_006:-1*/ = "a";
    _ = $"x$(System.Text.StringBuilder().Append(str + xyz).ToString() + xyz)";
  }
}

class Class5
{
  public /*PropStartLocation:1*/Prop
    : int

  {/*PropBodyStartLocation:-0*/
    [System.CLSCompliant(true)] 
    get {/*PropGetterStartLocation:-0*/ 0 /*PropGetterEndLocation:0*/}
    set {/*PropSetterStartLocation:-0*/  /*PropSetterEndLocation:0*/}
    //
    /*
    */
  }/*PropBodyEndLocation:-1*/

  public Test() : void
  {
    <[ decl: ]>
  }
}

public delegate TestDel () : bool;

namespace Ns1
{
  namespace Ns2
  {
    namespace Ns3
    {
      class ClassInNestenNs
      {
        public Method24() : /*Complete in return type 1:-0*/
        {
        }

        public Method25() : voi/*Complete in return type 2:-0*/
        {
        }

        public Method26() : int/*Complete in return type 3:-0*/
        {
        }

        public Method27() : System.Int/*Complete in return type 4:-0*/
        {
        }

        public Method28() : void
        {
          Test(ch => ch.Compare/*Complete in lambda CompareTo:-0*/
        }

        public Method29() : void
        {
          Test(ch : char => ch.Compare/*Complete in lambda CompareTo 2:-0*/
        }

        public Method30() : void
        {
          Sy/*Complete glabal ns:-0*/;
          sb/*Complete aliased type:-0*/;
          //System.Consol;
          System.Runtime.Co/*Complete qualidend:-0*/;
        }

        Test(_ch : char -> bool) : void {}

        public Method2() : void
        {
          def x : System.Co/*Complete type escalation:-0*/;
        }

        public Method3() : void
        {
          def x :/*Complete type escalation 3:-0*/ /*Complete type escalation 2:-0*/;
        }
        
        public Method4() : void
        {
          match (xxx)
          {
            | /*Complete in match variant 1:-0*/
          }
        }

        public Method5() : void
        {
          match (xxx)
          {
            | TestVariant2.CValue(A/*Complete in match variant 2:-0*/) => WriteLine("A");
            | _ => ()
            //| TestVariant.B
          }
        }

        public Method6() : void
        {
          def a : A = D();
          
          match (a)
          {
            | x is /*Complete in match variant 3:-0*/
          }
        }

        public Method7() : void
        {
          def testVariable = 1;
          def TestVariable = 1;

          testVariab/*Complete vars with same name:-0*/
        }

        public Method8() : void
        {
          System.Console./*Complete namespace 1:-0*/
        }

        public Method9() : void
        {
          def a : A = D();
          def b = a :> /*Complete type cast:-0*/
        }

        public Method10() : void
        {
          def a : A = D();
          def b = a : System.Collections.Generic.IL/*Complete generic type cast:-0*/;
        }

        public Method11(pattern : TestVariant1) : string
        {
          | Aaa/*Hint in body of implicit match:-1*/ => "Aaa"
          | Bbb => "Bbb"
        }

        public Method12(x : bool) : void
        {
          return/*Hint on return:-1*/;
        }

        public Method13(x : bool) : void
        {
          /*Start block 1:-0*/;
          /*End block 1:0*/

          /*Start block 2:-0*/;/*End block 2:0*/

          /*Start block 3:-0*/;
          // Some code line...
          // Some code line...
          // Some code line...
          /*End block 3:0*/
        }

        public Method14() : void
        {
          System.AttributeTargets./*Complete enum:-0*/
        }

        public Method15() : void
        {
          def ary = array[1,2,3];
          _ = ary.Ma/*ExtensionMethod_1:-0*/
        }

        public Method16() : void
        {
          def _ = System.Text.RegularExpressions.Regex("--.*")./*Complete expr:-0*/;
        }

        public Method17() : void
        {
          System.Collections.Gen/*Complete namespace 2:-0*/
          System.Collec/*Complete namespace 22:-0*/
        }

        public Method18() : void
        {
          def xx = /*Complete System.Collections.Generic.List/Collections:12*/System.Collections.Generic.List();
          _ = xx;
        }

        public Method19() : void
        {
          /*Complete empty:-0*/
        }

        public Method20() : void
        {
          /*Complete 2:-0*/
          when (true)
            xxx = TestVariant2.AValue;

        }

        public Method21() : void
        {
          match (xxx)
          {
            | CValue/*Complete in match variant 4:-2*/(TestVariant1.Aaa) => WriteLine("CValue(TestVariant1.Aaa)");
            | _ => ()
            //| TestVariant.B
          }
        }

        public Method22() : void
        {
          match (xxx)
          {
            | TestVari/*Complete in match variant 5:-0*/
          }
        }

        public Method23() : void
        {
          match (xxx)
          {
            | TestVariant2.TestVari/*Complete in match variant 6:-0*/
          }
        }

        xxx : TestVariant2;
      }
    }
  }
}

namespace Tests
{
  partial class Class1
  {
    /*Tests.Class1.Main()*/Main() : void
    {
      def aaa = 1;
      a/*Main() 2:-0*/
    }
  }
}

class Class2
{
  Method() : void
  {
    def ccc = 1;
    c/*ccc:-0*/
  }
}

variant TestVariant1
{
  | Aaa
  | Bbb
}

variant TestVariant2
{
  | AValue
  | BValue
  | CValue { subVariant : TestVariant1; }
}

class A { }
class B : A { }
class C : A { }
class D : C { }


class Class3
{
  Foo() : void
  {
    def (/*StackOverflow*/
    _ = "".ToString();
  }
}

class Class4
{
  Foo() : void
  {
    while (2 > 1)
    {
      break;
      _ = "".ToString/*Class4:-1*/();
    }
  }
}

class Class6
{
  Foo() : void
  {
    for/*forMacro:-1*/ (mutable i;;)
    {
    }
  }
}

module ClassExtension
{
  Boo() : void
  {
    def str = "".Foo/*ClassExtension:-1*/();
  }
  
  public Foo(this s : string) : int
  {
    0
  }
}/*EOF:0*/
