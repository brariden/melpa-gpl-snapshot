using System;
using System.Diagnostics;

using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.Utils;
using Nemerle.Imperative;

using P = Nemerle.Compiler.Parsetree;
using T = Nemerle.Compiler.Typedtree;
using NC = Nemerle.Collections;

namespace Nemerle.Completion2
{
  class ExprFinder : IExprWalkerCallback
  {
    mutable _line         : int;
    mutable _col          : int;
    mutable _exactLocationToFind : Location;
    mutable _parentObject : object;
    mutable _pexprObject  : object;
    mutable _texprObject  : object;
    mutable _decl         : Decl;
    mutable _location     : Location;
    mutable _walkedNodes  : list[object] = [];

    #region IExprWalkerCallback interface

    Push(info : ExprWalkInfo) : void implements IExprWalkerCallback.Push
    {
      _walkedNodes ::= info.Node;
    }

    Pop (_ : ExprWalkInfo) : void implements IExprWalkerCallback.Pop
    {
      match (_walkedNodes)
      {
      | _ :: tail => _walkedNodes = tail;
      | []        => ()
      }
    }

    Stop(_ : ExprWalkInfo) : void implements IExprWalkerCallback.Stop
    {
#if PRINT_AST && DEBUG
      repeat (_walkedNodes.Length) Trace.Write("  ");
      Trace.WriteLine("Stopped!");
#endif
    }

    Skip(_ : ExprWalkInfo) : void implements IExprWalkerCallback.Skip
    {
#if PRINT_AST && DEBUG
      repeat (_walkedNodes.Length) Trace.Write("  ");
      Trace.WriteLine("Skipped!");
#endif
    }

    #endregion

    GetTypedObject(obj : object) : object
    {
      | pe is PExpr        => GetTypedObject(pe.TypedObject);
      | fh is P.PFunHeader => GetTypedObject(fh.TypedObject);
      | fp is P.PParameter => GetTypedObject(fp.TypedObject);
      | sp is Splicable    => GetTypedObject(sp.TypedObject);
      | tc is TryCase      => GetTypedObject(tc.TypedObject);
      | TExpr.Delayed(susp) when !susp.IsResolved =>
        try { susp.Resolve(); }
        catch { e is Exception => Trace.WriteLine($"$(e.GetType().Name): $(e.Message)"); }
        if (susp.IsResolved) susp.ResolutionResult else null
      | _                  => obj;
    }

    PFinderEverywhere(info : ExprWalkInfo) : void
    {
      def find(obj : Located)
      {
        def loc = obj.Location;

        Print(obj, loc, _walkedNodes.Length);

        when (IsIn(loc))
        {
          def texpr = GetTypedObject(obj);

          if (texpr != null)
          {
            when (_pexprObject == null || _location.Contains(loc))
            {
              PrintAdd(_walkedNodes.Length);

              _parentObject = _pexprObject;
              _location     = loc;
              _pexprObject  = info.Node;
              _texprObject  = texpr;
            }

            match (info.Node)
            {
              | PExpr.Wildcard => info.Stop();
              | PExpr.MacroCall(name, _, _) when IsIn(name.Location) =>
                  _location = name.Location;
                  info.Stop();

              | _ => ()
            }
          }
          // Making it possible to find empty Sequence.
          else match(obj)
          {
            | PExpr.Sequence([]) => 
                _parentObject = _pexprObject;
                _location     = loc;
                _pexprObject  = info.Node;
                _texprObject  = texpr;
                info.Stop();
            | _ => ()
          }
        }
      }

      def findDecl(obj : Decl)
      {
        def loc = obj.Location;

        Print(obj, loc, _walkedNodes.Length);

        if (IsIn(loc))
        {
          when(_decl == null || _location.Contains(loc))
          {
            _parentObject = null;
            _pexprObject = null;
            _location = loc;
            _texprObject = null;
            _decl = info.Node :> Decl;
          }
          
          match (info.Node)
          {
          | Decl.GlobalAttribute
          | Decl.None => Debug.WriteLine($"$(info.Node.GetType().Name)"); info.Stop();
          | _ => ()
          }
        }
        else if (_line < loc.Line || _line == loc.Line && _col < loc.Column)
          info.Stop()
        else when (_line > loc.EndLine || _line == loc.EndLine && _col > loc.EndColumn)
          info.Skip();
      }


      match (info.Node)
      {
      //| PExpr.MacroCall as mc =>

      //  if (IsIn(mc.loc)) find(mc);
      //  else              Print(mc, mc.loc, info.Nodes.Length);

      | l is Located          => find(l);
      | d is Decl             => findDecl(d);
      | _                     => ()
      }
    }

    PFinder(info : ExprWalkInfo) : void
    {
      def find(obj : Located)
      {
        def loc = obj.Location;
        
        //when ($"$obj" == "Module1.Module2")
        //{
        //  assert2(true);
        //}

        Print(obj, loc, _walkedNodes.Length);

        when (IsIn(loc)) //if
        {
          def texpr = GetTypedObject(obj);

          if (texpr != null)
          {
            when (_pexprObject == null || _location.Contains(loc))
            {
              PrintAdd(_walkedNodes.Length);

              _parentObject = _pexprObject;
              _location     = loc;
              _pexprObject  = info.Node;
              _texprObject  = texpr;
            }

            match (info.Node)
            {
            | PExpr.Wildcard => info.Stop();
            | PExpr.MacroCall(name, _, _) when IsIn(name.Location) =>
                _location = name.Location;
                info.Stop();

            | _ => ()
            }
          }
          // Making it possible to find empty Sequence.
          else match(obj)
          {
          | PExpr.Sequence([]) => 
              _parentObject = _pexprObject;
              _location     = loc;
              _pexprObject  = info.Node;
              _texprObject  = texpr;
              info.Stop();
          | _ => ()
          }
        }
        //else if (_line < loc.Line || _line == loc.Line && _col < loc.Column)
        //  info.Stop()
        //else when (_line > loc.EndLine || _line == loc.EndLine && _col > loc.EndColumn)
        //  info.Skip();
      }

      def findDecl(obj : Decl)
      {
        def loc = obj.Location;

        Print(obj, loc, _walkedNodes.Length);

        if (IsIn(loc))
        {
          when(_decl == null || _location.Contains(loc))
          {
            _parentObject = null;
            _pexprObject = null;
            _location = loc;
            _texprObject = null;
            _decl = info.Node :> Decl;
          }
          
          match (info.Node)
          {
          | Decl.GlobalAttribute
          | Decl.None => Debug.WriteLine($"$(info.Node.GetType().Name)"); info.Stop();
          | _ => ()
          }
        }
        else if (_line < loc.Line || _line == loc.Line && _col < loc.Column)
          info.Stop()
        else when (_line > loc.EndLine || _line == loc.EndLine && _col > loc.EndColumn)
          info.Skip();
      }


      match (info.Node)
      {
      //| PExpr.MacroCall as mc =>

      //  if (IsIn(mc.loc)) find(mc);
      //  else              Print(mc, mc.loc, info.Nodes.Length);

      | l is Located          => find(l);
      | d is Decl             => findDecl(d);
      | _                     => ()
      }
    }
    
    ExactLocationFinder(info : ExprWalkInfo) : void
    {
      def find(obj : Located)
      {
        def loc = obj.Location;

        Print(obj, loc, _walkedNodes.Length);

        if (!loc.IsGenerated && loc.Contains(_exactLocationToFind))
        {
          def texpr = GetTypedObject(obj);

          if (texpr != null)
          {
            when (_pexprObject == null || _location.Contains(loc))
            {
              PrintAdd(_walkedNodes.Length);

              _parentObject = _pexprObject;
              _location     = loc;
              _pexprObject  = info.Node;
              _texprObject  = texpr;
            }

            match (info.Node)
            {
            | PExpr.Wildcard => info.Stop();
            | PExpr.MacroCall(name, _, _) when IsIn(name.Location) =>
                _location = name.Location;
                info.Stop();

            | _ => ()
            }
            
            when(loc == _exactLocationToFind && _pexprObject is PExpr.Ref)
              info.Stop();
          }
          // Making it possible to find empty Sequence.
          else match(obj)
          {
          | PExpr.Sequence([]) => 
              _parentObject = _pexprObject;
              _location     = loc;
              _pexprObject  = info.Node;
              _texprObject  = texpr;
              info.Stop();
          | _ => ()
          }
        }
        else
        ()
        // if (_line < loc.Line || _line == loc.Line && _col < loc.Column)
        //  info.Stop()
        //else when (_line > loc.EndLine || _line == loc.EndLine && _col > loc.EndColumn)
        //  info.Skip()
      }
      
      def findDecl(obj : Decl)
      {
        def loc = obj.Location;

        Print(obj, loc, _walkedNodes.Length);

        if (loc.Contains(_exactLocationToFind))
        {
          when(_decl == null || _location.Contains(loc))
          {
            _parentObject = null;
            _pexprObject = null;
            _location = loc;
            _texprObject = null;
            _decl = info.Node :> Decl;
          }
          
          match(_decl)
          {
          | Type(ast) when ast.name.Location == _exactLocationToFind => 
              _texprObject = ast.TypeBuilder;
              info.Stop();
          | _ => ()
          }
          
          match (info.Node)
          {
          | Decl.GlobalAttribute
          | Decl.None => Debug.WriteLine($"$(info.Node.GetType().Name)"); info.Stop();
          | _ => ()
          }
        }
        else 
          ()
        //else if (_line < loc.Line || _line == loc.Line && _col < loc.Column)
        //  info.Stop()
        //else when (_line > loc.EndLine || _line == loc.EndLine && _col > loc.EndColumn)
        //  info.Skip();
      }
    
    
      match(info.Node)
      {
      | locd is Located => find(locd);
      | decl is Decl => findDecl(decl);
      | _ => ();
      
      }
    }
    
    // This method accepts Decl as a starting point.
    public _Find(pRoot : Decl, line : int, col : int) : Location * object
    {
      if(pRoot == null)
       (Location.Default, null);
      else
      {
         Init(line, col);
         ExprDeclWalker(this).Walk(pRoot, PFinder);
         if(_pexprObject != null)
           (_location, _pexprObject)
         else if(_decl != null)
          (_location, _decl);
         else
          (Location.Default, null);
      }  
    }
    
    public FindExact(pRoot : PExpr, _tRoot : TExpr, loc : Location, unpackMemberRefs = true) : Location * object * object
    {
      _exactLocationToFind = loc;
      def (foundLoc, foundPExpr, foundTExpr) = Find(pRoot, _tRoot, loc.Line, loc.Column, ExactLocationFinder, unpackMemberRefs);
      
      if(foundLoc == loc)
        (foundLoc, foundPExpr, foundTExpr)
      else
        (Location.Default, null, null)
    }
    
    public Find(pRoot : PExpr, _tRoot : TExpr, line : int, col : int, unpackMemberRefs = true) : Location * object * object
    {
      Find(pRoot, _tRoot, line, col, PFinder, unpackMemberRefs);
    }

    public FindEverywhere(pRoot : PExpr, _tRoot : TExpr, line : int, col : int, unpackMemberRefs = true) : Location * object * object
    {
      Find(pRoot, _tRoot, line, col, PFinderEverywhere, unpackMemberRefs);
    }

    /// 
    public Find(pRoot : PExpr, _tRoot : TExpr, line : int, col : int, handler : ExprWalkHandler, unpackMemberRefs = true) : Location * object * object
    {
      if (pRoot != null)
      {
        Init(line, col);

        def walker = ExprWalker(this);
        walker.Walk(pRoot, handler);

        match (_texprObject)
        {
          | TExpr.MacroEnvelope(_, _, expandedTExpr, expendedPExpr) => 
            def texprObject = _texprObject;
            def pexprObject = _pexprObject;
            def location    = _location;
            def col         = _col;
            def line        = _line;
            //walker.Walk(expendedPExpr, handler);
            def res = Find(expendedPExpr, expandedTExpr, line, col, handler, unpackMemberRefs);
            when (res[1] != null || res[2] != null)
              return res;
            _texprObject = texprObject;
            _pexprObject = pexprObject;
            _location    = location;
            _col         = col;
            _line        = line;

          | _ => ()
        }

        if (_texprObject != null)
        {
          def setloc(obj : object, loc) { _location = loc;          obj; }
          def setobj(obj)               { _location = obj.Location; obj; }

          _pexprObject = match (_pexprObject)
          {
          | PExpr.As    (_, Splicable.Name as name) when IsIn(name.Location)
          | PExpr.Member(_, Splicable.Name as name) when IsIn(name.Location) => setobj(name);
          | PExpr.TypeEnforcement(Ref as r, _) when IsIn(r.Location) && _parentObject is PExpr.DefMutable =>

            _texprObject = (_parentObject :> PExpr).TypedObject;
            r;

          | PExpr.Call(Ref as r, _) when _texprObject is TExpr.MacroEnvelope && IsIn(r.Location) => setobj(r);
          | PExpr.Call(_, [Tuple(args) as t, Call]) when _texprObject is TExpr.MacroEnvelope && IsIn(t.Location) =>

            match (_texprObject)
            {
            //TODO: Разобраться не надо ли обабатывать _expendedPExpr?
            | TExpr.MacroEnvelope(_, _, DefFunctionsIn([hdr], _), _expendedPExpr) when args.Length == hdr.Parameters.Length =>

              def loop(args : list[PExpr], parms)
              {
                def check(l : Located)
                {
                  if (IsIn(l.Location))
                  {
                    _texprObject = parms.Head;
                    setobj(l);
                  }
                  else
                    loop(args.Tail, parms.Tail);
                }

                match (args)
                {
                | [] => _pexprObject;
                | Ref as r :: _
                | TypeEnforcement(Ref as r, _) :: _ => check(r)
                | l :: _                            => check(l)
                }
              }

              loop(args, hdr.Parameters);

            | _ => _pexprObject;
            }

          | PExpr.MacroCall(name, _, _) when !IsIn(name.Location) => _texprObject = null; null;
          | parm is P.PParameter when IsIn(parm.name.Location) => setobj(parm.name);

          | o => o;
          }

          _texprObject = match (_texprObject)
            {
              | Pattern.Application(name, _) as tExpr =>
                match (tExpr.ParsedObject)
                {
                  | <[ $_ . $_ ]> as pName      when IsInEx(pName.Location) 
                  | <[ $(_ : name) ]> as pName  when IsInEx(pName.Location) 
                  | <[ $pName(..$_) ]>          when IsInEx(pName.Location) =>
                    _location    = pName.Location;
                    _pexprObject = pName;
                    name : object

                  | _ => _texprObject
                }

              | Try_case.Catch            (decl, _)
              | Pattern.As             (_, decl)        when IsInEx(decl.NameLocation) => decl;
              | Pattern.HasType        (typ)                                           => typ;
              | TExpr.DefValIn         (name, _, _)     when IsInEx(name.NameLocation) => setloc(name, name.NameLocation);
              | TExpr.TypeConversion   (_, ty, _, tloc) when IsInEx(tloc)              => setloc(ty,   tloc);
              | parm is T.TParameter   => parm.decl;
              | TExpr.StaticEventRef   (_, o)
              | TExpr.Base                (o)
              | TExpr.EventMember      (_, o)
              | TExpr.LocalRef            (o : object)
              | TExpr.HasType          (_, o)
              | TExpr.TypeOf              (o)
              | o                       => o;
            };

          when (unpackMemberRefs)
            _texprObject = match (_texprObject)
              {
                | TExpr.StaticRef        (_, o, _)
                | TExpr.ConstantObjectRef(_, o)
                | TExpr.StaticPropertyRef(_, o)
                | TExpr.FieldMember      (_, o)
                | TExpr.PropertyMember   (_, o)
                | TExpr.MethodRef        (_, o, _, _)
                | TExpr.LocalFunRef         (o : object, _)
                    => o
                | _ => _texprObject
              };

#if PRINT_AST && DEBUG
          Trace.WriteLine("");
          Trace.WriteLine($"PExpr: $(_pexprObject.GetType())");
          Trace.WriteLine($"$_pexprObject");
          Trace.WriteLine("");
          Trace.WriteLine($"TExpr: $(_texprObject.GetType())");
          Trace.WriteLine($"$_texprObject");
          Trace.WriteLine("");

          _walkedNodes = [];
          ExprWalker(this).Walk(_tRoot, (info : ExprWalkInfo) => 
          {
            match (info.Node)
            {
            | l is Located => Print(info.Node, l.Location, _walkedNodes.Length);
            | _ => ()
            }
          });
#endif

          (_location, _pexprObject, _texprObject)
        }
        else
          (Location.Default, null, null)
      }
      else
        (Location.Default, null, null)
    }

    Init(line : int, col : int) : void
    {
#if PRINT_AST && DEBUG
      Trace.WriteLine($"\nStart at: $line:$col.");
#endif

      _line        = line;
      _col         = col;
      _location    = Location.Default;
      _pexprObject = null;
      _texprObject = null;
    }
    
    /*Init(loc : Location) : void
    {
      _exactLocationToFind = loc;
      Init(loc.Line, loc.Column);
    }*/

    IsIn(location : Location) : bool
    {
      !location.IsGenerated && location.Contains(_line, _col);
    }

    IsInEx(location : Location) : bool
    {
      location.Contains(_line, _col);
    }

    Print(obj : object, loc : Location, level : int) : void
    {
      _ = obj;
      // try { _ = obj.ToString(); } catch { }

#if PRINT_AST && DEBUG
      def indentation = string(' ', level);
      mutable os = obj.ToString();

      when (os.Length > 200)
        os = os.Substring(0, 200) + "...";

      Trace.WriteLine("");
      Trace.WriteLine(indentation + 
        $"$(obj.GetType().FullName) "
         "$(loc.Line):$(loc.Column):$(loc.EndLine):$(loc.EndColumn)"
         "$(if (loc.IsGenerated) '-' else '+')"
         "$(if (GetTypedObject(obj) == null) '-' else '+') "
         "$_line:$_col.");
      Trace.WriteLine(indentation + os.Replace("\n", "\n" + indentation));
#endif

      ignore(obj); ignore(loc); ignore(level);
    }

    PrintAdd(level : int) : void
    {
#if PRINT_AST && DEBUG
      def s = string(' ', level);

      Trace.WriteLine(s + "+");
#endif

      ignore(level);
    }
  }
}
  
