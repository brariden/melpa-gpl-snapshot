using System;
using System.Reflection;
using System.Diagnostics;

using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.Utils;

using Nemerle.Assertions;
using Nemerle.Imperative;
using Nemerle.Utility;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2
{
  internal class RegionsHelper
  {
    public static Collect(compileUnit : CompileUnit) : SCG.List[RegionInfo]
    {
      try { RegionsHelper(compileUnit)._regions }
      catch
      { | _ =>
        Debug.WriteLine("Bad implementation of process regions!");
        SCG.List()
      }
    }
    static _commentChars = array['/','*']; 
    
    private this(compileUnit : CompileUnit)
    {
      _compileUnit    = compileUnit;
      _regions        = SCG.List(256);
      _lineCount      = compileUnit.LinesCount;
      _linesLenghts   = compileUnit.LinesLengths;
      _afterUsingLine = int.MaxValue;
      _fileIndex      = compileUnit.FileIndex;
      _sourceVersion  = compileUnit.SourceVersion;

      foreach (r in compileUnit.Regions)
      {
        def text   = r.Text.Trim();
        def banner = if (text.IsNullOrEmpty()) "#region" else text;

        AddHiddenRegion(r.Location, banner, false);
      }
      
      foreach (commentLoc in compileUnit.CommentLocations)
      {
        try
        {
          def comment = commentLoc[1];
          def bannerStringReader = System.IO.StringReader(comment.Trim(_commentChars));
          mutable banner  = bannerStringReader.ReadLine();
          when(string.IsNullOrEmpty(banner))
            banner  = (bannerStringReader.ReadLine() ?? "").Trim();
          AddHiddenRegion(commentLoc[0], banner + "..." ,false);
        }
        catch { | _ => Debug.WriteLine("Bad implementation of process comment regions!"); }
      }

      try
      {
        ProcessDecls(compileUnit.TopNamespace.Decls);
      }
      catch { | _ => Debug.WriteLine("Bad implementation of process declaration regions!"); }
    }

    private AddHiddenRegion(location : Location, isExpanded : bool) : void
    {
      AddHiddenRegion(location, null, isExpanded);
    }

    private AddHiddenRegion(loc : Location, text : string, isExpanded : bool) : void
    {
      def checkPoint(line, col, loc)
      {
        def res = line >= 1 || line <= _lineCount || col >= 1 || col <= _linesLenghts[line];

        unless (res)
          Debug.WriteLine($"$loc - bad location!");
        
        res
      }

      when (checkPoint(loc.Line, loc.Column, loc) && checkPoint(loc.EndLine, loc.EndColumn, loc))
        when (loc.Line < loc.EndLine)
          _regions.Add(RegionInfo(loc, text, isExpanded));
    }

    _compileUnit : CompileUnit;
    _regions     : SCG.List[RegionInfo];

    mutable _lineCount      : int;
    mutable _linesLenghts   : array[int];
    mutable _afterUsingLine : int;
            _fileIndex      : int;
            _sourceVersion  : int;
    
    CheckLine(line : int) : void
    {
      when (_afterUsingLine > line)
        _afterUsingLine = line;
    }

    AddRegion(loc : Location, isExpanded : bool) : void
    {
      when (!loc.IsEmpty)
      {
        AddHiddenRegion(loc, null, isExpanded);
        CheckLine(loc.Line);
      }
    }

    ProcessMatchCases(cases : list[MatchCase]) : void
    {
      def addExect(athis, case)
      {
        athis.AddHiddenRegion(case.ArrowLocation.FromEnd() + case.BodyLocation, false)
      }

      def len = cases.Length;

      if (len == 1)
        addExect(this, cases.Head);
      else when (len > 1)
      {
        def nextCaseLocList = cases.Tail.MapToArray(c => c.PatternsLocation);
        mutable i = 0;

        foreach (case in cases)
        {
          if (i + 1 == len)
            addExect(this, case);
          else
          {
            def endLine  = nextCaseLocList[i].Line - 1;
            def arrowLoc = case.ArrowLocation;

            when (case.BodyLocation.Line != endLine) // if case not contains in single line...
              AddHiddenRegion(
                Location(arrowLoc.FileIndex, arrowLoc.EndLine, arrowLoc.EndColumn,
                         endLine, _linesLenghts[endLine]), false);
          }

          i++;
        }
      }
    }

    ProcessExpr(pExpr : PExpr) : void
    {
      ExprWalker().Walk(pExpr, fun(info : ExprWalkInfo)
      {
        match (info.Node)
        {
          | PExpr.DefFunctions(funs) => // { funs : list [Function_decl]; }

            foreach (f in funs)
              AddRegion(f.header.Location.FromEnd() + f.body.Location, false);

          | PExpr.Match(expr, cases, _) as m =>
            when (expr != null)
            {
              def loc  = expr.Location;
              def loc2 = Location(loc, loc.EndLine, loc.EndColumn + 1, m.Location.EndLine, m.Location.EndColumn);
              AddRegion(loc2, true);
            }

            when (cases != null)
              ProcessMatchCases(cases);

          | <[ if ($_) $trueExpr else $faleExpr ]> when (trueExpr != null && faleExpr != null) =>
              AddRegion(trueExpr.Location, true);
              AddRegion(faleExpr.Location, true);
              
          | <[ when ($_) $expr ]> | <[ unless ($_) $expr ]> => 
            when (expr != null)
              AddRegion(expr.Location, true);

          | _ => ()
        }
      });
    }

    ProcessCustomAttributes(declarationBase : DeclarationBase) : void
    {
      AddHiddenRegion(declarationBase.modifiers.CustomAttributesLocation, "[custom attributes]",  false);
    }

    ProcessTopDeclaration(topDeclaration : TopDeclaration) : void
    {
      ProcessCustomAttributes(topDeclaration);
      
      when (topDeclaration is TopDeclaration.Delegate || topDeclaration is TopDeclaration.Alias)
        return;
				
      // TODO: Collapse all attributes to their own region.
      AddHiddenRegion(
        Location(_fileIndex,
                 topDeclaration.HeaderLocation.EndLine,
                 topDeclaration.HeaderLocation.EndColumn,
                 topDeclaration.Location.EndLine,
                 topDeclaration.Location.EndColumn),
        null,
        true);

      CheckLine(topDeclaration.Location.Line);

      // Get regions for members.

      def isProcessed(m)
      {
        m.modifiers == null 
        || !(m.Attributes %&& (NemerleModifiers.SpecialName | NemerleModifiers.Abstract))
      }
      
      match (topDeclaration)
      {
				| TopDeclaration.Interface     (methods = decls)
				| TopDeclaration.Class         (decls   = decls) 
				| Enum                         (decls   = decls)
				| TopDeclaration.VariantOption (decls   = decls)
				| TopDeclaration.Variant       (decls   = decls) =>
					foreach (member in decls.Filter(isProcessed))
					{
						| TypeDeclaration(td) => ProcessTopDeclaration(td)
						| Field 
						| Event 
						| EnumOption => 
							ProcessCustomAttributes(member);
							AddRegion(member.BodyLocation, true);
						| Property as p => ProcessProperty(p)
						| Function as f => ProcessFunction(f)
					}
				| _ => ()
      }
    }

    ProcessFunction(func : ClassMember.Function) : void
    {
		  ProcessCustomAttributes(func);
		  def headerLoc = func.header.Location;
		  if (headerLoc == Location.Default)
			  AddRegion(func.BodyLocation, true);
			else
			  AddRegion(headerLoc.FromEnd() + func.Location.FromEnd(), true);
			  
			when (func.body is FunBody.Parsed(expr))
			  ProcessExpr(expr);
    }

    ProcessProperty(prop : ClassMember.Property) : void
    {
		  ProcessCustomAttributes(prop);
		  if (prop.returnType == null)
			  AddRegion(prop.BodyLocation, true);
			else
			  AddRegion(prop.returnType.Location.FromEnd() + prop.Location.FromEnd(), true);
			  
			when (prop.getter is Some(f))
			  ProcessFunction(f);

			when (prop.setter is Some(f))
			  ProcessFunction(f);
    }

    ProcessDecls(decls : list[Decl]) : void
    {
      def usings = SCG.List();

      foreach (decl in decls)
      {
				| Decl.Type(ast) => ProcessTopDeclaration(ast)
				| Using as us => usings.Add(us); //when us.NameLocations.Exists(l => l.FileIndex == _fileIndex) 
				| Namespace(Decls = decls) as ns =>
          ProcessDecls(decls);
          AddHiddenRegion(ns.HeaderLocation.FromEnd() + ns.Location.FromEnd(), true);

				| _ => ()
      }

      when (usings.Count > 1)
      {
        mutable usingLoc;

        foreach (us in usings)
        {
          match (us.NameLocations.Find(l => l.FileIndex == _fileIndex))
          {
            | Some(loc) => 
              usingLoc = if (usingLoc.IsEmpty) loc else usingLoc.Combine(us.Location);

            | None      => ()
          }
        }

        when (!usingLoc.IsEmpty)
          AddHiddenRegion(Location(_fileIndex, usingLoc.Line, usingLoc.Column, 
                                   usingLoc.EndLine, _linesLenghts[usingLoc.EndLine]), 
                          null, false);
      }
    }

    _debug(obj : object) : void
    {
      when (obj != null)
        ignore(obj.ToString());
    }
  }
}
