using System;
using System.Collections.Generic;
using System.Text;

using System.Console;

namespace TestProjectTwo
{
  class SmallClass
  {
    public DelayedTExpr() : void
    {
      mutable foo = 1; // definition {30} foo
      def bar = 2; // definition {31} bar
      foo += bar; // usage {30} // usage {31}
      WriteLine(bar); // usage {31}
    }
    
    public NamesOverlap() : void
    {
      def foo = 1; // definition {32} foo
      _ = foo;
      def foo = 2; // definition {33} foo
      _ = foo + foo - foo;
      mutable bar = 1; // definition {34} bar
      while (bar < 10)
      {
        def foo = bar + 1; // definition {35} foo
        bar = foo + 1;
      }
    }
    
    public DoWhileMacro() : void
    {
      mutable foo = 0;  // definition {36} foo
      do {
        foo += 100; // usage {36}
      } while (foo < 1000); // usage {36}
    }

    public InsideMatch(): void
    {
      unless (false)
      {
        def choice = 1; // definition {37} choice
        match (choice) // usage {37}
        {
          | 1 =>
            def was = 13 + choice; // definition {38} was // usage {37}
            def bar = 1 - was; // definition {39} bar // usage {38}
            _ = bar; // usage {39}
          | _ => ()
        }
      }
    }
    
    public SimpleTuples(): void
    {
      def foo2 = (1, "hoho"); // definition {40} foo2
      WriteLine(foo2[1]); // usage {40}
      def (foo, bar) = foo2; // usage {40} // definition {41} foo // definition {42} bar
      WriteLine(foo); // usage {41}
      WriteLine(bar); // usage {42}
    }
    
    public FunctionParameter(foo: int): void // definition {43} foo
    {
      WriteLine(foo); // usage {43}
    }
    
    public LocalFunction(foo : int): void // definition {46} foo
    {
      def localFunction(bar : int) // definition {47}
      {
        WriteLine(bar) // usage {47}
      }
      
      def localFunction2(foo : int) // definition {48}
      {
        WriteLine(foo) // usage {48}
      }

      localFunction(foo); // usage {46}
    }
  }
  
  module SmallModule
  {
    Foo(x : object) : void
    {
      | x is int => Bar(x) // usage {44}
      | x is string => Bar(x) // usage {45}
    }

    Bar(_x : int) : void {} // definition {44} Bar
    Bar(_x : string) : void {} // definition {45} Bar
  }
}