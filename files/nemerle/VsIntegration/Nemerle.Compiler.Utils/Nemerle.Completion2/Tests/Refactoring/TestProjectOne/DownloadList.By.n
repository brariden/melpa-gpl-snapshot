using System;
using System.Collections.Generic;
using System.Text;

using System.Console;
using System.Net;
using System.IO;
using Nemerle.Utility;
using System.Threading;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Formatters.Soap;
using System.Security.Cryptography;
using System.Diagnostics;
using System.Text.RegularExpressions;

using System.IO.Compression;

namespace KoLXo3
{
  public partial class DownloadList
  {
    numberOfOpeningLinks: int = 1;

    remoteFolderForLinks: string = "http://www.magic-literal.by/info/";
    
    public OpenLinks(): void
    {
      mutable entries = loadList(SaveListsPath + "for_download.list"); // definition {9} entries
      repeat (numberOfOpeningLinks)
      {
        def url = entries.Head; // definition {8} url // usage {9}
        entries = entries.Tail; // usage {9} // usage {9}
        _ = Process.Start(remoteFolderForLinks + url); // usage {8}
      }
    }
    
    [Accessor]
    remoteFolderBelorussia: string = "http://magic-literal-baccka.by/get/";
    
    public GenerateHtmlFile(): void
    {
      def entries = loadList(SaveListsPath + "for_download.list") : list[string];
      def path = SaveListsPath + "for_download_from_by.html";
      WriteLine($"Generating HTML-file at path $path");
      def links = entries.Map(link => $"<a href = \"$remoteFolderBelorussia$link\">$(Localize(link))</a><br />");
      File.WriteAllLines(path, links.ToArray());
    }
    
    static proxies: list[IWebProxy];
    static mutable remainder: list[IWebProxy];
    static mutable banned: int = 0;
    
    static this()
    {
      proxies = File.ReadAllLines(SaveListsPath + "proxies.txt").Map(proxy => WebProxy($"http://$proxy/")).ToList();
      remainder = proxies;
    }
    
    getNewProxy(): IWebProxy
    {
      def proxy = remainder.Head;
      def proxyUri = proxy.GetProxy(Uri("http://void.ru/"));
      WriteLine($"Using proxy: $proxyUri");
      remainder = remainder.Tail;
      when (remainder.IsEmpty)
        remainder = proxies;
      proxy
    }
    
    public DownloadWithProxyRotation(): void
    {
      def entries = loadList(SaveListsPath + "for_download.list");
      unless (entries.IsEmpty)
      {
        def uri = entries.Head;
        if (downloadFile(RemoteFolderBelorussia + uri, SavePath + Localize(uri)))
          saveList(entries.Tail, SaveListsPath + "for_download.list");
        else
        {
          WriteLine($"Error downloading file at relative URI $uri");
          ++banned;
          when (banned > 4)
          {
            WriteLine("Banned times maximum exceeded, switching to a new proxy");
            client.Proxy = getNewProxy();
            banned = 0;
          }
        }
        // gm, doesn't work
        //def waitForDecency = 20;
        //WriteLine($"Waiting $waitForDecency s for decency...");
        //Thread.Sleep(waitForDecency);
      }
    }
    
    [Accessor]
    libraryGatherPath: string = @"H:\KoLXo3\";
    
    public GatherKoLXo3(): void
    {
      def entries = loadList(SaveListsPath + "all_entries_from_index.list");
      entries.Iter(entry =>
      {
        ExcludeFolders.Iter(folder =>
        {
          mutable source = folder + localWithSharp(entry);
          unless (File.Exists(source))
            source = folder + Localize(entry);
          def destination = LibraryGatherPath + Localize(entry);
          when (File.Exists(source))
          {
            
            WriteLine($"Found file at path $source, copying to path $destination");
            if (File.Exists(destination))
              WriteLine("Already exists");
            else
            {
              def directory = Path.GetDirectoryName(destination);
              unless (Directory.Exists(directory))
                _ = Directory.CreateDirectory(directory);
              File.Copy(source, destination);
              WriteLine("Copied");
            }
          }
        });
      });
    }
  }
}