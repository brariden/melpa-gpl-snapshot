using Nemerle.Compiler;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  module Relocation
  {
    public Relocate(this decl : Decl.Namespace, info : RelocationInfo) : void
    {
      assert(decl.Location.FileIndex == info.FileIndex);
      Relocate(decl : Decl, info);
      if (info.Begin.Line == 1 && info.Begin.Column == 1)
      { // Положение начала файла не должно изменяться даже если редактирование происходит в его начале!
        def x = decl;
        def start = Location(x.Location.FileIndex, 1, 1, 1, 1);

        x.HeaderLocation        = start;
        x.BodyOpenTokenLocation = start;
        x.Location              = start + x.BodyCloseTokenLocation;
      }
      else when (info.Begin == decl.Location.End)
      {
        def x = decl;
        def loc = Location(x.Location.FileIndex, TextPoint(1, 1), info.New);

        x.Location               = loc;
        x.BodyCloseTokenLocation = loc.FromEnd();
      }
    }

    Relocate(decl : Decl, info : RelocationInfo) : void
    {
      def loc = decl.Location;
      match (decl)
      {
        | GlobalAttribute => () //TODO: Add attribute support.
        | Using as x => 
          x.NameLocations = x.NameLocations.Map(Completion.Relocate(_, info));
          x.AliasLocation = Completion.Relocate(x.AliasLocation, info);

        | Namespace as x =>
          foreach (decl in x.Decls)
            Relocate(decl, info);
          x.NameLocations          = x.NameLocations.Map(Completion.Relocate(_, info));
          x.HeaderLocation         = Completion.Relocate(x.HeaderLocation, info);
          x.BodyOpenTokenLocation  = Completion.Relocate(x.BodyOpenTokenLocation, info);
          x.BodyCloseTokenLocation = Completion.Relocate(x.BodyCloseTokenLocation, info);

        | Type(ast) => (ast : ISupportRelocation).RelocateImpl(info);
        | None => ()
      }

      decl.Location = Completion.Relocate(loc, info);
    }
  } // module Relocation
} // namespace Nemerle.Completion2
