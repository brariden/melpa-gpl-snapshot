using System;
using System.Diagnostics;

using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    mutable _currentAsyncRequest : Nemerle.Compiler.Utils.Async.AsyncRequest;
    mutable _typesTreeVersion    : int;
    // NullReferenceException означет, что компилятор работает не в потоке AsyncWorker или нарушен паттерн 
    // реализации операций парсинга или типизации.
    public override IsStop : bool
    {
      get { _currentAsyncRequest.Stop } // _currentAsyncWorker mast be set!
    }

    public override TypesTreeVersion : int  { get { _typesTreeVersion } }

    protected override CreateComponentsFactory () : CompilerComponentsFactory
    {
      // Provide Abstract Factory to MethodBuilder and other compiler classes.
      Factories.IntelliSenseModeCompilerComponentsFactory ()
    }

    internal SetCompiletMessages (method : MethodBuilder, messages : SCG.List[CompilerMessage]) : void
    {
      _currentMethod   = method;
      _currentMessages = messages;
    }

    /// Return true if 'method' is extension method.
    protected override IsExtensionMethod (method : IMethod, tyVar : TypeVar) : bool
    {
      match (method.GetFreshType())
      {
        | (FixedType.Fun(from, _), _) => 
          match (from.Fix().GetFunctionArguments())
          {
            | paramMType :: _ => 
              def res = paramMType.TryProvide(tyVar);
              assert(true);
              res
              
            | _ => false
          }
        | _ => false
      }
    }
  
    protected override FullResetNamespaceTree() : void
    {
      // Ох-ох-ох! Старые имена (ParsedName) хранят ссылки на старое дерево. Если попытаться использовать их
      // то имена ищутся в нем.
      //def hierarchy = Hierarchy;
      //Hierarchy = hierarchy;
      ResetNamespaceTree();
    }

    public override ToString() : string { "Engine: prj=" + Options.OutputFileName }
  }
}