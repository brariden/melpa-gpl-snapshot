using System;
using System.Diagnostics;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;
using Nemerle.Imperative;
using Nemerle.Utility;

using SCG = System.Collections.Generic;
using Typed = Nemerle.Compiler.Typedtree;

namespace Nemerle.Completion2
{
  [Record(Exclude = [_flags])]
  public class CompletionElem
  {
    [Accessor]         _glyphType   : int;
    [Accessor]         _displayName : string;
    [Accessor]         _info        : string;
    [Accessor]         _overloads   : SCG.IList[Elem];
    [Accessor] mutable _flags       : CompletionElemFlags;

    public this(
      glyphType   : int, 
      displayName : string, 
      info        : string,
      overloads   : SCG.IList[Elem],
      flags       : CompletionElemFlags)
    {
      this(glyphType, displayName, info, overloads);
      _flags = flags;
    }

    public Description : string
    {
      get
      {
        def builder = Text.StringBuilder();

        when (Overloads != null)
          foreach (overload in Overloads)
          {
            | Local (value) => _ = builder.AppendLine(value.MakeHint());
            | Node(_, node) => _ = builder.AppendLine(node.MakeHint());
            | Member(member)
            | Overload (overload) with member = overload.Member =>
              _ = builder.AppendLine(member.ToString());

              def info = XmlDocReader.GetInfo(member, member.Location);

              when (info != null)
              {
                _ = builder.AppendLine(info.Summary);
                _ = builder.AppendLine();
              }

            | Overloads => assert(false);
            | Simple(_, info, _) => _ = builder.AppendLine(info);
          }

        builder.ToString().TrimEnd('\n', '\r')
      }
    }

    public override ToString() : string { _displayName }
  }
}
