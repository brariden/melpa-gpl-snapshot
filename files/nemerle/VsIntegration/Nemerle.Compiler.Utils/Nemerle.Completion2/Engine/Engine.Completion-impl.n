using System;
using System.IO;
using System.Diagnostics;

using SCG = System.Collections.Generic;
using SR  = System.Reflection;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;

using TT = Nemerle.Compiler.Typedtree;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;
using MethodBuilderEx = Nemerle.Completion2.Factories.IntelliSenseModeMethodBuilder;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    CompletionImpl([NotNull] source : IIdeSource, line : int, col : int) : array[CompletionElem]
    {
      def compileUnit = source.CompileUnit;

      when (compileUnit == null)
        return TopKeywords;

      // Find the declaration under text cursor.
      def decl = compileUnit.FindDecl(line, col);

      match (decl)
      {
        | GlobalAttribute => array(0) //TODO: Реализовать Completion в атрибутах!
        | Using as us     => CompleteInUsing    (us, line, col, source);
        | Namespace as ns => ComplateInParsedTypeAst(ns.Location, ns.InsideEnv, line, col, source);
        | Type(ast)       => CompleteInTopDeclaration(ast, source, line, col);
        | None            => assert(false);
      }
    }

    TryGetTypeBuilder(tyAst : TopDeclaration, line : int, col : int) : TypeBuilder
    {
      def project = this.Project;
      def builder =
        if (project != null)
        {
          def member = Project.CompileUnits[tyAst.Location.FileIndex].FindMember(line, col);
          match (member)
          {
            | Some(ClassMember.TypeDeclaration(td)) => td.TypeBuilder
            | Some(mem is ClassMember) => mem.DefinedIn?.TypeBuilder
            | _ => null
          }
        }
        else null;

      if (builder == null) TypeBuilderEx(Hierarchy, tyAst.DefinedIn?.TypeBuilder, tyAst, tyAst.PName.context.CurrentNamespace) // temporary
      else builder
    }

    CompleteInTopDeclaration(
      tyAst  : TopDeclaration,
      source : IIdeSource,
      line   : int,
      col    : int,
    )
      : array[CompletionElem]
    {
      unless (tyAst.Location.Contains(line, col))
        return TopKeywords;

      // комлешон возможен в:
      // 1. Модификаторах.
      // 2. Кастом-атрибутах.
      // 3. Описании списка базовых типов.
      // 4. Теле.
      // 5. В ограничениях (where ...)

      if (tyAst.BodyInnerLocation.Contains(line, col)) // complete in body...
      {
        def members = tyAst.GetMembers();

        match (members.Find(m => m.Location.Contains(line, col)))
        {
          | Some(member) => Complete(member, TryGetTypeBuilder(tyAst, line, col), source, line, col)
          | _ =>
            if (members.IsEmpty)
              TopKeywords
            else
            {
              def last = members.NLast();
              if (last.Location.End <= TextPoint(line, col))
                Complete(last, TryGetTypeBuilder(tyAst, line, col), source, line, col)
              else
                TopKeywords
            }
        }
      }
      else
      {
        if (tyAst.modifiers.CustomAttributesLocation.Contains(line, col))
        {
          //TODO: Реализовать дополнение в кастом-атрибутах!
          TopKeywords;
        }
        else
        {
          def modifiersLoc = tyAst.Location.FromStart() + tyAst.NameLocation.FromStart();

          if (modifiersLoc.Contains(line, col))
            TopKeywords //TODO: Возвратить список модификторов!
          else
            CompleteInTopDeclarationBaseTypes(tyAst, source, line, col)
        }
      }
    }

    CompleteInTypeRef(tyAst  : TopDeclaration, tyLoc : Location, source : IIdeSource, line : int, col : int) : array[CompletionElem]
    {
      def env        = tyAst.GetEnv(this.CoreEnv);
      def lexer      = GetLexer(source, tyLoc);
      def toks       = lexer.ReadAllTokens();
      def colonIndex = toks.FindIndex(tok => tok is Token.Operator(":"));

      when (colonIndex < 0)
        return TopKeywords;

      def whereIndex = toks.FindIndex(tok => tok is Token.Keyword("where"));
      def endLoc     = if (whereIndex >= 0) toks[whereIndex].Location.FromStart()
                       else toks.NLast().Location;
      def startLoc   = toks[colonIndex].Location.FromEnd();
      def loc        = startLoc + endLoc;
      def text       = source.GetRegion(loc);
      def result     = CompleteInTypeExpr(env, text, loc, line, col, TryGetTypeBuilder(tyAst, line, col));
      result
    }

    CompleteInTopDeclarationBaseTypes(
      tyAst  : TopDeclaration,
      source : IIdeSource,
      line   : int,
      col    : int,
    ) : array[CompletionElem]
    {
      def bodyLoc = tyAst.BodyLocation;
      def endLoc = if (bodyLoc == Location.Default) tyAst.Location.FromEnd() else bodyLoc.FromStart();
      def extendsLoc = tyAst.NameLocation.FromEnd() + endLoc;

      if (extendsLoc.Contains(line, col))
      {
        CompleteInTypeRef(tyAst, extendsLoc, source, line, col);
      }
      else
        TopKeywords
    }


    Complete(member : ClassMember, paren : TypeBuilder, source : IIdeSource, line : int, col : int) : array[CompletionElem]
    {
      def modsAndAttrsLoc = member.Location.FromStart() + member.NameLocation.FromStart();

      if (modsAndAttrsLoc.Contains(line, col))
        CompleteInMemberHeader(member, source, line, col)
      else match (member)
      {
        | ClassMember.Property        as prop   => CompleteInProperty(prop, paren, source, line, col)
        | ClassMember.Function        as func   => CompleteInFunction(func, paren, source, line, col)
        | ClassMember.Event           as aEvent => CompleteInEvent (aEvent, paren, source, line, col)
        | ClassMember.Field           as field  => CompleteInField  (field, paren, source, line, col)
        | ClassMember.TypeDeclaration(td)       => CompleteInTopDeclaration(td, source, line, col)
        | ClassMember.EnumOption                => TopKeywords //TODO: Реализовать дополнение в EnumOption!
      }
    }

    CompleteInMemberHeader(_member : MemberBase, _source : IIdeSource, _line : int, _col : int) : array[CompletionElem]
    {
      TopKeywords //TODO: Реализовать дополнение в заголовках!
    }

    CompleteInProperty(prop : ClassMember.Property, paren : TypeBuilder, source : IIdeSource, line : int, col : int) : array[CompletionElem]
    {
      match (prop)
      {
        | ClassMember.Property(getter = Some(f)) when f.BodyInnerLocation.Contains(line, col)
        | ClassMember.Property(setter = Some(f)) when f.BodyInnerLocation.Contains(line, col) =>
          CompleteInFunction(f, paren, source, line, col)

        | _ => CompleteInMember(prop.Env, source, paren, prop.Location, line, col);
      }
    }

    CompleteInField(field : ClassMember.Field, paren : TypeBuilder, source : IIdeSource, line : int, col : int) : array[CompletionElem]
    {
      if (field.BodyInnerLocation.Contains(source.FileIndex, line, col))
        CompleteInBody(MethodBuilderEx(paren, <[ decl: fake() : $(field.ParsedType) $(field.Initializer) ]>),
          field.BodyInnerLocation, source, line, col)
      else
        CompleteInMember(field.Env, source, paren, field.Location, line, col);
    }

    CompleteInEvent(prop : ClassMember.Event, paren : TypeBuilder, source : IIdeSource, line : int, col : int) : array[CompletionElem]
    {
      match (prop)
      {
        | ClassMember.Event(add    = f) when f.BodyInnerLocation.Contains(line, col)
        | ClassMember.Event(remove = f) when f.BodyInnerLocation.Contains(line, col) =>
          CompleteInFunction(f, paren, source, line, col)

        | _ => TopKeywords
      }
    }

    CompleteInFunction(func : ClassMember.Function, paren : TypeBuilder, source : IIdeSource, line : int, col : int) : array[CompletionElem]
    {
      if (func.BodyInnerLocation.Contains(line, col))
        CompleteInBody(MethodBuilderEx(paren, func),
          func.BodyInnerLocation, source, line, col)
      else
        CompleteInMember(func.Env, source, paren, func.Location, line, col);
    }

    CompleteInBody(methodBuilder : MethodBuilder, bodyInnerLocation : Location, source : IIdeSource, line : int, col : int) : array[CompletionElem]
    {
      def loc = bodyInnerLocation;
      def bodyCode = source.GetRegion(loc.Line, loc.Column, loc.EndLine, loc.EndColumn);
      def result   = RunCompletionEngine(methodBuilder, bodyCode, loc, line, col);

      if (result == null)
      {
        Trace.WriteLine("### RunCompletionEngine() return null!");
        ExpressionDefaultKeywords
      }
      else
        MakeCompletionList(result, true);
    }

    // -----------------------------------------------------------------------------------

    ///// Finds the innermost top level construction (namespace, class,
    ///// using, attribute) located at fileIndex, line, and col.
    //internal CompleteDeclarationBase(
    //            ast       : DeclarationBase,
    //            fileIndex : int,
    //            line      : int,
    //            col       : int,
    //  /*[NotNull]*/ source    : IIdeSource
    //)
    //  : array[CompletionElem]
    //{
    //  match (ast)
    //  {
    //    | fn is ClassMember.Function =>
    //      def bodyLocation = fn.BodyInnerLocation;
    //      if (bodyLocation.Contains(line, col))
    //        Completion(source, line, col)
    //      else
    //        ComplateInParsedTypeAst(ast, fileIndex, line, col, source)

    //    | _ => ComplateInParsedTypeAst(ast, fileIndex, line, col, source)
    //  }
    //}


    //internal ComplateInParsedTypeAst(
    //            ast       : DeclarationBase,
    //            line      : int,
    //            col       : int,
    //  /*[NotNull]*/ source   : IIdeSource
    //  )
    //  : array[CompletionElem]
    //{
    //  def fileIndex = source.FileIndex;
    //  def loc = ast.Location;
    //  def env = match (ast.TryGetEnv())
    //  {
    //    | Some(env) => env
    //    | _ =>
    //      match (ast)
    //      {
    //        | td is TopDeclaration when td.DefinedIn != null =>
    //          match (td.DefinedIn.TryGetEnv())
    //          {
    //            | Some(env) => env
    //            | _ => null
    //          }
    //        | _ => null
    //      }
    //  }
    //  if (env == null) array(0);
    //  else             ComplateInParsedTypeAst(loc, env, line, col, source)
    //}

    ComplateInParsedTypeAst(
                loc       : Location,
                env       : GlobalEnv,
                line      : int,
                col       : int,
      /*[NotNull]*/ source   : IIdeSource
      )
      : array[CompletionElem]
    {
      def fileIndex = source.FileIndex;
      //TODO: добиться чтобы в этом месте комплитился: N
      Debug.Assert(loc.FileIndex == fileIndex);
      def tryGetTypeEnforcementExpressionTokens() : bool * list[Token]
      {
        // Get all tokens of method...
        // Note: If method not wellformed it can take next methods
        // tokens or no take body tokens.
        def lex = GetLexer(source, loc);
        def toks = lex.ReadAllTokens(); // toks is array!
        // Fing near (to completion point) token index...
        mutable index = toks.FindIndex(fun(x : Token)
        {
          def loc = x.Location;
          loc.Contains(line, col) || loc.Line > line || loc.Line == line && loc.Column >= col
        });

        //DEBUG def (line, col) = (line, col);

        // If last token is ":" we should unconditionally compete types.
        if (index < 0 && toks.GetLast(null) is Token.Operator(":"))
          (true, [])
        else if (index < 0) // ":" not found
          (false, [])
        else // ":" found... process ompete...
        {
          // If last token location not on the completion point
          // or completion point at the start of last token location
          // we must ignore this token. Skip it...
          def lastToc = toks[index].Location;
          when (!lastToc.Contains(line, col)
            || lastToc.Line == line && lastToc.Column == col
          )
            index--; // Shift to the previos token location index...

          def findColonToken(i, lst) : bool * list[Token]
          { // scat tokens backward.
            def tok = if (i < 0) null else toks[i];
            match (tok)
            {
              | Operator(":")          => (true, lst)
              | Operator(".")          => findColonToken(i - 1, tok :: lst)
              | BeginBrace  | BeginQuote | BeginRound | CharLiteral | EndBrace
              | EndQuote | EndRound | FloatLiteral | Operator | Semicolon | null | EndOfFile
                                       => (false, []) // this tokens can't contains in type
              | _                      => findColonToken(i - 1, tok :: lst)
            }
          }

          if (index < 0)
            (false, [])
          else if (toks[index] is Keyword("override") || toks[index] is Keyword("using"))
            (false, [toks[index]])
          else
            // Get list of completion tokens. It can be situated on the interval
            // from colone token to toks[index]. If before toks[index] no
            // colon token it is not type enforcement expression.
            findColonToken(index, []);
        }
      }

      def completeTypeEnforcement(env : GlobalEnv, typeExpr : list[Token])
      {
        // Make fake expression and type it...
        //def prefix = "_ : ";
        def loc = if (typeExpr is []) Location(fileIndex, line, col, line, col)
                  else typeExpr.Head.Location + typeExpr.Last.Location;
        def typeName = if (typeExpr is []) "" else source.GetRegion(loc);
        def code = /*prefix +*/ typeName;
        def result = CompleteInTypeExpr(env, code, loc, line, col/* + prefix.Length*/);
        result
      }

      def completeOverrides()
      {
        def decl = this.Project.GetActiveDecl(fileIndex, line, col);

        match (decl)
        {
          | Type(ast)      => // Retrive overrides.
            def builder = ast.TypeBuilder;
            match (builder.SuperClass())
            {
              | Some(typeInfo) =>
                def virtMod = NemerleModifiers.VirtualityModifiers & ~NemerleModifiers.New;
                def allOverrides = typeInfo.GetMembers(SR.BindingFlags.Instance
                  | SR.BindingFlags.NonPublic
                  | SR.BindingFlags.Public).FilterLazy(m => m.Attributes %&& virtMod);
                def implemented = builder.GetMembers(SR.BindingFlags.Instance
                  | SR.BindingFlags.NonPublic
                  | SR.BindingFlags.Public
                  | SR.BindingFlags.DeclaredOnly).FilterLazy(m =>
                    m.Attributes %&& NemerleModifiers.Override);
                def canOverride = allOverrides.ExcludeLazy(implemented);
                def res = canOverride.MapToArray(e => CompletionElem(
                  (if (e is IProperty) GlyphType.Property else GlyphType.Method) :> int,
                  e.Name, "info not implemented", array[Elem.Member(e)],
                  CompletionElemFlags.ForOverriding));
                res;

              | _ => TopKeywords
            }
          | _               => TopKeywords
        }
      }

      def (ok, tokens) = tryGetTypeEnforcementExpressionTokens();

      if (ok)
        completeTypeEnforcement(env, tokens)
      else if (tokens is [Keyword("override")])
        completeOverrides()
      else if (tokens is [Keyword("using")])
      {
        def loc = tokens.Head.Location;
        def decl = Project.GetActiveDecl(fileIndex, loc.EndLine, loc.EndColumn);
        CompleteInUsing(decl :> Decl.Using, line, col, source);
      }
      else TopKeywords
    }

    /// Try compile method body, find completion token and build completion list.
    public RunCompletionEngine (
      /*[NotNull]*/         method             : MethodBuilder,
      /*[NotNull]*/         content            : string,
                        methodBodyLocation : Location,
                        completionMarkLine : int,
                        completionMarkChar : int
    )
      : CompletionResult
    {
      _comlitionLocation        = Location.Default;
      _isCompletionInProgress   = true;
      _completionParameterNames = [];
      CompletionMarkLine        = completionMarkLine;
      CompletionMarkChar        = completionMarkChar;

      try
      {
        _currentMessages = SCG.List(32);

        mutable completionList = null;
        def     content        = content + " ";
        def     lexer          = LexerCompletion (this, content, methodBodyLocation,
                                                  completionMarkLine, completionMarkChar);

        try
        {
          _ = ParseMethodBody(method, lexer);
          method.RunBodyTyper ();
        }
        catch
        {
          | e is CompletionResult =>
            completionList = e;
            _comlitionLocation = e.Location;

          | e => Trace.WriteLine (e.Message);
        }

        _currentMessages = null;

        completionList
      }
      finally
      {
        _isCompletionInProgress   = false;
        _completionParameterNames = [];
        CompletionMarkLine        = -1;
        CompletionMarkChar        = -1;
      }
    }

    public CompleteInTypeExpr (
      [NotNull] env                : GlobalEnv,
      [NotNull] content            : string,
                methodBodyLocation : Location,
                completionMarkLine : int,
                completionMarkChar : int,
                typeBuilder        : TypeBuilder = null,
    )
      : array[CompletionElem]
    {
        def result = CompleteType(env, content, methodBodyLocation, completionMarkLine, completionMarkChar, typeBuilder);

        if (result == null)
        {
          Trace.WriteLine("### RunCompletionEngine() (type enforcement completion) return null!");
          TopKeywords
        }
        else if ("void".StartsWithIgnoreCase(content) || content.TrimEnd() == "")
          MakeCompletionList(result).Append(CompletionElem(0, "void", "type System.Void", null));
        else MakeCompletionList(result)
    }

    public CompleteInMember(
      [NotNull] env                : GlobalEnv,
      [NotNull] source             : IIdeSource,
      [NotNull] parentType         : TypeBuilder,
                methodLocation     : Location,
                completionMarkLine : int,
                completionMarkChar : int
    )
      : array[CompletionElem]
    {
      try
      {
        def typeImplemented(env, implemented : list[PExpr])
        {
          foreach (impl in implemented)
          {
            match (impl)
            {
              | PExpr.Member(obj, Splicable.HalfId(name)) =>
                def ty = env.BindFixedType(obj);
                if (ty.IsInterface)
                {
                  def ti = ty.TypeInfo;
                  def elems = SCG.List();
                  def members = ti.LookupMember(name.Id, true);

                  foreach (m in members)
                    elems.Add(Elem.Member(m));

                  when (elems.Count > 0)
                    throw CompletionResult(elems, name.Id, name.Location, true);
                }
                else
                  _ = env.BindFixedType(impl);

              | PExpr.Member(expr, _)
              | PExpr.ToComplete as expr => _ = env.BindFixedType(expr)
              | _ => ()
            }
          }
        }

        _isCompletionInProgress  = true;
        _completionParameterNames = [];

         def lexer = GetCompletionLexer(source, methodLocation, completionMarkLine, completionMarkChar);
        //TODO: заменить "class" на распознование реального типа из parentType!
        def members = MainParser.ParseMember(env, lexer, "class");

        if (members != null && members.Count > 0)
        {
          match (members.NLast())
          {
            | Function as func =>
              def bulder = MethodBuilderEx(parentType, func);
              typeImplemented(env, bulder.Ast.ParsedImplemented);

            | Property as prop =>
              def bulder = PropertyBuilder(parentType, prop);
              typeImplemented(env, bulder.Ast.ParsedImplemented);

            | Field as field =>
              _ = FieldBuilder(parentType, field);

            //TODO: реализовать создание билдеров для всех типов членов!
            | _ => ()
          }

          def keywords = match (members[0])
            {
              | Function         => ["where", "implements"]
              | Property | Field => ["implements"] // Field can be not finished Property.
              | _                => TopKeywordsStrs
            };

          StrsToCompletionElems(keywords, GlyphType.Snippet :> int, "keyword")
        }
        else TopKeywords

      }
      catch { | e is CompletionResult => _comlitionLocation = e.Location; Engine.MakeCompletionList(e) }
      finally { _isCompletionInProgress = false; _completionParameterNames = []; }
    }

    public CompleteType (
      [NotNull] env                : GlobalEnv,
      [NotNull] content            : string,
                methodBodyLocation : Location,
                completionMarkLine : int,
                completionMarkChar : int,
                typeBuilder        : TypeBuilder = null,
    )
      : CompletionResult
    {
      _isCompletionInProgress   = true;
      _completionParameterNames = [];

      try
      {
        _currentMessages = SCG.List(32);

        mutable completionList = null;
        def     content        = content + " ";
        def     lexer          = LexerCompletion (this, content, methodBodyLocation,
                                                  completionMarkLine, completionMarkChar);

        try
        {
          def pExprs = MainParser.ParseCommaSeparatedExprList(env, lexer, false);
          foreach (pExpr in pExprs)
          {
            def x =
              if (typeBuilder == null)
                env.BindFixedType(pExpr) //FixMe: Надо использовать BindType (не Mono)!
              else
                typeBuilder.BindFixedType(pExpr);

            _ = x;
          }
        }
        catch
        {
          | e is CompletionResult => _comlitionLocation = e.Location; completionList = e;
          | e => Trace.WriteLine (e.Message);
        }

        _currentMessages = null;

        completionList
      }
      finally { _isCompletionInProgress = false; _completionParameterNames = []; }
    }

    private ParseMethodBody(method : MethodBuilder, lexer : LexerBase) : FunBody.Parsed
    {
      def header = method.GetHeader();
      def env    = if (method.Env != null) method.Env else method.DeclaringType.GlobalEnv;
      def body   = FunBody.Parsed(MainParser.ParseExpr(env, lexer, method.Ast.header));

      header.body = body;
      body
    }

    /// Get lexer for some range in source file.
    /// The range specified by loc parameter.
    // Note: All locations strat at start point of loc.
    public GetLexer(source : IIdeSource, loc : Location) : LexerBase
    {
      def code = source.GetRegion(loc);
      def lex = LexerString(this, code, loc);
      //lex.BeginParseFile();
      lex.Keywords = lex.Manager.CoreEnv.Keywords;
      lex
    }

    /// Get completion lexer for some range in source file.
    /// The range specified by loc parametr.
    // Note: All locations strat at start point of loc.
    public GetCompletionLexer(
      source : IIdeSource,
      loc : Location,
      completionMarkLine : int,
      completionMarkChar : int
    )
      : LexerBase
    {
      def code = source.GetRegion(loc);
      def lex = LexerCompletion(this, code, loc, completionMarkLine, completionMarkChar);
      //lex.BeginParseFile();
      lex.Keywords = lex.Manager.CoreEnv.Keywords;
      lex
    }
    static UsingLen          : int = 5;

    /// Complete word inside the using directive.
    CompleteInUsing(us : Decl.Using, line : int, col : int, source : IIdeSource) : array[CompletionElem]
    {
      def loc = us.Location;

      if (us.Name is []) // using directive with empty namspace name
      {
        if (loc.Line == line && col <= loc.Column + UsingLen)
          TopKeywords // completion on the end of "using" keyword
        else
        {
          //def curNs = us.BeforeEnv.CurrentNamespace;
          //def rootNs = us.BeforeEnv.NameTree.NamespaceTree;
          //def nss = if (curNs : object != rootNs) rootNs :: curNs :: us.BeforeEnv.OpenNamespaces
          //          else                 rootNs :: us.BeforeEnv.OpenNamespaces;
          //GetCompletionElems(nss, null, false)
          def topNs = us.BeforeEnv.NameTree.NamespaceTree;
          def resalt = SCG.List();
          foreach (ns in us.BeforeEnv.OpenNamespaces)
            GetCompletionElems(resalt, ns, null, false);
          GetCompletionElems(resalt, topNs, null, false);
          resalt.ToArray();
          //GetCompletionElems(us.BeforeEnv.NameTree.NamespaceTree, null, false)
        }
      }
      else
      {
        def first = us.NameLocations.Head;

        //TODO: Use lexer.ReadAllTokens() to compute all type tokens!
        def tyLoc = Location(first, first.Line, first.Column, line, col);
        def text = source.GetRegion(tyLoc);
        def result = CompleteInTypeExpr(us.BeforeEnv, text, tyLoc, tyLoc.EndLine, tyLoc.EndColumn);
        result
      }
    }
  } // end class Engine
} // end namespace
