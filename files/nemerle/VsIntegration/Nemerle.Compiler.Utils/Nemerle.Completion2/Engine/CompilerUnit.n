using System;
using System.Collections.Generic;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;

namespace Nemerle.Completion2
{
  [Record]
	public class CompileUnit
	{
	  public TopNamespace          : Decl.Namespace                       { get; private set; }
	  public TopDeclarations       : list[TopDeclaration]                 { get; private set; }
	  public Regions               : list[Region]                         { get; private set; }
    public ParseCompilerMessages : array[CompilerMessageForCompileUnit] { get; private set; }
    /// First element have a fake line (this array indexed at 1).
    public LinesLengths          : array[int]                           { get; private set; }
    public SourceVersion         : int                                  { get; private set; }
    public FileIndex             : int                                  { get; private set; }
    public LinesCount            : int                                  { get { LinesLengths.Length - 1 } }
    public CommentLocations      : System.Collections.Generic.List[Location * string * bool] {get; private set; }

    public override ToString() : string
    {
      def file = IO.Path.GetFileName(Location.GetFileName(FileIndex));
      $"$(GetType().Name) $file"
    }

    /// Finds the innermost top level construction (namespace, class,
    /// using, attribute) located at fileIndex, line, and col.
    public FindDecl(line : int, col : int) : Decl
    {
      TopNamespace.FindDecl(line, col)
    }

    public FindMember(line : int, col : int) : option[DeclarationBase]
    {
      def decl = TopNamespace.FindDecl(line, col);

      match (decl)
      {
        | Type(td) => 
          match (td.FindMember(line, col))
          {
            | Some as m => m
            | None      => Some(td)
          }

        | _        => None()
      }
    }

    public GetMatchingBraces(fileIndex : int, line : int, col : int, first : out Location, last : out Location) : bool
    {
      assert2(FileIndex == fileIndex);

      def reg = this.Regions.FindObject(r => r.Location.Line == line || r.Location.EndLine == line);

      if (reg != null) // region...
      {
        def loc = reg.Location;
        first   = Location(FileIndex, loc.Line, loc.Column, loc.Line, loc.Column + 1);
        last    = Location(FileIndex, loc.EndLine, loc.Column - 10, loc.EndLine, loc.Column);
        true
      }
      else match (FindDecl(line, col))
      {
        | Decl.Namespace as n when n.BodyCloseTokenLocation != Location.Default =>
          if (n.BodyOpenTokenLocation.Contains(line, col) || n.BodyCloseTokenLocation.Contains(line, col))
          {
            first = n.BodyOpenTokenLocation;
            last  = n.BodyCloseTokenLocation;
            true
          }
          else false

        | Decl.Type(td) when td.BodyCloseTokenLocation != Location.Default =>
          if (td.BodyOpenTokenLocation.Contains(line, col) || td.BodyCloseTokenLocation.Contains(line, col))
          {
            first = td.BodyOpenTokenLocation;
            last  = td.BodyCloseTokenLocation;
            true
          }
          else false

        | _ => false
      }
    }
	}
}
