using System;
using System.IO;
using System.Diagnostics;
using SCG = System.Collections.Generic;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;

using Typed = Nemerle.Compiler.Typedtree;
using SR = System.Reflection;

namespace Nemerle.Completion2
{
  internal partial class Engine : ManagerClass
  {
    /// Content of current namespace.
    mutable _decls : list[Decl] = [];
    /// Content namespace stack.
    _namespaces : Stack[list[Decl]] = Stack();
    //// Cutent parsing file index.
    //mutable _fileIndex : int;
    //[Accessor]
    mutable _compileUnits : array[CompileUnit] = null;

    private UsingDirectiveParsed(
      location      : Location,
      name          : list [string],
      nameLocations : list [Location],
      alias         : string,
      aliasLocation : Location,
      beforeEnv     : GlobalEnv,
      afterEnv      : GlobalEnv
      ) : void
    {
      _decls ::= Decl.Using(location, name, nameLocations, 
        alias, aliasLocation, beforeEnv, afterEnv);
    }

    private BeforeNamespaceParse() : void
    {
      _namespaces.Push(_decls);
      _decls = [];
    }

    private AfterNamespaceParse(
      location               : Location,
      name                   : list [string],
      nameLocations          : list [Location],
      outsideEnv             : GlobalEnv,
      insideEnv              : GlobalEnv,
      headerLocation         : Location,
      bodyOpenTokenLocation  : Location,
      bodyCloseTokenLocation : Location,
      ) : void
    {
      // Save content of current namespace
      def currentNsDecls = _decls;
      def decls = _namespaces.Pop(); // Pop parent namespace declarations
      // Create new namespace info and add it to parent namespace declarations
      _decls = Decl.Namespace(location, currentNsDecls, name, nameLocations, outsideEnv, insideEnv, 
        headerLocation, bodyOpenTokenLocation, bodyCloseTokenLocation, null) :: decls;
    }
  } // end class Engine
} // end namespace

