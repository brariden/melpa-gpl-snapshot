using System;
using System.IO;
using System.Diagnostics;
using SCG = System.Collections.Generic;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using Nemerle.Compiler.Utils;
using Typed = Nemerle.Compiler.Typedtree;
using SR = System.Reflection;
using Nemerle.Completion2;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    public BeginGetGotoInfoForMember(memberName : string, forPartialName : bool, kind : GotoKind) : GotoInfoForMemberAsyncRequest
    {
      def request = GotoInfoForMemberAsyncRequest(
        AsyncRequestType.GetGotoInfoForMember, this, null, GetGotoInfoForMember, 
        memberName, forPartialName, kind);
      request.GotoInfos = array(0);
      AsyncWorker.AddWork(request);
      request
    }

    public GetGotoInfoForMember(memberName : string, forPartialName : bool, kind : GotoKind) : array[GotoInfo]
    {
      def request = BeginGetGotoInfoForMember(memberName, forPartialName, kind);
      _ = request.AsyncWaitHandle.WaitOne(); //10_000
      request.GotoInfos
    }

    private GetGotoInfoForMember(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();

      surroundwith (currentAsyncRequest)
      try
      {
        if (IsBuildTypesTreeInProgress)
          AsyncWorker.AddWork(request);
        else
        {
          def project = this.Project;

          if (project == null)
          {
            _ = BeginBuildTypesTree();
            AsyncWorker.AddWork(request);
          }
          else
          {
            def req = request :> GotoInfoForMemberAsyncRequest;
            req.GotoInfos = 
              match (req.Kind)
              {
                | Definition          => 
                  match (project.FindMember(req.MemberName, req.ForPartialName))
                  {
                    | Some(member) => array[GotoInfo(member)]
                    | _            => array(0)
                  }
                  
                | Usages              => assert(false);
                | UsagesInCurrentFile => assert(false);
                | _                   => array(0)
              };
            
            request.MarkAsCompleted();
          }
        }
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The GetGotoInfoForMember operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
    }
  } // end class Engine
} // end namespace
