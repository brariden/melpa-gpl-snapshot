using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Reflection.BindingFlags;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using MethodBuilderEx = Nemerle.Completion2.Factories.IntelliSenseModeMethodBuilder;
using SCG             = System.Collections.Generic;

namespace Nemerle.Completion2
{
	internal partial class Engine
	{
    public Completion(source : IIdeSource, line : int, column : int) : CompletionAsyncRequest
    {
      def request = BeginCompletion(source, line, column);
      _ = request.AsyncWaitHandle.WaitOne();
      request
    }

    public BeginCompletion(source : IIdeSource, line : int, column : int) : CompletionAsyncRequest
    {
      def request = CompletionAsyncRequest(this, source, line, column);
      AsyncWorker.AddWork(request);
      request
    }
	
    internal Completion(request : AsyncRequest) : void
    {
      def request = request :> CompletionAsyncRequest;
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();

      surroundwith (currentAsyncRequest)
      try
      {
        //when (IsDefaultEngine)
        //{
          //TODO: Реализовать выдачу всех токенов из открытых файлов для работы без проекта
          //return;
        //}

        //TODO: Может быть тут нужно проверять IsBuildTypesTreeInProgress и строить дерево типов, если его нет?
        
        _comlitionLocation = Location.Default;
        request.CompletionElems = CompletionImpl(request.Source, request.Line, request.Column);
        request.ComlitionLocation = _comlitionLocation;
        request.MarkAsCompleted();
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The Completion operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
    }
  }
}
