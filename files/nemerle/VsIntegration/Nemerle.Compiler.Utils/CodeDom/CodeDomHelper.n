using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections;
using System.IO;
using System.Reflection;

using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler.Utils
{
  public module CodeDomHelper
  {
    public IsPartial(attrs: NemerleModifiers): bool
    {
      attrs %&& NemerleModifiers.Partial
    }

    public GetMemberAttributes(attrs: NemerleModifiers, field: bool = false): MemberAttributes
    {
      mutable res: MemberAttributes;

      when(attrs %&& NemerleModifiers.Static) res |= MemberAttributes.Static;
      when(attrs %&& NemerleModifiers.Public) res |= MemberAttributes.Public;
      when(attrs %&& NemerleModifiers.Private) res |= MemberAttributes.Private;

      if(attrs %&& NemerleModifiers.Internal && attrs %&& NemerleModifiers.Protected)
        res |= MemberAttributes.FamilyOrAssembly
      else
      {
        when(attrs %&& NemerleModifiers.Internal) res |= MemberAttributes.FamilyAndAssembly;
        when(attrs %&& NemerleModifiers.Protected) res |= MemberAttributes.Family;
      }

      when(field && !(attrs %&& NemerleModifiers.Mutable)) res |= MemberAttributes.Const;

      when(attrs %&& NemerleModifiers.New) res |= MemberAttributes.New;
      when(attrs %&& NemerleModifiers.Override) res |= MemberAttributes.Override;
      when(attrs %&& NemerleModifiers.Sealed) res |= MemberAttributes.Final;
      when(attrs %&& NemerleModifiers.Virtual) res |= MemberAttributes.VTableMask;

      when(res == 0)
      {
        if(field)
          res |= MemberAttributes.Private
        else
          res |= MemberAttributes.Assembly
      }

      res;  
    }

    public GetTypeAttributes(attrs: NemerleModifiers): TypeAttributes
    {
      if(attrs == NemerleModifiers.None)
        TypeAttributes.NotPublic;
      else
      {
        mutable res: TypeAttributes = 
          if(attrs %&& NemerleModifiers.Public) 
            TypeAttributes.Public
          else
            TypeAttributes.NotPublic;
 
        when(attrs %&& NemerleModifiers.Abstract) res |= TypeAttributes.Abstract;
        when(attrs %&& NemerleModifiers.Sealed) res |= TypeAttributes.Sealed;
        when(attrs %&& NemerleModifiers.SpecialName) res |= TypeAttributes.SpecialName;
        res;
      }
    }

    public GetLinePragma(expr: TExpr) : CodeLinePragma
    {
      def loc = expr.Location;
      CodeLinePragma(loc.File,loc.Line)
    }

    public MapFilterByType[T1,T2](this collection: SCG.IEnumerable[T1]) : list[T2]
    {
      def res = SCG.List();
      foreach(e is T2 in collection)
        res.Add(e);

      res.NToList()
    }

    public MapFilterByType[T2](this collection: IEnumerable) : list[T2]
    {
      def res = SCG.List();
      foreach(e is T2 in collection)
        res.Add(e);

      res.NToList()
    }

    public StringToListOfLines(s: string) : SCG.List[string]
    {
      def res = SCG.List();
      
      using(def sr = StringReader(s))
        for(mutable s1 = sr.ReadLine(); s1 != null; s1 = sr.ReadLine())
          res.Add(s1);
      
      res
    }

    // Debug output method
    public ToString(unit: CodeCompileUnit, generator: ICodeGenerator) : string 
    {
      mutable s : string = null;
      using (def sw = StringWriter())
      {
        //def codeGen = NemerleCodeGenerator() : ICodeGenerator;
        generator.GenerateCodeFromCompileUnit(unit,sw,null);
        s = sw.ToString();
      }
      s
    }

    public PrintMacro(the_macro: IMacro) : string
    {
      $"[Macro:\n GetName = $(the_macro.GetName())\n"
        " GetNamespace () = $(the_macro.GetNamespace ())\n"
        " Keywords = $(the_macro.Keywords)\n"
        " Usage = $(the_macro.Usage)\n";
        //" SyntaxExtension = $(the_macro.SyntaxExtension())]";
    }
  }
}
