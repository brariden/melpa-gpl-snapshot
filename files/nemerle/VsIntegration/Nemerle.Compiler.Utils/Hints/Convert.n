using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Nemerle.Imperative;
using Nemerle.Collections;

namespace Nemerle.Compiler.Utils
{
  [Record]
	public class Convert
  {
    public ExpandTypeArgs : bool { get; set; }
    public ConvertTypeName  : FixedType * string -> string { get; set; }
    public AddNamespaces    : bool { get; set; }
    
    [RecordIgnore] mutable _recursionLevel : int;
    
    public this() { AddNamespaces = true; ExpandTypeArgs = true; }
    
    CheckRecursionLevel() : void
    {
      assert(_recursionLevel < 20);
      _recursionLevel++;
    }
    
    LookupName(ty : FixedType, name : string) : string
    {
      if (ConvertTypeName == null) name
      else ConvertTypeName(ty, name)
    }
  
    public TypeVarToString(typeVar : TypeVar, expandTypeArgs : bool) : string
    {
      def oldValue = ExpandTypeArgs;
      ExpandTypeArgs = expandTypeArgs;
      def res = TypeVarToString(typeVar);
      ExpandTypeArgs = oldValue;
      res
    }

    public FixedTypeToString(fixedType : FixedType, expandTypeArgs : bool) : string
    {
      def oldValue = ExpandTypeArgs;
      ExpandTypeArgs = expandTypeArgs;
      def res = FixedTypeToString(fixedType);
      ExpandTypeArgs = oldValue;
      res
    }

    public FixedClassTypeToString(fixedType : FixedType.Class, expandTypeArgs : bool) : string
    {
      def oldValue = ExpandTypeArgs;
      ExpandTypeArgs = expandTypeArgs;
      def res = FixedClassTypeToString(fixedType);
      ExpandTypeArgs = oldValue;
      res
    }
    
    public TypeVarToString(typeVar : TypeVar) : string
    {
      | mTy is FixedType => FixedTypeToString(mTy)
      | ty =>
        match (ty.Hint)
        {
          | Some(mTy) => FixedTypeToString(mTy)
          | None => "?"
        }
    }
    
    public FixedTypeToString(fixedType : FixedType) : string
    {
      CheckRecursionLevel();
      try 
      {
        match(fixedType)
        {
          | Class as cls      => FixedClassTypeToString(cls)
          | StaticTypeVarRef(s)       => s.ToString()
          | Fun(t1, t2)       => $ "$(TypeVarToString(t1)) -> $(TypeVarToString(t2))"
          | Tuple(lst)        => $<#(..$(lst; " * "; TypeVarToString))#>
          | Ref(t)            => $ "ref $(TypeVarToString(t))"
          | Out(t)            => $ "out $(TypeVarToString(t))"
          | Array(t, 1)       => $<#$(LookupName(fixedType, "array"))[$(TypeVarToString(t))]#>
          | Array(t, n)       => $<#$(LookupName(fixedType, "array")).$n[$(TypeVarToString(t))]#>
          | Void              => LookupName(fixedType, "void")
          | Intersection(lst) => $<#(ambiguity: ..$(lst; " | "; TypeVarToString))#>
        }
      }
      finally { _recursionLevel--; }
    }
    
    public FixedClassTypeToString(fixedType : FixedType.Class) : string
    {
      CheckRecursionLevel();
      try 
      {
        def (ti, tyArgs) = fixedType;
        def simpleTypeToStr(ti, fixedType) : string
        {
          def trim = ti.FullName.Replace ("Nemerle.Core.", "");
          def res  = 
            match (trim) 
            {
              | "System.Byte"     => "byte"
              | "System.SByte"    => "sbyte"
              | "System.Int16"    => "short"
              | "System.UInt16"   => "ushort"
              | "System.Int32"    => "int"
              | "System.UInt32"   => "uint"
              | "System.Int64"    => "long"
              | "System.UInt64"   => "ulong"
              | "System.Single"   => "float"
              | "System.Double"   => "double"
              | "System.Decimal"  => "decimal"
              | "System.String"   => "string"
              | "System.Object"   => "object"
              | "System.Boolean"  => "bool"
              | "System.Char"     => "char"
              | _                 => null
            };
          
          if (res == null || ConvertTypeName == null) res
          else ConvertTypeName(fixedType, res)
        }
         
        when (tyArgs.IsEmpty)
        {
          def simple = simpleTypeToStr(ti, fixedType);
          when (simple != null)
            return simple;
        }
          
        def getNamespace(ti : TypeInfo) : string
        {
          //ti.NamespaceNode.Parent.GetDisplayName()
          match (ti.NamespaceNode.Parent.FullName)
          {
            | ["Nemerle", "Core", "list"]
            | ["Nemerle", "Core", "list", "Nil"]
            | ["Nemerle", "Core", "list", "Cons"] => "list"
            | "Nemerle" :: "Core" :: name | name  => $<#..$(name; ".")#>
          }
        }
        
        def tyMap = HintHelper.MakeTyParamsToTyArgsMap(ti.Typarms, tyArgs, Hashtable());
        def tyToStr(tyParamBame : string)
        {
          TypeVarToString(tyMap[tyParamBame])
        }
        def makeStrForType(curTi : TypeInfo) : string * _
        {
          def (prefix, usedTyParams) = 
            if (curTi.DeclaringType != null) makeStrForType(curTi.DeclaringType)
            else if (AddNamespaces)          (getNamespace(curTi), List()); // (ns, [])
            else                             ("", List()); // (ns, [])
          def tyParmsNames  = curTi.Typarms.MapLazy(_.Name);
          def unusdTyParams = tyParmsNames.ExcludeLazy(usedTyParams);
          def name          =
            if (ConvertTypeName == null) curTi.Name
            else if (curTi.Equals(ti)) ConvertTypeName(fixedType, curTi.Name)
            else ConvertTypeName(FixedType.Class(curTi, unusdTyParams.Map(x => tyMap[x])), curTi.Name);
          def nameWithTyArg = 
            if (unusdTyParams.IsEmpty()) name
            else if (ExpandTypeArgs) $<#$name[..$(unusdTyParams; ", "; tyToStr)]#>
            else                     $<#$name[..$unusdTyParams]#>;

          usedTyParams.AddRange(tyParmsNames);
          
          if (prefix.IsNullOrEmpty()) 
            (nameWithTyArg, usedTyParams)
          else 
            ($"$prefix.$nameWithTyArg", usedTyParams)
        }
        
        makeStrForType(ti)[0]
      }
      finally { _recursionLevel--; }
    }
  }
}
