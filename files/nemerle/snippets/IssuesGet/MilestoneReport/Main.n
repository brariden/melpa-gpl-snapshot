using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using IssuesGet;

namespace MilestoneReport
{

  module Program
  {
    Main(parms : array[string]) : void
    {
      def miles = if (parms.Length != 0) parms else ["Nemerle 1.1 for .Net 4.0 and VS 2010"];
      WriteLine("Getting issues from repo ...\n");
      def getter = IssuesGetter("rsdn", "Nemerle");
      def issues = getter.GetIssues();
      def only_mile = issues.Where(x => x.Milestone != null);
      foreach (m in miles)
      {
        def count = only_mile.Count(x => x.Milestone.Title == m);
        if (count == 0) WriteLine($"Warning Milestone $m have no issues!!!"); else
          WriteLine($"Milestone $m Issues: $count");
      }
      def founded = only_mile.Where(x => miles.Exists(y => x.Milestone.Title == y));
      def issues = founded.Where(x => x.PullRequest == null && !x.Labels.Exists(_ == "Not a bug"));
      def issues = issues.OrderBy(_.ClosedAt);
      def issues = issues.Map(x => (x, x.Labels));

      def unused = ["Installer"];
      def altern = [("Lib", ["Snippet", "Macro"]), ("Compiler", ["C# support"])];
      def prod   = ["Compiler", "VS 2010", "Lib", "Compiler API", "VS 2008"];
      def sub    = ["Feature", "Bug"];

      def filtered = issues.Map((x, y) => (x, y.Filter(x => !unused.Exists(_ == x))));

      def merge_labels(y, x)
      {
        def check_label(n)
        {
          match (altern.Find((_, y) => y.Exists(_ == n)))
          {
            | Some((x, _)) => x
            | _            => n
          }
        }

        def labels = x.Map(check_label);
        def labels = labels.Distinct();
        (y, labels.ToArray())
      }

      def filtered = filtered.Map(merge_labels);

      def get_prod((_, x), prod)
      {
        match (x.Find(x => prod.Exists(_ == x)))
        {
          | Some(v) => v
          | _       => ""
        }
      }

      def by_prod = prod.Map(x => (x, filtered.Filter((_, y) => y.Exists(_ == x))));
      def other   = filtered.Filter((_, y) => !y.Exists(x => prod.Exists(_ == x)));
      def by_prod = if (other is []) by_prod else by_prod + [("No product", other)];
      def writer = CombineWriter(OutReportWriter(), TextFileWriter("issues.txt"), HtmlFileWriter("issues.html"));
      def mile = miles.First();
      writer.BeginWrite($"$mile Closed Issues Report");
      foreach ((prod, iss) in by_prod)
      {
        writer.WriteProduct(prod);
        def group = iss.GroupBy(get_prod(_, sub)).OrderBy(_.Key);
        foreach (g in group) 
        {
          writer.WriteCategory(g.Key);
          foreach ((i, _) in g with idx)
            writer.WriteIssue(idx + 1, i);
          writer.WriteLine();
          writer.EndCategory();
        }
        writer.WriteLine();
      }
      writer.EndWrite();
    }
  }

}
