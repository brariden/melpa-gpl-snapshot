using System;
using System.Console;
using Nemerle.Collections;
using Nemerle.Json;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace IssuesGet
{

  module JsonUtils
  {

    public GetTime(this obj : JObject) : DateTime
    {
      if (obj.IsNull()) DateTime.MinValue else
      {
        def str = obj.GetString();
        DateTime.Parse(str)
      }
    }

    public GetString(this obj : JObject) : string
    {
      | JObject.Value(JValue.Null) => null
      | JObject.Value(val)         => val.GetString()
      | x                          => x.ToString()
    }

    public GetInt(this obj : JObject) : int
    {
      | JObject.Value(JValue.Number(val)) => val :> int
      | _                                 => throw InvalidDataException("value is not integer in json JObject")
    }

    public GetString(this obj : JValue) : string
    {
      | JValue.Null => null
      | _           => def str = obj.ToString(); 
                       def str = str.Replace(<#\"#>, <#"#>);
                       if (str[0] == '"' && str.Last() == '"') 
                       {
                         def str = str.Skip(1).Take(str.Length - 2).ToArray();
                         string(str)
                       } else str
    }

    public IsNull(this obj : JObject) : bool
    {
      | JObject.Value(JValue.Null) => true
      | _                          => false
    }

    public GetArray[T](this obj : JObject, func : JObject -> T) : list[T]
    {
      match (obj)
      {
        | JObject.Array(lst) => lst.Map(func)
        | _                  => throw InvalidDataException("value is not array in json JObject")
      }
    }

    public Get[T](this obj : JObject, func : Dictionary[string, JObject] -> T) : T where T : class
    {
      match (obj)
      {
        | Object(lst) => func(lst.ToDictionary((x, _) => x, (_, y) => y))
        | _           => null
      }
    }

    public Get(this obj : JObject, name : string) : JValue
    {
      match (obj)
      {
        | JObject.Object(items)           =>
            match (items.Find((x, _) => x == name))
            {
              | Some((_, JObject.Value(v))) => v
              | _                           => throw InvalidDataException("key not found in json Object")
            }
        | JObject.Value(JValue.Null as j) => j
        | _                               => throw InvalidDataException("invalid value in json Object")
      }
    }

  }

}