using Nemerle.Json;
using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Linq;
using Nemerle.Extensions;

namespace IssuesGet
{

  public class IssuesGetter
  {
    repo : string;
    curl : string;

    public this(user : string, repo : string, curl_path : string = "curl") 
    {
      this.repo = $"$user/$repo";
      this.curl = curl_path;
    }

    CreateString(page : int, closed : bool) : string
    {
      def closed = if (closed) "closed" else "open";
      $"https://api.github.com/repos/$repo/issues?page=$page&per_page=100&state=$closed"
    }

    public static IssueFromObject(obj : Dictionary[string, JObject]) : Issue
    {
      def title   = obj["title"].GetString();
      def updated = obj["updated_at"].GetTime();
      def opened  = obj["state"].GetString() == "open";
      def user    = obj["user"].Get("login").GetString();
      def num     = obj["number"].GetInt();
      def assign  = obj["assignee"].Get("login").GetString();
      def mile    = obj["milestone"];
      def mile    = if (mile.IsNull()) null else IssueMilestone(mile.Get("title").GetString(), mile.Get("state").GetString() == "open");
      def created = obj["created_at"].GetTime();
      def closed  = obj["closed_at"].GetTime();
      def labels  = obj["labels"].GetArray(x => x.Get("name").GetString());
      def url     = obj["html_url"].GetString();
      def pull    = obj["pull_request"].Get("html_url").GetString();
      Issue(updated, title, opened, user, num, assign, mile, created, closed, labels, url, pull)
    }

    public static IssueFromObject(obj : JObject) : Issue
    {
      obj.Get(IssueFromObject)
    }

    public GetIssues(obj : IEnumerable[JObject]) : IEnumerable[Issue]
    {
      obj.Select(IssueFromObject)
    }

    public GetIssues(closed : bool = true) : IEnumerable[Issue]
    {
      def obj = GetObjects(closed);
      GetIssues(obj)
    }

    public GetObjects(closed : bool = true) : IEnumerable[JObject]
    {
      def parser = JsonParser();
      def data = StringBuilder();
      def func = (_, x) => _ = data.Append(x.Data);

      def run_process(page)
      {
        def process = Process() <-
        {
          StartInfo <-
          { 
            FileName = curl;
            UseShellExecute = false;
            StandardOutputEncoding = Encoding.UTF8;
            RedirectStandardOutput = true;
            Arguments = CreateString(page, closed);
          }
        };
        process.OutputDataReceived += func;
        if (process.Start())
        {
          process.BeginOutputReadLine();
          process
        } else null
      }

      def loop(page, issues)
      {
        def process = run_process(page);
        when (process == null) throw InvalidOperationException("Impossible to run process 'curl' to get issues");
        process.WaitForExit();
        match (parser.Parse(data.ToString()))
        {
          | Some(JObject.Array(_ :: _ as lst)) => _ = data.Clear(); loop(page + 1, issues.Concat(lst))
          | _                                  => issues
        }
      }

      loop(1, Enumerable.Empty())
    }

  }
}
