using System;
using System.Linq;
using System.Xml.Linq;

using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

namespace Utilities
{
  /// <summary>
  /// Description of Utils.
  /// </summary>
  public module Utils
  {
    public IsWord2007 = false;
    
    public NsWordMl : XNamespace = 
      if (IsWord2007)
        XNamespace.Get("http://schemas.openxmlformats.org/wordprocessingml/2006/main")
      else
        XNamespace.Get("http://schemas.microsoft.com/office/word/2003/wordml");
        
    public NsAuxHint : XNamespace = XNamespace.Get("http://schemas.microsoft.com/office/word/2003/auxHint");

    public HasElement(this elem : XElement, name : XName) : bool
    {
      elem.Elements().Any(e => e.Name == name);
    }
    
    public OnlyWordMl(this seq : Seq[XElement]) : Seq[XElement]
    {
      seq.Where(se => se.Name.Namespace == NsWordMl || se.Name.Namespace == NsAuxHint)
    }
    
	  public HtmlMangling(this str : string) : string
	  {
	    str.Replace("&", "&amp;").Replace(">", "&gt;").Replace("<", "&lt;")
	  }

    public TryReadProperty(this elem : XElement, propName : XName, params elemsPath : array[XName]) : string
    {
      def e = TryReadElems(elem, elemsPath);
      
      if (e == null) null
      else
      {
        def attr = e.Attribute(propName);
        
        if (attr == null) null
        else attr.Value
      }
    }
	  
    public TryReadElems(this elem : XElement, params elemsPath : array[XName]) : XElement
    {
      def read(elem : XElement, name : XName) : XElement
      {
        if (elem == null) null
        else elem.Element(name)
      }
      
      mutable e = elem;
      
      foreach (name in elemsPath)
        if (e == null)
          return null;
        else 
          e = read(e, name);
          
      e
    }
  }
}
