using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace Utilities
{
  internal module NativeMethods
  {
    internal GWL_STYLE  : int = -16;
    internal WS_SIZEBOX : int = 0x40000;

    internal SetWindowLong(hWnd : IntPtr, nIndex : int, dwNewLong : IntPtr) : IntPtr
    {
      if (IntPtr.Size == 4)
        IntPtr(IntSetWindowLong(hWnd, nIndex, NativeMethods.IntPtrToInt32(dwNewLong)))
      else
        IntSetWindowLongPtr(hWnd, nIndex, dwNewLong)
    }

    internal GetWindowLong(hWnd : IntPtr, nIndex : int) : IntPtr
    {
        if (IntPtr.Size == 4)
          GetWindowLong32(hWnd, nIndex)
        else
          GetWindowLongPtr64(hWnd, nIndex)
    }
    
    [DllImport("user32.dll", CharSet=CharSet.Auto)]
    public extern FindWindow(className : string, windowName : string) : IntPtr;
 
    IntPtrToInt32(intPtr : IntPtr) : int
    {
      intPtr.ToInt64() :> int
    }
 
    [DllImport("user32.dll", EntryPoint="GetWindowLong", CharSet=CharSet.Auto)]
    extern GetWindowLong32(hWnd : IntPtr, nIndex : int) : IntPtr;
 
    [DllImport("user32.dll", EntryPoint="GetWindowLongPtr", CharSet=CharSet.Auto)]
    extern GetWindowLongPtr64(hWnd : IntPtr, nIndex : int) : IntPtr;
 
    [DllImport("user32.dll", EntryPoint="SetWindowLong", CharSet=CharSet.Auto)]
    extern IntSetWindowLong(hWnd : IntPtr, nIndex : int, dwNewLong : int) : int;
 
    [DllImport("user32.dll", EntryPoint="SetWindowLongPtr", CharSet=CharSet.Auto)]
    extern IntSetWindowLongPtr(hWnd : IntPtr, nIndex : int, dwNewLong : IntPtr) : IntPtr;
  }
}
