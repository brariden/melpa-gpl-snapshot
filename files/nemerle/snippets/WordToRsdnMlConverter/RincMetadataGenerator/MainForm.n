using System.Xml;
using System.Xml.Linq;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace RincMetadataGenerator
{
  /// <summary>
  /// Description of MainForm.
  /// </summary>
  public partial class MainForm : Form
  {
    _settings : Settings;
    _pathRx : Regex = Regex(<#.*\\RSDN-(\d+)-(\d+)#>, RegexOptions.Compiled | RegexOptions.IgnoreCase);
    
    public this()
    {
      InitializeComponent();
      _settings = Settings.Default;
      _tbPath.LostFocus += OnLostFocus;
    }
  
    OnLostFocus(_ : object, _ : EventArgs) : void
    {
      def path = _tbPath.Text;
      def m = _pathRx.Match(path);
      when (m.Success)
      {
        _numYear.Text   = m.Groups[1].Value;
        _numJurNum.Text = m.Groups[2].Value;
      }
      //_pathRx
      //d:\!\Jur\RSDN\RSDN-2013-2\
    }
    
    private MainForm_Load(_sender : object,  _e : System.EventArgs) : void
    {
      _numYear.Minimum = 2000;
      _numYear.Maximum = 3000;
      //_numYear.Value   = 2009;

      _numJurNum.Minimum = 1;
      _numJurNum.Maximum = 6;
      //_numJurNum.Value   = 4;
      
      _numPageCount.Minimum = 30;
      _numPageCount.Maximum = 300;
      _numPageCount.Value   = _settings.Pages;
      
      _tbPath.Text = _settings.Path;
      _numYear.Text = _settings.Year;
      _numJurNum.Text = _settings.Num;
    }
  
    private _pbBrowse_Click (_sender : object,  _e : System.EventArgs) : void
    {
      _folderBrowserDialog.SelectedPath = _tbPath.Text;
    
      when (_folderBrowserDialog.ShowDialog(this) == DialogResult.OK)
      {
        _tbPath.Text = _folderBrowserDialog.SelectedPath;
      }
    }
  
    private mutable panel1 : System.Windows.Forms.Panel;
  
    private mutable webBrowser1 : System.Windows.Forms.WebBrowser;
  
    private _pbGenerateMetadata_Click (_sender : object,  _e : System.EventArgs) : void
    {
      def path = _tbPath.Text;
      
      if (Directory.Exists(path))
      {
        // Fixme: The "x.Value :> int" cause: ICE: got some unknown exception of type System.InvalidCastException: Не удалось привести
        def val(x) : int { Convert.ToInt32(x.Value) }
        def generator = MetadataGenerator(path, val(_numYear), val(_numJurNum), val(_numPageCount), _tbCreator.Text);
        def xmlPath = generator.Generate();
        def xml = XDocument.Load(xmlPath);
        
        def authors = xml.Descendants("author")?.ToArray();
        
        when (authors != null)
          FillAuthorInfos(authors);
          
        _lbErrors.Items.Clear();
        
        if (generator.Errors.Length > 0)
        {
          _lbErrors.Items.AddRange(generator.Errors :> array[object]);
          _tabControl.SelectedIndex = 1;
        }
        else
          _tabControl.SelectedIndex = 0;
        
        webBrowser1.Navigate(xmlPath);
      }
      else
        _ = MessageBox.Show(this, $<#Вы задали некорректный путь к журналу: "$path"#>);
    }
    
    FillAuthorInfos(authors : array[XElement]) : void
    {
      def html = XElement("table");

      def template = <#
    <html>
      <head>
        <title>Список информации публикациям</title>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
        <meta name="application-name" content="RSDN">
        <meta name="msapplication-tooltip" content="Russian Software Developer Network">
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <link rel="stylesheet"  type="text/css" href="http://rsdn.ru/css/article.css" />
      </head>
      <body>
        {content}
      </body>
    </html>
      #>;

      def header = XElement("tr");
      header.Add(XElement("th", "surname"));
      header.Add(XElement("th", "fname"));
      header.Add(XElement("th", "auwork"));
      header.Add(XElement("th", "auemail"));
      header.Add(XElement("th", "auinf"));
      
      foreach (author in authors)
      {
        def tr = XElement("tr");
        def article = author.Parent.Parent;
        def inf = author.Elements("individInfo").FirstOrDefault(inf => inf.Attribute("lang")?.Value == "RUS");
        if (inf == null)
        {
          def lineInfo = author : IXmlLineInfo;
          tr.Add(XElement("td", lineInfo.LineNumber + "," + lineInfo.LinePosition  + ": Нет информации об авторе нра русском языке."));
        }
        else
        {
          tr.Add(XElement("td", inf.Element("surname")?.Value : object ?? XElement("b", "<<Не задан!>>")));
          tr.Add(XElement("td", inf.Element("fname")  ?.Value : object ?? XElement("b", "<<Не задан!>>")));
          tr.Add(XElement("td", inf.Element("auwork") ?.Value : object ?? XElement("b", "<<Не задан!>>")));
          tr.Add(XElement("td", inf.Element("auemail")?.Value : object ?? XElement("b", "<<Не задан!>>")));
          tr.Add(XElement("td", inf.Element("auinf")  ?.Value : object ?? XElement("b", "<<Не задан!>>")));
        }
        def title = article.Element("arttitles").Elements("arttitle").FirstOrDefault(inf => inf.Attribute("lang")?.Value == "RUS")?.Value;
        tr.Add(XElement("td", title));
        def pdf = article.Element("fpdf")?.Value;
        tr.Add(XElement("td", pdf));
        def biblistLen = article.Element("biblist")?.Elements("blistpart")?.Count();
        tr.Add(XElement("td", if (biblistLen > 0) biblistLen : object else XElement("b", 0)));
        
        html.Add(tr);
      }
      
      def text = template.Replace("{content}", html.ToString());
      _webBrowserInfo.DocumentText = text;
    }

  
    private _lbErrors_DoubleClick (_ : object,  _ : System.EventArgs) : void
    {
      match (_lbErrors.SelectedItem)
      {
        | error is Error =>
          def docPath = Path.ChangeExtension(error.Path, ".doc");
          def docPath = if (File.Exists(docPath)) docPath else Path.ChangeExtension(error.Path, ".docx");
          
          if (File.Exists(docPath))
            _ = Diagnostics.Process.Start(docPath);
          else
            _ = MessageBox.Show(this, $<#Не удалось найти .doc- или .docx-файл соотвествющий RSDN ML-файлу: "$(error.Path)"#>);
        
        | _              => ()
      }
    }
  
    private MainForm_FormClosed (_sender : object,  _e : System.Windows.Forms.FormClosedEventArgs) : void
    {
      _settings.Path  = _tbPath.Text;
      _settings.Year  = _numYear.Text;
      _settings.Num   = _numJurNum.Text;
      _settings.Pages = _numPageCount.Value;
      _settings.Save();
    }
  
    private mutable _makeCdTocButton : System.Windows.Forms.Button;
  
    private _makeCdTocButton_Click (_sender : object,  _e : System.EventArgs) : void
    {
      def path = _tbPath.Text;
      
      when (!Directory.Exists(path))
      {
        _ = MessageBox.Show(this, $<#Вы задали некорректный путь к журналу: "$path"#>);
        return;
      }
      
      def val(x) : int { Convert.ToInt32(x.Value) }
      def generator = CrTocGenerator(path, val(_numYear), val(_numJurNum), val(_numPageCount), _tbCreator.Text);
      def xmlPath = generator.Generate();
      _ = xmlPath;
    }
  
    private mutable _tabPageInfo : System.Windows.Forms.TabPage;
  
  
    private mutable _webBrowserInfo : System.Windows.Forms.WebBrowser;
  }
}
