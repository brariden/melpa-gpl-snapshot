using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.ComputationExpressions;
using Nemerle.ComputationExpressions.Async;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Net;
using System.IO;

namespace AsyncHttp
{
  public partial class MainForm : Form
  {
    public static AsyncGetResponse(this req : WebRequest) : Async[WebResponse]
    {
      Async.FromBeginEnd(req.BeginGetResponse(_, null), req.EndGetResponse(_));
    }

    private mutable guiCtx : ExecutionContext;
    
    public this()
    {
      InitializeComponent();
      guiCtx = SystemExecutionContexts.FromCurrentSynchronizationContext();
      //guiCtx = SystemExecutionContexts.ThreadPool();
    }
  
    private HttpGet(url : string) : Async[string]
    {
      comp async
      {
        def req = WebRequest.Create(url);
        //Debug.WriteLine($"Before defcomp $url -> $(Threading.Thread.CurrentThread.ManagedThreadId)");
        using (defcomp resp = req.AsyncGetResponse())
        using (stream = resp.GetResponseStream())
        using (reader = StreamReader(stream))
        {
          //Debug.WriteLine($"After defcomp $url -> $(Threading.Thread.CurrentThread.ManagedThreadId)");
          return reader.ReadToEnd();
        }
      }
    }

    private button1_Click (_sender : object,  _e : System.EventArgs) : void
    {
      mutable urlsLeft = 0;
      def overallTime = Stopwatch.StartNew();
      responceBox.Text = "";
      
      def receive(url)
      {
        comp async
        {
          def time = Stopwatch.StartNew();
          def threadId = Threading.Thread.CurrentThread.ManagedThreadId;
            
          try
          {
            defcomp content = HttpGet(url).Start();
            def threadId = Threading.Thread.CurrentThread.ManagedThreadId;
            responceBox.Text += $"\n\n$url\n  Time: $(time.Elapsed)  Content length: $(content.Length)\n"
                                 "  Thread:$threadId";
          }
          catch
          {
            | ex is Exception =>
              responceBox.Text += $"\n\n$url\n  Time: $(time.Elapsed)  Exception: $(ex.Message)"
                                   "  Thread:$threadId";
          }
          
          urlsLeft--;
          when (urlsLeft == 0)
          {
            responceBox.Text += $"\n\nOverall time: $(overallTime.Elapsed)";
            buttonGet.Enabled = true;
          }
        }
      }
      
      buttonGet.Enabled = false;
      def urls = urlBox.Lines.Select(x => x.Trim()).Where(_ != "").ToArray();
      urlsLeft = urls.Length;
      
      foreach (url in urls)
        _ = receive(url).Start(guiCtx);

      responceBox.Text += "Request done!";
    }
  
    private mutable splitContainer1 : System.Windows.Forms.SplitContainer;
  }
}
