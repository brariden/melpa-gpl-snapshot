using System.Collections.Generic;

namespace Nemerle.ComputationExpressions.Async
{
  [Record]
  internal class AsyncForEach[A] : Async[FakeVoid]
  {
    private enumerator : IEnumerator[A];
    private body : A -> Async[FakeVoid];

    [RecordIgnore]
    private mutable curBody : Async[FakeVoid] = null;

    public override Exec(job : AsyncJobBase, mutable res : ref FakeVoid) : Async[FakeVoid]
    {
      mutable next = null;
      try
      {
        next = if (curBody == null)
        {
          if (enumerator.MoveNext())
          {
            curBody = job.ExecWhileReady(body(enumerator.Current), ref res);
            this;
          }
          else
          {
            null;
          }
        }
        else
        {
          curBody = job.ExecWhileReady(curBody, ref res);
          this;
        }
      }
      finally
      {
        when (next == null)
          enumerator.Dispose();
      }
      next
    }

    public override Cancel() : void
    {
      try
      {
        when (curBody != null)
          curBody.Cancel();
      }
      finally
      {
        enumerator.Dispose();
      }
    }
  }
}
