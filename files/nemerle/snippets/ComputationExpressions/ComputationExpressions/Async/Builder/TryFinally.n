namespace Nemerle.ComputationExpressions.Async
{
  [Record]
  internal class AsyncTryFinally[A] : Async[A]
  {
    private mutable body : Async[A];
    private handler : void -> void;

    public override Exec(job : AsyncJobBase, res : ref A) : Async[A]
    {
      mutable execHandler = true;
      try
      {
        body = job.ExecWhileReady(body, ref res);
        execHandler = body == null;
      }
      finally
      {
        when (execHandler)
        {
          body = null;
          handler();
        }
      }
      if (body == null)
        null;
      else
        this;
    }

    public override Cancel() : void
    {
      try
      {
        when (body != null)
          body.Cancel();
      }
      finally
      {
        handler();
      }
    }
  }
}
