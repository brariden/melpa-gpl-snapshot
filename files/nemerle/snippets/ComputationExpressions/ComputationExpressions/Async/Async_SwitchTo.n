using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  public partial abstract class Async[A]
  {
    public static SwitchTo(executionContext : ExecutionContext) : Async[FakeVoid]
    {
      AsyncSwitchExecutionContext(executionContext);
    }
  }

  [Record]
  internal class AsyncSwitchExecutionContext : Async[FakeVoid]
  {
    private executionContext : ExecutionContext;
    public override Exec(job : AsyncJobBase, _res : ref FakeVoid) : Async[FakeVoid]
    {
      when (!object.ReferenceEquals(job.ExecutionContext, executionContext))
      {
        job.ExecutionContext = executionContext;
        job.State = AsyncJobBase.JobState.SwitchContext;
      }
      null;
    }

    public override Cancel() : void
    {
    }
  }
}
