using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  /// <summary>
  /// Description of AsyncResult.
  /// </summary>
  public class AsyncPromise[A] : AsyncValue[A]
  {
    private _syncRoot : object = object();
    private mutable _result : AsyncResult[A] = null;

    public SetValue(value : A) : void
    {
      SetResult(AsyncResult.Value(value));
    }

    public SetException(ex : Exception) : void
    {
      SetResult(AsyncResult.Exeption(ex));
    }

    public WrapFunction(action : void -> A) : void -> void
    {
      () => SetFunctionResult(action)
    }

    public SetFunctionResult(action : void -> A) : void
    {
      SetResult
      (
        try
        {
          AsyncResult.Value(action());
        }
        catch
        {
          | ex is Exception =>
            AsyncResult.Exeption(ex);
        }
      )
    }

    public SetResult(result : AsyncResult[A]) : void
    {
      SetResult(result, true);
    }

    public SetResult(result : AsyncResult[A], throwIfResultAlreadySet : bool) : void
    {
      lock (_syncRoot)
      {
        if (_result != null)
        {
          when (throwIfResultAlreadySet)
            throw InvalidOperationException("Result already set.");
        }
        else
        {
          _result = result;

          while (_firstJob != null)
          {
            def job = _firstJob;
            _firstJob = job.NextJob;
            job.NextJob = null;
            job.Start();
          }

          Threading.Monitor.PulseAll(_syncRoot);
        }
      }
    }

    public override Result : AsyncResult[A]
    {
      get
      {
        lock (_syncRoot)
        {
          when (_result == null)
            _ = Threading.Monitor.Wait(_syncRoot);
          _result;
        }
      }
    }

    private mutable _firstJob : AsyncJobBase = null;
    public override TryGetResult(job : AsyncJobBase, res : out AsyncResult[A]) : bool
    {
      lock (_syncRoot)
      {
        if (_result != null)
        {
          res = _result;
          true
        }
        else
        {
          job.State = AsyncJobBase.JobState.Wait;
          job.NextJob = _firstJob;
          _firstJob = job;
          false
        }
      }
    }
  }
}
