/*
 * Copyright (c) 2010  David Sorokin <david.sorokin@gmail.com>
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Utility;
using Nemerle.Collections;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Internal
{
  /// <summary>
  /// This is a helper module for the enumerable comprehension.
  /// </summary>
  public module EnumerableHelper
  {
    public Empty[T] () : IEnumerable[T] {
      EmptyEnumerable.Instance
    }
    
    public Singleton[T] (t : T) : IEnumerable[T]
    {
      SingleEnumerable (t)
    }
    
    public Append[T] (ts1 :IEnumerable[T], ts2 : IEnumerable[T]) : IEnumerable[T]
    {
      AppendEnumerable (ts1, ts2)
    }
    
    //public Append[T, U] (ts1 :IEnumerable[T], ts2 : IEnumerable[U]) : IEnumerable[U]
    //  where T : U
    //{
    //  AppendEnumerable (ts1.Cast(), ts2)
    //}
    
    //public Append[T, U] (ts1 :IEnumerable[U], ts2 : IEnumerable[T]) : IEnumerable[U]
    //  where T : U
    //{
    //  AppendEnumerable (ts1, ts2.Cast())
    //}
    
    public Delay[T] (cont : void -> IEnumerable[T]) : IEnumerable[T]
    {
      DelayedEnumerable (cont)
    }
    
    public While[T] (pred : void -> bool, body : IEnumerable[T]) : IEnumerable[T]
    {
      while (pred ())
      {
        foreach (t in body)  yield t;
      }
    }
    
    public ForEach[T1, T2] (coll : IEnumerable[T1], cont : T1 -> IEnumerable[T2]) : IEnumerable[T2]
    {
      foreach (x in coll)
      {
        foreach (t in cont (x))  yield t
      }
    }
    
    public TryFinally[T] (body : IEnumerable[T], handler : void -> void) : IEnumerable[T]
    {
      TryFinallyEnumerable (body, handler)
    }
    
    public TryCatch[T] (body : IEnumerable[T], cont : Exception -> IEnumerable[T]) : IEnumerable[T]
    {
      TryCatchEnumerable (body, cont)
    }
    
    public Using[T1, T2] (t1 : T1, cont : T1 -> IEnumerable[T2]) : IEnumerable[T2] where T1 : IDisposable
    {
      TryFinallyEnumerable (DelayedEnumerable (() => cont (t1)), () => 
        {
          def d = t1 : IDisposable;
          when (d != null) 
            d.Dispose ()
        })
    }
  }
}
