/*
 * Copyright (c) 2010  David Sorokin <david.sorokin@gmail.com>
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;

namespace Nemerle.ComputationExpressions.InternalMacros
{
  /// <summary>
  /// Wraps the F#-like computation expression in the result at the final step.
  /// </summary>
  public macro ComputationRun (builder, expr)
  {
    def typer = Macros.ImplicitCTX ();
    def tbuilder = typer.TypeExpr (builder);
    def texpr = typer.TypeExpr (expr);
    
    def delay (info, expr)
    {
      match (info.LookupMember ("Delay"))
      {
        | [] => expr
        | _ => <[ $(tbuilder : typed).Delay (() => $expr) ]>
      }
    }
    
    def run (info, expr)
    {
      match (info.LookupMember ("Run"))
      {
        | [] => expr
        | _ => <[ $(tbuilder : typed).Run ($expr) ]>
      }
    }
    
    match (tbuilder.Type.Hint, texpr.Type.Hint)
    {
      | (Some (tb), Some (_)) =>
        run (tb.TypeInfo, delay (tb.TypeInfo, PExpr.Typed (texpr)))
      
      | _ =>
        typer.DelayMacro (fun (lastChance) 
        {
          match (tbuilder.Type.Hint, texpr.Type.Hint)
          {
            | (Some (tb), Some (_)) =>
              Some (run (tb.TypeInfo, delay (tb.TypeInfo, PExpr.Typed (texpr))))
            
            | (None, _) =>
              when (lastChance)
                Message.Error (builder.Location, "Cannot infer the computation builder type.");
              None ()
            
            | (_, None) =>
              when (lastChance)
                Message.Error (expr.Location, "Cannot infer the expression type.");
              None ()
          }
        })
    }
  }
}
