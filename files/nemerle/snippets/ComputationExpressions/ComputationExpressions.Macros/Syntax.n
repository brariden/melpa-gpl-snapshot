/*
 * Copyright (c) 2010  David Sorokin <david.sorokin@gmail.com>
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;

namespace Nemerle.ComputationExpressions
{
  using ComputationExpressions.Internal;
  using ComputationExpressions.InternalMacros;
  using ComputationExpressions.ComputationError;
  
  public macro @defcomp (expr)
  syntax ("defcomp", expr)
  {
    UnexpectedCall ("defcomp", expr)
  }
  
  public macro @call (expr)
  syntax ("call", expr)
  {
    UnexpectedCall ("call", expr)
  }
  
  public macro @callcomp (expr)
  syntax ("callcomp", expr)
  {
    UnexpectedCall ("callcomp", expr)
  }

  public macro @return (expr)
  syntax ("return", expr)
  {
    UnexpectedCall ("return", expr)
  }

  public macro @returncomp (expr)
  syntax ("returncomp", expr)
  {
    UnexpectedCall ("returncomp", expr)
  }

  public macro @yieldcomp (expr)
  syntax ("yieldcomp", expr)
  {
    UnexpectedCall ("yieldcomp", expr)
  }

  public macro @comp (builder, expr)
  syntax ("comp", builder, expr)
  {
    def builder = match (builder)
    {
      | PExpr.Ref(name) when name.Id == "list"       => Extensions.ListBuilder()
      | PExpr.Ref(name) when name.Id == "_array"     => Extensions.ArrayBuilder()
      | PExpr.Ref(name) when name.Id == "async"      => Extensions.AsyncBuilder()
      | PExpr.Ref(name) when name.Id == "enumerable" => Extensions.EnumerableBuilder.Instance
      | _                                            => DefaultBuilder(builder)
    }
    ComputationExpander.Expand (builder, expr)
  }

  /// <summary>
  /// This is a helper diagnostic module.
  /// </summary>
  internal module ComputationError
  {
    /// <summary>
    /// Is is called whenever the macro specified by its name is invalid in the current context.
    /// </summary>
    public UnexpectedCall (name : string, expr : PExpr) : PExpr
    {
      Message.FatalError (expr.Location, $"Unexpected use of the $name construct. "
        "It can be applied only inside the known constructs of the computation expression. "
        "Please refer to the documentation for more details.")
    }
  }
}
