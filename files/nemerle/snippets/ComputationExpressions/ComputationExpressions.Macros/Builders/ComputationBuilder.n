/*
 * Copyright (c) 2010  David Sorokin <david.sorokin@gmail.com>
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;

namespace Nemerle.ComputationExpressions
{
  using ComputationExpressions.Internal;
  using ComputationExpressions.InternalMacros;

  /// <summary>
  /// Represents an internal computation builder that actually generates a code.
  /// </summary>
  public abstract class ComputationBuilder
  {
    public abstract Return (expr : PExpr) : PExpr;
    
    public abstract ReturnComp (expr : PExpr) : PExpr;
    
    public abstract Yield (expr : PExpr) : PExpr;
    
    public abstract YieldComp (expr : PExpr) : PExpr;
    
    public abstract Bind (expr : PExpr, name : PExpr, cont : PExpr) : PExpr;
    
    public abstract Delay (expr : PExpr) : PExpr;
    
    public abstract Combine (expr1 : PExpr, expr2 : PExpr) : PExpr;
    
    public abstract Run (expr : PExpr) : PExpr;
    
    public abstract Zero () : PExpr;
    
    public abstract While (pred : PExpr, body : PExpr) : PExpr;
    
    protected abstract ForEach (coll : PExpr, cont : PExpr) : PExpr;
    
    public virtual ForEach (name : PExpr, coll : PExpr, body : PExpr) : PExpr 
    {
      def cont =
        match (body)
        {
          | <[ match ($(null)) { ..$cases } ]> =>
          
            match (name) {
              | <[ $(x : name) ]> when char.IsLower (x.Id[0]) | <[ (..$_) ]> => ()
              | _ => Message.FatalError ("only simple names available in pattern"
                                         " of foreach with direct matching")
            }

            <[ $name => match ($name) { ..$cases } ]>
            
          | _ =>
      
          def temp = Macros.NewSymbol ("temp");
            
          def mat =
            match (name)
            {
              | <[ $pat :> $ty ]> =>
                <[ match ($(temp : name) :> $ty) { | $pat => $body; | _ => $(Zero ()) } ]>
              | _ =>
                <[ match ($(temp : name)) { | $name => $body; | _ => $(Zero ()) } ]>  
            }
          
          // supress the possible warnings
          mat.cases.Iter (fun (x : MatchCase) { x.disable_warnings = true });
          
          <[ $(temp : name) => $mat ]>
        }
      
      ForEach (coll, cont)
    }
    
    public virtual For (init : PExpr, cond : PExpr, change : PExpr, body : PExpr) : PExpr
    {
      def expr =
        match (init)
        {
          | Sequence (_) =>
            Message.FatalError (init.Location, "Expected a single expression.")
          
          | <[ def $name = _ ]> => Some (<[ $name ]>)
          | <[ mutable $name = _ ]> => Some (<[ $name ]>)
          
          | Define (name, _) => Some (<[ $name ]>)
          | DefMutable (name, _) => Some (<[ $name ]>)
          
          | _ => None ()
        }
      
      def temp = Macros.NewSymbol ("temp");
      
      def var = 
        match (expr)
        {
          | Some (name) => name
          | None => <[ $(temp : name) ]>
        }
        
      def postInit =
        match (expr)
        {
          | Some (_) => <[ () ]>
          | None => <[ def $(temp : name) = FakeVoid() ]>
        }
        
      def pattern =
        match (expr)
        {
          | Some (name) => name
          | None => <[ _ ]>
        }
      
      def coll =
        <[
            EnumerableHelper.Delay (() =>
              {
                $init;
                $postInit;
                
                ForHelper.Enumerate(() => $cond, () => $var, () => $change)
              })
          ]>;
      
      ForEach (pattern, coll, body);
    }
    
    public virtual DoWhile (pred : PExpr, body : PExpr) : PExpr
    {
      def flag = Macros.NewSymbol ("flag");
      
      <[
          {
            mutable $(flag : name) = true;
            $(While (<[ $(flag : name) || ($pred) ]>,
                        <[ $(flag : name) = false; $body ]>))
          }
      ]>
    }
    
    public abstract TryFinally (body : PExpr, handler : PExpr) : PExpr;
    
    protected abstract TryCatch (body : PExpr, cont : PExpr) : PExpr;
    
    public virtual TryCatch (body : PExpr, cases : list [TryCase]) : PExpr
    {
      def e = Macros.NewSymbol ("e");
      def p = PExpr.Try (<[ throw $(e : name) ]>, cases);
      
      TryCatch (body, <[ $(e : name) => $p ]>)
    }
    
    public abstract Using (expr : PExpr, name : PExpr, body : PExpr) : PExpr;
  }
}
