/*
 * Copyright(c) 2010  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;

namespace Nemerle.ComputationExpressions.Extensions
{
  using ComputationExpressions.Internal;
  using ComputationExpressions.InternalMacros;
  using Nemerle.ComputationExpressions.Async;

  /// <summary>
  /// This is a AsyncBuilder computation builder.
  /// </summary>
  public class AsyncBuilder : ComputationBuilder
  {
    public override Return(expr : PExpr) : PExpr
    {
      <[ AcyncBuilder.Return($expr) ]>
    }

    public override ReturnComp(expr : PExpr) : PExpr
    {
      <[ $expr ]>
    }

    public override Yield(expr : PExpr) : PExpr
    {
      Message.FatalError(expr.Location, "The async comprehension doesn't support the yield construct. Use return instead.")
    }

    public override YieldComp(expr : PExpr) : PExpr
    {
      Message.FatalError(expr.Location, "The async comprehension doesn't support the yieldcomp construct. Use returncomp instead.")
    }

    public override Bind(expr : PExpr, name : PExpr, cont : PExpr) : PExpr
    {
      <[ AcyncBuilder.Bind($expr, $name => $cont) ]>
    }

    public override Delay(expr : PExpr) : PExpr
    {
      <[ AcyncBuilder.Delay(() => $expr) ]>
    }

    public override Combine(expr1 : PExpr, expr2 : PExpr) : PExpr
    {
      <[ AcyncBuilder.Bind($expr1, () => $expr2) ]>
    }

    public override Run(expr : PExpr) : PExpr
    {
      Delay(expr)
    }

    public override Zero() : PExpr
    {
      <[ null ]>
    }

    public override While(pred : PExpr, body : PExpr) : PExpr
    {
      <[ AcyncBuilder.While(() => $pred, () => $body) ]>
    }

    protected override ForEach(coll : PExpr, cont : PExpr) : PExpr
    {
      <[ AcyncBuilder.ForEach($coll, $cont) ]>
    }

    public override TryFinally(body : PExpr, handler : PExpr) : PExpr
    {
      <[ AcyncBuilder.TryFinally(AcyncBuilder.Delay(() => $body), () => $handler) ]>
    }

    protected override TryCatch(body : PExpr, cont : PExpr) : PExpr
    {
      <[ AcyncBuilder.TryCatch(AcyncBuilder.Delay(() => $body), $cont) ]>
    }

    public override Using(expr : PExpr, name : PExpr, body : PExpr) : PExpr
    {
      <[ AcyncBuilder.Using($expr, $name => $body) ]>
    }
  }
}
