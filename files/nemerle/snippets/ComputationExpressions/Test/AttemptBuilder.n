using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nemerle.ComputationExpressions;

namespace Test
{
  /// <summary>
  /// Description of AttemptBuilder.
  /// </summary>
  public class AttemptBuilder
  {
    public type Attempt[A] = void -> option[A];
    
    //Bind : Attempt<'a> * ('a -> Attempt<'b>) -> Attempt<'b>
    public Bind[A, B](val : Attempt[A], cont : A -> Attempt[B]) : Attempt[B]
    {
      match (val())
      {
        | None       => () => None();
        | Some (a) => cont(a);
      }
    }

    public Bind[B](val : Attempt[FakeVoid], cont : void -> Attempt[B]) : Attempt[B]
    {
      match (val())
      {
        | None       => () => None();
        | Some (_) => cont ();
      }
    }

    //Delay : (unit -> Attempt<'a>) -> Attempt<'a>
    public Delay[A](cont : void -> Attempt[A]) : Attempt[A]
    {
      () => cont()()
    }

    //Return : 'a -> Attempt<'a>
    public Return[A] (val : A) : Attempt[A]
    {
      () => Some(val)
    }

    public Combine[A, B] (val1 : Attempt[A], val2 : Attempt[B]) : Attempt[B]
    {
      Bind (val1, _ => val2)
    }
    
    public Run[A] (val : Attempt[A]) : Attempt[A]
    {
      val
    }
  }
}
