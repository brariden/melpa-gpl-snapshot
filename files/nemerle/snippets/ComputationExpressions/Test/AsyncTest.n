using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Threading;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

using Nemerle.ComputationExpressions;
using Nemerle.ComputationExpressions.Async;

namespace Test
{
  public class AsyncTest
  {
    [TestCaseAttribute(<#
Value(20)
Value(20)
Value(20)
Value(121)
Value(121 20)
Value(20 123)
Value(20 20)
#>)]
    public static Test1(stream : IO.TextWriter) : void
    {
      def fn(n)
      {
        comp async
        {
          if (n < 20)
            returncomp fn(n + 1);
          else
            return n;
        }
      }
      def f(n1, n2)
      {
        comp async
        {
          defcomp n1 = fn(n1);
          defcomp n2 = fn(n2);
          return $"$n1 $n2";
        }
      }
      def li = [fn(1), fn(10), fn(15), fn(121)];
      def ls = [f(121, 1), f(11, 123), f(11, 4)];
      def li = li.Map(_.Start());
      def ls = ls.Map(_.Start());
      li.Map(_.Result).Iter(stream.WriteLine(_));
      ls.Map(_.Result).Iter(stream.WriteLine(_));
    }

    [TestCaseAttribute(<#
Value(243)
Value(270)
Value(297)
Value(135)
Value(121)
Exception(System.ArgumentOutOfRangeException)
#>)]
    public static Test2(stream : IO.TextWriter) : void
    {
      def fn(mutable n)
      {
        comp async
        {
          Console.Error.WriteLine($"Test2.fn($n) thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");
          when (n > 1000)
            throw ArgumentOutOfRangeException();
          while (n < 100)
          {
            when (n % 3 == 0)
            {
              callcomp Async.SwitchTo(SystemExecutionContexts.ThreadPool());
              callcomp Async.Yield();
            }
            n *= 3;
          }
          return n;
        }
      }
      def li = [fn(1), fn(10), fn(11), fn(15), fn(121), fn(1213)];
      def li = li.Map(_.Start());
      li.Map(_.Result).Iter(stream.WriteLine(_));
    }

    [TestCaseAttribute(<#
Value(1)
Value(2)
Value(6)
Value(24)
Value(120)
Value(720)
Value(5040)
Value(40320)
Value(362880)
Value(3628800)
Value(39916800)
Value(479001600)
Exception(System.OverflowException)
Exception(System.OverflowException)
#>)]
    public static Factorial(stream : IO.TextWriter) : void
    {
      def factorial(n)
      {
        comp async
        {
          if (n < 1)
          {
            return 1;
          }
          else
          {
            defcomp f = factorial(n - 1);
            return n * f;
          }
        }
      }
      def li = $[factorial(i) | i in [1..14]];
      def li = li.Map(_.Start());
      li.Map(_.Result).Iter(stream.WriteLine(_));
    }

    [TestCaseAttribute(<#
0
1
2
3
0
1
2
3
#>)]
    public static ForEach(stream : IO.TextWriter) : void
    {
      def valueAsync(n)
      {
        comp async
        {
          return n;
        }
      }
      def forEach(n)
      {
        comp async
        {
          def values = $[ valueAsync(k) | k in [0..n] ];
          foreach (value in values)
          {
            defcomp value = value;
            stream.WriteLine(value);
          }
        }
      }
      def forEachObj(n)
      {
        comp async
        {
          def values = $[ valueAsync(k) | k in [0..n] ];
          foreach (value : Async[int] in values : IEnumerable)
          {
            defcomp value = value;
            stream.WriteLine(value);
          }
        }
      }
      _ = forEach(3).Start().Result;
      _ = forEachObj(3).Start().Result;
    }

    [TestCaseAttribute(<#
testNormal 1
testNormal 2
testNormal 3
testNormal finally
Value(10)
testThrow 1
testThrow 2
testThrow 3
testThrow finally
Exception(System.Exception)
#>)]
    public static TryFinally(stream : IO.TextWriter) : void
    {
      def testNormal()
      {
        comp async
        {
          try
          {
            stream.WriteLine("testNormal 1");
            callcomp Async.Yield();
            stream.WriteLine("testNormal 2");
            callcomp Async.Yield();
            stream.WriteLine("testNormal 3");
            return 10;
          }
          finally
          {
            stream.WriteLine("testNormal finally");
          }
        }
      }
      def testThrow()
      {
        comp async
        {
          try
          {
            stream.WriteLine("testThrow 1");
            callcomp Async.Yield();
            stream.WriteLine("testThrow 2");
            callcomp Async.Yield();
            stream.WriteLine("testThrow 3");
            throw Exception();
          }
          finally
          {
            stream.WriteLine("testThrow finally");
          }
        }
      }
      stream.WriteLine(testNormal().Start().Result);
      stream.WriteLine(testThrow().Start().Result);
    }

    [TestCaseAttribute(<#
testNormal 1
testNormal 2
testNormal 3
Value(10)
testThrow 1
testThrow 2
testThrow 3
testThrow catch System.Exception
Value(20)
#>)]
    public static TryCatch(stream : IO.TextWriter) : void
    {
      def testNormal()
      {
        comp async
        {
          try
          {
            stream.WriteLine("testNormal 1");
            callcomp Async.Yield();
            stream.WriteLine("testNormal 2");
            callcomp Async.Yield();
            stream.WriteLine("testNormal 3");
            return 10;
          }
          catch
          {
            | _ =>
              stream.WriteLine("testNormal catch");
              return 20;
          }
        }
      }
      def testThrow()
      {
        comp async
        {
          try
          {
            stream.WriteLine("testThrow 1");
            callcomp Async.Yield();
            stream.WriteLine("testThrow 2");
            callcomp Async.Yield();
            stream.WriteLine("testThrow 3");
            throw Exception();
          }
          catch
          {
            | ex =>
              stream.WriteLine($"testThrow catch $(ex.GetType().FullName)");
              return 20;
          }
        }
      }
      stream.WriteLine(testNormal().Start().Result);
      stream.WriteLine(testThrow().Start().Result);
    }
    
    class FakeAsyncResult : IAsyncResult
    {
      public AsyncState : object { get { throw NotImplementedException(); } }
      public AsyncWaitHandle : WaitHandle { get { throw NotImplementedException(); } }
      public CompletedSynchronously : bool { get { throw NotImplementedException(); } }
      public IsCompleted : bool { get { throw NotImplementedException(); } }
    }
    
    [TestCaseAttribute(<#
Value(42)
#>)]
    public static FromBeginEndTest(stream : IO.TextWriter) : void
    {
      def begin(callback : AsyncCallback) : IAsyncResult 
      {
        def deferred = FakeAsyncResult();
        Thread(fun()
        {
          Thread.Sleep(2000);
          callback(deferred);
        }).Start();
        deferred
      }
      
      def end(_ : IAsyncResult) : int
      {
        42
      }
      
      def task = comp async 
      {
        defcomp result = Async.FromBeginEnd(begin, end);
        return result
      };
      
      stream.WriteLine(task.Start().Result);
    }
    
    [TestCaseAttribute(<#
Value(-1)
#>)]
    public static FromBeginEndErrorTest(stream : IO.TextWriter) : void
    {
      def begin(callback : AsyncCallback) : IAsyncResult 
      {
        def deferred = FakeAsyncResult();
        Thread(fun()
        {
          Thread.Sleep(2000);
          callback(deferred);
        }).Start();
        deferred
      }
      
      def end(_ : IAsyncResult) : int
      {
        throw Exception();
      }
      
      def task = comp async 
      {
        try
        {
          defcomp result = Async.FromBeginEnd(begin, end);
          return result
        }
        catch
        {
          | _ => return -1
        }
      };
      
      stream.WriteLine(task.Start().Result);
    }

    private class UsingTest : IDisposable
    {
      private stream : IO.TextWriter;

      public this(stream : IO.TextWriter)
      {
        this.stream = stream;
        stream.WriteLine("UsingTest ctor");
      }

      public Dispose() : void
      {
        stream.WriteLine("UsingTest Dispose");
      }
    }

    [TestCaseAttribute(<#
UsingTest ctor
testNormal 1
testNormal 2
testNormal 3
UsingTest Dispose
Value(10)
UsingTest ctor
testThrow 1
testThrow 2
testThrow 3
UsingTest Dispose
Exception(System.Exception)
#>)]
    public static Using(stream : IO.TextWriter) : void
    {
      def testNormal()
      {
        comp async
        {
          using (UsingTest(stream))
          {
            stream.WriteLine("testNormal 1");
            callcomp Async.Yield();
            stream.WriteLine("testNormal 2");
            callcomp Async.Yield();
            stream.WriteLine("testNormal 3");
            return 10;
          }
        }
      }
      def testThrow()
      {
        comp async
        {
          using (UsingTest(stream))
          {
            stream.WriteLine("testThrow 1");
            callcomp Async.Yield();
            stream.WriteLine("testThrow 2");
            callcomp Async.Yield();
            stream.WriteLine("testThrow 3");
            throw Exception();
          }
        }
      }
      stream.WriteLine(testNormal().Start().Result);
      stream.WriteLine(testThrow().Start().Result);
    }

    [TestCaseAttribute(<#
AsyncWrite 1
AsyncWrite 2
AsyncWrite 3
AsyncWrite 4
Value(AsyncWrite done)
AsyncRead 1
AsyncRead 2 1024 True
AsyncRead 3 1024 True
AsyncRead 4 1024 True
Value(AsyncRead done)
#>)]
    public static ReadWrite(stream : IO.TextWriter) : void
    {
      def size = 1024;
      def bytes = array(size);

      def testRead()
      {
        comp async
        {
          using (file = IO.File.Open("testReadWrite", IO.FileMode.Open))
          {
            def test()
            {
              mutable res = true;
              for (mutable i = 0; i < size; ++i)
                res = res && bytes[i] == (i % 256) :> byte;
              res;
            }
            stream.WriteLine("AsyncRead 1");
            defcomp n = file.AsyncRead(bytes, 0, size);
            stream.WriteLine($"AsyncRead 2 $n $(test())");
            defcomp n = file.AsyncRead(bytes, 0, size);
            stream.WriteLine($"AsyncRead 3 $n $(test())");
            defcomp n = file.AsyncRead(bytes, 0, size);
            stream.WriteLine($"AsyncRead 4 $n $(test())");
            return "AsyncRead done";
          }
        }
      }

      def testWrite()
      {
        comp async
        {
          using (file = IO.File.Open("testReadWrite", IO.FileMode.Create))
          {
            for (mutable i = 0; i < size; ++i)
              bytes[i] = (i % 256) :> byte;

            stream.WriteLine("AsyncWrite 1");
            callcomp file.AsyncWrite(bytes, 0, size);
            stream.WriteLine("AsyncWrite 2");
            callcomp file.AsyncWrite(bytes, 0, size);
            stream.WriteLine("AsyncWrite 3");
            callcomp file.AsyncWrite(bytes, 0, size);
            stream.WriteLine("AsyncWrite 4");
            return "AsyncWrite done";
          }
        }
      }
      stream.WriteLine(testWrite().Start().Result);
      stream.WriteLine(testRead().Start().Result);
    }

    [TestCaseAttribute(<#
Value(1 123.123)
Value(2 123.123)
Value(3 123.123)
Value(4 123.123)
#>)]
    public static PromiseNormal(stream : IO.TextWriter) : void
    {
      def promise = AsyncPromise();
      def fn(n)
      {
        comp async
        {
          Console.Error.WriteLine($"PromiseNormal fn($n) 1 thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");
          defcomp p = promise;
          Console.Error.WriteLine($"PromiseNormal fn($n) 2 thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");
          // using InvariantCulture for successful run test on localized systems
          Threading.Thread.CurrentThread.CurrentCulture = Globalization.CultureInfo.InvariantCulture;
          return $"$n $p";
        }
      }
      def l = $[fn(i).Start() | i in [1..4]];
      Threading.Thread.Sleep(50);
      promise.SetValue(123.123);
      l.Map(_.Result).Iter(stream.WriteLine(_));
    }

    [TestCaseAttribute(<#
Exception(System.Exception)
Exception(System.Exception)
Exception(System.Exception)
Exception(System.Exception)
#>)]
    public static PromiseException(stream : IO.TextWriter) : void
    {
      def promise = AsyncPromise.[int]();
      def fn(n)
      {
        comp async
        {
          Console.Error.WriteLine($"PromiseException fn($n) 1 thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");
          defcomp p = promise;
          Console.Error.WriteLine($"PromiseException fn($n) 2 thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");
          return $"$n $p";
        }
      }
      def l = $[fn(i).Start() | i in [1..4]];
      def f = promise.WrapFunction(() =>
        {
          Threading.Thread.Sleep(50);
          throw Exception();
        });
      SystemExecutionContexts.ThreadPool().Execute(f);
      l.Map(_.Result).Iter(stream.WriteLine(_));
    }


    [TestCaseAttribute(<#
Value(1 (1 10))
Value(2 (2 10))
Value(3 (3 10))
Value(4 (4 10))
Value(5 (5 10))
#>)]
    public static WaitAsync(stream : IO.TextWriter) : void
    {
      def promise = AsyncPromise();
      def f1(n)
      {
        comp async
        {
          Console.Error.WriteLine($"WaitAsync f1($n) 1 thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");
          defcomp p = promise;
          Console.Error.WriteLine($"WaitAsync f1($n) 2 thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");
          return $"$n $p";
        }
      }
      def f2(n)
      {
        comp async
        {
          Console.Error.WriteLine($"WaitAsync f2($n) 1 thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");
          defcomp p = f1(n).Start();
          Console.Error.WriteLine($"WaitAsync f2($n) 2 thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");
          return $"$n ($p)";
        }
      }
      def l = $[f2(i).Start() | i in [1..5]];
      def f = promise.WrapFunction(() =>
        {
          Threading.Thread.Sleep(50);
          10;
        });
      SystemExecutionContexts.ThreadPool().Execute(f);
      l.Map(_.Result).Iter(stream.WriteLine(_));
    }

    public static Benchmark() : void
    {
      def count = 500000;
      def step  = 50000;
      {
        def time = System.Diagnostics.Stopwatch.StartNew();
        def arr = array(count);
        for (mutable i = 1; i < count; ++i)
        {
          def x = comp async
          {
            return 12;
          };
          arr[i] = x.Start();
          when (i % step == 0)
            Console.WriteLine($"Start $i $(time.Elapsed) $(i / time.Elapsed.TotalSeconds)");
        }
        def time = System.Diagnostics.Stopwatch.StartNew();
        for (mutable i = 1; i < count; ++i)
        {
          _ = arr[i].Result;
          when (i % step == 0)
            Console.WriteLine($"End   $i $(time.Elapsed) $(i / time.Elapsed.TotalSeconds)");
        }
      }
      {
        def time = System.Diagnostics.Stopwatch.StartNew();
        for (mutable i = 1; i < count; ++i)
        {
          def x = comp async
          {
            return 12;
          };
          _ = x.Start().Result;
          when (i % step == 0)
            Console.WriteLine($"Sync  $i $(time.Elapsed) $(i / time.Elapsed.TotalSeconds)");
        }
      }
    }
  }
}
