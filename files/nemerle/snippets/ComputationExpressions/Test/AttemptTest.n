using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.ComputationExpressions;

namespace Test
{
  /// <summary>
  /// Description of ContTest.
  /// </summary>
  public class AttemptTest
  {
    [TestCaseAttribute(<#
Some (1)
None
index = 1
index = 2
index = 3
index = 4
index = 5
index = 6
index = 7
index = 8
index = 9
index = 10
Some (100)
None
#>)]
    public static Test1(stream : IO.TextWriter) : void
    {
      def attempt = AttemptBuilder ();

      def f(inp)
      {
        if (inp < 10)
          attempt.Return (inp)
        else
          () => None();
      }

      def fn(inp1, inp2)
      {
        comp attempt
        {
          defcomp n1 : int = f(inp1);
          defcomp n2 = f(inp2);
          def sum = n1 + n2;
          // if (5 == 5) n1; else n2;
          callcomp attempt.Return(FakeVoid());
          // callcomp attempt.Return (0);
          call ();
          if (5 == 5) (); else ();
          mutable index = 0;
          while (index < 10) 
          {
            index ++;
            stream.WriteLine ("index = {0}", index);
            //return 0;
          }
          return sum;
          index = 100;
          return index;
          //if (5 == 5) (); else ();
        }
      }
      stream.WriteLine(f(1)());
      stream.WriteLine(f(12)());
      stream.WriteLine(fn(1, 2)());
      stream.WriteLine(fn(10, 2)());
    }
  }
}
