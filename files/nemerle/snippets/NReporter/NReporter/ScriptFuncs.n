using System;
using System.Console;
using System.Collections.Generic;
using Nemerle.Collections;
using Nemerle.Utility;
using Hashtable = Nemerle.Collections.Hashtable;

namespace NReporter
{
  /// <summary>
  /// Description of ScriptFuncs.
  /// </summary>
  module ScriptFuncs
  {
    /// Добавляет описание функции в словарь поддерживаемых функций
    public RegistrFunc(
      ty : Type, 
      realName : string, 
      scriptName : string, 
      paramsCnt : int
    ) : void
    {
      // Ищем методы с именем "name" и количестом параметров paramsCnt
      match (ty.GetMethods().Filter(m => m.Name == realName
                    && m.GetParameters().Length == paramsCnt))
      {
        | [methodInfo] => _funcMap.Add((scriptName, paramsCnt), methodInfo)
        // Паттерн _ :: _ :: _ сопоставляется со списком, состоящим из двух
        // или более элементов. Последний "_" может сопоставляться как с пустым
        // списком - [], так и с непустым.
        | _ :: _ :: _ => WriteLine(
            $"В типе $(ty.FullName) имеется более одного метода $realName()"
          + $"с количеством параметров, равным $paramsCnt.")
        | _ => WriteLine(
            $"Метод $(ty.FullName).$realName() не существует или не "
          + $"поддерживает $paramsCnt параметров.")
      }
    }
      
    /// Отображает (имя * кол-во параметров) => MethodInfo
    _funcMap : Hashtable[string * int, Reflection.MethodInfo] = Hashtable();
    
    
    public Call(
      name : string, 
      args : array[object], 
      messages : HashSet[string]) : object
    {
      match (_funcMap.TryGetValue(name, args.Length))
      {
        | (methInfo, true) => // Функция найдена...
          // Преобразуем типы параметров к указанным в описании метода.
          def convertedArgs = (args, methInfo.GetParameters()).MapToArray(
            (arg, pi) => Convert.ChangeType(arg, pi.ParameterType));
            
          methInfo.Invoke(null, convertedArgs) // Вызываем метод (динамически)
          
        | _ => _ = messages.Add($"Ошибка: Функция $name с $(args.Length) "
                           + "параметром[ами] не поддерживается.");
               "0"
      }
    }
  }
}
