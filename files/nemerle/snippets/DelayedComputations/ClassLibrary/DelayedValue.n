using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Threading;
using System.Collections.Generic;

namespace Nemerle
{
  public class DelayedValue['a] : LazyValue['a]
  {
    thread : Thread;
    mutable val : 'a;
    public this (f : void -> 'a)
    {
      base(()=>{thread.Join();val});
      
      thread = Thread(()=>val=f()); 
      thread.Start ();
    }
    
    public this (threadName : String, f : void -> 'a)
    {
      base(()=>{thread.Join();val});
      
      thread = Thread(()=>val=f()); 
      thread.Name = threadName;
      thread.Start ();
    }
    
    public static @: (dv : DelayedValue['a] ) : 'a
    {
      dv.Value
    }
    
    public HasValue : bool
    {
      get
      {
        !thread.IsAlive
      }
    }
    
    public Join() : void
    {
      thread.Join()
    }
    
    public Join(timeout : int) : bool
    {
      thread.Join(timeout)
    }
    
  }
}
