using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Nemerle.Statechart
{
  public class DoActivity
  {
    protected mutable task : Task;
    
    public action       : Action;
    public continuation : Action[Task];
    
    public this(action : Action)
    {
      this.action = action;
    }
    
    public this(action : Action, cont : Action[Task])
    {
      this(action);
      continuation = cont
    }
    
    public virtual Start() : void
    {
      task = Task.Factory.StartNew(action)
    }
    
    public virtual StartContinued() : void
    {
      task = Task.Factory.StartNew(action).ContinueWith(continuation)
    }
    
    public virtual Stop() : void
    {
    }
    
  }
  
  public class CancelableDoActivity
  {
    protected mutable task : Task;
    mutable cancel_source : CancellationTokenSource;
    public action : Action[CancellationToken];
    public continuation : Action[Task];
    
    public this(action : Action[CancellationToken])
    {
      this.action = action;
    }
    
    public this(action : Action[CancellationToken], cont : Action[Task])
    {
      this(action);
      continuation = cont;
    }
    
    Run() : void
    {
      action(cancel_source.Token)
    }
    
    public Start() : void
    {
      cancel_source = System.Threading.CancellationTokenSource();
      task = Task.Factory.StartNew(Run, cancel_source.Token)
    }
    
    public StartContinued() : void
    {
      cancel_source = System.Threading.CancellationTokenSource();
      task = Task.Factory.StartNew(Run, cancel_source.Token).ContinueWith(continuation)
    }
    
    public Stop() : void
    {
      try
      {
        cancel_source?.Cancel();
        task?.Wait();
      }
      catch
      {
        |_ is AggregateException => ()
      }
    }
    
  }
}
