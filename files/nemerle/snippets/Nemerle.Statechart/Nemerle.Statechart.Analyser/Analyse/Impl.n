using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  using FsmState;
  using PseudoStateNode;

  [Record]
  variant FsmError
  {
    | ParsingError { err : ParseError; }
    //| Sequence {seq : IEnumerable[FsmError];}
    //| UnknownState {state : FsmState;name : FsmState;tran : StateTransition;}
    | StateNotFound { tr : StateTransition; state : string;}
    | ParentStateNotFound {state : FsmState; parent : string;}
    | SeveralState { states : string;}
    | DuplicateStateTarget { tran : StateTransition; state : string; }
    | DuplicateTransition {tran : Transition;}
    | DuplicateHistory {history : PseudoStateNode.History;}
    | RegionMustContainInitial {reg : FsmState;tran : StateTransition;}
    | SubRegionsMustContainInitial {reg : list[FsmState];}
    | UnknownTerminateTransition {node : StateTransition;}
    | ForkMustGoToSeparateRegion {fork : StateTransition;}
    | ForkMustHaveAtLeastTwoTargets { fork : StateTransition; }
    | UnknownNode {tran : StateTransition; name : string; }
    | JoinTransitionMustHaveSameTrigger {tran : list[StateTransition]; join : PseudoStateNode.Join; }
    | JoinTransitionCannotHaveGuardsOrActions { tran : StateTransition; }
    | JoinTransitionMustLeaveRegion { join : PseudoStateNode.Join; }
    | JoinMustHaveAtLeastTwoSources { tran : StateTransition; }
    | JoinMustHaveSourcesFromStates { tar : list[TransitionTarget]; tr : StateTransition; }
    | DefaultTransitionMustGoToState {tran : StateTransition;history : PseudoStateNode;}
    //| JunctionElseMustBeLast {junction : PseudoStateNode;}
    //| JunctionElseMustAfterAnotherGuard {junction : PseudoStateNode;}
    //| EmptyJunction {junction : PseudoStateNode;}
    //| JunctionActionMaybeLast {junction : PseudoStateNode;action : list[Actions];}
    //| ChoiceElseMustBeLast {choice : PseudoStateNode;}
    //| ChoiceElseMustAfterAnotherGuard {junction : PseudoStateNode;}
    | EmptyChoice {junction : PseudoStateNode;}
    //| ChoiceActionMaybeLast {junction : PseudoStateNode;action : list[Actions];}
    //| SubMachineStateNotFound {fsm : FsmState.SubMachine;state : string;}
    | UnknownTarget {tran : StateTransition; target : TransitionTarget;}
    | InitialPseudoStateAtMostOne { init : PseudoStateNode.Initial; }
    | InitialTransitionMustGoToState { init : PseudoStateNode.Initial; }
    | InitialTransitionToHistoryMustHaveDefaultTran { init : PseudoStateNode.Initial; hist : PseudoStateNode.History; }
    | CompositeStateWithIncomingTransitionsMustHaveInitial { st : FsmState; }
    | StateHasNotHistory { st : FsmState; }
    | ElseMustHaveOtherTransition { tr : Transition; }
    | SeveralElseGuards { tr : Transition; }
    | PseudoStateNotFound { name : string; }
    | SeveralPseudoStates { lst : list[PseudoStateNode]; }
    | RelocatePseudoNotFound { tr : StateTransition; }
    | RelocateSourceNotSupported { pseudo : PseudoStateNode;}
    | RelocatePseudoAlreadyHaveTarget { tran : StateTransition; pseudo : PseudoStateNode;}
    | LocalTransitionTargetMustBeWithinOrSuper {tran : StateTransition;}
    | StateMachineNotFound { fsm : string; state : FsmState; }
    | ExtStateMachineNotFound { use : StateNode.Using; }
    | RegionMustContainSubRegions { reg : FsmState; }
    | LocalTransitionCannotTargetSelf { tran : StateTransition; }
    | EventDeclarationNumberOfParamsNotEqual { decl : StateNode.EventDecl; evt : TransitionEvent; }
    | EventDeclarationNotFound { evt : TransitionEvent; }
    | TimedEventNeedPositive { evt : StateEvent; }
    | SeveralInitialAttribute { st : FsmState; }
    | DoActivityDuplicateAction { do_act : StateAction.Do; act : FsmAction; }
    | InitialTransitionsGuardMustBeDistinctive { init : PseudoStateNode.Initial }
    | EventHaveActionName { evt : FsmAction; }
    | HistoryCannotBeInSimpleStates { hist : PseudoStateNode.History; }
    //| ThereMustBeOnlyOneInitial {st : FsmState; tr : list[StateTransition.Initial]; }

    public Loc : Location
    {
      get
      {
        match (this)
        {
          | StateNotFound(null, _)                                   => Location.Default
          | DuplicateTransition(tr) 
          | LocalTransitionCannotTargetSelf(tr)
          | ForkMustGoToSeparateRegion(tr)
          | InitialTransitionToHistoryMustHaveDefaultTran(_, tr)
          | CompositeStateWithIncomingTransitionsMustHaveInitial(tr)
          | ForkMustHaveAtLeastTwoTargets(tr)
          | JoinMustHaveAtLeastTwoSources(tr)
          | JoinTransitionMustLeaveRegion(tr)
          | JoinTransitionMustHaveSameTrigger(_, tr)
          | JoinMustHaveSourcesFromStates(_, tr)
          | UnknownNode(tr, _)
          | JoinTransitionCannotHaveGuardsOrActions(tr)
          | EventDeclarationNumberOfParamsNotEqual(_, tr)
          | StateMachineNotFound(_, tr)
          | ExtStateMachineNotFound(tr)
          | UnknownTarget(tr, _)
          | EventDeclarationNotFound(tr)
          | ParentStateNotFound(tr, _)
          | StateNotFound(tr, _)
          | DuplicateStateTarget(tr, _)
          | SeveralElseGuards(tr)
          | TimedEventNeedPositive(tr)
          | SeveralInitialAttribute(tr)
          | DoActivityDuplicateAction(_, tr)
          | EventHaveActionName(tr)
          | InitialTransitionsGuardMustBeDistinctive(tr)
          | HistoryCannotBeInSimpleStates(tr)
          | LocalTransitionTargetMustBeWithinOrSuper(tr)             => tr.Location
          | ParsingError(e)                                          => e.Location
          | _                                                        => Location.Default
        }
      }
    }
    
    public Text : string
    {
      get
      {
        match (this)
        {
          | ParsingError(e)                                          => $"Parse Error: $(e.Text)"
          | StateNotFound(_, s)                                      => $<#State "$s" Not Found#>
      //| SubMachineStateNotFound(m, s)                          => $<#Sub machine "$m" does not contain referenced sub state "$s"#>
          | UnknownTarget(tran, t)                                   => $<#Transition "$tran" has unknown target "$t"#>
          | DuplicateTransition(tran)                                => $<#Duplicate transition "$tran"#>;
          | DuplicateHistory(h)                                      => $<#Duplicate history "$h"#>
          | RegionMustContainInitial(reg, tran)                      => $<#Transition "$tran" requires region "$reg" to contain initial transition in each of it sub regions#>
          | SubRegionsMustContainInitial(sreg)                       => $<#Sub regions "..$sreg" must contain initial pseudostates to default state#>
          | UnknownTerminateTransition(tran)                         => $<#Unknown terminate transition target of "$tran", there is several terminate pseudostates, specify full name#>                  
          | ForkMustGoToSeparateRegion(f)                            => $<#Transition originated from fork pseudostate "$f" must target state in different concurrent sub regions of same region#>
          | UnknownNode(tran, n)                                     => $<#Unknown node "$n" used in target of "$tran" transition #>
          | JoinTransitionMustHaveSameTrigger(tran, _)               => $<#Transitions targeting join $tran must have same event trigger#>
          | JoinTransitionMustLeaveRegion(j)                         => $<#Transitions targeting join "$j" must leave states in distinct sub regions of same orthogonal region#>
          //| TransitionCrossOrthogonalBoundaryOfSameRegion(tran)      => $<#Transition "$tran" is cross orthogonal boundary of same region, this is not allowed#>
          | DefaultTransitionMustGoToState(tran, hist)               => $<#Default history transition "$tran" of history "$hist" must go to state#>
          | RegionMustContainSubRegions(reg)                         => $<#Region "$reg" must contain sub region states#>
          
      //| JunctionElseMustBeLast(j)                                => $<#Else node in junction "$(j.state).$j" must be the last alternative node#>
      //| JunctionActionMaybeLast(j, a)                            => $<#Junction action "$a" in "$(j.state).$j" maybe single in node or last#>
      //| JunctionElseMustAfterAnotherGuard(j)                     => $<#Junction else node in "$(j.state).$j" must have preceded another GuardNode#>
      //| EmptyJunction(j)                                         => $<#There is a empty node in junction "$(j.state).$j"#>
      //| ChoiceElseMustBeLast(j)                                  => $<#Else node in choice "$(j.state).$j" must be the last alternative node#>
      //| ChoiceActionMaybeLast(j, a)                              => $<#Choice action "$a" in "$(j.state).$j" maybe single in node or last#>
      //| ChoiceElseMustAfterAnotherGuard(j)                       => $<#Choice else node in "$(j.state).$j" must have preceded another GuardNode#>
          | EmptyChoice(j)                                           => $<#There is a empty node in choice "$(j.state).$j"#>
          | DuplicateStateTarget(tr, st)                             => $<#Ambiguous target "$st" of transition "$tr". There is more than one states of this name#>
          | SeveralState(st)                                         => $<#There is several duplicate states of name $st in target of transition #>
          | ParentStateNotFound(s, p)                                => $<#Parent state "$p" for state "$s" not found#>
          | InitialPseudoStateAtMostOne(i)                           => $<#There can be only one initial pseudostate in region, error defined in "$i" #>
          | InitialTransitionMustGoToState(i)                        => $<#Transition from initial pseudostate "$i", must go to default sub state or history of a composite state, not other targets#>
          | InitialTransitionToHistoryMustHaveDefaultTran(i, h)      => $<#History pseudostate "$h" targeted from initial pseudostate "$i" must have transition to default state#>
          | StateHasNotHistory(s)                                    => $<#State "$s" does'nt have history #>
          | ElseMustHaveOtherTransition(t)                           => $<#Single else guard in "$t" but no other transitions with same event and guards#>
          | SeveralElseGuards(t)                                     => $<#Several else guards is not permitted: $t#>
          | PseudoStateNotFound(n)                                   => $<#Pseudostate with name "$n" not found#>
          | SeveralPseudoStates(lst)                                 => $<#Several pseudostates with same name found [..$lst]#>
          | RelocatePseudoNotFound(t)                                => $<#Pseudostate source of transition "$t" not found#>
          | RelocateSourceNotSupported(p)                            => $<#Source "$p" of relocate element not supported#>
          | RelocatePseudoAlreadyHaveTarget(t, p)                    => $<#Relocate element "$p" from transition $t already have target#>
          | LocalTransitionTargetMustBeWithinOrSuper(tran)           => $<#Local transition target must be inside of source state or in super state of source: "$tran"#>
          | StateMachineNotFound(f, st)                              => $<#Statemachine "$f" not found, during instantiation "$st"#>
          | ExtStateMachineNotFound(StateNode.Using(f))              => $<#External statemachine not found from type "$f"#>
          | CompositeStateWithIncomingTransitionsMustHaveInitial(st) => $<#Composite state "$st" have incoming transitions and must have initial pseudostate targeting default state#>
          | LocalTransitionCannotTargetSelf(tr)                      => $<#Local transition "$tr" cannot target source vertex #>
          | ForkMustHaveAtLeastTwoTargets(tr)                        => $<#Transitions originated from fork pseudostate "$tr" must target at least two states in different concurrent sub regions#>
          | JoinMustHaveAtLeastTwoSources(p)                         => $<#Transitions originated from join pseudostate "$p" must have at least two source states#>
          | JoinMustHaveSourcesFromStates(tar, _)                    => $<#Join must have source from states not other sources: $tar#>
          | JoinTransitionCannotHaveGuardsOrActions(tr)              => $<#Transition targeting join pseudostate "$tr" cannot have guards or actions#>
          | EventDeclarationNumberOfParamsNotEqual(d, e)             => $<#Event declaration "$d" has parameters not equal to event "$e" #>
          | EventDeclarationNotFound(e)                              => $<#Event declaration for parameter types for event "$e" not found#>
          | TimedEventNeedPositive(e)                                => $<#Timed relative event "$e" need positive value above zero#>
          | SeveralInitialAttribute(st)                              => $<#Attribute [Initial] on state "$st" is used on another state in same composite state#>
          | DoActivityDuplicateAction(act, a)                        => $<#There is actions "$a" with same name as do activity "$act" this is not allowed#>
          | InitialTransitionsGuardMustBeDistinctive(init)           => $<#Initial pseudo state "$init" must have transitions those guards is cover all possible cases with all guards and one else guard#>
          | EventHaveActionName(a)                                   => $<#Event and action have one name "$a"#>
          | HistoryCannotBeInSimpleStates(h)                         => $<#Simple state cannot have history "$h"#>
      //| ThereMustBeOnlyOneInitial(s, t)                             => $<#In state "$s" may be only one unguarded initial transition, these transitions erroneus: "..$t"#>
      //| Sequence(e)                                            => $<#..$(e;"\n";GetError)#>
      //| n                                                        => throw InvalidOperationException($"unnkown error $n")
        }
      }
    }

  }

  [Record]
  variant FsmWarning
  {
    | HistoryNotUsed {hist : PseudoStateNode;}
    | StateNotUsed {state : FsmState;}
    | TransitionNotUsed {tran : StateTransition;}
    | TransitionOverriden {tran : StateTransition;by : list[StateTransition];}
    | RegionNotUsed {regions : FsmState;}
    | NoConcurrentActivity {act : StateAction.Do;}
    | DeferIsAlwaysOverriden { defer : Transition; other : list[Transition]; }
    
    public Loc : Location
    {
      get
      {
        match (this)
        {
          | TransitionOverriden(l, _)
          | DeferIsAlwaysOverriden(l, _)
          | TransitionNotUsed(l)        
          | StateNotUsed(l)              => l.Location
          | _                            => Location.Default
        }
      }
    }
    
    public Text : string
    {
      get
      {
        match (this)
        {
          | HistoryNotUsed(hist = PseudoStateNode.History(state = st, type = t))  => $<#"$t History in "$st" is not used in fsm life history#>
          | StateNotUsed(state = st)                                              => $<#State "$st" is not used in fsm life history#>
          | TransitionNotUsed(tran)                                               => $<#Transition "$tran" is not used in fsm life history#>
          | RegionNotUsed(reg)                                                    => $<#Concurrent region "$reg" is not used in fsm life history#>
          | NoConcurrentActivity(act)                                             => $<#There is no other activities in do activity node $act. Flag is no meaning, concurrent activity means that several activities may run concurently in do activity region of state.#>
          | TransitionOverriden(tran, by)                                         => $<#Transition "$(tran)" is overriden by $(by), due to execute priority rules, because this transitions is always enabled#>
          | DeferIsAlwaysOverriden(defer, tr)                                     => $<#Deferrable event "$defer" is always overriden by $tr#>
          | x                                                                     => $"Unknown Warning $x"
        }
      }
    }
  }

  variant ParseError
  {
    | DuplicateActivity {node : StateNode.DoActivity;}
    | UnknownElement { node : StateNode; }
    | UnknownMachineFlag {flag : string;}
    | TimedEventValueOverflow { evt : TransitionEvent; }
    | TimedEventUnknownUnit { evt : TransitionEvent; unit : string; }
    | TimedEventInvalidValue { evt : TransitionEvent; } 
    | TimedEventDuplicateUnit { evt : TransitionEvent; unit : string; }
    | RegionSeparatorNotAllowedInRegions { node : StateNode; }
    
    public Location : Location
    {
      get
      {
        match (this)
        {
          | DuplicateActivity(a)
          | UnknownElement(a)
          | TimedEventValueOverflow(a)
          | TimedEventInvalidValue(a)
          | TimedEventDuplicateUnit(a, _)
          | RegionSeparatorNotAllowedInRegions(a)
          | TimedEventUnknownUnit(a, _)   => a.Location
          | _                             => Location.Default
        }
      }
    }
    
    public Text : string
    {
      get
      {
        match (this)
        {
          | DuplicateActivity(act)                => $<#Duplicate do activity $act, state may have only one do activity node#>
          | UnknownElement(node)                  => $<#Unknown parse node $node #>
          | UnknownMachineFlag(f)                 => $<#Unknown state machine flag "$f" #>
          | TimedEventValueOverflow               => <#Overflow in value of timed event#>
          | TimedEventUnknownUnit(_, u)           => $<#Unknown unit "$u" of time used in timed event#>
          | TimedEventInvalidValue                => <#Invalid value used in timed event#>
          | TimedEventDuplicateUnit(_, u)         => $<#Duplicate unit "$u" used in timed event#>
          | RegionSeparatorNotAllowedInRegions    => <#Region separator not allowed in 'region' syntax#>
        }
      }
    }
  }

  [Record]
  class FsmErrorException : Exception
  {
    public error : FsmError;

    public this() {}
  }


}
