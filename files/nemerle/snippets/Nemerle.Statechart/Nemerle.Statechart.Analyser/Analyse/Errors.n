using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  internal class Messager
  {
    Errors   : List[FsmError] = List();
    Warnings : List[FsmWarning] = List();

    
    public AddWarning(err : FsmWarning) : void
    {
      Warnings.Add(err);
    }

    public AddWarning(err : IEnumerable[FsmWarning]) : void
    {
      Warnings.AddRange(err);
    }

    public AddError(err : IEnumerable[FsmError]) : void
    {
      Errors.AddRange(err)
    }

    public AddError(err : FsmError) : void
    {
      Errors.Add(err)
    }

    public AddError(err : IEnumerable[ParseError]) : void
    {
      AddError(err.Map(x => FsmError.ParsingError(x)))
    }

    public ErrorMessages : list[Location * string]
    {
      get
      {
        Errors.Map(x => (x.Loc, x.Text))
      }
    }

    public WarningMessages : list[Location * string]
    {
      get
      {
        Warnings.Map(x => (x.Loc, x.Text))
      }
    }
  
  }

  /// <summary>
  /// Description of Errors.
  /// </summary>
  public partial class FsmAnalyser
  {
    internal messager : Messager = Messager();
    
    public ErrorMessages : list[Location * string]
    {
      get
      {
        messager.ErrorMessages
      }
    }
    
    public WarningMessages : list[Location * string]
    {
      get
      {
        messager.WarningMessages
      }
    }
    
    CheckParseErrors() : void
    { 
      def check_err(err)
      {
        match (err)
        {
          | StateNode.Error(StateNode.Region as node)     => ParseError.RegionSeparatorNotAllowedInRegions(node)
          | StateNode.Error(StateNode.DoActivity as node) => ParseError.DuplicateActivity(node)
          | StateNode.Error(node)                         => ParseError.UnknownElement(node)
        }
      }

      def get_timed_evt(x, a)
      {
        def evt = x.transitions.SelectMany(x => x.evt);
        def err = evt.Filter(x => x is TransitionEvent.Timed(TimedExpr.Error));
        err + a
      }
      
      def flags = Fsm.flags.errors.Select(ParseError.UnknownMachineFlag);
      def timed_err = TreeUtils.Fold(Fsm.state, [], x => x.sub_states, get_timed_evt);
      foreach (TransitionEvent.Timed(TimedExpr.Error(e)) as evt in timed_err)
      {
        def report(e)
        {
          messager.AddError(FsmError.ParsingError(e))
        }
        
        match (e)
        {
          | TimedErrorType.InvalidValue => report(ParseError.TimedEventInvalidValue(evt))
          | Overflow                    => report(ParseError.TimedEventValueOverflow(evt))
          | UnknownUnit(u)              => report(ParseError.TimedEventUnknownUnit(evt, u))
          | DuplicateUnit(u)            => report(ParseError.TimedEventDuplicateUnit(evt, u))
        }
      }
      
      def err = Fsm.GetErrors().Select(check_err);
      def errs = err.Concat(flags);
      messager.AddError(errs)
    }

    public BreakIfError() : void
    {
      when (!messager.ErrorMessages.IsEmpty()) throw FsmErrorException()
    }


  }
}
