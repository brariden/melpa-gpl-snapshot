using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Statechart;
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Collections;

using NC = Nemerle.Collections;

namespace Nemerle.Statechart
{
  using ListUtils;

  //[Record]
  public partial class FsmAnalyser
  {

    internal statemap : StateMap;

    public FsmFlags : MachineFlags {get;set;}

    EventDecls : list[StateNode.EventDecl]
    {
      get
      {
        Fsm.event_decls
      }
    }
    
    EventClasses : list[EventClass];
    
    
    public LoadedMachines : Hashtable[string, StateNode.StateMachine]
    {
      get
      {
        statemap.LoadedMachines
      }
    }

    [Memoized]
    Events : list[StateEvent]
    {
      get
      {
        def evts = Transitions.Select(_.Trigger);
                   
        def evts = evts.Where(x => x.Name != null);
        evts.RemoveDuplicatesSort(x => x.Name)
      }
    }

    States : array[FsmState]
    {
      get
      {
        statemap.States
      }
    }

    internal StateTransitions : array[StateTransition]
    {
      get
      {
        statemap.Transitions
      }
    }

    public Complete : bool
    {
      get
      {
        messager.ErrorMessages.IsEmpty() && !ActiveStates.IsEmpty()
      }
    }

    HistoryStates : IEnumerable[PseudoStateNode.History]
    {
      get
      {
        PseudoStates.FilterType()
      }
    }

    PseudoStates : array[PseudoStateNode]
    {
      get
      {
        statemap.PseudoStates
      }
    }

    [Memoized(States, PseudoStates)]
    InitialTran : IEnumerable[StateTransition]
    {
      get
      {
        States.SelectMany(_.initial_tran)
      }
    }

    forks : IEnumerable[PseudoStateNode.Fork]
    {
      get
      {
        PseudoStates.FilterType()
      }
    }

    joins : IEnumerable[PseudoStateNode.Join]
    {
      get
      {
        PseudoStates.FilterType()
      }
    }

    Fsm : StateNode.StateMachine;

    public NextJunctionNum() : int
    {
      unnamed_junction_num++;
      unnamed_junction_num
    }

    public NextChoiceNum() : int
    {
      unnamed_choice_num++;
      unnamed_choice_num
    }

    public mutable StatesId : StateId;

    internal StateMachinesInProj : list[string * StateNode.StateMachine];

    public static Flags : list[string * MachineFlag]  = [
                                                         ("debug", MachineFlag.Debug),
                                                         ("auto_initial", MachineFlag.AutoInitial),
                                                         ("local_default", MachineFlag.LocalDefault),
                                                         ("property_state_change", MachineFlag.PropertyStateChanged),
                                                         ("only_analyse", MachineFlag.OnlyAnalyse),
                                                         ("auto_entry_exit", MachineFlag.AutoEntryExitActions),
                                                         ("testing", MachineFlag.TestingFeatures),
                                                         ("transition_completed", MachineFlag.TransitionCompleted),
                                                         ("log", MachineFlag.Logging),
                                                         ("force_field_concurrent", MachineFlag.ForceFieldConcurrentStates),
                                                         ("force_concurrent_combination", MachineFlag.ForceConcurrentStateCombination)
                                                        ];

    public this(fsm : StateNode.StateMachine, name : string, mach : list[string * StateNode.StateMachine], evt_classes : list[EventClass])
    {
      this.Fsm = fsm;
      StateMachinesInProj = mach;
      def fsm_name = fsm.name;
      EventClasses = evt_classes;
      Name = if (fsm_name != null && !fsm_name.IsEmpty()) fsm_name.SpacesToUnderline() else name;
      statemap  = StateMap(this);
    }

    public Name     : string;

    FinalizeAnalyse() : void
    {
      StatesId = StateId(ActiveStates);
      StatesId.CreateMasks();

      when (false && ActiveStates.Length != 0)//FsmFlags.Debug)
      {
        def longest = ActiveStates.Max(x => x.name.Length);
        def len = ActiveStates.Count();

        def create_state_report(st)
        {
            | ActiveStateConfig(Id = null) with id = IdType(BitArray(len))
            | ActiveStateConfig(Id = id) =>

                def id_hex = id.Result.Fold("", (x, a) => x.ToString("X8") + a);
                def id_val = id.val.OfType.[bool]().MapListRev(x => if (x) '1' else '0');
                def id_val = string(id_val.ToArray());
                string.Format($<#{0, $longest}: Id = $(id_val) (0x$id_hex) #>, st.name)
        }
      
        def info = ActiveStates.Map(create_state_report);
        File.WriteAllLines($"$(Name)statemap.log", info);
      }
    }

    public Error : bool
    {
      get
      {
         !messager.ErrorMessages.IsEmpty()
      }
    }

    TopState : FsmState
    {
      get
      {
        statemap.StateTree
      }
    }

  }
}
