using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  partial class FsmAnalyser
  {
    ModelTransitionsThrough(tran : list[Transition]) : void
    {
      def get_states(x, a)
      {
        match (x)
        {
          | TargetDeterminator.State(st) 
          | Completion(st)               => st :: a
          | TargetDeterminator.Junction(tree, _) => tree.Targets.FoldLeft(a, get_states)
          | _                            => a
        }
      }

      def get_trans(x, a)
      {
        match (x)
        {
          | TargetDeterminator.History(PseudoState.History(default = Some(t))) => t :: a
          | _                                                                  => a
        }
      }
      
      tran.Iter(x => x.Used = true);
      def states = tran.FoldLeft([], (x, a) => x.DecisionTree.Targets.FoldLeft(a, get_states));
      def trans = tran.FoldLeft([], (x, a) => x.DecisionTree.Targets.FoldLeft(a, get_trans));
      def states = states.Where(x => !x.Used).Distinct().NToList();
      def tran = states.SelectMany(x => x.transitions).Concat(trans).NToList();
      states.Iter(x => x.Used = true);
      if (tran.IsEmpty()) () else ModelTransitionsThrough(tran)
    }
    
    CheckUsedElements() : void
    {
      
      when (InitialTransition != null) ModelTransitionsThrough(InitialTransition :: []);
      
      def (active_used, not_used) = ActiveStates.Partition(_.Used);
      def used_states = active_used.SelectMany(_.states).Distinct().NToList();
      def not_used_states = States.NToList().Exclude(x => used_states.ContainsRef(x.ToHState));
      def not_used_states = if (not_used_states is FsmState(IsTopState = true) :: [] && States.Length == 1) [] else not_used_states;
      def not_used_states = not_used_states.Exclude(_.generated);
      def not_used_states = not_used_states.Exclude(x => x.InstancesOfSameStateMachine.Exists(x => !not_used_states.ContainsRef(x)));
      def not_used_states = not_used_states.Exclude(_.IsSubRegion);
      
      foreach (st in not_used)
      {
        def tran = Transitions.Filter(x => x.Source : object == st);
        tran.Iter(x => x.MayRun = false);
      }
      
      def trans = not_used_states.SelectMany(_.transitions);
      def not_runned = Transitions.GroupBy(x => x.Location);
      foreach (tr in not_runned)
      {
        def loc = tr.Key;
        def tr = tr.Filter(x => x.Source.Used);
        when (!tr.IsEmpty() && tr.All(x => !x.MayRun && !x.OverridenBy.IsEmpty()))
        {
          def tr_this = StateTransitions.First(x => x.Location == loc);
          def by_tr = tr.SelectMany(x => x.OverridenBy.SelectMany(x => if (x.ConcurrentGroup.IsEmpty()) x :: [] else x.ConcurrentGroup)).Distinct().NToList();
          def by_tr = by_tr.Map(k => StateTransitions.First(x => x.Location == k.Location));
          def distinct = by_tr.Distinct().NToList();
          messager.AddWarning(FsmWarning.TransitionOverriden(tr_this, distinct))
        }
      }
      
      
      def warn = trans.Map(FsmWarning.TransitionNotUsed);
      messager.AddWarning(warn);
      def warn = not_used_states.Map(FsmWarning.StateNotUsed);
      messager.AddWarning(warn);
    }

  }
}
