using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using ListUtils;
  //using DecisionNode;
  /// <summary>
  /// Description of AnalysePseudo.
  /// </summary>
  partial class FsmAnalyser
  {
    mutable unnamed_junction_num : int;
    mutable unnamed_choice_num   : int;

    CheckHistoryStates() : void
    {
      // check for duplicates
      foreach (FsmState(history = TwoOption.Two(n, n2)) in States)
      {
        match (n.type, n2.type)
        {
          | (HistoryType.Deep, HistoryType.Deep)
          | (HistoryType.Shallow, HistoryType.Shallow) => messager.AddError(FsmError.DuplicateHistory(n))
          | _                                          => ()
        }
      }
      
      // check history duplicates in state
      foreach (h in HistoryStates)
      {
        | PseudoStateNode.History(default = Some(d)) when (d.ToState == null) => messager.AddError(FsmError.DefaultTransitionMustGoToState(d, h))
        | History(state = FsmState(IsSimple = true)) as h                     => messager.AddError(FsmError.HistoryCannotBeInSimpleStates(h))
        | _                                                                   => ()
      }
    }

    
  }
}
