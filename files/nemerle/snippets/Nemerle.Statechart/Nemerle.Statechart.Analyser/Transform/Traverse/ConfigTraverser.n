using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  /// <summary>
  /// Description of ConfigTraverser.
  /// </summary>
  class ConfigTraverser
  {

    transitions : list[HTransition];
    
    [Accessor]
    active_proc : ActiveConfigProcessor;

    res_trans : List[Transition] = List();

    public Result : IEnumerable[Transition]
    {
      get
      {
        res_trans
      }
    }
    
    public static GetInitialConfiguration(this proc : ActiveConfigProcessor, st : HState) : list[HState]
    {
      def conf = TransitionPath.Solve(proc, Config.Unknown(st), x => x.init_state.Value :: []);
      conf.Head.states
    }
    
    //[Memoized]
    public InitialTransition(init : HTransition) : Transition
    {
      def path = TransitionPath(init, active_proc);
      path.TraverseInitial()
    }

    public this(tran : list[HTransition], act : ActiveConfigProcessor)
    {
      transitions = tran;
      active_proc = act;
    }

    public Transitions : IEnumerable[Transition]
    {
      get
      {
        res_trans
      }
    }

    public ActiveConfigs : list[ActiveStateConfig]
    {
      get
      {
        active_proc.ActiveConfigs.NToList()
      }
    }

    public TraverseTran(tr : HTransition) : list[Transition]
    {
      def path = TransitionPath(tr, active_proc);
      path.Traverse();
    }

    Traverse(tr : HTransition) : void
    {
      def res = TraverseTran(tr);
      res_trans.AddRange(res)
    }

    public Start() : void
    {
      foreach (tr in transitions) Traverse(tr);
    }
  }
}
