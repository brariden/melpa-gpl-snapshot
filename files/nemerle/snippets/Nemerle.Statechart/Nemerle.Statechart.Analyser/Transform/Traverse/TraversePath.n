using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  partial class TraversePath
  {
    
    GetTargetConfig() : ActiveStateConfig
    {
      if (FixedRegions.IsEmpty())
      {
        tran_path.InitialConfiguration(TargetStates)
      } else
      {
        def tar = TargetStates.SelectMany(x => x.active_config).NToList();
        def src = Source.states.Exclude(y => !y.regions.ContainsIn(FixedRegions));
        def target = src.FoldLeft(tar, (x, a) => if (TargetStates.Exists(y => x.SameRegion(y))) a else x :: a);
        tran_path.InitialConfiguration(target)
      }
    }
        
    static CheckCompletion(act : ActiveStateConfig) : TargetDeterminator
    {
      def simple = act.simple_states;
      if (simple.All(_.IsFinal))
      {
        TargetDeterminator.Completion(act)
      } else
      {
        def w_completion = act.completion_originated;
        def w_do = w_completion.Filter(x => !x.do_activity.IsEmpty());
        foreach (st in w_do)
        {
          st.do_activity.Iter(x => x.need_completion = true);
        }
        match (w_completion, w_do)
        {
          | (_ :: _, []) => TargetDeterminator.Completion(act)
          | _            => TargetDeterminator.State(act)
          
        }
      }
    }
    
    ExitSource() : void
    {
      path.AddExit(ExitPath)
    }
    
    Action() : void
    {
      path.AddAction(Lca, transition.Actions)
    }
    
    EntryTarget() : void
    {
      path.AddEntry(EntryPath)
    }
    
    TraverseJunction(j : HPseudoState.Junction) : TargetDeterminator
    {
      tree_trav.Traverse();
      def tree = tree_trav.ResultTree;
      //j.decision_tree = tree;
      TargetDeterminator.Junction(tree, j.name)
    }
    
    public NewTarget(tar : HTarget) : TraversePath
    {
      TraversePath(this, Source, tar)
    }
    
    public ProcessTarget() : TargetDeterminator
    {
      match (tran_target)
      {
        | HTarget.State
        | HTarget.PseudoState(HPseudoState.Fork)          => CheckCompletion(Target)
        | HTarget.PseudoState(HPseudoState.Terminate)     => TargetDeterminator.Terminate()
        | HTarget.PseudoState(HPseudoState.History as h)  => TargetDeterminator.History(h.PseudoState :> PseudoState.History)
        | HTarget.PseudoState(HPseudoState.Junction as j) => TraverseJunction(j)
        | HTarget.Defer                                   => TargetDeterminator.Defer()
        | _                                               => TargetDeterminator.NoStateChange()
      }
    }

    public CreateEntryPath() : Transition
    {
      Action();
      when (!IsInternal) EntryTarget();
      def target = ProcessTarget();
      def tree = tree_trav.Create(target);
      Transition(Source, null, transition.Trigger, transition.Guard, path.Path, target, tree, 0, 0, transition.Kind, false, false, [], [], TargetStates)
    }
    
    public CreatePath() : Transition
    {
      if (IsInternal)
      {
        Action()
      } else
      {
        when (MainTarget != null)
        {
          ExitSource();
          Action();
          EntryTarget();
        }
      }
      def target = ProcessTarget();
      def tree = tree_trav.Create(target);
      def originate = if (tran_source is HTarget.State(st)) st else null;
      Transition(transition.Location, Source, originate, transition.Trigger, transition.Guard, path.Path, target, tree, 0, 0, transition.Kind, false, false, [], [], TargetStates)
    }
    
  }
}
