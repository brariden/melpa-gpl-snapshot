using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  
  using SCG = System.Collections.Generic;
  
  variant Config
  {
    | Concurrent { lst : list[HState] }
    | Simple { st : HState }
    | Composite { st : HState }
    | Unknown { st : HState }
  }

  [Record]
  variant Configuration
  {
    | Simple { st : HState }
    | Sequential { states : list[HState]; }

    public States : list[HState]
    {
      get
      {
        match (this)
        {
          | Simple(a)     => [a]
          | Sequential(a) => a
        }
      }
    }

    public static @+(a : Configuration, b : Configuration) : Configuration
    {
      | (Simple(a), Simple(b))         => Sequential([a, b])
      | (Simple(a), Sequential(b))     => Sequential([a] + b)
      | (Sequential(a), Simple(b))     => Sequential(a + [b])
      | (Sequential(a), Sequential(b)) => Sequential(a + b)
    }
    
    public override ToString() : string
    {
       States.ToString()
    }
    
  }

  class ConfigSolver
  {
    mutable known : Config;

    mutable sub_selector : HFsm -> list[HState];

    solved_unknown : Config
    {
      get
      {
        match (known)
        {
          | Unknown(st) => 
              match (st.hierarchy)
              {
                | []      => Config.Simple(st)
                | _       => Config.Composite(st)
              }
          | st  => st
        }
      }
    }

    known_state : HState
    {
      get
      {
        match (solved_unknown)
        {
          | Config.Simple(st) 
          | Config.Composite(st) => st
          | _                    => null
        }
      }
    }
    
    public this(known : Config, sel : HFsm -> list[HState])
    {
      this.known = known;
      sub_selector = sel;
    }

    mutable reside : list[HState];
    
    [Memoized]
    active_config : list[HState]
    {
      get
      {
        reside.SelectMany(x => x.active_config).Distinct().NToList()
      }
    }
    
    GetRegionConfig(reg : HFsm) : list[Configuration]
    {
      def sub = reg.states;//sub_selector(reg);
      match (active_config.Find(x => sub.ContainsRef(x)))
      {
        | Some(st) => GetStateConfigs(st)
        | _        => def sub = sub_selector(reg);
                      sub.SelectMany(x => GetStateConfigs(x)).NToList();
      }
    }
    
    GetStateConfigs(st : HState) : list[Configuration]
    {
      match (st.hierarchy)
      {
        | []     => Configuration.Simple(st) :: []
        | [reg]  => GetRegionConfig(reg)
        | regs   => def sregs = regs.Map(GetRegionConfig);
                    def comb = NList.Product(sregs).Rev();
                    def comb = comb.Map(x => x.Reduce((x, a) => a + x));
                    comb
      }
    }
    
    public Solve() : list[Configuration]
    {
      match (solved_unknown)
      {
        | Simple(st)
        | Composite(st)  => reside = st :: []
        | Concurrent(st) => reside = st.OrderBy(x => x.hierarchy_pos).NToList();//def confs = st.Map(GetStateConfigs);
        | _              => ()
      }
                
       def result = GetStateConfigs(active_config.Head);
       result
    }

  }

}
