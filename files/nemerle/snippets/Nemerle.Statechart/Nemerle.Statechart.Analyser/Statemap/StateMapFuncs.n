using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of StateMapFuncs.
  /// </summary>
  partial class StateMap
  {   
    
    GetResolve(source : FsmState, state : list[FsmState]) : list[FsmState]
    {
      def src_super = source.SuperStatesInclude;
      def count_equal = state.Map(x => (x, x.SuperStatesInclude.Filter(x => src_super.ContainsRef(x))));
      def ordered = count_equal.OrderByDescending((_, x) => x.Count());
      def grouped = ordered.GroupBy((_, x) => x.Count());
      def res = grouped.First();
      res.Map((x, _) => x)
    }
    
    Get(src : FsmState, qual : string, states : IEnumerable[FsmState], on_error : FsmError -> void) : FsmState
    {
      Get(src, qual.SplitToList('.'), states, on_error)
    }
    
    Get(source : FsmState, state : list[string]) : FsmState
    {
      Get(source, state, States, messager.AddError)
    }
    
    Get(st : FsmState, qual : string) : FsmState
    {
      Get(st, qual, States, messager.AddError)
    }
    
    Get(source : FsmState, state : list[string], states : IEnumerable[FsmState], on_error : FsmError -> void) : FsmState
    {
      def merge_name(n)
      {
        $<#..$(n;".")#>
      }

      def get_loop(st : list[_], lst, path)
      {
        | (st, head :: tail, p) => 
              def path = head :: p;
              match (get_all_state(st, head), tail)
              {
                | ([], _)    => when (on_error != null) on_error(FsmError.StateNotFound(null, merge_name(path.Rev()))); null
                | ([st], []) => st
                | ([st], _)  => get_loop(st.sub_states.NToList(), tail, path)
                | (lst, _)   => match (GetResolve(source, lst)) // пытаемся разрешить неоднозначность
                                {
                                  | [st] => st
                                  | _    => when (on_error != null) 
                                            {
                                              //def n = lst.Map(x => merge_name((x.NativeName :: p).Rev()));
                                              on_error(FsmError.SeveralState(head)); 
                                            }
                                            null
                                }
              }
        | _                => null
      }

      get_loop(states.NToList(), state, [])
    }

    public GetPseudo(source : FsmState, full_name : list[string]) : PseudoStateNode
    {
      def pseudo_name = full_name.Last();
      def state = GetParent(source, full_name);
      def pseudo = state.pseudo_states.Filter(x => if (x.NativeName is Some(n)) n == pseudo_name else false);
      match (pseudo)
      {
        | []  => messager.AddError(FsmError.PseudoStateNotFound($<#..$(full_name;".")#>)); null
        | [p] => p
        | lst => messager.AddError(FsmError.SeveralPseudoStates(lst)); null
      }
    }
    
    public GetParent(src : FsmState, state : list[string]) : FsmState
    {
      Get(src, state.ChopLast().NToList())
    }

    get_all_state(map : IEnumerable[FsmState], state : string) : list[FsmState]
    {
      def name = state;// ?? FsmState.TopStateName;
      def (name, sub_name) = //if (name != FsmState.TopStateName) 
                              {
                                def sub =  name.GetSub('[', ']');
                                if (sub != null) (name.GetSub('['), sub) else (name, null)
                              }// else (name, null);
      def name = if (sub_name != null) $"$(name)SubRegion$sub_name" else name;
      map.Filter(x => x.NativeName == name)
    }

    GetQual(src : FsmState, state : string, tran : StateTransition) : FsmState
    {
      //def st = state.SplitToList('.');
      def states = if (tran != null && tran.Local) src.AllStates else States;
      Get(state, src, states)
    }

    Get(state : string, src : FsmState, states : IEnumerable[FsmState]) : FsmState
    {
      Get(src, state, states, null)
    }
    
    GetNamed(n : string, par : FsmState, tran : StateTransition, src : FsmState) : TransitionTarget
    {
      // par - точный адрсе
      // src - примерное начало
      def from = if (tran != null) tran.From else null;
      // TODO: разрешение с помощью супер состояний
      def (states, pseudo) = if (par != null) (par.sub_states, par.pseudo_states) else 
         //if (from != null && tran.Local) (from.AllSubStates.Concat(from.super_states), from.AllPseudo)
         (States, PseudoStates);
      def src = par ?? from ?? src;
      mutable err = [];
      match (Get(src, n, states, x => err ::= x))
      {
        | null => match (ResolvePseudoIn(n, pseudo))
                  {
                    | null => if (err is FsmError.SeveralState :: [])
                              {
                                messager.AddError(FsmError.DuplicateStateTarget(tran, n));
                                TransitionTarget.Error(tran.To)
                              } else null
                    | p    => p
                  }
        | st   => TransitionTarget.State(st)
      }
    }
    
    ResolvePseudoIn(n : string, st : IEnumerable[PseudoStateNode]) : TransitionTarget
    {
      match (GetPseudoIn(n, st))
      {
        | null    => null
        | t       => TransitionTarget.PseudoState(t)
      }
    }
       
    GetPseudoIn(n : string, st : IEnumerable[FsmState]) : PseudoStateNode
    {
      def pseudo = st.SelectMany(x => x.pseudo_states);
      GetPseudoIn(n, pseudo)
    }
    
    GetPseudoIn(n : string, st : IEnumerable[PseudoStateNode]) : PseudoStateNode
    {
      def states = st.Filter(x => x.NativeName.HasValue);
      match (states.Find(x => x.NativeName.Value == n))
      {
        | Some(t) => t
        | _       => null
      }
    }
    
  }
}
