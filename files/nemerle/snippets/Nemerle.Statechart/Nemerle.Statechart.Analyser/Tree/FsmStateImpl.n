// fsmstateimpl.n
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{
  using StateTransition;
  using PseudoStateNode;
  using ListUtils;

  /// <summary>
  /// Description of FsmStateImpl.
  /// </summary>
  //[RefNode]
  partial class FsmState : IGeneralTree[FsmState]
  {
    public override ToString() : string { Name }

    public ChildNodes : IEnumerable[FsmState]
    {
      get
      {
        sub_states
      }
    }
    
    public Current : FsmState
    {
      get
      {
        this
      }
    }
    
    public this(an : FsmAnalyser, type : StateType)
    {
      analyser = an;
      this.type = type;
    }

    public this(name : string, an : FsmAnalyser, type : StateType)
    {
      analyser  = an;
      this.type = type;
      this.name = name;
    }

    public this(an : FsmAnalyser, st : StateNode.State, sb : IEnumerable[FsmState])
    {
      base(st.Location);
      analyser       = an;
      this.type      = st.type;
      this.name      = st.name;
      state          = st;
      sub_states     = sb.NToList();
      def tran       = st.transitions;
      Attributes     = state.attributes;
      deferred_events = st.defer.SelectMany(_.evt).Map(an.CreateEvent);
      transitions    = StateTransition.Create(this, tran).NToList();
      pseudo_states  = st.pseudo_states.Map(x => PseudoStateNode.Create(this, x.node));
      do_activity    = st.do_activity.Map(x => StateAction.Do(name, x.flags, x.action, false));
      entry          = st.entry.SelectMany(x => x.action.actions.Map(y => StateAction.Entry(name, y, x.attrib))).NToList();
      exit           = st.exit.SelectMany(x => x.action.actions.Map(y => StateAction.Exit(name, y, x.attrib))).NToList();
      sub_states.Iter(x => x.Super = this); // set superstate to this
    }
   
    public Clone() : FsmState
    {
      def st = FsmState(Location, do_activity, Super, type, sub_states, transitions, 
               pseudo_states, generated, state, entry, exit, deferred_events, 
               copy_num, name, this, analyser, Id, Attributes);
      def sub = st.sub_states.Map(_.Clone());
      st.sub_states = sub;
      foreach (s in sub)
      {
        s.Super = st;
      }
      def pseudo = st.pseudo_states.Map(_.Clone());
      st.pseudo_states = pseudo;
      foreach (ps in pseudo)
      {
        ps.state = st;
      }
      def tran = st.transitions.Map(_.Clone());
      foreach (tr in tran)
      {
        tr.From = st;
        tr.Source = st;
      }
      st.transitions = tran;
      st
    }

    public Attributes : list[StateAttribute] {get;set;default []}
    
    public CopyName : string
    {
      get
      {
        if (copy_num == 0) "" else $"$copy_num"
      }
    }

    public AstName : string
    {
      get
      {
        state.name
      }
    }

    public static NameComparer(x : FsmState, y : FsmState) : int { string.Compare(x.Name, y.Name) }

    
  }
}
