using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  using PseudoStateModelNode;
  using FsmState;
  using PseudoStateNode;
  using ListUtils;

  /// <summary>
  /// Description of TransitionTargetImpl.
  /// </summary>
  partial variant TransitionTarget
  {

    public static Create(st : FsmState, target : TargetType) : TransitionTarget
    {
      //def an = st.analyser;
      match (target)
      {
        | PseudoState as t                  => PseudoState(st, t)
        | Final                             => TransitionTarget.Final(null)
        //| State       as t                  => State(an, t)
        | Named       as t                  => Named(st, t)
        //| SubMachine(_m, s)                 => SubMachine(null, s)//SubMachine(m, null), s)
        | Qualified(parent = p, target = t) => Qualified(p, Create(st, t))
        | Self                              => TransitionTarget.State(st)
        | NoTarget                          => TransitionTarget.Nowhere()
        //| JunctionNode(g, a, t, n)          => JunctionNode(an, g, a, Create(st, t), n.Map(x => Create(st, x) :> JunctionNode), null, JunctionType.Junction)
      }
    }

    [Memoized]
    public ToState : FsmState
    {
      get
      {
        match (this)
        {
          | PseudoState(PseudoStateNode(state = st))
          | Final(st)
          | State(st)  => st
          | _          => null
        }
      }
    }

    /// <summary>
    /// state on it terminates transition arrow from statechart
    /// </summary>
    [Memoized]
    public TargetStates : list[FsmState]
    {
      get
      {
        match (this)
        {
          | PseudoState(p) => 
              match (p)
              {
                | PseudoStateNode.EntryPoint(_, tr) 
                | ExitPoint(tran = Some(tr))        => tr.To.TargetStates
                | Fork(target = t)                  => t.SelectMany(_.TargetStates).NToList()
                | Join(transition = t)              => t.To.TargetStates
                | Junction(tree = t)                => t.Targets.SelectMany(x => x.TargetStates).NToList()
                | _                                 => []
              }
          | Final(st)
          | State(st)  => [st]
          | _          => []
        }
      }
    }

    [Memoized]
    public NestedTransitions : list[StateTransition]
    {
      get
      {
        match (this)
        {
          | PseudoState(p) => p.NestedTransitions
          | _              => []
        }
      }
    }
    
    public override ToString() : string
    {
      match (this)
      {
        | Final(st)       => $"$st"
        | PseudoState(n)  => $"$n"
        | State(st)       => $"$st"
        | Named(_, n)     => $"$n"
        | Qualified(p, t) => $"$p.$t"
        | Nowhere         => ""
        | Defer           => "Defer"
        | Error(e)        => e.ToString()
      }
    }

    public Location : Location
    {
      get
      {
        match (this)
        {
          | Final(st)       
          | PseudoState(st) 
          | State(st)       => st.Location
          | _               => Location.Default
        }
      }
    }

    public Retarget(find_state : FsmState -> FsmState, find_pseudo : PseudoStateNode -> PseudoStateNode) : TransitionTarget
    {
      match (this)
      {
        | TransitionTarget.Final(st) as t => t.ChangeState(find_state(st))
        | PseudoState(st) as t            => t.ChangeNode(find_pseudo(st))
        | State(st) as t                  => t.ChangeState(find_state(st))
        | t                               => t
      }
    }
  }
}
