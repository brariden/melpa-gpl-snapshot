// transitionactions.n
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{

  using ListUtils;
  using PseudoStateNode;
  /// <summary>
  /// Description of TransitionActions.
  /// </summary>
  partial class StateTransition : Located
  {

    public this(st : PseudoStateNode, evt : TransitionEvent, tran : StateNode.Transition)
    {
      this(st.state, evt, tran);
      FromPseudo = Some(st);
    }

    public this(st : FsmState, evt : TransitionEvent, tran : StateNode.Transition)
    {
      base(tran.Location);
      Source = st;
      From = st;
      trigger = st.analyser.CreateEvent(evt);
      kind = tran.kind;
      node = tran;
      RelocateFrom = TransitionTarget.Create(st, tran.from);
      when (tran != null)
      {
        guard = tran.guard;
        action = tran.action.MapDefault(_.actions, []);
      }
      To = if (tran.to != null) TransitionTarget.Create(st, tran.to) else TransitionTarget.Nowhere();
    }

    public this(st : PseudoStateNode, to : FsmState, kind : TransitionKind)
    {
      this(st.state, TransitionTarget.State(to), kind);
      FromPseudo = Some(st);
    }

    public this(st : FsmState, to : TransitionTarget, kind : TransitionKind)
    {
      To = to;
      From = st;
      this.kind = kind;
      Source = From;
    }

    public this(tran : StateTransition)
    {
      //this(tran.analyser);
      To = tran.To;
      guard = tran.guard;
      action = tran.action;
      From = tran.From;
      Source = tran.Source;
      ActualTo = tran.ActualTo;
      node = tran.node;
      kind = tran.kind;
      trigger = tran.trigger;
      FromPseudo = tran.FromPseudo;
      RelocateFrom = tran.RelocateFrom;
      Location = tran.Location;
    }

    public node : StateNode.Transition;

    public kind : TransitionKind {get;set;}
    public trigger : StateEvent {get;set;}
    // state in from start transition in real time app
    public Source : FsmState {get;set;}
    // state in from arrow start in diagram
    public From : FsmState {get;set;}
    public guard : GuardNode {get;set;default GuardNode.Empty(-1)}
    public action : list[FsmAction] {get;set;default []}

    public RelocateFrom : TransitionTarget {get;set;}
    public To : TransitionTarget {get;set;}
    public FromPseudo : option[PseudoStateNode] {get;set; default None()}

    public ActualTo : FsmState {get;set;}


    public Local : bool
    {
      get
      {
        kind == TransitionKind.Local
      }
    }

    public FriendlyTriggerName : string
    {
      get
      {
        if (trigger.IsCompletion) "Completion" else trigger.Name
      }
    }

    public IsCompletion : bool
    {
      get
      {
        trigger.IsCompletion
      }
    }

    public IsInitial : bool
    {
      get
      {
        FromPseudo is Some(PseudoStateNode.Initial)
      }
    }

    name : string
    {
      get
      {
        match (kind, FromPseudo)
        {
          | (Internal, None)                           => match (To)
                                                          {
                                                            | TransitionTarget.Defer => $"DeferrableEvent$(trigger)At$From"
                                                            | _                      => $"InternalTransition$(From)By$FriendlyTriggerName"
                                                          }
          | (_, None)                                  => $"Transition$(Source)To$(To)By$FriendlyTriggerName"
          | (_, Some(PseudoStateNode.Initial))         => $"InitialTransitionFrom$(From)To$To"
          | (_, Some(PseudoStateNode.History as h))    => $"DefaultTransition$(h)To$ActualTo"
          | (_, Some(PseudoStateNode.ExitPoint as e))     
          | (_, Some(PseudoStateNode.EntryPoint as e)) => $"TransitionFrom$(e)To$(To)"
          | (_, Some(PseudoStateNode.Join as e))       => $"TransitionFrom$(e)By$FriendlyTriggerName"
          | _                                                         => throw InvalidOperationException("invalid transition name")
        }
      }
    }


    public Name : string
    {
      get
      {
        name
      }
    }

    public static GuardComparer : StateTransition * StateTransition -> int = (g1, g2) => g2.guard.CompareTo(g1.guard);

    public static Comparer : StateTransition * StateTransition -> int  =  (t1, t2)  => t1.Name.CompareTo(t2.Name);

    public ToState : FsmState
    {
      get
      {
        match (To)
        {
          | TransitionTarget.State(st)  => st
          | _                           => null
        }
      }
    }

    public StateObtainPseudoState(st : FsmState) : FsmState
    {
      if (Local) st else st.Super;
    }

    public StateObtainPseudoStateFromThis : FsmState
    {
      get
      {
        StateObtainPseudoState(From)
      } 
    }
    /// <summary>
    /// Concrete State for where transition ends known at compile time
    /// </summary>
    public AtLeastStaticTo : FsmState
    {
      get
      {
        match (To)
        {
          | Final(st)
          | State(st)         => st
          //| History(PseudoStateNode.History(state = st))
          //| PseudoState(Junction) => null
          | PseudoState(st)   => st.state
          //| JunctionNode(state = st)
          | _                 => null
        }

      }
    }

    public Clone() : StateTransition
    {
      StateTransition(this)
    }

    public override ToString() : string
    {
      Name
    }

    public static NameComparer : StateTransition * StateTransition -> bool = (x, y) => x.Name == y.Name;

    public Retarget(find_state : FsmState -> FsmState, find_pseudo : PseudoStateNode -> PseudoStateNode) : void
    {
      To = To.Retarget(find_state, find_pseudo);
    }
    
    [Memoized]
    public ToHTransition : HTransition
    {
      get
      {
        def source = match (FromPseudo)
        {
          | Some(PseudoStateNode.Join as p) => HTarget.PseudoState(p.ToHPseudo)
          | _                               => HTarget.State(From.ToHState);
        }
        
        def target = To.ToHTarget;
        def kind = if (IsInitial) TransitionKind.Initial else kind;
        HTransition(Location, source, trigger, guard, action, target, kind)
      }
    }
  }

}
