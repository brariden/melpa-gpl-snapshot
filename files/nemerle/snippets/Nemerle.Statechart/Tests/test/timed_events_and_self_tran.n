using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Console;
  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing;
  name "concurrent states and do activities";
  //flags debug;

  region A
  {
    state B
    {
      do / act1;
      _ => $0;
    }
    
  } and
  {
    state C
    {
      do / act2;
      _ => $0;
    }
    
   _ => D;
  }
  
  state D
  {
  }
  
  #>)]
public class example
{
  mutable a1 : int;
  mutable a2 : int;
  
  act1(_ : CancellationToken) : void
  {
    for (mutable i = 0; i < 10; i++)
      a1++;
  }
  
  act2(_ : CancellationToken) : void
  {
    for (mutable i = 0; i < 5; i++)
      a2++;
  }
  
  public check() : void
  {
    if (a1 == 10 && a2 == 5) WriteLine("OK") else WriteLine("Fail")
  }
}

module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("D", 500, "EntryA", "EntryB", "EntryC", "ExitB", "ExitC", 
                              "EntryASubRegion0Final", "EntryASubRegion1Final", "ExitASubRegion1Final", "ExitASubRegion0Final", "ExitA", "EntryD");
    fsm.check();
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
EntryB
EntryC
ExitB
ExitC
EntryASubRegion0Final
EntryASubRegion1Final
ExitASubRegion1Final
ExitASubRegion0Final
ExitA
EntryD
[D]
Ok
OK
END-OUTPUT
*/
