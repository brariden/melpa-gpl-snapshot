using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  
/// <summary>
  /// Description of example.
  /// </summary>
  [statechart(
  <#

  name B;
  
  entry / action;
  
  state C
  {
    a => D;
  }
  
  state D
  {
    a => C;
  }
  
  
  #>)]
  class B
  {
  }

  /// <summary>
  /// Description of example.
  /// </summary>
  [statechart(
  <#
  flags testing;
  
  using B;
  
  submachine A[B]
  {
  }
  
  #>)]
  public class example
  {
  }

  module Test
  {
    
    Main() : void
    {
      def fsm = example();
      def tester = fsm.GetTester();
      tester.ConsoleTestInit();
      tester.Initiate("C", "action", "EntrySubMachineAoftypeB", "EntryC");
      tester.Test("a", "D", "ExitC", "EntryD");
      tester.Test("a", "C", "ExitD", "EntryC");
      fsm.Terminate();
    }
  }

/*
BEGIN-OUTPUT
action
EntrySubMachineAoftypeB
EntryC
[C]
Ok
Processing a 'a' 
ExitC
EntryD
[D]
Ok
Processing a 'a' 
ExitD
EntryC
[C]
Ok
END-OUTPUT
*/
