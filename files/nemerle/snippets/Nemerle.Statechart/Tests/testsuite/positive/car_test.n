using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Console;
using Nemerle.Statechart;

using CarFsm;

[statechart(
  <#
  flags : testing;

  name Car;

  0 / initialize => EngineOff;

  state EngineOff
  {
    TURN_KEY [isBatteryOk()] / start() => MotorOn;
  }

  state MotorOn
  {
    0 / Oil-Display() => Stand;

    TURN_KEY / stop => EngineOff;
    entry / RadioOn;
    exit  / RadioOff;
    do    / coolEngine();

    state Stand
    {
      GAS_PEDAL / accelerate => Drive;
    }

    BREAK_PEDAL [speed == 0 && battery_level > 100 && Breaked] / ComplexGuard => Stand; // v == 1

    state Drive
    {
      BREAK_PEDAL [speed == 1] / Break   => Stand; // v == 1
      BREAK_PEDAL [speed > 1]  / Break() => @;     // v > 1
      GAS_PEDAL / accelerate();
    }

  }

  #>
  )]
public class CarFsm
{
  public battery_level : int {get;set;}
  public speed : double {get;set;}

  //public Key : string {get;set;}
  public Breaked : bool {get;set;}

  initialize() : void
  {
    WriteLine("initialize")
  }

  isBatteryOk() : bool
  {
    battery_level != 0
  }

}


    /// <summary>
  /// Description of PathCoverFsmTest.
  /// </summary>
module Test
{


  public Main() : void
  {
    def fsm = CarFsm();
    fsm.accelerate += _ => fsm.speed++;
    fsm.Break += _ => fsm.speed--;
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    // starting with several initial transitions
    tester.Initiate("EngineOff", "EntryTopInitial", "ExitTopInitial", "EntryEngineOff");

    // test for fail guard
    fsm.battery_level = 0;
    tester.Test(Event.TURN_KEY.New, null); // test for no state change
    fsm.battery_level = 100; // guard ok
    /// test for guard ok and executing transition
    tester.Test(Event.TURN_KEY.New, "Stand",
                            "ExitEngineOff",
                            "start",
                            "RadioOn",
                            "EntryMotorOn",
                            "Oil-Display",
                            "EntryMotorOnInitial",
                            "ExitMotorOnInitial",
                            "EntryStand");
    // transition with action
    tester.Test(Event.GAS_PEDAL.New, ["Stand"], ["accelerate"], ["Drive"]);
    // internal transition
    tester.Test(Event.GAS_PEDAL.New, null, "accelerate");
    // self transition
    tester.Test(Event.BREAK_PEDAL.New, ["Drive"], ["Break"], ["Drive"]);
    // transition simple to simple in same composite, with guards
    tester.Test(Event.BREAK_PEDAL.New, ["Drive"], ["Break"], ["Stand"]);
    // go back
    tester.Test(Event.GAS_PEDAL.New, ["Stand"], ["accelerate"], ["Drive"]);
    // no guards evaluated to true
    fsm.battery_level = 101;
    fsm.Breaked = false;
    fsm.speed = 0;
    // declined transition
    tester.Test(Event.BREAK_PEDAL.New, null);
    fsm.Breaked = true;
    // speed == 0 && battery_level > 100 && Breaked guard
    // high level transition with complex guard expression
    tester.Test(Event.BREAK_PEDAL.New, "Stand",
                               "ExitDrive",
                               "RadioOff",
                               "ExitMotorOn",
                               "ComplexGuard",
                               "RadioOn",
                               "EntryMotorOn",
                               "EntryStand");
    // inner state to outer transition
    tester.Test(Event.TURN_KEY.New, "EngineOff",
                            "ExitStand",
                            "RadioOff",
                            "ExitMotorOn",
                            "stop",
                            "EntryEngineOff");
    fsm.Terminate();
  }

}

/*
BEGIN-OUTPUT
EntryTopInitial
ExitTopInitial
initialize
EntryEngineOff
[EngineOff]
Ok
Processing a 'TURN_KEY' 
[EngineOff]
Ok
Processing a 'TURN_KEY' 
ExitEngineOff
start
RadioOn
EntryMotorOn
EntryMotorOnInitial
ExitMotorOnInitial
Oil-Display
EntryStand
[Stand]
Failed
Processing a 'GAS_PEDAL' 
ExitStand
accelerate
EntryDrive
[Drive]
Ok
Processing a 'GAS_PEDAL' 
accelerate
[Drive]
Ok
Processing a 'BREAK_PEDAL' 
ExitDrive
Break
EntryDrive
[Drive]
Ok
Processing a 'BREAK_PEDAL' 
ExitDrive
Break
EntryStand
[Stand]
Ok
Processing a 'GAS_PEDAL' 
ExitStand
accelerate
EntryDrive
[Drive]
Ok
Processing a 'BREAK_PEDAL' 
[Drive]
Ok
Processing a 'BREAK_PEDAL' 
ExitDrive
RadioOff
ExitMotorOn
ComplexGuard
RadioOn
EntryMotorOn
EntryStand
[Stand]
Ok
Processing a 'TURN_KEY' 
ExitStand
RadioOff
ExitMotorOn
stop
EntryEngineOff
[EngineOff]
Ok
END-OUTPUT
*/
