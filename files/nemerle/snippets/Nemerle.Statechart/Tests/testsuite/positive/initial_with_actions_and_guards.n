using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  name "several else guards";
  flags testing;
  
  //flags debug;
  
  state A
  {
    0 / a1 => B;
    
    state B
    {
      a => D;
    }

  }

  state D
  {
    a => A;
    
    0 => {
           g1 /a2  => {
                       g2 / a3 => E;
                       else /a4 => G;
                      }
           else /a5 => F;
         }
         
    state E
    {
    }
    
    state F
    {
    }
    
    state G
    {
    }
  }
  
  #>)]
public class example
{
  public g1 : bool {get;set;}
  public g2 : bool {get;set;}
}

module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("B", "EntryA", "EntryAInitial", "ExitAInitial", "a1", "EntryB");
    tester.Test("a", "F", "ExitB", "ExitA", "EntryD", "EntryDInitial", "ExitDInitial", "a5", "EntryF");
    fsm.g1 = true;
    tester.Test("a", "B", "ExitF", "ExitD", "EntryA", "EntryAInitial", "ExitAInitial", "a1", "EntryB");
    tester.Test("a", "G", "ExitB", "ExitA", "EntryD", "EntryDInitial", "ExitDInitial", "a2", "a4", "EntryG");
    fsm.g2 = true;
    tester.Test("a", "B", "ExitG", "ExitD", "EntryA", "EntryAInitial", "ExitAInitial", "a1", "EntryB");
    tester.Test("a", "E", "ExitB", "ExitA", "EntryD", "EntryDInitial", "ExitDInitial", "a2", "a3", "EntryE");
    fsm.Terminate();
  }
  
}

/*
BEGIN-OUTPUT
EntryA
EntryAInitial
ExitAInitial
a1
EntryB
[B]
Ok
Processing a 'a' 
ExitB
ExitA
EntryD
EntryDInitial
ExitDInitial
a5
EntryF
[F]
Ok
Processing a 'a' 
ExitF
ExitD
EntryA
EntryAInitial
ExitAInitial
a1
EntryB
[B]
Ok
Processing a 'a' 
ExitB
ExitA
EntryD
EntryDInitial
ExitDInitial
a2
a4
EntryG
[G]
Ok
Processing a 'a' 
ExitG
ExitD
EntryA
EntryAInitial
ExitAInitial
a1
EntryB
[B]
Ok
Processing a 'a' 
ExitB
ExitA
EntryD
EntryDInitial
ExitDInitial
a2
a3
EntryE
[E]
Ok
END-OUTPUT
*/
