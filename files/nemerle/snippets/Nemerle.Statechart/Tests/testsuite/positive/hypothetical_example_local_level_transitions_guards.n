using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Console;
using Nemerle.Statechart;

  /// <summary>
  /// Description of Hypothetical.
  /// </summary>
  [statechart(<#
  
  // see "practical uml statecharts in c/c++ second edition" page 88
  flags auto_initial testing;
  //flags debug;
  
  name "hypothetical example";
  0 / foo = false => s2;
  
  state s
  {
    0 => s11;
    I [foo] / foo = false;
    E (=> s11;
    terminate => $0;
  }
  
  state s1 : s
  {
    A => @;
    D [!foo] / foo = true (=> s;
    C => s2;
    F => s211;
    
    state s11
    {
      D [foo] / foo = false (=> s1;
      H => s;
      G => s211;
    }
  }
  
  state s2 : s
  {
    0 => s211;
    I [!foo] / foo = true;
    C => s1;
    F => s11;
    
    state s21
    {
      A => @;
      G => s1;
      B => s21;
    }
    
    state s211 : s21
    {
      H => s;
      D => s21;
    }
  }
  #>)]
  public class example
  {
    foo : bool {get;set;}
  }

  module Test
  {
    public Main() : void
    {
      def fsm = example();
      def tester = fsm.GetTester();
      tester.ConsoleTestInit();
      tester.Initiate("S211", "EntryTopInitial", "ExitTopInitial", "EntryS", "EntryS2", "EntryS21", "EntryS211");
      tester.Test("G", ["S211", "S21", "S2"], ["S1", "S11"]);
      tester.Test("I", null);
      tester.Test("A", ["S11", "S1"], ["S1", "S11"]);
      tester.Test("D", ["S11", "S1"], ["S1", "S11"]);
      tester.Test("D", ["S11"], ["S11"]);
      tester.Test("C", ["S11", "S1"], ["S2", "S21", "S211"]);
      tester.Test("E", ["S211", "S21", "S2"], ["S1", "S11"]);
      tester.Test("E", ["S11", "S1"], ["S1", "S11"]);
      tester.Test("G", ["S11", "S1"], ["S2", "S21", "S211"]);
      tester.Test("I", null);
      tester.Test("I", null);
      fsm.Terminate();
    }
  }
  
/*
BEGIN-OUTPUT
EntryTopInitial
ExitTopInitial
EntryS
EntryS2
EntryS21
EntryS211
[S211]
Ok
Processing a 'G' 
ExitS211
ExitS21
ExitS2
EntryS1
EntryS11
[S11]
Ok
Processing a 'I' 
[S11]
Ok
Processing a 'A' 
ExitS11
ExitS1
EntryS1
EntryS11
[S11]
Ok
Processing a 'D' 
ExitS11
ExitS1
EntryS1
EntryS11
[S11]
Ok
Processing a 'D' 
ExitS11
EntryS11
[S11]
Ok
Processing a 'C' 
ExitS11
ExitS1
EntryS2
EntryS21
EntryS211
[S211]
Ok
Processing a 'E' 
ExitS211
ExitS21
ExitS2
EntryS1
EntryS11
[S11]
Ok
Processing a 'E' 
ExitS11
ExitS1
EntryS1
EntryS11
[S11]
Ok
Processing a 'G' 
ExitS11
ExitS1
EntryS2
EntryS21
EntryS211
[S211]
Ok
Processing a 'I' 
[S211]
Ok
Processing a 'I' 
[S211]
Ok
END-OUTPUT
*/
