using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  [Event]
  public variant Events
  {
    | A
    | D
    | E
  }
  
  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing;
  //flags debug;
  
  name "event classes";
  
  event_class Events;
  
  state A
  {
    a => B;
    d => C;
  }

  state B
  {
    a => C;
    e => A;
  }
  
  state C
  {
    a => A;
  }
  #>)]
public class example
{
}

module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("A", "EntryA");
    tester.Test("a", "B", "ExitA", "EntryB");
    tester.Test("a", "C", "ExitB", "EntryC");
    tester.Test("a", "A", "ExitC", "EntryA");
    tester.Test("d", "C", "ExitA", "EntryC");
    tester.Test("a", "A", "ExitC", "EntryA");
    tester.Test("a", "B", "ExitA", "EntryB");
    tester.Test("e", "A", "ExitB", "EntryA");
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
[A]
Ok
Processing a 'a' 
ExitA
EntryB
[B]
Ok
Processing a 'a' 
ExitB
EntryC
[C]
Ok
Processing a 'a' 
ExitC
EntryA
[A]
Ok
Processing a 'd' 
ExitA
EntryC
[C]
Ok
Processing a 'a' 
ExitC
EntryA
[A]
Ok
Processing a 'a' 
ExitA
EntryB
[B]
Ok
Processing a 'e' 
ExitB
EntryA
[A]
Ok
END-OUTPUT
*/
