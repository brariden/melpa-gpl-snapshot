using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using System.Threading;


namespace Nemerle.Statechart
{

  public partial class FsmTester
  {
    [Accessor]
    fsm : ITestStateMachine;
    
    queue : List[string] = List();

    public queue_result : IEnumerable[string]
    {
      get
      {
        queue
      }
    }
    
    public SuppressPrint : bool {get;set;default false}
    
    public event OkTest : Action;
    public event Failed : Action;
    public event Print  : Action[string];
    public event Send   : Action[string];

    public static GetTester(this fsm : ITestStateMachine) : FsmTester
    {
      FsmTester(fsm)
    }

    public WriteCombined(str : string) : void
    {
      Console.WriteLine(str); 
      queue.Add(str)
    }
    
    // TODO: сделать без ActionExecuted и TransitionCompleted 
    // пристыковывая ко всем действиям используя внутренний установщик в каждом автомате
    public ConsoleTestInit(thrw : bool = false) : void
    {
      prepare();
      Throw = thrw;
      Print  += x => Console.WriteLine($"\n$x");
      Send   += x => Console.WriteLine($"Processing a '$x' ");
      OkTest += _ => Console.WriteLine("Ok");
      Failed += _ => {Console.WriteLine("Failed"); when (Throw) throw InvalidOperationException("Fail condition")};
      fsm.ActionExecuted += x => if (SuppressPrint) () else Console.WriteLine(x);
      fsm.TransitionCompleted += _ => CompleteResult();
    }

    wait_signal : ManualResetEvent = ManualResetEvent(false);

    public Throw : bool {get;set;}
    
    mutable wait_state : string;
    mutable max_respond : int;
    
    mutable result_action : void -> void;
    
    CompleteResult() : void
    {
      when (result_action != null) result_action();
      if (wait_state != null)
      {
        when (fsm.IsInState(wait_state)) _ = wait_signal.Set();
      } else 
      {
        _ = wait_signal.Set();
      }
    }

    OnOkTest() : void
    {
      OkTest?.Invoke()
    }

    OnFailed() : void
    {
      Failed?.Invoke();
    }

    public this(fsm : ITestStateMachine)
    {
      this.fsm = fsm;
      fsm.ActionExecuted += queue.Add;
    }

    public WaitForState(str : string, max : int = 10000) : void
    {
      _ = wait_signal.Reset();
      wait_state = str;
      _ = wait_signal.WaitOne(TimeSpan.FromMilliseconds(max));
    }
    
    static EntryImpl(en : IEnumerable[string]) : IEnumerable[string]
    {
      en.Select(x => $"Entry$(x)")
    }

    static ExitImpl(ex : IEnumerable[string]) : IEnumerable[string]
    {
      ex.Select(x => $"Exit$(x)")
    }

    static ActionsImpl(act : IEnumerable[string]) : IEnumerable[string]
    {
      act
    }

    public static Entry(params en : array[string]) : array[string]
    {
      EntryImpl(en).ToArray()
    }

    public static Exit(params ex : array[string]) : array[string]
    {
      ExitImpl(ex).ToArray()
    }

    public static Actions(params act : array[string]) : array[string]
    {
      ActionsImpl(act).ToArray()
    }

    public prepare() : void
    {
      result_action = null;
      queue.Clear();
      wait_state = null;
      max_respond = 10000;
      _ = wait_signal.Reset();
    }

    TestWait(func : void -> void, state : string, max_respond : int, params acts : array[string]) : void
    {
      prepare();
      wait_state = state;
      this.max_respond = max_respond;
      func();
      if (CheckResult(state, acts)) OnOkTest() else OnFailed()
    }
    
    CheckResult(state : string, acts : array[string]) : bool
    {
      def acts = if (state != null) acts else Actions(acts);
      def acts = if (acts.Length == queue.Count()) acts.ZipLazy(queue).All(_ == _) else false;
      unless (SuppressPrint) Console.WriteLine($"[$fsm]");
      def state = state == null || fsm.IsInState(state);
      state && acts
    }
    
    Test(func : void -> void, state : string, params acts : array[string]) : void
    {
      prepare();
      func();
      
      if (CheckResult(state, acts)) OnOkTest() else OnFailed()
    }

    TestComplete(func : void -> void, state : string, params acts : array[string]) : void
    {
      def res_func()
      {
        if (CheckResult(state, acts)) OnOkTest() else OnFailed();
      }
      
      prepare();
      result_action = res_func;
      func();
    }
    
    public SendEventNotWait(evt : HsmEvent) : void
    {
      Send?.Invoke(evt.Name);
      fsm.PostEvent(evt);
    }

    public SendEventNotWait(evt : string) : void
    {
      def evt = evt.SpacesToUnderline();
      Send?.Invoke(evt);
      fsm.PostEvent(evt);
    }
    
    public SendEvent(evt : HsmEvent) : void
    {
      Send?.Invoke(evt.Name);
      fsm.PostEvent(evt);
      _ = wait_signal.WaitOne(max_respond);
    }
    
    public SendEvent(evt : string) : void
    {
      def evt = evt.SpacesToUnderline();
      Send?.Invoke(evt);
      fsm.PostEvent(evt);
      _ = wait_signal.WaitOne(max_respond);
    }

    public SendEvent(evt : string, params pars : array[object]) : void
    {
      def evt = evt.SpacesToUnderline();
      Send?.Invoke(evt);
      SendEventImpl(evt, pars);
      _ = wait_signal.WaitOne(max_respond);
    }
    
    SendEventImpl(evt : string, params pars : array[object]) : void
    {
      match (pars.NToList())
      {
        | []        => fsm.PostEvent(evt)
        | [a]       => fsm.PostEvent(evt, a);
        | [a, b]    => fsm.PostEvent(evt, a, b);
        | [a, b, c] => fsm.PostEvent(evt, a, b, c);
        | _         => fsm.PostEvent(evt, pars)
      }
    }
    
    public Test(evt : string, res : string, params acts : array[string]) : void
    {
      Test(_ => SendEvent(evt), res, acts)
    }
    
    public Test(evt : HsmEvent, res : string, params acts : array[string]) : void
    {
      Test(_ => SendEvent(evt), res, acts)
    }

    public Test(evt : HsmEvent, res : string) : void
    {
      Test(_ => SendEvent(evt), res)
    }

    public Test(evt : string, res : string, ex : list[string], act : list[string], en : list[string]) : void
    {
      def acts = ExitImpl(ex).Concat(ActionsImpl(act)).Concat(EntryImpl(en)).ToArray();
      Test(_ => SendEvent(evt), res, acts)
    }
    
    public Test(evt : HsmEvent, res : string, ex : list[string], act : list[string], en : list[string]) : void
    {
      def acts = ExitImpl(ex).Concat(ActionsImpl(act)).Concat(EntryImpl(en)).ToArray();
      Test(_ => SendEvent(evt), res, acts)
    }

    public TestWait(evt : string, max_interval : int, ex : list[string], en : list[string]) : void
    {
      def acts = ExitImpl(ex).Concat(EntryImpl(en)).ToArray();
      TestWait(_ => SendEvent(evt), en.Last(), max_interval, acts)
    }
    
    public TestWait(evt : string, max_interval : int, res : string, params acts : array[string]) : void
    {
      TestWait(_ => SendEvent(evt), res, max_interval, acts)
    }

    public TestNotWait(evt : string, res : string, params acts : array[string]) : void
    {
      TestComplete(_ => SendEventNotWait(evt), res, acts);
    }

    public WaitForComplete(max : int = 10000) : void
    {
      _ = wait_signal.WaitOne(max);
    }
    
    public CheckAfterComplete(res : string, params acts : array[string]) : void
    {
      TestComplete(_ => (), res, acts)
    }
    
    public Test(evt : string, ex : list[string], en : list[string]) : void
    {
      Test(evt, en.Last(), ex, en)
    }
    
    public Test(evt : string, res : string, ex : list[string], en : list[string]) : void
    {
      Test(evt, res, ex, [], en)
    }
    
    public Test(evt : string, ex : list[string], act : list[string], en : list[string]) : void
    {
      def res = en.Last();
      Test(evt, res, ex, act, en)
    }
    
    public Test(evt : HsmEvent, ex : list[string], act : list[string], en : list[string]) : void
    {
      def res = en.Last();
      Test(evt, res, ex, act, en)
    }

    public Test(evt : HsmEvent, ex : list[string], en : list[string]) : void
    {
      Test(evt, ex, [], en)
    }

    InitiateAndWait() : void
    {
      fsm.Initiate();
      _ = wait_signal.WaitOne(max_respond);
    }
    
    public Initiate(en : list[string]) : void
    {
      def res = en.Last();
      Initiate(res, EntryImpl(en).ToArray())
    }

    public Initiate(res : string, en : list[string]) : void
    {
      Initiate(res, EntryImpl(en).ToArray())
    }
    
    public Initiate(res : string, params acts : array[string]) : void
    {
      Test(fsm.Initiate, res, acts)
    }

    public Initiate(res : string, max_interval : int, en : list[string]) : void
    {
      Initiate(res, max_interval, EntryImpl(en).ToArray())
    }
    
    public Initiate(res : string, max_interval : int, params acts : array[string]) : void
    {
      TestWait(InitiateAndWait, res, max_interval, acts)
    }
  }

}
