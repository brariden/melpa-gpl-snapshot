using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;


namespace Nemerle.Statechart
{

  using BitUtils;

  [Record]
  public class IdType
  {
    public val : BitArray;

    public Count : int
    {
      get
      {
        val.Count
      }
    }

    public Length : int 
    {
      get
      {
        MathUtils.UpperDiv(Count, 32)
      }
    }

    public Or(id : IdType) : IdType
    {
      def id = val | id.val;
      IdType(id)
    }

    public static @|(id : IdType, id2 : IdType) : IdType
    {
      id.Or(id2)
    }

    public UInt : uint
    {
      get
      {
        Result[0] :> uint
      }
    }

    public ULong : ulong
    {
      get
      {
        unchecked 
        {
          def r1 = Result[0] :> uint;
          def r2 = Result[1] :> uint;
          BitUtils.MakeLong(r1, r2)
        }
      }
    }

    public Result : array[int]
    {
      get
      {
        def res = array(Length);
        val.CopyTo(res, 0);
        res
      }
    }

  }

  /// <summary>
  /// State identifier
  /// </summary>
  [Record]
  public class StateId
  {

    public states : list[ActiveStateConfig];
    
    public IsSimple : bool
    {
      get
      {
        Length <= 2
      }
    }

    public IsStruct : bool
    {
      get
      {
        def len = Length;
        len > 2 && len <= 4
      }
    }

    public Length : int 
    {
      get
      {
        MathUtils.UpperDiv(Count, 32)
      }
    }

    [Memoized]
    public States : IEnumerable[HState]
    {
      get
      {
        states.SelectMany(_.states).Distinct()
      }
    }
    
    [Memoized]
    public Count : int 
    {
      get
      {
        States.Count()
      }
    }

    public CreateMasks() : void
    {
      def st = states.SelectMany(_.states).Distinct();
      def idx = st.MapIndex((x, i) => {
                                        def num = BitArray(Count);
                                        num[i] = true;
                                        (x, num)
                                      });
      def map = Hashtable(idx);

      // first pass
      foreach (st in states)
      {
        def id = st.states.FoldLeft(BitArray(Count), (x, a) => map[x] | a);
        st.Id = IdType(id);
      }
      foreach (st in st)
      {
        def id = st.active_config.FoldLeft(BitArray(Count), (x, a) => map[x] | a);
        st.Id = IdType(id);
      }
    }

  }
}
