using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using SCG = System.Collections.Generic;


namespace Nemerle.Statechart
{

  public enum PathKind
  {
    | Entry
    | Exit
    | Action
  }

  [Record]
  public class TranPath
  {
    public state : HState;
    public nodes : list[PathNode] {get;set;}
    public kind  : PathKind;
    
    public IsEmpty : bool
    {
      get
      {
        nodes.IsEmpty()
      }
    }
  }

  [Record]
  public variant PathNode
  {
    //| Empty
    //| Sequence {seq : IEnumerable[PathNode];}
    | Entry
      {
        action : FsmAction;
        //inline : list[PathNode * bool] = [];

        //this (action : Actions)
        //{
        //  this.action = action;
        //}

        Name : string
        {
          get
          {
            $"$(action)"
          }
        }

        override ToString() : string
        {
          Name
        }

      }

    | Exit
      {
        action : FsmAction;
        //inline : list[PathNode * bool] = [];

        //this (action : Actions)
        //{
        //  this.action = action;
        //}

        Name : string
        {
          get
          {
            $"$(action)"
          }
        }

        override ToString() : string
        {
          Name
        }


      }

    | Action
      {
        action : FsmAction;

        override ToString() : string {$"PathNode+Action$(action)"}
      }
    | ClearHistory
      {
        history : list[HPseudoState.History];

        override ToString() : string {$"PathNode+ClearHistory$history"}
      }
    | SaveHistory
      {
        history : list[HPseudoState.History];

        override ToString() : string {$"PathNode+SaveHistory$history"}
      }

    | RunDoActivity
      {
        activity : StateAction.Do;

        override ToString() : string {$"$(activity)Run"}
      }

    | StopDoActivity
      {
        activity : StateAction.Do;

        override ToString() : string {$"$(activity)Stop"}
      }

    public state : HState;

    public PathAction : option[FsmAction]
    {
      get
      {
        match (this)
        {
          | Entry(action = act)
          | Exit(action = act)
          | Action(action = act)  => Some(act)
          | _                     => None()
        }
      }
    }

    public static PathActions(this path : IEnumerable[PathNode]) : IEnumerable[FsmAction]
    {
      path.FilterValues(_.PathAction)
    }

  }

}
