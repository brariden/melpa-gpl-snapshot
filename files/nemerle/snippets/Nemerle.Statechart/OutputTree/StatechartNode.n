using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{

  [Record]  
  public variant StateEvent : Located, IEquatable[StateEvent]
  {
    | Normal 
      {
        name  : string;

        parms : list[string * string];

        [Memoized]
        ParmNames : list[string]
        {
          get
          {
            parms.Map((x, _) => x)
          }
        }

        [Memoized]
        ParmTypes : list[string]
        {
          get
          {
            parms.Map((_, x) => x)
          }
        }

        [Memoized]
        NameWithParms : string
        {
          get
          {
            $<#$(name)(..$(parms;","))#>
          }
        }

        ev_class : EventClass;

      }
    | Completion
    | Timed 
      { 
        time_expr : TimedExprType;
      }

    public IsExternal : bool
    {
      [Memoize]
      get
      {
        match (this)
        {
          | Normal(ev_class = EventClass.External) => true
          | _                                      => false
        }
      }
    }

    public ExtClass : EventClass.External
    {
        [Memoize]
      get
      {
        if (this is Normal(ev_class = EventClass.External as e)) e else null
      }
    }

    public Parms : list[string * string]
    {
      get
      {
        match (this)
        {
          | Normal(parms = p) => p
          | Timed
          | Completion        => []
        }
      }
    }

    public TargetName : string
    {
      [Memoize]
      get
      {
        match (this)
        {
          | Normal     => Name.ToUpperFirst()
          | Completion => Name
          | Timed(e)   => e.TargetName
        }
      }
    }

    public Name : string
    {
      get
      {
        match (this)
        {
          | Normal as n => n.name
          | Completion  => "Completion"
          | Timed(e)    => $"$e"
        }
      }
    }

    [Memoized]
    public FullName : string
    {
      get
      {
        match (this)
        {
          | Normal as n => n.NameWithParms
          | _           => Name
        }
      }
    }

    public CompareTo(b : StateEvent) : int
    {
      Name.CompareTo(b.Name)
    }

    public static @==(a : StateEvent, b : StateEvent) : bool
    {
      a.Name == b.Name
    }

    public IsCompletion : bool
    {
      get
      {
        this is Completion
      }
    }

    public IsTimed : bool
    {
      get
      {
        this is Timed
      }
    }

    public override GetHashCode() : int
    {
      match (this)
      {
        | Normal as n => n.NameWithParms.GetHashCode()
        | Completion  => Name.GetHashCode()
        | Timed as n  => n.time_expr.ToString().GetHashCode()
      }

    }

    public Equals(obj : StateEvent) : bool
    {
      GetHashCode() == obj.GetHashCode()
    }

    public override ToString() : string
    {
      $"$Name"
    }
  }


  [Record]
  public variant StateAction
  {
    | Entry
      {
        action : FsmAction;

        Name : string
        {
          get
          {
            $"Entry$(state)"
          }
        }

        flags : ActionFlags;

        override ToString() : string
        {
          Name
        }

      }
    | Exit
      {
        action : FsmAction;

        Name : string
        {
          get
          {
            $"Exit$(state)"
          }
        }

        flags : ActionFlags;

        override ToString() : string
        {
          Name
        }
      }

    | Do 
      {
        [FlagAccessor(NoCancel)]
        public flags : ActivityFlag; // shows that we must run each action concurrently with others

        action : Actions;

        need_completion : bool {get;set;default false}

        Name : string
        {
          get
          {
            $"DoActivity$state"
          }
        }

        override ToString() : string
        {
          Name
        }
      }       

    public state : string {get;set;}
  }

}
