using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateNode;

  /// <summary>
  /// Description of ParseStates.
  /// </summary>
  public partial class FsmParser
  {
    name(s : NToken, name : string, _ : NToken) : StateNode
    {
      StateNode.Name(s.StartPos, name)
    }

    parent(_ : NToken, name : NameIdentifier) : NameIdentifier
    {
      name
    }

    submachine(attr : option[List[StateAttribute]], tok : NToken, id : NToken, type : option[NToken * NToken * NToken], par : option[NameIdentifier], _ : NToken, nodes : List[StateNode], _ : NToken) : StateNode
    {
      def pos = tok.StartPos;
      def type = type.Map((_, x, _) => GetText(x)).WithDefault(null);
      def attr = attr.WithDefault(Enumerable.Empty()).NToList();
      def state = CreateState(pos, GetText(id), attr, nodes, StateType.SubMachine(type, true), par);
      state
    }

    stateMachine(nodes : List[StateNode]) : StateNode.StateMachine
    {
      def merge_flags(x : StateNode.Flags, a : MachineFlags)
      {
        match (x)
        {
          | StateNode.Flags(MachineFlags(f, e)) => def flags = (a.flags | f);
                                                  def err = a.errors.Concat(e).NToList();
                                                  MachineFlags(flags, err)
        }

      }

      def (seq, nodes) = nodes.PartitionType();
      def nodes = seq.SelectMany(x : StateNode.Sequence => x.lst).Concat(nodes).NToList();
      def (flags, nodes) = nodes.PartitionType();
      def (ev_class, nodes) = nodes.PartitionType();
      def (name, nodes) = nodes.PartitionType();
      def (usings, nodes) = nodes.PartitionType();
      def (event_decls, nodes) = nodes.PartitionType();
      def pos = if (nodes.IsEmpty()) 0 else nodes.First().pos;
      def state = CreateState(pos, null, [], nodes, StateType.State(), None());


      def flags = flags.FoldLeft(MachineFlags(MachineFlag.None, []), merge_flags);
      def name = match (name.NToList())
                  {
                    | StateNode.Name as n :: _ => n.name
                    | _                        => null
                  }
      StateNode.StateMachine(pos, flags, name, state, usings.NToList(), event_decls.NToList(), ev_class)
    }

    state(attr : option[List[StateAttribute]], tok : NToken, name : NToken, parent : option[NameIdentifier], _ : NToken, nodes : List[StateNode], _ : NToken) : StateNode.State
    {
      def name_text = GetText(name);
      def attr = attr.WithDefault(Enumerable.Empty());
      CreateState(tok.StartPos, name_text, attr, nodes, StateType.State(), parent)
    }

    CreateState(pos : int, name : string, attr : IEnumerable[StateAttribute], decls : IEnumerable[StateNode], type : StateType, parent : option[NameIdentifier]) : StateNode.State
    {
      def get_decls(decls)
      {
        def (en, decls)       = decls.PartitionType();
        def (ex, decls)       = decls.PartitionType();
        def (states, decls)   = decls.PartitionType();
        def (trans, decls)    = decls.PartitionType();
        def (defer, decls)    = decls.PartitionType();
        def (do_act, decls)   = decls.PartitionType();

        def (pseudo, decls) = decls.PartitionType();

        (en, ex, states, trans, do_act, pseudo, defer, decls)
      }

      def create_sub_regions(reg)
      {
        def (en, ex, states, trans, do_act, pseudo, defer, _) = get_decls(reg);
        State(0, null, None(), [], en, ex, trans, do_act, defer, states, pseudo, StateType.SubRegion(), [])
      }

      def (seq, decls) = decls.PartitionType();
      def decls = seq.SelectMany(x : StateNode.Sequence => x.lst).Concat(decls).NToList();      
      def decls = decls.OrderBy(_.pos).NToList();
      def (reg_trans, reg) = decls.Partition(_ is StateNode.Transition);
      def regions = reg.FindDelimited(_ is Region); // split list by regions
      def (regions, decls) = if (regions.IsEmpty()) ([], decls) else (regions.Map(create_sub_regions), reg_trans); // create regions
      def (en, ex, states, trans, do_act, pseudo, defer, decls) = get_decls(decls);
      def (states, type) = if (regions.IsEmpty()) (states, type) else (regions, StateType.Region());
      def parent = parent.Map(_.FullName);
      State(pos, name, parent, attr.NToList(), en, ex, trans, do_act, defer, states, pseudo, type, decls.Map(x => Error(x.pos, x)))
    }

    and_sub_region(tok : NToken, _ : NToken, decls : List[StateNode], _ : NToken) : StateNode.State
    {
      CreateState(tok.StartPos, null, [], decls, StateType.SubRegion(), None())
    }
    
    region_delim(beg : NToken, _ : NToken, _ : NToken, _ : NToken) : StateNode
    {
      StateNode.Region(beg.StartPos)
    }
    
    empty_region(attr : option[List[StateAttribute]], tok : NToken, name : NToken, parent : option[NameIdentifier], _ : NToken, decls : List[StateNode], _ : NToken) : StateNode
    {
      def name   = GetText(name);
      def attr = attr.MapDefault(_.NToList(), []);
      def pos = tok.StartPos;
      CreateState(pos, name, attr, decls, StateType.Region(), parent)
    }
    
    region(attr : option[List[StateAttribute]], tok : NToken, name : NToken, parent : option[NameIdentifier], _ : NToken, decls : List[StateNode], _ : NToken, and_regs : List[StateNode.State]) : StateNode
    {
      def (seq, decls)      = decls.PartitionType();
      def decls             = seq.SelectMany(x : StateNode.Sequence => x.lst).Concat(decls).NToList();
      def (states, decls)   = decls.PartitionType();
      def (pseudo, decls)   = decls.PartitionType();
      def (init, pseudo)    = pseudo.Partition(_ is StateNode.PseudoState(PseudoStateModelNode.Initial));
      def name   = GetText(name);
      def pos = tok.StartPos;
      def (reg_separator, decls) = decls.Partition(_ is StateNode.Region);
      def err = reg_separator.Map(x => StateNode.Error(x.pos, x));
      def st = State(pos, null, null, [], [], [], [], [], [], states, init, StateType.SubRegion(), err);
      
      
      def decls = pseudo.Map(_ : StateNode) + decls;
      def other = and_regs.NToList();
      
      def en = other.SelectMany(x => x.entry);
      def ex = other.SelectMany(x => x.exit);
      def trans = other.SelectMany(x => x.transitions);
      def defer = other.SelectMany(x => x.defer);
      def do_act = other.SelectMany(x => x.do_activity);
      def pseudo = other.SelectMany(x => x.pseudo_states.Exclude(x => x is StateNode.PseudoState(PseudoStateModelNode.Initial)));
      def decls = en.Concat(ex).Concat(trans).Concat(defer).Concat(do_act).Concat(pseudo).NToList() + decls;
      
      def other = other.Map(x => StateNode.State(x.pos, x.name, x.parent, x.attributes, [], [], [], [], [], x.sub_states, x.pseudo_states.Filter(x => x is StateNode.PseudoState(PseudoStateModelNode.Initial)), x.type, x.errors));
      def st = st :: other;
      def decls = st.Map(_ : StateNode) + decls;
      def attr = attr.MapDefault(_.NToList(), []);
      CreateState(pos, name, attr, decls, StateType.Region(), parent)
    }

  }


}
