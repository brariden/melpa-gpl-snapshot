using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Peg;

namespace Nemerle.Statechart
{

  /// <summary>
  /// Description of ParsePseudo.
  /// </summary>
  partial class FsmParser
  {


    junc_tran_body(guard : option[GuardNode], act : Actions, target : TargetType) : StateNode.Transition
    {
      def act = if (act.Empty) None() else Some(act);
      def guard = guard.WithDefault(GuardNode.Empty(-1));
      def pos = target.pos;
      StateNode.Transition(-1, TargetType.NoTarget(pos), [], guard, act, target, TransitionKind.External)
    }

    junction_body(beg : NToken, nodes : List[StateNode.Transition], _ : NToken) : List[JunctionNode]
    {
      def pos = beg.StartPos;

      def create_node(n)
      {
        | StateNode.Transition(_, _, g, a, t, _) => JunctionNode(pos, g, a, t)
      }

      def pseudo = nodes.Select(create_node);
      pseudo.ToList()
    }

    junction_target(node : List[JunctionNode]) : TargetType
    {
      def pos = if (node.Count() != 0) node.First().pos else 0;
      TargetType.PseudoState(pos, PseudoStateModelNode.Junction(pos, null, node.NToList(), JunctionType.Junction))
    }

    junction(tok : NToken, name : NToken, node : List[JunctionNode]) : StateNode.PseudoState
    {
      def pos = tok.StartPos;
      StateNode.PseudoState(pos, PseudoStateModelNode.Junction(pos, GetText(name), node.NToList(), JunctionType.Junction))
    }

    choice_target(tok : NToken, node : List[JunctionNode]) : TargetType
    {
      def pos = tok.StartPos;
      TargetType.PseudoState(pos, PseudoStateModelNode.Junction(pos, null, node.NToList(), JunctionType.Choice))
    }

    choice(tok : NToken, name : NToken, _ : NToken, node : List[JunctionNode]) : StateNode.PseudoState
    {
      def pos = tok.StartPos;
      StateNode.PseudoState(pos, PseudoStateModelNode.Junction(pos, GetText(name), node.NToList(), JunctionType.Choice))
    }

    merge(tok : NToken, name : NToken, tran : StateNode.Transition) : StateNode.PseudoState
    {
      def pos = tok.StartPos;
      def junc = JunctionNode(pos, tran.guard, tran.action, tran.to);
      def node = PseudoStateModelNode.Junction(pos, GetText(name), junc :: [], JunctionType.Merge);
      StateNode.PseudoState(pos, node)
    }

    simple_init_tran(guard : option[GuardNode], act : Actions, to : TargetType) : list[StateNode.Transition]
    {
      def pos = if (guard is Some(g)) g.pos else to.pos;
      def act = if (act.Empty) None() else Some(act);
      def guard = guard.WithDefault(GuardNode.Empty(-1));
      StateNode.Transition(pos, TargetType.NoTarget(pos), [], guard, act, to, TransitionKind.Local) :: []
    }

    initial_tran(tok : NToken, lst : List[JunctionNode]) : list[StateNode.Transition]
    {
      def pos = tok.StartPos;
      lst.Map(x => StateNode.Transition(pos, TargetType.NoTarget(pos), [], x.guard, x.action, x.to, TransitionKind.Local))
    }

    initial(name : NToken, tr : list[StateNode.Transition]) : StateNode.PseudoState
    {
      def pos = name.StartPos;
      StateNode.PseudoState(pos, PseudoStateModelNode.Initial(pos, tr))
    }

    history_deep(tok : NToken, tran : option[StateNode.Transition], _ : NToken) : StateNode
    {
      def_history(HistoryType.Deep, tok, tran)
    }

    history_shallow(tok : NToken, tran : option[StateNode.Transition], _ : NToken) : StateNode
    {
      def_history(HistoryType.Shallow, tok, tran)
    }

    history_long(tok : NToken, _ : NToken, type : NToken, tran : option[StateNode.Transition], _ : NToken) : StateNode
    {
      def pos = tok.StartPos;
      match (GetText(type))
      {
        | "Deep"
        | "deep"     => def_history(HistoryType.Deep, type, tran)
        | "Shallow"
        | "shallow"  => def_history(HistoryType.Shallow, type, tran)
        | _          => StateNode.Error(pos, def_history(HistoryType.None, type, tran))
      }
    }

    terminate_node(tok : NToken, _ : NToken) : StateNode.PseudoState
    {
      StateNode.PseudoState(tok.StartPos, PseudoStateModelNode.Terminate(tok.StartPos))
    }

    join(tok : NToken, name : NToken, guard : option[GuardNode], act : Actions, target : TargetType) : StateNode.PseudoState
    {
      def pos = tok.StartPos;
      def tran = StateNode.Transition(pos, TargetType.NoTarget(pos), [], guard.WithDefault(GuardNode.Empty()), if (act.Empty) None() else Some(act), target, TransitionKind.External);
      StateNode.PseudoState(pos, PseudoStateModelNode.Join(pos, GetText(name), [], tran))
    }

    def_history(hist : HistoryType, tok : NToken, tran : option[StateNode.Transition]) : StateNode
    {
      def pos = tok.StartPos;
      StateNode.PseudoState(pos, PseudoStateModelNode.History(pos, hist, tran))
    }

    entry_point_v1(tok : NToken, id : NToken, tran : StateNode.Transition) : StateNode
    {
      def pos = tok.StartPos;
      StateNode.PseudoState(pos, PseudoStateModelNode.EntryPoint(pos, GetText(id), tran))
    }

    entry_point_v2(id : NToken, _ : NToken, tran : StateNode.Transition) : StateNode
    {
      def pos = id.StartPos;
      StateNode.PseudoState(pos, PseudoStateModelNode.EntryPoint(pos, GetText(id), tran))
    }

    entry_point_v3(tok : NToken, id : NToken, _ : NToken, tran : StateNode.Transition) : StateNode
    {
      def pos = tok.StartPos;
      StateNode.PseudoState(pos, PseudoStateModelNode.EntryPoint(pos, GetText(id), tran))
    }

    exit_point_decl(tok : NToken, id : NToken) : NameIdentifier
    {
      def pos = tok.StartPos;
      NameIdentifier.Name(pos, GetText(id))
    }

    exit_point(tok : NameIdentifier, tran : option[StateNode.Transition], _ : NToken) : StateNode
    {
      def pos = tok.pos;
      StateNode.PseudoState(pos, PseudoStateModelNode.ExitPoint(pos, tok.name, tran))
    }

  }
}
