using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of Memoize.
  /// </summary>
  public class MemoizedCalc[T] : INotifyPropertyChanged
  {
    mutable cached_value : T;// {get;set;}
    public Name : string;
    
    public Changed : bool {get;private set;default true}

    public this(name : string) { Name = name }
    //public this(func : void -> T) { CalcFunc = func }
    
    public Bind(obj : INotifyPropertyChanged, prop : string) : void
    {
      def prop = prop.Trim();
      obj.ChangeBind(prop, Change)
    }

    public Bind(obj : INotifyPropertyChanged) : void
    {
      obj.ChangeBind(Change)
    }
    
    public Change() : void
    {
      Changed = true;
      OnPropertyChanged()
    }

    Cached() : void
    {
      Changed = false;
    }
    
    public SetValue(val : T) : void
    {
      cached_value = val;
      Cached();
    }
    
    public Value : T
    {
      get
      {
        cached_value
      }
    }
    
    OnPropertyChanged() : void
    {
      PropertyChanged?.Invoke(this, PropertyChangedEventArgs(Name))
    }
    
    public event PropertyChanged : PropertyChangedEventHandler;
    
  }
}
