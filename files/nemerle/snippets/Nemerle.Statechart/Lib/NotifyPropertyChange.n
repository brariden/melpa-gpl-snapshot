using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Statechart
{

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Property)]
  macro NotifyPropertyChange(typeBuilder : TypeBuilder, prop : ClassMember.Property, params pars : list[PExpr])
  {
    NotifyPropertyChangeImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, prop, pars)
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class)]
  macro NotifyPropertyChange(typeBuilder : TypeBuilder, params pars : list[PExpr])
  {
    NotifyPropertyChangeImpl.DoTransform2(Macros.ImplicitCTX(), typeBuilder, pars)
  }

  public module NotifyPropertyChangeUtil
  {

    public ChangeBind(this from_obj :  INotifyPropertyChanged, from_prop : string, func : Action) : void
    {
      def change(_, p)
      {
        when (p.PropertyName == from_prop) func();
      }

      from_obj.PropertyChanged += change
    }

    public ChangeBind(this from_obj :  INotifyPropertyChanged, func : void -> void) : void
    {
      from_obj.PropertyChanged += _ => func()
    }
  }

  /// <summary>
  /// Description of NotifyPropertyChange.
  /// </summary>
  module NotifyPropertyChangeImpl
  {

    public DoTransform2(typer : Typer, typeBuilder : TypeBuilder, aliases : list[PExpr]) : void
    {
      DoTransform2b(typer, typeBuilder, aliases);
      def mems = typeBuilder.GetEvents();
      when (!mems.Exists(x => x.Name == "PropertyChanged"))
      {
        typeBuilder.Define(<[decl: public event PropertyChanged : PropertyChangedEventHandler ]>);
        typeBuilder.Define(<[decl: protected OnPropertyChanged(name : string) : void
                                   {
                                       PropertyChanged?.Invoke(this, PropertyChangedEventArgs(name))
                                   } ]>);

      }

    }

    public Implements(this ty : TypeBuilder, typer : Typer, type : PExpr) : bool
    {
      def check_type(t, typ)
      {
        def super = typer.BindFixedType(t);
        super.TryRequire(typ);
      }
      
      def exists(t)
      {
        | TopDeclaration.Class(t_extends = e)
        | TopDeclaration.Interface(t_extends = e)
        | TopDeclaration.Variant(t_extends = e)   => 
           
           def type = typer.BindFixedType(type);
           e.Exists(check_type(_, type));
        | _ => false
      }
      
      ty.AstParts.Exists(exists)
    }
    
    IsImplemented(typer : Typer, typeBuilder : TypeBuilder) : bool
    {
      def type = <[ INotifyPropertyChanged ]>;
      typeBuilder.Implements(typer, type)
    }

    public DoTransform2b(typer : Typer, typeBuilder : TypeBuilder, _aliases : list[PExpr]) : void
    {
      when (!IsImplemented(typer, typeBuilder))
      {
        Message.Error("Need Implement INotifyPropertyChanged interface");
      }

    }

    public DoTransform(typer : Typer, typeBuilder : TypeBuilder, prop : ClassMember.Property, _aliases : list[PExpr]) : void
    {
      def type = prop.returnType;
      def type = typer.BindType(type).Fix();
      def is_value = type.IsValueType;

      def get_getter(getter)
      {
        match (getter.Body)
        {
          | <[ $(_ : name) ]> as b => b
          | _                      => <[ $(getter.Name : usesite)() ]>
        }
      }

      def is_auto(getter, setter)
      {
        def is_abstract(func)
        {
          match (func)
          {
            | Some(ClassMember.Function(body = FunBody.Abstract))
            | None => true
            |_ => false
          }
        }

        is_abstract(getter) && is_abstract(setter)
      }

      def setter = prop.setter;
      def getter = prop.getter;
      def is_auto = is_auto(getter, setter); 
      def prop_name = prop.Name;
      when (prop.modifiers.GetMacroAttributes().Exists(x => x is <[ Memoized($_) ]> || x is <[ Memoized ]>))
      {
        def name = MemoizedCalcImpl.GetName(prop_name);
        def expr = <[ $(name : usesite).PropertyChanged += _ => OnPropertyChanged($prop_name) ]>;
        def cons = Utils.GetCtors(typeBuilder);
        cons.Iter(x => x.Body = <[ $(x.Body); $expr; ]>);
      }
      match (prop.setter)
      {
        | Some(setter) => 

      def getter = prop.getter.Value;
      when (is_auto)
      {
        def name = Macros.NewSymbol(prop.Name);
        getter.Body = <[ $(name : name) ]>;
        setter.Body = <[ $(name : name) = $("value" : usesite) ]>;
        def type = prop.returnType;
        def field = match (prop.initializer)
                    {
                      | Some(i) => prop.initializer = None();
                                  <[ decl: mutable $(name : name) : $type = $i ]>
                      | _       => <[ decl: mutable $(name : name) : $type ]>
                    }
        typeBuilder.Define(field);
      }

      def get_val = get_getter(getter);
      def body = setter.Body;
      def name = prop.Name;
      def changed = if (is_value) <[ $("value" : usesite) != $get_val ]> else <[ ($("value" : usesite) : object) != $get_val ]>;
      def body =                <[
                                  when ($changed)
                                  {
                                    $body;
                                    OnPropertyChanged($name)
                                  }
                              ]>;
      setter.Body = body;

        | _ => ()
      }
    }
  }
}
