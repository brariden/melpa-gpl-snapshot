using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of DeferredEvents.
  /// </summary>
  [Record]
  class DeferrableEvents
  {
    gen : StaticGenerator;
    
    public static CheckCode() : PExpr
    {
      <[ CheckDeferrable() ]>
    }
    
    public static GetRunCode() : PExpr
    {
      <[ Defer() ]>
    }
    
    static IsDeferDecl : ClassMember
    {
      get
      {
        <[decl: public virtual IsDefer(_ : HsmEvent) : bool { false } ]>
      }
    }
    
    public static EmitIsDeferDeclaration(ty : TypeBuilder) : void
    {
      ty.Define(IsDeferDecl);
    }
    
    public static EmitInState(conf : ActiveStateConfig, ty : TypeBuilder) : void
    {
      match (conf.transitions.Filter(_.IsDefer))
      {
        | []  => ()
        | lst => EmitInStateImpl(lst.Map(_.Trigger), ty)
      }
    }

    //public static EmitInState(st : HState, ty : TypeBuilder) : void
    //{
    //  match (st.transitions.Filter(_.IsDefer))
    //  {
    //    | []  => ()
    //    | lst => EmitInStateImpl(lst.Map(_.Trigger), ty)
    //  }
    //}
    
    static EmitInStateImpl(evt : list[StateEvent], ty : TypeBuilder) : void
    {
      def cases = evt.FoldBack(<[case: | _ => false]> :: [], (x, a) => <[case: | Event.$(x.TargetName : usesite) => true ]> :: a);
      def body = <[ match (evt)
                    {
                      ..$cases
                    }]>;
                          
      ty.Define(<[decl: public override IsDefer(evt : HsmEvent) : bool
                  {
                    $body
                  }]>);
    }
    
    public Emit() : void
    {
      when (gen.HasDeferedEvents)
      {
        gen.ty.Define(<[decl: Defer() : void
                      {
                        deferred.Enqueue(current_event)
                      }]>);
                      
       gen.ty.Define(<[decl: CheckDeferrable() : void
                      {
                        unless (deferred.IsEmpty())
                        {
                          def evt = deferred.Peek();
                          unless (cur_state.IsDefer(evt))
                          {
                            def evt = deferred.Dequeue();
                            PostEvent(evt)
                          }
                        }
                      }]>);
       gen.ty.Define(<[decl: deferred : SCG.Queue[HsmEvent] = SCG.Queue(); ]>);
      }
                    
    }
  }
}
