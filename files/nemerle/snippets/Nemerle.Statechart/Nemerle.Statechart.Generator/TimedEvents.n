using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Timers;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of TimedEvents.
  /// </summary>
  [Record]
  class TimedEvents
  {
    gen : StaticGenerator;


    [RecordIgnore]
    events : list[Transition * StateEvent.Timed * string] {get;set;default []}

    internal event_gen : list[GenTimedEvent]
    {
      [Memoize]
      get
      {
        events.Map(GenTimedEvent(this, _, _, _, gen))
      }
    }

    original_evt : list[GenTimedEvent]
    {
      [Memoize]
      get
      {
        event_gen.GroupBy(_.name).Map(_.First())
      }
    }

    event_decl : ClassMember.TypeDeclaration
    {
      [Memoize]
      get
      {
        <[decl: variant TimEvent : TimeEvent
                {

                }]>
      }
    }

    public DeclInTopState : list[ClassMember]
    {
      [Memoize]
      get
      {
        original_evt.Map(_.DeclInTopState)
      }
    }

    public EventDeclInState(tr : Transition, body : PExpr) : ClassMember
    {
      def evt = event_gen.First(x => x.tran : object == tr);
      evt.DeclInState(body)
    }

    public DispatchCases : list[MatchCase]
    {
      [Memoize]
      get
      {
        original_evt.Map(_.DispatchCode)
      }
    }

    EmitEvents() : void
    {
      def ty = gen.DefineNested(event_decl);
      foreach (evt in original_evt)
      {
        evt.EventDecl(ty);
        evt.Emit();
      }
      ty.Compile();
    }

    Prepare(tran : list[Transition]) : void
    {
      def all_tran = tran;
      def tran = tran.FoldLeft([], (x, a) => if (x.Trigger is StateEvent.Timed as e) (x, e) :: a else a);
      def tran = tran.GroupBy((x, _) => x.Source);  // group by source config
      def tran = tran.Map(_.Distinct()).Flatten().NToList(); // select only distinct
      
      def (after, other) = tran.Partition((_, y) => y.time_expr is TimedExprType.After); // partition events optimized only after syntax for those that starts after state entry
      def dup = after.GroupBy((x, _) => x.Source); // group by source config in distinct configs it may use one timer and event name

      def has_other_evt(gr, i)
      {
        gr.Exists(x => x.Count() > i) // have this index
      }

      def map = Hashtable();
      
      def exists_name((x, e), name)
      {
        def key = (x.OriginateFrom, e);
        if (map.ContainsKey(key)) map[key] == name else false
      }
      
      def get_name(all, i)
      {
        def name = if (i != 0) $"After$i" else "After"; // create index name for it
        if (all.Exists(x => exists_name(x, name)))
          get_name(all, i + 1) else name
      }
      
      def create_name(all, (x, e), i, other)
      {
        def key = (x.OriginateFrom, e);
        def name = if (map.ContainsKey(key)) 
                   {
                     map[key]
                   } else
                   {
                    def name = if (has_other_evt(other, i)) // if has events in other configurations with this index in this state
                    {
                      def name = get_name(all, i);
                      name
                    } else
                    {
                      e.TargetName
                    }
                    map.Add(key, name);
                    name
                  }
        
        
        (x, e, name)
      }

      def other = other.Map((x, y) => (x, y, y.TargetName));
      
      def res = dup.FoldLeft([], (x, a) => 
      {
                                 def other = dup.Exclude(y => y.Key : object == x.Key); // other groups in configs
                                 def res = x.MapIndex(create_name(x, _, _, other)).NToList();
                                 res + a
      });
      
      events = res + other;
      ModifyPaths(all_tran)
    }

    
    ModifyPaths(tran : list[Transition]) : void
    {
      def modify_path(tr, x, src, tar, a)
      {
        def entry_gen = if (tar != null) event_gen.Filter(x => x.Source == tar : object) else [];
        def exit_gen = event_gen.Filter(x => x.Source == src : object);
        match (x)
        {
          | TranPath(kind = PathKind.Entry, state = st) => 
              
              match (entry_gen.Filter(x => x.state : object == st))
              {
                | []  => x :: a
                | lst => def lst = lst.Map(x => x.StartTranPath(tr));
                         x :: lst + a
              }
          | TranPath(kind = PathKind.Exit, state = st) => 
              match (exit_gen.Filter(x => x.state : object == st))
              {
                | []  => x :: a
                | lst => def lst = lst.Map(x => TranPath(st, PathNode.Action(st, FsmAction.Expr(x.StopCode)) :: [], PathKind.Action));
                         lst + (x  ::  a)
              }

          | x => x :: a
        }
      }
      
      def check_tran(tr, tar)
      {
        unless (tr.Target is TargetDeterminator.NoStateChange)
        foreach (node in tr.DecisionTree.GetBreadthFirstEnumerable())
        {
          def old_path = node.path.TranPath;
          def states = node.path.TranPath.Exclude(x => x.kind == PathKind.Action).Map(_.state).Distinct();
          def path = old_path.FoldBack([], modify_path(tr, _, tr.Source, tar, _));
          def path = if (tar != null)
          {
            match (event_gen.Filter(x => x.Source : object == tar))
            {
              | [] => path
              | e  => def not_runned = e.Exclude(x => states.ContainsRef(x.state));
                      def fixed = if (tr.Kind == TransitionKind.History) [] else tr.Source.states.Intersect(tar.states);
                      def not_runned = not_runned.Exclude(x => fixed.ContainsRef(x.state));
                      def not_runned = not_runned.OrderBy(x => x.state.hierarchy_pos);
                      if (not_runned.IsEmpty()) path else
                      {
                        def run = not_runned.Map(x => x.StartTranPath(null));
                        run + path
                      }
            }
          } else path;
          
          when (path.Length != old_path.Count()) node.path = PathSequence(path);
        }
      }
      
      def check(tr)
      {
        match (tr.Target)
        {
          | TargetDeterminator.State(st)      => check_tran(tr, st)
          | _                                 => check_tran(tr, null)
        }
      }
      
      foreach (tr in tran)
      {
        check(tr)
      }

    }

    public Init(tran : list[Transition]) : void
    {
      Prepare(tran);
    }

    public Emit() : void
    {
      EmitEvents();
    }
  }
}
