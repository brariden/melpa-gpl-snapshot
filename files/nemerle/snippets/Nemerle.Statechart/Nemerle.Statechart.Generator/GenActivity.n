using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Nemerle.Statechart;
using System.Threading.Tasks;
using System.Threading;

namespace Nemerle.Statechart
{

  [Record]
  class GenActivity
  {
    activity : StateAction.Do;
    map : Map[string, string];
    gen : StaticGenerator;
    other : list[StateAction.Do];
    
    flags : ActivityFlag
    {
      get
      {
        activity.flags
      }
    }

    actions : list[FsmAction]
    {
      get
      {
        activity.action.actions
      }
    }

    one_normal_action : bool
    {
      get
      {
        match (action_list)
        {
          | GenAction(action = FsmAction.Normal(_, [])) :: [] => true
          | _                                                 => false
        }
      }
    }

    [Memoized]
    action_list : list[GenAction]
    {
      get
      {
        actions.Map(x => GenAction(x, map, gen))
      }
    }

    public Name : string
    {
      get
      {
        activity.Name
      }
    }

    public static StartCode(act : StateAction.Do) : PExpr
    {
      if (act.need_completion) <[ $(act.Name : usesite).StartContinued() ]> else
                               <[ $(act.Name : usesite).Start() ]>
    }

    public static StopCode(act : StateAction.Do) : PExpr
    {
      <[ $(act.Name : usesite).Stop() ]>
    }

    other_dup_name : bool
    {
      [Memoize]
      get
      {
        match (action_list)
        {
          | GenAction(action = FsmAction.Normal(n1, [])) :: [] => other.Exists(x => if (x.action.actions is FsmAction.Normal(n2, []) :: []) n1 == n2 else false)
          | _                                                  => false
        }
      }
    }

    public run_action_name : string
    {
      get
      {
        match (action_list)
        {
          | GenAction(action = FsmAction.Normal(_, [])) as a :: [] when !other_dup_name => a.ExecName
          | _                                                                           => $"$(Name)Action"
        }
      }
    }
    
    public CannotCancel : bool
    {
      get
      {
        def not_canceled = actions.All(x => x is FsmAction.Normal(_, _ :: _) || x is FsmAction.Expr);
        activity.NoCancel || not_canceled
      }
    }

    public DeclarationType : PExpr
    {
      get
      {
        if (CannotCancel) <[ DoActivity ]> else <[ CancelableDoActivity ]>
      }
    }

    public RunParams : list[PParameter]
    {
      get
      {
        if (CannotCancel) [] else <[parameter: tok : CancellationToken ]> :: []
      }
    }

    public init : PExpr
    {
      get
      {
        if (activity.need_completion) <[ $DeclarationType($(run_action_name : usesite), CompletionAfterActivity) ]> 
        else <[ $DeclarationType($(run_action_name : usesite)) ]>
      }
    }

    GenBaseStruct() : void
    {
      gen.Define(<[decl: $(Name : usesite) : $DeclarationType;]>); // declare do activity
      gen.init_exprs ::= <[ $(Name : usesite) = $init ]>; // create it in constructor
    }

    DefineActions() : void
    {

      when (!one_normal_action || actions.Exists(_ is FsmAction.Expr) || other_dup_name)
      {
        def get_body(act)
        {
          match (act.action)
          {
            | FsmAction.Normal(_, []) => <[ $(act.ExecName : usesite)(tok); ]>
            | FsmAction.Normal        => <[ $(act.ExecExpr) ]>
            | Expr(e)                 => e
          }
        }

        def run_acts = action_list.Map(get_body);
        def body = <[ {..$run_acts} ]>;

        gen.Define(<[decl: $(run_action_name : usesite)(..$RunParams) : void
                    {
                      $body
                    }]>);
      }
    
    }
    
    public Emit() : void
    {
      GenBaseStruct();
      DefineActions();
    }

  }

  /// <summary>
  /// Description of GenActivity.
  /// </summary>
  partial class StaticGenerator
  {

    DefineDoActivity() : void
    {
      def act = DoActivities;
      when (!act.IsEmpty())
      {
        when (have_completion)
        {
          Define(<[ decl: CompletionAfterActivity(_ : Task) : void
                        {
                          Completion()
                        } ]>);
        }

        //def (sub, normal) = act.NToList().Partition(x => x.state.type is StateType.SubMachine);
        def act = Activities(act.NToList(), action_for, this);
        act.Emit();

      }
    }


  }
}
