using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;
using Nemerle.Extensions;

namespace Nemerle.Statechart
{
  

  [Record]
  public variant GuardNode : LocatedNode
  {
    | Empty   { this() {base(-1)} }
    | Expr    {expr : PExpr;}
    //| InState {state : string;}
    | Else

    public override ToString() : string {Name}

    public static Combine(a : GuardNode, b : GuardNode) : GuardNode
    {
      | (GuardNode.Empty, GuardNode.Empty) => GuardNode.Empty(a.pos)
      | (Expr(ae), Expr(be))   => GuardNode.Expr(a.pos, <[ $ae && $be ]>)
      | (Else, Else)           => GuardNode.Else(a.pos)
      | (Empty, a)             
      | (a, Empty)
      | (Else, Expr as a)      
      | (Expr as a, Else)
      | (Expr as a, _)         
      | (_, Expr as a)         => a
    }
    
    public Name : string
    {
      get
      {
        match (this)
        {
          | Expr(c)   => $"GuardNode{$c}"
          //| InState(c) => $"InState($c)" 
          | Else       => "Else"
          | Empty      => "Empty"
        }
      }
    }

    public IsEmpty : bool
    {
      get
      {
        this is Empty
      }
    }
    
    public NotEmpty : bool
    {
      get
      {
        !IsEmpty
      }
    }
    
    public static @+(a : GuardNode, b : GuardNode) : GuardNode
    {
      Combine(a, b)
    }
    
    public CompareTo(b : GuardNode) : int
    {
      Name.CompareTo(b.Name)
      //match (this, b)
      //{
      //  | (Expr(a), Expr(b))       => a.ToString().CompareTo(b.ToString())
      //  | (_, _)                   => -1
      //}
    }
    
  }
}
