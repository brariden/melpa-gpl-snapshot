using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.TypeVar;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nemerle.Unsafe
{
  macro Pinned(args : PExpr, body : PExpr)
  syntax ("pinned", "(", args, ")", body)
  {
    PinnedImpl.DoTransform(Macros.ImplicitCTX(), args, body)
  }
  
  module PinnedImpl
  {
    public DoTransform(typer : Typer, args : PExpr, body : PExpr) : PExpr
    {
      Macros.DefineCTX(typer);
      
      match (args)
      {
        | <[ $(n : name) = $val; ]> =>
          def type = typer.FreshTypeVar();
          def pinnedVarName = n.Id + "_#pinned";
          def pinnedVar = LocalValue(typer.CurrentFunction, pinnedVarName, n.Location, type, LocalValue.Kind.Plain(), true);
          pinnedVar.IsPinned = true;
          pinnedVar.EverUsed = true;
          
          def typedValue = typer.TypeExpr(val);
          def arrayType  = <[ ttype: array[_] ]>;
          
          //assert2(false);
          //Diagnostics.Trace.Assert(false);
          
          def ptrType =
            if (arrayType.TryUnify(typedValue.Type))
            {
              arrayType.ForceUnify(typedValue.Type);
              def ptrType = arrayType.t.Fix().MakePointerType();
              
              if (ptrType == null)
                Message.FatalError(typedValue.Location, $"Type $(typedValue.Type) not supported in 'pinned' expression.");
              else
                ptrType
            }
            else if (typer.InternalType.String.TryUnify(typedValue.Type))
            {
              typer.InternalType.String.ForceUnify(typedValue.Type);
              def ptrTypeInfo = typer.Manager.LookupTypeInfo("System.Char*");
              def ptrType     = ptrTypeInfo.GetMemType();
              ptrType
            }
            else Message.FatalError(typedValue.Location, $"Type $(typedValue.Type) not supported in 'pinned' expression.");
          
          def pinnedVarName2 = Macros.NewSymbol(pinnedVarName);
          _ = pinnedVar.Type.Unify(typedValue.Type);
          typer.AddLocal(pinnedVarName2, pinnedVar);
            
          def ptrVar      = LocalValue(typer.CurrentFunction, n.Id, n.Location, ptrType, LocalValue.Kind.Plain(), true);
          
          ptrVar.EverUsed = true;
            
          _ = ptrVar.Type.Unify(ptrType);
          typer.AddLocal(n, ptrVar);
          
          def pinnedVarRef   = typer.TypeExpr(<[ $(pinnedVarName2 : name) ]>, typedValue.Type);
          def typedGetPtr    = TExpr.TypeConversion(ptrType, pinnedVarRef, ptrType, ConversionKind.Unspecified());
          def typedBody      = typer.TypeExpr(<[ $body; $(pinnedVarName2 : name) = null; ]>);
            
          def pinnedDefValIn = TExpr.DefValIn(typedBody.Type, ptrVar,    typedGetPtr, typedBody);
          def ptrDefValIn    = TExpr.DefValIn(typedBody.Type, pinnedVar, typedValue,  pinnedDefValIn);
            
          <[ $(ptrDefValIn : typed) ]>
        
        | _ => Message.FatalError(args.Location, "Expected 'name = expr'.");
      }
    }
  }
}
