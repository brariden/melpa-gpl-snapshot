#region License notes
/*
 * Copyright (c) 2010 Vladimir Kochetkov <mailto:kochetkov.vladimir@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#endregion

using Nemerle.Assertions;
using System;
using System.Collections.Generic;

namespace Nemerle.Diff
{
    /// Implementation of Difference Algorithm published in
    /// "An O(ND) Difference Algorithm and its Variations" by Eugene Myers
    /// Algorithmica Vol. 1 No. 2, 1986, p 251. It's based on C# implementation
    /// by Matthias Hertel (http://www.mathertel.de).
    public partial module DiffExtensions
    {
        /// <summary>
        /// Finds a difference in two sequences.
        /// </summary>
        /// <param name="sequenceA">A-version of the sequence</param>
        /// <param name="sequenceB">B-version of the sequence</param>
        /// <returns>Returns an array of DiffItems that describe the differences.</returns>
        public Diff[T](
            [NotNull] this sequenceA : array[T],
            [NotNull]      sequenceB : array[T]
        ): array[DiffItem[T]]
        where T : IEquatable[T]
        {
            Diff(sequenceA, sequenceB, _.Equals(_))
        }

        /// <summary>
        /// Finds a difference in two sequences.
        /// </summary>
        /// <param name="sequenceA">A-version of the sequence</param>
        /// <param name="sequenceB">B-version of the sequence</param>
        /// <param name="equals">Item equality predicate</param>
        /// <returns>Returns an array of DiffItems that describe the differences.</returns>
        public Diff[T](
            [NotNull] this sequenceA : array[T],
            [NotNull]      sequenceB : array[T],
            [NotNull]      equals    : Func[T, T, bool]
        ): array[DiffItem[T]]
        {
            // Finds the Shortest Middle Snake (SMS) for two sequences with passed bounds and direction vectors
            def computeSms(diffDataA, lowerBoundA, upperBoundA, diffDataB, lowerBoundB, upperBoundB, forwardVector, backwardVector)
            {
                def forwardK = lowerBoundA - lowerBoundB;
                def backwardK = upperBoundA - upperBoundB;
                def delta = (upperBoundA - lowerBoundA) - (upperBoundB - lowerBoundB);
                def oddDelta = (delta % 2) != 0;

                // The vectors in the publication accepts negative indexes. The vectors implemented here are 0-based and are accesses using a specific offset
                def forwardOffset = diffDataA.Data.Length + diffDataB.Data.Length + 1 - forwardK;
                def backwardOffset = diffDataA.Data.Length + diffDataB.Data.Length + 1 - backwardK;
                
                def maxD = ((upperBoundA - lowerBoundA + upperBoundB - lowerBoundB) / 2) + 1;

                // Initialize vectors
                forwardVector[forwardOffset + forwardK + 1] = lowerBoundA;
                backwardVector[backwardOffset + backwardK - 1] = upperBoundA;

                mutable result;
                
                // Extend the forward path.
                for (mutable d = 0; (d <= maxD) && (result == null); d++) 
                {
                    for (mutable k = forwardK - d; (k <= forwardK + d) && (result == null); k += 2) 
                    {
                        // Find the only or better starting point
                        mutable x;
                        mutable y;
                        if (k == forwardK - d)
                            x = forwardVector[forwardOffset + k + 1]; // Down
                        else
                            x = forwardVector[forwardOffset + k - 1] + 1; // A step to the right
                            when ((k < forwardK + d) && (forwardVector[forwardOffset + k + 1] >= x))
                                x = forwardVector[forwardOffset + k + 1]; // Down
                        
                        y = x - k;
                        
                        // Find the end of the furthest reaching forward D-path in diagonal k.
                        while ((x < upperBoundA) && (y < upperBoundB) && equals(diffDataA.Data[x], diffDataB.Data[y])) {
                            x++; 
                            y++;
                        }
                        forwardVector[forwardOffset + k] = x;

                        // Overlap?
                        when (oddDelta && (backwardK - d < k) && (k < backwardK + d) && (backwardVector[backwardOffset + k] <= forwardVector[forwardOffset + k]))
                        {
                            result = Snake(forwardVector[forwardOffset + k], forwardVector[forwardOffset + k] - k);
                        }
                    }
                    
                    // Extend the reverse path.
                    for (mutable k = backwardK - d; (k <= backwardK + d) && (result == null); k += 2)
                    {
                        // Find the only or better starting point
                        mutable x;
                        mutable y;
                        if (k == backwardK + d)
                            x = backwardVector[backwardOffset + k - 1]; // Up
                        else
                            x = backwardVector[backwardOffset + k + 1] - 1; // Left
                            when ((k > backwardK - d) && (backwardVector[backwardOffset + k - 1] < x))
                                x = backwardVector[backwardOffset + k - 1]; // Up
                        y = x - k;
                        while ((x > lowerBoundA) && (y > lowerBoundB) && equals(diffDataA.Data[x - 1], diffDataB.Data[y - 1])) {
                            // Diagonal
                            x--;
                            y--;
                        }
                        
                        backwardVector[backwardOffset + k] = x;

                        // Overlap ?
                        when (!oddDelta && (forwardK - d <= k) && (k <= forwardK + d) && (backwardVector[backwardOffset + k] <= forwardVector[forwardOffset + k]))
                        {
                            result = Snake(forwardVector[forwardOffset + k], forwardVector[forwardOffset + k] - k);
                        }
                    }
                }
                result
            }

            // This is the divide-and-conquer implementation of the longest common subsequence (LCS) algorithm.
            // The published algorithm passes recursively parts of the A and B sequences.
            // To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
            def computeLcs(diffDataA, mutable lowerBoundA, mutable upperBoundA, diffDataB, mutable lowerBoundB, mutable upperBoundB, forwardVector, backwardVector)
            {
                // Fast walkthrough equal elements at the start
                while (lowerBoundA < upperBoundA && lowerBoundB < upperBoundB && equals(diffDataA.Data[lowerBoundA], diffDataB.Data[lowerBoundB]))
                {
                    lowerBoundA++;
                    lowerBoundB++;
                }
                
                // Fast walkthrough equal elements at the end
                while (lowerBoundA < upperBoundA && lowerBoundB < upperBoundB && equals(diffDataA.Data[upperBoundA - 1], diffDataB.Data[upperBoundB - 1]))
                {
                    upperBoundA--;
                    upperBoundB--;
                }
                
                if (lowerBoundA == upperBoundA) 
                    // Mark as inserted elements
                    while (lowerBoundB < upperBoundB) {
                        diffDataB.IsModified[lowerBoundB] = true;
                        lowerBoundB++;
                    }
                else if (lowerBoundB == upperBoundB)
                    // Mark as deleted elements
                    while (lowerBoundA < upperBoundA) {
                        diffDataA.IsModified[lowerBoundA] = true;
                        lowerBoundA++;
                    }
                else {
                    // Find the middle snake and the length of an optimal path for A and B
                    def sms = computeSms(diffDataA, lowerBoundA, upperBoundA, diffDataB, lowerBoundB, upperBoundB, forwardVector, backwardVector);
                    // The path is from LowerX to (x,y) and (x,y) to UpperX
                    _ = computeLcs(diffDataA, lowerBoundA, sms.X, diffDataB, lowerBoundB, sms.Y, forwardVector, backwardVector);
                    _ = computeLcs(diffDataA, sms.X, upperBoundA, diffDataB, sms.Y, upperBoundB, forwardVector, backwardVector);
                }
            }

            // Optimizes DiffData to produce more readable diff sequences.
            def optimizeDiffData(diffData) 
            {
                mutable startIndex = 0;
                mutable endIndex;
                
                while (startIndex < diffData.Data.Length) 
                {
                    while ((startIndex < diffData.Data.Length) && !diffData.IsModified[startIndex])
                        startIndex++;
                    endIndex = startIndex;
                    while((endIndex < diffData.Data.Length) && diffData.IsModified[endIndex])
                        endIndex++;
                    if ((endIndex < diffData.Data.Length) && equals(diffData.Data[startIndex], diffData.Data[endIndex])) {
                        diffData.IsModified[startIndex] = false;
                        diffData.IsModified[endIndex] = true;
                    } else
                        startIndex = endIndex;
                }
            }

            // Initialize sequences buffers...
            def diffDataA = DiffData.[T](sequenceA);
            def diffDataB = DiffData.[T](sequenceB);
            
            // ... and direction vectors
            def vectorSize = 2 * (diffDataA.Data.Length + diffDataB.Data.Length + 1) + 2;
            def forwardVector : array[int] = array(vectorSize);
            def backwardVector : array[int] = array(vectorSize);
            
            // Compute the Longest Common Subsequence for sequence A and sequence B
            _ = computeLcs(diffDataA, 0, diffDataA.Data.Length, diffDataB, 0, diffDataB.Data.Length, forwardVector, backwardVector);
            
            // Optimize both DiffDatas
            optimizeDiffData(diffDataA);
            optimizeDiffData(diffDataB);

            // Scan both DiffData for elements which are inserted or deleted to produce an edit script in forward order.
            def resultList = List.[DiffItem[T]]();

            mutable startIndexA = 0;
            mutable startIndexB = 0;
            mutable elementIndexA = 0;
            mutable elementIndexB = 0;

            while (elementIndexA < diffDataA.Data.Length || elementIndexB < diffDataB.Data.Length)
                if ((elementIndexA < diffDataA.Data.Length) && (!diffDataA.IsModified[elementIndexA]) && 
                    (elementIndexB < diffDataB.Data.Length) && (!diffDataB.IsModified[elementIndexB])) {
                    // Equal elements
                    elementIndexA++;
                    elementIndexB++;
                } else {
                    // Deleted and/or inserted elements. May be... :)
                    startIndexA = elementIndexA;
                    startIndexB = elementIndexB;
                    while (elementIndexA < diffDataA.Data.Length && (elementIndexB >= diffDataB.Data.Length || diffDataA.IsModified[elementIndexA]))
                        elementIndexA++;
                    while (elementIndexB < diffDataB.Data.Length && (elementIndexA >= diffDataA.Data.Length || diffDataB.IsModified[elementIndexB]))
                        elementIndexB++;
                    when ((startIndexA < elementIndexA) || (startIndexB < elementIndexB)) {
                        // Add a new difference item
                        mutable insertedBArray : array[T] = array(elementIndexB - startIndexB);
                        for(mutable i = 0; i < elementIndexB - startIndexB; i++)
                            insertedBArray[i] = sequenceB[startIndexB + i];
                        _ = resultList.Add(DiffItem.[T](startIndexA, elementIndexA - startIndexA, insertedBArray));
                    }
                }
            resultList.ToArray();
        }
    }
}
