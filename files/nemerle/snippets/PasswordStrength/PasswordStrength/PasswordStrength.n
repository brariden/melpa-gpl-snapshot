using System;
using System.Collections.Generic;

using Nemerle.Collections;
using Nemerle.Text;

using Nemerle.Security.CharType;

namespace Nemerle
{
  public module Security
  {
    variant CharType {
      | Escape
      | AlphaUpper
      | AlphaLower
      | Number
      | SimpleSpecial
      | ExtendedSpecial
      | High
      
      public BitLength() : int
      {
        match(this) {
          | Escape          => 60
          | AlphaUpper      => 26
          | AlphaLower      => 26
          | Number          => 10
          | SimpleSpecial   => 16
          | ExtendedSpecial => 17
          | High            => 112
        }
      }
      
      public static GetType(c : char) : CharType
      {
        regexp match(c.ToString()) {
          | "[\x00-\x1f]" => Escape()
          | "[A-Z]"       => AlphaUpper()
          | "[a-z]"       => AlphaLower()
          | "[0-9]"       => Number()
          | "[\x20-\x2f]" => SimpleSpecial()
          | "[\x3a-\x40]"
          | "[\x5b-\x60]"
          | "[\x7b-\x7e]" => ExtendedSpecial()
          | _             => High()
        }
      }
    }

    public GetPasswordStrength(password : string) : int
    {
      def symbolTypes = List.[CharType]();
      def symbolCounts = Dictionary.[char,int]();
      def differences = Dictionary.[int,int]();

      mutable prevSymbol = ' ';
      mutable effectiveLength = 0.0;
      
      foreach(symbol in password)
      {
        def diffFactor = 
          if (!symbolTypes.IsEmpty()) {
            def diff = symbol :> int - prevSymbol;
            if (differences.ContainsKey(diff)) {
              differences[diff] += 1;
              1.0 / differences[diff] :> double
            } else {
              differences.Add(diff, 1);
              1.0
            }
          } else 1.0;
        effectiveLength += if (symbolCounts.ContainsKey(symbol)) {
          symbolCounts[symbol] += 1;
          diffFactor * (1.0 / symbolCounts[symbol] :> double)
        } else {
          symbolCounts.Add(symbol, 1);
          diffFactor
        }
        symbolTypes.Add(GetType(symbol));
        prevSymbol = symbol;
      }
      Math.Ceiling(
        Math.Log(
          symbolTypes.ToList().RemoveDuplicates().Fold(0, (t, acc) => t.BitLength() + acc)
        ) / Math.Log(2.0) * effectiveLength
      ) :> int
    }
  }
}