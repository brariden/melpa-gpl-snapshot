#pragma indent

using Nemerle.Aop.DevMacros
using Nemerle.Aop.Helper.ParserCombinators
using Nemerle.Compiler
using Nemerle.Collections
using Nemerle.Builtins.Function

namespace Nemerle.Aop.Helper
 public class Parse

  public enum PropBody {
      | None = 0
      | Get = 1
      | Set = 2
      | Both = 3
  }

  internal static pointcut(input : PInput) : PResult[Pointcut] {

   def parse_pointcut = reversed {

       "pointcut" <% parse_or; //START symbol

       def parse_or(inp) {
           def parse = parse_and <*> optional(operator("||") *> parse_or) <@ fun(_) {
                   | (left, Some(right)) => OrPointcut(left, right)
                   | (left, None()) => left
           };
           parse(inp)
       }

       def parse_and(inp) {
           def parse = neg_pointcut <*> optional(operator("&&") *> parse_and) <@ fun(_) {
                   | (left, Some(right)) => AndPointcut(left, right)
                   | (left, None()) => left
           };
           parse(inp)
       }

       def neg_pointcut =
               simple_pointcut 
           <|> (operator("!") *> simple_pointcut <@ NegPointcut(_)) ;     

       def simple_pointcut = 
               parentheses(pointcut)
           <|> execution_pointcut
           <|> args_pointcut
           <|> target_pointcut;

       def execution_pointcut = 
           keyword("execution") *> parentheses(signature) <@ ExecutionPointcut(_);

       def signature = "signature"<%  
           (attributes_pattern <*> modifiers_pattern <*> class_in_signature <*> member_pattern) <@@ fun(_){
               | ((attrs, (amodif, (tp, memb))), inp) => PatternResolver(tp, amodif, attrs, memb, inp.Env)
       };

       def class_in_signature = "class pattern" <% 
           condition(class_pattern', (parts, _) => parts.Length>0) 
               <@@ fun((ps, with_plus), inp) { ClassNamePattern.MakeClassPattern(ps, with_plus, inp.Env)};

       def class_pattern' =
           (repetition(class_name_part) <@ NList.Flatten) <*> optional(class_name_last_part) <@
           ((ps, opt_p) => (ps + opt_p.WithDefault([]), opt_p.HasValue));

       def class_name_last_part =
           id_pattern <* operator("+") *> operator(".") <@x=>[PatternFragment.Fragment(x)];

       def class_name_part = //"class part"<%
           id_pattern <*> class_part_separator <@ (id, maybe_ellipsis) => PatternFragment.Fragment(id) :: maybe_ellipsis;

       def class_part_separator = //"class part spearator : . or .."<% 
               (operator(".") <@ _ => [])
           <|> (operator("..") <@ _ => [PatternFragment.Gap()]);

       def member_pattern = 
               method_pattern 
           <|> property_pattern
           <|> constructor_pattern;

       def method_pattern = 
           (id_pattern <*> roundgrp(parameters)) <*> ret_type 
           <@ (idps, rt) => MethodPattern(idps[0], idps[1], rt);


       def constructor_pattern = keyword("this") *> roundgrp(parameters) <@ ConstructorPattern(_);

       def property_pattern = id_pattern <*> bracesgrp(
           optional(get_set) <*> optional(get_set) <@ (o1, o2)=> o1.WithDefault(PropBody.None) | o2.WithDefault(PropBody.None)
       ) <*> ret_type 
           <@ (id, gsrt) => PropertyPattern(gsrt[1], id, (gsrt[0]&PropBody.Get) == PropBody.Get, (gsrt[0]&PropBody.Set) == PropBody.Set);
       def get_set = 
           loosegrp((keyword("get") <@ _ =>  PropBody.Get) <|> (keyword("set") <@ _ => PropBody.Set));
       def ret_type = operator(":") *> type_pattern;

       def attributes_pattern = 
           optional(squaregrp(repetition(attribute))) 
           <@ opt=>opt.WithDefault([]) ;
       def attribute = loosegrp(type_pattern);

       def modifiers_pattern =
           repetition(modifier_pattern);

       def modifier_pattern = //TODO add nofail
           optional(operator("!")) <*> modifier_keyword <@ (ex, mk) => ModifierPattern(mk, ex.HasValue);
           
       def modifier_keyword = 
               (keyword("public") <@ _ => NemerleModifiers.Public)
           <|> (keyword("private") <@ _ => NemerleModifiers.Private)
           <|> (keyword("internal") <@ _ => NemerleModifiers.Internal)
           <|> (keyword("protected") <@ _ => NemerleModifiers.Protected)
           <|> (keyword("static") <@ _ => NemerleModifiers.Static);


       def args_pointcut = 
           keyword("args") *> roundgrp(parameters) <@ ArgsPointcut(_);

       def parameters = repetition(loosegrp(param)) <@ Parameters(_);
       def param = 
               (operator("..") <@ _ => PatternFragment.Gap()) 
           <|> formal_param_ref 
           <|> (type_pattern <@ t => PatternFragment.Fragment(Parameters.Param.JustType(t)));

       def formal_param_ref(inp : PInput) {

           def parse_fun = condition(parse_id, inp.ParamsDict.Contains(_)) <@ id=> PatternFragment.Fragment(
             Parameters.Param.FormalParamRef(inp.ParamsDict[id].TypePattern, inp.ParamsDict[id].Number));

           parse_fun(inp)
       };

       def target_pointcut = 
           keyword("target") *> (parentheses(formal_param <|> t_pattern));
       def t_pattern = 
           type_pattern <@ TargetPointcut.TypeConstraintTarget(_);
       def formal_param(inp) {
           def parse_fun = condition(parse_id, inp.ParamsDict.Contains(_)) 
               <@ id=>TargetPointcut.VariableBindingTarget(inp.ParamsDict[id]);
           parse_fun(inp)
        };
   }
   (parse_pointcut <@ RootPointcut(_))(input)
  }


  static type_pattern(input : PInput) : PResult[TypePattern] {
      def parse = type_pattern'(_, MTypePattern()) <@ mtypepattern => TypePattern.Make(mtypepattern); 
      def new_input = input.WithFactory(MTypePattern());
      parse(new_input)
  }


  internal static param_pattern(input : PInput) : PResult[ParamPattern] {
    type_pattern'(input.WithFactory(ParamPatternFactory()), ParamPatternFactory())
  }

  static type_pattern' ['a](input : PInput, factory : TypePatternFactory['a]) : PResult['a] {
    

   def parse_typepattern = reversed {
       parse_arrow ;
       def parse_arrow(inp) {
           def factory = inp.Factory  :> TypePatternFactory['a];
           def parse = parse_tuple <*> optional(operator("->") *> parse_arrow) <@ fun (x) {
               |(t, None()) => t | (t, Some(t2)) => factory.Arrow(t, t2)
           };
           parse(inp)
       }
       def parse_tuple = 
           rep_with_separator(parse_atomic, operator("*")) 
           <@ fun (_) { |[x] => x | xs => factory.Tuple(xs) };
       def parse_atomic = 
               parse_parenths
           <|> p_void
           <|> p_blank
           <|> array_pattern
           <|> class_pattern;

       def class_pattern(inp){
           def factory = inp.Factory  :> TypePatternFactory['a];

           def parse_fun = class_name_pattern <*> optional(squaregrp(type_params)) <*> optional(operator("+")) <@ fun(_) {
               | (name, (optparams, Some(_))) => 
                   def klass = factory.ClassLike(name, optparams.WithDefault([]), inp.Env);
                   factory.SubtypesOf(klass)
               | (name, (optparams, None)) => 
                   factory.ClassLike(name, optparams.WithDefault([]), inp.Env);
           };
           parse_fun(inp)
        };

       def class_name_pattern = 
           rep_with_separator(parse_id, operator("."));

       def type_params =
           repetition(loosegrp(type_pattern'(_, factory)));

       def array_pattern(inp) { 
            ((keyword("array") *> squaregrp(loosegrp(type_pattern'(_, factory))) <@ t=>factory.Array(1, t))
           <|> (keyword("array") *> squaregrp(loosegrp(integer)<*>loosegrp(type_pattern'(_, factory))) 
           <@ (dim, t)=>factory.Array(dim, t)))(inp)
       }
       def p_blank = operator("?") <* no_square_nor_plus_nor_dot <@ _ =>  factory.Blank();
       // The implementation of parsing blank is quite extraodrinary.
       // The problem here is that ? is a blank but only if not followed by squaregroup nor ' + ' nor '.'.
       // To tackle this I use a "negative" parser to fail on seeing these "bad" tokens.
       def no_square_nor_plus_nor_dot(inp : PInput) : PResult[string] {
           match(inp.Tokens) {
               | Token.SquareGroup :: _ 
               | Token.Operator(".") :: _ 
               | Token.Operator("+") :: _ => PResult.Fail(inp)
               | _ =>  PResult.OK("", inp)
           }
       }
       def p_void = keyword("void") <@ _ =>  factory.Void();
       def parse_parenths : Parser['a] = roundgrp(loosegrp( type_pattern'(_, factory)));
   }
   parse_typepattern(input)
  }

  public static id_pattern(input : PInput) : PResult[IdPattern]
   def parse = reversed {
       exact <|> blank;
       def blank = operator("?") <@ _ =>  IdPattern.Blank();
       def exact = parse_id <@ id => IdPattern.Exact(id);
   }
   parse(input)
