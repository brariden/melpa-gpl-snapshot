using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.IO;
using Nemerle.Macros;
using System.Reflection;
using Nemerle.Aop.DevMacros;
using Nemerle.Aop.Helper.ParserCombinators;

namespace Nemerle.Aop.Helper {

    [Record] internal class ModifierPattern {
        keyword : NemerleModifiers;
        negated : bool;

        internal Matches(na : NemerleModifiers) : bool {
            def v = (na & keyword!= 0);
            if (negated)
                !v
            else
                v
        }

    }

    //SignaturePattern TODO
    [Record] internal class PatternResolver {

        class_name : ClassNamePattern;
        access_modifiers : list[ModifierPattern];
        attributes : list[TypePattern];
        member_pattern : MemberPattern;
        env : GlobalEnv;


        public Matches( jp : Joinpoint ) : MatchResult {
            def acc_mod_matches = access_modifiers.ForAll(x=>x.Matches(jp.NemerleModifiers));
            def attrs_match = match(attributes) {
                | [] => true
                | xs => 
                    def attr_types = jp.CustomAttributeTypes(env);
                    xs.ForAll( x => attr_types.Exists(y=> x.Matches(y)))
            }
            match((class_name.Matches(jp.TargetType), member_pattern.Matches(jp))) {
                | (tpm, mpr) => MatchResult(acc_mod_matches&&attrs_match&&tpm&&mpr.Matched, mpr.VarBindings)
            }
        }

        public override ToString() : string {
            $"$attributes $access_modifiers $class_name.$member_pattern"
        }
    }
}
