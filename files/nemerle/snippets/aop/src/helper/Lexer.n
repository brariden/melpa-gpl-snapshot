#pragma indent

using System.Collections
using Nemerle.Compiler
using Nemerle.Compiler.Parsetree
using Nemerle.IO

namespace Nemerle.Aop.Helper
    // to take tokens from pointcut patterns that are
    // slightly modified for the needs of this AOP
    // extension
    public class Lexer

        public static FromList(toks : list[Token]) : Lexer
            | x :: _ => FromToken(x)
            | _ => FromToken(null)

        public static FromToken(tok : Token) : Lexer
            Lexer(Token.LooseGroup(tok))

        public static WithoutFixing(tok : Token) : Lexer
            Lexer(tok, fix=false)
            
        mutable current : Token
        mutable no_more_tokens = false //after MoveNext returns false, 
        log : IErrorPipe = DummyConsoleErrorPipe()
        //Current returns the last element over and over which is not good for us
        public this( loose_group : Token, fix=true )
            def group = if (fix)
                fix_tokens(loose_group)
            else
                loose_group

            match( group ) 
                | Token.LooseGroup(ch) | Token.RoundGroup(ch, _, _) | Token.BracesGroup(ch, _, _, _) | Token.SquareGroup(ch, _, _) =>
                    current = ch
                    no_more_tokens = ch==null
                | t => log.Error($"expected group, instead got $t")

        // it converts keywords to ids (we don't expect any keywords here)
        // and splits operators like '*.' to '*', '.'
        fix_tokens(token : Token) : Token {
            try { 
                match(token) {
                    | Token.Keyword(name) =>
                        def convertet = Token.Identifier(name);
                        convertet.Next = fix_tokens(token.Next);
                        convertet
                    | Token.Operator("||")  
                    | Token.Operator("..")  
                    | Token.Operator("&&")
                    | Token.Operator("!")
                    | Token.Operator("->") => 
                        token.Next = fix_tokens(token.Next);
                        token
                    | Token.Operator(oper) =>
                        def split_op(op : string) {
                            def tok = Token.Operator(op.Substring(0, 1) );
                            tok.Next = match(op.Length) {
                                | 1 => fix_tokens(token.Next)
                                | _ => split_op(op.Substring(1, op.Length-1))
                            }
                            tok
                        }
                        split_op(oper)
                    | Token.RoundGroup(child, openBrace, closeBrace) =>
                        def convertet = Token.RoundGroup(fix_tokens(child), openBrace, closeBrace);
                        convertet.Next = fix_tokens(token.Next);
                        convertet
                    | Token.LooseGroup(child) =>
                        def convertet = Token.LooseGroup(fix_tokens(child));
                        convertet.Next = fix_tokens(token.Next);
                        convertet
                    | tok : Token when tok != null=>
                        tok.Next = fix_tokens(tok.Next);
                        tok
                    | _ => null
                }
            } catch {
                | _ is System.Exception => 
                    print($"this is probably a bug, token that was not expected: $token");
                null
            }
        }

        public Map['a]( f : Token -> 'a ) : list['a]
            def map_it()
                if (Empty)
                    []
                else
                    def t = Pop()
                    def lst = map_it()
                    f(t) :: lst
            map_it()

        public TokenList : list[Token]
            get
                def get_tokens(token)
                    | null => []
                    | t => t :: get_tokens(t.Next)
                get_tokens(Peek())

        public Pop() : Token
            def to_return = Peek()
            _ = Drop()
            to_return : Token

        public Drop() : bool
            if (no_more_tokens )
                false
            else
                current = current.Next
                no_more_tokens = current == null
                true

        public DropAsterisk() : bool
            match(Peek())
                | Token.Operator("*") =>
                    _ = Drop()
                    true
                | _ => false

        public Peek() : Token
            if (no_more_tokens)
                null
            else
                current

        public Empty : bool
            get
                no_more_tokens


        public DropDot() : bool
            match (Peek()) 
                | Token.Operator(".") => 
                    _ = Drop() 
                    true
                | _ => false

        public DropId(id : string) : void
            match(Pop())
                | Token.Identifier(ident) when id == ident => ()
                | t => log.Error($"expected $id, got $t instead")

        public DropOperator(op : string) : void
            match(Pop())
                | Token.Operator(oper) when oper == op => ()
                | t => log.Error($"expected $op, got $t instead")

        public override ToString() : string
            if (Empty)
                "empty"
            else
                Peek().ToString()
