#pragma indent

using Nemerle.Compiler
using Nemerle.Utility
using Nemerle.Collections
using Nemerle.Compiler.Parsetree

namespace Nemerle.Aop.Helper
  [Record] public class Joinpoint

    internal static MakePropertyGetJoinpoint(meth : MethodBuilder, name : string) : Joinpoint
        PropertyJoinpoint(meth, name, prop_get = true)

    internal static MakePropertySetJoinpoint(meth : MethodBuilder, name : string) : Joinpoint
        PropertyJoinpoint(meth, name, prop_set = true)
        
    protected meth : MethodBuilder

    internal GetMethod() : MethodBuilder
        meth

    internal virtual TargetType : TypeInfo
        get
            meth.DeclaringType

    internal virtual Name : string
        get
            meth.Name

    internal virtual ReturnType : FixedType
        get
            meth.GetHeader().ReturnType.Fix()

    internal virtual IsPropertyGet : bool
        get
            false

    internal NemerleModifiers : NemerleModifiers
        get
            meth.Modifiers.Attributes

    internal CustomAttributeTypes(env : GlobalEnv) : list[TypeInfo]
        meth.Modifiers.AttributeTypes(env)

    internal virtual IsPropertySet : bool
        get
            false

    internal virtual IsExecution : bool
        get
            true

    internal FirstParamType : FixedType
      get
        meth.GetParameters().Nth(0).ty.Fix()

    internal IsConstructor : bool
        get
            meth.MemberKind == System.Reflection.MemberTypes.Constructor

    internal virtual IsMethod : bool
        get
            !IsConstructor

    // before and after differ only in the last expr, refactor
    internal WeaveBeforeReturning( advice : Advice, var_bindings : list[VariableBinding] ) : void
        weave(advice, var_bindings, before = true)
        
    internal WeaveAfterReturning( advice : Advice, var_bindings : list[VariableBinding] ) : void
        weave(advice, var_bindings, before = false)

    internal WeaveAfterThrowing( advice : Advice, var_bindings : list[VariableBinding]) : void
        def advice_name = advice.Builder.Name
        def aspecto = advice.Builder.DeclaringType : TypeBuilder
        def (inv_declaration, parms) = args_for_advice(meth, advice, var_bindings)
        meth.Body = match(var_bindings.Find(x=> x is VariableBinding.ThrownException))
            | Some(VariableBinding.ThrownException(num_in_advice, ty)) =>
                parms[num_in_advice] = <[ex]>
                <[
                    try {$(meth.Body)}
                    catch {
                        | ex is $ty => 
                            $inv_declaration ;
                            $(aspecto.ParsedName : name).Instance.$(advice_name : dyn)(..$(NList.ToList(parms)));
                            throw ex;
                        | e => throw e;
                    }
                ]>
                
            | _ => 
                <[
                    try {$(meth.Body)}
                    catch {
                        | ex => 
                            $inv_declaration ;
                            $(aspecto.ParsedName : name).Instance.$(advice_name : dyn)(..$(NList.ToList(parms)));
                            throw ex;
                    }
                ]>

    internal WeaveAfter( advice : Advice, var_bindings : list[VariableBinding]) : void
        def advice_name = advice.Builder.Name
        def aspecto = advice.Builder.DeclaringType : TypeBuilder
        def (inv_declaration, parms) = args_for_advice(meth, advice, var_bindings)
        meth.Body = 
            <[
                try {$(meth.Body)}
                finally {
                    $inv_declaration ;
                    $(aspecto.ParsedName : name).Instance.$(advice_name : dyn)(..$(NList.ToList(parms)));
                }
            ]>

    internal WeaveAround( advice : Advice, var_bindings : list[VariableBinding] ) : void
        def advice_name = advice.Builder.Name
        def aspecto = advice.Builder.DeclaringType : TypeBuilder
        def (inv_declaration, parms) = args_for_advice(meth, advice, var_bindings)

        def meth_parms = meth.GetParameters().ToArray()
        def without_last(lst)
            | [_] | [] => []
            | x :: xs => x  :: without_last(xs)

        def proceed_fun_parms = without_last(advice.Builder.GetParameters().Map(p=> p.AsParsed())).ToArray()
        // last parameter for around is always proceed, so I don't count it here
        // names of parameters must match those in method, so I override them later with names from method
        // target, and invocation are quite ignored here
        

        if (advice.ContainsProceed)
          foreach(binding in var_bindings)
            match(binding) 
                | VariableBinding.Parameter(num, num_in_advice) =>
                    proceed_fun_parms[num_in_advice-1] = meth_parms[num-1].AsParsed()
                | VariableBinding.Target(num_in_advice) =>
                    proceed_fun_parms[num_in_advice-1].name = Splicable.Name(Name("_This"))
                | _ => () 
          parms[parms.Length-1] = <[$("proceed" : dyn)]>
          meth.Body = 
              <[
                  def proceed(..$(NList.ToList(proceed_fun_parms))) $(meth.Body);
                  $inv_declaration ;
                  $(aspecto.ParsedName : name).Instance.$(advice_name : dyn)(..$(NList.ToList(parms)));
              ]>
        else
          meth.Body = 
              <[
                  $inv_declaration ;
                  $(aspecto.ParsedName : name).Instance.$(advice_name : dyn)(..$(NList.ToList(parms)));
              ]>


    args_for_advice(meth : MethodBuilder, advice : Advice, var_bindings : list[VariableBinding]) : PExpr * array[PExpr]
        def parms = array(advice.ParametersCount)
        def meth_parms = meth.GetParameters().ToArray()
        mutable inv_declaration = <[]> //will stay empty if Invocation parameter is not present in the advice parameters
        foreach(binding in var_bindings)
            match(binding) 
                | VariableBinding.Parameter(num, num_in_advice) =>
                    parms[num_in_advice-1] = <[$(meth_parms[num-1].Name : dyn)]>
                | VariableBinding.Target(num_in_advice) =>
                    parms[num_in_advice-1] = <[this]> //target in execution is this
                | VariableBinding.ReturnValue(num_in_advice) =>
                    parms[num_in_advice] = <[__ret]>
                | VariableBinding.Invocation(num_in_advice) =>
                    def target = if (!meth.IsStatic)
                        <[this]>
                    else
                        <[null]>
                    inv_declaration = <[def $("__inv" : dyn) = Nemerle.Aop.JoinPoint($target, $(meth.Header.Name : string)) ]>
                    parms[num_in_advice] = <[$("__inv" : dyn)]>
                | _ => () 
        (inv_declaration, parms)

    weave( advice : Advice, var_bindings : list[VariableBinding], before : bool) : void
        def advice_name = advice.Builder.Name
        def aspecto = advice.Builder.DeclaringType : TypeBuilder
        def (inv_declaration, parms)=args_for_advice(meth, advice, var_bindings)
        meth.Body = if(before) 
            <[
                $inv_declaration ;
                $(aspecto.ParsedName : name).Instance.$(advice_name : dyn)(..$(NList.ToList(parms)));
                $(meth.Body);
            ]>
        else
            <[
                def __ret = $(meth.Body); 
                $inv_declaration ;
                $(aspecto.ParsedName : name).Instance.$(advice_name : dyn)(..$(NList.ToList(parms)));
                __ret
            ]>

    public override ToString() : string
        meth.ToString()
