#pragma indent
using Nemerle.Compiler
using Nemerle.IO
using Nemerle.Collections

namespace Nemerle.Aop.Helper
    
    public class Parameters

        public variant Param
            | JustType                // Single type pattern matches exactly one type
                tp : TypePattern
                public override ToString() : string
                    tp.ToString()
            | FormalParamRef
                tp : TypePattern
                num_in_advice : int

        public static Empty() : Parameters
            Parameters()

        protected parameters : list[PatternFragment[Param]];

        private this()
            parameters = []

        public this(parms : list[PatternFragment[Param]])
            parameters = parms

        public ParamsMatch(method : IMethod) : MatchResult

            def params_match(parameter_pattern, actual_params)
                def ismatch(_)
                    | (Param.JustType(tp), (parm_type, _)) => 
                        (tp.Matches(parm_type), None())
                    | (Param.FormalParamRef(tp, num_in_advice), (parm_type, i)) =>
                        (tp.Matches(parm_type), Some(VariableBinding.Parameter(i, num_in_advice))) 

                GapMatching.Match'(parameter_pattern, LazyList.FromList(actual_params), ismatch, TypePattern.PushState, TypePattern.PopState)

            match(method.GetMemType()) 
                | FixedType.Fun(from, _) =>
                    def actual_params = match(from) 
                        | FixedType.Tuple(args) => args.Map(_.FixedValue)
                        | FixedType.Void => []
                        | x is FixedType => [x]
                        | _ => throw System.Exception("Parameters.ParamsMatch")
                    
                    def pbs = params_match(parameters, actual_params)
                    MatchResult(pbs.IsSome, pbs.WithDefault(null))

        public override ToString() : string
            def cons_params(parms) {
                | [] => ""
                | param :: tail => $", $param"  +  cons_params(tail)
            }
            match(parameters) {
                | [] => ""
                | param :: tail => $"$param"  +  cons_params(tail)
            }
