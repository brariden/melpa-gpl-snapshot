// reference to a parameter should mean a type pattern with +(only in case of class) (of the type of the parameter)
// Nemerle.Collections.ICovariantList['a] is a supertype of list['a]
using Nemerle.Aop;
using Nemerle.IO;


public class A {
    public Meth1(_: list[string]): void {
        print("Meth1\n")
    }

    public Meth2(_: list[int]): void {
        print("Meth2\n")
    }

    public Meth3(_: string->string): void {
        print("Meth3\n")
    }
}

[aspect()] public class Aspect {
    after(arg: Nemerle.Collections.ICovariantList[string]) returning: execution(A.?(..):void) && args(arg) {
        print("advice: $arg\n")
    }

    after(_argf: string->string) returning: execution(A.?(..):void) && args(_argf) {
        print("advice2\n")
    }
}

public class Main {
    public static Main(): void {
        A().Meth1([]);
        A().Meth2([]);
        A().Meth3(_=>"asd");
    }
}

/*
BEGIN-OUTPUT
Meth1
advice: []
Meth2
Meth3
advice2
END-OUTPUT
*/
