using Nemerle.Aop;
using Nemerle.IO;

public class C {

    public Method1( _: int*int -> int): void {
        print("M1\n");
    }


    public Method2( _: float*(int*int) -> int): void {
        print("M2\n");
    }
    public Method2( _: float*int*int -> int): void {
        print("M2.overloaded\n");
    }

}

[aspect()] public class Aspecto {

    after() returning: execution( C.?( int * ? -> ? ): ?) {
        print("advice\n");
    }

    after() returning: execution( C.?( ?*?*? -> ? ): ?) {
        print("advice2\n");
    }
}

public class Main {
    public static Main(): void {
        C().Method1((x,_)=> x);
        C().Method2(fun (_,(y,_)) { y});
        C().Method2((_,y,_) => y);
    }
}

/*
BEGIN-OUTPUT
M1
advice
M2
M2.overloaded
advice2
END-OUTPUT
*/
