using NUnit.Framework;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Aop.DevMacros;
using Nemerle.Aop.Helper;
using Nemerle.Aop.Helper.ParserCombinators;

[TestFixture]
public class TestParsing {

    [Test]
    public token_equal() : void {
        token_equal(Token.Identifier("ident"), Token.Identifier("ident"))
            |> Assert.IsTrue;
        token_equal(Token.Identifier("ident1"), Token.Identifier("ident2"))
            |> Assert.IsFalse;
    }
    
    [Test]
    public some() : void {
        def tokens = Helper.TokenList(["*","id2"]);
        def parse = some(operator("*"));
        parse(tokens) |> Assert.IsNotNull
    }

    [Test]
    public alternative() : void {
        def tokens = Helper.TokenList(["*","id2"]);
        def parse = some(operator("*") <*> parse_id);
        Assert.AreEqual(parse(tokens)[1], "id2")
    }


    [Test]
    public repete() : void {
        def tokens = Helper.TokenList(["id1","id2"]);
        def parse = some(repetition(parse_id));
        Assert.AreEqual(parse(tokens), ["id1","id2"]);
    }

    [Test]
    public operator_parsing() : void {
        def tokens = Helper.TokenList(["*"]);
        def parse = some(operator("*"));
        Assert.AreEqual(parse(tokens), "*");
    }

    [Test]
    public option() : void {
        def tokens = Helper.TokenList(["*"]);
        def parse = some(optional(operator("*")));
        match(parse(tokens)) {
            | None => Assert.Fail();
            | _ => ()
        }
    }

}