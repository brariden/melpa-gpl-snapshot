using Nemerle.Aop.Helper;
using NUnit.Framework;
using Nemerle.Compiler;
using System.Collections;

[TestFixture]
public class TestIdPattern {

    [Test]
    public literal(): void {
        def lexer = Helper.TokenList(["AnId","."]);
        def (id,rest) = ParserCombinators.get_result(Parse.id_pattern(lexer));

        Assert.AreEqual(Token.Operator(".").ToString(), rest.Tokens.Head.ToString());
        Assert.IsTrue(id.Matches("AnId"));
        Assert.IsFalse(id.Matches("AnotherId"));
        Assert.IsFalse(id.Matches("AnId_and_sth_more"))
    }

    [Test]
    public asterisk(): void {
        def lexer = Helper.TokenList(["?","."]);
        def (id,rest) = ParserCombinators.get_result(Parse.id_pattern(lexer));

        Assert.AreEqual(Token.Operator(".").ToString(), rest.Tokens.Head.ToString());
        Assert.IsTrue(id.Matches("anything"));
        Assert.IsTrue(id.Matches("and_yet_more_sth_more"));
    }

    [Test]
    public not_crossing_delimiter(): void {
        def lexer = Helper.TokenList(["IdPatt", ".", "beyond_delimiter"]);
        def (_,rest) = ParserCombinators.get_result(Parse.id_pattern(lexer));

        Assert.AreEqual(Token.Operator(".").ToString(), rest.Tokens.Head.ToString());
    }
}
