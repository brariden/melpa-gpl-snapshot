using NUnit.Framework;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Aop.Helper;
using Nemerle.Aop.Helper.GapMatching;


[TestFixture]
public class TestGapMatching {

    lazy_list[T](elems : list[T]) : LazyList[T] {
        LazyList.FromList(elems)
    }

    [Test]
    public empty_gapped_pattern_matches_to_empty_list() : void {
        Match([], LazyList.Nil(), _ == _)
            |> Assert.IsTrue
    }

    [Test]
    public empty_gapped_pattern_does_not_match_against_non_empty_list() : void {
        Match([], LazyList.Cons("sth", lazy(LazyList.Nil())), _ == _)
            |> Assert.IsFalse
    }

    [Test]
    public gap_matches_against_any_number_of_elements_in_a_list() : void {
        Match([PatternFragment.Gap()], LazyList.Nil(), _ == _)
            |> Assert.IsTrue;
        Match([PatternFragment.Gap()], lazy_list([1,2,3]), _ == _)
            |> Assert.IsTrue;
        Match([PatternFragment.Fragment(2), PatternFragment.Gap()], lazy_list([2,1]), _ == _)
            |> Assert.IsTrue;
        Match([PatternFragment.Gap(), PatternFragment.Fragment(2)], lazy_list([2,1]), _ == _)
            |> Assert.IsFalse;
        Match([PatternFragment.Gap(), PatternFragment.Fragment(2)], lazy_list([2,2]), _ == _)
            |> Assert.IsTrue;
        Match([PatternFragment.Gap(), PatternFragment.Fragment(2)], lazy_list([4,3,2]), _ == _)
            |> Assert.IsTrue;
        Match([PatternFragment.Gap(), PatternFragment.Fragment(2)], lazy_list([2]), _ == _)
            |> Assert.IsTrue;
    }

    [Test]
    public single_fragment_matches_against_single_element() : void {
        Match([PatternFragment.Fragment(1)], lazy_list([1]), _ == _)
            |> Assert.IsTrue;
        Match([PatternFragment.Fragment(2)], lazy_list([1]), _ == _)
            |> Assert.IsFalse;
        Match([PatternFragment.Fragment(2)], lazy_list([2,1]), _ == _)
            |> Assert.IsFalse;
    }

    [Test]
    public matching_that_returns_result_or_no_match() : void {
        def g = (a,(b,i)) => (a == b, Some(i));
        def saveState() { 0 }
        def restoreState(_) {}
        def result = Match'([PatternFragment.Fragment(123)], lazy_list([43,44,45]), g, saveState, restoreState);
        result.IsNone |> Assert.IsTrue
    }

    [Test]
    public matching_that_returns_result_or_match() : void {
        def g = (a,(b,i)) => (a == b, Some(i));
        def saveState() { 0 }
        def restoreState(_) {}
        def result = Match'([PatternFragment.Fragment(43),PatternFragment.Gap()],lazy_list([43,44,45]),g, saveState, restoreState);
        (result.UnSome() == [1])
            |> Assert.IsTrue
    }

    [Test]
    public matching_that_returns_result_or_two_matched_fragments() : void {
        def g = (a,(b,i)) => (a == b, Some(i));
        def saveState() { 0 }
        def restoreState(_) {}
        def result = Match'(
                    [PatternFragment.Gap(),
                     PatternFragment.Fragment(44),
                     PatternFragment.Fragment(45)],
                    lazy_list([43,44,45]),
                    g,
                    saveState,
                    restoreState);
        (result.UnSome() == [2,3])
            |> Assert.IsTrue
    }
}