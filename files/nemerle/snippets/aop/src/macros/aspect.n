using Nemerle.Compiler;
using Nemerle.Aop.Helper;
using Nemerle.IO;

namespace Nemerle.Aop {

    internal class Aspects {
        // says if the pass for weaving has been completed already
        // this is to fight problems during testing with Nemerle.Tester.exe
        static internal mutable AlreadyWoven = false;
        // ManagerClass.OnInit() event notifies about reinitialization of 
        // the compiler. It allows to clean up auxiliary (static) data.
        static internal mutable AlreadyAddedOnInitHandler = false;
    }
  
  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeInheritance, 
                       Nemerle.MacroTargets.Class)]
  macro aspect( type_builder : TypeBuilder) syntax("asp") {
        
        // There could be some advices left from the previous run of the compiler.
        // It can happen during testing with Nemerle.Tester.exe.
        // This removes all advices from previous run of the compiler.
        when(!Aspects.AlreadyAddedOnInitHandler)
            ManagerClass.OnInit  += ManagerClass.InitDelegate(fun(){Advices.Instance.RemoveAll();Aspects.AlreadyWoven = false;});
        

        def field_for_instance = <[ decl : static mutable field_for_instance : $(type_builder.ParsedName : name); ]>;
        type_builder.Define(field_for_instance);

        def lazy_accessor = <[ 
            decl : 
            public static $("Instance" : dyn) : $( type_builder.ParsedName : name) {
                get {
                    when (field_for_instance == null)
                        field_for_instance = $(type_builder.ParsedName : name)();
                    field_for_instance
                }
            }
        ]>;
        type_builder.Define(lazy_accessor);
  }

    /// This invokes weaving.
  [Nemerle.MacroUsage(Nemerle.MacroPhase.WithTypedMembers, 
                       Nemerle.MacroTargets.Class)]
  macro aspect( type_builder : TypeBuilder) {

        when (!Aspects.AlreadyWoven) {
            def types_manager = type_builder.TyManager;

            Weaver.Weave(types_manager);

            Advices.Instance.WarnIfAdviceNotWeaved();
            Aspects.AlreadyWoven = true;
        }
    }
}
