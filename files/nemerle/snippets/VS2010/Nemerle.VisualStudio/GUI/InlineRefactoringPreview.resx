<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="rtbFoundUsages.Text" xml:space="preserve">
    <value>using System;
using System.Console;
using Nemerle.Utility;
using ConsoleApplication17;

module Program
{
  Main() : void
  {
    def foo = Class1.CreateIndex(1, array["one", "two", "three"]);
    WriteLine(foo);
    
    _ = ReadKey();
  }

using System;
using System.Console;
using Nemerle.Utility;
using ConsoleApplication17;

module Program
{
  Main() : void
  {
    def foo = Class1.CreateIndex(1, array["one", "two", "three"]);
    WriteLine(foo);
    
    _ = ReadKey();
  }
}
}</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AH/8AAA/+AAAH/AAAA/gAAAHwAAAA8AAAAOAAAABgAAAAYAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIAAAAGAAAABgAAAAcAAAAPAAAAD4AAAB/AAAA/4AAAf/AAAP/4AAH//gAH///AP/ygA
        AAAgAAAAQAAAAAEACAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAD/Hw8A/xkZAP8cHAD/Hx8A/yQO
        AP8iEAH/IhIB/yQQAf8kEgH/JhMA/yIUAP8mFAP/JxQE/ygUAP8uFwD/KBYF/yoWBv8rGAf/LRgF/y0Z
        CP8sGgn/LxsJ/zAbCP8xHAr/Mh8O/zMgDv80IA7/NyIP/zoiDP88JA7/NCEQ/zckFP85JBH/PygT/z4o
        FP8/LBr/QCYO/0UpEP9AKRT/RiwV/0UuGf9FLxz/RjAb/0UwHf9LMRr/TTIZ/0szHf9ePBz/RzMh/0gz
        IP9NNiL/Sjcm/086Jv9QOCL/VToi/1I6Jf9ROyj/Uj0q/1M+K/9UPSj/VD4p/1g/Kf9dQSf/VkEu/1xB
        KP9eQSj/WUIt/19FLv9cRjL/W0k4/2NCJP9gQyn/YUYs/2VILf9zTSr/dE0p/3dRL/9nSzD/aUwx/2tN
        Mf9oTzf/Ykw4/2dOOf9mUT3/bVI5/3dSMf99VjP/clQ5/3ZWOP9zVz3/e1g4/3NaQv9wWUT/dl1F/3de
        Rv95XEH/f2FF/3dhTv96YEn/fWFI/3tiTP98ZE7/gFk2/55sPv+HY0L/hWVH/4toR/+IaEv/jWpK/4lr
        T/+TbEj/iWxQ/41uUf+PcVb/kXBS/5V0Vv+cdVH/nXhV/595Vf+Xdlj/knZd/5h5W/+eelj/mntf/6Zz
        RP+ndEX/onZO/6l3Sf+peEr/qnpM/6x8T/+nelD/onpV/65+Uf+EcmH/j3di/5N7Zf+WfWf/ln5n/5h+
        Zf+Yf2j/r4BU/6aBXv+vg1n/sIJW/7KFWv+0hlz/tYhe/5+Fbf+chnP/n4l1/6CAYf+ng2H/pINk/6eF
        Zf+oh2f/q4dm/62IZP+2imH/t4xi/7aNZv+5jmb/sIxq/7ePaf+6j2j/u5Bn/7qQaP+8kWr/vJNs/72U
        bf+ii3X/pY97/6COfv+ukXX/p5F9/6yReP+ulHz/t5Nw/7aUc/+2lnf/vpZw/7iWd/+5mXr/uZl8/72c
        ff/Al3H/wJhy/8Gadf/DnHf/wZ16/8Kdef/Ennr/xZ98/8Wgff+jkoL/qZWC/7ebgP/DoYH/xaKB/8ij
        gf/IpIL/yaaF/8Omiv/Ep4v/yaeI/8ioi//LqIj/zKmJ/8mqjv/Mq4z/zayN/86ukP/Qr5H/z7CS/9Cw
        kv/RsZT/0bKU/9Kzlv/StJf/0LOY/9O1mP/Utpr/1Lec/9S4nf/WuZ7/1rqf/8+3oP/WuqD/17yi/9W9
        p//YvKP/2L2k/9i+pf/av6f/2sCo/9vCqv/cw6z/3MWu/9jEsf/exrH/38iy/9/JtP/gyrX/4cy3/+HM
        uP/izbn/4s67/+DPvv/jz7z/5NC+/+XSwP/o2Mr/69zO/wAAAP8AAAAA/////////////wkGCQgHCQkH
        CAYIAf///////////////////////w4GCBI9Xm5zc2xYNhIICAr//////////////////wIGBzGW5trT
        ysLJwsfKx3EpBwYC//////////////8OBh+N6fPt6ejb0NDQys/X1MpxGAYO////////////Cwc5y9nr
        9fTx7ung3trT0tTarty2LwcL/////////w4HQ8fT3ev69vf78Ovp5eHdxYxDY1WeLQcO//////8CCTPN
        yt7f7PX7/P3z8Ong5LFiJFM+RFmFKAkC/////wkaudPY4dnl8N7p7vDo6eNAEQkJEBszSW9/Fwn///8O
        B3nKysrKv9TAoqLK1c5cCQkJCQkJI7e8k5JXBwv//wYqz9TQvMK8taKTlMfSMwkJCQkJCQqa1LWGkZEe
        Bv8GCHLQ4b+SlKm1opOSoSkJCQkJCQkJYcrKp4aAgUwICggSx9nXp4aUqLufoJ8/CQkJCQkJCUXBu8mn
        hn59aA4GBjzo3s/Hj1uQop+nexEJCQkJCQkVeKKUpZGSgpKBJgcIZefTmysJCSeFqMA4CQkJCQkJEK67
        lJKSjpKfooYwBgmK3dRECQkJCQ1OeiEJCQkJCQld4rWfk5GGkcCSgksICa/s1msJCQkJCQkJCQkJCQkJ
        ELLZwp+Uk5Kq2JN+VwkJxPXQn3d1bWBDGQkJCQkJCQkUv8nZvKeou8LgooNnCQet4M+iqKfC1NEsCQkJ
        CQkJCQk1cKO6qLzX4NPKolYICIf7yaeqtdTvUwkJCQkJCQkJCQkJCWCquvDz7Ne8RwYGRvzkqLW1yYgJ
        CQkJCQkJWpVSVGCdwLzC7vXt2KImBwgV+OSqqKrAEQkJCQkJCQ245dnp0MLBwtfU597ThAwGBgjD4qei
        qnMJCQkJCQkJVcLT5OHpydLU0Mng07xNBgr/BjTgqKKqcQkJCQkJCRikvMHZ3/Xy99fd1NfBkx0J//8K
        B5e8taccCQkJCQkJQqrAwtfg9vv539jb1LVNBwX///8GIMzAoUkJCQkJCQlpqL3CyOTx6OvXyt3KfxMH
        /////w8GO8e8UCcWDBksIZ+mvMrT8ODU0MLQ56ElCQT//////woHRbWhSFlKUbB8x9PQ5NnY0NTX3ufG
        LggF/////////wsHOph2N0FJtN7g4dfKyc/g5NrSsykICP///////////woGG2SZT3Scz8/a2t7l9fnh
        yWoWCQX//////////////w8GBzJ5vt/q8Pf18PLs0W4iBwcD//////////////////8KCAgSPWaLrKuJ
        XzYQCAkF////////////////////////AQgGCAcJCQcICQYK///////////////wD///gAH//gAAf/wA
        AD/4AAAf8AAAD+AAAAfAAAADwAAAA4AAAAGAAAABgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgAAAAYAAAAGAAAABwAAAA8AAAAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf//8A//KAAAABAA
        AAAgAAAAAQAIAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAP8ZGQD/HBwA/yQPAP8lDwD/JRAA/yQS
        Av8lEgL/JhMD/yMUAP8lFAP/JhQD/yYVBf8oFQP/KRUD/ygWBf8pFwb/KhcG/yoYBv8qGAj/LBgI/y4a
        CP8wGwr/Mh0K/zAdDP8yHg3/NCIO/zUjD/8+Iw7/NyMQ/zgkEv8+JRD/QCwb/0guGf9NMxf/RDAe/0cx
        Hf9PNRn/STIe/0ozH/9LNB//TTUf/0k0I/9MNST/Tzws/1A3If9SOiT/Wj8n/1dAJ/9XQCz/WEEo/1lB
        K/9bQiv/XUUv/2NEJ/9hRi3/Ykgu/2RKM/9hSjn/YEw7/2xROP9yUzb/cFU8/2RRQv9yWEH/d2FM/3lj
        T/99Z1T/mWk9/4FgQv+IYkD/h2lN/49tTv+Tbkv/kW9O/4FqVf+Nb1P/mHRS/5V1WP+aeFj/q3pM/6B4
        U/+uf1L/lHlh/5t+Y/+thF3/sYNY/7KDWP+yhFn/s4Vb/7aJX/+ggGL/q4Rh/6aIbP+oiWz/qIpt/7OJ
        Yv+2iWD/t4ti/7CLZ/+1j2r/tJBu/7qQaf+7kGn/vJFq/72Ta/+9k2z/vZRt/76Vbv+qjHD/rI5z/7WU
        dP+0lnr/vJt9/7ycfv/AmHP/wZp1/8Kbd//EnXn/xJ56/8KefP/FoHz/vJ+D/8eigP/JpYT/yaaF/8qm
        hf/DqI7/yamK/8upif/MqYn/zauL/8mpjf/NrIz/z6+R/9Cvkf/LtJ//0LCS/9CxlP/RsZT/0bKU/9Kz
        lv/TtJj/07aa/9S2mv/Ut5z/1bec/9a5nv/MtqD/1rqh/9e6oP/XvKP/2b+n/9q/p//bwar/28Os/93F
        rv/ex7H/4cu3/+LNuv/izrv/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAAD/////AwsnMjAhCwn///////8BE0GI
        kYJ+fXI+EQH///8BGm2Wn56Zk4x6U0cWAf//El+MlZ2gnJVLICQ3Rg7/A0CCe3dnc24eBgYoeFY2BAtx
        fVlsYlEUBgYZZXVQRAcqklsvSWktBgYHTGFZWFYcO44pBgcuEAYGNYFaV3RSIj+PYFxUGAYGBjNvbHaJ
        ZiUsm2p5QwYGBjEjNGOKnXsfDJRoZAgGBh2Ak4N+hZBcBwlCa0gGBgZFd46fmox8NgX/FF5KFQ8ZVXmO
        loeKTQ3//wEbTz04cImGhY2LXRcC////ARI5ToSXmJx/PA4C////////CQsrOzomCgX/////+B8AAOAH
        AADAAwAAgAEAAIABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAQAAgAEAAMADAADgBwAA+B8AAA==
</value>
  </data>
</root>