using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.ComponentModel.Design.Serialization;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Reflection;

using Nemerle.Assertions;
using NC = Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Completion2;
using Nemerle.Utility;

namespace Nemerle.Compiler.Utils
{
  // now CodeDomParser only parses files from Project.CompileUnits
  // it is not thread-safe at the moment!
  public class FormCodeDomParser : NemerleCodeParserBase
  {
    mutable _project      : Project;
            _filesIndices : HashSet[int] = HashSet();
   
    public CreateCodeCompileUnit(project : Project, mainFileIndex : int) : CodeCompileUnit
    {
      // Initialization
      _project = project;
      base._manager = _project.EngineEx;

      // Processing
      def unit = CodeCompileUnit();

      def globalImports = List();

      foreach(decl in project.CompileUnits.GetTopNamespace(mainFileIndex).Decls)
      {
        | Decl.Namespace as nsDecl => _ = unit.Namespaces.Add(ProcessNamespace(nsDecl));
        | Decl.Using as usDecl     => globalImports.Add(usDecl.Name.ToString(".")); //unit.Imports.Add(CodeNamespaceImport());
        | d with(bodyLoc = project.CompileUnits.GetTopNamespace(mainFileIndex).BodyLocation) =>
          //TODO: VladD2: Какая-то чушь...
          throw CodeDomSerializerException($"Assumed root Declaration of CompileUnit is Decl.Namespace, got $d",
                                            CodeLinePragma(bodyLoc.File,bodyLoc.Line)); 
      }

      foreach(import in globalImports)
        _ = unit.ReferencedAssemblies.Add(import);

      unit
    }
    
    public FilesIndices : array[int]
    {
      get
      {
        if (_filesIndices == null) array(0)
        else _filesIndices.ToArray()
      }
    }

    protected override ProcessClassPart(classDecl : CodeTypeDeclaration, part : TopDeclaration.Class) : void
    {
      base.ProcessClassPart(classDecl, part);
      
      def fileIndex = part.Location.FileIndex;
      
      when(fileIndex > 0)
        _ = _filesIndices.Add(fileIndex);
    }

    private ProcessNamespace(decl: Decl.Namespace) : CodeNamespace
    {
      def res = CodeNamespace(decl.Name.ToString("."));

      foreach(decl in decl.Decls)
        match(decl)
        {
          | Decl.Type(ast)       => _ = res.Types.Add(ProcessTypeDeclaration(ast));
          | Decl.Using as usDecl => res.Imports.Add(CodeNamespaceImport(usDecl.Name.ToString(".")));
          | Decl.Namespace(BodyLocation = bodyLoc) => 
            //TODO: VladD2: Какая-то чушь... Счего бы это нельзя иметь вложенных пространств имен?
            throw CodeDomSerializerException("Namespace declarations cannot contain inner namespace declarations",
                                             CodeLinePragma(bodyLoc.File,bodyLoc.Line)); 

          | _ => () // Ignored
        }

      res
    }
  }
}
