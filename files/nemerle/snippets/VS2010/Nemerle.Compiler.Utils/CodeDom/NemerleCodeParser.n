using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.ComponentModel.Design.Serialization;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;

using Nemerle.Assertions;
using Nemerle.Collections; 
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Completion2;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System.CodeDom.CodeBinaryOperatorType;

using SCG = System.Collections.Generic;

namespace Nemerle.Compiler.Utils
{
  // now CodeDomParser only parses files from Project.CompileUnits
  // it is not thread-safe at the moment!

  //TODO: VladD2: Убрать наследование от ManagerClass. Вместо этого использовать проект к которому подлючен разбираемый файл.

  /// <summary>
  /// Provides an implementation of the <see cref="T:System.CodeDom.Compiler.ICodeParser"/> interface.
  /// </summary>
  public class NemerleCodeParser : NemerleCodeParserBase, ICodeParser
  {
    class Compiler : ManagerClass
    {
      public this ()
      {
        base (CompilationOptions());
        Parser = DispatchingFileParser(this, IntegrationDefaultParser(this));
        InitCompiler ();
        LoadExternalLibraries ();
      }
    }
    
    /// <summary>
    /// Initializes a new instance of the <see cref="T:Nemerle.Compiler.NemerleCodeParser"/> class.
    /// </summary>
    public this ()
    {
      _manager = Compiler();
    }

    // TODO: do we need to make it type-safe
    protected mutable _currentMethod : MethodBuilder;
    
    protected mutable _compilerInit : bool;

    /// <summary>
    /// Compiles the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit"/>
    ///.</summary>
    /// <param name="codeStream">A <see cref="T:System.IO.TextReader"/>
    /// that is used to read the code to be parsed.</param>
    /// <returns>
    /// A <see cref="T:System.CodeDom.CodeCompileUnit"/> containing the code
    /// model produced from parsing the code.
    /// </returns>
    public Parse(codeStream : TextReader) : CodeCompileUnit
    {
      def oldMan   = ManagerClass.Instance;
      def parseResult = 
        try
        {
          def source = StringSource(0, codeStream.ReadToEnd());
          _manager.Parser.Parse(source)
        }
        finally { ManagerClass.Instance = oldMan; };

      def unit = CodeCompileUnit();

      mutable lastNamespace;
      mutable codeDomNamespace;

      def switchToNamespace(decl : TopDeclaration)
      {
        unless (decl.PName.context.CurrentNamespace.Equals(lastNamespace)) //FixMe: не надо исползовать PName он может быть пуст!
        {
          lastNamespace = decl.PName.context.CurrentNamespace;
          codeDomNamespace = ToCodeNamespace(decl.PName.context.CurrentNamespace);
          _ = unit.Namespaces.Add(codeDomNamespace);
        }
      }

      foreach (decl in parseResult.TopDeclarations)
      {
        def codeMember = 
          match(decl)
          {
          | TopDeclaration.Class as cls =>

            switchToNamespace(cls);
            ToCodeTypeDeclaration(cls);

          | TopDeclaration.Interface as ifs =>
          
            switchToNamespace(ifs);
            ToCodeTypeDeclaration(ifs);
          
          | TopDeclaration.Enum as enm =>
        
            switchToNamespace(enm);
            ToCodeTypeDeclaration(enm);
          
          | TopDeclaration.Variant as vrt =>
        
            switchToNamespace(vrt);
            ToCodeTypeDeclaration(vrt);
        
          | TopDeclaration.VariantOption as vrto =>
        
            switchToNamespace(vrto);
            ToCodeTypeDeclaration(vrto);
          
          | TopDeclaration.Delegate as del =>
          
            //there is no need to switch to namespace 
            switchToNamespace(del);       
            ToCodeTypeDelegate(del);
          
          | _ =>
            throw NotSupportedException($"$decl is not supported");
          }
        
        codeMember.UserData["Member"] = decl;
        _ = codeDomNamespace.Types.Add(codeMember);
      }

      unit;
    }
  }

  [Record]
  internal sealed class IntegrationDefaultParser : IParser
  {
    manager : ManagerClass;

    public Parse(source : ISource) : ParseResult
    {
      def lexer = LexerString(manager, source.GetText(), Location(source.FileIndex, 1, 1));
      when(manager.Options.IndentationSyntax)
        lexer.SwitchToIndentationMode();
      DefaultParseResult(MainParser.Parse(lexer), lexer)
    }
  }
}
