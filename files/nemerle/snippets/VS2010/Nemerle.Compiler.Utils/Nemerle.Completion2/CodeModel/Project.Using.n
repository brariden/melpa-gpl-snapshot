using System;
using System.Diagnostics;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;
using SCG = System.Collections.Generic;

using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Utils;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    static Truncate(
      name      : list[string],
      locs      : list[Location], 
      fileIndex : int,
      line      : int,
      col       : int) : list[string] * list[Location]
    {
      match (locs)
      {
        | nameLoc :: dotLoc :: tail =>
          if (nameLoc.Contains(fileIndex, line, col))
            ([name.Head], [nameLoc])
          else if (dotLoc.Contains(fileIndex, line, col))
            ([name.Head], [nameLoc, dotLoc])
          else
          {
            def (name2, locs2) = Truncate(name.ChopFirstN(1), tail, fileIndex, line, col);
            (name.Head :: name2, nameLoc :: dotLoc :: locs2)
          }
        | nameLoc :: [] => ([name.Head], [nameLoc])
        | [] => ([], [])
      }
    }

    //static OpenNs(env : GlobalEnv, name : list[string], completeLastName : bool) : NamespaceTree.Node
    //{
    //  def isSomething(ns) 
    //  {
    //    !(ns.TryPath(name) is NamespaceTree.TypeInfoCache.No)
    //  }
    //  def nss = env.NameTree.NamespaceTree :: env.OpenNamespaces;
    //  def openedNss = nss.Filter(isSomething);
    //}

    static OpenNs(name : list[string], ns : NamespaceTree.Node, completeLastName : bool) : NamespaceTree.Node
    {
      if (ns.Children == null)
        ns
      else match (name)
      {
        | _ :: [] when completeLastName => ns // The end element of name
        | head :: tail => 
          match (ns.Children.Get(head))
          {
            | Some(subNs) => OpenNs(tail, subNs, completeLastName)
            | None() => ns
          }
        | [] => ns
      }
    }

    /// Returns array which contains namespace elements. If lastName is not null,
    /// filter content by prefix is contained in lastName.
    static GetCompletionElems(
      resalt   : SCG.List[CompletionElem],
      ns       : NamespaceTree.Node,
      lastName : string,
      isAlias  : bool
      ) : void
    {
      def fitForAliace(typeInfo : NamespaceTree.TypeInfoCache)
      {
        | Cached                  => true
        | CachedAmbiguous         => true
        | NotLoaded(externalType) => !externalType.SystemType.IsNotPublic
        | NotLoadedList           => true
        | NamespaceReference      => true
        | No | MacroCall          => false
      }

      def fitForNsOpen(typeInfo : NamespaceTree.TypeInfoCache)
      {
        // interface & delegate can't contains static member (it can't be open)
        | Cached(ty) => !(ty.IsInterface || ty.IsDelegate)

        | CachedAmbiguous(typeInfos) => typeInfos.Exists(ty : TypeInfo => !(ty.IsInterface || ty.IsDelegate))
        | NotLoaded(externalType) => // TypeInfo of external type not yet loaded
          def sType = externalType.SystemType;
          // interface & delegate can't contains static member (it can't be open)
          !sType.IsNotPublic && !(sType.IsSubclassOf(Const.DelegateType) || sType.IsInterface)

        | NotLoadedList(_externalTypes) => true
        | NamespaceReference            => true
        | No | MacroCall                => false
      }

      def fitForCompletion = 
        if (lastName == null)
          if (isAlias) (_, typeInfo) => fitForAliace(typeInfo) else (_, typeInfo) => fitForNsOpen(typeInfo)
        else
        {
          def f(name, typeInfo, fitFor)
          {
            Completion.MatchName(name, lastName) && fitFor(typeInfo);
          }
          if (isAlias) f(_, _, fitForNsOpen) else f(_, _, fitForNsOpen)
        };

      foreach ((name, node) when fitForCompletion(name, node.Value) in ns.Children.KeyValuePairs)
        resalt.Add(CompletionElem(node.Value.GetGlyphIndex() :> int, 
          name, "", array[Elem.Node(name, node)]));
    }

    private Contains(locations : list[Location], fileIndex : int, line : int, col : int) : bool
    {
      match (locations)
      {
        | []            => false
        | first :: []   => first.Contains(fileIndex, line, col)
        | first :: tail => (first + tail.Last).Contains(fileIndex, line, col)
      }
    }

    internal GetUsingQuickTip(
      usingDecl : Decl.Using,
      fileIndex : int,
      line      : int,
      col       : int) : QuickTipInfo
    {
      def (node, locs) = 
        if (Contains(usingDecl.NameLocations, fileIndex, line, col))
        {
          def (names, locs) = Truncate(usingDecl.Name, usingDecl.NameLocations, fileIndex, line, col);

          (OpenNs(names /*usingDecl.Name*/, usingDecl.BeforeEnv.CurrentNamespace, false),
            $[ l | l in locs, l.Line > line || l.Contains(line, col)]);
        }
        else if (usingDecl.AliasLocation.Contains(fileIndex, line, col))
        {
          (OpenNs(usingDecl.Name, usingDecl.BeforeEnv.CurrentNamespace, false),
            [usingDecl.AliasLocation]);
        }
        else
          (null, null);

        def prefix = 
          if (node == null)
            null
        else
          match (node.Value)
          {
            | NamespaceReference  =>   "namespace"
            | Cached(ti)          =>
              if      (ti.IsInterface) "interface"
              else if (ti.IsDelegate)  "delegate"
              else                     "class"
            | CachedAmbiguous     =>   "ambiguous"
            | NotLoaded(ti)       =>
              def st = ti.SystemType;
              if (st.IsInterface)      "interface"
              else                     "class"
            | _                   =>   null
          }

        if (prefix != null)
        {
          Debug.WriteLine("*** Using QuickTip found.");
          QuickTipInfo(prefix, node.FullName, locs)
        }
        else
        {
          Debug.WriteLine("*** Using QuickTip almost found.");
          null
        }
    }

    internal GetUsingGoto(
      usingDecl : Decl.Using,
      fileIndex : int,
      line      : int,
      col       : int) : list [GotoInfo]
    {
      def node =
        if (Contains(usingDecl.NameLocations, fileIndex, line, col))
        {
          def (names, _) = Truncate(usingDecl.Name, usingDecl.NameLocations, fileIndex, line, col);

          OpenNs(names /*usingDecl.Name*/, usingDecl.BeforeEnv.CurrentNamespace, false);
        }
        else if (usingDecl.AliasLocation.Contains(fileIndex, line, col))
        {
          OpenNs(usingDecl.Name, usingDecl.BeforeEnv.CurrentNamespace, false);
        }
        else
          null;

      if (node != null)
        match (node.Value)
        {
          | Cached(ty)
          | NotLoaded(ty)       =>
            match(ty)
            {
            | tb is TypeBuilder => tb.AstParts.Map(p => GotoInfo(p.name.Location));
            | ti is TypeInfo    => [GotoInfo(ti)];
            | _                 => []
            }
          | _                   => []
        }
      else
        []
    }
  } // end class Project
} // end namespace
