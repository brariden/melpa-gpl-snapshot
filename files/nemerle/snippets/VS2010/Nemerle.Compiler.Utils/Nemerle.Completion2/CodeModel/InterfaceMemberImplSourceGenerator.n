using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;
using Nemerle.Assertions;
using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Text;
using SR = System.Reflection;

namespace Nemerle.Completion2
{
  public class InterfaceMemberImplSourceGenerator : SourceGenerator
  {
    _explicit       : bool;
    _accessMods     : string;
    _implName       : string;
    _ty             : FixedType.Class;
    _generateXmlDoc : bool;
  
    public this(fileIndex : int, writer : TextWriter, ty : FixedType.Class, explicit : bool, accessMods : string, implName : string, generateXmlDoc : bool)
    {
      base(fileIndex, writer, null);
      
      assert(!explicit || implName != null);
      
      _explicit       = explicit;
      _accessMods     = accessMods;
      _implName       = implName;
      _ty             = ty;
      _generateXmlDoc = generateXmlDoc;
    }
    
    public override GetSignature([NotNull] value : IMethod) : list[TypeVar] * TypeVar
    {
      def res = 
        match (_ty.TypeOfMember(value).Hint)
        {
          | Some(FixedType.Fun(FixedType.Void, to))        => ([], to)
          | Some(FixedType.Fun(FixedType.Tuple(from), to)) => (from, to)
          | Some(FixedType.Fun(from, to))              => ([from], to)
          | _                                      => assert(false);
        };
        
      res
    }

    public override GetPropertyType([NotNull] value : IProperty) : TypeVar
    {
        match (_ty.TypeOfMember(value).Hint)
        {
          | Some(ty) => ty
          | _        => assert(false);
        }
    }

    public override WriteName(value : IMember) : void
    {
      if (_explicit)
        Write(_implName);
      else
        base.WriteName(value);
    }

    public override WriteAttributes(_member : IMember) : void
    {
      if (_explicit || (_accessMods != null && !_member.DeclaringType.IsInterface))
        when (_accessMods != null)
          Write(_accessMods + " ");
      else
        Write("public ");
    }

    WriteNoImplBlock([NotNull] value : IMethod) : void
    {
        def parms = value.GetParameters();
        if (parms.IsEmpty)
          WriteLine("{ throw System.NotImplementedException() }");
        else
        {
          BeginBlock();
            def init = value.GetParameters().Map(p => $"_ = $(p.Name)");
            WriteLine($<#..$(init; "; ");#>);
            WriteLine("throw System.NotImplementedException()");
          EndBlock();
        }
        
    }

    WriteImplements(member : IMember) : void
    {
      when(_explicit)
      {
        WriteLine();
        Write($" implements $_ty.$(member.Name)");
      }
    }

    public override WriteMethodBody([NotNull] value : IMethod) : void
    {
      WriteImplements(value);
      WriteNoImplBlock(value);
    }

    public override WritePropertyBoby(value : IProperty) : void
    {
      WriteImplements(value);

      def getMethod = value.GetGetter();
      def setMethod = value.GetSetter();

      BeginBlock();
      
      unless (getMethod == null)
        WritePropertyGetter(value, getMethod);
      unless (setMethod == null)
        WritePropertySetter(value, setMethod);
        
      EndBlock();
    }

    public override WritePropertyGetter(_property : IProperty, getMethod : IMethod) : void
    {
      Write("get");
      WriteNoImplBlock(getMethod);
    }

    public override WritePropertySetter(_property : IProperty, setMethod : IMethod) : void
    {
      Write("set");
      WriteNoImplBlock(setMethod);
    }
    
    public override WriteDocumentation(ns : Nemerle.Compiler.NamespaceTree.Node, location : Nemerle.Compiler.Location) : void
    {
      when (_generateXmlDoc)
        base.WriteDocumentation(ns, location)
    }
    
    public override WriteDocumentation(member : Nemerle.Compiler.IMember) : void
    {
      when (_generateXmlDoc)
        base.WriteDocumentation(member)
    }
    
    public override WriteDocumentation(content : string) : void
    {
      when (_generateXmlDoc)
        base.WriteDocumentation(content)
    }
  }
}