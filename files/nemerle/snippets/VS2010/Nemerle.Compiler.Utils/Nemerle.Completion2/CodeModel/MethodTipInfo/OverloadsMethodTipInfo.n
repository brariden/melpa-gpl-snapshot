using System;
using System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  public class OverloadsMethodTipInfo : MethodTipInfo
  {
    public this(
      [NotNull] overloads          : List[OverloadPossibility],
                nameToken          : Token.Identifier,
                paramsGroupToken   : Token.RoundGroup,
                defaultMethodIndex : int,
                parameterIndex     : int
    )
    {
      ParameterIndex = parameterIndex;
      _overloads     = overloads;

      _ = Init(nameToken, paramsGroupToken);

      when (HasTip) // The "HasTip" must be used after "Init"!
      {
        when (defaultMethodIndex >= 0 || defaultMethodIndex < _overloads.Count)
          _defaultMethod = defaultMethodIndex;
      }
    }

    mutable _overloads : List[OverloadPossibility];

    public override GetCount() : int { _overloads.Count }

    public override GetDescription(index : int) : string
    {
      def member = _overloads[index].Member;
      def xml    = XmlDocReader.GetInfo(member, member.Location);

      if (xml != null) xml.Summary else "";
    }

    public override GetType(index : int) : string
    {
      (_overloads[index].Member :> IMethod).ReturnType.ToString()
    }

    public override GetParameterCount(index : int) : int
    {
      def overload = _overloads[index];
      def method   = overload.Member :> IMethod;
      def len      = method.GetParameters().Length;

      if (len > 0 && IsExtension(overload)) len - 1 else len;
    }

    public override GetParameterInfo(index : int, mutable parameter : int) : string * string * string
    {
      def method = _overloads[index].Member :> IMethod;

      when (IsExtension(_overloads[index])) parameter++;

      def parm        = method.GetParameters().Nth(parameter);
      def xml         = XmlDocReader.GetInfo(method, method.Location);
      def description = if (xml != null)
      {
        match (xml.Params.Find((name, _) => name == parm.name))
        {
        | Some((_, text)) => text
        | _               => ""
        }
      }
      else
        "";

      (parm.Name, $"$(parm.name) : $(parm.ty)", description)
    }

    public override GetName(index : int) : string
    {
      def method = _overloads[index].Member :> IMethod;

      match (method.MemberKind)
      {
      | Constructor => method.DeclaringType.Name;
      | _           => method.Name;
      }
    }

    IsExtension(overload : OverloadPossibility) : bool
    {
      match (overload.ExtensionMethodObject)
      {
      | Error
      | null => false
      | _    => 

        match (overload.Member)
        {
        | m is IMethod => m.IsExtension
        | _            => false
        }

      }
    }
  }
}
