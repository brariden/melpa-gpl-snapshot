using System;
using System.Diagnostics;

using Nemerle.Compiler;
using Nemerle.Compiler.Utils;
using Nemerle.Imperative;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  class TokenFinder
  {
    mutable _line          : int;
    mutable _col           : int;
    mutable _counter       : int;
    mutable _curLocation   : Location;
    mutable _retObject     : object;
    mutable _retLocation   : Location;
    mutable _stop          : bool;
    [Accessor] mutable _tokensStack : list[Token] = [];

    #region Find Token

    Go(token : Token, stack : list[Token]) : list[Token]
    {
      when (_stop || token == null)
        return stack;

      Print(token, token.Location, _counter);
      _counter++;
      //TODO: Revrite it class. Remove newStack. 
      mutable newStack = match (token)
      {
      | RoundGroup   (child, _, _)    // {         Child : Token; } // ( ... )
      | BracesGroup  (child, _, _, _) // {         Child : Token; } // { ... }
      | SquareGroup  (child, _, _)    // { mutable Child : Token; } // [ ... ]
      | QuoteGroup   (child, _, _)    // {         Child : Token; } // <[ ... ]>
      | LooseGroup   (child)    // { mutable Child : Token; } // ; ... ;
      | Namespace(_,_,child) => // { Env : GlobalEnv; Body : Token; }

        //if (IsIn(token.Location))
          def res = Go(child, token :: stack);
          when (_stop)
            _tokensStack ::= token;
          res
        //else
        //  stack

      | _ =>

        stack

      }

      _counter--;

      unless (_stop)
      {
        _stop = IsIn(token.Location);

        if (_stop)
          _tokensStack ::= token;
        else
        {
          newStack = Go(token.Next, newStack);
          when (_stop)
            _tokensStack ::= token;
        }
      }

      if (_stop) newStack else stack
    }
    
    Go(token : Token, predicate : Token -> bool, stack : list[Token]) : list[Token]
    {
      when (_stop || token == null)
        return stack;

      Print(token, token.Location, _counter);
      _counter++;

      mutable newStack = match (token)
      {
      | RoundGroup   (child, _, _)    // {         Child : Token; } // ( ... )
      | BracesGroup  (child, _, _, _) // {         Child : Token; } // { ... }
      | SquareGroup  (child, _, _)    // { mutable Child : Token; } // [ ... ]
      | QuoteGroup   (child, _, _)    // {         Child : Token; } // <[ ... ]>
      | LooseGroup   (child)    // { mutable Child : Token; } // ; ... ;
      | Namespace(_,_,child) => // { Env : GlobalEnv; Body : Token; }

        if (_stop)
          stack
        else
        {
          _stop = predicate(token) && IsAfter(token.Location);

          if (_stop)
            token :: stack
          else
            Go(child, predicate, token :: stack);
        }
      | _ => stack

      }

      _counter--;

      unless (_stop)
      {
        _stop = predicate(token) && IsAfter(token.Location);

        unless (_stop)
          newStack = Go(token.Next, predicate, newStack);
      }

      if (_stop) (newStack) else (stack);
    }
    

    public Find(
      root : Token,
      line : int,
      col  : int
    )
      : list[Token]
    {
      Init(root.Location, line, col);

      _ = Go(root, []);

      _tokensStack.Rev()
    }
    
    #endregion

    #region Helpers

    Init(rootLocation : Location, line : int, col : int) : void
    {
#if PRINT_AST && DEBUG
      Trace.WriteLine($"\nStart at: $line:$col.");
#endif
      _tokensStack = [];

      _curLocation = Location(
        rootLocation.FileIndex,
        rootLocation.Line,
        rootLocation.Column,
        line + 100,
        1);

      _line        = line;
      _col         = col;
      _counter     = 0;
      _stop        = false;
      _retObject   = null;
      _retLocation = Location.Default;
    }

    IsIn(location : Location) : bool
    {
      location.Contains(_line, _col);
    }
    
    IsAfter(location : Location) : bool
    {
      if(location.Line > _line)
        true;
      else if(location.Line < _line)
        false;
      else if(location.Column > _col)
        true;
      else 
        false;
    }

    Print(obj : object, loc : Location, level : int) : void
    {
#if PRINT_AST && DEBUG
      mutable s = "";

      for (mutable i = 0; i < level; i++)
        s += "  ";

      Trace.WriteLine(s + $"$(obj.GetType().FullName) $(loc.Line):$(loc.Column):"
        "$(loc.EndLine):$(loc.EndColumn) "
        "cur:$(_curLocation.Line):$(_curLocation.Column):"
        "$(_curLocation.EndLine):$(_curLocation.EndColumn) "
        "$_line:$_col.");
      Trace.WriteLine(s + obj.ToString().Replace("\n", "\n" + s));
      Trace.WriteLine("");
#endif

      ignore(obj); ignore(loc); ignore(level);
    }

    #endregion
  }
}
