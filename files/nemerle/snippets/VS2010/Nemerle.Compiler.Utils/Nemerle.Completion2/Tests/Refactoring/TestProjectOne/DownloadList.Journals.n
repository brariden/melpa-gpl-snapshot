using System;
using System.Collections.Generic;
using System.Text;

using System.Console;
using System.Net;
using System.IO;
using Nemerle.Utility;
using System.Threading;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Formatters.Soap;
using System.Security.Cryptography;
using System.Diagnostics;
using System.Text.RegularExpressions;

using System.IO.Compression;

namespace KoLXo3
{
  public partial class DownloadList
  {
    [Accessor]
    springerPath: string = @"H:\Library\Springer\";
    
    [Accessor]
    springerRemoteFolder: string = @"http://www.magic-literal-heck.com";
    
    public PrepareJournalLinksForDownload(): void
    {
      client.Proxy = null;
      def journalUrls = File.ReadAllLines(SpringerPath + "journals.urls").ToList();
      mutable journals = [];
      journalUrls.Iter(journal =>
        {
          def url = journal.Substring(0, journal.Length - 1);
          def directory = SpringerPath + url.Substring(url.LastIndexOf('/') + 1);
          unless (Directory.Exists(directory))
            _ = Directory.CreateDirectory(directory);
          journals ::= (directory, journal);
        }
      );
      saveList(journals, SpringerPath + "all_journals.list");
      saveList(journals, SpringerPath + "left_journals.list");
    }

    public DownloadJournalIndex(): void
    {
      def journals = loadList(SpringerPath + "left_journals.list");
      unless (journals.IsEmpty)
      {
        client.Proxy = null;
        def (journalDirectory, journalUri: string) = journals.Head;
        mutable pdfLinks = [];
        mutable parsingStarted = false;
        def pdfLinksBuilder = StringBuilder();
        def parse(directory, uri, needSearchForNumbers = true, current = 1)
        {
          def decodeAmpersand(s)
          {
            s.Replace("&amp;", "&")
          }
          def localize(s)
          {
            s.Replace("/ ", "")
          }
          def strictDownload(uri, path): string
          {
            mutable shouldDownload = true;
            mutable contents;
            when (File.Exists(path) && FileInfo(path).Length > 0)
            {
              contents = File.ReadAllText(path);
              shouldDownload = !contents.Contains("</html>") || contents.Contains("for maintenance");
            }
            if (shouldDownload)
            {
              mutable success = false;
              mutable i = 0;
              def tries = 1000;
              while (i < tries && !success)
              {
                success = downloadFile(uri, path);
                unless (success)
                  WriteLine($"Unsuccessful try $(i+1) of $tries...");
                ++i;
              }
              if (success)
                File.ReadAllText(path)
              else
                throw Exception($"Error downloading file at URI $uri");
            }
            else
            {
              WriteLine($"Skipping file at path $path (exists)");
              contents
            }
          }
          def path = $@"$directory\contents$current.html";
          def contents = strictDownload(SpringerRemoteFolder + decodeAmpersand(uri), path);
          WriteLine($"Parsing index file at path $path");
          def searchForNumbersOptimized()
          {
            unless (parsingStarted)
            {
              def journalBoxStart = contents.IndexOf("MPReader_Profiles_SpringerLink_Content_PrimitiveHeadingControlName");
              def journal = contents.Substring(journalBoxStart, contents.IndexOf("</td>", journalBoxStart) - journalBoxStart);
              def journal = journal.Substring(journal.LastIndexOf("<td>") + 4).Trim();
              _ = pdfLinksBuilder.AppendLine($"<h2>$journal</h2>");
              parsingStarted = true;
            }
            def volumeStart = "Volume ";
            def numberStart = "\">Number";
            def volumes = contents.Split(array[volumeStart], StringSplitOptions.None);
            for (mutable i = 1; i < volumes.Length; ++i)
            {
              def volumeNumber = volumes[i].Substring(0, volumes[i].IndexOf("</")).Trim();
              def numbers = volumes[i].Split(array[numberStart], StringSplitOptions.None);
              for (mutable j = 1; j < numbers.Length; ++j)
              {
                def number = numbers[j].Substring(0, numbers[j].IndexOf("</"));
                def numberName = "Number" + numbers[j].Substring(0, numbers[j].IndexOf("</"));
                def volumeNumberName = $"Volume $volumeNumber Number $number";
                _ = pdfLinksBuilder.AppendLine($"<h3>$volumeNumberName</h3>");
                def numberLink = numbers[j-1].Substring(numbers[j-1].LastIndexOf('"') + 1);
                def path = $@"$directory\Volume $volumeNumber $(localize(numberName))";
                parse(path, decodeAmpersand(numberLink), false);
              }
            }
          }
          def searchForNextPageOptimized()
          {
            def nextStart = "\">Next";
            def nextLinks = contents.Split(array[nextStart], StringSplitOptions.None);
            if (nextLinks.Length > 3 || nextLinks.Length == 2)
              throw Exception($"Incorrect number of next links in file $(nextLinks.Length - 1) instead of 0 or 2");
            else
              when (nextLinks.Length == 3)
              {
                def nextLink = nextLinks[0].Substring(nextLinks[0].LastIndexOf('"') + 1);
                unless (nextLink == "paginationDisabled")
                  parse(directory, nextLink, needSearchForNumbers, current + 1);
              }
          }
          def searchForPdfLinksOptimized()
          {
            def pdfLinkStart = "\">PDF (";
            def links = contents.Split(array[pdfLinkStart], StringSplitOptions.None);
            for (mutable i = 1; i < links.Length; ++i)
            {
              mutable link = links[i-1].Substring(links[i-1].LastIndexOf("<a href=\""));
              link = link.Substring(link.IndexOf('"') + 1);
              when (link.IndexOf('"') > 0)
                link = link.Substring(0, link.IndexOf('"'));
              def identifier = link.Substring(0, link.IndexOf("/fulltext.pdf"));
              def identifier = identifier.Substring(identifier.LastIndexOf('/') + 1);
              def size = links[i].Substring(0, links[i].IndexOf(" k")).Replace(",", "").Trim();
              def urlToPdf = SpringerRemoteFolder + decodeAmpersand(link);
              def pathToPdf = $"$directory\\$identifier.pdf";
              pdfLinks ::= (int.Parse(size), pathToPdf, urlToPdf);
              def article = links[i-1].Substring(links[i-1].LastIndexOf("MetaPress_Products_Reader_Web_UI_Controls_AccessIndicatorControl"));
              def article = article.Substring(article.IndexOf("<a href=\""));
              def article = article.Substring(article.IndexOf(">") + 1);
              def article = article.Substring(0, article.IndexOf("</a>")).Trim();
              _ = pdfLinksBuilder.AppendLine($"<a href=\"file://localhost/$pathToPdf\">($size k)</a> $article<br />");
            }
          }
          when (needSearchForNumbers)
            searchForNumbersOptimized();
          searchForNextPageOptimized();
          searchForPdfLinksOptimized();
        }
        parse(journalDirectory, journalUri.Substring(SpringerRemoteFolder.Length));
        saveList(pdfLinks, journalDirectory + @"\all_pdfs.list");
        saveList(journals.Tail, SpringerPath + "left_journals.list");
        File.WriteAllText(journalDirectory + @"\index.html", pdfLinksBuilder.ToString());
      }
    }

    [Accessor]
    quarantine: string = @"Quarantine\";
        
    [Accessor]
    suspiciousFolder: string = @"Quarantine\Suspicious\";

    public CheckPdfIntegrityAndMakeDownloadList(): void
    {
      unless (Directory.Exists(Quarantine))
        _ = Directory.CreateDirectory(Quarantine);
      unless (Directory.Exists(SuspiciousFolder))
        _ = Directory.CreateDirectory(SuspiciousFolder);
      def allJournals : list[string * string] = loadList(SpringerPath + "all_journals.list");
      mutable allPdfs = [];
      allJournals.Iter((path, _) =>
      {
        mutable journalPdfs : list[int * string * string] = [];
        when (File.Exists(path + @"\all_pdfs.list"))
          journalPdfs = loadList(path + @"\all_pdfs.list");
        allPdfs ::= (journalPdfs.Length, journalPdfs);
      });
      allPdfs = allPdfs.Sort((a, b) =>
      {
        def (lengthA, _) = a;
        def (lengthB, _) = b;
        if (lengthA < lengthB)
          1
        else
          0
      });
      mutable pdfs = [];
      allPdfs.Iter((_, pdfList) => pdfList.Iter(pdf => pdfs ::= pdf));
      WriteLine($"Found $(pdfs.Length) PDFs, removing duplicates...");
      pdfs = pdfs.RemoveDuplicates();
      saveList(pdfs, SpringerPath + "all_pdfs.list");
      mutable processed = 0;
      mutable notDownloadedKilobytes = 0;
      mutable downloadedKilobytes = 0;
      def suspiciousBuilder = StringBuilder();
      def processPdf((sizeKilobytes, path, _))
      {
        def getFirstChars(path, count)
        {
          using (reader = StreamReader(path))
          {
            def buffer : array[char] = array(count);
            _ = reader.Read(buffer, 0, count);
            def builder = StringBuilder(count);
            foreach (c in buffer)
              _ = builder.Append(c);
            builder.ToString()
          }
        }
        def isPdf(path)
        {
          def s = getFirstChars(path, 1024);
          s.Substring(0, 5) == "%PDF-"
        }
        def checkPdfIntegrity(realSize, path)
        {
          def s = getFirstChars(path, 1024);
          def position = s.IndexOf("/L ");
          if (position > 0)
          {
            def s = s.Substring(position + 2);
            def position = s.IndexOf("/");
            if (position > 0)
            {
              def declaredSize = int.Parse(s.Substring(0, position).Trim());
              if (declaredSize <= realSize)
                true
              else
                false
            }
            else
              false;
          }
          else
            true
        }
        mutable shouldDownload = true;
        mutable suspicious = false;
        when (File.Exists(path))
        {
          def realSize = FileInfo(path).Length :> int;
          if (realSize != 0)
          {
            when (realSize > 25000 && realSize < 40000)
              unless (isPdf(path))
                suspicious = true;
            unless (suspicious)
            {
              shouldDownload = false;
              mutable difference = realSize / 1024 - sizeKilobytes;
              when (difference < 0)
                difference = -difference;
              when (difference > 3 && !checkPdfIntegrity(realSize, path))
              {
                _ = suspiciousBuilder.AppendLine($"<a href=\"file://localhost/$path\">$path</a> difference in size: $difference k<br />");
                suspicious = true;
              }
            }
          }
          else
            suspicious = true;
        }
        when (suspicious)
        {
          mutable destination;
          if (shouldDownload)
          {
            destination = Quarantine + Path.GetFileName(path);
            WriteLine($"Moving file at path $path to quarantine...");
          }
          else
          {
            destination = SuspiciousFolder + Path.GetFileName(path);
            WriteLine($"Suspicious file at path $path...");
          }
          if (File.Exists(destination))
            _ = suspiciousBuilder.AppendLine($"Attention: file at path $destination exists, can't overwrite<br/>");
          else
            File.Copy(path, destination);
          File.Delete(path);
        }
        ++processed;
        if (shouldDownload)
          notDownloadedKilobytes += sizeKilobytes;
        else
          downloadedKilobytes += sizeKilobytes;
        when (processed % 10000 == 0)
          WriteLine($"$processed entries have been processed...");
        shouldDownload
      }
      WriteLine("Filtering downloaded PDFs...");
      pdfs = pdfs.Filter(processPdf);
      File.WriteAllText(Quarantine + "suspicious.html", suspiciousBuilder.ToString());
      WriteLine($"Total size of PDFs: $((downloadedKilobytes + notDownloadedKilobytes) / 1024 / 1024) g");
      WriteLine($"Downloaded: $(downloadedKilobytes / 1024 / 1024) g");
      WriteLine($"Not downloaded: $(notDownloadedKilobytes / 1024 / 1024) g");
      saveList(pdfs, SpringerPath + "left_pdfs.list");
    }
    
    class Slot
    {
      // Reflect members on the Slot class
      [Accessor]
      client: WebClient;
      
      public this()
      {
        client = WebClient();
      }
      
      [Accessor(flags = WantSetter)]
      mutable free: bool = true;
      
      [Accessor(flags = WantSetter)]
      mutable total: long = 0;
      
      mutable stallStart: DateTime;
      
      mutable downloaded: long = 0;
      
      public Downloaded: long
      {
        get { downloaded }
        set
        {
          downloaded = value;
          stallStart = DateTime.Now;
        }
      }
      
      //public TotalKilobytes: int
      //{
        //get { (Total / 1024) :> int }
      //}

      public DownloadedKilobytes: int
      {
        get { (Downloaded / 1024) :> int }
      }
      
      [Accessor(flags = WantSetter)]
      mutable lastReported: int = 0;
      
      [Accessor]
      mutable uri: string;
      
      [Accessor]
      mutable path: string;
      
      public Zero(): void
      {
        Free = true;
        Total = 0;
        Downloaded = 0;
        LastReported = 0;
        uri = "";
        path = "";
      }
      
      public DownloadAsync(uri: string, path: string): void
      {
        Zero();
        Free = false;
        this.uri = uri;
        this.path = path;
        Client.DownloadFileAsync(Uri(Uri), Path);
        stallStart = DateTime.Now;
      }
      
      public CheckStall(): void
      {
        when (DateTime.Now - stallStart > TimeSpan(0, 0, 30))
          Client.CancelAsync();
      }
    }
    
    rotationTimer: Timers.Timer = Timers.Timer(500);
    
    static mutable triggerActionDefined = false;

    public DownloadLotsOfSpringerLinks(): void
    {
      mutable pdfs : list[int * string * string] = loadList(SpringerPath + "left_pdfs.list");
      unless (pdfs.IsEmpty)
      {
        mutable totalBytesDownloaded = 0L;
        def finished = AutoResetEvent(false);
        mutable bunchNumber = 50000;
        def slotsNumber = 5;
        def nativeSlotsNumber = 10;
        def slots = array(slotsNumber);
        def downloadLevelGap = 1000;
        for (mutable i = 0; i < slotsNumber; ++i)
        {
          slots[i] = Slot();
          def find(slot)
          {
            mutable j = 0;
            while (j < slotsNumber && slot != slots[j].Client)
              ++j;
            unless (j < slotsNumber)
              throw Exception("Alien slot");
            (j, slots[j])
          }
          when (i >= nativeSlotsNumber)
            slots[i].Client.Proxy = getNewProxy();
          slots[i].Client.DownloadProgressChanged += (sender, progress) => 
          {
            def (slotNumber, slot) = find(sender);
            slot.Total = progress.TotalBytesToReceive;
            slot.Downloaded = progress.BytesReceived;
            when (slot.DownloadedKilobytes - slot.LastReported > downloadLevelGap)
            {
              slot.LastReported += downloadLevelGap;
              WriteLine($"Web client $(slotNumber+1) downloaded $(slot.LastReported) k");
            }
          }
          slots[i].Client.DownloadFileCompleted += (sender, result) =>
          {
            def (slotNumber, slot) = find(sender);
            mutable error = false;
            if (result.Error != null)
            {
              WriteLine($"Error on web client $(slotNumber+1) during download occured:\n $(result.Error)");
              error = true;
              when (slotNumber >= nativeSlotsNumber)
                slot.Client.Proxy = getNewProxy();
            }
            else
            {
              WriteLine($"$(slotNumber+1)-th web client reports: download complete, releasing the slot");
              def realSize = 
                if (File.Exists(slot.Path))
                  FileInfo(slot.Path).Length
                else
                  0L;
              when (slot.Total != realSize)
              {
                WriteLine($"$(slotNumber+1)-th web client reports: bad downloaded file, should reload on the next round");
                error = true;
              }
            }
            if (error && File.Exists(slot.Path))
              File.Delete(slot.Path);
            else
              totalBytesDownloaded += slot.Total;
            slot.Zero();
          };
        }
        mutable triggered = 0;
        unless (triggerActionDefined)
          rotationTimer.Elapsed += (_, _) =>
          {
            triggerActionDefined = true;
            mutable i = 0;
            while (i < slotsNumber && !slots[i].Free)
              ++i;
            when (i < slotsNumber)
            {
              if (bunchNumber > 0 && !pdfs.IsEmpty)
              {
                def (_, path : string, uri : string) = pdfs.Head;
                pdfs = pdfs.Tail;
                def native = 
                  if (i < nativeSlotsNumber)
                    "native"
                  else
                    "proxy-piped";
                WriteLine($"$(i+1)-th $native web client is free, downloading file from URI $uri to path $path");
                unless (File.Exists(path))
                  slots[i].DownloadAsync(uri, path);
                --bunchNumber;
                WriteLine($"$bunchNumber pdfs left in bunch");
              }
              else
                _ = finished.Set();
            }
            def everyNthTrigger = 10;
            ++triggered;
            when (triggered >= everyNthTrigger)
            {
              foreach (slot in slots)
                slot.CheckStall();
              triggered = 0;
            }
          }
        rotationTimer.Enabled = true;
        _ = finished.WaitOne();
        rotationTimer.Enabled = false;
        mutable canExit = false;
        while (!canExit)
          if (slots.ForAll(_.Free))
            canExit = true;
          else
            Thread.Sleep(1000);
        def totalDownloaded = totalBytesDownloaded / 1024 / 1024;
        WriteLine($"Downloaded at the round: $totalDownloaded m");
        saveList(pdfs, SpringerPath + "left_pdfs.list");
      }      
    }
    
    public ReparseAllTheIndexFilesAndCheckForNew(): void
    {
      // TODO: check for new volumes here
      mutable journals : list[string * string] = loadList(SpringerPath + "all_journals.list");
      saveList(journals, SpringerPath + "left_journals.list");
      do {
        DownloadJournalIndex();
        journals = loadList(SpringerPath + "left_journals.list");
      } while (!journals.IsEmpty);
    }
  }
}