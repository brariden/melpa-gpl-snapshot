using System;
using System.Collections.Generic;
using System.Text;

using System.Console;
using System.Net;
using System.IO;
using Nemerle.Utility;
using System.Threading;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Formatters.Soap;
using System.Security.Cryptography;
using System.Diagnostics;
using System.Text.RegularExpressions;

using System.IO.Compression;

namespace KoLXo3
{
  public partial class DownloadList
  {
    [Accessor]
    remoteFolder: string = "http://www.magic-literal.org/_djvu/";

    [Accessor]
    indexUri: string = "_djvu_index_tables.html";

    [Accessor(flags = WantSetter)]
    mutable proxy: IWebProxy = WebProxy("http://magic-literal-foo.org:3128/");
    
    [Accessor(flags = WantSetter)]
    mutable credentials: ICredentials = NetworkCredential("magic-literal-foo", "magic-literal-bar");
    
    client: WebClient = WebClient();
        
    [Accessor(flags = WantSetter)]
    mutable savePath: string = @"H:\KoLXo3\";
        
    progressTimer: Timers.Timer = Timers.Timer(1000);
    
    percentageInterval: int = 30;
    
    percentageTimer: Timers.Timer = Timers.Timer(percentageInterval * 1000);

    mutable lastProgress: DownloadProgressChangedEventArgs;
    
    mutable lastKilobytes: double;
    
    completedEvent: AutoResetEvent = AutoResetEvent(false);

    mutable stallStart: DateTime;
    
    public this()
    {
      unless (proxy == null)
        client.Proxy = proxy;
      unless (credentials == null)
        client.Credentials = credentials;
      progressTimer.Elapsed += (_, _) => Write('.');
      percentageTimer.Elapsed += (_, _) =>
        if (lastProgress != null)
        {
          def received = lastProgress.BytesReceived / 1024;
          def total = lastProgress.TotalBytesToReceive / 1024;
          def speed = (received - lastKilobytes) / percentageInterval;
          Write($"\n$(lastProgress.ProgressPercentage)% ($received k of $total k), $speed k/s");
          lastKilobytes = received;
          stallStart = DateTime.Now;
        }
        else
          when (DateTime.Now - stallStart > TimeSpan(0, 0, percentageInterval + 5))
            client.CancelAsync();
      client.DownloadFileCompleted += (_, result) =>
      {
        when (result.Error != null)
          WriteLine($"Error during download occured:\n $(result.Error)");
        WriteLine("Download complete");
        _ = completedEvent.Set();
      };
      client.DownloadProgressChanged += (_, progress) => lastProgress = progress;
    }

    downloadOrResume(uri: Uri, path: string): void
    {
      client.DownloadFileAsync(uri, path);
    }
    
    downloadFile(uri: string, path: string): bool
    {
      def directory = Path.GetDirectoryName(path);
      unless (Directory.Exists(directory))
        _ = Directory.CreateDirectory(directory);
      WriteLine($"Downloading url $uri to path $path");
      def switch(enable)
      {
        progressTimer.Enabled = enable;
        percentageTimer.Enabled = enable;
      }
      lastProgress = null;
      lastKilobytes = 0;
      stallStart = DateTime.Now;
      try
      {
        downloadOrResume(Uri(uri), path);
        switch(true);
        _ = completedEvent.WaitOne();
        switch(false);
        def realSize = FileInfo(path).Length;
        def siteIsClosed = realSize == 1720;
        def ban1 = realSize == 45;
        def ban10 = realSize == 48;
        //def downSpringer = realSize == 10141;  // forgotten
        def badSpringer = realSize == 19094;
        when (ban1)
          WriteLine("Ban 1 minute");
        when (ban10)
          WriteLine("Ban 10 minutes");
        when (badSpringer)
          WriteLine("Bad Springer link");
        def success = !siteIsClosed && !ban1 && !ban10 && !badSpringer && realSize == lastProgress.TotalBytesToReceive;
        unless (success)
          File.Delete(path);
        when (siteIsClosed)
          throw Exception("Site is closed");
        success
      }
      catch
      {
        | _ => false
      }
    }
    
    public Localize(uri: string): string
    {
      uri.Replace('/', '\\').Replace("%20", " ")
    }
    
    public LocalizeWithSlash(uri: string): string
    {
      uri.Replace("%20", " ")
    }

    public DownloadIndex(): void
    {
      _ = downloadFile(RemoteFolder + IndexUri, SavePath + Localize(IndexUri));
    }

    [Accessor]
    static saveListsPath: string = @"H:\Library\";
    
    public ParseIndex(): void
    {
      def path = SavePath + indexUri;
      WriteLine($"Parsing index file at path $path");
      def parse(path)
      {
        def heap = File.ReadAllText(path);
        def bite(start = 0, links = [])
        {
          def position = heap.IndexOf("href=\"", start) + 6;
          if (position < 6)
            links
          else
          {
            def quote = heap.IndexOf('"', position);
            bite(quote + 1, heap.Substring(position, quote - position) :: links)
          }
        }
        bite()
      }
      def entries = parse(path).Reverse();
      WriteLine($"$(entries.Length) entries found");
      WriteLine("Filtering out internal links...");
      def entries = entries.Filter(s => !s.Contains("#"));
      saveList(entries, SaveListsPath + "all_entries_from_index.list");
    }
    
    localWithSharp(uri: string): string
    {
      Localize(uri).Replace('\'', '#')
    }
    
    saveList['a](entries: list['a], path: string, textVersionToo: bool = true): void
    {
      WriteLine($"Saving entries ($(entries.Length) elements) at path $path");
      def formatter = BinaryFormatter();
      formatter.AssemblyFormat = FormatterAssemblyStyle.Simple;
      using (stream = FileStream(path, FileMode.Create))
        formatter.Serialize(stream, entries);
      when (textVersionToo)
        using (stream = FileStream(path + ".xml", FileMode.Create))
          SoapFormatter().Serialize(stream, entries.Map(_.ToString()).ToArray());
    }
    
    [Accessor]
    excludeFolders: list[string] = [
      @"H:\Library\DVD05\",
      @"H:\Library\DVD06\",
      @"H:\Library\DVD07\",
      @"H:\Library\DVD08\",
      @"H:\Library\DVD09\",
      @"H:\Library\DVD10\",
      @"H:\Library\DVD11\",
      @"H:\Library\DVD12\",
      @"H:\Library\Download\"];
      
    //class SpitOnListVersion['a] : SerializationBinder
    //{
      //dummy: list['a];
      //
      //public this()
      //{
        //dummy = [];
      //}
      //
      //public override BindToType(_: string, _: string): Type
      //{
        //dummy.GetType()
      //}
    //}

    loadList['a](path: string): list['a]
    {
      WriteLine($"Loading list at path $path");
      def formatter = BinaryFormatter();
//      formatter.Binder = SpitOnListVersion.['a]();
      formatter.AssemblyFormat = FormatterAssemblyStyle.Simple;
      def list =
        using (stream = FileStream(path, FileMode.Open))
          formatter.Deserialize(stream) :> list['a];
      WriteLine($"$(list.Length) entries found");
      list
    }
      
    public SubtractExisting(): void
    {
      def entries = loadList(SaveListsPath + "all_entries_from_index.list");
      WriteLine("Filtering out existing files");
      def entries = entries.Filter(entry => !File.Exists(SavePath + Localize(entry)));
      saveList(entries, SaveListsPath + "for_download.list");
    }
    
    public Download(): void
    {
      //unless (File.Exists(SaveListsPath + "for_download2.list"))
      //{
        //def entries: list[string] = loadList(SaveListsPath + "for_download.list");
        //saveList(entries.Reverse(), SaveListsPath + "for_download2.list");        
      //}
      //def entries = loadList(SaveListsPath + "for_download2.list");
      def entries = loadList(SaveListsPath + "for_download.list");
      unless (entries.IsEmpty)
      {
        def uri = entries.Head;
        if (downloadFile(RemoteFolder + uri, SavePath + Localize(uri)))
          saveList(entries.Tail, SaveListsPath + "for_download.list");
        else
          WriteLine($"Error downloading file at relative URI $uri");
      }
    }

    excludePathPrefixes: list[string] = [
      "0pre-Library",
      "_scripts",
      "_tmp"];

    loadMd5(path: string): list[string * int * string]
    {
      def md5entries = File.ReadAllLines(path);
      def parse(i = 0, accumulator = [])
      {
        if (i < md5entries.Length)
        {
          mutable s = md5entries[i];
          def md5 = s.Substring(0, 32);
          s = s.Substring(32).Trim();
          def position = s.IndexOf(' ');
          def size = int.Parse(s.Substring(0, position));
          def path = s.Substring(position).Trim();
          parse(i + 1, (md5, size, path) :: accumulator);
        }
        else
          accumulator
      }
      parse().Filter((_, _, path) => excludePathPrefixes.Find(prefix => path.StartsWith(prefix)) is None())
    }
    
    public Hasher: MD5CryptoServiceProvider = MD5CryptoServiceProvider();
    
    public ComputeMd5(path: string): string
    {
      def data = File.ReadAllBytes(path);
      def hash = Hasher.ComputeHash(data);
      def stringBuilder = StringBuilder();
      hash.Iter(b =>  {
        def x = string.Format("{0:x}", b : byte);
        when (x.Length == 1)
          _ = stringBuilder.Append("0");
        _ = stringBuilder.Append(x);
      });
      stringBuilder.ToString()
    }
    
    public CheckMd5(): void
    {
      def checkList = loadMd5(SavePath + "md5_len.txt");
      saveList(checkList, SaveListsPath + "md5_to_check.list");
      WriteLine("Computing md5 hashes...");
      def process(list, notFound = [], badSize = [], badMd5 = [], good = [])
      {
        match (list)
        {
          | (md5, size, path) :: tail =>
            def pathes =  Localize(SavePath) :: (SavePath :: ExcludeFolders).Map(_ + Localize(path));
            def file = match (pathes.Find(File.Exists(_)))
            {
              | Some(x) => x
              | None => null
            };
            if (file == null)
              process(tail, (path, size) :: notFound, badSize, badMd5, good)
            else
            {
              def realSize = FileInfo(file).Length :> int;
              if (realSize != size)
                process(tail, notFound, (path, size, realSize) :: badSize, badMd5, good)
              else
              {
                WriteLine($"Hashing $file...");
                def realMd5 = ComputeMd5(file);
                if (realMd5 != md5)
                  process(tail, notFound, badSize, (path, size, md5, realMd5) :: badMd5, good)
                else
                  process(tail, notFound, badSize, badMd5, file :: good)
              }
            }
          | [] => (notFound, badSize, badMd5, good)
        }
      }
      def (notFound, badSize, badMd5, good) = process(checkList);
      saveList(notFound, SaveListsPath + "md5_file_not_found.list");
      saveList(badSize, SaveListsPath + "md5_incorrect_size.list");
      saveList(badMd5, SaveListsPath + "md5_incorrect_hash.list");
      saveList(good, SaveListsPath + "md5_good.list");
    }

    public MoveBackFilesFromQuarantine(): void
    {
      def pdfs : list[int * string * string] = loadList(SpringerPath + "all_pdfs.list");
      mutable processed = 0;
      pdfs.Iter((_, path, _) =>
      {
        unless (File.Exists(path))
        {
          def name = Path.GetFileName(path);
          when (File.Exists(Quarantine + name))
          {
            WriteLine($"Moving quarantined file back to path $path");
            File.Move(Quarantine + name, path);
          }
        }
        ++processed;
        when (processed % 10000 == 0)
          WriteLine($"$processed entries have been processed...");
      });
    }
    
    [Accessor]
    indexPath: string = "Indices";
    
    public GatherIndex(): void
    {
      unless (Directory.Exists(IndexPath))
        _ = Directory.CreateDirectory(IndexPath);
      def journals : list[string * string] = loadList(SpringerPath + "all_journals.list");
      using (writer = StreamWriter(SpringerPath + "index.html"), extraWriter = StreamWriter(IndexPath + @"\index.html"))
        journals.Iter((path, _) =>
        {
          def index = File.ReadAllText($@"$path\index.html");
          def issn = path.Substring(path.LastIndexOf("\\") + 1).Trim();
          WriteLine($"Merging the journal with issn $issn");
          File.WriteAllText($@"$IndexPath\$issn.html", index);
          writer.WriteLine(index);
          def position = index.IndexOf("</");
          def journal = index.Substring(0, position);
          def journal = journal.Substring(journal.IndexOf(">") + 1);
          extraWriter.WriteLine($"<a href=\"$issn.html\">$issn</a> $journal<br />");
        });
    }
    
    //compress(source: string, mutable destination: string = "", bufferSize = 1024): void
    //{
      //when (destination == "")
        //destination = source + ".gz";
      //def buffer: array[byte] = array(bufferSize);
      //mutable read;
      //using (input = FileStream(source, FileMode.Open), output = FileStream(destination, FileMode.Create), zipper = GZipStream(output, CompressionMode.Compress))
        //do {
          //read = input.Read(buffer, 0, buffer.Length);
          //zipper.Write(buffer, 0, read);
        //} while (read > 0);
    //}

    public SeparateEntriesWithUnknownHash(): void
    {
      def entries = loadList(SaveListsPath + "all_entries_from_index.list");
      def hashes = loadMd5(SavePath + "md5_len.txt");
      mutable items = [];
      def (allEntriesWithMd5, noMd5inList) = entries.Partition(entry =>
        match (hashes.Find((_, _, path) => path == LocalizeWithSlash(entry)))
        {
          | Some((md5, size, _)) =>
            items ::= DownloadItem(this, entry, size, md5);
            true
          | None() => false
        }
      );
      saveList(noMd5inList, SaveListsPath + "no_md5_in_list.list");
      saveList(allEntriesWithMd5, SaveListsPath + "all_entries_with_md5.list");
      saveList(items, SaveListsPath + "kolxo3.list", false);
    }
    
    public GenerateKoLXo3(): void
    {
      def items: list[DownloadItem] = loadList(SaveListsPath + "kolxo3.list");
      mutable notDownloaded = [];
      mutable downloadedButNotGood = [];
      mutable downloadedAndGood = [];
      items.Iter(item =>
      {
        item.Downloader = this;
        WriteLine($"Processing item: $item");
        if (item.IsGood)
          downloadedAndGood ::= item;
        else
          if (item.ExistsOnDisk)
            downloadedButNotGood ::= item;
          else
            notDownloaded ::= item;
      });
      saveList(notDownloaded, SaveListsPath + "not_downloaded.list");
      saveList(downloadedButNotGood, SaveListsPath + "downloaded_but_not_good.list");
      saveList(downloadedAndGood, SaveListsPath + "downloaded_and_good.list");
    }
    
    [Accessor]
    catchedFilesPath: string = @"H:\Gotcha\";
    
    public PickUpCatchedFiles(): void
    {
      def items: list[DownloadItem] = loadList(SaveListsPath + "not_downloaded.list");
      def ready: list[DownloadItem] = loadList(SaveListsPath + "downloaded_and_good.list");
      def find(entries, size, md5)
      {
        match (entries.Find(entry => entry.GoodSize == size && entry.GoodMd5 == md5))
        {
          | Some(item) => item
          | None() => null
        }
      }
      items.Iter(item => item.Downloader = this);
      ready.Iter(item => item.Downloader = this);
      def getAllFiles(folder, mutable accumulator = [])
      {
        def subfolders = Directory.GetDirectories(folder);
        accumulator += Directory.GetFiles(folder).ToList();
        foreach (subfolder in subfolders)
          accumulator += getAllFiles(subfolder);
        accumulator
      }
      def catched = getAllFiles(CatchedFilesPath);
      foreach (file in catched)
      {
        def info = FileInfo(file);
        when (info.IsReadOnly)
          info.IsReadOnly = false;
        def size = info.Length :> int;
        def md5 = ComputeMd5(file);
        def item = find(items, size, md5);
        if (item != null)
        {
          WriteLine($"Found match for file $file - item $item, moving");
          File.Move(file, item.Path);
        }
        else
        {
          def item = find(ready, size, md5);
          if (item != null)
          {
            WriteLine($"Found already downloaded match for file $file - item $item, deleting");
            File.Delete(file);
          }
          else
            WriteLine($"No matches for file $file");
        }
      }
    }
    
    public DeleteIncorrectFiles(): void
    {
      def items: list[DownloadItem] = loadList(SaveListsPath + "downloaded_but_not_good.list");
      items.Iter(item =>
      {
        item.Downloader = this;
        def path = item.Path;
        if (File.Exists(path) && Path.GetDirectoryName(path) != Path.GetDirectoryName(SavePath))
        {
          WriteLine($"Deleting file at path $path");
          File.Delete(path);
        }
        else
          WriteLine($"File does not exist at path $path");
      });
    }
  }
}