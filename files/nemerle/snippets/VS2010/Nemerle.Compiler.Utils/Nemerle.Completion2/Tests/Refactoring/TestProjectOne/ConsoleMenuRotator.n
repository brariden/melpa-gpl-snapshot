using System;
using System.Collections.Generic;
using System.Text;
using System.Console;
using Nemerle.Utility;

using System.Threading;

namespace KoLXo3
{
  class ConsoleMenuRotator
  {
    programName: string;
    
    public this(programName: string)
    {
      this.programName = programName;
    }
    
    [Accessor]
    mutable menus: list[char * string * (void -> void)] = [];
    
    public Add(key: char, menu: string, handler: void -> void): void
    {
      menus += [(key, menu, handler)];
    }
    
    PrintMenus(): void
    {
      Menus.Iter((key, menu, _) => WriteLine($" $key - $menu"));
    }
    
    [Accessor(flags = WantSetter)]
    mutable auto: char;
    
    [Accessor(flags = WantSetter)]
    mutable autoInterval: int = 15;
    
    public Start(): void
    {
      WriteLine(programName);
      
      def rotate()
      {
        WriteLine("\nProgram menu:");
        PrintMenus();
        Write($"Your choice [automatic launch '$Auto' in $AutoInterval s]: ");
        def pressed = { // definition {1} pressed
          mutable acquired = false; // definition {2} acquired
          mutable elapsed = 0;  // definition {3} elapsed
          def check = 100;  // definition {4} check
          do {
            Thread.Sleep(check);  // usage {4}
            elapsed += check; // usage {3} // usage {4}
            when (KeyAvailable)
              acquired = true;  // usage {2}
          } while (!acquired && elapsed < AutoInterval * 1000); // usage {2} // usage {3}
          if (acquired) // usage {2}
            ReadKey()
          else
          {
            Write(Auto);
            ConsoleKeyInfo(Auto, ConsoleKey.A, false, false, false)
          }
        }
        unless (pressed.Key == ConsoleKey.Enter) // usage {1}
        {
          WriteLine();
          def choice = Menus.Find((key, _, _) => pressed.KeyChar == key); // usage {1} // definition {5} choice
          match (choice) // usage {5}
          {
            | Some((_, name, handler)) => // definition {7} name
              WriteLine($"Starting handler '$name'..."); // usage {7}
              def was = DateTime.Now; // definition {6} was
              handler();
              def elapsed = DateTime.Now - was; // usage {6}
              WriteLine($"Handler '$name' finished, elapsed time $(elapsed.TotalSeconds) s ($(elapsed.TotalMinutes) m)"); // usage {7}
              WriteLine("Collecting garbage...");
              GC.Collect();
              GC.WaitForPendingFinalizers();
            | _ => ()
          }
          rotate();
        }
      }
      
      rotate();
    }
    
    public Pause(): void
    {
      WriteLine("Menu rotation has been paused. Press any key to continue");
      _ = ReadKey(false);
    }
  }
}