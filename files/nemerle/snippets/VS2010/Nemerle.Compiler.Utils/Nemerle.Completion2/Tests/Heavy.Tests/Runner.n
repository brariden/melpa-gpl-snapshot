using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.IO;
using System.Diagnostics;

using NUnit.Framework;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Utility;
using Nemerle.Collections.List;

using System.Console;
using SCG = System.Collections.Generic;

namespace Heavy.Tests
{
  public class TestRunner
  {
    public stopAfterFirstFailedTest = true;
    
    skipTestProjects : list[string] = []; // neglect some projects for a while
    
    skipTestCases : list[int] = [];  // neglect some tests for a while

    // Run a particular broken test here
    public static runSpecificTest : bool = true;
    
    public static RunTheTest() : void
    {
      //def suite = FindDefinitionTestProjectTwo();
      def suite = FindUsagesTestProjectTwo();
      suite.SetUp();
      suite.Test080();
    }

    public static Explode(this s : string, delimiter : string) : list[string]
    {
       s.Split(array[delimiter], StringSplitOptions.None).ToList()
    }
    
    public static CompareLines(this one : Location, two : Location) : int
    {
      def fileCompare = one.FileIndex.CompareTo(two.FileIndex);
      if (fileCompare == 0)
        one.Line - two.Line
      else
        fileCompare
    }

    public static PromoteToGenerated(usageType : UsageType) : UsageType
    {
      | Definition => UsageType.GeneratedDefinition
      | Usage => UsageType.GeneratedUsage
      | x => x
    }
    
    public static UsageTypeToString(usageType : UsageType) : string
    {
      | Definition
      | GeneratedDefinition
      | ExternalDefinition => "definition"
      | Usage
      | GeneratedUsage
      | ExternalUsage => "usage"
    }

    returns : array[char] = array['\r', '\n'];
    
    [Accessor(TheEngine)]
    mutable engine : Engine;
    mutable project : Project;

    public SourceWalker() : SCG.IEnumerable[int * IIdeSource]
    {
      foreach (fileIndex in TheEngine.Sources.GetFileIndices())
        yield (fileIndex, TheEngine.ProjectSources.GetSource(fileIndex));
    }
    
    public LineWalker(source : IIdeSource, filterByPhrase : string) : SCG.IEnumerable[int * string]
    {
      for (mutable i = 1; i <= source.LineCount; ++i)
        when (source.GetLine(i).Contains(filterByPhrase))
          yield (i, source.GetLine(i));
    }

    public GetSource(location : Location) : IIdeSource
    {
      TheEngine.ProjectSources.GetSource(location.File)
    }

    public GetLine(file : int, line : int) : string
    {
      TheEngine.ProjectSources.GetSource(file).GetLine(line)
    }
    
    public GetLine(location : Location) : string
    {
      GetLine(location.FileIndex, location.Line)
    }
    
    public static Find(this parts : list[string], testCase : int, neglectFirst = true) : string
    {
      mutable l = parts;
      when (neglectFirst)
      {
        Assert.IsFalse(l.IsEmpty);
        l = l.Tail;
      }
      match (l.Find(_.Contains($"{$testCase}")))
      {
        | Some(s) => s
        | _ => null
      }
    }
    
    // HACK and also a sad performance
    // TODO: add some methods to IIdeSource
    public SetLine(location : Location, line : string, newLine : string) : void
    {
      def source = GetSource(location);
      def code = source.GetText();
      def file = location.File;
      def backup = file + ".bak";
      unless (File.Exists(backup))
        File.Copy(file, backup);
      def position = source.GetPositionOfLineIndex(location.Line, location.Column);
      mutable left = code.LastIndexOfAny(returns, position);
      if (left < 0) // the first line
        left = 0;
      else
        left++;
      mutable right = code.IndexOfAny(returns, position);
      when (right < 0) // EOL instead of return
        right = code.Length;
      Assert.IsTrue(right >= left);
      def length = right - left;
      def sourceLine = code.Substring(left, length);
      foreach (return in returns)
        Assert.IsFalse(sourceLine.Contains(return.ToString()));
      Assert.AreEqual(sourceLine, line);
      def code = code.Remove(left, length).Insert(left, newLine);
      File.WriteAllText(file, code);  // HACK
      TheEngine.Sources.AddOrUpdate(location.File, code);
    }
    
    public AppendComment(testCase : int, usage : GotoInfo, addon : string) : void
    {
      def perhaps = "possibly " + addon;
      def line = GetLine(usage.Location);
      def parts = line.Explode("//");
      when (parts.Filter(_.StartsWith(perhaps)).Length == 0)
      {
        def phrase = $"$(UsageTypeToString(usage.UsageType)) {$testCase}";
        SetLine(usage.Location, line, $"$line //$perhaps $phrase");
      }
    }
    
    public FoundUsagesAreRight(testCase : int, one : list[GotoInfo], two : list[GotoInfo]) : bool
    {
      def lineComparator(gotoOne, gotoTwo)
      {
        def comparedLocations = gotoOne.Location.CompareLines(gotoTwo.Location);
        if (comparedLocations != 0)
          comparedLocations
        else
          gotoOne.Location.CompareTo(gotoTwo.Location)
      };
      
      def one = one.Sort(lineComparator);
      def two = two.Sort(lineComparator);

      def comparator(gotoOne, gotoTwo)
      {
        def comparedLocations = gotoOne.Location.CompareTo(gotoTwo.Location);
        if (comparedLocations != 0)
          comparedLocations
        else if (gotoOne.UsageType == gotoTwo.UsageType)
          0
        else
          1
      };

      def notFound = one.Filter(one' => !two.Exists(two' => comparator(one', two') == 0));
      def extraFound = two.Filter(two' => !one.Exists(one' => comparator(one', two') == 0));
      def success = notFound.IsEmpty && extraFound.IsEmpty;
      unless (success)
      {
        notFound.Iter(AppendComment(testCase, _, "not found"));
        extraFound.Iter(AppendComment(testCase, _, "extra found"));
      }
      success
    }

    public static MakeUsage(line : string, location : Location,
                            name : string, phrase : string) : GotoInfo
    {
      mutable usageType =
        if (phrase.Contains(UsageTypeToString(UsageType.Definition)))
          UsageType.Definition
        else
          UsageType.Usage;
      def parts = line.Explode("//");
      Assert.Greater(parts.Length, 1);
      mutable goto = GotoInfo(location);
      def code = parts.Head;
      mutable position = code.IndexOf(name);  // TODO: name can be there a few times repeated
      if (position > 0)
        goto = GotoInfo(Location(location.File, location.Line, position + 1, location.Line, position + name.Length + 1));
      else
        usageType = PromoteToGenerated(usageType);
      GotoInfo(goto.Location, usageType)
    }
    
    public static FindDefinition(runner : TestRunner) : string * int * Location * string -> bool
    {
      runner.FindDefinition
    }
    
    public static FindUsages(runner : TestRunner) : string * int * Location * string -> bool
    {
      runner.FindUsages
    }
    
    [Accessor(flags = WantSetter)]
    mutable test : string * int * Location * string -> bool;

    [Accessor(flags = WantSetter)]
    mutable starterPhrase : string;
    [Accessor(flags = WantSetter)]
    mutable checkPhrase : string;
    [Accessor(flags = WantSetter)]
    mutable currentLine : string;
    [Accessor(flags = WantSetter)]
    mutable testCases: list[string * int * Location * string];
    
    public ScanSources(phrase : string, testCase : int = 0) : list[string * int * Location * string]
    {
      Write($"Scanning sources searching for test cases ($phrase)... \n");
      mutable found : list[string * int * Location * string] = [];
      foreach ((fileIndex, source) in SourceWalker())
        foreach ((lineNumber, line) in LineWalker(source, phrase))
        {
          def comments = line.Explode("//").Tail;
          comments.Iter(comment =>
          {
            // example of a phrase: // find usages {13} foo666
            def search = $"$phrase {";
            def position = comment.IndexOf(if (testCase == 0) search else $"$search$testCase}");
            when (position == 1)
            {
              def cutted = comment.Substring(position + search.Length);
              def number = int.Parse(cutted.Substring(0, cutted.IndexOf('}')));
              found ::= (line, number, Location(fileIndex, lineNumber, 0, lineNumber, 10), comment);
              when (testCase == 0)
                WriteLine(comment);
            }
          });
        }
      when (testCase == 0)  // searching for the whole test suite
      {
        def comparer = fun ((_, numberOne, _, _), (_, numberTwo, _, _))
        {
          def k = numberOne.CompareTo(numberTwo);
          Assert.IsFalse(k == 0, $"Duplicating test case $numberOne");
          k
        };
        found = found.Sort(comparer);
        def length = found.Length;
        WriteLine($"$length test cases found: $(found.Map((_, number, _, _) => number))");
      }
      found
    }
    
    public FindDefinition(line: string, testCase : int, declaration : Location, starter : string) : bool
    {
      Find(false, line, testCase, declaration, starter)
    }

    public FindUsages(line: string, testCase : int, declaration : Location, starter : string) : bool
    {
      Find(true, line, testCase, declaration, starter)
    }

    public Find(alsoUsages: bool, line: string, testCase : int, declaration : Location, starter : string) : bool
    {
      //when (skipTestCases.Contains(testCase)) // TODO: report about compiler bug here (no errors, just internal compiler error)
        //Nemerle.Imperative.Return;
      if (skipTestCases.Contains(testCase))
        true
      else
      {
        def name = starter.Substring(starter.IndexOf('}') + 1).Trim();
        def position = line.IndexOf(name);
        def location = Location(declaration.File, declaration.Line, position, declaration.Line, position + name.Length);
        def findings = if (alsoUsages) "definitions and usages" else "definitions";
        WriteLine($"\nSearching for $findings of '$name' (test case: $testCase, location: $location)... ");
        // TODO: find multiple declarations (partial classes)
        mutable shouldFindRing = MakeUsage(line, declaration, name, starter) ::
          ScanSources(checkPhrase, testCase).Map((line, _, location, _) => MakeUsage(line, location, name, checkPhrase));
        def foundMultiple =
          shouldFindRing.Map(goto =>
          {
            def location = goto.Location;
            def shift = if (name.Length > 1) 1 else 0;
            def find = if (alsoUsages) TheEngine.Project.GetUsages else TheEngine.Project.GetDefinition;
            find(location.File, location.Line, location.Column + shift).ToList()
          });
        Assert.IsFalse(foundMultiple.IsEmpty);
        def found = foundMultiple.FoldLeft(foundMultiple.Head, (ring, ring') =>
        {
          def warning = "Find Usages should produce the same results, disregarding on which usage a user places a cursor";
          def coincide = 
            try
            {
              FoldLeft2(ring, ring', true, (a, b, coincideToTheLeft) =>
                if (coincideToTheLeft) a.Location.CompareLines(b.Location) == 0 else false)
            }
            catch
            {
              | _ => false
            };
          when (stopAfterFirstFailedTest && alsoUsages)
            Assert.IsTrue(coincide, warning);
          ring
        });
        unless (alsoUsages)
          shouldFindRing = shouldFindRing.Filter(usage => usage.UsageType == UsageType.Definition);
        Write($"\n Should find $(shouldFindRing.Length) $findings... ");
        Write($"found $(found.Length) $findings, checking for correspondance... ");
        def success = FoundUsagesAreRight(testCase, shouldFindRing, found); // put breakpoint here to see what usages are actually found
        def message = if (success) "ok" else "incorrect!.. saving changes...";
        WriteLine(message);
        unless (success)
        {
          Assert.IsFalse(stopAfterFirstFailedTest);
          // TODO: save here instead of saving each time error happens
        }
        success
      }
    }
    
    public static Main() : void
    {
      if (runSpecificTest)
        RunTheTest();
      else
      {
        WriteLine("Running all tests...\n");

        def searchForProjects(folder, mutable accumulator = [])
        {
          def subfolders = Directory.GetDirectories(folder);
          accumulator += Directory.GetFiles(folder).ToList().Filter(_.EndsWith(".nproj"));
          foreach (subfolder in subfolders)
            accumulator += searchForProjects(subfolder);
          accumulator
        }

        def projects = searchForProjects(@"..\..\..\").Filter(path => !path.Contains("Heavy.Tests"));
        WriteLine($"$(projects.Length) projects found");

        // Attention! One suite for one project passes on the same engine,
        // this differs slightly from the NUnit-tests behaviour
        // (they use different engines for every test) - this is intentional
        def suites = [
          (FindDefinition, UsageTypeToString(UsageType.Definition), UsageTypeToString(UsageType.Usage)),
          (FindUsages, UsageTypeToString(UsageType.Definition), UsageTypeToString(UsageType.Usage))
        ];
        suites.Iter(suite => projects.Iter(projectPath =>
        {
          def runner = LoadProject(projectPath);
          runner.Test = suite[0](runner);
          WriteLine($"\nProcessing test suite $(suite[1]) for project $projectPath");
          runner.StarterPhrase = suite[1];
          runner.CheckPhrase = suite[2];
          runner.TestCases = runner.ScanSources(suite[1]);
          if (runner.skipTestProjects.Exists(projectPath.Contains(_)))
            WriteLine($"Skipping test suite '$(suite[1])'\n");
          else if (runner.TestCases.ForAll(runner.Test(_)))
            WriteLine($"\nTest suite '$(suite[1])' passed\n");
          else
            WriteLine($"\nTest suite '$(suite[1])' failed !!! !!! !!!\n");
        }));
        
        WriteLine("\nTests complete...");
      }
      _ = ReadLine();
    }
    
    public static LoadProject(projectPath : string) : TestRunner
    {
      def findEntries(entryStart, lines)
      {
        def lines = lines.Filter(_.Contains(entryStart));
        mutable entries = [];
        lines.Iter(line =>
        {
          def position = line.IndexOf(entryStart) + entryStart.Length;
          def path = line.Substring(position + 1);
          def path = path.Substring(0, path.IndexOf('"'));
          entries ::= path;
        });
        entries.Reverse()
      }

      def lines = File.ReadAllLines(projectPath).ToList();
      def projectFolder = projectPath.Substring(0, projectPath.LastIndexOf('\\'));
      def sources = findEntries("<Compile Include=", lines).Map(source => $@"$projectFolder\$source");
      Write($"$projectPath : $(sources.Length) source files found, ");
      def references = findEntries("<Reference Include=", lines).Map(reference =>
      {
        | "System" => "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        | "System.Data" => "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        | "System.Xml" => "System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        | _ => reference
      }) + [
        @"$(Nemerle)\Nemerle.Macros.dll",
      ];
      def references = references.Map(_.Replace("$(Nemerle)", @"C:\Program Files\Nemerle")).RemoveDuplicates();
      def references = references.Filter(reference => !reference.Contains("Nemerle"));
      WriteLine($"$(references.Length) reference files found");
      
      def runner = TestRunner();
      runner.InitializeEngine(sources, references);
      runner
    }
        
    public InitializeEngine(sources : list[string], references : list[string]) : void
    {
      WriteLine($"Initializing engine with $(sources.Length) sources");
      
      def callback = EngineCallbackStub(references, sources);
      engine = Engine(callback, TraceWriter());
      WriteLine($"Compiler is in completion mode: $(engine.IsIntelliSenseMode)");
      
      sources.Iter(source => TheEngine.Sources.AddOrUpdate(source, File.ReadAllText(source)));
      Assert.AreEqual(TheEngine.Sources.Count, sources.Length);

      project = engine.Project;
      Assert.IsNotNull(project);
    }
  }
}
