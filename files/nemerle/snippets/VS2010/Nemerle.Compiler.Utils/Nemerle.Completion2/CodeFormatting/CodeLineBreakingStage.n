using System;  
using System.Diagnostics;

using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Utils;
using Nemerle.Completion2;
using Nemerle.Compiler.Parsetree;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2.CodeFormatting
{
/* TODO: Implement a simple line breaker                             
 * Provide conversion between two main open brace style: the K&R style and the other. :-)
 * List of constructs that will support brace formatting: namespace, type definitions, methods,
 *  properties, local functions, match expressions (foreach, for, if/else and other macros that change 
 *  syntax will be added later).
 *
 *
 */
  class CodeLineBreakingStage : CodeFormattingStageBase
  {
    
    mutable _startLine = 0;
    mutable _endLine = 0;
    
    mutable _expectedLine = 1;

    mutable _insertedLines = 0;
    
    _BreakLine(_loc : Location)  : void
    {
    
    }
    
    _UnBreakLine(_loc : Location) : void
    {
    
    }

    SetExpectedLine(val : int) : void
    {
      _expectedLine = val;
      _insertedLines = 0;
    }
    
    #region Helper methods
    
    LineBreak(loc : Location) : void
    {
      AddResult(FormatterResult.Insert(loc.Line, loc.Column, Environment.NewLine));
    }
    
    NeededLineBreaks(loc : Location) : int
    {
      match(_expectedLine - (loc.Line + _insertedLines))
      {
      | x when x > 0 => x;
      | _ => 0;
      };
    }
    
    #endregion
    
    FormatBrace(token : Token) : void
    {
      def newLineBreaks = NeededLineBreaks(token.Location);
      when(newLineBreaks > 0)
      {
        LineBreak(token.Location);
        _insertedLines += 1;
      }

      _expectedLine++;
    }
    
    FormatNamespace(ns : Decl.Namespace) : void
    {
      def beginBrace = _tokenFinder.FindNextIf(ns.Location.Line, ns.Location.Column, tok => tok is Token.BeginBrace);
      
      match(ns.Name)
      {
      | _ :: _ => // if namespace name isn't empty (not global namespace)
          SetExpectedLine(ns.Location.Line + 1);
          FormatBrace(beginBrace);
      | _ => ();
      }
      
      foreach(x in ns.Decls)
      {
        match(x)
        {
          | Decl.Namespace as n => FormatNamespace(n);
          | Decl.Type(ast) => FormatType(ast.TypeBuilder);
          | Decl.Using as u => FormatUsing(u);
          | _ => ()
        }
      }
      // TODO: Format end brace here.
      
    }
    
    FormatUsing(us : Decl.Using) : void
    {
      def newLineBreaks = NeededLineBreaks(us.Location);
      when(newLineBreaks > 0)
      {
        LineBreak(us.Location);
        _insertedLines++;
      }

      _expectedLine++;
    }

    FormatMethod(mb : MethodBuilder) : void
    {
      unless(mb.IsGenerated)
      {
        SetExpectedLine(mb.Header.Location.EndLine + 1);
        def beginBrace = _tokenFinder.FindNextIf(mb.Header.Location.EndLine, mb.Header.Location.EndColumn, tok => tok is Token.BeginBrace);
        FormatBrace(beginBrace);

        // TODO: Format every expression

        def endBrace = GetNextPairedBrace(beginBrace);
        //AddResult(FormatterResult.Insert(endBrace.Location.Line, endBrace.Location.Column, "/*endBrace*/"));   
        FormatBrace(endBrace);

        SetExpectedLine(endBrace.Location.EndLine + 1);
      }
    }

    FormatProperty(pb : PropertyBuilder) : void
    {
      // TODO: Format opening brace
      // TODO: Format possible field definitions
      // TODO: Format accessors (simple ones should be one-line'd)
      // TODO: Format closing brace
      
      SetExpectedLine(pb.Location.EndLine + 1); 
      
    }
    
    FormatField(fb : FieldBuilder) : void
    {
      //TODO: Implement method
      SetExpectedLine(fb.Location.EndLine + 1);
    }
    
    FormatEvent(eb : EventBuilder) : void
    {
      //TODO: Implement method
      SetExpectedLine(eb.Location.EndLine + 1);
    }
    
    FormatClassMember(member : IMember) : void
    {
    | mmb is MemberBuilder => // fields, properties, methods, events
        unless(mmb.IsGenerated)
        {
          match(mmb)
          {
          | mb is MethodBuilder => FormatMethod(mb);
          | pb is PropertyBuilder => FormatProperty(pb);
          | fb is FieldBuilder => FormatField(fb);
          | eb is EventBuilder => FormatEvent(eb);
          | _ => Debug.WriteLine($"!!! Unhandled MemberBuilder type in FormatClassMember: $(mmb.GetType().Name)");  
          }
        }
    | tb is TypeBuilder => FormatType(tb);
    | _ => Debug.WriteLine($"!!! Unhandled member type in FormatClassMember: $(member.GetType().Name)");  
    }
    
    FormatType(tb : TypeBuilder) : void
    {
      unless(tb.Location.IsGenerated)
      {
        def part = match(tb.AstParts.Find(part => part.Location.FileIndex == _fileIndex))
                    {
                    | Some(val) => val
                    | None => throw ApplicationException($"No type part found in file $_fileIndex");
                    };
        
        // TODO: Format base class and implemented interfaces list.
        
        SetExpectedLine(part.name.Location.EndLine + 1);
        def beginBrace = _tokenFinder.FindNextIf(part.name.Location.EndLine, part.name.Location.EndColumn, tok => tok is Token.BeginBrace);
        FormatBrace(beginBrace);
        
        foreach(member in tb.GetDirectMembers())
          FormatClassMember(member);
        
        def endBrace = GetNextPairedBrace(beginBrace);
        FormatBrace(endBrace);

        SetExpectedLine(endBrace.Location.EndLine + 1);
      }
    }

    #region IFormattingStage members

    public this(engine : IIdeEngine, source : IIdeSource)
    {
      base(engine, source);
    }
    
    public override FormatRegion(loc : Location) : SCG.List[FormatterResult]
    {
      _ = base.FormatRegion(loc);
      FormatDocument();
    }

    public override FormatDocument() : SCG.List[FormatterResult]
    {
      Prepare();
      
      FormatNamespace(rootNamespaceNode);
      GetResults();
    
    }
    
    #endregion    

  }

}
