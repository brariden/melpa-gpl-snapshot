using System;
using System.IO;
using System.Diagnostics;

using SCG = System.Collections.Generic;
using SR  = System.Reflection;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;

using TT = Nemerle.Compiler.Typedtree;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;
using NC = Nemerle.Compiler;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    DoImportCompletion(env : GlobalEnv, pattern : string, loc : Location) : CompletionResult
    {
      def elems = SCG.List();
      AddAllTypeAndStatic(elems, this.CoreEnv.NameTree.NamespaceTree, pattern, false, false);
      def completionResult = CompletionResult(elems, pattern, loc, false);
      completionResult.Env = env;
      completionResult
    }

    public AddAllTypeAndStatic(
      [NotNull] elems     : SCG.List[Elem],
      [NotNull] root      : NamespaceTree.Node,
      [NotNull] pattern   : string,
                noMacros  : bool,
                noMembers : bool
    ) : void
    {
      def isAll = string.IsNullOrEmpty(pattern); // don't use pattern
      // scan namespace tree node and add appropriate nodes into 'elems' list.
      def scanAndAdd(node : NamespaceTree.Node) : void
      {
        def scanStaticMembers(ti : NC.TypeInfo) : void
        {
          foreach (member in ti.GetMembers (BindingFlags.Public | BindingFlags.Static))
            when (isAll || Completion.MatchName(member.GetName(), pattern))
              elems.Add(Elem.Member(member));
        }
        def tryAddNode(name : string, node : NamespaceTree.Node) : void
        {
          when (isAll || Completion.MatchName(name, pattern))
            elems.Add(Elem.Node(name, node));
        }
        
        node.EnsureCached();

        when (node.Children != null)
          foreach (elem in node.Children.NToArray())
          {
            def name = elem.Key;
            def subNode = elem.Value;
            
            subNode.EnsureCached();

            match (subNode.Value)
            {
              | No => ()
              | NamespaceReference => scanAndAdd(subNode)
              | MacroCall(macr) => 
                when (!noMacros)
                  if (macr.Keywords.IsEmpty)
                    when (isAll || Completion.MatchName(name, pattern))
                      tryAddNode(subNode.PartName, subNode);
                  else foreach (keyword when isAll || Completion.MatchName(keyword, pattern) in macr.Keywords)
                    tryAddNode(keyword, subNode);
              
              | Cached(ti) =>
                tryAddNode(name, subNode);
                when (!noMembers && ti.TyparmsCount == 0)
                  scanStaticMembers(ti);
              
              | CachedAmbiguous(typeInfos) =>
                tryAddNode(name, subNode);
                unless (noMembers)
                  foreach (ti when ti.TyparmsCount == 0 in typeInfos)
                    scanStaticMembers (ti);
                    
              | NotLoaded | NotLoadedList => assert(false);
            }
          }
      }

      scanAndAdd(root)
    }

    // Callback method. Process completion in expressin.
    protected override Complete(
      expression : PExpr,
      expected   : TypeVar,
      typer      : Typer,
      env        : GlobalEnv,) : TExpr
    {
      match (expression)
      {
        | PExpr.Member(obj, Splicable.HalfId(name)) =>
          def obj = obj; // for debug
          def name = name; // for debug
          def elems = SCG.List();
          def elems2 = elems; // for debug
          _ = elems2;
          def tobj = 
            match (typer.TryTyping(() => typer.TypeExpr(obj)))
            {
              | TExpr.Error => typer.TypeName(obj)
              | e => e
            };
          def tobj2 = tobj;
          _ = tobj2;
          def typeHint = tobj.Type.Hint;

          def AddOverloads(overloads)
          {
            unless (overloads.IsEmpty)
              elems.Add(Elem.Overloads (overloads));
          }

          def tryInterpretAsGlobals()
          {
            def nss = this.CoreEnv.NameTree.NamespaceTree :: name.GetEnv(env).OpenNamespaces;
            Completion.AddTypesAndNamespaces (elems, nss, obj, name, false, false);
          }

          def tryInterpretAsQualifiedName() : void
          {
            // Try interpret as qualified name...
            def overloads = typer.TypeNameFull(expression, typer.Solver.FreshTypeVar(), true);
            AddOverloads(overloads);
          }

          def tryInterpretAsExtensionMethods(typeHint) : void
          { // Try get extention methods...
            | Some(ty is FixedType) =>
              def extMethods = 
                if (IsImportCompletion)
                  this.LibrariesManager.GetExtensionMethodsForCompletion(name.Id);
                else
                  this.LibrariesManager.GetExtensionMethodsForCompletion(name.Id, name.GetEnv(env));

              foreach (method when this.IsExtensionMethod(method, ty) in extMethods)
                foreach (over in typer.ConstructMethodOverload(null, method, null, true))
                {
                  over.ExtensionMethodObject = tobj;
                  elems.Add(Elem.Overload (over));
                }
            | _ => ()
          }

          def tryInterpretAsMemberAccess(typeHint, tobj) : void
          {
            tryInterpretAsExtensionMethods(typeHint);
            // Try interpret as member access at general expression...
            when (typer.TypeMember (tobj, name, expected, true) is Some(lst))
              AddOverloads(lst);
          }

          def makeCompletionResultException()
          {
            def compl_exc        = CompletionResult(elems, name.Id, name.Location, true);
            compl_exc.ObjectType = tobj.Type.Fix();
            compl_exc.Env        = env;
            compl_exc
          }

          match (tobj2)
          {
            | TExpr.Delayed(susp) => 
              match (susp.DtKind)
              {
                | Overloaded(overloads) => // collect members for all overloads
                  foreach (o in overloads)
                    _ = typer.JustTry(
                      fun()
                      { 
                        def res = o.Compile();
                        tryInterpretAsMemberAccess(res.Type.Hint, res);
                        42 // we need return somethink
                      });
                | _ => ()
              }
            | _ => ()
          }

          tryInterpretAsQualifiedName();
          tryInterpretAsGlobals();
          tryInterpretAsMemberAccess(typeHint, tobj);

          match (typeHint)
          {
            | None when elems.Count == 0 =>
              def inspectedTypes = Hashtable();
              mutable attempts = 0;

              // Нам нужно заменить текущее выражение на DelayAction, если тип к данному моменту не выведен.
              // При этом мы используем свежую TypeVar, что позволит продолжить компиляцию, так как
              // она будте совместима с любым типом.

              def res = typer.DelayAction(null, typer.Solver.FreshTypeVar(), Typer.DelayedLambdaAction(
                fun (lastTry)
                {
                  attempts++; // защищаемся от очень большоко количества (over 9000) переборов.

                  match (tobj.Type.Hint)
                  {
                    | Some(ty) => 
                      def tobj      = tobj; // for debug
                      def typeName  = ty.ToString();

                      //FIXMY: Переведи меня на ангийский ;)
                      // При спекулятивной типизации сюда мы можем попадать много раз...
                      unless (inspectedTypes.Contains(typeName))
                      {
                        // Чтобы не переполнить список повторами запоминаем обработанные типы...
                        inspectedTypes[typeName] = true;
                        // ... и для каждого типа собираем список членов.
                        // Это позволит получить список автодополнения даже при неоднозначностях.
                        tryInterpretAsMemberAccess(ty.Hint, tobj);
                      }

                    | None => ()
                  }

                  when (lastTry || attempts > 9000)
                    throw makeCompletionResultException();  

                  None()
                }));
              res
            | _ => throw makeCompletionResultException()

          }

        | PExpr.Member(obj, _) =>
          // Try find completion token in nested member access expressions.
          Complete (obj, expected, typer, env); 

        | PExpr.ToComplete(name) =>
          def pattern = name.Id;
          def loc     = name.Location;
          
          if (IsImportCompletion)
            throw DoImportCompletion(env, pattern, loc)
          else
          {
            def overloads = typer.TypeNameFull(expression, expected, for_completion = true);

            def elems = SCG.List();
            elems.Add(Elem.Overloads(overloads));

            // find locals
            foreach ((name, local) when Completion.MatchName(name.Id, pattern) in typer.LocalContext.GetLocals())
              elems.Add(Elem.Local(local));

            // add namespaces and types

            def nss = this.CoreEnv.NameTree.NamespaceTree :: name.GetEnv(env).OpenNamespaces;
            Completion.AddTypesAndNamespaces(elems, nss, null, name, false, false);
            
            // Try wait for all types has been resolved.
            def delayed = typer.DelayAction(null, typer.Solver.FreshTypeVar(), Typer.DelayedLambdaAction(
              fun(lastTry)
              {
                when (lastTry)
                {
                  def elems = elems;

                  foreach (parameterName in _completionParameterNames)
                    elems.Add(Elem.Simple(parameterName, "named parameter", 0));

                  def completionResult = CompletionResult(elems, pattern, loc, false);
                  completionResult.Env = env;
                  throw completionResult;
                }
                None()
              }));

            if (name.Id.Trim() == "")
              delayed
            else
            {
              // Continue typing with ref to name...
              def res = try { typer.TypeExpr(PExpr.Ref(name.Location, name)); }
                        catch { _ => TExpr.Error() };
              if (res is TExpr.Error) delayed else res
            }
          }

        | _ => null;
      }
    }

    /// Callback method. Process completion in patterns.
    protected override CompletePattern (
      expression         : PExpr,
      matched_value_type : TypeVar,
      patternTyper       : Typer.PatternTyper,
      env                : GlobalEnv
    )
      : void //
    {
      assert(true);
      match (expression)
      {
        | PExpr.Is(_nested, PExpr.ToComplete(name) as e) with obj = null
        | PExpr.Is(_nested, PExpr.Member(obj, Splicable.HalfId(name)) as e) =>
          def obj = obj;
          def name = name;
          def elems = SCG.List ();
          _ = e;

          def nss = this.CoreEnv.NameTree.NamespaceTree 
            :: name.GetEnv(this.CoreEnv).OpenNamespaces;
          Completion.AddTypesAndNamespaces (elems, nss, obj, name, true, true);

          def completionResult = CompletionResult(elems, name.Id, name.Location, obj != null);
          completionResult.Env = env;
          throw completionResult;

        | PExpr.Tuple([PExpr.Call(PExpr.ToComplete(name) as e, _)]) with obj = null
        | PExpr.Call(PExpr.ToComplete(name) as e, _)                with obj = null
        | PExpr.ToComplete(name) as e                               with obj = null
        | PExpr.Tuple([PExpr.ToComplete(name) as e])                with obj = null
        | PExpr.Member(obj, Splicable.HalfId(name)) as e =>
          def name = name;
          def obj = obj;
          def elems = SCG.List ();
          
          elems.Add(Elem.Simple("_", "wildcard", 0));

          match (matched_value_type.Hint)
          {
            | Some(ty) =>
              def pattern = name.Id;
              match (ty)
              {
                | FixedType.Class (ti, args) =>
                  match (ti.GetTydecl())
                  {
                    | TT.TypeDeclaration.Variant (members) => // Pattern is VariantOption.
                      // Add VariantOption's to completion list.
                      foreach (m when Completion.MatchName(m.Name, pattern) in members)
                        elems.Add(Elem.Node(m.Name, m.NamespaceNode));

                      def tryAddName(name)
                      {
                        when (Completion.MatchName(name, pattern))
                          elems.Add(Elem.Node(name, ti.NamespaceNode))
                      }

                      // If namespace which define matched_value_type open
                      // add the type name to completion list.
                      when (obj == null)
                        match (env.LookupType([ti.Name], null, args.Length))
                        {
                          | Some => tryAddName(ti.Name)
                          | _    =>
                            // Add full name of matched_value_type to completion list.
                            tryAddName (ti.NamespaceNode.GetDisplayName());
                        }
                      
                    def completionResult = CompletionResult(elems, name.Id, name.Location, obj != null);
                    completionResult.Env = env;
                    throw completionResult;

                  //| TypeDeclaration.VariantOption =>
                    | _ => System.Console.WriteLine(ty);
                  }
                | _ => System.Console.WriteLine(ty);
              }

            | None => System.Console.WriteLine(matched_value_type);
          }

          _ = Complete(e, patternTyper.Typer.FreshTypeVar(), patternTyper.Typer, env);

          //def nss = this.CoreEnv.NameTree.NamespaceTree 
          //  :: name.GetEnv(this.CoreEnv).OpenNamespaces;
          //Completion.AddTypesAndNamespaces (elems, nss, obj, name, true, true);
          
          //def completionResult = CompletionResult(elems, name.Id, name.Location, obj != null);
          //completionResult.Env = env;
          //throw completionResult;
          assert(true);

        | _ => assert(true);
      }
    }

    /// Process completion in type reference.
    protected override CompleteTypeRef (
      expression     : PExpr,
      curTypeBuilder : TypeBuilder,
      env            : GlobalEnv
    )
      : void
    {
      ignore (curTypeBuilder);

      match (expression)
      {
        | PExpr.ToComplete(name) when IsImportCompletion => throw DoImportCompletion(env, name.Id, name.Location);
        | _                                              => base.CompleteTypeRef(expression, curTypeBuilder, env)
      }
    }
  } // end class Engine
} // end namespace
