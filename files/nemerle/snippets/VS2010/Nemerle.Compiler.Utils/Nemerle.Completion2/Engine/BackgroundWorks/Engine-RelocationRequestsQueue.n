using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Surround;

namespace Nemerle.Completion2
{
	public module RelocationQueue
	{
    public static AddRelocationRequest(
      relocationRequestsQueue : List[RelocationRequest],
      fileIndex     : int, sourceVersion : int,
      newEndLine    : int, newEndChar    : int,
      oldEndLine    : int, oldEndChar    : int,
      startLine     : int, startChar     : int
    )
      : void
    {
      def req = RelocationRequest(fileIndex, sourceVersion, newEndLine, newEndChar,
        oldEndLine, oldEndChar, startLine, startChar);

      lock (relocationRequestsQueue)
        relocationRequestsQueue.Enqueue(req);
    }
    
    /// Remove all relocation requests with SourceVersion less then 'toVersion'.
    public static RemoveOldRequests(relocationRequestsQueue : List[RelocationRequest], toVersion : int) : void
    {
      lock (relocationRequestsQueue)
        _ = relocationRequestsQueue.RemoveAll(request => request.SourceVersion <= toVersion);
    }
    
    public static GetRelocationRequests(relocationRequestsQueue : List[RelocationRequest]) : List[RelocationRequest]
    {
          /// Returns null if no more elements
      def dequeueMergedRelocationRequest(queue : List[RelocationRequest]) : RelocationRequest
      {
        match (queue.Count)
        {
          | 1 => queue.Dequeue(); 
          | 0 => throw Exception() // заменить на конкретное исключение
          | _ =>
            def tryMerge(f : RelocationRequest, s : RelocationRequest) : bool * RelocationRequest // first, second
            {
              assert2(f.FileIndex         == s.FileIndex);
              assert2(f.SourceVersion + 1 == s.SourceVersion);

              if (f.New == s.Begin && s.Old == s.Begin)
                (true, RelocationRequest(s.FileIndex, s.SourceVersion, f.Begin, s.New, f.Old))
              else
                (false, f)
            }
            def merge(queue, first, index)
            {
              def second = queue[index];
              def (isMerged, result) = tryMerge(first, second); // пытаемся объеденить
              def newIndex = index + 1;

              if (isMerged && newIndex < queue.Count)
                merge(queue, result, newIndex)
              else
              {
                queue.RemoveRange(0, index + if (isMerged) 1 else 0);
                result
              }
            }

            merge(queue, queue[0], 1)
        }
      }

      // Последовательно вынимать элементы из очереди и пытаться объеденить их со следующим
      // элементом. Если больше элементов нет, то возвратить накомпленный элемент.
      // Если элементы нельзя объеденить (между изменениями есть неизмененный текст),
      // то возвратить несколько элементов.
      def result = List();

      lock (relocationRequestsQueue)
        while (relocationRequestsQueue.Count > 0)
        {
          //assert2(result.Count < 4);
          result.Add(dequeueMergedRelocationRequest(relocationRequestsQueue));
        }

      result
    }
  } // end class Engine
} // end of Nemerle.Completion2 namespace
