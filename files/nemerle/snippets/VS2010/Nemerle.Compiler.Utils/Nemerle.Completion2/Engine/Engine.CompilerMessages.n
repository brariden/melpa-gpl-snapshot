using Nemerle.Compiler;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Imperative;
using Nemerle.Utility;

using System;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    mutable _currentMessages         : SCG.List[CompilerMessage];
    mutable _currentMethod           : MethodBuilder;
    mutable _isCompileUnit           : bool;
    mutable _mainMessage             : CompilerMessage;
            _mainMessagesSteak       : SCG.Stack[CompilerMessage] = SCG.Stack();
    mutable _isFirstRelatedMessages  : bool;
    mutable _isSecondRelatedMessages : bool;

    private Check_currentMessages() : void
    {
      when (_currentMessages == null)
      {
        System.Diagnostics.Debug.WriteLine("_currentMessages is null???");
        _currentMessages = SCG.List();
      }
    }

    public CurrentMessages : array[CompilerMessage]
    {
      get 
      { 
          Check_currentMessages();
          _currentMessages.ToArray()
      }
    }

    ProcessTopLevelCompilerMessage(location : Location, message : string) : void
    {
      def check(text, add)
      {
        if (message.IndexOf(text) >= 0)
        {
          add(message.Substring(message.IndexOf(text) + text.Length), location);
          true
        }
        else
          false
      }

      _= check("error: ",   AddCompilerMessage(_, _, MessageKind.Error))
      || check("warning: ", AddCompilerMessage(_, _, MessageKind.Warning))
      || check("hint: ",    AddCompilerMessage(_, _, MessageKind.Hint));
    }

    /// Send errors taken when parse and type the 'member'. 
    /// This method should set messag into 'Error List' window of IDE, for example.
    public ReportMemberErrors(member : MemberBuilder) : void
    {
      System.Diagnostics.Debug.Assert(member != null, "'member' prametr is null!");
      Check_currentMessages();
          
      def messages = CurrentMessages; // closure copy of list (array)
      AsyncWorker.AddResponse(() => _callback.SetMethodCompilerMessages(member, messages));
    }

    public AddCompilerMessage(message : string, loc : Location, kind : MessageKind) : void
    {
      when (!AsyncWorker.IsRunSynchronously && !AsyncWorker.IsCurrentThreadTheAsyncWorker)
        return; // probably this is a coloring lexer found ambiguity type...
        
      def loc2 = if (loc.EndLine > loc.Line) Location(loc, loc.Line, loc.Column, loc.Line + 1, 1)
                 else                        loc;

      Check_currentMessages();

      def isSecond = _isSecondRelatedMessages;
      
      def msg = 
        if (_isCompileUnit)
          CompilerMessageForCompileUnit(loc2, message, kind, this, isSecond)
        else if (_currentMethod != null)
          CompilerMessageForMethod(loc2, message, kind, this, isSecond, _currentMethod)
        else
          CompilerMessage  (loc2, message, kind, this, isSecond);

      when (isSecond)
        _mainMessage.RelatedMessages.Add(msg);

      when (_isFirstRelatedMessages)
      {
        _isSecondRelatedMessages = true;
        _isFirstRelatedMessages  = false;
        _mainMessage             = msg;
      }

      _currentMessages.Add(msg);
    }
    
    public override BeginRelatedMessageSequence() : void
    {
      when (_mainMessage != null)
        _mainMessagesSteak.Push(_mainMessage);

      _isFirstRelatedMessages = true;
    }

    public override EndRelatedMessageSequence()   : void
    {
      _isFirstRelatedMessages  = false;

      if (_mainMessagesSteak.Count == 0)
      {
        _isSecondRelatedMessages = false;
        _mainMessage             = null;
      }
      else
        _mainMessage = _mainMessagesSteak.Pop();
    }
  } // end class Engine
} // end namespace

