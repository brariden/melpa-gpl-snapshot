using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Utility;

using PT = Nemerle.Compiler.Parsetree;
using CS = CSharpParser;

[assembly: Nemerle.Internal.RegisterParser("CSharpToNemerle.CSharpParser", ".cs")]

namespace CSharpToNemerle
{
  [Record]
  public class CSharpParser : IParser
  {
    manager : ManagerClass;

    public Parse(source : ISource) : ParseResult
    {
      def fileName = Location.GetFileName(source.FileIndex);
      def source = Nemerle.Peg.SourceSnapshot(source.GetText(), source.FileIndex, fileName);

      def preParser = CS.PreParser();
      match(preParser.Parse(source))
      {
        | Some(preAst) =>
          def definedSymbols = manager.Options.CommandDefines.Fold([],
            (symbol, isDefined, acc) => if(isDefined) symbol :: acc else acc);

          def preResult = CS.Preprocessor.Run(preAst, definedSymbols);
          when(preResult.HasErrors)
          {
            foreach(error in preResult.Errors)
              Message.Error(LocationConverter.Default.Convert(error.Location), $"preprocessor: $error");
          }

          def locationConverter =
            if(preResult.LineHints.Count > 0)
              DirectiveLocationConverter(preResult.LineHints)
            else
              LocationConverter.Default;

          foreach(directive in preResult.CompilationMessages)
          {
            | CompilationError(msg) =>
              Message.Error(locationConverter.Convert(directive.Location), msg);

            | CompilationWarning(msg) =>
              Message.Warning(locationConverter.Convert(directive.Location), msg);

            | _ => ()
          }

          unless(string.IsNullOrEmpty(manager.Options.XmlDocOutputFileName))
          {
            mutable docComments = manager.DocComments ?? Map();
            foreach(docComment in preResult.DocComments)
            {
              def loc = locationConverter.Convert(docComment.Location);
              def doc = System.Text.StringBuilder(200);
              foreach(part in docComment.values)
                _ = doc.Append(part.Source.OriginalText, part.StartPos, part.EndPos - part.StartPos).AppendLine();
              docComments = docComments.Replace(loc, doc.ToString());
            }
            manager.DocComments = docComments;
          }

          def parser = CS.Parser();
          match(parser.Parse(preResult.Source))
          {
            | Some(unit) =>
              def converter = AstConverter(manager);
              ParseResult(converter.Convert(unit, locationConverter, preResult.Defines))

            | _ =>
              def (errorPos, _) = parser.GetMaxRollbackPosAndIds();
              def loc = Nemerle.Peg.Location(source, errorPos, errorPos);
              Message.FatalError(locationConverter.Convert(loc), $"failed to parse file `$fileName'.")
          }

        | _ =>
          def (errorPos, _) = preParser.GetMaxRollbackPosAndIds();
          def loc = Nemerle.Peg.Location(source, errorPos, errorPos);
          Message.FatalError(LocationConverter.Default.Convert(loc), $"failed to pre-parse file `$fileName'.")
      }
    }
  }
}