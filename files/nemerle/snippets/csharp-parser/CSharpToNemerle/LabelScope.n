using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Collections;
using Nemerle.Compiler;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  internal sealed class LabelScope
  {
    private sealed class LabelInfo
    {
      public this(id : int)
      {
        this.id = id;
        this.UsageLocations = [];
      }

      [Accessor] id : int;
      public IsUsed : bool { get; set; }
      public IsDeclared : bool { get; set; }
      public UsageLocations : list[Location] { get; set; }
      public DeclarationLocation : Location { get; set; }
    }

    public this(manager : ManagerClass, locationConverter : LocationConverter)
    {
      this.manager = manager;
      this.locationConverter = locationConverter;
    }

    public UseLabel(name : CS.Identifier) : int
    {
      def label = GetLabelInfo(name.Id);
      label.IsUsed = true;
      label.UsageLocations ::= locationConverter.Convert(name.Location);
      label.Id
    }

    public DeclareLabel(name : CS.Identifier) : int
    {
      def label = GetLabelInfo(name.Id);
      if(label.IsDeclared)
        Message.Error(locationConverter.Convert(name.Location), $"redeclared label `$(name.Id)'");
      else
      {
        label.IsDeclared = true;
        label.DeclarationLocation = locationConverter.Convert(name.Location);
      }
      label.Id
    }

    public DeclareLabelForSwitchCase() : int
    {
      def label = GetLabelInfo(Macros.NewSymbol().Id);
      label.IsDeclared = true;
      label.IsUsed = true;
      label.Id
    }

    private GetLabelInfo(name : string) : LabelInfo
    {
      table.GetValue(name, () => LabelInfo(manager.GetNewId(name)))
    }

    public CheckLabels() : void
    {
      foreach(item with (name = item.Key, label = item.Value) in table)
      {
        unless(label.IsUsed)
          Message.Warning(label.DeclarationLocation, $"label `$name' is declared but never used");

        unless(label.IsDeclared)
          foreach(loc in label.UsageLocations)
            Message.Error(loc, $"label `$name' is undefined");
      }
    }

    private table : Hashtable[string, LabelInfo] = Hashtable(10);

    [Accessor] private manager : ManagerClass;
    [Accessor] private locationConverter : LocationConverter
  }
}