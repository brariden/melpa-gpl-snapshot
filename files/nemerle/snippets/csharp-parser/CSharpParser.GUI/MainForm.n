using Nemerle.Collections;
using Nemerle.Peg;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using CSharpParser;

namespace CSharpParser.GUI
{
  /// <summary>
  /// Description of MainForm.
  /// </summary>
  public partial class MainForm : Form
  {
    public this()
    {
      InitializeComponent();
    }

    mutable _parser : Parser;

    private btn_parse_Click(_sender : object, _e : System.EventArgs) : void
    {
      def preParser = CSharpParser.PreParser();
      _parser = CSharpParser.Parser();

      def timer = Diagnostics.Stopwatch.StartNew();
      def source = Nemerle.Peg.SourceSnapshot(txt_input.Text);

      def (pos, preAst) = preParser.TryParse(source);
      if(pos > 0)
      {
        def preResult = Preprocessor.Run(preAst, []);
        def (pos, ast) = _parser.TryParse(preResult.Source);
        if(pos > 0)
        {
          btn_show_error.Visible = false;
          def errors = ast.GetParseErrors();
          txt_output.Text = $<#Parsing took $(timer.Elapsed) $(txt_input.Text.Length / timer.Elapsed.TotalSeconds / 1024)KB/S
Errors: $(errors.Count)$("\r\n")..$(errors; "\r\n")#> + "\r\n" + ast.ToString();
        }
        else
        {
          btn_show_error.Visible = true;
          def (_, ids) = _parser.GetMaxRollbackPosAndIds();
          txt_output.Text = $"Parsing took $(timer.Elapsed) $(txt_input.Text.Length / timer.Elapsed.TotalSeconds / 1024)KB/S\r\nError in inpute.\r\nExpected:\n"
                          + $<#    ..$(ids; "\r\n    "; id => _parser.GetRuleName(id))#>;
        }
      }
      else
      {
        txt_output.Text = "Pre-parse step failed.";
      }
    }

    private HighlightPos(pos : int, len : int) : void
    {
      txt_input.SelectionStart = pos;

      txt_input.ScrollToCaret();
      txt_input.SelectionLength = len;
      txt_input.Select();
    }

    private btn_show_error_Click (_sender : object,  _e : System.EventArgs) : void
    {
      def (pos, _) = _parser.GetMaxRollbackPosAndIds();
      HighlightPos(pos, 1);
    }

    private txt_output_DoubleClick (_  : object,  _e : System.EventArgs) : void
    {
      def getCurrebtLine(text : string)
      {
        def selStart = txt_output.SelectionStart;
        def start = text.LastIndexOf('\n', selStart);
        def start2 = if (start < 0) 0 else start + 1;
        def index = text.IndexOf('\n', selStart);
        def len = if (index < 0) text.Length - start2 else index - start2;
        text.Substring(start2, len)
      }

      def lineText = getCurrebtLine(txt_output.Text);
      def loc = Located.ExtractPosAndLen(lineText);

      unless (loc is (-1, -1))
        HighlightPos(loc);
    }
  }
}
