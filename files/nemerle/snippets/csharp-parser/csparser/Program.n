using System;
using System.IO;
using System.Console;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Peg;
using Nemerle.Surround;
using Nemerle.Utility;

[assembly: DefineSurround("Red", false,
  Console.ForegroundColor = ConsoleColor.Red,
  Console.ResetColor())]

[assembly: DefineSurround("Green", false,
  Console.ForegroundColor = ConsoleColor.Green,
  Console.ResetColor())]

[assembly: DefineSurround("Yellow", false,
  Console.ForegroundColor = ConsoleColor.Yellow,
  Console.ResetColor())]

namespace csparser
{
  module Program
  {
    Main(fileMasks : array[string]) : void
    {
      def timer = Diagnostics.Stopwatch.StartNew();
      mutable totalFiles = 0;
      mutable totalFails = 0;
      mutable totalErrors = 0;
      foreach(nextMask in fileMasks)
      {
        def (nextFiles, nextFails, nextErrors) = ProcessFiles(nextMask);
        totalFiles += nextFiles;
        totalFails += nextFails;
        totalErrors += nextErrors;
      }
      def elapsedTime = timer.Elapsed;
      match((totalFiles, totalFails, totalErrors))
      {
        | (0, _, _) =>
          surroundwith(Yellow)
            WriteLine("No files to parse.");

        | (_, 0, 0) =>
          surroundwith(Green)
            WriteLine($"Successfully parsed $totalFiles files in $elapsedTime.");

        | (_, 0, _) =>
          surroundwith(Yellow)
            WriteLine($"Parsed $totalFiles files with $totalErrors syntax errors in $elapsedTime.");

        | (_, _, 0) =>
          surroundwith(Red)
            WriteLine($"Failed to parse $totalFails of $totalFiles files in $elapsedTime.");

        | (_, _, _) =>
          surroundwith(Red)
            WriteLine($"Failed to parse $totalFails of $totalFiles files with $totalErrors syntax errors in $elapsedTime.");
      }
      _ = ReadKey(true)
    }

    ProcessFiles(fileMask : string) : int * int * int
    {
      mutable files = 0;
      mutable fails = 0;
      mutable errors = 0;

      def maskFileDir =
        match(Path.GetDirectoryName(fileMask))
        {
          | "" => Environment.CurrentDirectory
          | x => x
        }
      def maskFileName = Path.GetFileName(fileMask);
      def fileNames =
        if(fileMask.IndexOfAny(array['*', '?']) >= 0)
          Directory.GetFiles(maskFileDir, maskFileName, SearchOption.AllDirectories)
        else
          Directory.GetFiles(maskFileDir, maskFileName);

      foreach(fileName in fileNames)
      {
        files += 1;
        try
        {
          def preParser = CSharpParser.PreParser();
          def source =
            using(file = IO.FileStream(fileName, IO.FileMode.Open, IO.FileAccess.Read))
            using(reader  = IO.StreamReader(file, Text.Encoding.ASCII, true))
              SourceSnapshot(reader.ReadToEnd(), 1, fileName);

          def displayError(errorPos)
          {
            def errorLocation = source.GetSourceLine(errorPos);
            def line = errorLocation.StartLineColumn[0];
            def col = errorPos - errorLocation.StartPos + 1;
            WriteLine($"[$line:$col]:");
            WriteLine(errorLocation.GetText().TrimEnd(array['\r', '\n', '\u2028', '\u2029']));
            surroundwith(Yellow)
            {
              Write(string('-', col - 1));
              WriteLine('^'); // error pointer
            }
            WriteLine();
          }

          match(preParser.Parse(source))
          {
            | Some(preAst) =>
              def preResult = CSharpParser.Preprocessor.Run(preAst, []);
              when(preResult.HasErrors)
              {
                errors += preResult.Errors.Count;
                foreach(error in preResult.Errors)
                {
                  WriteLine(error);
                  displayError(error.Location.StartPos);
                }
              }

              def parser = CSharpParser.Parser();
              match(parser.Parse(preResult.Source))
              {
                | Some(unit) =>
                  def parseErrors = unit.GetParseErrors();
                  when(parseErrors.Count > 0)
                  {
                    errors += parseErrors.Count;
                    surroundwith(Yellow)
                      WriteLine($"Syntax errors in file `$fileName'");
                    foreach(error in parseErrors)
                    {
                      WriteLine(error);
                      displayError(error.Location.StartPos);
                    }
                  }

                | _ =>
                  fails += 1;

                  def (errorPos, _) = parser.GetMaxRollbackPosAndIds();
                  surroundwith(Red)
                    WriteLine($"Failed to parse file `$fileName'");
                  displayError(errorPos);
              }
            | _ =>
              def (errorPos, _) = preParser.GetMaxRollbackPosAndIds();
              surroundwith(Red)
                WriteLine($"Failed to pre-parse file `$fileName'");
              displayError(errorPos);
          }
        }
        catch
        {
          | e is Exception =>
            fails += 1;
            surroundwith(Red)
              WriteLine($"Failed to parse file `$fileName'");
            WriteLine(e);
        }
      }

      (files, fails, errors)
    }
  }
}