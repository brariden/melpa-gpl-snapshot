using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System.IO;
using System.Text;

namespace Nemerle.Compiler
{

  public partial class DeclPrinter
  {
      
    PrintTop(td : TopDeclaration,remove_mods : NemerleModifiers = NemerleModifiers.None) : void
    {
      def print_extends(ext : list[_])
      {
        if (ext.IsEmpty()) "" else $": ..$ext"
      }
      
      match (td)
      {
        | Class(name=n,modifiers=mods,typarms=ty,t_extends=ext,decls=decls)=>
            def attr=print_attributes(mods);
            def (ty,cons)=print_typarms(ty);
            def ext = print_extends(ext);
            if (mods.mods %&& NemerleModifiers.Static) // если это модуль
            {
              def mods=print_modifiers(mods,remove_mods | NemerleModifiers.Static);
              Write($"$attr");
              Write($"$(mods)module $n$ty $ext$cons");
              WriteBlockTop(() => PrintClassBody(decls,NemerleModifiers.Static));
            } else
            {
              def mods=print_modifiers(mods,remove_mods);
              Write($"$attr");
              Write($"$(mods)class $n$ty $ext$cons");
              WriteBlockTop(() => PrintClassBody(decls));
            }
        |Interface(name=n,modifiers=mods,typarms=ty,
          t_extends=ext,methods=decls) => def attr=print_attributes(mods);
            def mods=print_modifiers(mods,remove_mods | NemerleModifiers.Public);
            def (ty,cons)=print_typarms(ty);
            def ext=print_extends(ext);
            Write($"$attr");
            Write($"$(mods)interface $n$ty $ext$cons");
            WriteBlockTop(() => PrintClassBody(decls,NemerleModifiers.Public));
        |Alias(name=name,modifiers=mods,typarms=parms,ty=typ) =>
            def attr=print_attributes(mods);
            def mods=print_modifiers(mods,remove_mods);
            def (ty,cons)=print_typarms(parms);
            Write($"$attr");
            Write($"$(mods)type $name$ty$cons=$typ;");
        |Delegate(name=_,modifiers=mods,typarms=parms,header=head) =>
            def attr=print_attributes(mods);
            def mods=print_modifiers(mods,remove_mods);
            def (_,cons)=print_typarms(parms);
            def head=head.ToString().Trim();
            Write($"$attr");
            Write($"$(mods)delegate $head$cons;");
        |Enum(name=name,modifiers=mods,t_extends=ext,decls=decls) =>
            def attr=print_attributes(mods);
            def mods=print_modifiers(mods,remove_mods);
            def ext=print_extends(ext);
            Write($"$attr");
            Write($"$(mods)enum $name $ext");
            WriteBlockTop(() => PrintClassBody(decls));
        |Macro(name=_,header=head,synt=synt,expr=body,modifiers=mods) =>
            def attr=print_attributes(mods);
            def head=print_header(head);
            Write($"$attr");
            Write($"macro $head\n");
            when (!synt.IsEmpty()) Write($"syntax (..$synt)");
            print_fun_body(body);
        |Variant(name=n,modifiers=mods,typarms=ty,t_extends=ext,decls=decls) =>
            def attr=print_attributes(mods);
            def (ty,cons)=print_typarms(ty);
            def ext=print_extends(ext);
            def mods=print_modifiers(mods,remove_mods);
            Write($"$attr");
            Write($"$(mods)variant $n$ty $ext$cons");
            WriteBlockTop(() => PrintClassBody(decls));
        |VariantOption(name=n,decls=decls,modifiers=mods) =>
            def attr=print_attributes(mods);
            Write($"$attr");
            Write($"|$n");            
            when (!decls.IsEmpty()) WriteBlock(() => PrintClassBody(decls));
        |_ => ()
      }
      is_on_one_line=true;      
    }


    PrintProperty(mem : ClassMember.Property,remove_mods : NemerleModifiers) : void
    {
      | (Property(name=n,modifiers=mods,getter = getter, setter = setter,returnType=ty),_) =>

          def is_auto()
          {
            def is_abstract(func)
            {
              match (func)
              {
                |Some(ClassMember.Function(body = FunBody.Abstract))
                |None => true
                |_ => false
              }
            }

            is_abstract(getter) && is_abstract(setter)
          }

          def print(accessor, acc_type)
          {
            | (Some(ClassMember.Function(body = FunBody.Parsed(expr),modifiers=mods)),_) =>
                def mods=print_modifiers(mods,NemerleModifiers.Public);
                Write($"$mods$acc_type");
                print_fun_body(expr);
            | _ => ()
          }

          def print_auto(accessor, acc_type)
          {
            | (Some(ClassMember.Function(body = FunBody.Abstract,modifiers=mods)),_) =>
                def mods=print_modifiers(mods,NemerleModifiers.Public);
                $"$mods$acc_type;"
            | _ => ""
          }

          def func()
          {
            print(getter,"get");
            when (setter.IsSome) Write("\n");
            print(setter,"set");
          }

          def attr=print_attributes(mods);
          def mods=print_modifiers(mods,remove_mods);
          Write($"$attr");
          if (is_auto())
          {
            def get=print_auto(getter,"get");
            def set=print_auto(getter,"set");
            Write($"$mods$n : $ty {$get$set}");
          } else
          {
            Write($"$mods$n : $ty");
            WriteBlock(func);
          }
    }

    PrintEvent(mem : ClassMember.Event) : void
    {
      |Event(add=add,remove=rem) =>

          def print(accessor, acc_type)
          {
            | (ClassMember.Function(body = FunBody.Parsed(expr)),_) =>
                Write($"$acc_type");
                print_fun_body(expr);

            | _ => ()
          }            
          print(add,"add");             
          Write("\n");
          print(rem,"remove");
      
    }
    
    public PrintClassMember (mem : ClassMember,remove_mods : NemerleModifiers=NemerleModifiers.None) : void
    {                
      match (mem)
      {
        | Function (modifiers = mods,header = PFunHeader where (Name = name,Parameters = pars,TypeParameters = ty) as head,body = bd) =>
            match (bd)
            {
                // конструктор
              | Parsed (expr) when name == ".ctor" || name == ".cctor" =>
                  def attr=print_attributes(mods);
                  def mods=print_modifiers(mods,remove_mods);
                  def pars=print_params(pars);
                  Write($"$attr");
                  Write($"$(mods)this($pars)");
                  print_fun_body(expr);
                // обычная функция
              | Parsed (expr) =>
                  def attr=print_attributes(mods);
                  def mods=print_modifiers(mods,remove_mods);
                  def head=print_header(head);
                  def (_,cons)=print_typarms(ty);
                  Write($"$attr");
                  Write($"$mods$head$cons");
                  print_fun_body(expr);
                // абстрактная (без тела)
              | Abstract =>
                  def attr=print_attributes(mods);
                  def mods=print_modifiers(mods,remove_mods);
                  def (_,cons)=print_typarms(ty);
                  Write($"$attr");
                  Write($"$mods$head$cons;"); // только заголовок
              |_ => ()
            }

        | Property as p => PrintProperty(p,remove_mods)
        | TypeDeclaration(td) => PrintTop(td,remove_mods)
        | Field(name = n,modifiers = mods,ty = ty) =>           
            // ищем аттрибут инициализатора
            def (init_attr,initializer)= find_attribute(mods,_ is <[Nemerle.InternalMacros.StaticInitializer($_)]>);
            def attr=print_attributes(mods,if (init_attr!=null) [init_attr] else null); // удаляем инициализатор из аттрибутов                       
            def mods=print_modifiers(mods,remove_mods);
            Write($"$attr");
            def init=if (initializer!=null) $" = $(initializer)" else "";
            Write($"$mods$n : $ty$init;");
        | Event(name = n,modifiers = mods,ty = ty,add=ClassMember.Function(body=b)) as e =>
            def attr = print_attributes(mods);
            def mods = print_modifiers(mods,remove_mods);
            Write($"$attr");
            Write($"$(mods)event $n : $ty");
            if (b is FunBody.Parsed) // если есть ручное тело
              WriteBlock(() => PrintEvent(e)) // печатаем тело спец.методом
            else writer.Write(";"); // иначе завершаем объявление
        | EnumOption(name=n,value=val) =>
            Write($"|$n"); // печатаем перечисление
            val.Iter(x => writer.Write($" = $x")); // печатаем значение если есть
        | _ => ()
      }
    }
  }
}
