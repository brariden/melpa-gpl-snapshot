using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{    
    
  /// <summary>
  /// Description of TopDeclInit.
  /// </summary>
  public partial class DeclPrinter
  {
    mutable writer : LocatableTextWriter;        
    mutable compiler : ManagerClass;
    
    public Compiler : ManagerClass
    {
        get
        {
            compiler
        }        
        set
        {
            compiler=value;
            Init();
        }
    }
    
    mutable core_spaces : list[string];        
    
    Init() : void
    {
       core_spaces=compiler.CoreEnv.OpenNamespaces.Map(_.GetDisplayName()); 
    }
    
    public Writer : LocatableTextWriter
    {
      get
      {
        writer
      }
      set
      {
        writer=value;
        indenter.Writer=value;
      }
    }

    indenter : Indenter=Indenter();

    mutable line_pos : int;

    CurPos : int
    {
      get
      {
        writer.Sbuilder.Length
      }
    }

    BeginWrite() : void
    {
      line_pos=CurPos;
    }

    CurText : string
    {
      get
      {
        writer.Sbuilder.ToString()
      }
    }

    IsOnOneLine() : bool
    {
      if (line_pos!= -1)
      {
        def text=writer.Sbuilder.ToString(line_pos,CurPos-line_pos);
        def lines=text.Count(_=='\n');
        lines==0
      } else false
    }

    Write(str : string) : void
    {
      indenter.Write(str);
    }

    WriteIndent(func : void -> void) : void
    {
      indenter.WriteWithIndent(func);
    }

    WriteBlockTop(func : void -> void) : void
    {
      is_on_one_line=true;
      Write("\n{\n");
      WriteIndent(func);
      Write("\n}");
    }

    /// <summary>
    /// Печать блока с форматированием однострочных объявлений
    /// </summary>
    WriteBlock(func : void -> void) : void
    {
      is_on_one_line=true;
      def pos_beg1=CurPos;
      Write("\n{\n");
      def pos_beg=CurPos;
      WriteIndent(func);
      def pos_end=CurPos;
      Write("\n}");
      def pos_end1=CurPos;
      def str=writer.Sbuilder.ToString(pos_beg,pos_end-pos_beg);
      def line_count=str.Count(_=='\n'); // считаем число строк
      when (line_count==0)
      {
        def str=writer.Sbuilder.ToString(pos_beg,pos_end-pos_beg);
        def str=str.Trim();
        _ = writer.Sbuilder.Remove(pos_beg1,pos_end1-pos_beg1);
        writer.Write($" {$str}");
      }
    }

    InitWrite() : void
    {
      line_pos= -1;
      is_on_one_line=true;
    }

    name_tree : Hashtable[string,list[TopDeclaration]]=Hashtable();

    SortTree(td : list[TopDeclaration]) : void
    {
      def get_namespace(t)
      {         
        match (t.TryGetEnv())
        {
          |Some(env) when env!=null => env.CurrentNamespace.GetDisplayName()
          |_ => def idx=t.FullQualifiedName.IndexOf(t.Name);
              if (idx!= -1) t.FullQualifiedName.Substring(0,idx); else "[top]";

        }
      }

      def add(map,key,item)
      {
        if (map.ContainsKey(key))
        {
          def val=map[key];
          def app=item :: val;
          map[key]=app;
        }
        else
        {
          map.Add(key,[item]);
        }

      }

      name_tree.Clear();
      td.Iter(x => add(name_tree,get_namespace(x),x));      
    }
    
    /// <summary>
    /// Печать заголовка файла
    /// using и namespace    
    /// </summary>
    PrintFileHeader() : void
    {
      when (!name_tree.IsEmpty())
      {
          // TODO: печать разных пространств имен
        def file_space=name_tree.First(); // берет первый элемент, пока поддерживается одно пространство
        when (!file_space.Value.IsEmpty())
        {
          def top=file_space.Value.First();
          def usings=match (top.TryGetEnv())
          {
            |Some(env) when env!=null => def names=env.OpenNamespaces.Map(_.GetDisplayName());                                                                                      
                                         names.Filter(x => !core_spaces.Contains(x)).Rev();// x!="Nemerle.Core" && x!="Nemerle.Core.option").Rev();                                         
            |_ => []
          }
       
          def usings=usings.Map(x => $"using $x;\n");            
          usings.Iter(writer.Write);
        }  
        def nspace=file_space.Key;
        writer.Write($"\nnamespace $nspace");
      }
    }

    public PrintFile(td : ParseResult,writer : LocatableTextWriter) : void
    {
      Writer=writer;
      def decls=td.TopDeclarations;
      SortTree(decls); // сортировка дерева пространств имен
      PrintFileHeader(); // печать заголовка      
      WriteBlockTop(() => decls.Iter(PrintTopDecl));
    }

    PrintTopDecl(td : TopDeclaration) : void
    {
      PrintTop(td);
      Write("\n\n");
      InitWrite();
    }

    public Print(td : list[TopDeclaration],writer : LocatableTextWriter) : void
    {
      Writer=writer;
      InitWrite();
      SortTree(td);
      td.Iter(PrintTopDecl);
    }

    public Print(td : TopDeclaration) : void
    {
      InitWrite();
      PrintTop(td,NemerleModifiers.None);
    }

    mutable is_on_one_line : bool;

    PrintClassBody(decls : list[ClassMember],remove_mods : NemerleModifiers=NemerleModifiers.None) : void
    {
      def solid_decl(decl)
      {
        |ClassMember.TypeDeclaration(TopDeclaration.Class)
        |TypeDeclaration(TopDeclaration.Interface)
        |TypeDeclaration(TopDeclaration.Variant)
        |Function
        |TypeDeclaration(TopDeclaration.Enum) => true
        |_ => false
      }

      def check_one_line_decl(decl)
      {
        when ((!is_on_one_line || solid_decl(decl)) && decls.Length > 1) Write("\n");
      }

      def print_class_member(decls : list[ClassMember])
      {
        match (decls)
        {
          |[head] => check_one_line_decl(head);PrintClassMember(head,remove_mods);
          |head :: tail => check_one_line_decl(head);
              BeginWrite(); // начинаем отслеживать объявления
              PrintClassMember(head,remove_mods); // выводим член класс
              is_on_one_line=IsOnOneLine();
              Write("\n");
              print_class_member(tail);
          |_ => ()
        }
      }

      print_class_member(decls);
    }

  }
}
