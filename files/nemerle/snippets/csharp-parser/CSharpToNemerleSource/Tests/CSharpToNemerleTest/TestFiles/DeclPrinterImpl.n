using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  /// <summary>
  /// Description of DeclPrinterImpl.
  /// </summary>
  public partial class DeclPrinter
  {
    print_attributes(mods : AttributesAndModifiers,removed : list[PExpr] = null) : string
    {            
      def attrs=mods.custom_attrs+mods.GetMacroAttributes();
      def attrs=if (removed!=null) attrs.Filter(x => !removed.Exists(y => x.ToString()==y.ToString())); else attrs;
      if (attrs.IsEmpty()) "" else $"$attrs\n"
    }

    print_param(p : PParameter) : string
    {
        // объявлен ли тип у параметра
      |PParameter where (Name=n,Type= <[ _ ]>,modifiers=mods) with ty=null 
      |PParameter where (Name=n,Type=ty,modifiers=mods) =>
          def ty=if (ty!=null) $" : $ty" else ""; // если есть тип то выводим его иначе пустая строка       
          // ищем параметр по умолчанию
          def (_,default)= find_attribute(mods,_ is <[System.ComponentModel.DefaultValueAttribute($_)]>);
          def default=if (default!=null) $" = $default" else ""; // если есть то выводим иначе нет
          $"$n$ty$default" // собираем всю строку
    }
        
    print_params(pars : list[PParameter]) : string
    {        
      def pars=pars.Map(print_param);
      $"..$pars"
    }
    
    print_header(head : PFunHeader) : string
    {        
      // здесь смотрим не пустое ли возвращаемое значение в функции
      |PFunHeader where (Name=n,TypeParameters=ty,Parameters=pars,ReturnType= <[ _ ]>) with ret=null
      |PFunHeader where (Name=n,TypeParameters=ty,Parameters=pars,ReturnType=ret) => 
          def pars=print_params(pars); // печатаем параметры
          def ret=if (ret!=null) $" : $ret" else ""; // если есть возвр.значение то выводим его
          $"$n$ty($pars)$ret"
    }
    
    print_fun_body(expr : PExpr) : void
    {
          // помещаем в скобки если не в скобках
      def expr=if (expr is PExpr.Sequence) expr else <[ {$expr} ]>;
      def str=PrettyPrint.SprintExpr(None(), expr);
      Write(str);
    }

    print_typarms(ty : Typarms) : string * string // T * constraints
    {      
      def (Typarms where (tyvars=ty,constraints=cons)) = ty;
      def cons=cons.Map(x => $"where $(x.tyvar) : $(x.ty)");
      if (ty.IsEmpty()) ("","") else ($"$ty",$<# ..$(cons;" ")#>)
    }

    print_modifiers(mods : AttributesAndModifiers,remove_mods : NemerleModifiers=NemerleModifiers.None) : string
    {
      def mods=mods.mods;

      def get_values(mod)
      {
        mod.ToString().SplitToList(',',' ');
      }
    //AccessModifiers = 0x20b,
    //CompilerMutable = 0x40000,
    //Extern = 0x20000,
    //Macro = 0x2000,
    //Mutable = 0x100,
    //New = 4,
    //None = 0,
    //Override = 0x400,
    //OverrideModifiers = 0x430,
    //SpecialName = 0x8000,
    //Virtual = 0x20,
    //VirtualityModifiers = 0x434,
    //Volatile = 0x4000
      def mods=mods & ~remove_mods;
      def vals=get_values(mods);
      def names=vals.Map(_.ToLower());
      if (names.IsEmpty()) "" else
      {
        match (names)
        {
          |["none"] => ""
          | _ => $<#..$(names;" ") #>
        }
      }
    }
      
    find_attribute(mods : AttributesAndModifiers,body : PExpr -> bool) : PExpr * PExpr
    {
      def attr=mods.custom_attrs.Find(body(_));
      match (attr) 
      {          
        |Some(<[ $_($p) ]> as at) => (at,p)
        |Some(at) => (at,null)
        |_ => (null,null)      
      }
    }
    
  }
}
