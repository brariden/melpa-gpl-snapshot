using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;

namespace CSharpToNemerle
{
  type test_alias1[T] where T : Sample= System.Collections.Generic.Dictionary[int,string];

  public delegate TestDelegate1(name : string, num : int, isExpanded : bool) : void;
  public delegate TestDelegate2[T](name : string, num : T, isExpanded : bool) : void where T : Expression;

  macro test_macro1(a,b,c,d)
  syntax ("word1",a,b,c,"word2",d)
  {
        <[
          when ($a)
           if ($d) $b else $c
        ]>
  }

  [MacroAttribute2("123")]
  [MacroAttribute]
  public interface TestInterface
  {
      check_func[T](obj : T) : void where T : Sample;
  }

  [MacroAttribute,MacroAttribute2("123")]
  public variant Expression
  {
    |None
    [MacroAttribute2("123")]
    |SmartExp1 {name : string;a : Expression;b : Expression;}
    |SmartExp2 {name : string;a : Expression;b : Expression;c : Expression;}

    public pos : int;
  }

  public enum Enum2 : int
  {
    |A=1
    |B=10
    |C=20
  }

  /// <summary>
  /// Description of Sample.
  /// </summary>
  public class Sample
  {
    mutable evt : EventHandler;

    public Prop1 : int {get;set;} // auto prop
    [MacroAttribute]
    public Prop2 : string {get;}

    public Prop3 : string {get;private set;}
    [MacroAttribute]
    public Prop4 : string {protected get;public set;}

    public Prop5 : int
    {
        private get
        {
            0
        }
        set
        {
        _= value;
        }
    }

    [MacroAttribute2("abc")]
    public class SubClass[T,T2] : Sample where T : Expression where T2 : Expression
    {

      public Run() : void
      {
      }
    }

    public Check[T](obj : T) : void where T : Sample
    {
        _ = obj;
    }

    [MacroAttribute]
    public event Abc : EventHandler
    {
          add
          {
              evt+=value;
          }
          remove
          {
              evt-=value;
          }
    }

    type alias_name=Nemerle.Core.list[string];

    variant TestVariant
    {
      |None
      |HappyOption {val : int;}
      |PhylosophBird {val : string;}
      |BigBlackBird
          {
            override Fly(_ : object) : void
            {
            }
          }

      |FlyingOverTheMoon

      public virtual Fly(_ : object) : void
      {
      }
    }

    public enum Enum1 : int
    {
      |A=1
      |B
      |C
    }


  }
}
