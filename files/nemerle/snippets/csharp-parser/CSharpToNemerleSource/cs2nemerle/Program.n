using System;
using Nemerle;
using Nemerle.Collections;
using System.Collections.Generic;
using System.Windows.Forms;
using Nemerle.Compiler;
using System.Text;
using System.IO;
using System.Console;

namespace CSharpToNemerle
{
  class Engine
  {
    conv : CSharpToNemerleConvert=CSharpToNemerleConvert();
        
    mutable nfiles : List[string]=List();     
    mutable csfiles : List[string]=List();
    mutable out_dir : string;
    mutable err : bool;
    mutable recursive : bool;
    mutable copy_project : bool;
    mutable rec_csdir : string;
    mutable rec_ndir : string;
    
    public IsErr : bool
    {
      get
      {
        nfiles.IsEmpty() && csfiles.IsEmpty()
      }
    }
     
    Error(mess : string,str : string) : void
    {
      err=true;
      WriteLine($"$mess: $str\n");
    }
     
    public ProcessArgs(args : list[string]) : bool
    {
      |"/d" :: dir :: tail => rec_csdir=dir;
          if (Directory.Exists(dir)) 
            csfiles.AddRange(Directory.GetFiles(dir,"*.cs",SearchOption.AllDirectories)); else
            Error("Input C# Directory not exist",$"$dir");
          ProcessArgs(tail)
      |"/nd" :: dir :: tail =>  rec_ndir=dir;
          if (Directory.Exists(dir))
            nfiles.AddRange(Directory.GetFiles(dir,"*.n",SearchOption.AllDirectories));
          else Error("Input Nemerle Directory not exist",$"$dir");
          ProcessArgs(tail)       
      |"/out" :: dir :: tail => out_dir=dir;ProcessArgs(tail)
      |"/r" :: tail => recursive=true;ProcessArgs(tail)
      |"/p" :: tail => copy_project=true;
          WriteLine("Copy project option is not implemented yet");
          ProcessArgs(tail)
      |file :: tail => if (File.Exists(file)) 
                         match (Path.GetExtension(file))
                         {
                           |".cs" => csfiles.Add(file)
                           |".n" => nfiles.Add(file)
                           | _ => Error("Unknown file",file)
                         }
                       else Error("File not exist",file);
          ProcessArgs(tail)                         
      | _ => !IsErr
    }
        
    get_recursive_path(f : string,dir : string,outdir : string) : string
    {
      def idx = f.IndexOf(dir);
      def rec=f.Substring(idx + dir.Length);
      Path.Combine(outdir,rec)
    }
     
    public static RemoveDuplicates[T](this lst : list[T], eq_pred : T * T -> bool) : list[T] 
    {
      def loop (lst, acc)  
      {
        match (lst)
        {
          | [] => 
              acc.Reverse()
          | [x] => 
              x :: acc.Reverse()
          | x :: ((y :: _) as xs) => 
              if (eq_pred(x, y)) loop(xs, acc); else loop(xs, x :: acc)
        }
      };
      loop(lst, [])
    }
    
    copy_files_to_output(files : list[string * string]) : void
    {
      def files=files.Sort(((_,f1),(_,f2)) => f1.CompareTo(f2));
      def files=files.RemoveDuplicates(((_,f1),(_,f2)) => f1==f2);
      foreach ((file,outfile) in files)
      {
        try
        {
          File.Copy(file,outfile,true);
        }
        catch 
        {
          | x => WriteLine($"Exception occured during copy $x.Message");
        }
      }        
    }
    
    CopyProject() : void
    {            
      if (recursive && out_dir!=null)
      {
        def files1=Directory.GetFiles(rec_ndir,"*.sln",SearchOption.AllDirectories);
        def files2=Directory.GetFiles(rec_ndir,"*.nproj",SearchOption.AllDirectories);
        def files=files1.Append(files2);
        def nproj=files.MapToList(x => (x,get_recursive_path(x,rec_ndir,out_dir)));                   
        copy_files_to_output(nproj);
        WriteLine("Copying project files from source to output successfully");     

      } else
      {
        WriteLine("For copy project option you need to set '/r' and '/out' flag option");
      }        
    }
    
    CalcOutputFiles() : list[string * string] * list[string * string]
    {
      def create_out_file(file,dir)
      {
        if (recursive && out_dir!=null) // если включена опция выходных рекурсивных путей
        {                       
          get_recursive_path(file,dir,out_dir);                               
        } 
        else
        {
          if (out_dir!=null) // если есть выходная папка                       
          {
            def fname = Path.GetFileName(file);
            Path.Combine(out_dir,fname);            
          } else file
        }
      }
        
      def create_n_out_files(file)
      {
        def file=create_out_file(file,rec_ndir);
        if (out_dir!=null) 
        {
          file
        } else
        {
          def out_file = Path.GetFileNameWithoutExtension(file) + "_conv.n";
          Path.Combine(Path.GetDirectoryName(file), out_file)
        }
      }
        
      def create_cs_out_files(file)
      {
        def file=create_out_file(file,rec_csdir);
        Path.ChangeExtension(file,".n")
      }
      
      def nout_files=nfiles.Map(x => (x,create_n_out_files(x)));
      def csout_files=csfiles.Map(x => (x,create_cs_out_files(x)));
      (csout_files,nout_files)
    }         
    
    public Run() : void
    {
                 
      def do_action((file, out_file), mess, act, cnv)
      {        
        WriteLine($"$mess $file");
        try
        {
          act(file,out_file);
          cnv+1
        }
        catch
        {        
          |x => WriteLine($"Exception occured: $(x.Message)");
              cnv
        } 
                        
      }      
      def (csout_files,nout_files)=CalcOutputFiles(); // расчитываем выходные пути
      
      def cs_ok = csout_files.Fold(0,do_action(_,"Converting file ",conv.Convert,_));
      def n_ok = nout_files.Fold(0,do_action(_,"Parsing and printing file ",conv.PrintNFile,_));
      when (copy_project) CopyProject();
      WriteLine($<#Conversion completed successfully:
          $(csfiles.Count) input CSharp files
          $cs_ok CSharp files converted
          $(nfiles.Count) input Nemerle files
          $n_ok Nemerle files printed#>);
    }
  }
    
  module Program
  {
    /// <summary>
    /// The main entry point for the application.
    /// </summary>    
    Main(args : array[string]) : void
    {        
      def engine=Engine();        
      WriteLine("C# to Nemerle converter v1.0");      
      if (engine.ProcessArgs(args.NToList()))             
      {
        engine.Run(); 
      } else
      {                
        WriteLine(<#Usage: cs2nemerle.exe [flags] file1,file2...
Where: [flags]:
     /d directory - takes directory with *.cs files for conversion
     /nd directory - directory of Nemerle files for parsing and printing     
     /out directory - output directory
     /r - recursive create source catalogs hierarchy in output dir
     /p - copy project files to output dir
     file1... - C# or Nemerle files, space delimited, for conversion#>);
      }      
      WriteLine("\nPress any key to exit");
      _ = ReadLine();      
    }
  }
}
