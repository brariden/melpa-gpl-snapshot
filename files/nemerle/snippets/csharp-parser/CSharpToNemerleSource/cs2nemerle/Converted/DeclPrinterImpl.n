using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle;

namespace Nemerle.Compiler
{
  public partial class DeclPrinter 
  {

    print_attributes(mods : AttributesAndModifiers, removed : list[PExpr] = null) : string
    {
      def attrs = mods.custom_attrs + mods.GetMacroAttributes();
      def attrs = if (removed != null) attrs.Filter(x => !removed.Exists(y => x.ToString() == y.ToString())); else attrs;
      if (attrs.IsEmpty()) ""; else $"$attrs\n"
    }

    print_param(p : PParameter) : string
    {
      match (p)
        {
        | PParameter where (Name = n, Type = <[ _  ]>, modifiers = mods) with ty = null
        | PParameter where (Name = n, Type = ty, modifiers = mods) => 
          
          {
            def ty = if (ty != null) $" : $ty"; else "";
            def (_ , default) = find_attribute(mods, (_  is <[ System.ComponentModel.DefaultValueAttribute($(_ )) ]>));
            def default = if (default != null) $" = $default"; else "";
            $"$n$ty$default"
          }
      }
    }

    print_params(pars : list[PParameter]) : string
    {
      def pars = pars.Map(print_param);
      $"..$pars"
    }

    print_header(head : PFunHeader) : string
    {
      match (head)
        {
        | PFunHeader where (Name = n, TypeParameters = ty, Parameters = pars, ReturnType = <[ _  ]>) with ret = null
        | PFunHeader where (Name = n, TypeParameters = ty, Parameters = pars, ReturnType = ret) => 
          
          {
            def pars = print_params(pars);
            def ret = if (ret != null) $" : $ret"; else "";
            $"$n$ty($pars)$ret"
          }
      }
    }

    print_fun_body(expr : PExpr) : void 
    {
      def expr = if ((expr is PExpr.Sequence)) expr; else <[ 
    {
      $(expr)
    } ]>;
      def str = PrettyPrint.SprintExpr(None(), expr);
      Write(str)
    }

    print_typarms(ty : Typarms) : string * string
    {
      def (Typarms where (tyvars = ty, constraints = cons)) = ty;
      def cons = cons.Map(x => $"where $(x.tyvar) : $(x.ty)");
      if (ty.IsEmpty()) ("", ""); else ($"$ty", $" ..$(cons;\" \")")
    }

    print_modifiers(mods : AttributesAndModifiers, remove_mods : NemerleModifiers = NemerleModifiers.None) : string
    {
      def mods = mods.mods;
      def get_values (mod)  
      {
        mod.ToString().SplitToList(',', ' ')
      };
      def mods = mods & ~remove_mods;
      def vals = get_values(mods);
      def names = vals.Map(_ .ToLower());
      if (names.IsEmpty()) ""; else 
      {
        match (names)
            {
          | ["none"] => 
            ""
          | _  => 
            $"..$(names;\" \") "
        }
      }
    }

    find_attribute(mods : AttributesAndModifiers, body : PExpr -> bool) : PExpr * PExpr
    {
      def attr = mods.custom_attrs.Find(body(_ ));
      match (attr)
        {
        | Some(<[ $(_ )($(p)) ]> as at) => 
          (at, p)
        | Some(at) => 
          (at, null)
        | _  => 
          (null, null)
      }
    }
  }


}