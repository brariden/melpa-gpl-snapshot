using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle;

namespace Nemerle.Compiler
{
  public partial class DeclPrinter 
  {
    mutable writer : LocatableTextWriter;
    [Accessor(flags = WantSetter)]
    mutable compiler : ManagerClass;

    public Writer : LocatableTextWriter
    {
      get
      {
        writer
      }
      set
      {
        writer = value;
        indenter.Writer = value
      }
    }

    indenter : Indenter = Indenter();
    mutable line_pos : int;
    CurPos : int
    {
      get
      {
        writer.Sbuilder.Length
      }
    }

    BeginWrite() : void 
    {
      line_pos = CurPos
    }

    CurText : string
    {
      get
      {
        writer.Sbuilder.ToString()
      }
    }

    IsOnOneLine() : bool
    {
      if (line_pos != -1) 
      {
        def text = writer.Sbuilder.ToString(line_pos, CurPos - line_pos);
        def lines = text.Count(x => x == '\n');
        lines == 0
      }; else false
    }

    Write(str : string) : void 
    {
      indenter.Write(str)
    }

    WriteIndent(func : void  -> void ) : void 
    {
      indenter.WriteWithIndent(func)
    }

    WriteBlockTop(func : void  -> void ) : void 
    {
      is_on_one_line = true;
      Write("\n{\n");
      WriteIndent(func);
      Write("\n}")
    }

    WriteBlock(func : void  -> void ) : void 
    {
      is_on_one_line = true;
      def pos_beg1 = CurPos;
      Write("\n{\n");
      def pos_beg = CurPos;
      WriteIndent(func);
      def pos_end = CurPos;
      Write("\n}");
      def pos_end1 = CurPos;
      def str = writer.Sbuilder.ToString(pos_beg, pos_end - pos_beg);
      def line_count = str.Count(x => x == '\n');
      when (line_count == 0) 
      {
        def str = writer.Sbuilder.ToString(pos_beg, pos_end - pos_beg);
        def str = str.Trim();
        _  = writer.Sbuilder.Remove(pos_beg1, pos_end1 - pos_beg1);
        writer.Write($" {$str}")
      }
    }

    InitWrite() : void 
    {
      line_pos = -1;
      is_on_one_line = true
    }

    name_tree : Hashtable[string, list[TopDeclaration]] = Hashtable();

    SortTree(td : list[TopDeclaration]) : void 
    {
      def get_namespace (t)  
      {
        def idx = t.FullQualifiedName.IndexOf(t.Name);
        if (idx != -1) t.FullQualifiedName.Substring(0, idx - 1); else "[top]"
      };
      def add (map, key, item)  
      {
        if (map.ContainsKey(key)) 
        {
          def val = map[key];
          def app = item :: val;
          map[key] = app
        }; else 
        {
          map.Add(key, [item])
        }
      };
      name_tree.Clear();
      td.Iter(x => add(name_tree, get_namespace(x), x))
    }

    PrintFileHeader(location : Location) : void 
    {
      def tree = compiler.NameTree.GetReferencedNamespaces();
      def tree = Nemerle.Utility.ExpandListComprehension(n, (n, loc) in tree, loc.FileIndex == location.FileIndex).Flatten();
      def usings = tree.Map(x => $"using ..$(x.FullName;\".\");\n");
      def file_space = name_tree.First();
      def nspace = file_space.Key;
      usings.Iter(writer.Write);
      writer.Write($"\nnamespace $nspace")
    }

    public PrintFile(td : ParseResult, writer : LocatableTextWriter) : void 
    {
      Writer = writer;
      def ty = td.TopDeclarations;
      SortTree(ty);
      PrintFileHeader(td.Location);
      WriteBlockTop(() => ty.Iter(PrintTopDecl))
    }

    PrintTopDecl(td : TopDeclaration) : void 
    {
      PrintTop(td);
      Write("\n\n");
      InitWrite()
    }

    public Print(td : list[TopDeclaration], writer : LocatableTextWriter) : void 
    {
      Writer = writer;
      InitWrite();
      SortTree(td);
      td.Iter(PrintTopDecl)
    }

    public Print(td : TopDeclaration) : void 
    {
      InitWrite();
      PrintTop(td, NemerleModifiers.None)
    }

    mutable is_on_one_line : bool;

    PrintClassBody(decls : list[ClassMember], remove_mods : NemerleModifiers = NemerleModifiers.None) : void 
    {
      def solid_decl (decl)  
      {
        match (decl)
            {
          | ClassMember.TypeDeclaration(TopDeclaration.Class)
          | TypeDeclaration(TopDeclaration.Interface)
          | TypeDeclaration(TopDeclaration.Variant)
          | Function
          | TypeDeclaration(TopDeclaration.Enum) => 
            true
          | _  => 
            false
        }
      };
      def check_one_line_decl (decl)  
      {
        when (!is_on_one_line || solid_decl(decl) && decls.Length > 1) Write("\n")
      };
      def print_class_member (decls : list[ClassMember])  
      {
        match (decls)
            {
          | head :: [] => 
            
            {
              check_one_line_decl(head);
              PrintClassMember(head, remove_mods)
            }
          | head :: tail => 
            
            {
              check_one_line_decl(head);
              BeginWrite();
              PrintClassMember(head, remove_mods);
              is_on_one_line = IsOnOneLine();
              Write("\n");
              print_class_member(tail)
            }
          | _  => 
            ()
        }
      };
      print_class_member(decls)
    }
  }


}