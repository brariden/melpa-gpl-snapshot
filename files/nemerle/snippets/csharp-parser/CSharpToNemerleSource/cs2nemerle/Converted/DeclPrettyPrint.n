using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle;

namespace Nemerle.Compiler
{
  public module DeclPrettyPrint 
  {
    printer : DeclPrinter = DeclPrinter();

    public PrintFile(td : ParseResult, writer : LocatableTextWriter, manager : ManagerClass) : void 
    {
      printer.Compiler = manager;
      printer.PrintFile(td, writer)
    }

    public Print(td : list[TopDeclaration], writer : LocatableTextWriter) : void 
    {
      printer.Writer = writer;
      printer.Print(td, writer)
    }

    public Print(td : TopDeclaration, writer : LocatableTextWriter) : void 
    {
      printer.Writer = writer;
      printer.Print(td)
    }

    public Print(clmem : ClassMember, writer : LocatableTextWriter) : void 
    {
      printer.Writer = writer;
      printer.PrintClassMember(clmem)
    }
  }

  class Indenter 
  {
    mutable level : int;
    public IndentSize : int {get;set;}
    public Writer : LocatableTextWriter {get;set;}

    public this()
    {
      IndentSize = 2
    }

    public Indent() : void 
    {
      ++level
    }

    public UnIndent() : void 
    {
      --level
    }

    public WriteWithIndent(func : void  -> void ) : void 
    {
      Indent();
      func();
      UnIndent()
    }

    public Write(str : string) : void 
    {
      def indent = string(' ', level * IndentSize);
      def lines = str.Split(array ["\r\n", "\n"], StringSplitOptions.None).NToList();
      def str = lines.Map(str => if (str.IsEmpty()) str; else $"$indent$str");
      Writer.Write($"..$(str;\"\\n\")")
    }
  }


}