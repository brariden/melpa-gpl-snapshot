using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using CommonLib.Linq;
using System.IO;
using CommonLib.Serialization;
using System.Configuration;
using CommonLib;
using CommonLib.Utils;

namespace CommonLib.Utils
{
  type abc=List.[int];

  interface IDataCloned[TSource]  
  {
    DataClone() : TSource;
  }

  interface IDeepCloned[TSource]  
  {
    DeepClone() : TSource;
  }

  public class DataEventArgs[TData] : EventArgs 
  {
    mutable data : TData;

    public this(data : TData)
    {
      when (data == null) throw ArgumentNullException("data");
      _  = this.data = data
    }

    public Data : TData
    {
      get
      {
        data
      }
    }

    public override ToString() : string
    {
      data.ToString()
    }
  }

  [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)]
  public class Indexer : Attribute
  {

  }

  public class ValidNum 
  {
    mutable value : double;

    public this()
    {
      _  = ()
    }

    public this(val : double)
    {
      _  = value = val;
      _  = Valid = true
    }

    public this(num : ValidNum)
    {
      _  = value = num.value;
      _  = Valid = num.Valid;
      _  = NotValidUsed = num.NotValidUsed
    }

    [TreatAsFloat()]
    public Value : double
    {
      get
      {
        _  = CheckValid();
        this.value
      }
      set
      {
        _  = this.value = value;
        _  = Valid = true
      }
    }

    public Invalidate() : void 
    {
      _  = Valid = false
    }

    CheckValid() : void 
    {
      when (!Valid) if (NotValidUsed != null) _  = NotValidUsed(this, null); else throw InvalidOperationException()
    }

    public override ToString() : string
    {
      if (Valid) Value.ToString(); else "<невалидна>"
    }

    public static implicit(val : ValidNum) : double
    {
      val.Value
    }

    public Valid : bool {get;set;}
    public event NotValidUsed : EventHandler;
  }

  public module Time 
  {

    public YearDays(year : int) : int
    {
      Nemerle.Core.if(DateTime.IsLeapYear(year), 366, 365)
    }

    public SecInDay : int = 3600 * 24;

    public SecInDays(days : ulong) : ulong
    {
      SecInDay * days
    }

    public FromPacked(time : uint) : DateTime
    {
      mutable datetime = (DateTime(2000, 1, 1) : DateTime);
      datetime.AddSeconds(time)
    }

    public ToPacked(time : DateTime) : uint
    {
      mutable datetime = (DateTime(2000, 1, 1) : DateTime);
      mutable span = (time.Subtract(datetime) : TimeSpan);
      (span.TotalSeconds :> uint)
    }
  }

  public class SettingBind 
  {
    mutable main : ApplicationSettingsBase;
    mutable sub : ApplicationSettingsBase;

    public this(base_set : ApplicationSettingsBase, sub_set : ApplicationSettingsBase)
    {
      _  = main = base_set;
      _  = sub = sub_set;
      _  = sub_set.SettingsSaving += SettingsSavingEventHandler(sub_set_SettingsSaving)
    }

    public Load() : void 
    {
      _  = main.CopyTo(sub)
    }

    sub_set_SettingsSaving(sender : object, e : System.ComponentModel.CancelEventArgs) : void 
    {
      _  = sub.CopyTo(main);
      _  = e.Cancel = true;
      _  = main.Save()
    }
  }

  public module SettingsUtils 
  {

    public CopyTo(settings : ApplicationSettingsBase, to_set : ApplicationSettingsBase) : void 
    {
      mutable vals = settings.PropertyValues.Cast.[SettingsPropertyValue]();
      _  = vals.Generate(fun  (spliced funparm name) : _  

        {
          to_set[x.Name] = settings[x.Name];
          to_set[x.Name]
        })
    }

    public BindTo(main : ApplicationSettingsBase, sub : ApplicationSettingsBase) : void 
    {
      _  = ()
    }

    main_SettingsLoaded(sender : object, e : SettingsLoadedEventArgs) : void 
    {
      _  = ()
    }
  }


}