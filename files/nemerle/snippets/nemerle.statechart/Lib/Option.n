using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  [Record]
  public variant TwoOption[T]
  {
    | None
    | One {elem : T;}
    | Two {first : T;second : T;}

    public HasValue : bool
    {
      get
      {
        !(this is None)
      }
    }

    public IsOne : bool
    {
      get
      {
        this is One
      }
    }

    public IsTwo : bool
    {
      get
      {
        this is Two
      }
    }

    public IsNone : bool
    {
      get
      {
        this is TwoOption.None
      }
    }

    public First : option[T]
    {
      get
      {
        match (this)
        {
          | None            => None()
          | One(elem)       => Some(elem)
          | Two(first = f)  => Some(f)
        }
      }
    }

    public Second : option[T]
    {
      get
      {
        match (this)
        {
          | None             => None()
          | One              => None()
          | Two(second = f)  => Some(f)
        }
      }
    }

    public Map[TRes](conv : T -> TRes) : TwoOption[TRes]
    {
      match (this)
      {
        | None       => None()
        | Two(f, s)  => Two(conv(f), conv(s))
        | One(f)     => One(conv(f))
      }
    }

    public MapToList[TRes](conv : T -> TRes) : list[TRes]
    {
      match (this)
      {
        | None       => []
        | Two(f, s)  => [conv(f), conv(s)]
        | One(f)     => [conv(f)]
      }
    }


    public ToList() : list[T]
    {
      match (this)
      {
        | None  => []
        | Two(f, s)  => [f, s]
        | One(f)  => [f]
      }
    }

    public Iter(iter : T -> void) : void
    {
      match (this)
      {
        | None       => ()
        | Two(f, s)  => iter(f);iter(s)
        | One(f)     => iter(f)
      }        
    }

    public static Map[T1](this opt : TwoOption[T1], conv : T1 -> T1) : TwoOption[T1] where T1 : class
    {
      match (opt)
      {
        | None as t      => t
        | Two(f, s) as t => def tf = conv(f);
                            def ts = conv(s);
                            if (tf : object != f || ts : object != s) TwoOption.Two(tf, ts) else t
        | One(f) as t    => def tf = conv(f);
                            if (tf : object != t) TwoOption.One(tf) else t
      }
    }

    public Value : list[T]
    {
      get
      {
        ToList()
      }
    }


    public static FromList(this lst : list[T]) : TwoOption[T]
    {
      | f :: s :: [] => Two(f, s)
      | f :: []      => One(f)
      | []           => None()
      | _            => throw InvalidOperationException("list contain more than two elements")
    }

    public override ToString() : string
    {
      match (this)
      {
        | None       => "None"
        | One(f)     => $"One($f)"
        | Two(f, s)  => $"Two($f, $s)"
      }
    }
  }

  public module Opt
  {

    public ToList[T](this opt : option[T]) : list[T]
    {
      | Some(v)  => [v]
      | _        => []
    }

    public Compare[T1](this a : option[T1], b : option[T1], comp : T1 * T1 -> int) : int
    {
      match (a, b)
      {
        | (Some(a), Some(b))  => comp(a, b)
        | (Some, None)        => 1
        | (None, Some)        => -1
        | (None, None)        => 0
      }
    }

    public @==[T1](this a : option[T1], b : option[T1]) : bool where T1 : class
    {
      match (a, b)
      {
        | (Some(a), Some(b))  => a == b : object
        | _                   => false
      }
    }

  }
}
