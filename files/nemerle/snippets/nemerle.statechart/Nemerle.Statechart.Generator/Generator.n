using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;

namespace Nemerle.Statechart
{


  //using GuardNode;
  // TODO: Action events with flag
  /// <summary>
  /// Description of StaticGenerator.
  /// </summary>
  public partial class StaticGenerator
  {

    DefineStates() : void
    {
      gen_states.Emit();
    }

    DefineEvents() : void
    {
      timed_events.Emit();
      gen_events.Generate();
    }

    DefineGuards() : void
    {
    }    
    
    DefineActions() : void
    {
      foreach (act in actions)
      {
        DefineActionEvent(act)
      }

      def gen_paths = GenTranPath(path_state_actions, action_for, this, FsmFlags);
      gen_paths.DefineHandlers()
    }

    DefineSubMachines() : void
    {
      def clone(f)
      {
        | ClassMember.Function(name = n) as f => ClassMember.Function(f.Location, n, f.modifiers, f.header, f.implemented, f.body)
      }

      def top = ty.Manager.Hierarchy.TopTypeBuilders();
      def this_mems = ty.AstParts.SelectMany(x => x.GetMembers()).Select(_.Name);
      foreach (st in LoadedMachines)
      {
        match (top.Find(x => x.Name == st.Key))
        {
          | Some(t) => def mems = t.GetParsedMembers();
                      foreach (m in mems)
                      {
                        when (!this_mems.Exists(x => x == m.Name))
                        {
                          def m = match (m)
                          {
                            | ClassMember.Property(name = n, modifiers = mod, parameters = pp, getter = g, setter = s, initializer = i) as p =>
                                ClassMember.Property(p.Location, n, mod, p.returnType, pp, g.Map(clone), s.Map(clone), i)
                            | _                      => m
                          }
                          ty.Define(m)
                        }
                      }
          | _       => ()
        }

      }
    }
  }
}
