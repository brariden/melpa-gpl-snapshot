using System;
using System.Diagnostics;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
      /*

<#
  flags : no_auto_initial,  local_default,  auto_initial

  state NManager
  {
      $> Action // entry alternative
      $< Action2 // exit alternative

    initial  => Working
    0  => Working // another initial

    event => terminate; // terminate pseudo state

    event => X;

    [local]
    state NotConnected
    {
        (H)  => Working
    [local]
    Connect  => Working
    Connect2 / Action
    Connect4 ( => Working // local transition syntax
    Connect5 ) => Working // external transition syntax
    Connect3
     {
         Action
         Action2
     }
    }

    [Initial]
    state ClosingPort
    {
        (H*)
        entry / action

        event1  => final
        completion  => State2
        _  => State2 // another completion syntax

        SelfEvent  =>@ // self transition
        SelfEvent2  => self // self transition

        Event1,  Event2  => Working  // many events for one transition
    }

    state Working
    {

     history : Deep  => ABC
     entry
     exit
     {
     Something2
     Something3
     }
        (H*)

      junction j1
      {
      guard1 => a;
      guard2 => b;
      }

     // junction syntax
      a => {guard1 / A1 => b;
             guard2 / A2 => c;
             guard3 / A3 => {
                             guard4 / A4 => e;
                             guard5 / A5=> (j1);
                             else => f;
                             }
             else => d;
            }
            
      merge m1 => A; // merge syntax
      // choice syntax
      a => ${guard1 / A1 => b;
             guard2 / A2 => c;
             guard3 / A3 => {
                             guard4 / A4 => e;
                             guard5 / A5=> (j1);
                             else => f;
                             }
             else => d;
            }
       
            state AnotherSyntax : A
            {
              a => B; //
            }
   }
 }
   #>
    */

  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro statechart(ty : TypeBuilder, body : PExpr)
  {
     FsmHelper.ParseAndGenerate(ty, Macros.ImplicitCTX(), body);
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class)]
  macro statechart(ty : TypeBuilder, _ : PExpr)
  {
     FsmHelper.CheckEventClasses(ty, Macros.ImplicitCTX());
  }
  
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Method)]
  macro ActionFor(_ : TypeBuilder, _ : ParsedMethod, body)
  {
    _ = body
  }

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Property)]
  macro GuardFor(_ : TypeBuilder, _ : ParsedProperty, body)
  {
    _ = body
  }

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Method)]
  macro GuardFor(_ : TypeBuilder, _ : ParsedMethod, body)
  {
    _ = body
  }

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Field)]
  macro GuardFor(_ : TypeBuilder, _ : ParsedField, body)
  {
    _ = body
  }
  
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Method)]
  macro EventFor(_ : TypeBuilder, _ : ParsedMethod, body)
  {
    _ = body
  }

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Method)]
  macro Constructor(_ : TypeBuilder, _ : ParsedMethod)
  {
    
  }
}
