using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{

  using StateNode;
  using ListUtils;
  using GuardNode;
  /// <summary>
  /// Description of ParserActions.
  /// </summary>
  public partial class FsmParser
  {
    create_event(tok : NToken, parms : list[NToken]) : TransitionEvent
    {
      def name = GetText(tok);
      def pos = tok.StartPos;
      
      match (name)
      {
        | "completion" 
        | "_"            => TransitionEvent.Completion(pos)
        | n              => TransitionEvent.Normal(pos, n, parms.Map(GetText))
      }
    }

    empty_action(s : NToken, _ : NToken) : FsmAction.Normal
    {
      FsmAction.Normal(s.StartPos, null, [])
    }
    
    delim_action_list(tok : NToken, lst : List[FsmAction], _ : NToken) : Actions
    {
      Actions(tok.StartPos, lst.NToList())
    }

    empty_act_list(tok : NToken) : Actions
    {
      Actions(tok.StartPos, [])
    }
    
    entry(attr : option[List[NToken]], key : NToken, acts : Actions) : Entry
    {
      //def acts = acts.WithDefault(Actions([], key.StartPos));
      def attr = attr.WithDefault(Enumerable.Empty());
      def attr = get_action_attr(attr);
      Entry(key.StartPos, attr, acts)
    }

    exit(attr : option[List[NToken]], key : NToken,  acts : Actions) : Exit
    {
      //def acts = acts.WithDefault(Actions([], key.StartPos));
      def attr = attr.WithDefault(Enumerable.Empty());
      def attr = get_action_attr(attr);
      Exit(key.StartPos, attr, acts)
    }
    
    expr_act_action(act : Actions, _ : NToken) : Actions
    {
      act
    }

    expr_action(_ : NToken, text : NToken) : Actions
    {
      parse_action(text)
    }
  
    long_expr_action(_ : NToken, _ : NToken, text : NToken, _ : NToken) : Actions
    {
      parse_action(text)
    }
    
    parse_action(tok : NToken) : Actions
    {
      def pos = tok.StartPos;
      def text = GetText(tok);
      def expr = MainParser.ParseExpr(env, text);
      def act = FsmAction.Expr(pos, expr);
      Actions(pos, act :: [])
    }
    
    tran_action(n : NToken) : FsmAction.Normal
    {
      FsmAction.Normal(n.StartPos, GetText(n), [])
    }
    
    expr_ext_tran_action(act : Actions, _ : NToken) : Actions
    {
      act
    }

    expr_loc_tran_action(act : Actions, _ : NToken) : Actions
    {
      act
    }

    empty_ext_act_list(_ : NToken) : Actions
    {
      Actions([])
    }

    empty_loc_act_list(_ : NToken) : Actions
    {
      Actions([])
    }

    ext_act_list(tok : NToken, lst : List[FsmAction], _ : NToken) : Actions
    {
      Actions(tok.StartPos, lst.NToList())
    }

    loc_act_list(tok : NToken, lst : List[FsmAction], _ : NToken) : Actions
    {
      Actions(tok.StartPos, lst.NToList())
    }
    
    _expr_act_action(_ : NToken, text : NToken, _ : NToken) : Actions
    {
      parse_action(text)
    }
    
    expr_act_action2(_ : NToken, _ : NToken, text : NToken, _ : NToken) : Actions
    {
      parse_action(text)
    }
  }
}
