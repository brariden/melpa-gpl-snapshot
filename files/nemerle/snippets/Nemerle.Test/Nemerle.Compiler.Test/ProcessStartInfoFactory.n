using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Linq;

namespace Nemerle.Compiler.Test
{
  internal abstract class ProcessStartInfoFactory
  {
    public abstract CreateProcessStartInfo(fineName : string, arguments : IEnumerable[string]) : ProcessStartInfo;

    protected static JoinArguments(arguments : IEnumerable[string]) : string
    {
      def result = StringBuilder();
      foreach (argument in arguments with index)
      {
        unless(index == 0) _ = result.Append(' ');
        if (string.IsNullOrEmpty(argument))
          _ = result.Append('"').Append('"');
        else if (_needQuotes.IsMatch(argument))
        {
          _ = result.Append('"');
          mutable pos = 0;
          foreach(m is Match when m.Success in _escapeQuotes.Matches(argument))
          {
            def backslashGroup = m.Groups[1];
            def tailGroup = m.Groups[2];
            _ = result.Append(argument, pos, m.Index - pos)
              .Append(argument, backslashGroup.Index, backslashGroup.Length)
              .Append(argument, backslashGroup.Index, backslashGroup.Length);
            when (tailGroup.Value == "\"")
              _ = result.Append("\\\"");
            pos = m.Index + m.Length;
          }
          _ = result.Append(argument, pos, argument.Length - pos)
            .Append('"');
        }
        else
          _ = result.Append(argument);
      }
      result.ToString()
    }

    private static _needQuotes   : Regex = Regex(<#\s|"#>, RegexOptions.Compiled);
    private static _escapeQuotes : Regex = Regex(<#(\\*)("|$)#>, RegexOptions.Compiled);
  }
}
