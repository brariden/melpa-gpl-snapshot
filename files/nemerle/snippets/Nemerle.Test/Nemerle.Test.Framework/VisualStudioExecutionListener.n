using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Xml.Linq;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Test.Framework
{
  public sealed class VisualStudioExecutionListener : ExecutionListener
  {
    public this(suiteName : string, summaryResultPath : string)
      requires !string.IsNullOrEmpty(suiteName)
      requires !string.IsNullOrEmpty(summaryResultPath)
    {
      _suiteName = suiteName;
      _summaryResultPath = summaryResultPath;
    }

    public override Start() : void
    {
      _summary.Clear();
    }

    public override TestStart(test : Test) : void
    {
      _ = test;
    }

    public override TestComplete(test : Test, result : Result, statistics : Statistics) : void
    {
      _ = statistics;
      _summary.Add(test, result);
    }

    public override Complete() : void
    {
      mutable summaryResult = "Passed";
      def results = List();
      foreach(r in _summary)
      {
        | (test, Passed(null)) =>
          results.Add(XElement("InnerTest",
            XElement("TestName", test.Name),
            XElement("TestResult", "Passed"))
          );

        | (test, Passed(message)) =>
          results.Add(XElement("InnerTest",
            XElement("TestName", test.Name),
            XElement("TestResult", "Passed"),
            XElement("ErrorMessage", message)
          ));

        | (test, Skipped(message)) =>
          results.Add(XElement("InnerTest",
            XElement("TestName", test.Name),
            XElement("TestResult", "Skipped"),
            XElement("ErrorMessage", message)
          ));

        | (test, Failed(message, []))
        | (test, Failed(failMessage, details)) with message = $<#..$(details; Environment.NewLine)$(Environment.NewLine)$failMessage#>
        | (test, Exception(exception))         with message = exception.ToString() =>
          summaryResult = "Failed";
          results.Add(XElement("InnerTest",
            XElement("TestName", test.Name),
            XElement("TestResult", "Failed"),
            XElement("ErrorMessage", message)
          ));
      }
      def document = XDocument(XElement("SummaryResult",
        XElement("TestName", _suiteName),
        XElement("TestResult", summaryResult),
        XElement("InnerTests", results)
      ));
      document.Save(_summaryResultPath, SaveOptions.None);
    }

    private _summary : List[Test * Result] = List();
    private _suiteName : string;
    private _summaryResultPath : string;
  }
}
