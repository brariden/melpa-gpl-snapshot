using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Test.Framework
{
  public sealed class UnixColorizedOutputWriter : ColorizedOutputWriter
  {
    public this([NotNull] output : TextWriter)
    {
      _output = output;
    }

    public override Write(color : ConsoleColor?, text : string) : void
    {
      if(color.HasValue)
      {
        def colored = beginColor(color.GetValueOrDefault());
        try _output.Write(text);
        finally when(colored) endColor();
      }
      else _output.Write(text);
      _currentColumn += text.Length;
    }

    public override WriteLine(color : ConsoleColor?, text : string) : void
    {
      if(color.HasValue)
      {
        def colored = beginColor(color.GetValueOrDefault());
        try _output.WriteLine(text);
        finally when(colored) endColor();
      }
      else _output.WriteLine(text);
      _currentColumn = 0;
    }

    public override WriteSpacer(color : ConsoleColor?, spacerSymbol : char, desiredColumn : int) : void
    {
      def spacer = string(spacerSymbol, Math.Max(0, desiredColumn - _currentColumn));
      Write(color, spacer);
    }

    public override Flush() : void
    {
      _output.Flush();
    }

    private beginColor(color : ConsoleColor) : bool
    {
      | Green  with value = "\e[01;32m"
      | Yellow with value = "\e[01;33m"
      | Red    with value = "\e[01;31m"
      | Cyan   with value = "\e[01;36m" => _output.Write(value); true
      | _ => false
    }

    private endColor() : void
    {
      _output.Write("\e[0m");
    }

    private _output : TextWriter;
    private mutable _currentColumn : int;
  }
}
