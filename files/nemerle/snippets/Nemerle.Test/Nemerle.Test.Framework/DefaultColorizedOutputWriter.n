using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Test.Framework
{
  public sealed class DefaultColorizedOutputWriter : ColorizedOutputWriter
  {
    public this()
    {
      this(Console.Out);
    }

    public this([NotNull] output : TextWriter)
    {
      _output = output;
    }

    public override Write(color : ConsoleColor?, text : string) : void
    {
      if(color.HasValue)
      {
        def oldColor = Console.ForegroundColor;
        Console.ForegroundColor = color.GetValueOrDefault();
        try _output.Write(text);
        finally Console.ForegroundColor = oldColor;
      }
      else _output.Write(text);
      _currentColumn += text.Length;
    }

    public override WriteLine(color : ConsoleColor?, text : string) : void
    {
      if(color.HasValue)
      {
        def oldColor = Console.ForegroundColor;
        Console.ForegroundColor = color.GetValueOrDefault();
        try _output.WriteLine(text);
        finally Console.ForegroundColor = oldColor;
      }
      else _output.WriteLine(text);
      _currentColumn = 0;
    }

    public override WriteSpacer(color : ConsoleColor?, spacerSymbol : char, desiredColumn : int) : void
    {
      def spacer = string(spacerSymbol, Math.Max(0, desiredColumn - _currentColumn));
      Write(color, spacer);
    }

    public override Flush() : void
    {
      _output.Flush();
    }

    private _output : TextWriter;
    private mutable _currentColumn : int;
  }
}
