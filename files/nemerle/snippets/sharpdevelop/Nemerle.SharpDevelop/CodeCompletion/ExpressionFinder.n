using System;
using System.Text;
using System.Text.RegularExpressions;
using SCG = System.Collections.Generic;

using ICSharpCode.SharpDevelop;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.SharpDevelop.Editor;

namespace Nemerle.SharpDevelop.CodeCompletion
{
  public class ExpressionFinder : IExpressionFinder
  {
    public this()
    {
      this.source = null;
    }

    public this(fileName : string) { 
      this.source = match(EngineContext.FindSourceInContexts(fileName))
      {
        | Some(s) => s
        | _ => null
      }
    }

    source : Source;

    static tokenizer : Regex = Regex(@"\w+|[\$\^\|\*\+\\\?/=&%#@<>-]+", RegexOptions.Compiled);

    private FindToken(content : string, offset : int) : string
    {
      foreach(m is Match when m.Success in tokenizer.Matches(content))
      {
        when(m.Index <= offset && offset <= m.Index + m.Length)
          Nemerle.Imperative.Return(m.Value);
        when(offset < m.Index)
          Nemerle.Imperative.Break();
      }
      ""
    }

    private GetContent(text : string, offset : int) : string * int * int * int
    {
      match(source)
      {
        | null => (text, offset, 0, 0)
        | _ =>
          def (line, col) = source.GetLineIndexOfPosition(offset);
          (source.GetLine(line - 1), col - 1, line, col + 1)
      }
    }

    private MakeExpressionResult(token : string, line : int, col : int) : ExpressionResult
    {
      def result = ExpressionResult(token);
      result.Tag = (source, line, col);
      result
    }

    public FindExpression(text : string, offset : int) : ExpressionResult
    {
      def (content, offset, line, col) = GetContent(text, offset);
      MakeExpressionResult(FindToken(content, offset), line, col);
    }

    public FindFullExpression(text : string, offset : int) : ExpressionResult
    {
      def (content, offset, line, col) = GetContent(text, offset);
      MakeExpressionResult(FindToken(content, offset), line, col);
    }

    public RemoveLastPart(expression : string) : string
    {
      expression
    }
  }
}