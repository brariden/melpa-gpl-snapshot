using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Windows.Forms;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop;
using ICSharpCode.SharpDevelop.Gui;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.TextEditor;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Utility;
using Nemerle.SharpDevelop.Editor;

namespace Nemerle.SharpDevelop.CodeCompletion
{
  public sealed class EngineContext : IIdeProject, IDisposable
  {
    private this([NotNull] project : IProject)
    {
      this.project = project;
      this.engine = EngineFactory.Create(this, TraceWriter(), false);
      this.engine.TypedtreeCreated += OnTypedTreeCreated;

      match(project)
      {
        | project is AbstractProject =>
          project.ActiveConfigurationChanged += OnActiveConfigurationChanged;
        | _ => ();
      }

      ReloadSources();

      LoggingService.Debug($"Engine context created for project $project.");
    }

    [Accessor] mutable engine : IIdeEngine;

    [Accessor] sync_root : object = object();

    [Accessor] project : IProject;

    source_map : SCG.Dictionary[int, Source] = SCG.Dictionary();

    private FindSource(file_name : string) : option[Source]
    {
      mutable source;
      if(source_map.TryGetValue(Location.GetFileIndex(file_name), out source))
        Some(source)
      else
        None()
    }

    private AddSourceNoCheck(file_name : string) : Source
    {
      def source = Source(this, file_name);
      source_map.Add(source.FileIndex, source);
      source
    }

    private AddSource(file_name : string) : Source
    {
      match(FindSource(file_name))
      {
        | Some(source) => source
        | _ =>
          def source = AddSourceNoCheck(file_name);
          engine.RequestOnBuildTypesTree();
          source
      }
    }

    private RemoveSource(file_name : string) : bool
    {
      match(FindSource(file_name))
      {
        | Some(source) =>
          _ = source_map.Remove(source.FileIndex);
          source.Dispose();
          engine.RequestOnBuildTypesTree();
          true

        | _ => false
      }
    }

    private Clear() : void
    {
      foreach(source in source_map.Values)
      {
        source.Dispose();
      }
      source_map.Clear();
    }

    private ReloadSources() : void
    {
      Clear();
      foreach(item is FileProjectItem in project.GetItemsOfType(ItemType.Compile))
      {
        _ = AddSourceNoCheck(item.FileName)
      }
    }

    mutable reload_project_async : AsyncRequest = null;

    public Reload(reload_sources : bool) : void
    {
      lock(sync_root)
      {
        when(null == reload_project_async || reload_project_async.IsCompleted)
        {
          when(reload_sources)
            ReloadSources();
          reload_project_async = engine.BeginReloadProject();
        }
      }
    }

    #region IIdeProject

    public GetAssemblyReferences() : SCG.IEnumerable[string]
    {
      foreach(item is ReferenceProjectItem in project.GetItemsOfType(ItemType.Reference))
      {
        yield item.AssemblyName.FullName
      }
      foreach(item is ProjectReferenceProjectItem in project.GetItemsOfType(ItemType.ProjectReference))
      {
        def project = item.ReferencedProject;
        unless(null == project)
        {
          def output_assembly = project.OutputAssemblyFullPath;
          when(null != output_assembly && File.Exists(output_assembly))
            yield output_assembly;
        }
      }
    }

    public GetMacroAssemblyReferences() : SCG.IEnumerable[string]
    {
      foreach(item is MacroReferenceProjectItem in project.GetItemsOfType(ItemTypeExt.MacroReference))
      {
        yield item.AssemblyName.FullName
      }
      foreach(item is MacroProjectReferenceProjectItem in project.GetItemsOfType(ItemTypeExt.MacroProjectReference))
      {
        def project = item.ReferencedProject;
        unless(null == project)
        {
          def output_assembly = project.OutputAssemblyFullPath;
          when(null != output_assembly && File.Exists(output_assembly))
            yield output_assembly;
        }
      }
    }

    public GetOptions() : CompilationOptions
    {
      def opt = CompilationOptions();

      opt.GreedyReferences = false;
      opt.ColorMessages    = false;
      opt.IgnoreConfusion  = true;

      match(project)
      {
        | project is MSBuildBasedProject =>
          def read(name, f)
          {
            def value = project.GetProperty("", "", name);
            unless(string.IsNullOrEmpty(value))
              f(value);
          }
          def as_strings(value)
          {
            NString.Split(value, ';', ' ').Filter(s => !string.IsNullOrEmpty(s))
          }
          def as_ints(value)
          {
            as_strings(value).FoldRight([], fun(s, acc)
            {
              mutable i;
              if(int.TryParse(s, out i)) i :: acc else acc
            })
          }
          def as_flag(value, f)
          {
            mutable flag;
            when(bool.TryParse(value, out flag))
              f(flag);
          }

          read("DefineConstants",
            v => as_strings(v).Iter(opt.DefineConstant));

          read("RootNamespace",
            v => opt.RootNamespace = v);

          read("PlatformTarget",
            v => opt.Platform = v);

          read("NoStdLib",
            v => as_flag(v, f => opt.DoNotLoadStdlib = f));

          read("NoStdMacros",
            v => as_flag(v, f => opt.DoNotLoadMacros = f));

          read("TreatWarningsAsErrors",
            v => as_flag(v, f => opt.Warnings.TreatWarningsAsErrors = f));

          read("DisabledWarnings",
            v => as_ints(v).Iter(opt.Warnings.Disable));

          read("EnabledWarnings",
            v => as_ints(v).Iter(opt.Warnings.Enable));

          read("IndentationSyntax",
            v => as_flag(v, f => opt.IndentationSyntax = f));

        | _ => ();
      }

      opt
    }

    public GetSource(fileIndex : int) : IIdeSource
    {
      lock(sync_root)
      {
        mutable source;
        if(source_map.TryGetValue(fileIndex, out source))
          source
        else
          null
      }
    }

    public GetSource(fileName : string) : Source
    {
      lock(sync_root)
      {
        mutable source;
        if(source_map.TryGetValue(Location.GetFileIndex(fileName), out source))
          source
        else
          null
      }
    }

    public GetSources() : SCG.IEnumerable[IIdeSource]
    {
      lock(sync_root)
      {
        def sources = array(source_map.Count);
        source_map.Values.CopyTo(sources, 0);
        sources
      }
    }

    public ClearAllCompilerMessages() : void
    {
      LoggingService.Debug($"Clearing compiler messages for project $project.");
    }

    public SetCompilerMessageForCompileUnit(_compileUnit : CompileUnit) : void
    {
    }

    public SetMethodCompilerMessages(_member : MemberBuilder, _messages : SCG.IEnumerable[CompilerMessage]) : void
    {
    }

    public SetStatusText(text : string) : void
    {
      StatusBarService.SetMessage(text);
    }

    public SetTopLevelCompilerMessages(_messages : SCG.IEnumerable[CompilerMessage]) : void
    {
      LoggingService.Debug($"Setting compiler messages for project $project.");
    }

    public ShowMessage(message : string, messageType : MessageType) : void
    {
#if DEBUG
      match(messageType)
      {
        | Error     => MessageService.ShowError(message)
        | Warning   => MessageService.ShowWarning(message)
        | Hint | Info | _  => MessageService.ShowMessage(message)
      }
#else
      match(messageType)
      {
        | Error     => LoggingService.Error(message)
        | Warning   => LoggingService.Warn(message)
        | Hint | Info | _  => LoggingService.Info(message)
      }
#endif
    }

    public LookupLocationsFromDebugInformation(_info : GotoInfo) : array[GotoInfo]
    {
      array(0)
    }

    public SetHighlights(_source : IIdeSource, _highlights : SCG.IEnumerable[GotoInfo]) : void
    {
    }

    public AddUnimplementedMembers(_source : IIdeSource, _ty : TypeBuilder, _unimplementedMembers : SCG.IEnumerable[System.Linq.IGrouping[FixedType.Class, IMember]]) : void
    {
    }

    public AddOverrideMembers(_source : IIdeSource, _ty : TypeBuilder, _notOverriden : SCG.IEnumerable[IMember]) : void
    {
    }

    public ClearMethodCompilerMessages(_method : MemberBuilder) : void
    {
    }
    
    public TypesTreeCreated() : void
    {
    }

    #endregion


    #region Notification handlers

    private OnTypedTreeCreated(_ : object, _ : EventArgs) : void
    {
      LoggingService.Debug($"Type tree built for project $project");
    }

    private OnActiveConfigurationChanged(_ : object, _ : EventArgs) : void
    {
      Reload(true);
    }

    private NotifyProjectItemAddedInternal(item : ProjectItem) : void
    {
      | item is FileProjectItem when item.ItemType == ItemType.Compile =>
        lock(sync_root)
        {
          def source = AddSource(item.FileName);
          def view = FileService.GetOpenFile(item.FileName);
          NemerleSourceDisplayBinding.BindSource(view, source);
        }
      | _ => ReloadEngineOnReferenceChange(item);
    }

    private NotifyProjectItemRemovedInternal(item : ProjectItem) : void
    {
      | item is FileProjectItem when item.ItemType == ItemType.Compile =>
        lock(sync_root)
        {
          _ = RemoveSource(item.FileName);
        }
      | _ => ReloadEngineOnReferenceChange(item);
    }

    private ReloadEngineOnReferenceChange(item : ProjectItem) : void
    {
      when(item.ItemType == ItemType.Reference
        || item.ItemType == ItemType.ProjectReference
        || item.ItemType == ItemTypeExt.MacroReference
        || item.ItemType == ItemTypeExt.MacroProjectReference)
        {
        _ = engine.BeginReloadProject();
      }
    }

    #endregion


    #region Disposable

    public Dispose() : void
    {
      lock(context_table)
      {
        _ = context_table.Remove(project)
      }

      lock(sync_root)
      {
        match(project)
        {
          | project is AbstractProject =>
            project.ActiveConfigurationChanged -= OnActiveConfigurationChanged;
          | _ => ();
        }
        unless(null == engine)
        {
          engine.Close();
          engine = null;
        }
        Clear();
      }

      LoggingService.Debug($"Engine context disposed for project $project.");
    }

    #endregion


    #region Static members and global event handlers

    private static context_table : SCG.Dictionary[IProject, EngineContext] = SCG.Dictionary();

    static this()
    {
      Application.Idle += OnApplicationIdle;
      ProjectService.ProjectItemAdded += OnProjectItemAdded;
      ProjectService.ProjectItemRemoved += OnProjectItemRemoved;
    }

    public static CreateContext([NotNull]project : IProject) : EngineContext
    {
      lock(context_table)
      {
        mutable context;
        unless(context_table.TryGetValue(project, out context))
        {
          context = EngineContext(project);
          context_table[project] = context;
        }
        context
      }
    }

    public static GetContext([NotNull]project : IProject) : EngineContext
    {
      lock(context_table)
      {
        mutable context;
        if(context_table.TryGetValue(project, out context)) 
          context
        else
          null
      }
    }

    public static FindSourceInContexts(file_name : string) : option[Source]
    {
      lock(context_table)
      {
        def find(contexts)
        {
          if(contexts.MoveNext())
            match(contexts.Current.FindSource(file_name))
            {
              | Some(s) => Some(s)
              | _ => find(contexts)
            }
          else
            None()
        }
        find(context_table.Values.GetEnumerator())
      }
    }

    private static OnApplicationIdle(_ : object, _ : EventArgs) : void
    {
      lock(context_table)
      {
        foreach(context in context_table.Values)
          context.engine.OnIdle();

        def max_time = TimeSpan.FromSeconds(0.05);
        def timer = Stopwatch.StartNew();

        AsyncWorker.DispatchResponses();

        while (timer.Elapsed < max_time && AsyncWorker.DoSynchronously())
          ();
      }
    }

    private static OnProjectItemAdded(_ : object, e : ProjectItemEventArgs) : void
    {
      lock(context_table)
      {
        def item = e.ProjectItem;
        def project = item.Project;

        foreach(pair when ReferenceEquals(project, pair.Key) in context_table)
          pair.Value.NotifyProjectItemAddedInternal(item);
      }
    }

    private static OnProjectItemRemoved(_ : object, e : ProjectItemEventArgs) : void
    {
      lock(context_table)
      {
        def item = e.ProjectItem;
        def project = item.Project;

        foreach(pair when ReferenceEquals(project, pair.Key) in context_table)
          pair.Value.NotifyProjectItemRemovedInternal(item);
      }
    }

    #endregion
  }
}