using System;
using System.Collections;
using System.Windows.Forms;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop;
using ICSharpCode.SharpDevelop.Dom;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Completion2;

namespace Nemerle.SharpDevelop.CodeCompletion
{
  public class Resolver : IResolver
  {
    public Resolve(expressionResult : ExpressionResult, _parseInfo : ParseInformation, _fileContent : string) : ResolveResult
    {
      match(expressionResult.Tag)
      {
        | info is Source * int * int => NemerleResolveResult(info)
        | _ => ResolveResult(null, null, null)
      }
    }

    public CtrlSpace(caretLine : int, caretColumn : int, parseInfo : ParseInformation, _fileContent : string, _context : ExpressionContext) : ArrayList
    {
      match(parseInfo.MostRecentCompilationUnit)
      {
        | cu is NemerleCompilationUnit => CompletionHelper.GetCompletionData(cu.Source, caretLine, caretColumn)
        | _ => ArrayList()
      }
    }
  }

  public class NemerleResolveResult : ResolveResult
  {
    source : Source;

    line : int;

    col : int;

    public this(source : Source, line : int, col : int)
    {
      base(null, null, null);
      this.source = source;
      this.line = line;
      this.col = col;
    }

    public override GetCompletionData(_projectContent : IProjectContent) : ArrayList
    {
      CompletionHelper.GetCompletionData(source, line, col)
    }
  }

  module CompletionHelper
  {
    public GetCompletionData([NotNull]source : Source, line : int, col : int) : ArrayList
    {
      def get_completion_data(source)
      {
        // direct invoke of Completion method can cause dead-lock with main thread
        def async = source.BeginCompletionAsync(line, col);
        if(Utils.InProcWaitFor(() => async.IsCompleted, TimeSpan.FromSeconds(10)))
          source.EndCompletionAsync(async)
        else
          array(0)
      }

      def convert_completion_data(data)
      {
        def result = ArrayList();
        def append(x) { _ = result.Add(x); }

        def stub_class = DefaultClass(DefaultCompilationUnit.DummyCompilationUnit, "x");

        foreach(ci in data)
        {
          match(ci.GlyphType :> GlyphType)
          {
            | GlyphType.Class
            | GlyphType.Struct
            | GlyphType.Enum
            | GlyphType.Variant
            | GlyphType.VariantOption
            | GlyphType.Interface =>
              append(DefaultClass(DefaultCompilationUnit.DummyCompilationUnit, ci.DisplayName))

            | GlyphType.Field     =>
              append(DefaultField(stub_class, ci.DisplayName))

            | GlyphType.Method
            | GlyphType.Function
            | GlyphType.Macro 
            | GlyphType.Operator =>
              append(DefaultMethod(stub_class, ci.DisplayName))

            | GlyphType.Property =>
              append(DefaultProperty(stub_class, ci.DisplayName))

            | GlyphType.Namespace
            | _  =>
              append(ci.ToString())
          }
        }
        result
      }

      source |> get_completion_data |> convert_completion_data
    }
  }
}