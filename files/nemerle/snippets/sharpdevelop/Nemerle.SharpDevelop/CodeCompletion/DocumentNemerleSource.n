using System;
using System.Windows.Forms;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop;
using ICSharpCode.SharpDevelop.Debugging;
using ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor;
using ICSharpCode.SharpDevelop.Gui;
using ICSharpCode.TextEditor;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;
using Nemerle.SharpDevelop.Editor;

namespace Nemerle.SharpDevelop.CodeCompletion
{
  public sealed class DocumentNemerleSource : IIdeSource, IDisposable
  {
    public this([NotNull] source : Source, [NotNull] document : IDocument, [NotNull] editor : TextEditorControl)
    {
      this.source = source;
      this.document = document;
      this.editor = editor;
      this.document.DocumentAboutToBeChanged += OnDocumentAboutToBeChanged;
      this.document.DocumentChanged += OnDocumentChanged;
      this.editor.ActiveTextAreaControlChanged += OnActiveTextAreaControlChanged;
      SubscribeTextAreaEvents(editor.ActiveTextAreaControl);
    }

    source : Source;

    editor : TextEditorControl;

    [Accessor] document : IDocument;

    #region IIdeSource

    [Accessor] mutable current_version : int = 0;

    public CompileUnit : CompileUnit
    {
      get;
      set;
    }

    public FileIndex : int
    {
      get { source.FileIndex }
    }

    public LineCount : int
    {
      get { Utils.WorkbenchInvoke(fun() { document.TotalNumberOfLines }) }
    }

    public RelocationRequestsQueue : SCG.List[RelocationRequest]
    {
      get { null }
    }

    public LockWrite() : void { }

    public UnlockWrite() : void { }

    public LockReadWrite() : void { }

    public UnlocReadkWrite() : void { }

    public GetTextCurrentVersionAndFileIndex() : string * int * int
    {
      LockWrite();
      try
        (GetText(), CurrentVersion, FileIndex)
      finally
        UnlockWrite();
    }

    public SetRegions(_regions : SCG.IList[RegionInfo], _sourceVersion : int) : void { }

    public SetTopDeclarations(_topDeclarations : array[TopDeclaration]) : void { }

    public GetText() : string
    {
      Utils.WorkbenchInvoke(fun() { document.TextContent })
    }

    public GetRegion(lineStart : int, colStart : int, lineEnd : int, colEnd : int) : string
    {
      Utils.WorkbenchInvoke(fun()
      {
        def start = document.PositionToOffset(TextLocation(colStart - 1, lineStart - 1));
        def end   = document.PositionToOffset(TextLocation(colEnd - 1,   lineEnd - 1));
        document.GetText(start, end - start)
      })
    }

    public GetRegion(location : Location) : string
    {
      GetRegion(location.Line, location.Column, location.EndLine, location.EndColumn)
    }

    public GetLine(line : int) : string
    {
      Utils.WorkbenchInvoke(fun()
      {
        def segment = document.GetLineSegment(line);
        document.GetText(segment)
      })
    }

    public GetPositionOfLineIndex(line : int, col : int) : int
    {
      Utils.WorkbenchInvoke(fun()
      {
        document.PositionToOffset(TextLocation(col - 1, line - 1))
      })
    }

    public GetLineIndexOfPosition(pos : int) : int * int
    {
      Utils.WorkbenchInvoke(fun()
      {
        def loc = document.OffsetToPosition(pos);
        (loc.Line + 1, loc.Column + 1)
      })
    }

    #endregion


    #region TextArea switching

    text_areas : SCG.List[TextAreaControl] = SCG.List();

    private OnActiveTextAreaControlChanged(_ : object, _ : EventArgs) : void
    {
      SubscribeTextAreaEvents(editor.ActiveTextAreaControl); 
    }

    private SubscribeTextAreaEvents(text_area : TextAreaControl) : void
    {
      unless(text_areas.Contains(text_area))
      {
        text_area.Caret.PositionChanged += OnPositionChanged;
        text_area.TextArea.ToolTipRequest += OnToolTipRequest;
      }
    }

    #endregion


    #region Caret moving handling

    private OnPositionChanged(sender : object, _ : EventArgs) : void
    {
      match(sender)
      {
        | caret is Caret =>
          source.Context.Engine.SetTextCursorLocation(source.FileIndex, caret.Line + 1, caret.Column + 1);
        | _ => ();
      }
    }

    #endregion


    #region Document update handling

    mutable old_end_loc : TextLocation;
    mutable old_end_offset : int;
    mutable old_text_length : int;

    private OnDocumentAboutToBeChanged(_ : object, e : DocumentEventArgs) : void
    {
      old_text_length = document.TextLength;
      old_end_offset = e.Offset + if(e.Length > 0) e.Length else 0;
      old_end_loc = document.OffsetToPosition(old_end_offset);
    }

    private OnDocumentChanged(_ : object, e : DocumentEventArgs) : void
    {
      current_version += 1;

      def start_loc = document.OffsetToPosition(e.Offset);

      def new_text_length = document.TextLength;
      def new_text_offset = Math.Max(0, Math.Min(new_text_length, old_end_offset + (new_text_length - old_text_length)));
      def new_end_loc = document.OffsetToPosition(new_text_offset);

      source.UpdateCompileUnit(
        new_end_loc.Line + 1, new_end_loc.Column + 1,
        old_end_loc.Line + 1, old_end_loc.Column + 1,
        start_loc.Line + 1, start_loc.Column + 1);

      when(e.Text == "." && CodeCompletionOptions.EnableCodeCompletion && CodeCompletionOptions.CompleteWhenTyping)
        match(editor)
        {
          | editor is SharpDevelopTextAreaControl =>
            editor.ShowCompletionWindow(CodeCompletionDataProvider(), '.');
          | _ => ();
        }
    }

    #endregion


    #region Tooltip show handing

    mutable tooltip_waiting : bool;

    private OnToolTipRequest(_ : object, e : ToolTipRequestEventArgs) : void
    {
      when(tooltip_waiting || !CodeCompletionOptions.TooltipsEnabled)
        Nemerle.Imperative.Return();

      def loc = e.LogicalPosition;
      if(!e.ToolTipShown
        && e.InDocument
        && 0 < loc.Column
        && loc.Column < document.GetLineSegment(loc.Line).Length)
      {
        tooltip_waiting = true;
        try
        {
          def request = source.Context.Engine.BeginGetQuickTipInfo(source, loc.Line + 1, loc.Column + 1);
          def text_area = editor.ActiveTextAreaControl.TextArea;
          if(Utils.InProcWaitFor(() => request.IsCompleted, TimeSpan.FromSeconds(6)))
          {
            WpfTooltipService.ShowTooltip(request.QuickTipInfo, text_area, loc);
          }
          else
          {
            request.Stop = true;
            request.MarkAsCompleted();
            LoggingService.Debug("Tooltip request aborted.");
          }
        }
        finally
          tooltip_waiting = false;
      }
      else
        WpfTooltipService.CloseTooltip();
    }

    #endregion


    #region Disposable

    public Dispose() : void
    {
      document.DocumentAboutToBeChanged -= OnDocumentAboutToBeChanged;
      document.DocumentChanged -= OnDocumentChanged;
      editor.ActiveTextAreaControlChanged -= OnActiveTextAreaControlChanged;
      foreach(text_area in text_areas)
      {
        text_area.Caret.PositionChanged -= OnPositionChanged;
        text_area.TextArea.ToolTipRequest -= OnToolTipRequest;
      }
    }

    #endregion
  }
}