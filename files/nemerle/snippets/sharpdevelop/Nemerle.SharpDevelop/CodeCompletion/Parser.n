using System;
using System.IO;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.SharpDevelop.Project;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;

namespace Nemerle.SharpDevelop.CodeCompletion
{
  public class Parser : IParser
  {
    public LexerTags : array[string]
    {
      get;
      set;
    }

    public Language : LanguageProperties
    {
      get { NemerleLanguageProperties.Instance }
    }

    public CreateExpressionFinder(fileName : string) : IExpressionFinder
    {
      ExpressionFinder(fileName)
    }

    public CreateResolver() : IResolver
    {
      Resolver()
    }

    public CanParse(fileName : string) : bool
    {
      string.Equals(Path.GetExtension(fileName), ".n", StringComparison.OrdinalIgnoreCase);
    }

    public CanParse(project : IProject) : bool
    {
      project.Language == NemerleLanguageProperties.LanguageName
    }

    public Parse(projectContent : IProjectContent, fileName : string, _fileContent : string) : ICompilationUnit
    {
      LoggingService.Debug($"Parse $fileName");

      def project =
        match(projectContent.Project)
        {
          | project is IProject => project
          | _ => null
        }

      def engine =
        if(null != project)
          EngineContext.GetContext(project)
        else
          null;

      def source =
        if(null != engine)
          engine.GetSource(fileName)
        else
          null;

      if(null != source)
        source.ParseCompilationUnit() ?? DefaultCompilationUnit.DummyCompilationUnit
      else
        DefaultCompilationUnit.DummyCompilationUnit
    }
  }
}