using System;
using SCG = System.Collections.Generic;

using ICSharpCode.SharpDevelop.Gui;

using Nemerle.Assertions;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop
{

  module Utils
  {

    public WorkbenchInvoke[T](f : void -> T) : T
    {
      if(WorkbenchSingleton.InvokeRequired)
        WorkbenchSingleton.SafeThreadFunction(f)
      else
        f()
    }

    public WorkbenchInvoke(f : void -> void) : void
    {
      if(WorkbenchSingleton.InvokeRequired)
        WorkbenchSingleton.SafeThreadCall(f)
      else
        f()
    }

    public InProcWaitFor(pred : void -> bool, timeout : TimeSpan) : bool
    {
      def start_time = DateTime.Now;
      while(!pred())
      {
        Threading.Thread.Sleep(5);
        Windows.Forms.Application.DoEvents();
        when(DateTime.Now - start_time > timeout)
          Nemerle.Imperative.Return(false);
      }
      true
    }

  }

}