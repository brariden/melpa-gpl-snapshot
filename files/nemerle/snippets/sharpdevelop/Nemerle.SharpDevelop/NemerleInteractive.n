using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop;
using ICSharpCode.SharpDevelop.Gui;
using ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor;

using Nemerle.Text;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop
{
  public sealed class NemerleInteractivePad : AbstractPadContent
  {
    private panel : Panel = Panel();
    private input_txt : TextBox = TextBox();
    private output_txt : TextBox  = TextBox();

    private shell_name : string = "nemish.exe";
    private mutable shell : Process = null;
    private volatile mutable shell_running : bool = false;

    private output : Queue[string] = Queue();

    public this()
    {
      InitializeUI();
      def shell_path = Path.Combine(NemerleLanguageBinding.NemerleBinPath, shell_name);
      if(File.Exists(shell_path))
      {
        InitializeShell(shell_path);
      }
      else
      {
        AppendLine($"$shell_name not found.");
      }
    }

    private InitializeUI() : void
    {
      def font = System.Drawing.Font(System.Drawing.FontFamily.GenericMonospace, 10.0f);

      input_txt.Font = font;
      input_txt.Dock = DockStyle.Bottom;
      input_txt.KeyUp += fun(_, e)
      {
        match(e.KeyData, shell_running)
        {
          | (Keys.Return, true) =>
            shell.StandardInput.WriteLine(input_txt.Text);
            AppendLine(input_txt.Text + Environment.NewLine);
            input_txt.Text = "";

          | (Keys.Return, false) =>
            AppendLine($"$shell_name is not running - could not execute command.");

          | _ => ()
        }
      };

      output_txt.Font = font;
      output_txt.Multiline = true;
      output_txt.Dock = DockStyle.Fill;
      output_txt.ReadOnly = true;
      output_txt.ScrollBars = ScrollBars.Both;
      output_txt.WordWrap = false;

      panel.Controls.Add(input_txt);
      panel.Controls.Add(output_txt);
    }

    private InitializeShell(shell_path : string) : void
    {
      shell = Process();

      shell.StartInfo.FileName = shell_path;
      shell.StartInfo.UseShellExecute = false;
      shell.StartInfo.CreateNoWindow = true;
      shell.StartInfo.RedirectStandardInput = true;
      shell.StartInfo.RedirectStandardOutput = true;
      shell.StartInfo.RedirectStandardError = true;

      shell.ErrorDataReceived += fun(_, e)
      {
        lock(output)
        {
          output.Enqueue(e.Data);
        }
        WorkbenchSingleton.SafeThreadAsyncCall(PurgeOutput);
      };
      shell.OutputDataReceived += fun(_, e)
      {
        lock(output)
        {
          output.Enqueue(e.Data);
        }
        WorkbenchSingleton.SafeThreadAsyncCall(PurgeOutput);
      };
      shell.Exited += fun (_, _)
      {
        shell_running = false;
        lock(output)
        {
          output.Enqueue($"$shell_name died");
          output.Enqueue("restarting...");
        }
        WorkbenchSingleton.SafeThreadAsyncCall(PurgeOutput);
        shell.Close();
        InitializeShell(shell_path);
      };

      shell_running = shell.Start();

      when(shell_running)
      {
        shell.BeginErrorReadLine();
        shell.BeginOutputReadLine();
        shell.EnableRaisingEvents = true;
      }
    }

    private PurgeOutput() : void
    {
      lock(output)
      {
        while(output.Count > 0)
        {
          AppendLine(output.Dequeue());
        }
      }
    }

    private AppendLine(text : string) : void
    {
      output_txt.AppendText(text + Environment.NewLine);
    }

    public override Control : Control
    {
      get { panel }
    }
  }
}
