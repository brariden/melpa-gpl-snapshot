using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Gui;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.SharpDevelop.Project;

using MSBuild = Microsoft.Build.BuildEngine;

using Nemerle.Utility;

namespace Nemerle.SharpDevelop
{
  public class MacroProjectReferenceProjectItem : MacroReferenceProjectItem
  {
    internal this(project : IProject, build_item : MSBuild.BuildItem)
    {
      base(project, build_item);
    }

    public this(project : IProject, referenceTo : IProject)
    {
      base(project, ItemTypeExt.MacroProjectReference);
      this.Include = FileUtility.GetRelativePath(project.Directory, referenceTo.FileName);
      ProjectGuid = referenceTo.IdGuid;
      ProjectName = referenceTo.Name;
      this.referencedProject = referenceTo;
    }

    private mutable referencedProject : IProject;
    
    [Browsable(false)]
    public ReferencedProject : IProject
    {
      get
      {
        when (null == referencedProject)
          referencedProject = ProjectService.GetProject(this.FileName);
        referencedProject
      }
    }

    [ReadOnly(true)]
    public ProjectGuid : string
    {
      get
      {
        GetEvaluatedMetadata("Project")
      }
      set
      {
        SetEvaluatedMetadata("Project", value);
      }
    }

    [ReadOnly(true)]
    public ProjectName : string
    {
      get
      {
        GetEvaluatedMetadata("Name")
      }
      set
      {
        SetEvaluatedMetadata("Name", value);
      }
    }

    public override ShortName : string
    {
      get { Path.GetFileNameWithoutExtension(Include) }
    }

    // hide Version,Culture,PublicKeyToken,SpecificVersion in property pad
    // (they are meaningless for project references)
    [Browsable(false)]
    public override Version : Version
    {
      get { null }
    }

    [Browsable(false)]
    public override Culture : string
    {
      get { null }
    }

    [Browsable(false)]
    public override PublicKeyToken : string
    {
      get { null }
    }

    [Browsable(false)]
    public override SpecificVersion : bool
    {
      get { false }
    }
  }
}