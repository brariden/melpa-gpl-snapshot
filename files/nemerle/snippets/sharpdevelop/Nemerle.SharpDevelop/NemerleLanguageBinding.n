using System;
using System.Diagnostics;
using System.Reflection;
using System.IO;
using System.Xml;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Internal.Templates;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.TextEditor.Document;

using Nemerle.SharpDevelop.CodeCompletion;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop
{
  /// <summary>
  /// Description of NemerleProject.
  /// </summary>
  public sealed class NemerleLanguageBinding : ILanguageBinding
  {
    static this()
    {
#if !DEBUG
      // FIXME: prevent showing "Assertion failure" dialog box
      //      this dialog appears because of strange bug in relocation logic into compiler
      foreach(listener is DefaultTraceListener in Debug.Listeners)
      {
        listener.AssertUiEnabled = false;
      }
#endif
      def nemerle_env = Environment.GetEnvironmentVariable("Nemerle");
      def programs_env = Environment.GetEnvironmentVariable("ProgramFiles");

      NemerleBinPath =
        if(string.IsNullOrEmpty(nemerle_env))
          Path.Combine(programs_env, "Nemerle")
        else
          nemerle_env;

      ProjectService.ProjectItemAdded += OnProjectServiceProjectItemAdded;
    }

    public static NemerleBinPath : string
    {
      get
      {
        PropertyService.Get("Nemerle.SharpDevelop.NemerleBinPath")
      }
      private set
      {
        PropertyService.Set("Nemerle.SharpDevelop.NemerleBinPath", value)
      }
    }

    public Language : string
    {
      get { NemerleLanguageProperties.LanguageName }
    }

    public LoadProject(provider : IMSBuildEngineProvider, fileName : string, projectName : string) : IProject
    {
      NemerleProject(provider, fileName, projectName);
    }

    public CreateProject(info : ProjectCreateInformation) : IProject
    {
      NemerleProject(info);
    }

    private static OnProjectServiceProjectItemAdded(_ : object, e : ProjectItemEventArgs) : void
    {
      when(e.ProjectItem is MacroReferenceProjectItem)
      {
        // HACK: CallVisitor is private method of ProjectBrowserControl
        def call_visitor = typeof(ProjectBrowserControl).GetMethod("CallVisitor", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
        unless(null == call_visitor)
        {
          _ = call_visitor.Invoke(ProjectBrowserPad.Instance.ProjectBrowserControl, array [ UpdateMacroReferencesVisitor(e) ]);
        }
      }
    }
  }
}
