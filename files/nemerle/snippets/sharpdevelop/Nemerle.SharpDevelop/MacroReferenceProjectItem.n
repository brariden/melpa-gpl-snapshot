using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Gui;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.SharpDevelop.Project;

using MSBuild = Microsoft.Build.BuildEngine;

using Nemerle.Utility;

namespace Nemerle.SharpDevelop
{
  public class MacroReferenceProjectItem : ProjectItem
  {
    protected this(project : IProject, item_type : ItemType)
    {
      base(project, item_type);
    }

    public this(project : IProject)
    {
      base(project, ItemTypeExt.MacroReference);
    }

    public this(project : IProject, include : string)
    {
      base(project, ItemTypeExt.MacroReference, include);
    }

    internal this(project : IProject, build_item : MSBuild.BuildItem)
    {
      base(project, build_item);
    }

    [ReadOnly(true)]
    public HintPath : string
    {
      get
      {
        GetEvaluatedMetadata("HintPath")
      }
      set
      {
        SetEvaluatedMetadata("HintPath", value);
      }
    }

    // FIXME "ambiguous call to constructor"
    //[DefaultValue("global")] 
    [LocalizedProperty("${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.Aliases}",
               Description = "${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.Aliases.Description}")]
    public Aliases : string
    {
      get
      {
        GetEvaluatedMetadata("Aliases", "global")
      }
      set
      {
        SetEvaluatedMetadata("Aliases", value);
      }
    }

    // FIXME "ambiguous call to constructor"
    //[DefaultValue(false)]
    [LocalizedProperty("${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.SpecificVersion}",
               Description = "${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.SpecificVersion.Description}")]
    public virtual SpecificVersion : bool
    {
      get
      {
        this.Include.Contains(",")
      }
    }

    private mutable assemblyName : DomAssemblyName;

    /// <summary>
    /// Gets the assembly name.
    /// </summary>
    [Browsable(false)]
    public AssemblyName : DomAssemblyName
    {
      get { assemblyName ?? DomAssemblyName(Include) }
      internal set { assemblyName = value; }
    }
    
    [ReadOnly(true)]
    [LocalizedProperty("${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.Name}",
               Description="${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.Name.Description}")]
    public Name : string
    {
      get { Include }
    }
    
    [Browsable(false)]
    public virtual ShortName : string
    {
      get { this.AssemblyName.ShortName }
    }
    
    [ReadOnly(true)]
    [LocalizedProperty("${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.Version}",
               Description="${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.Version.Description}")]
    public virtual Version : Version
    {
      get
      {
        if (null == this.AssemblyName.Version)
          null
        else
          Version(this.AssemblyName.Version)
      }
    }

    [ReadOnly(true)]
    [LocalizedProperty("${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.Culture}",
               Description="${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.Culture.Description}")]
    public virtual Culture : string
    {
      get { this.AssemblyName.Culture }
    }

    [ReadOnly(true)]
    [LocalizedProperty("${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.PublicKeyToken}",
               Description="${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectReference.PublicKeyToken.Description}")]
    public virtual PublicKeyToken : string
    {
      get { this.AssemblyName.PublicKeyToken }
    }
    
    private mutable redist : string;
    
    /// <summary>
    /// The name of the package in which the assembly is redistributed to the user.
    /// "Microsoft-Windows-CLRCoreComp" = .NET 2.0
    /// "Microsoft-Windows-CLRCoreComp-v3.5" = .NET 3.5
    /// </summary>
    [Browsable(false)]
    public Redist : string
    {
      get { redist }
      set { redist = value; }
    }

    private mutable fullPath : string;

    [ReadOnly(true)]
    [Browsable(true)]
    public override FileName : string
    {
      get
      {
        when (null != fullPath) 
          Nemerle.Imperative.Return(fullPath);

        when (null != this.Project)
        {
          def projectDir = this.Project.Directory;
          def hintPath = this.HintPath;
          try
          {
            when (null != hintPath && hintPath.Length > 0)
              Nemerle.Imperative.Return(FileUtility.NormalizePath(Path.Combine(projectDir, hintPath)));

            def name = FileUtility.NormalizePath(Path.Combine(projectDir, this.Include));
            when (File.Exists(name)) 
              Nemerle.Imperative.Return(name);

            when (File.Exists(name + ".dll"))
              Nemerle.Imperative.Return(name + ".dll");

            when (File.Exists(name + ".exe"))
              Nemerle.Imperative.Return(name + ".exe");

          } catch { | _ => () } // ignore errors when path is invalid
        }
        this.Include
      }
      set
      {
        fullPath = value;
      }
    }

    protected override FilterProperties(globalizedProps : PropertyDescriptorCollection) : void
    {
      base.FilterProperties(globalizedProps);
      when (string.IsNullOrEmpty(HintPath))
        globalizedProps.Remove(globalizedProps["HintPath"]);
    }
  }
}