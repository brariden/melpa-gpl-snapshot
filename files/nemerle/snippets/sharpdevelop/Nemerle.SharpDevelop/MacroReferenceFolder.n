using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Gui;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.SharpDevelop.Project;

using MSBuild = Microsoft.Build.BuildEngine;

using Nemerle.Utility;

namespace Nemerle.SharpDevelop
{
  public class MacroReferenceFolder : CustomFolderNode
  {
    private project : IProject;

    public this(project : IProject)
    {
      this.project = project;
      sortOrder = 0;

      ContextmenuAddinTreePath = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/MacroReferenceFolderNode";
      Text = StringParser.Parse("${res:Nemerle.SharpDevelop.Project.Nodes.MacroReferences}");
      OpenedImage = "ProjectBrowser.ReferenceFolder.Open";
      ClosedImage = "ProjectBrowser.ReferenceFolder.Closed";
      
      foreach (_ is MacroReferenceProjectItem in project.Items)
      {
        CustomNode().AddTo(this);
        Nemerle.Imperative.Break();
      }
    }

    public ShowMacroReferences() : void
    {
      Nodes.Clear();

      foreach (item is MacroReferenceProjectItem in project.Items)
      {
        def node = MacroReferenceNode(item);
        node.InsertSorted(this);
      }
      UpdateIcon();
    }

    protected override Initialize() : void
    {
      ShowMacroReferences();
      base.Initialize();
    }

    public override AcceptVisitor(visitor : ProjectBrowserTreeNodeVisitor, data : object) : object
    {
      visitor.Visit(this, data);
    }
  }
}