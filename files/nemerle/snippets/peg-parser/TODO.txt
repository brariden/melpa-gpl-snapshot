1. Validate grammar and print errors

2. Optimize generated parsers
   a. Minimize list usage in parser, use SCG.List (aviable after 4.a)(Done by Vlad2)
   b. Return tokens not via class member (todo by ref) (Done by Vlad2)

3. Validate parsed text and print errors
–еализовать обработку ошибок. Ёто нужно сделать максимально эффективно! Ќадо подумать как это можно сделать. ¬озможно надо генерировать два парсера. ќдин скоростной, а второй запускаемый повторно, специально дл€ вы€влени€ ошибок. ј может быть получитс€ обойтись незначительными проверками, и соответственно, вы€вл€ть их при первом проходе.

4. Create usefull macro
   a. Call different method for each rule (Done)
   b. Support different rule return types
   c. Create macro params for autocreacting simple rules(≈ще надо автоматом формировать код дл€ транзитных обработчиков вроде parenthesesExpr и simplExpr.)
   d. ƒобавить параметры макроса дл€ очистки ненужных токенов из списка параметров обработчиков правил
   e. “окен нужно оформить двум€ структурами. ќдной дл€ терминального токена, другой токена не терминального (хран€щего значение). ѕри этом перва€ структура должна быть обычной (не дженерик), а втора€ дженерик.  роме этого мы должны допускать использовани€ в одном парсере не терминальные токены с разными параметрами типов (хран€щие значени€ разных типов).
   f. —труктуры описывающие токены нужно вынести в отдельную библиотеку (не макросную). ¬ эту же библиотеку нужно вынести все остальные типы и функции требуемые парсеру в рантайме. ћакро-библиотеку нужно подключить к проекту через макро-референс (чтобы предотвратить дальнейшее "засасывание" типов из макро-проекта в проекты прасера.
   g. Ќадо сделать возможным парсить разные строки (и подстроки) одним экземпл€ром парсера:
      * ƒолой свойства!   (DONE!)
      * —оздаем публичные методы позвол€ющие вызвать любое правило в любой позиции.


5. Create parser extention tecnology