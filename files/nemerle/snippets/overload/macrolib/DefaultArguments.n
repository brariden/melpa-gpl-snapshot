using Nemerle.Compiler;
using Nemerle.Imperative;
using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace DefaultArguments
{  
  /// <summary>
  /// Converts function with default arguments into overloaded functions.
  /// </summary>
  ///
  /// <example> One argument
  /// <code>
  /// [DefaultArguments]
  /// public F(a : int = 1) { ... }
  /// =>
  /// public F() { F(1); }
  /// public F(a : int) { ... }
  /// </code>
  /// </example>
  ///
  /// <example> More then one argument
  /// <code>
  /// [DefaultArguments]
  /// public F(a : int = 1, b : char = 'a') { ... }
  /// =>
  /// public F() { F(1, 'a'); }
  /// public F(a: int) { F(a, 'a') }
  /// public F(a: int, b : char) { ... }
  /// </code>
  /// </example>
  ///
  /// <example> Breaking the default argument sequence
  /// <code>
  /// [DefaultArguments]
  /// public F(a : int = 1, b : char, c : double = 1.1) { ... }
  /// =>
  /// public F(a : int, b : char) { F(a, b, 1.1) }
  /// public F(a : int = 1, b : char, c : double) { ... }
  /// </code>
  /// </example>
  [Nemerle.MacroUsage(Nemerle.MacroPhase.WithTypedMembers, Nemerle.MacroTargets.Method)]
  public macro DefaultArguments(tb : TypeBuilder, mb : MethodBuilder, params opts : list[PExpr])
  {
    DefaultArgumentsImpl.DefaultArguments(tb, mb, opts);
  }
        
  internal module DefaultArgumentsImpl
  {
    public DefaultArguments(tb : TypeBuilder,
                            mb : MethodBuilder,
                            _ : list[Parsetree.PExpr]) : void
    {
      def newName(name) { tb.ParsedName.NewName(name) }
      def defaultValueToPExpr(l)
      {
        PT.PExpr.Literal((l.DefaultValueAsTExpr() :> TT.TExpr.Literal).val)
      }
      
      // Overloaded methods
      def parms = mb.GetParameters();
      
      mutable cur = parms.Length - 1;
      foreach(arg in parms.Reverse())
      {
        // Overload if we have default value
        if(arg.HasDefaultValue)
        {        
          def fparms = parms.FirstN(cur)
                            .Map(p => <[ parameter: $(newName(p.name) : name) : $(p.ty : typed) ]>);
          
          // Arguments and the default value
          def call = fparms.Map(_.ReferencingExpr) + [defaultValueToPExpr(arg)];
          
          tb.Define
          (<[ decl:
              public $(newName(mb.Name) : name)(..$fparms) : $(mb.ReturnType : typed)
              {
                  this.$(mb.Name : dyn)(..$call)
              }
          ]>); 
        }
        else
          break;  
        
        // Check for last element
        if(cur == 0)
          break;
        else
          --cur;
      }
      
      // Check if the sequence was broken, so we need to leave the last argument
      def brokenSeq = parms.FirstN(cur).Find(x => x.default_value.IsSome).IsSome;
      // Remove the default arguments to avoid ambiguity      
      parms.LastN(parms.Length - cur - if(brokenSeq && parms.Length > cur) 1 else 0)
           .Iter(x => x.default_value = None());
            
      // Was the default arguments sequence broken
      when(brokenSeq)
        Message.Hint("Default arguments sequence was broken. " +
                     "The overload is only by last arguments with default values");
      
    }
  }
}