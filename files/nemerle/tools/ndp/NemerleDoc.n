/* Wroc≈Çaw, 2006
 * This file is a part of Nemerle Documentation Project.
 *
 * See COPYRIGHT file
 */
using NemerleDoc;
using System;

/// <remarks>
/// Some useful links:
/// <list>
/// <item><a href="http://msdn.microsoft.com/en-us/library/b2s063f7.aspx">Documentation on msdn page</a></item>
/// <item><a href="http://www.codeproject.com/KB/XML/csharpcodedocumentation.aspx">Tutorial</a></item>
/// </list>
/// </remarks>
/// <summary>
/// <para>Private classes are classes with no System.Reflection.TypeAttributesPublic 
/// attribute.</para>
/// </summary>
/// <example>An example of usage. First compile your program with
/// <code>
/// $ ncc myfile.n -doc:doc.xml -out:my.exe
/// </code>
/// Then
/// <code>
/// $ mono nemerledoc.exe doc.xml my.exe
/// </code>
/// and open index.html.
/// </example>
module Nemerledoc {

  // <summary>
  // This class is a kind of "progress iterator'. Generally it is aimed to 
  // shows which file of all is processed.
  //</summary>
  class PerFileResponse : NemerleDoc.IOResponse {
  
     mutable limit = 0;
     mutable format = "";
     
     /// <summary>Returns number of digits of given positive number</summary>
     private n_of_digits(i : int) : int {
       if (i < 10) 1
       else if (i < 100) 2
       else if (i < 1000) 3
       else if (i < 10000) 4
       else if (i < 100000) 5
       else if (i < 1000000) 6
       else 7
     }
          
     /// <param name="limit">Total files to process</param>
     public init(limit : int) : void { 
       this.limit = limit;
       def no_digits = this.n_of_digits(this.limit);
       this.format = "[{0," + no_digits.ToString() + "}/" + this.limit.ToString() + "] {1}";
       // String.Format("[{0,{2}}/{1}] {2}",no_digits, this.limit);     
     }

     /// <param name="no">Number of current file</param>
     /// <param name="msg">A message to print</param>
     public next (no : int, msg : string) : void
     {
       Console.Write(this.format, no, msg)
     }
     
     
     public end (msg : string) : void { Console.WriteLine(msg); this.limit = 0 }
  }
  
  // <summary>
  // Shows percentage of processing file. Visualisation depends
  // on module's varialbe perc.
  // </summary>
  public class FileProcessResponse : NemerleDoc.IOResponse
  {
     mutable limit = 1;
     mutable col = 0;
     
     public this () { }
  
     public init(n : int) : void
     { 
       when (perc)
       {
         this.limit = n; 
         Console.Write(" ");
         this.col = Console.CursorLeft;
         Console.Write("{0:###%}", 0) 
       }
     }

     public next (n : int, _ : string) : void
     {
       when (perc)
       {
         Console.CursorLeft = this.col;
         Console.Write("{0,3}%", n*100/limit)
       }
     }
     
     public end (msg : string) : void
     { 
         Console.Write(msg);
         this.limit = 0;
         this.col = 1 
     }
  } // class

  
  /// <summary>Shows usage</summary>
  private Help () : void {
    Console.WriteLine("USAGE:");
    Console.WriteLine("  nemerledoc.exe <options> <files>");
    Console.WriteLine("     <options>:");
    Console.WriteLine("             -np show non public elements");
    Console.WriteLine("             -title:\"title\" title for index page");
    Console.WriteLine("             -dest:\"directory\" directory where result files will be written");
    Console.WriteLine("             -s simplifies some monster type expressions, functions, tuples etc.");
    Console.WriteLine("             -p shows more info about progress (percentage etc.)");
    Console.WriteLine("             -d debug info (only for developer, i.e. me ;)");
    Console.WriteLine("     <files>: a list of *.dll, *.exe, and *.xml files");
  }
  
  /// <summary>Write a css file</summary>
  private Css_file() : void
  {
    def css_file = "nemerle-doc.css";
    when (!IO.File.Exists(destDir + css_file)) {
      def assembly = System.Reflection.Assembly.GetExecutingAssembly();
      Console.WriteLine("Create css file: " + css_file);
      def in_stream = IO.BinaryReader(assembly.GetManifestResourceStream(css_file));
      def fstream = IO.FileStream(destDir + css_file, IO.FileMode.CreateNew);
      def out_stream = IO.BinaryWriter(fstream);

      mutable buf = in_stream.ReadBytes(1024);
      while (buf.Length > 0) {
          out_stream.Write(buf);
          buf = in_stream.ReadBytes(1024);
      }
      in_stream.Close();
      out_stream.Close();
    }  
  }
  
  /// <summary>Creates (if not exists) destination directory</summary>
  private dest_dir() :void
  {
    // prepare destination directory
    when (destDir.Length > 0)
    {
        Console.WriteLine("Writing result to directory: {0}", destDir);
        when (!System.IO.Directory.Exists(destDir))
        {
          _ = System.IO.Directory.CreateDirectory(destDir);
        }
        def sep = System.IO.Path.DirectorySeparatorChar.ToString();
        when (!destDir.EndsWith(sep))
            destDir = destDir + sep;
    }  
  }
  
  /// <summary>
  /// Flag whether to simplify monsters like Function'x[Tuple'20[.....]]
  /// </summary>
  public mutable simplify : bool = false;
  
  /// <summary>Flag whether show debug info, for developer only</summary>
  public mutable debug : bool = false;

  /// <summary>Title of web page(s)</summary>
  public mutable title : string = "";
  
  // show progress in prcentage or not
  public mutable perc : bool = false;
  
  /// <summary>Destination directory</summary>
  public mutable destDir : string = "";
  
  /// <summary>Computes string with file name presented on console</summary>
  private format(fname : string) : string
  {
    mutable width = Console.WindowWidth - 30;
    mutable fn = fname;
    when (fn.Length > width)
    {
      fn = fn.Substring(fname.Length - width);
      fn = "..." + fn.Substring(3);
    }
    fn = ("'" + fn + "'").PadRight(width+3);
    String.Format("Analysing {0}", fn);
  }

  /// <summary>
  /// Usage:
  /// <code>nemerledoc.exe &amp;lt;options&amp;gt; &amp;lt;files&amp;gt;</code>
  /// Writing <c>nemerledoc.exe</c> shows this info. 
  /// </summary>
  public Main(args : array [ string ]) : void
  {
    def tree = DataTree();
    if (args.Length == 0) Help();
    else {
        mutable publicOnly = true;
        mutable fileList = [];
        foreach (arg in args)
        {
          if (arg.Equals("-np")) publicOnly = false
          else if (arg.Equals("-s")) simplify = true
          else if (arg.Equals("-d")) debug = true
          else if (arg.StartsWith("-dest")) destDir = arg.Substring(6)
          else if (arg.StartsWith("-title")) title = arg.Substring(7)
          else if (arg.StartsWith("-p")) perc = true
          else 
              fileList = fileList + [ arg ];
        }
        // create destination directory
        dest_dir();
        // deal with default css file
        Css_file();
        
        // process files
        def fileIter = PerFileResponse();
        fileIter.init(fileList.Length);
        mutable processIter = FileProcessResponse();
        mutable no_of_file = 0;
        foreach (file in fileList)
        {
            no_of_file++;
            fileIter.next(no_of_file, format(file));
            
            if (!IO.File.Exists(file)) Console.Write("file {0} does not exist ... Skipped\n", file)
            else {
                if (file.EndsWith(".dll") || file.EndsWith(".exe"))
                {
                  try {
                      AssemblyAnalyzer.analyze(file, tree, processIter);
                      tree.PrintWarnings();
                      tree.AddSource(file);
                  } catch {
                    e is Exception => Console.WriteLine("Broken analysis of {0} with message {1}", file, e);
                  }
                } else
                if (file.EndsWith(".xml"))
                {
                  try {
                      _ = XmlDocParser(tree, file, processIter);
                      tree.PrintWarnings();
                      tree.AddSource(file);
                  } catch {
                    e is Exception => Console.WriteLine("broken analysis of {0} with message {1}", file, e);
                  }
                } else 
                    Console.Write("file type is not recognized ... Skipped\n");
            }
        }
        tree.ToHtml(publicOnly);
    }
  }
}
