/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using ActiproSoftware.SyntaxEditor;

namespace Nemerle.SnippetCompiler.AddIns
{
  public class NemerleDynamicSyntaxLanguage : Addons.Dynamic.DynamicOutliningSyntaxLanguage
  {
      #region Methods

      public this()
      {
      }

      public this(key : string, secure : bool)
      {
          base(key, secure);
      }

      public override GetTokenOutliningAction(tokenStream : TokenStream,
        outliningKey : ref string, tokenAction : ref OutliningNodeAction) : void
      {
        match (tokenStream.Peek().Key)
        {

        | "MultiLineCommentStartToken" =>
          outliningKey = "MultiLineComment";
          tokenAction  = OutliningNodeAction.Start;

        | "MultiLineCommentEndToken" => 
          outliningKey = "MultiLineComment";
          tokenAction  = OutliningNodeAction.End;

        | "OpenCurlyBraceToken" =>
          outliningKey = "CodeBlock";
          tokenAction  = OutliningNodeAction.Start;

        | "CloseCurlyBraceToken" =>
          outliningKey = "CodeBlock";
          tokenAction  = OutliningNodeAction.End;

        | _ => {}
        }
      }

      public override ResetLineCommentDelimiter() : void
      {
          base.LineCommentDelimiter = "//";
      }

      public override ShouldSerializeLineCommentDelimiter() : bool
      {
          base.LineCommentDelimiter != "//";
      }

      public override SetOutliningNodeCollapsedText(node : OutliningNode) : void
      {
          def tokens : TokenCollection = node.Document.Tokens;
          def index  : int = tokens.IndexOf(node.StartOffset);

          when (tokens[index].Key == "MultiLineCommentStartToken")
            node.CollapsedText = "/**/";
      }

      #endregion Methods
  }
}


