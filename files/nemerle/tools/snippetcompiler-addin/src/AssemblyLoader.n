/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System.IO;
using System.Reflection;

namespace Nemerle.SnippetCompiler.AddIns
{
  internal module AssemblyLoader
  {
     public Load(assemblyName : string) : Assembly
     {
      def assemblyFileName = assemblyName + ".dll";

       def safeLoad(path)
       {
        if (File.Exists(path))
          Assembly.LoadFrom(path);
        else
          null;
       }

       def loadRelative(path)
       {
        def assemblyFolder = Path.GetDirectoryName(path);
        def fullPath       = Path.Combine(assemblyFolder, assemblyFileName);

        safeLoad(fullPath);
       }

       def loadFromRegistry()
       {
       // Query the shell association.
       //
       def regKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(
         @"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\ncc.exe");

       // The compiler is registered with the Shell API.
       //
       if (regKey != null)
       {
         def nccPath = regKey.GetValue(null) :> string;
         loadRelative(nccPath);
       }
       else
         null;
       }

       def loadFromPath(path)
       {
         def fullPath = System.Environment.ExpandEnvironmentVariables(path);

        safeLoad(fullPath);
       }

      loadRelative(Assembly.GetExecutingAssembly().Location) ??
         loadRelative(Assembly.GetEntryAssembly().Location) ??
         loadFromRegistry() ??
         loadFromPath("%Nemerle%/" + assemblyFileName) ??
         loadFromPath("%ProgramFiles%/Nemerle/" + assemblyFileName) ??
         Assembly.Load(assemblyName);
     }
  }
}
