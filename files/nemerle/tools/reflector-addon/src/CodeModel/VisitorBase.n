/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;

using Reflector.CodeModel;

namespace Reflector.NemerleLanguage.CodeModel
{
  public class VisitorBase
  {
    public virtual VisitAddressDereferenceExpression(value : IAddressDereferenceExpression) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitAddressOfExpression(value : IAddressOfExpression) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitAddressOutExpression(value : IAddressOutExpression) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitAddressReferenceExpression(value : IAddressReferenceExpression) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitArgumentListExpression(_ : IArgumentListExpression) : void
    {
    }

    public virtual VisitArgumentReferenceExpression(_ : IArgumentReferenceExpression) : void
    {
    }

    public virtual VisitArrayCreateExpression(value : IArrayCreateExpression) : void
    {
      VisitType(value.Type);
      VisitExpression(value.Initializer);
      VisitExpressionCollection(value.Dimensions);
    }

    public virtual VisitArrayDimension(_ : IArrayDimension) : void
    {
    }

    public virtual VisitArrayDimensionCollection(value : IArrayDimensionCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitArrayDimension(value[i]);
    }

    public virtual VisitArrayIndexerExpression(value : IArrayIndexerExpression) : void
    {
        VisitExpressionCollection(value.Indices);
        VisitExpression(value.Target);
    }

    public virtual VisitArrayType(value : IArrayType) : void
    {
        VisitType(value.ElementType);
        VisitArrayDimensionCollection(value.Dimensions);
    }

    public virtual VisitAssembly(value : IAssembly) : void
    {
        VisitCustomAttributeCollection(value.Attributes);
        VisitModuleCollection(value.Modules);
    }

    public virtual VisitAssemblyReference(_ : IAssemblyReference) : void
    {
    }

    public virtual VisitAssignExpression(value : IAssignExpression) : void
    {
      VisitExpression(value.Target);
      VisitExpression(value.Expression);
    }

    public virtual VisitAttachEventStatement(value : IAttachEventStatement) : void
    {
      VisitExpression(value.Event);
      VisitExpression(value.Listener);
    }

    public virtual VisitBaseReferenceExpression(_ : IBaseReferenceExpression) : void
    {
    }

    public virtual VisitBinaryExpression(value : IBinaryExpression) : void
    {
      VisitExpression(value.Left);
      VisitExpression(value.Right);
    }

    public virtual VisitBlockStatement(value : IBlockStatement) : void
    {
      VisitStatementCollection(value.Statements);
    }

    public virtual VisitBreakStatement(_ : IBreakStatement) : void
    {
    }

    public virtual VisitCanCastExpression(value : ICanCastExpression) : void
    {
      VisitType(value.TargetType);
      VisitExpression(value.Expression);
    }

    public virtual VisitCastExpression(value : ICastExpression) : void
    {
      VisitType(value.TargetType);
      VisitExpression(value.Expression);
    }

    public virtual VisitCatchClause(value : ICatchClause) : void
    {
      VisitVariableDeclaration(value.Variable);
      VisitExpression(value.Condition);
      VisitStatement(value.Body);
    }

    public virtual VisitCatchClauseCollection(value : ICatchClauseCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitCatchClause(value[i]);
    }

    public virtual VisitCommentStatement(_ : ICommentStatement) : void
    {
    }

    public virtual VisitConditionCase(value : IConditionCase) : void
    {
      VisitExpression(value.Condition);
      VisitStatement(value.Body);
    }

    public virtual VisitConditionExpression(value : IConditionExpression) : void
    {
      VisitExpression(value.Condition);
      VisitExpression(value.Then);
      VisitExpression(value.Else);
    }

    public virtual VisitConditionStatement(value : IConditionStatement) : void
    {
      VisitExpression(value.Condition);
      VisitStatement(value.Then);
      VisitStatement(value.Else);
    }

    public virtual VisitContinueStatement(_ : IContinueStatement) : void
    {
    }

    public virtual VisitCustomAttribute(customAttribute : ICustomAttribute) : void
    {
      VisitExpressionCollection(customAttribute.Arguments);
    }

    public virtual VisitCustomAttributeCollection(value : ICustomAttributeCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitCustomAttribute(value[i]);
    }

    public virtual VisitDebugBreakStatement(_ : IDebugBreakStatement) : void
    {
    }

    public virtual VisitDefaultCase(value : IDefaultCase) : void
    {
      VisitStatement(value.Body);
    }

    public virtual VisitDelegateCreateExpression(value : IDelegateCreateExpression) : void
    {
      VisitType(value.DelegateType);
      VisitExpression(value.Target);
    }

    public virtual VisitDelegateInvokeExpression(value : IDelegateInvokeExpression) : void
    {
      VisitExpressionCollection(value.Arguments);
      VisitExpression(value.Target);
    }

    public virtual VisitDoStatement(value : IDoStatement) : void
    {
      VisitExpression(value.Condition);
      VisitStatement(value.Body);
    }

    public virtual VisitEmbeddedResource(_ : IEmbeddedResource) : void
    {
    }

    public virtual VisitEventDeclaration(value : IEventDeclaration) : void
    {
      VisitCustomAttributeCollection(value.Attributes);
      VisitType(value.EventType);
    }

    public virtual VisitEventDeclarationCollection(value : IEventDeclarationCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitMemberDeclaration(value[i]);
    }

    public virtual VisitEventReference(value : IEventReference) : void
    {
      VisitType(value.EventType);
    }

    public virtual VisitEventReferenceExpression(value : IEventReferenceExpression) : void
    {
      VisitMemberReference(value.Event);
      VisitExpression(value.Target);
    }

    public virtual VisitExpression(value : IExpression) : void
    {
    | e is IVariableReferenceExpression     => VisitVariableReferenceExpression    (e)
    | e is ILiteralExpression               => VisitLiteralExpression              (e)
    | e is IFieldReferenceExpression        => VisitFieldReferenceExpression       (e)
    | e is IPropertyReferenceExpression     => VisitPropertyReferenceExpression    (e)
    | e is IAssignExpression                => VisitAssignExpression               (e)
    | e is IBinaryExpression                => VisitBinaryExpression               (e)
    | e is IThisReferenceExpression         => VisitThisReferenceExpression        (e)
    | e is IMethodInvokeExpression          => VisitMethodInvokeExpression         (e)
    | e is IMethodReferenceExpression       => VisitMethodReferenceExpression      (e)
    | e is IArgumentReferenceExpression     => VisitArgumentReferenceExpression    (e)
    | e is IVariableDeclarationExpression   => VisitVariableDeclarationExpression  (e)
    | e is ITypeReferenceExpression         => VisitTypeReferenceExpression        (e)
    | e is IBaseReferenceExpression         => VisitBaseReferenceExpression        (e)
    | e is IUnaryExpression                 => VisitUnaryExpression                (e)
    | e is ITryCastExpression               => VisitTryCastExpression              (e)
    | e is ICanCastExpression               => VisitCanCastExpression              (e)
    | e is ICastExpression                  => VisitCastExpression                 (e)
    | e is ITypeOfExpression                => VisitTypeOfExpression               (e)
    | e is IEventReferenceExpression        => VisitEventReferenceExpression       (e)
    | e is IArgumentListExpression          => VisitArgumentListExpression         (e)
    | e is IArrayCreateExpression           => VisitArrayCreateExpression          (e)
    | e is IConditionExpression             => VisitConditionExpression            (e)
    | e is INullCoalescingExpression        => VisitNullCoalescingExpression       (e)
    | e is IDelegateCreateExpression        => VisitDelegateCreateExpression       (e)
    | e is IPropertyIndexerExpression       => VisitPropertyIndexerExpression      (e)
    | e is IArrayIndexerExpression          => VisitArrayIndexerExpression         (e)
    | e is IDelegateInvokeExpression        => VisitDelegateInvokeExpression       (e)
    | e is IObjectCreateExpression          => VisitObjectCreateExpression         (e)
    | e is IAddressOfExpression             => VisitAddressOfExpression            (e)
    | e is IAddressReferenceExpression      => VisitAddressReferenceExpression     (e)
    | e is IAddressOutExpression            => VisitAddressOutExpression           (e)
    | e is IAddressDereferenceExpression    => VisitAddressDereferenceExpression   (e)
    | e is ISizeOfExpression                => VisitSizeOfExpression               (e)
    | e is ITypedReferenceCreateExpression  => VisitTypedReferenceCreateExpression (e)
    | e is ITypeOfTypedReferenceExpression  => VisitTypeOfTypedReferenceExpression (e)
    | e is IValueOfTypedReferenceExpression => VisitValueOfTypedReferenceExpression(e)
    | e is IStackAllocateExpression         => VisitStackAllocateExpression        (e)
    | e is IGenericDefaultExpression        => VisitGenericDefaultExpression       (e)
    | e is ISnippetExpression               => VisitSnippetExpression              (e)
    | e is IAnonymousMethodExpression       => VisitAnonymousMethodExpression      (e);
    | e is IBlockExpression                 => VisitBlockExpression                (e);
    | e is IFieldOfExpression               => VisitFieldOfExpression              (e);
    | e is ILambdaExpression                => VisitLambdaExpression               (e);
    | e is IMemberInitializerExpression     => VisitMemberInitializerExpression    (e);
    | e is IMethodOfExpression              => VisitMethodOfExpression             (e);
    | e is IQueryExpression                 => VisitQueryExpression                (e);
    | null                                  => {}
    | _                                     => throw NotSupportedException($"Invalid expression type '$(value.GetType().Name)'.");
    }

    public virtual VisitExpressionCollection(value : IExpressionCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitExpression(value[i]);
    }

    public virtual VisitExpressionStatement(value : IExpressionStatement) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitFieldDeclaration(value : IFieldDeclaration) : void
    {
      VisitCustomAttributeCollection(value.Attributes);
      VisitType(value.FieldType);
    }

    public virtual VisitFieldDeclarationCollection(value : IFieldDeclarationCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitMemberDeclaration(value[i]);
    }

    public virtual VisitFieldReference(value : IFieldReference) : void
    {
      VisitType(value.FieldType);
    }

    public virtual VisitFieldReferenceExpression(value : IFieldReferenceExpression) : void
    {
      VisitMemberReference(value.Field);
      VisitExpression(value.Target);
    }

    public virtual VisitFileResource(_ : IFileResource) : void
    {
    }

    public virtual VisitFixedStatement(value : IFixedStatement) : void
    {
      VisitVariableDeclaration(value.Variable);
      VisitExpression(value.Expression);
      VisitStatement(value.Body);
    }

    public virtual VisitForEachStatement(value : IForEachStatement) : void
    {
      VisitVariableDeclaration(value.Variable);
      VisitExpression(value.Expression);
      VisitStatement(value.Body);
    }

    public virtual VisitForStatement(value : IForStatement) : void
    {
      VisitStatement(value.Initializer);
      VisitExpression(value.Condition);
      VisitStatement(value.Increment);
      VisitStatement(value.Body);
    }

    public virtual VisitFunctionPointer(_ : IFunctionPointer) : void
    {
    }

    public virtual VisitGenericArgument(_ : IGenericArgument) : void
    {
    }

    public virtual VisitGenericDefaultExpression(_ : IGenericDefaultExpression) : void
    {
    }

    public virtual VisitGenericParameter(_ : IGenericParameter) : void
    {
    }

    public virtual VisitGotoStatement(_ : IGotoStatement) : void
    {
    }

    public virtual VisitLabeledStatement(value : ILabeledStatement) : void
    {
      VisitStatement(value.Statement);
    }

    public virtual VisitLiteralExpression(_ : ILiteralExpression) : void
    {
    }

    public virtual VisitLockStatement(value : ILockStatement) : void
    {
      VisitExpression(value.Expression);
      VisitStatement(value.Body);
    }

    public virtual VisitMemoryCopyStatement(value : IMemoryCopyStatement) : void
    {
      VisitExpression(value.Source);
      VisitExpression(value.Destination);
      VisitExpression(value.Length);
    }

    public virtual VisitMemoryInitializeStatement(value : IMemoryInitializeStatement) : void
    {
      VisitExpression(value.Offset);
      VisitExpression(value.Value);
      VisitExpression(value.Length);
    }

    public virtual VisitMethodDeclaration(value : IMethodDeclaration) : void
    {
      VisitCustomAttributeCollection(value.Attributes);
      VisitParameterDeclarationCollection(value.Parameters);
      VisitMethodReferenceCollection(value.Overrides);
      VisitMethodReturnType(value.ReturnType);
      when (value.Body is IStatement)
        VisitStatement(value.Body :> IStatement);
    }

    public virtual VisitMethodDeclarationCollection(value : IMethodDeclarationCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitMemberDeclaration(value[i]);
    }

    public virtual VisitMethodInvokeExpression(value : IMethodInvokeExpression) : void
    {
      VisitExpressionCollection(value.Arguments);
      VisitExpression(value.Method);
    }

    public virtual VisitMethodReference(value : IMethodReference) : void
    {
      VisitMethodReturnType(value.ReturnType);
    }

    public virtual VisitMethodReferenceCollection(value : IMethodReferenceCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitMemberReference(value[i]);
    }

    public virtual VisitMethodReferenceExpression(value : IMethodReferenceExpression) : void
    {
      VisitExpression(value.Target);
    }

    public virtual VisitMethodReturnStatement(value : IMethodReturnStatement) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitMethodReturnType(value : IMethodReturnType) : void
    {
      VisitCustomAttributeCollection(value.Attributes);
      VisitType(value.Type);
    }

    public virtual VisitModule(value : IModule) : void
    {
      VisitCustomAttributeCollection(value.Attributes);
    }

    public virtual VisitModuleCollection(value : IModuleCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitModule(value[i]);
    }

    public virtual VisitModuleReference(_ : IModuleReference) : void
    {
    }

    public virtual VisitNamespace(value : INamespace) : void
    {
      VisitTypeDeclarationCollection(value.Types);
    }

    public virtual VisitNullCoalescingExpression(value : INullCoalescingExpression) : void
    {
      VisitExpression(value.Condition);
      VisitExpression(value.Expression);
    }

    public virtual VisitObjectCreateExpression(value : IObjectCreateExpression) : void
    {
      VisitExpressionCollection(value.Arguments);
      VisitMemberReference(value.Constructor);
      VisitExpression(value.Initializer);
      VisitType(value.Type);
    }

    public virtual VisitAnonymousMethodExpression(value : IAnonymousMethodExpression) : void
    {
      VisitStatement(value.Body);
      VisitType(value.DelegateType);
      VisitParameterDeclarationCollection(value.Parameters);
      VisitMethodReturnType(value.ReturnType);
    }

    public virtual VisitBlockExpression(value : IBlockExpression) : void
    {
      VisitExpressionCollection(value.Expressions);
    }

    public virtual VisitFieldOfExpression(value : IFieldOfExpression) : void
    {
      VisitMemberReference(value.Field);
    }

    public virtual VisitLambdaExpression(value : ILambdaExpression) : void
    {
      VisitExpression(value.Body);
      VisitVariableDeclarationCollection(value.Parameters);
    }

    public virtual VisitMemberInitializerExpression(value : IMemberInitializerExpression) : void
    {
      VisitMemberReference(value.Member);
      VisitExpression(value.Value);
    }

    public virtual VisitMethodOfExpression(value : IMethodOfExpression) : void
    {
      VisitMemberReference(value.Method);
      VisitTypeReference(value.Type);
    }

    public virtual VisitQueryExpression(value : IQueryExpression) : void
    {
      VisitQueryBody(value.Body);
      VisitQueryClause(value.From);
    }

    public virtual VisitQueryBody(value : IQueryBody) : void
    {
      VisitQueryClauseCollection(value.Clauses);
      VisitQueryContinuation(value.Continuation);
      VisitQueryOperation(value.Operation);
    }

    public virtual VisitQueryOperation(value : IQueryOperation) : void
    {
    | o is IGroupOperation  => VisitGroupOperation (o);
    | o is ISelectOperation => VisitSelectOperation(o);
    | null                  => {}
    | _                     => throw NotSupportedException($"Invalid query operation '$(value.GetType().Name)'.");
    }

    public virtual VisitGroupOperation(value : IGroupOperation) : void
    {
      VisitExpression(value.Item);
      VisitExpression(value.Key);
    }

    public virtual VisitSelectOperation(value : ISelectOperation) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitQueryContinuation(value : IQueryContinuation) : void
    {
      VisitQueryBody(value.Body);
      VisitVariableDeclaration(value.Variable);
    }

    public virtual VisitQueryClause(value : IQueryClause) : void
    {
    | c is IFromClause  => VisitFromClause (c);
    | c is IJoinClause  => VisitJoinClause (c);
    | c is ILetClause   => VisitLetClause  (c);
    | c is IOrderClause => VisitOrderClause(c);
    | c is IWhereClause => VisitWhereClause(c);
    | null              => {}
    | _                 => throw NotSupportedException($"Invalid query clause '$(value.GetType().Name)'.");
    }

    public virtual VisitFromClause(value : IFromClause) : void
    {
      VisitExpression(value.Expression);
      VisitVariableDeclaration(value.Variable);
    }

    public virtual VisitJoinClause(value : IJoinClause) : void
    {
      VisitExpression(value.Equality);
      VisitExpression(value.In);
      VisitVariableDeclaration(value.Into);
      VisitExpression(value.On);
      VisitVariableDeclaration(value.Variable);
    }

    public virtual VisitLetClause(value : ILetClause) : void
    {
      VisitExpression(value.Expression);
      VisitVariableDeclaration(value.Variable);
    }

    public virtual VisitOrderClause(value : IOrderClause) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitWhereClause(value : IWhereClause) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitQueryClauseCollection(value : IQueryClauseCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitQueryClause(value[i]);
    }

    public virtual VisitMemberReference(value : IMemberReference) : void
    {
      match (value)
      {
      | m is IEventReference    => VisitEventReference   (m);
      | m is IFieldReference    => VisitFieldReference   (m);
      | m is IMemberDeclaration => VisitMemberDeclaration(m);
      | m is IMethodReference   => VisitMethodReference  (m);
      | m is IPropertyReference => VisitPropertyReference(m);
      | null                    => {}
      | _                       => throw NotSupportedException($"Invalid member reference '$(value.GetType().Name)'.");
      }

      unless (value == null)
        VisitType(value.DeclaringType);
    }

    public virtual VisitMemberDeclaration(value : IMemberDeclaration) : void
    {
      match (value)
      {
      | m is IEventDeclaration    => VisitEventDeclaration   (m);
      | m is IFieldDeclaration    => VisitFieldDeclaration   (m);
      | m is IMethodDeclaration   => VisitMethodDeclaration  (m);
      | m is IPropertyDeclaration => VisitPropertyDeclaration(m);
      | null                      => {}
      | _                         => throw NotSupportedException($"Invalid member declaration '$(value.GetType().Name)'.");
      }
    }

    public virtual VisitOptionalModifier(ty : IOptionalModifier) : void
    {
      VisitType(ty.Modifier);
      VisitType(ty.ElementType);
    }

    public virtual VisitParameterDeclaration(value : IParameterDeclaration) : void
    {
      VisitCustomAttributeCollection(value.Attributes);
      VisitType(value.ParameterType);
    }

    public virtual VisitParameterDeclarationCollection(value : IParameterDeclarationCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitParameterDeclaration(value[i]);
    }

    public virtual VisitPointerType(value : IPointerType) : void
    {
      VisitType(value.ElementType);
    }

    public virtual VisitPropertyDeclaration(value : IPropertyDeclaration) : void
    {
      VisitCustomAttributeCollection(value.Attributes);
      VisitType(value.PropertyType);
    }

    public virtual VisitPropertyDeclarationCollection(value : IPropertyDeclarationCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitMemberDeclaration(value[i]);
    }

    public virtual VisitPropertyIndexerExpression(value : IPropertyIndexerExpression) : void
    {
      VisitExpressionCollection(value.Indices);
      VisitExpression(value.Target);
    }

    public virtual VisitPropertyReference(value : IPropertyReference) : void
    {
      VisitType(value.PropertyType);
    }

    public virtual VisitPropertyReferenceExpression(value : IPropertyReferenceExpression) : void
    {
      VisitMemberReference(value.Property);
      VisitExpression(value.Target);
    }

    public virtual VisitReferenceType(value : IReferenceType) : void
    {
      VisitType(value.ElementType);
    }

    public virtual VisitRemoveEventStatement(value : IRemoveEventStatement) : void
    {
      VisitExpression(value.Event);
      VisitExpression(value.Listener);
    }

    public virtual VisitRequiredModifier(type_ : IRequiredModifier) : void
    {
      VisitType(type_.Modifier);
      VisitType(type_.ElementType);
    }

    public virtual VisitResource(value : IResource) : void
    {
    | r is IEmbeddedResource => VisitEmbeddedResource(r);
    | r is IFileResource     => VisitFileResource    (r);
    | _                      => throw NotSupportedException($"Invalid resource type '$(value.GetType().Name)'.");
    }

    public virtual VisitResourceCollection(value : IResourceCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitResource(value[i]);
    }

    public virtual VisitSizeOfExpression(value : ISizeOfExpression) : void
    {
      VisitType(value.Type);
    }

    public virtual VisitSnippetExpression(_ : ISnippetExpression) : void
    {
    }

    public virtual VisitStackAllocateExpression(value : IStackAllocateExpression) : void
    {
      VisitType(value.Type);
      VisitExpression(value.Expression);
    }

    public virtual VisitStatement(value : IStatement) : void
    {
    | e is IExpressionStatement       => VisitExpressionStatement      (e)
    | e is IBlockStatement            => VisitBlockStatement           (e)
    | e is IConditionStatement        => VisitConditionStatement       (e)
    | e is IMethodReturnStatement     => VisitMethodReturnStatement    (e)
    | e is ILabeledStatement          => VisitLabeledStatement         (e)
    | e is IGotoStatement             => VisitGotoStatement            (e)
    | e is IForStatement              => VisitForStatement             (e)
    | e is IForEachStatement          => VisitForEachStatement         (e)
    | e is IWhileStatement            => VisitWhileStatement           (e)
    | e is IDoStatement               => VisitDoStatement              (e)
    | e is ITryCatchFinallyStatement  => VisitTryCatchFinallyStatement (e)
    | e is IThrowExceptionStatement   => VisitThrowExceptionStatement  (e)
    | e is IAttachEventStatement      => VisitAttachEventStatement     (e)
    | e is IRemoveEventStatement      => VisitRemoveEventStatement     (e)
    | e is ISwitchStatement           => VisitSwitchStatement          (e)
    | e is IBreakStatement            => VisitBreakStatement           (e)
    | e is IContinueStatement         => VisitContinueStatement        (e)
    | e is ICommentStatement          => VisitCommentStatement         (e)
    | e is IUsingStatement            => VisitUsingStatement           (e)
    | e is IFixedStatement            => VisitFixedStatement           (e)
    | e is ILockStatement             => VisitLockStatement            (e)
    | e is IMemoryCopyStatement       => VisitMemoryCopyStatement      (e)
    | e is IMemoryInitializeStatement => VisitMemoryInitializeStatement(e)
    | s is IDebugBreakStatement       => VisitDebugBreakStatement      (s);
    | null                            => {}
    | _                               => throw NotSupportedException($"Invalid statement type '$(value.GetType().Name)'.")
    }

    public virtual VisitStatementCollection(value : IStatementCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitStatement(value[i]);
    }

    public virtual VisitSwitchCase(value : ISwitchCase) : void
    {
    | c is IConditionCase => VisitConditionCase(c);
    | c is IDefaultCase   => VisitDefaultCase  (c);
    | _                   => throw NotSupportedException($"Invalid switch case type '$(value.GetType().Name)'.");
    }

    public virtual VisitSwitchCaseCollection(value : ISwitchCaseCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitSwitchCase(value[i]);
    }

    public virtual VisitSwitchStatement(value : ISwitchStatement) : void
    {
      VisitExpression(value.Expression);
      VisitSwitchCaseCollection(value.Cases);
    }

    public virtual VisitThisReferenceExpression(_ : IThisReferenceExpression) : void
    {
    }

    public virtual VisitThrowExceptionStatement(value : IThrowExceptionStatement) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitTryCastExpression(value : ITryCastExpression) : void
    {
      VisitType(value.TargetType);
      VisitExpression(value.Expression);
    }

    public virtual VisitTryCatchFinallyStatement(value : ITryCatchFinallyStatement) : void
    {
      VisitStatement(value.Try);
      VisitCatchClauseCollection(value.CatchClauses);
      VisitStatement(value.Finally);
      VisitStatement(value.Fault);
    }

    public virtual VisitType(value : IType) : void
    {
    | t is ITypeReference    => VisitTypeReference    (t)
    | t is IArrayType        => VisitArrayType        (t)
    | t is IPointerType      => VisitPointerType      (t)
    | t is IReferenceType    => VisitReferenceType    (t)
    | t is IOptionalModifier => VisitOptionalModifier (t)
    | t is IRequiredModifier => VisitRequiredModifier (t)
    | t is IFunctionPointer  => VisitFunctionPointer  (t)
    | t is IGenericParameter => VisitGenericParameter (t)
    | t is IGenericArgument  => VisitGenericArgument  (t)
    | _                      => throw NotSupportedException($"Invalid type '$(value.GetType().Name)'.");
    }

    public virtual VisitTypeCollection(value : ITypeCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitType(value[i]);
    }

    public virtual VisitTypeDeclaration(value : ITypeDeclaration) : void
    {
      VisitCustomAttributeCollection(value.Attributes);
      VisitMethodDeclarationCollection(value.Methods);
      VisitFieldDeclarationCollection(value.Fields);
      VisitPropertyDeclarationCollection(value.Properties);
      VisitEventDeclarationCollection(value.Events);
      VisitTypeDeclarationCollection(value.NestedTypes);
    }

    public virtual VisitTypeDeclarationCollection(value : ITypeDeclarationCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitTypeDeclaration(value[i]);
    }

    public virtual VisitTypedReferenceCreateExpression(value : ITypedReferenceCreateExpression) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitTypeOfExpression(value : ITypeOfExpression) : void
    {
      VisitType(value.Type);
    }

    public virtual VisitTypeOfTypedReferenceExpression(value : ITypeOfTypedReferenceExpression) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitTypeReference(_ : ITypeReference) : void
    {
    }

    public virtual VisitTypeReferenceExpression(value : ITypeReferenceExpression) : void
    {
      VisitType(value.Type);
    }

    public virtual VisitUnaryExpression(value : IUnaryExpression) : void
    {
      VisitExpression(value.Expression);
    }

    public virtual VisitUsingStatement(value : IUsingStatement) : void
    {
      VisitExpression(value.Expression);
      VisitStatement(value.Body);
    }

    public virtual VisitValueOfTypedReferenceExpression(value : IValueOfTypedReferenceExpression) : void
    {
      VisitType(value.TargetType);
      VisitExpression(value.Expression);
    }

    public virtual VisitVariableDeclaration(value : IVariableDeclaration) : void
    {
      VisitType(value.VariableType);
    }

    public virtual VisitVariableDeclarationCollection(value : IVariableDeclarationCollection) : void
    {
      for (mutable i = 0; i < value.Count; ++i)
        VisitVariableDeclaration(value[i]);
    }

    public virtual VisitVariableDeclarationExpression(value : IVariableDeclarationExpression) : void
    {
      VisitVariableDeclaration(value.Variable);
    }

    public virtual VisitVariableReference(_ : IVariableReference) : void
    {
    }

    public virtual VisitVariableReferenceExpression(value : IVariableReferenceExpression) : void
    {
      VisitVariableReference(value.Variable);
    }

    public virtual VisitWhileStatement(value : IWhileStatement) : void
    {
      VisitExpression(value.Condition);
      VisitStatement(value.Body);
    }
  }
}


