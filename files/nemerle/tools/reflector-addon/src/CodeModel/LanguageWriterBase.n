/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.Utility;
using System;
using System.Diagnostics;

using Reflector.CodeModel;

namespace Reflector.NemerleLanguage.CodeModel
{
  public abstract class LanguageWritterBase : ILanguageWriter
  {
    private _formatter : IFormatter;

    public this(formatter : IFormatter)
    {
      when (formatter == null)
        throw ArgumentNullException("formatter");

      _formatter = formatter;
    }

    public abstract WriteAssembly           (_ : IAssembly)            : void;
    public abstract WriteAssemblyReference  (_ : IAssemblyReference)   : void;
    public abstract WriteEventDeclaration   (_ : IEventDeclaration)    : void;
    public abstract WriteExpression         (_ : IExpression)          : void;
    public abstract WriteFieldDeclaration   (_ : IFieldDeclaration)    : void;
    public abstract WriteMethodDeclaration  (_ : IMethodDeclaration)   : void;
    public abstract WriteModule             (_ : IModule)              : void;
    public abstract WriteModuleReference    (_ : IModuleReference)     : void;
    public abstract WriteNamespace          (_ : INamespace)           : void;
    public abstract WritePropertyDeclaration(_ : IPropertyDeclaration) : void;
    public abstract WriteResource           (_ : IResource)            : void;
    public abstract WriteStatement          (_ : IStatement)           : void;
    public abstract WriteTypeDeclaration    (_ : ITypeDeclaration)     : void;


    #region IFormatter wrappers

    public Write(value : string) : void
    {
      _formatter.Write(value);
    }

    public WriteComment(value : string) : void
    {
      _formatter.WriteComment(value);
    }

    public WriteDeclaration(name : string, target : object) : void
    {
      _formatter.WriteDeclaration(
        match (SpecialMethods.Find(name))
          {
          | Some(alias)                       => EscapeKeyword(alias)
          | None when Keywords.Contains(name) => EscapeKeyword(name)
          | None                              => name
          }
      , target);
    }

    public WriteKeyword(value : string) : void
    {
      _formatter.WriteKeyword(value);
    }

    public WriteLine() : void
    {
      _formatter.WriteLine();
    }

    public WriteLiteral(value : string) : void
    {
      _formatter.WriteLiteral(value);
    }

    public WriteProperty(name : string, value : string) : void
    {
      _formatter.WriteProperty(name, value);
    }

    public WriteReference(name : string, description : string, target : object, check : bool = true) : void
    {
      _formatter.WriteReference(if (check && Keywords.Contains(name)) EscapeKeyword(name) else name, description, target);
    }

    public WriteIndent() : void
    {
      _formatter.WriteIndent();
    }

    public WriteOutdent() : void
    {
      _formatter.WriteOutdent();
    }

    #region Extensions

    public WriteIdentifier(name : string) : void
    {
      _formatter.Write(if (Keywords.Contains(name)) EscapeKeyword(name) else name);
    }

    public WriteList['a](lst : list['a], writer : 'a -> void) : void
    {
      WriteList(lst, null, null, ", ", writer)
    }

    public WriteList['a](lst : list['a], start : string, stop : string, writer : 'a -> void) : void
    {
      WriteList(lst, start, stop, ", ", writer)
    }

    public WriteList['a](lst : list['a], start : string, stop : string, delemiter : string, writer : 'a -> void) : void
    {
      def loop(_)
      {
      | x :: Nil =>
        writer(x);
      | x :: tail =>
        writer(x);
        _formatter.Write(delemiter);
        loop(tail)
      | []             => ()
      }

      unless (lst.IsEmpty)
      {
        unless (string.IsNullOrEmpty(start))
          Write(start);
        loop(lst);
        unless (string.IsNullOrEmpty(stop))
          Write(stop);
      }
    }

    public WriteTypeReference(ty : ITypeReference, description : string, target : object) : void
    {
      _formatter.WriteReference(
        match (Types.Find(ty.GetUserFriendlyName()))
        {
        | Some(name) => name
        | None       => ty.Name
        }, description, target);
    }

    #endregion

    #endregion

    #region Keywords

    protected abstract EscapeKeyword(value : string) : string;

    protected abstract GetKeywords() : Set[string];

    mutable _keywords : Set[string];
    public   Keywords : Set[string]
    {
      get
      {
        when (_keywords == null)
        {
          _keywords = GetKeywords()
            .AddRange(Types.Map((_key, value) => value));
        }

        _keywords;
      }
    }

    protected abstract GetTypes() : Map[string, string];

    mutable _types : Map[string, string];
    public   Types : Map[string, string]
    {
      get
      {
        when (_types == null)
          _types = GetTypes();

        _types;
      }
    }

    protected abstract GetSpecialMethods() : Map[string, string];

    mutable _specialMethods : Map[string, string];
    public   SpecialMethods : Map[string, string]
    {
      get
      {
        when (_specialMethods == null)
          _specialMethods = GetSpecialMethods();

        _specialMethods;
      }
    }

    #endregion

  }
}


