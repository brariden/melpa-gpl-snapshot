/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;

using Reflector;
using Reflector.CodeModel;

namespace Reflector.NemerleLanguage
{
  internal class Package : IPackage
  {
    private mutable _langMgr     : ILanguageManager;
    private mutable _nemerleLang : ILanguage;

    public Load(serviceProvider : IServiceProvider) : void
    {
      when (serviceProvider == null)
        throw ArgumentNullException("serviceProvider");

      _langMgr = serviceProvider.GetService();

      when (_langMgr == null)
        throw InvalidOperationException("ILanguageManager not available");

      _nemerleLang = Language(serviceProvider);
      _langMgr.RegisterLanguage(_nemerleLang);

      def propPageMgr = serviceProvider.GetService() : IPropertyPageManager;
      def configMgr   = serviceProvider.GetService() : IConfigurationManager;

      propPageMgr.OptionsPages.Add(OptionsPage(configMgr["Nemerle"]));

    }

    public Unload() : void
    {
      _langMgr.UnregisterLanguage(_nemerleLang);
    }
  }
}
