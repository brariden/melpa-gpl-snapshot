/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using System.Drawing;
using System.Windows.Forms;

using Reflector;
using Reflector.CodeModel;

namespace Reflector.NemerleLanguage
{
  internal class OptionsPage : Control, IPropertyPage
  {
    private _nemerleConfig : IConfiguration;

    private mutable _cbBracingType : ComboBox;
    private mutable _hideCompilerGenerated : CheckBox;

    public this(nemerleConfig : IConfiguration)
    {
      when (nemerleConfig == null)
        throw ArgumentNullException("nemerleConfig");

      _nemerleConfig = nemerleConfig;

      Name = "OptionsPage";
      Dock = DockStyle.Fill;
    }

    #region Component Designer generated code

    /// <summary> 
    /// Required method for Designer support - do not modify 
    /// the contents of this method with the code editor.
    /// </summary>
    private InitializeComponent() : void
    {
      _cbBracingType = ComboBox();
      _hideCompilerGenerated = CheckBox();

      def panel = TableLayoutPanel();
      def lblBracingType = Label();

      panel.SuspendLayout();
      SuspendLayout();

      // panel
      // 
      panel.ColumnCount = 2;
      _ = panel.ColumnStyles.Add(ColumnStyle(SizeType.Percent, 40.0f));
      _ = panel.ColumnStyles.Add(ColumnStyle(SizeType.Percent, 60.0f));
      panel.Controls.Add(_hideCompilerGenerated, 0, 0);
      panel.Controls.Add(lblBracingType, 0, 1);
      panel.Controls.Add(_cbBracingType, 1, 1);
      panel.Dock = DockStyle.Fill;
      panel.Name = "panel";
      panel.RowCount = 3;
      _ = panel.RowStyles.Add(RowStyle(SizeType.Percent, 20.0f));
      _ = panel.RowStyles.Add(RowStyle(SizeType.Percent, 20.0f));
      _ = panel.RowStyles.Add(RowStyle(SizeType.Percent, 60.0f));

      // _hideCompilerGeneratedGenerated
      // 
      _hideCompilerGenerated.Anchor = AnchorStyles.None;
      _hideCompilerGenerated.AutoSize = true;
      panel.SetColumnSpan(_hideCompilerGenerated, 2);
      _hideCompilerGenerated.Name = "HideCompilerGenerated";
      _hideCompilerGenerated.Text = "&Hide compiler generated members";

      // lblBracingType
      // 
      lblBracingType.Anchor = AnchorStyles.None;
      lblBracingType.AutoSize = true;
      lblBracingType.Name = "lblBracingType";
      lblBracingType.Text = "&Bracing type";

      // _cbBracingType
      // 
      _cbBracingType.Anchor = AnchorStyles.None;
      _cbBracingType.Name = typeof(BracingType).Name;
      _cbBracingType.DataSource = Enum.GetNames(typeof(BracingType));
      _cbBracingType.DropDownStyle = ComboBoxStyle.DropDownList;

      // OptionsPage
      // 
      Controls.Add(panel);

      panel.ResumeLayout(false);
      panel.PerformLayout();
      ResumeLayout(false);
    }

    #endregion

    #region IPropertyPage members

    public Cancel() : void
    {
    }

    public Commit() : void
    {
      // Untill the options page is shown, all options match the config file.
      //
      unless (Controls.Count == 0)
      {
        _nemerleConfig.SetProperty(_hideCompilerGenerated.Name, _hideCompilerGenerated.Checked.ToLowerInvariantString(), true.ToLowerInvariantString());
        _nemerleConfig.SetProperty(_cbBracingType.Name, _cbBracingType.Text, BracingType.Block.ToString());
      }
    }

    protected override OnCreateControl() : void
    {
      base.OnCreateControl();

      // Initialize the component on the first time.
      //
      when (Controls.Count == 0)
        InitializeComponent();

      _hideCompilerGenerated.Checked = _nemerleConfig.GetProperty(_hideCompilerGenerated.Name) != false.ToLowerInvariantString();
      _cbBracingType.SelectedItem    = _nemerleConfig.GetProperty(_cbBracingType.Name, BracingType.Block.ToString());
    }

    public Title : string
    {
      get { "Nemerle"; }
    }

    #endregion
  }
}
