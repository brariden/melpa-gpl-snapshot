/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using System.Collections;
using System.Globalization;

using Reflector;
using Reflector.CodeModel;

namespace Reflector.NemerleLanguage
{
  internal module Helper
  {
    public ToLowerInvariantString(this value : object) : string
    {
    | null => null;
    | obj  => obj.ToString().ToLowerInvariant();
    }

    public GetService['a](this serviceProvider : IServiceProvider) : 'a
    {
      serviceProvider.GetService(typeof('a)) :> 'a
    }

    public IsConstructor(this value : IMethodReference) : bool
    {
      value.Name == ".ctor" || value.Name == ".cctor"; 
    }

    public IsGenerated(this value : IMemberReference) : bool
    {
      value.Name.StartsWith("_N_"); 
    }

    public IsGenerated(this value : IParameterReference) : bool
    {
      value.Name.StartsWith("_N_"); 
    }

    public IsGenerated(this value : ITypeReference) : bool
    {
      value.Name.StartsWith("_N_"); 
    }

    public IsInterface(this value : IType) : bool
    {
    | typeRef is ITypeReference =>
      match (typeRef.Resolve())
      {
      | null => false;
      | decl => decl.Interface;
      }
    | _                         => false
    }

    public GetTypeName(this value : IType) : string * string
    {
    | typeRef is ITypeReference => (typeRef.Namespace, typeRef.Name)
    | _                         => (null, null)
    }

    public GetBaseTypeName(this value : ITypeReference) : string * string
    {
    | null => (null, null)
    | _    =>
      match (value.Resolve())
      {
      | null => (null, null)
      | decl =>
        GetTypeName(decl.BaseType)
      }
    }

    public ToArray['a](this col : ICollection) : array['a]
    {
    | null => null
    | _    =>
      def ret = array(col.Count);
      col.CopyTo(ret, 0);
      ret;
    }

    public ToList['a](this col : ICollection) : list['a]
    {
    | null => null
    | _    => Nemerle.Collections.NList.FromArray(col.ToArray())
    }

    public Find['a](this col : ICollection, pred : 'a -> bool) : 'a
    {
      Array.Find(col.ToArray(), pred);
    }

    public Iter['a](this col : ICollection, action : 'a -> void) : void
    {
      Array.ForEach(col.ToArray(), action);
    }

    public GetName(this value : IType) : string
    {
    | typeRef is ITypeReference => GetName(typeRef);
    | _                         => null;
    }

    public GetName(this value : ITypeReference) : string
    {
      when (value == null)
        throw NotSupportedException();

      def genArgs = value.GenericArguments;
      if (genArgs.Count > 0)
        value.Name + genArgs.ToList().ToString();
      else
        value.Name;
    }

    public GetUserFriendlyName(this value : IType) : string
    {
    | typeRef is ITypeReference    => GetUserFriendlyName(typeRef);
    | genParm is IGenericParameter => genParm.Name;
    | genArg  is IGenericArgument  => genArg.Resolve().GetUserFriendlyName();
    | arrType is IArrayType        =>
      def dims = 
        if (arrType.Dimensions.Count > 1)
          arrType.Dimensions.Count.ToString(CultureInfo.InvariantCulture) + ", ";
        else
          string.Empty;
      "array[" + dims + arrType.ElementType.GetUserFriendlyName() + "]";
    | _                            => null;
    }

    public GetUserFriendlyName(this value : ITypeReference) : string
    {
      when (value == null)
        throw NotSupportedException();

      match (value.Owner)
      {
      | typeRef is ITypeReference =>
        GetUserFriendlyName(typeRef) + "+" + GetName(value);
      | _                         =>
        match (value.Namespace)
        {
        | null
        | e when e.Length == 0 => GetName(value);
        | ns                   => ns + "." + GetName(value);
        }
      }
    }

    public GetUserFriendlyName(this value : IMemberReference) : string
    {
      value.DeclaringType.GetUserFriendlyName() + "." + value.Name
    }

    public GetAssembly(this value : ITypeReference) : IAssemblyReference
    {
      match (value.Owner)
      {
      | null                         => null;
      | tyref  is ITypeReference     => GetAssembly(tyref);
      | asmref is IAssemblyReference => asmref;
      | modref is IModuleReference   =>
        match (modref.Resolve())
        {
        | null => null;
        | mod  => mod.Assembly;
        }
      | _                            => throw NotSupportedException();
      }
    }

    public static GetVisibility(this value : IEventDeclaration) : MethodVisibility
    {
      def addMethod    = if (value.AddMethod    != null) value.AddMethod.Resolve()    else null;
      def removeMethod = if (value.RemoveMethod != null) value.RemoveMethod.Resolve() else null;
      def invokeMethod = if (value.InvokeMethod != null) value.InvokeMethod.Resolve() else null;
      
      match ((addMethod, removeMethod, invokeMethod))
      {
      | (null, null, null)                             => MethodVisibility.Public
      | (a, null, null)                                => a.Visibility
      | (null, r, null)                                => r.Visibility
      | (null, null, i)                                => i.Visibility
      | (a, r, null) when a.Visibility == r.Visibility => a.Visibility
      | (a, null, i) when a.Visibility == i.Visibility => a.Visibility
      | (null, r, i) when r.Visibility == i.Visibility => r.Visibility
      | (a, r, i) when a.Visibility == r.Visibility
         && r.Visibility == i.Visibility               => a.Visibility
      | _                                              => MethodVisibility.Public
      }
    }

    public static GetVisibility(this value : IPropertyDeclaration) : MethodVisibility
    {
      def getMethod = if (value.GetMethod != null) value.GetMethod.Resolve() else null;
      def setMethod = if (value.SetMethod != null) value.SetMethod.Resolve() else null;
      
      match ((getMethod, setMethod))
      {
      | (null, null)                             => MethodVisibility.Public
      | (g, null)                                => g.Visibility
      | (null, s)                                => s.Visibility
      | (g, s) when g.Visibility == s.Visibility => g.Visibility
      | _                                        => MethodVisibility.Public
      }
    }

    public static GetVisibility(this value : IFieldDeclaration) : FieldVisibility
    {
      value.Visibility
    }

    public static GetVisibility(this value : IMethodDeclaration) : MethodVisibility
    {
      value.Visibility
    }

/*
    public static GetVisibility(this value : IEventReference) : MethodVisibility
    {
      match (value.Resolve())
      {
      | null => MethodVisibility.Public
      | decl => decl.GetVisibility();
      }
    }

    public static GetVisibility(this value : IFieldReference) : FieldVisibility
    {
      match (value.Resolve())
      {
      | null => FieldVisibility.Public
      | decl => decl.GetVisibility();
      }
    }

    public static GetVisibility(this value : IMethodReference) : MethodVisibility
    {
      match (value.Resolve())
      {
      | null => MethodVisibility.Public
      | decl => decl.GetVisibility();
      }
    }

    public static GetVisibility(this value : IPropertyReference) : MethodVisibility
    {
      match (value.Resolve())
      {
      | null => MethodVisibility.Public
      | decl => decl.GetVisibility();
      }
    }
*/

    public static GetVisibility(this value : ITypeReference) : TypeVisibility
    {
      match (value.Resolve())
      {
      | null => TypeVisibility.Public
      | decl => decl.GetVisibility();
      }
    }

    public static GetVisibility(this value : ITypeDeclaration) : TypeVisibility
    {
      value.Visibility
    }
  }
}
