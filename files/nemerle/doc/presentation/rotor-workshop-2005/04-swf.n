//------------------------------------------------------------------------------
/// <copyright from='1997' to='2001' company='Microsoft Corporation'>
///    Copyright (c) Microsoft Corporation. All Rights Reserved.
///
///    This source code is intended only as a supplement to Microsoft
///    Development Tools and/or on-line documentation.  See these other
///    materials for detailed information regarding Microsoft code samples.
///
/// </copyright>
//------------------------------------------------------------------------------
namespace Microsoft.Samples.WinForms.Cs.MDI {
    using System;
    using System.ComponentModel;
    using System.Drawing;
    using System.Windows.Forms;

    public class MainForm : System.Windows.Forms.Form {
        /// <summary>
        ///    Required designer variable.
        /// </summary>
        private  mutable  components : System.ComponentModel.Container;
        private  mutable  mainMenu : System.Windows.Forms.MainMenu;
        protected internal  mutable  statusBar1 : System.Windows.Forms.StatusBar;

        private  mutable  windowCount : int = 0; 

        public this() {

            //
            // Required for Windows Form Designer support
            //
            InitializeComponent();

            //Setup MDI stuff
            this.IsMdiContainer = true;
            this.MdiChildActivate +=  EventHandler(this.MDIChildActivated);

            //Add File Menu
            mutable  miFile = mainMenu.MenuItems.Add("&File");
            miFile.MergeOrder=0;
            miFile.MergeType = MenuMerge.MergeItems;

            mutable  miAddDoc =  MenuItem("&Add Document",  EventHandler(this.FileAdd_Clicked), Shortcut.CtrlA);
            miAddDoc.MergeOrder=100;

            mutable  miExit =  MenuItem("E&xit",  EventHandler(this.FileExit_Clicked), Shortcut.CtrlX);
            miExit.MergeOrder=110;

            miFile.MenuItems.Add(miAddDoc);
            miFile.MenuItems.Add("-");     // Gives us a seperator
            miFile.MenuItems.Add(miExit);

            //Add Window Menu
            mutable  miWindow = mainMenu.MenuItems.Add("&Window");
            miWindow.MergeOrder = 10;
            miWindow.MenuItems.Add("&Cascade",  EventHandler(this.WindowCascade_Clicked));
            miWindow.MenuItems.Add("Tile &Horizontal",  EventHandler(this.WindowTileH_Clicked));
            miWindow.MenuItems.Add("Tile &Vertical",  EventHandler(this.WindowTileV_Clicked));
            miWindow.MdiList = true ; //Adds the MDI Window List to the bottom of the menu

            AddDocument(); //Add an initial doc
        }


        //Add a document
        [Nemerle.Diagnostics.Trace]
        private AddDocument() :  void {
        #if true
            async { 
                System.Threading.Thread.Sleep (5000); 
                System.Console.WriteLine ("Environment error, fridge is empty!"); 
            }
        #endif    
            windowCount++ ;
            mutable  doc =  Document($"Document $windowCount");
            doc.MdiParent = this;
            doc.Show();
        }


        //File->Add Menu item handler
        protected FileAdd_Clicked(mutable  sender : object,mutable  e :  System.EventArgs) :  void {
            AddDocument() ;
        }


        //File->Exit Menu item handler
        protected FileExit_Clicked(mutable  sender : object,mutable  e :  System.EventArgs) :  void {
            this.Close();
        }


        //One of the MDI Child windows has been activated
        protected MDIChildActivated(mutable  sender : object,mutable  e :  System.EventArgs) :  void {
            if (null == this.ActiveMdiChild) {
                statusBar1.Text = "";
            } else {
                statusBar1.Text = this.ActiveMdiChild.Text;
            }
        }

        //Window->Cascade Menu item handler
        protected WindowCascade_Clicked(mutable  sender : object,mutable  e :  System.EventArgs) :  void {
            this.LayoutMdi(MdiLayout.Cascade);
        }


        //Window->Tile Horizontally Menu item handler
        protected WindowTileH_Clicked(mutable  sender : object,mutable  e :  System.EventArgs) :  void {
            this.LayoutMdi(MdiLayout.TileHorizontal);
        }


        //Window->Tile Vertically Menu item handler
        protected WindowTileV_Clicked(mutable  sender : object,mutable  e :  System.EventArgs) :  void {
            this.LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>
        ///    Clean up any resources being used.
        /// </summary>
        protected override Dispose(mutable  disposing : bool) :  void
        {
           when (disposing) {
                when (components != null) {
                    components.Dispose();
                }
           }
           base.Dispose(disposing);
        }


        /// <summary>
        ///    Required method for Designer support - do not modify
        ///    the contents of this method with the code editor.
        /// </summary>
        protected InitializeComponent() :  void
        {
            this.components =  System.ComponentModel.Container ();
            this.mainMenu =  System.Windows.Forms.MainMenu ();
            this.statusBar1 =  System.Windows.Forms.StatusBar ();
            this.Text = "MDI Example";
            this.AutoScaleBaseSize =  System.Drawing.Size (5, 13);
            this.Menu = this.mainMenu;
            this.ClientSize =  System.Drawing.Size (450, 200);
            statusBar1.BackColor = System.Drawing.SystemColors.Control;
            statusBar1.Location =  System.Drawing.Point (0, 180);
            statusBar1.Size =  System.Drawing.Size (450, 20);
            statusBar1.TabIndex = 1;
            this.Controls.Add (this.statusBar1);
        }

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        public static Main(mutable  args :  array [string]) :  void {
            Application.Run( MainForm());
        }

    }
}


//------------------------------------------------------------------------------
/// <copyright from='1997' to='2001' company='Microsoft Corporation'>
///    Copyright (c) Microsoft Corporation. All Rights Reserved.
///
///    This source code is intended only as a supplement to Microsoft
///    Development Tools and/or on-line documentation.  See these other
///    materials for detailed information regarding Microsoft code samples.
///
/// </copyright>
//------------------------------------------------------------------------------
namespace Microsoft.Samples.WinForms.Cs.MDI {
    using System;
    using System.ComponentModel;
    using System.Drawing;
    using System.Drawing.Text;
    using System.Windows.Forms;

    public class Document : System.Windows.Forms.Form {
        /// <summary>
        ///    Required designer variable.
        /// </summary>
        private  mutable  components : System.ComponentModel.Container;
        private  mutable  mainMenu : System.Windows.Forms.MainMenu;
        protected internal  mutable  richTextBox1 : System.Windows.Forms.RichTextBox;

        private struct FontSizes {
            public static  mutable  Small : float = 8f;
            public static  mutable  Medium : float = 12f;
            public static  mutable  Large : float = 24f;
        }

        private  mutable  fontSize : float = FontSizes.Medium;

        private  mutable  miFormatFontChecked : MenuItem;
        private  mutable  miFormatSizeChecked : MenuItem;

        private  mutable  miSmall : MenuItem; 
        private  mutable  miMedium : MenuItem; 
        private  mutable  miLarge : MenuItem; 

        private  mutable  miSansSerif : MenuItem; 
        private  mutable  miSerif : MenuItem; 
        private  mutable  miMonoSpace : MenuItem; 

        private  mutable  currentFontFamily : FontFamily; 
        private  mutable  monoSpaceFontFamily : FontFamily;
        private  mutable  sansSerifFontFamily : FontFamily;
        private  mutable  serifFontFamily : FontFamily;

        public this(mutable  docName : string) {  base();

            //
            // Required for Windows Form Designer support
            //
            InitializeComponent();

            // Initialize Fonts - use generic fonts to avoid problems across
            // different versions of the OS
            monoSpaceFontFamily =  FontFamily (GenericFontFamilies.Monospace);
            sansSerifFontFamily =  FontFamily (GenericFontFamilies.SansSerif);
            serifFontFamily =  FontFamily (GenericFontFamilies.Serif);
            currentFontFamily = sansSerifFontFamily;

            this.Text = docName;

            richTextBox1.Font =  System.Drawing.Font(currentFontFamily, fontSize);
            richTextBox1.Text = docName;

            //Add File Menu
            mutable  miFile = mainMenu.MenuItems.Add("&File");
            miFile.MergeType = MenuMerge.MergeItems;
            miFile.MergeOrder = 0;

            mutable  miLoadDoc = miFile.MenuItems.Add("&Load Document (" + docName + ")",  EventHandler(this.LoadDocument_Clicked));
            miLoadDoc.MergeOrder = 105;

            //Add Formatting Menu
            mutable  miFormat = mainMenu.MenuItems.Add("F&ormat (" + docName + ")");
            miFormat.MergeType = MenuMerge.Add;
            miFormat.MergeOrder = 5;

            //Font Face sub-menu
            miSansSerif =  MenuItem("&1." + sansSerifFontFamily.Name,  EventHandler(this.FormatFont_Clicked));
            miSerif =  MenuItem("&2." + serifFontFamily.Name,  EventHandler(this.FormatFont_Clicked));
            miMonoSpace =  MenuItem("&3." + monoSpaceFontFamily.Name,  EventHandler(this.FormatFont_Clicked));
            miSansSerif.Checked = true ;
            miFormatFontChecked = miSansSerif ;
            miSansSerif.DefaultItem = true ;

            miFormat.MenuItems.Add( "Font &Face"
                        , (  array[ miSansSerif, miSerif, miMonoSpace ])
                        );

            //Font Size sub-menu
            miSmall =  MenuItem("&Small",  EventHandler(this.FormatSize_Clicked));
            miMedium =  MenuItem("&Medium",  EventHandler(this.FormatSize_Clicked));
            miLarge =  MenuItem("&Large",  EventHandler(this.FormatSize_Clicked));
            miMedium.Checked = true ;
            miMedium.DefaultItem = true ;
            miFormatSizeChecked = miMedium ;

            miFormat.MenuItems.Add( "Font &Size"
                        , (  array[ miSmall, miMedium, miLarge ])
                        );
        }

        //File->Load Document Menu item handler
        protected LoadDocument_Clicked(mutable  sender : object,mutable  e :  System.EventArgs) :  void
        {
            MessageBox.Show(this.Text) ;
        }

        //Format->Font Menu item handler
        protected FormatFont_Clicked(mutable  sender : object,mutable  e :  System.EventArgs) :  void {
            mutable  miClicked = (sender :> MenuItem);
            miClicked.Checked = true;
            miFormatFontChecked.Checked = false;
            miFormatFontChecked = miClicked ;

            if (miClicked : object == miSansSerif) {
                currentFontFamily = sansSerifFontFamily ;
            } else if (miClicked : object == miSerif) {
                currentFontFamily = serifFontFamily ;
            } else {
                currentFontFamily = monoSpaceFontFamily ;
            }

            richTextBox1.Font =  Font(currentFontFamily, fontSize);
        }

        //Format->Size Menu item handler
        protected FormatSize_Clicked(mutable  sender : object,mutable  e :  System.EventArgs) :  void {
            mutable  miClicked = (sender :> MenuItem);
            miClicked.Checked = true;
            miFormatSizeChecked.Checked = false;
            miFormatSizeChecked = miClicked;


            if (miClicked : object == miSmall) {
                fontSize = FontSizes.Small ;
            } else if (miClicked : object == miLarge) {
                fontSize = FontSizes.Large ;
            } else {
                fontSize = FontSizes.Medium ;
            }

            richTextBox1.Font =  Font(currentFontFamily, fontSize);
        }

        /// <summary>
        ///    Clean up any resources being used.
        /// </summary>
        protected override Dispose(mutable  disposing : bool) :  void
        {
           when (disposing) {
                when (components != null) {
                    components.Dispose();
                }
           }
           base.Dispose(disposing);
        }

        /// <summary>
        ///    Required method for Designer support - do not modify
        ///    the contents of this method with the code editor.
        /// </summary>
        private InitializeComponent() :  void
        {
            this.components =  System.ComponentModel.Container();

            this.richTextBox1 =  System.Windows.Forms.RichTextBox();
            this.mainMenu =  System.Windows.Forms.MainMenu();

            richTextBox1.Text = "";
            richTextBox1.Size =  System.Drawing.Size(292, 273);
            richTextBox1.TabIndex = 0;
            richTextBox1.Dock = System.Windows.Forms.DockStyle.Fill;

            this.AutoScaleBaseSize =  System.Drawing.Size(5, 13);
            this.Text = "";
            this.ClientSize =  System.Drawing.Size(392, 117);
            this.Menu = mainMenu;

            this.Controls.Add(richTextBox1);

        }
    }
}
