using System;
using Nemerle.Collections;
using Nemerle.Text;
//using Nemerle.Utility;
using System.Linq;
using Nemerle.Linq;
using NUnit.Framework;
using System.Data.Linq;
using System.Text;

namespace LinqTests
{
  [TestFixture]
  public class Linq2SqlTests
  {
    ResetDB = false; // set to true if you need to reset DB
    
    static ReadConnectionString() : string
    {
      def currAssm = Uri(typeof(Linq2SqlTests).Assembly.CodeBase).LocalPath;
      def path = IO.Path.GetDirectoryName(currAssm);
      def connStrPath = IO.Path.Combine(path, "connectionString.txt");
      def connStr = 
        try { IO.File.ReadAllText(connStrPath, Encoding.UTF8) }
        catch { | _e is IO.FileNotFoundException =>
                  @"Data Source=.\SQLEXPRESS;Integrated Security=True"
                  //Data Source=.\SQLEXPRESS;Integrated Security=True
                  //throw IO.FileNotFoundException(
                  //  $"You should define connection string to NorthWind DB in: '$connStrPath'",
                  //  e.FileName, e)
              };

      connStr
    }

    _conn     : LinqDataConnection = LinqDataConnection(ReadConnectionString());
    customers : Table[Customer];
    orders    : Table[Order];
    details   : Table[Detail];
    products  : Table[Product];

    public this()
    {
      _conn.Connection.Open();
      def cmd = _conn.Connection.CreateCommand();
      cmd.CommandText = "select count(*) from sysdatabases where name='Northwind'";
      def res =  cmd.ExecuteScalar();
      
      when (res :> int != 1 || ResetDB)
      {
        _conn.Connection.Close();
        CreateDataBase();
        _conn.Connection.Open();
      }
      
      cmd.CommandText = "use Northwind";
      _ = cmd.ExecuteNonQuery();

      
      customers = _conn.Customers;
      orders    = _conn.Orders;
      details   = _conn.Details;
      products  = _conn.Products;
    }

    public CreateDataBase() : void
    {
      def currAssm = Uri(typeof(Linq2SqlTests).Assembly.CodeBase).LocalPath;
      def script   = IO.Path.Combine(IO.Path.GetDirectoryName(currAssm), @"..\..\TestDbScript\instnwnd.sql");
      def sql      = IO.File.ReadAllText(script);
      def commands = sql.Replace("\r", "").Replace("\ngo", "\x1", ).Replace("\nGo", "\x1", ).Replace("\nGO", "\x1", ).Split('\x1');

      using (def con = System.Data.SqlClient.SqlConnection(ReadConnectionString()))
      {
        con.Open();

        def cmd = con.CreateCommand();

        foreach (c in commands)
        {
          cmd.CommandText = c;
          _ = cmd.ExecuteScalar();
        }
      }
    }

    [Test]
    public QueryFromMsSql_01() : void
    {
      def res = customers.Select(c => c);
      Assert.IsTrue((res : object) is IQueryable[Customer]);
      def ary = res.ToArray();
      Assert.AreEqual(91, ary.Length);
    }

    [Test]
    public QueryFromMsSql_Syntax_01() : void
    {
      def res = linq <# from c in customers select c #>; 
      Assert.IsTrue((res : object) is IQueryable[Customer]);
      def ary = res.ToArray();
      Assert.AreEqual(91, ary.Length);
    }

    [Test]
    public QueryFromMsSql_02() : void
    {
      def res = customers.Select(c => c.CompanyName);
      Assert.IsTrue((res : object) is IQueryable[string]);
      def ary = res.ToArray();
      Assert.AreEqual(91, ary.Length);
    }

    [Test]
    public QueryFromMsSql_Syntax_02() : void
    {
      def res = linq <# from c in customers select c.CompanyName #>;
      Assert.IsTrue((res : object) is IQueryable[string]);
      def ary = res.ToArray();
      Assert.AreEqual(91, ary.Length);
    }

    [Test]
    public QueryFromMsSql_03() : void
    {
      def res = customers.Select(c => (c.CompanyName, c.City));
      Assert.IsTrue((res : object) is IQueryable[string * string]);
      def ary = res.ToArray();
      Assert.AreEqual(91, ary.Length);
    }
    
    [Test]
    public QueryFromMsSql_Syntax_03() : void
    {
      def res = linq <# from c in customers select (c.CompanyName, c.City) #>;
      Assert.IsTrue((res : object) is IQueryable[string * string]);
      def ary = res.ToArray();
      Assert.AreEqual(91, ary.Length);
    }

    [Test]
    public QueryFromMsSql_04() : void
    {
      def res = customers.Where(c => c.City == "London");
      Assert.IsTrue((res : object) is IQueryable[Customer]);
      def ary = res.ToArray();
      Assert.AreEqual(6, ary.Length);
      Assert.AreEqual("London", ary[0].City);
    }

    [Test]
    public QueryFromMsSql_Syntax_04() : void
    {
      def res = linq <# from c in customers where c.City == "London" #>;
      Assert.IsTrue((res : object) is IQueryable[Customer]);
      def ary = res.ToArray();
      Assert.AreEqual(6, ary.Length);
      Assert.AreEqual("London", ary[0].City);
    }

    class A
    {
      public mutable city = "London";
    }
    
    [Test]
    public QueryFromMsSql_Syntax_04_2() : void
    {
      def a = A();
      def res = linq <# from c in customers where c.City == a.city #>;
      Assert.IsTrue((res : object) is IQueryable[Customer]);
      def ary = res.ToArray();
      Assert.AreEqual(6, ary.Length);
      Assert.AreEqual(a.city, ary[0].City);
      a.city = "Madrid";
      def ary = res.ToArray();
      Assert.AreEqual(3, ary.Length);
      Assert.AreEqual(a.city, ary[0].City);
    }

    mutable city = "London";
    
    [Test]
    public QueryFromMsSql_Syntax_04_3() : void
    {
      def res = linq <# from c in customers where c.City == this.city #>;
      Assert.IsTrue((res : object) is IQueryable[Customer]);
      def ary = res.ToArray();
      Assert.AreEqual(6, ary.Length);
      Assert.AreEqual(city, ary[0].City);
      city = "Madrid";
      def ary = res.ToArray();
      Assert.AreEqual(3, ary.Length);
      Assert.AreEqual(city, ary[0].City);
    }

    [Test]
    public QueryFromMsSql_05() : void
    {
      def res = customers
                .Where(c => c.Country == "UK")
                .SelectMany(c => c.Orders, (c,o) => (c.CompanyName, o.OrderID))
      ;
      Assert.IsTrue((res : object) is IQueryable[string * int]);
      def ary = res.ToArray();
      Assert.AreEqual(56, ary.Length);
      Assert.IsTrue(ary.Where(x => x.Equals(("Around the Horn", 10355))).Count() == 1);
    }
   
    [Test]
    public QueryFromMsSql_Syntax_05() : void
    {
      def res = linq <# from c in customers
                        from o in c.Orders 
                        where c.Country == "UK"
                        select (c.CompanyName, o.OrderID) 
                        #>;
               
      Assert.IsTrue((res : object) is IQueryable[string * int]);
      def ary = res.ToArray();
      Assert.AreEqual(56, ary.Length);
      Assert.IsTrue(ary.Where(x => x.Equals(("Around the Horn", 10355))).Count() == 1);
    }
    
    [Test]
    public QueryFromMsSql_06() : void
    { 
      def res = customers
        .SelectMany(c => c.Orders, fun(c,o) { (c,o) })
        .OrderByDescending(fun((c,o)) {
          o.Details.Where(d => d.OrderID == o.OrderID)
           //TODO: VladD2: Надо добавить автоматическое приведение типов до большего типа.
           .Select(d => d.Quantity * d.UnitPrice).Sum() })
        .Select(fun((c,o)) { (c.CompanyName, o.OrderID) })

      ;
      Assert.IsTrue((res : object) is IQueryable[string * int]);
      def x = res.ToArray();
      Assert.AreEqual(orders.Count(), x.Length);
    }
  
    [Test]
    public QueryFromMsSql_Syntax_06() : void
    {
      def res = linq <# from c in customers
                  from o in c.Orders
                  order by (linq <# from d in o.Details 
                                   where d.OrderID == o.OrderID
                                   select d.Quantity * d.UnitPrice #>).Sum() desc
                  select (c.CompanyName, o.OrderID) #>;
    
      Assert.IsTrue((res : object) is IQueryable[string * int]);
      def x = res.ToArray();
      Assert.AreEqual(orders.Count(), x.Length);
    }

    [Test]
    public QueryFromMsSql_Syntax_06_2() : void
    {
      def res = linq <# from c in customers
                        from o in c.Orders
                        let total = linq <# from d in o.Details 
                                            where d.OrderID == o.OrderID
                                            select d.Quantity * d.UnitPrice #>.Sum()
                        order by total desc
                        select (c.CompanyName, o.OrderID, total) #>;
    
      Assert.IsTrue((res : object) is IQueryable[string * int * decimal]);
      def x = res.ToArray();
      Assert.AreEqual(orders.Count(), x.Length);
    }
 
    [Test]
    public QueryFromMsSql_07() : void
    {
      def res = orders
        .Select(o => (o, /* t = */ o.Details.Sum(d => d.UnitPrice * d.Quantity))) // let t = ...
        .Where(((_o, t)) => t >= 7000m)
        .Select(((o, t)) => (o.OrderID, /* Total = */ t))
      ; 

      Assert.IsTrue((res : object) is IQueryable[int * decimal]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 19);
      Assert.IsFalse(Nemerle.Collections.NCollectionsExtensions.Exists(ary, (_, total) => total < 7000m));
    }

    [Test]
    public QueryFromMsSql_Syntax_07() : void
    {
      def res = linq <#
        from o in orders
        let t = o.Details.Sum(d => d.UnitPrice * d.Quantity)
        where t >= 7000m
        select (o.OrderID, t)
        #>; 

      Assert.IsTrue((res : object) is IQueryable[int * decimal]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 19);
      Assert.IsFalse(Nemerle.Collections.NCollectionsExtensions.Exists(ary, (_, total) => total < 7000m));
    }

    [Test]
    public QueryFromMsSql_08() : void
    {
      def res = customers.Join(orders, c => c.CustomerID, o => o.CustomerID,
        (c, o) => (c.CompanyName, o.OrderDate) );
        
      Assert.IsTrue((res : object) is IQueryable[string * DateTime?]);
      def ary = res.ToArray();
      Assert.AreEqual(orders.Count(), ary.Length);
    }

    [Test]
    public QueryFromMsSql_Syntax_08() : void
    {
      def res = linq <# from c in customers
                        join o in orders on c.CustomerID == o.CustomerID
                        select (c.CompanyName, o.OrderDate)
                         #>;
      
      Assert.IsTrue((res : object) is IQueryable[string * DateTime?]);
      def ary = res.ToArray();
      Assert.AreEqual(orders.Count(), ary.Length);
    }

    [Test]
    public QueryFromMsSql_09() : void
    {
      def res = customers//(customers : System.Collections.Generic.IEnumerable[Customer])
        .GroupJoin(orders, c => c.CustomerID, o => o.CustomerID, (c, co) => (c, co) )
        .Select(((c, co)) => (c, co, /*n =*/ co.Count()))
        .Where(((_c, _co, n)) => n >= 3)
        .Select(((c, _co, n)) => (c.CompanyName, /*OrderCount =*/ n))
        ;
        
      Assert.IsTrue((res : object) is IQueryable[string * int]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 86);
    }
    
    [Test]
    public QueryFromMsSql_Syntax_09() : void
    {
      def res = linq <# 
        from c in customers
        join o in orders on c.CustomerID == o.CustomerID into co
        let n = co.Count()
        where n >= 3
        select (c.CompanyName, n) #>;
        
      Assert.IsTrue((res : object) is IQueryable[string * int]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 86);
    }
    
    [Test]
    public QueryFromMsSql_10() : void
    {
      def res = customers
        .Join(orders,   c           => c.CustomerID, o => o.CustomerID, (c, o)         => (c, o))
        .Join(details,  ((c, o))    => o.OrderID,    d => d.OrderID,    ((c, o), d)    => (c, o, d))
        .Join(products, ((c, o, d)) => d.ProductID,  p => p.ProductID,  ((c, o, d), p) => (c, o, d, p))
        .Select(((c, o, _d, p)) => (c.CompanyName, o.OrderDate, p.ProductName))
        ;
        
      Assert.IsTrue((res : object) is IQueryable[string * DateTime? * string]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 2155);
    }

    public X() : void
    {
        _ = linq <# from c in customers
                    join o in orders on c.CustomerID == o.CustomerID
                    join d in details on o.OrderID == d.OrderID #>;
    }
    
    [Test]
    public QueryFromMsSql_Syntax_10() : void
    {
      def res = linq <# 
        from c in customers
        join o in  orders  on c.CustomerID == o.CustomerID
        join d in details  on o.OrderID    == d.OrderID
        join p in products on d.ProductID  == p.ProductID
        select (c.CompanyName, o.OrderDate, p.ProductName) #>;
        
      Assert.IsTrue((res : object) is IQueryable[string * DateTime? * string]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 2155);
    }

    [Test]
    public QueryFromMsSql_11() : void
    {
      def res = customers.GroupBy(c => c.Country, c => c.CompanyName); //.[_, _, _]
      
      Assert.IsTrue((res : object) is IQueryable[IGrouping[string, string]]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 21);
    }

    [Test]
    public QueryFromMsSql_Syntax_11() : void
    {
      def res = linq <# from c in customers 
                        group c.CompanyName by c.Country #>;
        
      Assert.IsTrue((res : object) is IQueryable[IGrouping[string, string]]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 21);
    }

    [Test]
    public QueryFromMsSql_12() : void
    {
      def res = customers.GroupBy(c => c.Country).Select(g => (g.Key, g.Count()));
        
      Assert.IsTrue((res : object) is IQueryable[string * int]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 21);
    }
    
    [Test]
    public QueryFromMsSql_Syntax_12() : void
    {
      def res = linq <# from g in linq <# 
	                        from c in customers
	                        group c by c.Country #>
                        select (g.Key, g.Count()) #>; // Country = g.Key, CustCount = g.Count()
        
      Assert.IsTrue((res : object) is IQueryable[string * int]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 21);
    }

    [Test]
    public QueryFromMsSql_Syntax_12_2() : void
    {
      def res = linq <# from c in customers
                        group c by c.Country into g
                        select (g.Key, g.Count()) #>; // Country = g.Key, CustCount = g.Count()
        
      Assert.IsTrue((res : object) is IQueryable[string * int]);
      def ary = res.ToArray();
      Assert.AreEqual(ary.Length, 21);
    }
  }
}