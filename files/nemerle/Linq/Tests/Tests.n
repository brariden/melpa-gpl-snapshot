#pragma warning disable 10012 // W: operator with nullable types is dangerous

using System;
using System.Linq;
using System.Math;

using Nemerle.Collections;
using Nemerle.Extensions;
//using Nemerle.Utility;

using NUnit.Framework;
using Nemerle.Linq;
using System.Linq.Expressions;
using SCG = System.Collections.Generic;

namespace Tests
{
  using NorthWind;
  
  class Data
  {
    public Id : Guid { get; set; }
    public Name : string { get; set; }
  }

  [TestFixture]
  public class Expressions
  {
    [Test]
    public ClosureLocalVars() : void
    {
      def toExpr(e : Expression[Func[Data, bool]]) { e }
      
      mutable id1 = Guid.NewGuid();
      mutable id2 = Guid.NewGuid();

      def e1 = toExpr(d => d.Id == id1);
      def e2 = toExpr(d => d.Id == id2);
      
      def f1 = e1.Compile();
      def f2 = e2.Compile();
      def d  = Data();
      d.Id = id1;
      
      Assert.True(f1(d));   
      Assert.False(f2(d));   
      id2 = id1;
      Assert.True(f1(d));   
      Assert.True(f2(d));   
    }
    
    [Test]
    public LiteralExpressions() : void
    {
      def f = ToExpression(fun () { true });
      Assert.IsTrue(f.Compile()());
      
      def f = ToExpression(fun () { 1 });
      Assert.AreEqual(1, f.Compile()());
      
      def f = ToExpression(fun () { "test" });
      Assert.AreEqual("test", f.Compile()());
      
      def f = ToExpression(fun () { 2*2+4*(3+2)*3-3/5 });
      Assert.AreEqual(2*2+4*(3+2)*3-3/5, f.Compile()());
      
      def f = ToExpression(fun () { 1 });
      Assert.AreEqual(1, f.Compile()());
      
      def f = ToExpression(fun () { true && false && true || false });
      Assert.AreEqual(false, f.Compile()());
      
      def f = ToExpression(fun () { true && false && true || true });
      Assert.AreEqual(true, f.Compile()());
      
      def f = ToExpression(fun () { false == false });
      Assert.AreEqual(true, f.Compile()());
      
      def f = ToExpression(fun () { "123" != "124" });
      Assert.AreEqual(true, f.Compile()());
      
      def f = ToExpression(fun () { !false });
      Assert.IsTrue(f.Compile()());
      
      def f = ToExpression(fun () { !true });
      Assert.IsFalse(f.Compile()());
      
      def f = ToExpression(fun () { -111 });
      Assert.AreEqual(-111, f.Compile()());
      
      def f = ToExpression(fun () { 1 < 5 });
      Assert.AreEqual(true, f.Compile()());
      
      def f = ToExpression(() => 5 >= 5);
      Assert.AreEqual(true, f.Compile()());
      
      def f = ToExpression(fun () { 5 > 5 });
      Assert.AreEqual(false, f.Compile()());
    }
    
    [Test]
    public ClosureExpressions() : void
    {
      //assert2(false);
      def x = 100;
      def f = ToExpression(fun () { true && false && true || (x == 101) });
      Assert.AreEqual(false, f.Compile()());
      
      def x = 101;
      def f = ToExpression(fun () { true && false && true || (x == 101) });
      Assert.AreEqual(true, f.Compile()());
      
      def x = 100;
      def y = 2;
      def f = ToExpression(fun () { (x + y * 2).ToString() });
      Assert.AreEqual("104", f.Compile()());
    }
    
    [Test]
    public TypeRelativeExpressions() : void
    {
      def f = ToExpression(fun () { 0xFFFFFFFFF :> byte });
      def x = f.Compile()();
      Assert.AreEqual(typeof(byte), x.GetType());
      Assert.AreEqual(255, x);
      
      def f = ToExpression(fun () { 0xFFFFFFFFF :> int });
      def x = f.Compile()();
      Assert.AreEqual(typeof(int), x.GetType());
      Assert.AreEqual(-1, x);
      
      def f = ToExpression(fun () { typeof (System.Int32) });
      Assert.AreEqual(typeof(int), f.Compile()());
    }
    
    [Test]
    public ConstructorExpressions() : void
    {
      def f = ToExpression(fun () { object() });
      Assert.IsNotNull(f.Compile()());

      def f = ToExpression(fun () { System.Object() });
      Assert.IsNotNull(f.Compile()());

      def f = ToExpression(fun () { System.String('a', 10) });
      Assert.AreEqual("aaaaaaaaaa", f.Compile()());
    }
    
    instanceField = "InstanceMethod()";
    InstanceMethod() : string { _ = InstanceMethod; instanceField }
    public PublicInstanceMethod() : string { _ = InstanceMethod; instanceField }
    
    [Test]
    public InstanceMethodCallExpressions() : void
    {
      def f = ToExpression(fun () { InstanceMethod() });
      Assert.AreEqual(instanceField, f.Compile()());

      def f = ToExpression(fun () { this.PublicInstanceMethod() });
      Assert.AreEqual(instanceField, f.Compile()());

      def f = ToExpression(fun () { "woow!".GetType() });
      Assert.AreEqual(typeof (string), f.Compile()());

      def f = ToExpression(fun () { "woow!".Length.ToString() });
      Assert.AreEqual("5", f.Compile()());

      def f = ToExpression(fun () { "woow!".CompareTo("woow!") });
      Assert.AreEqual(0, f.Compile()());

      def user = User("Vlad", "Chistiakov", 34);
      def f = ToExpression(fun () { user.GetFullName("Mr.") });
      Assert.AreEqual("Mr. Vlad Chistiakov", f.Compile()());

      def x = "woow!";
      def f = ToExpression(fun () { x.Length.ToString() });
      Assert.AreEqual("5", f.Compile()());
    }
    
    [Test]
    public InstancePropertyCallExpressions() : void
    {
      def f = ToExpression(fun () { System.DateTime.Now.Year });
      Assert.Less(2006, f.Compile()());
    }
    
    static StaticMethod() : bool { _ = StaticMethod; true }
    public static PublicStaticMethod() : int { _ = PublicStaticMethod; 1234 }
    
    [Test]
    public StaticMethodCallExpressions() : void
    {
      def f = ToExpression(fun () { Max(2, 3) });
      Assert.AreEqual(3, f.Compile()());
      
      def f = ToExpression(fun () { string.Concat("te", "s", "t") });
      Assert.AreEqual("test", f.Compile()());

      def f = ToExpression(fun () { StaticMethod() });
      Assert.AreEqual(true, f.Compile()());

      def f = ToExpression(fun () { PublicStaticMethod() });
      Assert.AreEqual(1234, f.Compile()());
    }
    
    [Test]
    public StaticPropertyCallExpressions() : void
    {
      def f = ToExpression(fun () { System.Environment.NewLine });
      Assert.AreEqual(System.Environment.NewLine, f.Compile()());
    }

    [Test]
    public ObjectInitializer() : void
    {
      def f = ToExpression((x, y) => Data() <- { Id = x; Name = y }).Compile();
      def id = Guid.NewGuid();
      def data = f(id, "N");
      Assert.AreEqual(id, data.Id);
      Assert.AreEqual("N", data.Name);
    }
    
    [Test]
    public ConditionalExpressions() : void
    {
      def f = ToExpression(fun () { if (true) false else true });
      Assert.AreEqual(false, f.Compile()());
    
      def f = ToExpression(fun (x : string) { if (x.Length < 5) -1 else 1 });
      def f = f.Compile();
      Assert.AreEqual(-1, f(""));
      Assert.AreEqual(-1, f("123"));
      Assert.AreEqual( 1, f("12345"));
      Assert.AreEqual( 1, f("1234567"));

      def f1 = ToExpression(fun (x) { if (x < 0) -1 else if (x > 0) 1 else 0 });
      def f2 = f1.Compile();
      _ =  f2(-30);
      Assert.AreEqual(-1, f2(-30));
      Assert.AreEqual(-1, f2(-1));
      Assert.AreEqual(0, f2(0));
      Assert.AreEqual(0, f2(-0));
      Assert.AreEqual(1, f2(30));
    }
    
    [Test]
    public LambdaWithParamsExpressions() : void
    {
      def f = ToExpression(fun (x,y) { (x + y * 2).ToString() });
      def f = f.Compile();
      Assert.AreEqual("7", f(1, 3));
      Assert.AreEqual("5", f(-1, 3));

      def f = ToExpression(fun (x : int) { System.Convert.ToBoolean(x) });
      def f = f.Compile();
      Assert.IsTrue(f(1));
      Assert.IsTrue(f(0xFFFFFFF));
      Assert.IsFalse(f(0));

      def f = ToExpression(fun (x : int) { -x });
      def f = f.Compile();
      foreach (i in [1,-22,333,-444,555,-666,777,-888,999])
        Assert.AreEqual(-i, f(i));

      def f = ToExpression(fun (x) { x < 5 });
      def f = f.Compile();
      Assert.IsTrue(f(1));
      Assert.IsTrue(f(-1));
      Assert.IsFalse(f(7));

      def f = ToExpression(fun (x : string) { x.Length < 5 });
      def f = f.Compile();
      Assert.IsTrue(f("1"));
      Assert.IsTrue(f("123"));
      Assert.IsFalse(f("12345"));
      Assert.IsFalse(f("1234567"));

      def f = ToExpression((x,y) => (x+y*2).ToString());
      def f = f.Compile();
      Assert.AreEqual("7", f(1,3));
      Assert.AreEqual("5", f(-1,3));

      def f = ToExpression(x : int => System.Convert.ToBoolean(x));
      def f = f.Compile();
      Assert.IsTrue(f(1));
      Assert.IsTrue(f(0xFFFFFFF));
      Assert.IsFalse(f(0));

      def f = ToExpression(x : int => -x);
      def f = f.Compile();
      foreach (i in [1,-22,333,-444,555,-666,777,-888,999])
        Assert.AreEqual(-i, f(i));

      def f = ToExpression(x => x < 5);
      def f = f.Compile();
      Assert.IsTrue(f(1));
      Assert.IsTrue(f(-1));
      Assert.IsFalse(f(7));

      def f = ToExpression(x : string => x.Length < 5);
      def f = f.Compile();
      Assert.IsTrue(f("1"));
      Assert.IsTrue(f("123"));
      Assert.IsFalse(f("12345"));
      Assert.IsFalse(f("1234567"));

      def f = ToExpression(x : string => x.Length < 5);
      def f = f.Compile();
      Assert.IsTrue(f("1"));
      Assert.IsTrue(f("123"));
      Assert.IsFalse(f("12345"));
      Assert.IsFalse(f("1234567"));

      //def f = ToExpression(_ < 5);
      //def f = f.Compile();
      //Assert.IsTrue(f(1));
      //Assert.IsTrue(f(-1));
      //Assert.IsFalse(f(7));
    }
    
    [Test]
    public ArraysExpressions() : void
    {
      def f = ToExpression(fun () { array[0 + 1, 1 * 2, (4 + 5) / 3, System.Math.Abs(-4), 5.0 :> int] });
      def f = f.Compile();
      Assert.AreEqual([1, 2, 3, 4, 5], NList.FromArray(f()));
      
      //def f  = ToExpression(fun () { array(6) });
      //def f = f.Compile();
      //def ary = f();
      //_ = ary[0] + "";
      //foreach (x in ary)
      //  Assert.IsNull(x);
      
      //def f = ToExpression(fun () { array[User("Иван", "Петров", 32), User("Василий", "Теркин", 89)] });
      //def f = f.Compile();
      //Assert.AreEqual([User("Иван", "Петров", 32), User("Василий", "Теркин", 89)], 
      //  NList.FromArray(f()));

      //def f = ToExpression(fun () { array[1,2,3,4,5] });
      //def f = f.Compile();
      //Assert.AreEqual([1,2,3,4,5], NList.FromArray(f()));

      //mutable x = 2;
      //def f = ToExpression(fun () { array[1,x,3,4,5] });
      //def f = f.Compile();
      //Assert.AreEqual([1,2,3,4,5], NList.FromArray(f()));

      //x = 22;
      //def f = () => 3;
      //def f = ToExpression(fun () { array[1,x,f(),4,5] });
      //def f = f.Compile();
      //Assert.AreEqual([1,22,3,4,5], NList.FromArray(f()));
      
      //def arr = array[1, 2, 3];
      //def f = ToExpression(fun () { arr[1] });
      //def f = f.Compile();
      //Assert.AreEqual(2, f());
    }
    
    
    [Test]
    public Queryable01() : void
    {
      def x = [User("Jack", "Jackson", 22), 
               User("Ivan", "Ivanov", 33), 
               User("Lee", "Wu", 44)];
      def x = x.AsQueryable()
          .Where(x => x.Age > 25)
          .OrderByDescending(x => x.Age);
      Assert.IsTrue((x : object) is IOrderedQueryable[User]);
      def x = x.ToArray();
      Assert.AreEqual(2, x.Length);
      Assert.AreEqual(User("Lee", "Wu", 44), x[0]);
      Assert.AreEqual(User("Ivan", "Ivanov", 33), x[1]);
    }

    [Test]
    public Queryable02() : void
    {
      def x = [User("Jack", "Jackson", 22), 
               User("Ivan", "Ivanov", 33), 
               User("Lee", "Wu", 44)];
      def x = x.AsQueryable()
          .Where(x => x.Age > 25).OrderByDescending(x => x.Age);
      Assert.IsTrue((x : object) is IOrderedQueryable[User]);
      def x = x.ToArray();
      Assert.AreEqual(2, x.Length);
      Assert.AreEqual(User("Lee", "Wu", 44), x[0]);
      Assert.AreEqual(User("Ivan", "Ivanov", 33), x[1]);
    }
    
    Users : list[User] = 
      [User("Jack", "Jackson", 22, [Address("Lenin", 22), Address("Berengov", 4)]), 
      User("Ivan", "Ivanov", 33, []), 
      User("Vlad", "D2", 44, [Address("Amundsen", 15), Address("Berengov", 4)])];
    
    [Test]
    public Queryable03() : void
    {
      def x = 
      //_ = 
      Users.AsQueryable()
          .SelectMany(u => u.Address, (u, a) => (u.FirstName, a.Street, a.House));
      Assert.IsTrue((x : object) is IQueryable[string * string * int]);
      def x = x.ToArray();
      Assert.AreEqual(4, x.Length);
      Assert.AreEqual(("Jack", "Lenin",    22), x[0]);
      Assert.AreEqual(("Jack", "Berengov",  4), x[1]);
      Assert.AreEqual(("Vlad", "Amundsen", 15), x[2]);
      Assert.AreEqual(("Vlad", "Berengov",  4), x[3]);
    }
    
    [Test]
    public Queryable04() : void
    {
      def x3 = Users.AsQueryable()
        .SelectMany(u1 => u1.Address, (u2, a2) => (u2, a2))
        .OrderByDescending(fun((_, a3)) { a3.Street })
        .ThenByDescending(fun((u, _)) { u.FirstName })
        .Select(fun((u4, a4)) { (u4.FirstName, a4.Street, a4.House) })
      ;
      Assert.IsTrue((x3 : object) is IQueryable[string * string * int]);
      def x = x3.ToArray();
      Assert.AreEqual(4, x.Length);
      Assert.AreEqual(("Jack", "Lenin",    22), x[0]);
      Assert.AreEqual(("Vlad", "Berengov",  4), x[1]);
      Assert.AreEqual(("Jack", "Berengov",  4), x[2]);
      Assert.AreEqual(("Vlad", "Amundsen", 15), x[3]);
    }
    
    [Test]
    public Queryable05() : void
    {
      def x3 = Users.AsQueryable()
        .Select(u => (u, /*cnt = */ u.Address.Count())) // let
        .Where(fun ((_, cnt)) { cnt != 0 })
        .Select(fun ((u, cnt)) { (u.FirstName, cnt) })
      ;
      Assert.IsTrue((x3 : object) is IQueryable[string * int]);
      def x = x3.ToArray();
      Assert.AreEqual(2, x.Length);
      Assert.AreEqual(("Jack", 2), x[0]);
      Assert.AreEqual(("Vlad", 2), x[1]);
    }    

    [Test]
    public Queryable06() : void
    {
      def x = customers
        .Select(c => c.Orders.Count())
      ;
      Assert.IsTrue((x : object) is IQueryable[int]);
    }    
    
    [Test]
    public Queryable07() : void
    {
      def xs = [(("1", 2L), 1.2)].AsQueryable();
      def x = xs.Select(fun(((s, _), d)){ (s, d) });
      Assert.IsTrue((x : object) is IQueryable[string * double]);
    }

    [Test]
    public QueryableNorthWind01() : void
    {
      def x3 = customers.Where(c => c.City == "London");
      Assert.IsTrue((x3 : object) is IQueryable[Customer]);
      def x = x3.ToArray();
      Assert.AreEqual(1, x.Length);
      Assert.AreEqual(Customer(1, "Jack", "UK",     "London"), x[0]);
    }

    [Test]
    public QueryableNorthWind02() : void
    {
      def x3 = customers
                .Where(c => c.Country == "Russia")
                .SelectMany(c => c.Orders, (c,o) => (c.Name, o.OrderID))
      ;
      Assert.IsTrue((x3 : object) is IQueryable[string * int]);
      def x = x3.ToArray();
      Assert.AreEqual(3, x.Length);
      Assert.AreEqual(("Ivan", 32), x[0]);
      Assert.AreEqual(("Ivan", 38), x[1]);
      Assert.AreEqual(("Vlad", 36), x[2]);
    }
    
    [Test]
    public QueryableNorthWind03() : void
    {
      def x3 = customers
        .SelectMany(c => c.Orders, fun(c,o) { (c,o) })
        .OrderByDescending(fun((c,o)) { o.Total })
        .Select(fun((c,o)) { (c.Name, o.OrderID) })

      ;
      Assert.IsTrue((x3 : object) is IQueryable[string * int]);
      def x = x3.ToArray();
      Assert.AreEqual(_orders.Length, x.Length);
      def orderID = Enumerable.First(_orders.OrderByDescending(o => o.Total)).OrderID;
      Assert.AreEqual(orderID, x[0][1]);
    }
    
    [Test]
    public QueryableNorthWind04() : void
    {
      def x3 = orders
        //.Select(fun(o) { (o, /* t = */ o.Details.Sum(fun(d) { d.UnitPrice * d.Quantity })) }) // let t = ...
        .Select(o => (o, /* t = */ o.Details.Sum(d => d.UnitPrice * (d.Quantity :> double)))) // let t = ...
        .Where(fun((_o, t)) { t >= 10.0 })
        .Select(fun((o, t)) { (o.OrderID, /* Total = */ t) })
      ; 

      Assert.IsTrue((x3 : object) is IQueryable[int * double]);
      def x = x3.ToArray();
      Assert.AreEqual(x.Length, 5);
      def (id, sum) = x[0];
      Assert.AreEqual(id, 31);
      Assert.AreEqual(Math.Round(sum, 2), 13.67);
    }

    [Test]
    public QueryableNorthWind05() : void
    {
      def res = customers.Join(orders, c => c.CustomerID, o => o.CustomerID,
	      (c, o) => (c.Name, o.OrderDate, o.Total) );
        
      Assert.IsTrue((res : object) is IQueryable[string * DateTime * double]);
      def x = res.ToArray();
      Assert.AreEqual(x.Length, _orders.Length);
    }

    [Test]
    public QueryableNorthWind07() : void
    {
      def x3 = customers//(customers : System.Collections.Generic.IEnumerable[Customer])
        .GroupJoin(orders, c => c.CustomerID, o => o.CustomerID,
	      (c, co) => (c, co) )
	      .Select(fun((c, co)) { ((c, co), /*n =*/ co.Count()) })
	      .Where(fun((_, n)) { n >= 3 })
	      .Select(fun(((c, _co), n)) { (c.Name, /*OrderCount =*/ n) })
	      ;
        
      Assert.IsTrue((x3 : object) is IQueryable[string * int]);
      def x = x3.ToArray();
      Assert.AreEqual(x.Length, 1);
      Assert.AreEqual(x[0], ("Jack", 4));
    }

    [Test]
    public QueryableNorthWind08() : void
    {
      def x3 = customers
        .Join(orders, c => c.CustomerID, o => o.CustomerID, (c, o) => (c, o))
        .Join(details, ((c, o)) => o.OrderID, d => d.OrderID, ((c, o), d) => ((c, o), d))
        .Join(products, (((c, o), d)) => d.ProductID, p => p.ProductID, 
                        (((c, o), d), p) => (((c, o), d), p))
        .Select(((((c, o), d), p)) => (c.Name, o.OrderDate, p.ProductName))
	      ;
        
      Assert.IsTrue((x3 : object) is IQueryable[string * DateTime * string]);
      def x = x3.ToArray();
      Assert.AreEqual(x.Length, 22);
      Assert.AreEqual(x[0][0], "Jack");
    }
    public enum TestEnum { | Foo | Bar}
    public class TestingClass
    {
      public T : int;
      public Items : System.Collections.Generic.IDictionary[TestEnum,string]  = System.Collections.Generic.Dictionary.[TestEnum,string]();
      public TestEnum : TestEnum { get { TestEnum.Bar}}
      public mutable TestEnumField : TestEnum;
     
      public test() : int
      {
        def t = [TestingClass()].AsQueryable() : IQueryable[TestingClass];
        _ = t.Select(t => t.T);
       T
      }
    }

    [Test]
    public QueryableIQueryable1() : void
    {
      _ = TestingClass().test();
    }
    
    [Test]
    public QueryableIQueryable2() : void
    {
      _ = linq <# from c in ([TestingClass()].AsQueryable() : IQueryable[object]) select (c.ToString()) #>;
    }

    [Test]
    public TestXxx() : void
    {
      def xs = [(1,1,"aaa"), (2,2,"aaa")];
      def xs = xs.AsQueryable();
      def res = linq <# from p in xs select p[0] #>.NToList();
      Assert.AreEqual([1, 2], res);
    }
    
   [Test]
    public ListIndexer() : void
    {
      def testingClass1 = TestingClass();
      testingClass1.Items[TestEnum.Bar] = "bar";
      def items = System.Collections.Generic.List();
      items.Add(testingClass1);
      
      def queryable = items.AsQueryable();
      def res = linq <# from p in queryable where p.Items[TestEnum.Bar] == "bar" select p #>.NToList();
     
      Assert.AreEqual(testingClass1,  res.Head);
     
    }
    [Test]
    public EnumTester() : void
    {
      def testingClass1 = TestingClass();
      def testingClass2 = TestingClass();
      def items = System.Collections.Generic.List();
      items.Add(testingClass1);
      items.Add(testingClass2);
      def queryable = items.AsQueryable();
      def res = linq <# from p in queryable where p.TestEnum == TestEnum.Bar select p #>.NToList();
     
      Assert.AreEqual(testingClass1,  res.Head);
      def res = linq <# from p in queryable where p.TestEnumField == TestEnum.Foo select p #>.NToList();
     
      Assert.AreEqual(testingClass1,  res.Head);
    }

    [Test]
    public SelectIntoTest() : void
    {
      def xs = [1, 2];
      def res = linq <# from x in xs select array[x, x + 1] into ys
                        from y in ys select y #>.NToList();
      Assert.AreEqual([1, 2, 2, 3],  res);

      def xs = [2, 3];

      def r = linq <# from x in xs select [x, x * x] into ys
                      from y in ys select y #>;
      Assert.AreEqual($"..$r", "2, 4, 3, 9");
    
      def r = linq <# from x in xs select [x, x * x] into ys
                      from y in ys select (ys, $"'$y'") #>;
      Assert.AreEqual($"..$r", "([2, 4], '2'), ([2, 4], '4'), ([3, 9], '3'), ([3, 9], '9')");
    
      def r = linq <# from x in xs select [x, x * x] into ys
                      from y in ys select $"'$y'" #>;
      Assert.AreEqual($"..$r", "'2', '4', '3', '9'");

      def r = linq <# from x in xs select [x, x * x] into ys
                      from y in ys.ToString() select $"'$y'" #>;
      Assert.AreEqual($"..$r", "'[', '2', ',', ' ', '4', ']', '[', '3', ',', ' ', '9', ']'");
    }

    static Exex[R](e : Expression[Func[R]]) : R { e.Compile()() }
    
    [Test]
    public NullableCastTests() : void
    {
      def e : int? = 42;
      Assert.AreEqual(Exex(() => e :> int), 42);

      def f : double? = double.MaxValue;
      Assert.AreEqual(Exex(() => unchecked(f :> int)), -2147483648);

      def f : double? = null;
      Assert.IsFalse(Exex(() => unchecked(f :> int?)).HasValue);

      def f : double? = 42.12345;
      Assert.AreEqual(Exex(() => unchecked(f :> int?)), 42 : int?);
    }
  }
}
