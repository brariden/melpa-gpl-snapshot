using System;
using System.Collections.Generic;

module Negative
{
  Test() : void
  {
    _ = typeof(Dictionary[int, _]); // E: to create open generic type, all arguments must be open `_'
    _ = typeof(int*_); // E: to create open generic type, all arguments must be open `_'
    _ = typeof(_ -> int); // E: to create open generic type, all arguments must be open `_'
    _ = typeof(IDictionary[int, _]); // E: to create open generic type, all arguments must be open `_'
    _ = typeof(List[Dictionary[int, _]]); // E:  unexpected use of unbound generic name
    _ = typeof(array[Dictionary[int, _]]); // E:  unexpected use of unbound generic name
    _ = typeof(IList[Dictionary[_,_]]); // E:  unexpected use of unbound generic name
    _ = typeof(array[_]); //E: the non-generic type `System.Array' cannot be used with type arguments
    _ = typeof (array[List[_]]) // E:  unexpected use of unbound generic name
  }
}


[Test(typeof(Dictionary[int, _]))] // E: to create open generic type, all arguments must be open `_'
class TypeOfHalfGenericClass { }

[Test(typeof(int*_))] // E: to create open generic type, all arguments must be open `_'
class TypeOfHalfGenericTuple { }

[Test(typeof(_ -> int))] // E: to create open generic type, all arguments must be open `_'
class TypeOfHalfGenericFunc { }

[Test(typeof(IDictionary[int, _]))] //E : to create open generic type, all arguments must be open `_'
class TypeOfHalfGenericIDictionary { }

[Test(typeof(List[Dictionary[int, _]]))] //E : unexpected use of unbound generic name
class TypeOfHalfGenericDictionaryList { }

[Test(typeof(IList[Dictionary[_,_]]))] //E : unexpected use of unbound generic name
class TypeOfGenericDictionaryIList { }

[Test(typeof(array[_]))] //E: the non-generic type `System.Array' cannot be used with type arguments
class TypeOfGenericArray { }

[Record]
class TestAttribute : Attribute
{
  public Type : Type; 
}