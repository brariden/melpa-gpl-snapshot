using Nemerle.Collections;
using System;
using System.Collections.Generic;

module Program
{
  Main() : void
  {
    PrintTypeString(typeof(array[List[int]]));
    PrintTypeString(typeof(Object));
    PrintTypeString(typeof(List[string]));
    PrintTypeString(typeof(List[_]));
    PrintTypeString(typeof(array[int]));
    PrintTypeString(typeof(int*string));
    PrintTypeString(typeof(_*_));
    PrintTypeString(typeof(int -> int));
    PrintTypeString(typeof(_ -> _));
    PrintTypeString(typeof(IList[int]));
    PrintTypeString(typeof(IList[_]));
    PrintTypeString(typeof(List[Dictionary[int, int]]));
    PrintTypeString(typeof(void));
    
    PrintClassNameAndTestAttributeValue.[TypeOfObject]();
    PrintClassNameAndTestAttributeValue.[TypeOfStringList]();
    PrintClassNameAndTestAttributeValue.[TypeOfGenericList]();
    PrintClassNameAndTestAttributeValue.[TypeOfIntArray]();
    PrintClassNameAndTestAttributeValue.[TypeOfIntStringTuple]();
    PrintClassNameAndTestAttributeValue.[TypeOfGenericTuple]();
    PrintClassNameAndTestAttributeValue.[TypeOfIntToIntFunc]();
    PrintClassNameAndTestAttributeValue.[TypeOfGenericFunc]();
    PrintClassNameAndTestAttributeValue.[TypeOfIntIList]();
    PrintClassNameAndTestAttributeValue.[TypeOfGenericIList]();
    PrintClassNameAndTestAttributeValue.[TypeOfIntIntDictionaryList]();
    PrintClassNameAndTestAttributeValue.[TypeOfVoid]();
  }

  TypeString(type : Type) : string
  {
    if(type.IsGenericParameter)
      type.GenericParameterPosition.ToString()
    else if(type.IsArray)
    {
      def et = type.GetElementType();
      $"array[$(TypeString(et))]"
    }
    else if(type.IsGenericType)
    {
      def argsStr = string.Join(", ", type.GetGenericArguments().Map(TypeString));
      $"$(type.Name)[$argsStr]"
    }
    else type.Name
  }
  
  PrintClassNameAndTestAttributeValue[T]() : void 
  {
    def classType = typeof(T);
    def attrArgType = classType
      .GetCustomAttributes(false)
      .MapToArrayFiltered(_ is TestAttribute, _ :> TestAttribute)
      .NFirst()
      .Type;
    Console.WriteLine($"$(classType.Name) - $(TypeString(attrArgType))");
  } 
  
  PrintTypeString(type : Type) : void
  {
    Console.WriteLine(TypeString(type))
  }
}

[Test(typeof(Object))]
class TypeOfObject { }

[Test(typeof(List[string]))]
class TypeOfStringList { }

[Test(typeof(List[_]))]
class TypeOfGenericList { }

[Test(typeof(array[int]))]
class TypeOfIntArray { }


[Test(typeof(int*string))]
class TypeOfIntStringTuple { }

[Test(typeof(_*_))]
class TypeOfGenericTuple { }

[Test(typeof(int -> int))]
class TypeOfIntToIntFunc { }

[Test(typeof(_ -> _))]
class TypeOfGenericFunc { }

[Test(typeof(IList[int]))]
class TypeOfIntIList { }

[Test(typeof(IList[_]))]
class TypeOfGenericIList { }

[Test(typeof(List[Dictionary[int, int]]))]
class TypeOfIntIntDictionaryList { }

[Test(typeof(void))]
class TypeOfVoid { }

[Record]
class TestAttribute : Attribute
{
  public Type : Type; 
}

/*
BEGIN-OUTPUT
array[List`1[Int32]]
Object
List`1[String]
List`1[0]
array[Int32]
Tuple`2[Int32, String]
Tuple`2[0, 1]
Function`2[Int32, Int32]
Function`2[0, 1]
IList`1[Int32]
IList`1[0]
List`1[Dictionary`2[Int32, Int32]]
Void
TypeOfObject - Object
TypeOfStringList - List`1[String]
TypeOfGenericList - List`1[0]
TypeOfIntArray - array[Int32]
TypeOfIntStringTuple - Tuple`2[Int32, String]
TypeOfGenericTuple - Tuple`2[0, 1]
TypeOfIntToIntFunc - Function`2[Int32, Int32]
TypeOfGenericFunc - Function`2[0, 1]
TypeOfIntIList - IList`1[Int32]
TypeOfGenericIList - IList`1[0]
TypeOfIntIntDictionaryList - List`1[Dictionary`2[Int32, Int32]]
TypeOfVoid - Void
END-OUTPUT
*/