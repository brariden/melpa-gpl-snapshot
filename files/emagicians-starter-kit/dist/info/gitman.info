This is gitman.info, produced by makeinfo version 4.8 from gitman.texi.

INFO-DIR-SECTION Development
START-INFO-DIR-ENTRY
* Git Man Pages: (gitman).  Manual pages for Git revision control system
END-INFO-DIR-ENTRY


File: gitman.info,  Node: Top,  Up: (dir)

Git Manual Pages
****************

* Menu:

* git-add::
* git-am::
* git-annotate::
* git-apply::
* git-archimport::
* git-archive::
* git-bisect::
* git-blame::
* git-branch::
* git-bundle::
* git-cat-file::
* git-check-attr::
* git-check-ref-format::
* git-checkout-index::
* git-checkout::
* git-cherry-pick::
* git-cherry::
* git-citool::
* git-clean::
* git-clone::
* git-column::
* git-commit-tree::
* git-commit::
* git-config::
* git-count-objects::
* git-credential-cache--daemon::
* git-credential-cache::
* git-credential-store::
* git-credential::
* git-cvsexportcommit::
* git-cvsimport::
* git-cvsserver::
* git-daemon::
* git-describe::
* git-diff-files::
* git-diff-index::
* git-diff-tree::
* git-diff::
* git-difftool::
* git-fast-export::
* git-fast-import::
* git-fetch-pack::
* git-fetch::
* git-filter-branch::
* git-fmt-merge-msg::
* git-for-each-ref::
* git-format-patch::
* git-fsck-objects::
* git-fsck::
* git-gc::
* git-get-tar-commit-id::
* git-grep::
* git-gui::
* git-hash-object::
* git-help::
* git-http-backend::
* git-http-fetch::
* git-http-push::
* git-imap-send::
* git-index-pack::
* git-init-db::
* git-init::
* git-instaweb::
* git-log::
* git-lost-found::
* git-ls-files::
* git-ls-remote::
* git-ls-tree::
* git-mailinfo::
* git-mailsplit::
* git-merge-base::
* git-merge-file::
* git-merge-index::
* git-merge-one-file::
* git-merge-tree::
* git-merge::
* git-mergetool--lib::
* git-mergetool::
* git-mktag::
* git-mktree::
* git-mv::
* git-name-rev::
* git-notes::
* git-p4::
* git-pack-objects::
* git-pack-redundant::
* git-pack-refs::
* git-parse-remote::
* git-patch-id::
* git-peek-remote::
* git-prune-packed::
* git-prune::
* git-pull::
* git-push::
* git-quiltimport::
* git-read-tree::
* git-rebase::
* git-receive-pack::
* git-reflog::
* git-relink::
* git-remote-ext::
* git-remote-fd::
* git-remote-helpers::
* git-remote-testgit::
* git-remote::
* git-repack::
* git-replace::
* git-repo-config::
* git-request-pull::
* git-rerere::
* git-reset::
* git-rev-list::
* git-rev-parse::
* git-revert::
* git-rm::
* git-send-email::
* git-send-pack::
* git-sh-i18n--envsubst::
* git-sh-i18n::
* git-sh-setup::
* git-shell::
* git-shortlog::
* git-show-branch::
* git-show-index::
* git-show-ref::
* git-show::
* git-stage::
* git-stash::
* git-status::
* git-stripspace::
* git-submodule::
* git-svn::
* git-symbolic-ref::
* git-tag::
* git-tar-tree::
* git-unpack-file::
* git-unpack-objects::
* git-update-index::
* git-update-ref::
* git-update-server-info::
* git-upload-archive::
* git-upload-pack::
* git-var::
* git-verify-pack::
* git-verify-tag::
* git-web--browse::
* git-whatchanged::
* git-write-tree::
* gitk::
* gitweb::
* git::
* gitattributes::
* gitignore::
* gitmodules::
* githooks::
* gitrepository-layout::
* gitweb.conf::
* gitcli::
* gittutorial::
* gittutorial-2::
* gitcvs-migration::
* gitcore-tutorial::
* gitglossary::
* gitdiffcore::
* gitnamespaces::
* gitrevisions::
* gitworkflows::
* gitcredentials::


File: gitman.info,  Node: git-add,  Up: Top

Name
****

git-add — Add file contents to the index



Synopsis
********

     git add [-n] [-v] [-force | -f] [-interactive | -i] [-patch | -p]
               [-edit | -e] [-all | [-update | -u]] [-intent-to-add | -N]
               [-refresh] [-ignore-errors] [-ignore-missing] [-]
               [<filepattern>…]


DESCRIPTION
***********

This command updates the index using the current content found in the
working tree, to prepare the content staged for the next commit.  It
typically adds the current content of existing paths as a whole, but
with some options it can also be used to add content with only part of
the changes made to the working tree files applied, or remove paths
that do not exist in the working tree anymore.

   The "index" holds a snapshot of the content of the working tree, and
it is this snapshot that is taken as the contents of the next commit.
Thus after making any changes to the working directory, and before
running the commit command, you must use the `add' command to add any
new or modified files to the index.

   This command can be performed multiple times before a commit.  It
only adds the content of the specified file(s) at the time the add
command is run; if you want subsequent changes included in the next
commit, then you must run `git add' again to add the new content to the
index.

   The `git status' command can be used to obtain a summary of which
files have changes that are staged for the next commit.

   The `git add' command will not add ignored files by default.  If any
ignored files were explicitly specified on the command line, `git add'
will fail with a list of ignored files.  Ignored files reached by
directory recursion or filename globbing performed by Git (quote your
globs before the shell) will be silently ignored.  The _git add_
command can be used to add ignored files with the `-f' (force) option.

   Please see git-commit(1) for alternative ways to add content to a
commit.



OPTIONS
*******

<filepattern>…
     Files to add content from.  Fileglobs (e.g. `*.c') can be given to
     add all matching files.  Also a leading directory name (e.g. `dir'
     to add `dir/file1' and `dir/file2') can be given to add all files
     in the directory, recursively.

-n
-dry-run
     Don’t actually add the file(s), just show if they exist and/or
     will be ignored.

-v
-verbose
     Be verbose.

-f
-force
     Allow adding otherwise ignored files.

-i
-interactive
     Add modified contents in the working tree interactively to the
     index. Optional path arguments may be supplied to limit operation
     to a subset of the working tree. See “Interactive mode” for
     details.

-p
-patch
     Interactively choose hunks of patch between the index and the work
     tree and add them to the index. This gives the user a chance to
     review the difference before adding modified contents to the index.

     This effectively runs `add --interactive', but bypasses the
     initial command menu and directly jumps to the `patch' subcommand.
     See “Interactive mode” for details.

-e, -edit
     Open the diff vs. the index in an editor and let the user edit it.
     After the editor was closed, adjust the hunk headers and apply
     the patch to the index.

     The intent of this option is to pick and choose lines of the patch
     to apply, or even to modify the contents of lines to be staged.
     This can be quicker and more flexible than using the interactive
     hunk selector.  However, it is easy to confuse oneself and create
     a patch that does not apply to the index. See EDITING PATCHES
     below.

-u
-update
     Only match <filepattern> against already tracked files in the
     index rather than the working tree. That means that it will never
     stage new files, but that it will stage modified new contents of
     tracked files and that it will remove files from the index if the
     corresponding files in the working tree have been removed.

     If no <filepattern> is given, default to "."; in other words,
     update all tracked files in the current directory and its
     subdirectories.

-A
-all
     Like `-u', but match <filepattern> against files in the working
     tree in addition to the index. That means that it will find new
     files as well as staging modified content and removing files that
     are no longer in the working tree.

-N
-intent-to-add
     Record only the fact that the path will be added later. An entry
     for the path is placed in the index with no content. This is
     useful for, among other things, showing the unstaged content of
     such files with `git diff' and committing them with `git commit
     -a'.

-refresh
     Don’t add the file(s), but only refresh their stat() information
     in the index.

-ignore-errors
     If some files could not be added because of errors indexing them,
     do not abort the operation, but continue adding the others. The
     command shall still exit with non-zero status.  The configuration
     variable `add.ignoreErrors' can be set to true to make this the
     default behaviour.

-ignore-missing
     This option can only be used together with -dry-run. By using this
     option the user can check if any of the given files would be
     ignored, no matter if they are already present in the work tree or
     not.

-
     This option can be used to separate command-line options from the
     list of files, (useful when filenames might be mistaken for
     command-line options).


Configuration
*************

The optional configuration variable `core.excludesfile' indicates a
path to a file containing patterns of file names to exclude from
git-add, similar to $GIT_DIR/info/exclude.  Patterns in the exclude
file are used in addition to those in info/exclude.  See
gitrepository-layout(5).



EXAMPLES
********

   * Adds content from all `*.txt' files under `Documentation' directory
     and its subdirectories:

          $ git add Documentation/\*.txt

     Note that the asterisk `*' is quoted from the shell in this
     example; this lets the command include the files from
     subdirectories of `Documentation/' directory.

   * Considers adding content from all git-*.sh scripts:

          $ git add git-*.sh

     Because this example lets the shell expand the asterisk (i.e. you
     are listing the files explicitly), it does not consider
     `subdir/git-foo.sh'.


Interactive mode
****************

When the command enters the interactive mode, it shows the output of
the _status_ subcommand, and then goes into its interactive command
loop.

   The command loop shows the list of subcommands available, and gives
a prompt "What now> ".  In general, when the prompt ends with a single
_>_, you can pick only one of the choices given and type return, like
this:

         *** Commands ***
           1: status       2: update       3: revert       4: add untracked
           5: patch        6: diff         7: quit         8: help
         What now> 1

   You also could say `s' or `sta' or `status' above as long as the
choice is unique.

   The main command loop has 6 subcommands (plus help and quit).

status
     This shows the change between HEAD and index (i.e. what will be
     committed if you say `git commit'), and between index and working
     tree files (i.e. what you could stage further before `git commit'
     using `git add') for each path.  A sample output looks like this:

                        staged     unstaged path
               1:       binary      nothing foo.png
               2:     +403/-35        +1/-1 git-add--interactive.perl

     It shows that foo.png has differences from HEAD (but that is
     binary so line count cannot be shown) and there is no difference
     between indexed copy and the working tree version (if the working
     tree version were also different, _binary_ would have been shown
     in place of _nothing_).  The other file, git-add-interactive.perl,
     has 403 lines added and 35 lines deleted if you commit what is in
     the index, but working tree file has further modifications (one
     addition and one deletion).

update
     This shows the status information and issues an "Update>>" prompt.
     When the prompt ends with double _>>_, you can make more than one
     selection, concatenated with whitespace or comma.  Also you can
     say ranges.  E.g. "2-5 7,9" to choose 2,3,4,5,7,9 from the list.
     If the second number in a range is omitted, all remaining patches
     are taken.  E.g. "7-" to choose 7,8,9 from the list.  You can say
     _*_ to choose everything.

     What you chose are then highlighted with _*_, like this:

                     staged     unstaged path
            1:       binary      nothing foo.png
          * 2:     +403/-35        +1/-1 git-add--interactive.perl

     To remove selection, prefix the input with `-' like this:

          Update>> -2

     After making the selection, answer with an empty line to stage the
     contents of working tree files for selected paths in the index.

revert
     This has a very similar UI to _update_, and the staged information
     for selected paths are reverted to that of the HEAD version.
     Reverting new paths makes them untracked.

add untracked
     This has a very similar UI to _update_ and _revert_, and lets you
     add untracked paths to the index.

patch
     This lets you choose one path out of a _status_ like selection.
     After choosing the path, it presents the diff between the index
     and the working tree file and asks you if you want to stage the
     change of each hunk.  You can select one of the following options
     and type return:

          y - stage this hunk
          n - do not stage this hunk
          q - quit; do not stage this hunk nor any of the remaining ones
          a - stage this hunk and all later hunks in the file
          d - do not stage this hunk nor any of the later hunks in the file
          g - select a hunk to go to
          / - search for a hunk matching the given regex
          j - leave this hunk undecided, see next undecided hunk
          J - leave this hunk undecided, see next hunk
          k - leave this hunk undecided, see previous undecided hunk
          K - leave this hunk undecided, see previous hunk
          s - split the current hunk into smaller hunks
          e - manually edit the current hunk
          ? - print help

     After deciding the fate for all hunks, if there is any hunk that
     was chosen, the index is updated with the selected hunks.

     You can omit having to type return here, by setting the
     configuration variable `interactive.singlekey' to `true'.

diff
     This lets you review what will be committed (i.e. between HEAD and
     index).


EDITING PATCHES
***************

Invoking `git add -e' or selecting `e' from the interactive hunk
selector will open a patch in your editor; after the editor exits, the
result is applied to the index. You are free to make arbitrary changes
to the patch, but note that some changes may have confusing results, or
even result in a patch that cannot be applied.  If you want to abort the
operation entirely (i.e., stage nothing new in the index), simply delete
all lines of the patch. The list below describes some common things you
may see in a patch, and which editing operations make sense on them.

added content
     Added content is represented by lines beginning with "+". You can
     prevent staging any addition lines by deleting them.

removed content
     Removed content is represented by lines beginning with "-". You can
     prevent staging their removal by converting the "-" to a " "
     (space).

modified content
     Modified content is represented by "-" lines (removing the old
     content) followed by "+" lines (adding the replacement content).
     You can prevent staging the modification by converting "-" lines
     to " ", and removing "+" lines. Beware that modifying only half of
     the pair is likely to introduce confusing changes to the index.

   There are also more complex operations that can be performed. But
beware that because the patch is applied only to the index and not the
working tree, the working tree will appear to "undo" the change in the
index.  For example, introducing a new line into the index that is in
neither the HEAD nor the working tree will stage the new line for
commit, but the line will appear to be reverted in the working tree.

   Avoid using these constructs, or do so with extreme caution.

removing untouched content
     Content which does not differ between the index and working tree
     may be shown on context lines, beginning with a " " (space).  You
     can stage context lines for removal by converting the space to a
     "-". The resulting working tree file will appear to re-add the
     content.

modifying existing content
     One can also modify context lines by staging them for removal (by
     converting " " to "-") and adding a "+" line with the new content.
     Similarly, one can modify "+" lines for existing additions or
     modifications. In all cases, the new modification will appear
     reverted in the working tree.

new content
     You may also add new content that does not exist in the patch;
     simply add new lines, each starting with "+". The addition will
     appear reverted in the working tree.

   There are also several operations which should be avoided entirely,
as they will make the patch impossible to apply:

   * adding context (" ") or removal ("-") lines

   * deleting context or removal lines

   * modifying the contents of context or removal lines


SEE ALSO
********

git-status(1) git-rm(1) git-reset(1) git-mv(1) git-commit(1)
git-update-index(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-am,  Up: Top

Name
****

git-am — Apply a series of patches from a mailbox



Synopsis
********

     git am [-signoff] [-keep] [-keep-cr | -no-keep-cr] [-utf8 | -no-utf8]
              [-3way] [-interactive] [-committer-date-is-author-date]
              [-ignore-date] [-ignore-space-change | -ignore-whitespace]
              [-whitespace=<option>] [-C<n>] [-p<n>] [-directory=<dir>]
              [-exclude=<path>] [-include=<path>] [-reject] [-q | -quiet]
              [-scissors | -no-scissors]
              [(<mbox> | <Maildir>)…]
     git am (-continue | -skip | -abort)


DESCRIPTION
***********

Splits mail messages in a mailbox into commit log message, authorship
information and patches, and applies them to the current branch.



OPTIONS
*******

(<mbox>|<Maildir>)…
     The list of mailbox files to read patches from. If you do not
     supply this argument, the command reads from the standard input.
     If you supply directories, they will be treated as Maildirs.

-s
-signoff
     Add a `Signed-off-by:' line to the commit message, using the
     committer identity of yourself.

-k
-keep
     Pass `-k' flag to _git mailinfo_ (see git-mailinfo(1)).

-keep-non-patch
     Pass `-b' flag to _git mailinfo_ (see git-mailinfo(1)).

-keep-cr
-no-keep-cr
     With `--keep-cr', call _git mailsplit_ (see git-mailsplit(1)) with
     the same option, to prevent it from stripping CR at the end of
     lines. `am.keepcr' configuration variable can be used to specify
     the default behaviour.  `--no-keep-cr' is useful to override
     `am.keepcr'.

-c
-scissors
     Remove everything in body before a scissors line (see
     git-mailinfo(1)).

-no-scissors
     Ignore scissors lines (see git-mailinfo(1)).

-q
-quiet
     Be quiet. Only print error messages.

-u
-utf8
     Pass `-u' flag to _git mailinfo_ (see git-mailinfo(1)).  The
     proposed commit log message taken from the e-mail is re-coded into
     UTF-8 encoding (configuration variable `i18n.commitencoding' can
     be used to specify project’s preferred encoding if it is not
     UTF-8).

     This was optional in prior versions of git, but now it is the
     default.   You can use `--no-utf8' to override this.

-no-utf8
     Pass `-n' flag to _git mailinfo_ (see git-mailinfo(1)).

-3
-3way
     When the patch does not apply cleanly, fall back on 3-way merge if
     the patch records the identity of blobs it is supposed to apply to
     and we have those blobs available locally.

-ignore-date
-ignore-space-change
-ignore-whitespace
-whitespace=<option>
-C<n>
-p<n>
-directory=<dir>
-exclude=<path>
-include=<path>
-reject
     These flags are passed to the _git apply_ (see git-apply(1))
     program that applies the patch.

-i
-interactive
     Run interactively.

-committer-date-is-author-date
     By default the command records the date from the e-mail message as
     the commit author date, and uses the time of commit creation as
     the committer date. This allows the user to lie about the
     committer date by using the same value as the author date.

-ignore-date
     By default the command records the date from the e-mail message as
     the commit author date, and uses the time of commit creation as
     the committer date. This allows the user to lie about the author
     date by using the same value as the committer date.

-skip
     Skip the current patch.  This is only meaningful when restarting
     an aborted patch.

-continue
-r
-resolved
     After a patch failure (e.g. attempting to apply conflicting
     patch), the user has applied it by hand and the index file stores
     the result of the application.  Make a commit using the authorship
     and commit log extracted from the e-mail message and the current
     index file, and continue.

-resolvemsg=<msg>
     When a patch failure occurs, <msg> will be printed to the screen
     before exiting.  This overrides the standard message informing you
     to use `--resolved' or `--skip' to handle the failure.  This is
     solely for internal use between _git rebase_ and _git am_.

-abort
     Restore the original branch and abort the patching operation.


DISCUSSION
**********

The commit author name is taken from the "From: " line of the message,
and commit author date is taken from the "Date: " line of the message.
The "Subject: " line is used as the title of the commit, after
stripping common prefix "[PATCH <anything>]".  The "Subject: " line is
supposed to concisely describe what the commit is about in one line of
text.

   "From: " and "Subject: " lines starting the body override the
respective commit author name and title values taken from the headers.

   The commit message is formed by the title taken from the "Subject:
", a blank line and the body of the message up to where the patch
begins.  Excess whitespace at the end of each line is automatically
stripped.

   The patch is expected to be inline, directly following the message.
Any line that is of the form:

   * three-dashes and end-of-line, or

   * a line that begins with "diff -", or

   * a line that begins with "Index: "

   is taken as the beginning of a patch, and the commit log message is
terminated before the first occurrence of such a line.

   When initially invoking `git am', you give it the names of the
mailboxes to process.  Upon seeing the first patch that does not apply,
it aborts in the middle.  You can recover from this in one of two ways:

  1. skip the current patch by re-running the command with the _-skip_
     option.

  2. hand resolve the conflict in the working directory, and update the
     index file to bring it into a state that the patch should have
     produced.  Then run the command with the _-resolved_ option.

   The command refuses to process new mailboxes until the current
operation is finished, so if you decide to start over from scratch, run
`git am --abort' before running the command with mailbox names.

   Before any patches are applied, ORIG_HEAD is set to the tip of the
current branch.  This is useful if you have problems with multiple
commits, like running _git am_ on the wrong branch or an error in the
commits that is more easily fixed by changing the mailbox (e.g.  errors
in the "From:" lines).



SEE ALSO
********

git-apply(1).



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-annotate,  Up: Top

Name
****

git-annotate — Annotate file lines with commit information



Synopsis
********

     git annotate [options] file [revision]


DESCRIPTION
***********

Annotates each line in the given file with information from the commit
which introduced the line. Optionally annotates from a given revision.

   The only difference between this command and git-blame(1) is that
they use slightly different output formats, and this command exists only
for backward compatibility to support existing scripts, and provide a
more familiar command name for people coming from other SCM systems.



OPTIONS
*******

-b
     Show blank SHA-1 for boundary commits.  This can also be
     controlled via the `blame.blankboundary' config option.

-root
     Do not treat root commits as boundaries.  This can also be
     controlled via the `blame.showroot' config option.

-show-stats
     Include additional statistics at the end of blame output.

-L <start>,<end>
     Annotate only the given line range.  <start> and <end> can take
     one of these forms:

        * number

          If <start> or <end> is a number, it specifies an absolute
          line number (lines count from 1).

        * /regex/

          This form will use the first line matching the given POSIX
          regex.  If <end> is a regex, it will search starting at the
          line given by <start>.

        * +offset or -offset

          This is only valid for <end> and will specify a number of
          lines before or after the line given by <start>.

-l
     Show long rev (Default: off).

-t
     Show raw timestamp (Default: off).

-S <revs-file>
     Use revisions from revs-file instead of calling git-rev-list(1).

-reverse
     Walk history forward instead of backward. Instead of showing the
     revision in which a line appeared, this shows the last revision in
     which a line has existed. This requires a range of revision like
     START..END where the path to blame exists in START.

-p
-porcelain
     Show in a format designed for machine consumption.

-line-porcelain
     Show the porcelain format, but output commit information for each
     line, not just the first time a commit is referenced.  Implies
     -porcelain.

-incremental
     Show the result incrementally in a format designed for machine
     consumption.

-encoding=<encoding>
     Specifies the encoding used to output author names and commit
     summaries. Setting it to `none' makes blame output unconverted
     data. For more information see the discussion about encoding in
     the git-log(1) manual page.

-contents <file>
     When <rev> is not specified, the command annotates the changes
     starting backwards from the working tree copy.  This flag makes
     the command pretend as if the working tree copy has the contents
     of the named file (specify `-' to make the command read from the
     standard input).

-date <format>
     The value is one of the following alternatives:
     {relative,local,default,iso,rfc,short}. If -date is not provided,
     the value of the blame.date config variable is used. If the
     blame.date config variable is also not set, the iso format is
     used. For more information, See the discussion of the -date option
     at git-log(1).

-M|<num>|
     Detect moved or copied lines within a file. When a commit moves or
     copies a block of lines (e.g. the original file has A and then B,
     and the commit changes it to B and then A), the traditional
     _blame_ algorithm notices only half of the movement and typically
     blames the lines that were moved up (i.e. B) to the parent and
     assigns blame to the lines that were moved down (i.e. A) to the
     child commit.  With this option, both groups of lines are blamed
     on the parent by running extra passes of inspection.

     <num> is optional but it is the lower bound on the number of
     alphanumeric characters that git must detect as moving/copying
     within a file for it to associate those lines with the parent
     commit. The default value is 20.

-C|<num>|
     In addition to `-M', detect lines moved or copied from other files
     that were modified in the same commit.  This is useful when you
     reorganize your program and move code around across files.  When
     this option is given twice, the command additionally looks for
     copies from other files in the commit that creates the file. When
     this option is given three times, the command additionally looks
     for copies from other files in any commit.

     <num> is optional but it is the lower bound on the number of
     alphanumeric characters that git must detect as moving/copying
     between files for it to associate those lines with the parent
     commit. And the default value is 40. If there are more than one
     `-C' options given, the <num> argument of the last `-C' will take
     effect.

-h
     Show help message.


SEE ALSO
********

git-blame(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-apply,  Up: Top

Name
****

git-apply — Apply a patch to files and/or to the index



Synopsis
********

     git apply [-stat] [-numstat] [-summary] [-check] [-index] [-3way]
               [-apply] [-no-add] [-build-fake-ancestor=<file>] [-R | -reverse]
               [-allow-binary-replacement | -binary] [-reject] [-z]
               [-p<n>] [-C<n>] [-inaccurate-eof] [-recount] [-cached]
               [-ignore-space-change | -ignore-whitespace ]
               [-whitespace=(nowarn|warn|fix|error|error-all)]
               [-exclude=<path>] [-include=<path>] [-directory=<root>]
               [-verbose] [<patch>…]


DESCRIPTION
***********

Reads the supplied diff output (i.e. "a patch") and applies it to files.
With the `--index' option the patch is also applied to the index, and
with the `--cached' option the patch is only applied to the index.
Without these options, the command applies the patch only to files, and
does not require them to be in a git repository.

   This command applies the patch but does not create a commit.  Use
git-am(1) to create commits from patches generated by
git-format-patch(1) and/or received by email.



OPTIONS
*******

<patch>…
     The files to read the patch from.  _-_ can be used to read from
     the standard input.

-stat
     Instead of applying the patch, output diffstat for the input.
     Turns off "apply".

-numstat
     Similar to `--stat', but shows the number of added and deleted
     lines in decimal notation and the pathname without abbreviation,
     to make it more machine friendly.  For binary files, outputs two
     `-' instead of saying `0 0'.  Turns off "apply".

-summary
     Instead of applying the patch, output a condensed summary of
     information obtained from git diff extended headers, such as
     creations, renames and mode changes.  Turns off "apply".

-check
     Instead of applying the patch, see if the patch is applicable to
     the current working tree and/or the index file and detects errors.
     Turns off "apply".

-index
     When `--check' is in effect, or when applying the patch (which is
     the default when none of the options that disables it is in
     effect), make sure the patch is applicable to what the current
     index file records.  If the file to be patched in the working tree
     is not up-to-date, it is flagged as an error.  This flag also
     causes the index file to be updated.

-cached
     Apply a patch without touching the working tree. Instead take the
     cached data, apply the patch, and store the result in the index
     without using the working tree. This implies `--index'.

-3
-3way
     When the patch does not apply cleanly, fall back on 3-way merge if
     the patch records the identity of blobs it is supposed to apply to,
     and we have those blobs available locally, possibly leaving the
     conflict markers in the files in the working tree for the user to
     resolve.  This option implies the `--index' option, and is
     incompatible with the `--reject' and the `--cached' options.

-build-fake-ancestor=<file>
     Newer _git diff_ output has embedded _index information_ for each
     blob to help identify the original version that the patch applies
     to.  When this flag is given, and if the original versions of the
     blobs are available locally, builds a temporary index containing
     those blobs.

     When a pure mode change is encountered (which has no index
     information), the information is read from the current index
     instead.

-R
-reverse
     Apply the patch in reverse.

-reject
     For atomicity, _git apply_ by default fails the whole patch and
     does not touch the working tree when some of the hunks do not
     apply.  This option makes it apply the parts of the patch that are
     applicable, and leave the rejected hunks in corresponding *.rej
     files.

-z
     When `--numstat' has been given, do not munge pathnames, but use a
     NUL-terminated machine-readable format.

     Without this option, each pathname output will have TAB, LF,
     double quotes, and backslash characters replaced with `\t', `\n',
     `\"', and `\\', respectively, and the pathname will be enclosed in
     double quotes if any of those replacements occurred.

-p<n>
     Remove <n> leading slashes from traditional diff paths. The
     default is 1.

-C<n>
     Ensure at least <n> lines of surrounding context match before and
     after each change.  When fewer lines of surrounding context exist
     they all must match.  By default no context is ever ignored.

-unidiff-zero
     By default, _git apply_ expects that the patch being applied is a
     unified diff with at least one line of context.  This provides
     good safety measures, but breaks down when applying a diff
     generated with `--unified=0'. To bypass these checks use
     `--unidiff-zero'.

     Note, for the reasons stated above usage of context-free patches is
     discouraged.

-apply
     If you use any of the options marked "Turns off _apply_" above,
     _git apply_ reads and outputs the requested information without
     actually applying the patch.  Give this flag after those flags to
     also apply the patch.

-no-add
     When applying a patch, ignore additions made by the patch.  This
     can be used to extract the common part between two files by first
     running _diff_ on them and applying the result with this option,
     which would apply the deletion part but not the addition part.

-allow-binary-replacement
-binary
     Historically we did not allow binary patch applied without an
     explicit permission from the user, and this flag was the way to do
     so.  Currently we always allow binary patch application, so this
     is a no-op.

-exclude=<path-pattern>
     Don’t apply changes to files matching the given path pattern.
     This can be useful when importing patchsets, where you want to
     exclude certain files or directories.

-include=<path-pattern>
     Apply changes to files matching the given path pattern. This can
     be useful when importing patchsets, where you want to include
     certain files or directories.

     When `--exclude' and `--include' patterns are used, they are
     examined in the order they appear on the command line, and the
     first match determines if a patch to each path is used.  A patch
     to a path that does not match any include/exclude pattern is used
     by default if there is no include pattern on the command line, and
     ignored if there is any include pattern.

-ignore-space-change
-ignore-whitespace
     When applying a patch, ignore changes in whitespace in context
     lines if necessary.  Context lines will preserve their whitespace,
     and they will not undergo whitespace fixing regardless of the
     value of the `--whitespace' option. New lines will still be fixed,
     though.

-whitespace=<action>
     When applying a patch, detect a new or modified line that has
     whitespace errors.  What are considered whitespace errors is
     controlled by `core.whitespace' configuration.  By default,
     trailing whitespaces (including lines that solely consist of
     whitespaces) and a space character that is immediately followed by
     a tab character inside the initial indent of the line are
     considered whitespace errors.

     By default, the command outputs warning messages but applies the
     patch.  When `git-apply' is used for statistics and not applying a
     patch, it defaults to `nowarn'.

     You can use different `<action>' values to control this behavior:

        * `nowarn' turns off the trailing whitespace warning.

        * `warn' outputs warnings for a few such errors, but applies the
          patch as-is (default).

        * `fix' outputs warnings for a few such errors, and applies the
          patch after fixing them (`strip' is a synonym -- the tool
          used to consider only trailing whitespace characters as
          errors, and the fix involved _stripping_ them, but modern
          gits do more).

        * `error' outputs warnings for a few such errors, and refuses
          to apply the patch.

        * `error-all' is similar to `error' but shows all errors.

-inaccurate-eof
     Under certain circumstances, some versions of _diff_ do not
     correctly detect a missing new-line at the end of the file. As a
     result, patches created by such _diff_ programs do not record
     incomplete lines correctly. This option adds support for applying
     such patches by working around this bug.

-v
-verbose
     Report progress to stderr. By default, only a message about the
     current patch being applied will be printed. This option will cause
     additional information to be reported.

-recount
     Do not trust the line counts in the hunk headers, but infer them
     by inspecting the patch (e.g. after editing the patch without
     adjusting the hunk headers appropriately).

-directory=<root>
     Prepend <root> to all filenames.  If a "-p" argument was also
     passed, it is applied before prepending the new root.

     For example, a patch that talks about updating `a/git-gui.sh' to
     `b/git-gui.sh' can be applied to the file in the working tree
     `modules/git-gui/git-gui.sh' by running `git apply
     --directory=modules/git-gui'.


Configuration
*************

apply.ignorewhitespace
     Set to _change_ if you want changes in whitespace to be ignored by
     default.  Set to one of: no, none, never, false if you want
     changes in whitespace to be significant.

apply.whitespace
     When no `--whitespace' flag is given from the command line, this
     configuration item is used as the default.


Submodules
**********

If the patch contains any changes to submodules then _git apply_ treats
these changes as follows.

   If `--index' is specified (explicitly or implicitly), then the
submodule commits must match the index exactly for the patch to apply.
If any of the submodules are checked-out, then these check-outs are
completely ignored, i.e., they are not required to be up-to-date or
clean and they are not updated.

   If `--index' is not specified, then the submodule commits in the
patch are ignored and only the absence or presence of the corresponding
subdirectory is checked and (if possible) updated.



SEE ALSO
********

git-am(1).



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-archimport,  Up: Top

Name
****

git-archimport — Import an Arch repository into git



Synopsis
********

     git archimport [-h] [-v] [-o] [-a] [-f] [-T] [-D depth] [-t tempdir]
                    <archive/branch>[:<git-branch>] …


DESCRIPTION
***********

Imports a project from one or more Arch repositories. It will follow
branches and repositories within the namespaces defined by the
<archive/branch> parameters supplied. If it cannot find the remote
branch a merge comes from it will just import it as a regular commit.
If it can find it, it will mark it as a merge whenever possible (see
discussion below).

   The script expects you to provide the key roots where it can start
the import from an _initial import_ or _tag_ type of Arch commit. It
will follow and import new branches within the provided roots.

   It expects to be dealing with one project only. If it sees branches
that have different roots, it will refuse to run. In that case, edit
your <archive/branch> parameters to define clearly the scope of the
import.

   _git archimport_ uses `tla' extensively in the background to access
the Arch repository.  Make sure you have a recent version of `tla'
available in the path. `tla' must know about the repositories you pass
to _git archimport_.

   For the initial import, _git archimport_ expects to find itself in
an empty directory. To follow the development of a project that uses
Arch, rerun _git archimport_ with the same parameters as the initial
import to perform incremental imports.

   While _git archimport_ will try to create sensible branch names for
the archives that it imports, it is also possible to specify git branch
names manually.  To do so, write a git branch name after each
<archive/branch> parameter, separated by a colon.  This way, you can
shorten the Arch branch names and convert Arch jargon to git jargon,
for example mapping a "PROJECT-devo-VERSION" branch to "master".

   Associating multiple Arch branches to one git branch is possible; the
result will make the most sense only if no commits are made to the first
branch, after the second branch is created.  Still, this is useful to
convert Arch repositories that had been rotated periodically.



MERGES
******

Patch merge data from Arch is used to mark merges in git as well. git
does not care much about tracking patches, and only considers a merge
when a branch incorporates all the commits since the point they forked.
The end result is that git will have a good idea of how far branches
have diverged. So the import process does lose some patch-trading
metadata.

   Fortunately, when you try and merge branches imported from Arch, git
will find a good merge base, and it has a good chance of identifying
patches that have been traded out-of-sequence between the branches.



OPTIONS
*******

-h
     Display usage.

-v
     Verbose output.

-T
     Many tags. Will create a tag for every commit, reflecting the
     commit name in the Arch repository.

-f
     Use the fast patchset import strategy.  This can be significantly
     faster for large trees, but cannot handle directory renames or
     permissions changes.  The default strategy is slow and safe.

-o
     Use this for compatibility with old-style branch names used by
     earlier versions of _git archimport_.  Old-style branch names were
     category-branch, whereas new-style branch names are
     archive,category-branch-version.  In both cases, names given on
     the command-line will override the automatically-generated ones.

-D <depth>
     Follow merge ancestry and attempt to import trees that have been
     merged from.  Specify a depth greater than 1 if patch logs have
     been pruned.

-a
     Attempt to auto-register archives at
     http://mirrors.sourcecontrol.net (http://mirrors.sourcecontrol.net)
     This is particularly useful with the -D option.

-t <tmpdir>
     Override the default tempdir.

<archive/branch>
     Archive/branch identifier in a format that `tla log' understands.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-archive,  Up: Top

Name
****

git-archive — Create an archive of files from a named tree



Synopsis
********

     git archive [-format=<fmt>] [-list] [-prefix=<prefix>/] [<extra>]
                   [-o | -output=<file>] [-worktree-attributes]
                   [-remote=<repo> [-exec=<git-upload-archive>]] <tree-ish>
                   [<path>…]


DESCRIPTION
***********

Creates an archive of the specified format containing the tree
structure for the named tree, and writes it out to the standard output.
If <prefix> is specified it is prepended to the filenames in the
archive.

   _git archive_ behaves differently when given a tree ID versus when
given a commit ID or tag ID.  In the first case the current time is
used as the modification time of each file in the archive.  In the
latter case the commit time as recorded in the referenced commit object
is used instead.  Additionally the commit ID is stored in a global
extended pax header if the tar format is used; it can be extracted
using _git get-tar-commit-id_. In ZIP files it is stored as a file
comment.



OPTIONS
*******

-format=<fmt>
     Format of the resulting archive: _tar_ or _zip_. If this option is
     not given, and the output file is specified, the format is
     inferred from the filename if possible (e.g. writing to "foo.zip"
     makes the output to be in the zip format). Otherwise the output
     format is `tar'.

-l
-list
     Show all available formats.

-v
-verbose
     Report progress to stderr.

-prefix=<prefix>/
     Prepend <prefix>/ to each filename in the archive.

-o <file>
-output=<file>
     Write the archive to <file> instead of stdout.

-worktree-attributes
     Look for attributes in .gitattributes in working directory too.

<extra>
     This can be any options that the archiver backend understands.
     See next section.

-remote=<repo>
     Instead of making a tar archive from the local repository,
     retrieve a tar archive from a remote repository.

-exec=<git-upload-archive>
     Used with -remote to specify the path to the _git-upload-archive_
     on the remote side.

<tree-ish>
     The tree or commit to produce an archive for.

<path>
     Without an optional path parameter, all files and subdirectories
     of the current working directory are included in the archive.  If
     one or more paths are specified, only these are included.


BACKEND EXTRA OPTIONS
*********************



zip
===

-0
     Store the files instead of deflating them.

-9
     Highest and slowest compression level.  You can specify any number
     from 1 to 9 to adjust compression speed and ratio.


CONFIGURATION
*************

tar.umask
     This variable can be used to restrict the permission bits of tar
     archive entries.  The default is 0002, which turns off the world
     write bit.  The special value "user" indicates that the archiving
     user’s umask will be used instead.  See umask(2) for details.
     If `--remote' is used then only the configuration of the remote
     repository takes effect.

tar.<format>.command
     This variable specifies a shell command through which the tar
     output generated by `git archive' should be piped. The command is
     executed using the shell with the generated tar file on its
     standard input, and should produce the final output on its
     standard output. Any compression-level options will be passed to
     the command (e.g., "-9"). An output file with the same extension
     as `<format>' will be use this format if no other format is given.

     The "tar.gz" and "tgz" formats are defined automatically and
     default to `gzip -cn'. You may override them with custom commands.

tar.<format>.remote
     If true, enable `<format>' for use by remote clients via
     git-upload-archive(1). Defaults to false for user-defined formats,
     but true for the "tar.gz" and "tgz" formats.


ATTRIBUTES
**********

export-ignore
     Files and directories with the attribute export-ignore won’t be
     added to archive files.  See gitattributes(5) for details.

export-subst
     If the attribute export-subst is set for a file then git will
     expand several placeholders when adding this file to an archive.
     See gitattributes(5) for details.

   Note that attributes are by default taken from the `.gitattributes'
files in the tree that is being archived.  If you want to tweak the way
the output is generated after the fact (e.g. you committed without
adding an appropriate export-ignore in its `.gitattributes'), adjust
the checked out `.gitattributes' file as necessary and use
`--worktree-attributes' option.  Alternatively you can keep necessary
attributes that should apply while archiving any tree in your
`$GIT_DIR/info/attributes' file.



EXAMPLES
********

`git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ && tar xf -)'
     Create a tar archive that contains the contents of the latest
     commit on the current branch, and extract it in the
     `/var/tmp/junk' directory.

`git archive --format=tar --prefix=git-1.4.0/ v1.4.0 | gzip >git-1.4.0.tar.gz'
     Create a compressed tarball for v1.4.0 release.

`git archive --format=tar.gz --prefix=git-1.4.0/ v1.4.0 >git-1.4.0.tar.gz'
     Same as above, but using the builtin tar.gz handling.

`git archive --prefix=git-1.4.0/ -o git-1.4.0.tar.gz v1.4.0'
     Same as above, but the format is inferred from the output file.

`git archive --format=tar --prefix=git-1.4.0/ v1.4.0^{tree} | gzip >git-1.4.0.tar.gz'
     Create a compressed tarball for v1.4.0 release, but without a
     global extended pax header.

`git archive --format=zip --prefix=git-docs/ HEAD:Documentation/ > git-1.4.0-docs.zip'
     Put everything in the current head’s Documentation/ directory
     into _git-1.4.0-docs.zip_, with the prefix _git-docs/_.

`git archive -o latest.zip HEAD'
     Create a Zip archive that contains the contents of the latest
     commit on the current branch. Note that the output format is
     inferred by the extension of the output file.

`git config tar.tar.xz.command "xz -c"'
     Configure a "tar.xz" format for making LZMA-compressed tarfiles.
     You can use it specifying `--format=tar.xz', or by creating an
     output file like `-o foo.tar.xz'.


SEE ALSO
********

gitattributes(5)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-bisect,  Up: Top

Name
****

git-bisect — Find by binary search the change that introduced a bug



Synopsis
********

     git bisect <subcommand> <options>


DESCRIPTION
***********

The command takes various subcommands, and different options depending
on the subcommand:

     git bisect help
     git bisect start [--no-checkout] [<bad> [<good>...]] [--] [<paths>...]
     git bisect bad [<rev>]
     git bisect good [<rev>...]
     git bisect skip [(<rev>|<range>)...]
     git bisect reset [<commit>]
     git bisect visualize
     git bisect replay <logfile>
     git bisect log
     git bisect run <cmd>...

   This command uses _git rev-list -bisect_ to help drive the binary
search process to find which change introduced a bug, given an old
"good" commit object name and a later "bad" commit object name.



Getting help
============

Use "git bisect" to get a short usage description, and "git bisect
help" or "git bisect -h" to get a long usage description.



Basic bisect commands: start, bad, good
=======================================

Using the Linux kernel tree as an example, basic use of the bisect
command is as follows:

     $ git bisect start
     $ git bisect bad                 # Current version is bad
     $ git bisect good v2.6.13-rc2    # v2.6.13-rc2 was the last version
                                      # tested that was good

   When you have specified at least one bad and one good version, the
command bisects the revision tree and outputs something similar to the
following:

     Bisecting: 675 revisions left to test after this

   The state in the middle of the set of revisions is then checked out.
You would now compile that kernel and boot it. If the booted kernel
works correctly, you would then issue the following command:

     $ git bisect good                       # this one is good

   The output of this command would be something similar to the
following:

     Bisecting: 337 revisions left to test after this

   You keep repeating this process, compiling the tree, testing it, and
depending on whether it is good or bad issuing the command "git bisect
good" or "git bisect bad" to ask for the next bisection.

   Eventually there will be no more revisions left to bisect, and you
will have been left with the first bad kernel revision in
"refs/bisect/bad".



Bisect reset
============

After a bisect session, to clean up the bisection state and return to
the original HEAD, issue the following command:

     $ git bisect reset

   By default, this will return your tree to the commit that was checked
out before `git bisect start'.  (A new `git bisect start' will also do
that, as it cleans up the old bisection state.)

   With an optional argument, you can return to a different commit
instead:

     $ git bisect reset <commit>

   For example, `git bisect reset HEAD' will leave you on the current
bisection commit and avoid switching commits at all, while `git bisect
reset bisect/bad' will check out the first bad revision.



Bisect visualize
================

To see the currently remaining suspects in _gitk_, issue the following
command during the bisection process:

     $ git bisect visualize

   `view' may also be used as a synonym for `visualize'.

   If the _DISPLAY_ environment variable is not set, _git log_ is used
instead.  You can also give command line options such as `-p' and
`--stat'.

     $ git bisect view --stat


Bisect log and bisect replay
============================

After having marked revisions as good or bad, issue the following
command to show what has been done so far:

     $ git bisect log

   If you discover that you made a mistake in specifying the status of a
revision, you can save the output of this command to a file, edit it to
remove the incorrect entries, and then issue the following commands to
return to a corrected state:

     $ git bisect reset
     $ git bisect replay that-file


Avoiding testing a commit
=========================

If, in the middle of a bisect session, you know that the next suggested
revision is not a good one to test (e.g. the change the commit
introduces is known not to work in your environment and you know it
does not have anything to do with the bug you are chasing), you may
want to find a nearby commit and try that instead.

   For example:

     $ git bisect good/bad                   # previous round was good or bad.
     Bisecting: 337 revisions left to test after this
     $ git bisect visualize                  # oops, that is uninteresting.
     $ git reset --hard HEAD~3               # try 3 revisions before what
                                             # was suggested

   Then compile and test the chosen revision, and afterwards mark the
revision as good or bad in the usual manner.



Bisect skip
===========

Instead of choosing by yourself a nearby commit, you can ask git to do
it for you by issuing the command:

     $ git bisect skip                 # Current version cannot be tested

   But git may eventually be unable to tell the first bad commit among
a bad commit and one or more skipped commits.

   You can even skip a range of commits, instead of just one commit,
using the "_<commit1>_.._<commit2>_" notation. For example:

     $ git bisect skip v2.5..v2.6

   This tells the bisect process that no commit after `v2.5', up to and
including `v2.6', should be tested.

   Note that if you also want to skip the first commit of the range you
would issue the command:

     $ git bisect skip v2.5 v2.5..v2.6

   This tells the bisect process that the commits between `v2.5'
included and `v2.6' included should be skipped.



Cutting down bisection by giving more parameters to bisect start
================================================================

You can further cut down the number of trials, if you know what part of
the tree is involved in the problem you are tracking down, by specifying
path parameters when issuing the `bisect start' command:

     $ git bisect start -- arch/i386 include/asm-i386

   If you know beforehand more than one good commit, you can narrow the
bisect space down by specifying all of the good commits immediately
after the bad commit when issuing the `bisect start' command:

     $ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --
                        # v2.6.20-rc6 is bad
                        # v2.6.20-rc4 and v2.6.20-rc1 are good


Bisect run
==========

If you have a script that can tell if the current source code is good
or bad, you can bisect by issuing the command:

     $ git bisect run my_script arguments

   Note that the script (`my_script' in the above example) should exit
with code 0 if the current source code is good, and exit with a code
between 1 and 127 (inclusive), except 125, if the current source code
is bad.

   Any other exit code will abort the bisect process. It should be noted
that a program that terminates via "exit(-1)" leaves $? = 255, (see the
exit(3) manual page), as the value is chopped with "& 0377".

   The special exit code 125 should be used when the current source code
cannot be tested. If the script exits with this code, the current
revision will be skipped (see `git bisect skip' above). 125 was chosen
as the highest sensible value to use for this purpose, because 126 and
127 are used by POSIX shells to signal specific error status (127 is for
command not found, 126 is for command found but not executable--these
details do not matter, as they are normal errors in the script, as far
as "bisect run" is concerned).

   You may often find that during a bisect session you want to have
temporary modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a
header file, or "revision that does not have this commit needs this
patch applied to work around another problem this bisection is not
interested in") applied to the revision being tested.

   To cope with such a situation, after the inner _git bisect_ finds the
next revision to test, the script can apply the patch before compiling,
run the real test, and afterwards decide if the revision (possibly with
the needed patch) passed the test and then rewind the tree to the
pristine state.  Finally the script should exit with the status of the
real test to let the "git bisect run" command loop determine the
eventual outcome of the bisect session.



OPTIONS
*******

-no-checkout
     Do not checkout the new working tree at each iteration of the
     bisection process. Instead just update a special reference named
     _BISECT_HEAD_ to make it point to the commit that should be tested.

     This option may be useful when the test you would perform in each
     step does not require a checked out tree.

     If the repository is bare, `--no-checkout' is assumed.


EXAMPLES
********

   * Automatically bisect a broken build between v1.2 and HEAD:

          $ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good
          $ git bisect run make                # "make" builds the app

   * Automatically bisect a test failure between origin and HEAD:

          $ git bisect start HEAD origin --    # HEAD is bad, origin is good
          $ git bisect run make test           # "make test" builds and tests

   * Automatically bisect a broken test case:

          $ cat ~/test.sh
          #!/bin/sh
          make || exit 125                     # this skips broken builds
          ~/check_test_case.sh                 # does the test case pass?
          $ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
          $ git bisect run ~/test.sh

     Here we use a "test.sh" custom script. In this script, if "make"
     fails, we skip the current commit.  "check_test_case.sh" should
     "exit 0" if the test case passes, and "exit 1" otherwise.

     It is safer if both "test.sh" and "check_test_case.sh" are outside
     the repository to prevent interactions between the bisect, make
     and test processes and the scripts.

   * Automatically bisect with temporary modifications (hot-fix):

          $ cat ~/test.sh
          #!/bin/sh

          # tweak the working tree by merging the hot-fix branch
          # and then attempt a build
          if      git merge --no-commit hot-fix &&
                  make
          then
                  # run project specific test and report its status
                  ~/check_test_case.sh
                  status=$?
          else
                  # tell the caller this is untestable
                  status=125
          fi

          # undo the tweak to allow clean flipping to the next commit
          git reset --hard

          # return control
          exit $status

     This applies modifications from a hot-fix branch before each test
     run, e.g. in case your build or test environment changed so that
     older revisions may need a fix which newer ones have already.
     (Make sure the hot-fix branch is based off a commit which is
     contained in all revisions which you are bisecting, so that the
     merge does not pull in too much, or use `git cherry-pick' instead
     of `git merge'.)

   * Automatically bisect a broken test case:

          $ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
          $ git bisect run sh -c "make || exit 125; ~/check_test_case.sh"

     This shows that you can do without a run script if you write the
     test on a single line.

   * Locate a good region of the object graph in a damaged repository

          $ git bisect start HEAD <known-good-commit> [ <boundary-commit> ... ] --no-checkout
          $ git bisect run sh -c '
                  GOOD=$(git for-each-ref "--format=%(objectname)" refs/bisect/good-*) &&
                  git rev-list --objects BISECT_HEAD --not $GOOD >tmp.$$ &&
                  git pack-objects --stdout >/dev/null <tmp.$$
                  rc=$?
                  rm -f tmp.$$
                  test $rc = 0'

     In this case, when _git bisect run_ finishes, bisect/bad will
     refer to a commit that has at least one parent whose reachable
     graph is fully traversable in the sense required by _git pack
     objects_.


SEE ALSO
********

Fighting regressions with git bisect (git-bisect-lk2009.html),
git-blame(1).



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-blame,  Up: Top

Name
****

git-blame — Show what revision and author last modified each line of
a file



Synopsis
********

     git blame [-c] [-b] [-l] [-root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [-incremental] [-L n,m]
                 [-S <revs-file>] [-M] [-C] [-C] [-C] [-since=<date>] [-abbrev=<n>]
                 [<rev> | -contents <file> | -reverse <rev>] [-] <file>


DESCRIPTION
***********

Annotates each line in the given file with information from the
revision which last modified the line. Optionally, start annotating
from the given revision.

   The command can also limit the range of lines annotated.

   The report does not tell you anything about lines which have been
deleted or replaced; you need to use a tool such as _git diff_ or the
"pickaxe" interface briefly mentioned in the following paragraph.

   Apart from supporting file annotation, git also supports searching
the development history for when a code snippet occurred in a change.
This makes it possible to track when a code snippet was added to a
file, moved or copied between files, and eventually deleted or
replaced. It works by searching for a text string in the diff. A small
example:

     $ git log --pretty=oneline -S'blame_usage'
     5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S <ancestry-file>
     ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output


OPTIONS
*******

-b
     Show blank SHA-1 for boundary commits.  This can also be
     controlled via the `blame.blankboundary' config option.

-root
     Do not treat root commits as boundaries.  This can also be
     controlled via the `blame.showroot' config option.

-show-stats
     Include additional statistics at the end of blame output.

-L <start>,<end>
     Annotate only the given line range.  <start> and <end> can take
     one of these forms:

        * number

          If <start> or <end> is a number, it specifies an absolute
          line number (lines count from 1).

        * /regex/

          This form will use the first line matching the given POSIX
          regex.  If <end> is a regex, it will search starting at the
          line given by <start>.

        * +offset or -offset

          This is only valid for <end> and will specify a number of
          lines before or after the line given by <start>.

-l
     Show long rev (Default: off).

-t
     Show raw timestamp (Default: off).

-S <revs-file>
     Use revisions from revs-file instead of calling git-rev-list(1).

-reverse
     Walk history forward instead of backward. Instead of showing the
     revision in which a line appeared, this shows the last revision in
     which a line has existed. This requires a range of revision like
     START..END where the path to blame exists in START.

-p
-porcelain
     Show in a format designed for machine consumption.

-line-porcelain
     Show the porcelain format, but output commit information for each
     line, not just the first time a commit is referenced.  Implies
     -porcelain.

-incremental
     Show the result incrementally in a format designed for machine
     consumption.

-encoding=<encoding>
     Specifies the encoding used to output author names and commit
     summaries. Setting it to `none' makes blame output unconverted
     data. For more information see the discussion about encoding in
     the git-log(1) manual page.

-contents <file>
     When <rev> is not specified, the command annotates the changes
     starting backwards from the working tree copy.  This flag makes
     the command pretend as if the working tree copy has the contents
     of the named file (specify `-' to make the command read from the
     standard input).

-date <format>
     The value is one of the following alternatives:
     {relative,local,default,iso,rfc,short}. If -date is not provided,
     the value of the blame.date config variable is used. If the
     blame.date config variable is also not set, the iso format is
     used. For more information, See the discussion of the -date option
     at git-log(1).

-M|<num>|
     Detect moved or copied lines within a file. When a commit moves or
     copies a block of lines (e.g. the original file has A and then B,
     and the commit changes it to B and then A), the traditional
     _blame_ algorithm notices only half of the movement and typically
     blames the lines that were moved up (i.e. B) to the parent and
     assigns blame to the lines that were moved down (i.e. A) to the
     child commit.  With this option, both groups of lines are blamed
     on the parent by running extra passes of inspection.

     <num> is optional but it is the lower bound on the number of
     alphanumeric characters that git must detect as moving/copying
     within a file for it to associate those lines with the parent
     commit. The default value is 20.

-C|<num>|
     In addition to `-M', detect lines moved or copied from other files
     that were modified in the same commit.  This is useful when you
     reorganize your program and move code around across files.  When
     this option is given twice, the command additionally looks for
     copies from other files in the commit that creates the file. When
     this option is given three times, the command additionally looks
     for copies from other files in any commit.

     <num> is optional but it is the lower bound on the number of
     alphanumeric characters that git must detect as moving/copying
     between files for it to associate those lines with the parent
     commit. And the default value is 40. If there are more than one
     `-C' options given, the <num> argument of the last `-C' will take
     effect.

-h
     Show help message.

-c
     Use the same output mode as git-annotate(1) (Default: off).

-score-debug
     Include debugging information related to the movement of lines
     between files (see `-C') and lines moved within a file (see `-M').
     The first number listed is the score.  This is the number of
     alphanumeric characters detected as having been moved between or
     within files.  This must be above a certain threshold for _git
     blame_ to consider those lines of code to have been moved.

-f
-show-name
     Show the filename in the original commit.  By default the filename
     is shown if there is any line that came from a file with a
     different name, due to rename detection.

-n
-show-number
     Show the line number in the original commit (Default: off).

-s
     Suppress the author name and timestamp from the output.

-e
-show-email
     Show the author email instead of author name (Default: off).

-w
     Ignore whitespace when comparing the parent’s version and the
     child’s to find where the lines came from.

-abbrev=<n>
     Instead of using the default 7+1 hexadecimal digits as the
     abbreviated object name, use <n>+1 digits. Note that 1 column is
     used for a caret to mark the boundary commit.


THE PORCELAIN FORMAT
********************

In this format, each line is output after a header; the header at the
minimum has the first line which has:

   * 40-byte SHA-1 of the commit the line is attributed to;

   * the line number of the line in the original file;

   * the line number of the line in the final file;

   * on a line that starts a group of lines from a different commit
     than the previous one, the number of lines in this group.  On
     subsequent lines this field is absent.

   This header line is followed by the following information at least
once for each commit:

   * the author name ("author"), email ("author-mail"), time
     ("author-time"), and timezone ("author-tz"); similarly for
     committer.

   * the filename in the commit that the line is attributed to.

   * the first line of the commit log message ("summary").

   The contents of the actual line is output after the above header,
prefixed by a TAB. This is to allow adding more header elements later.

   The porcelain format generally suppresses commit information that has
already been seen. For example, two lines that are blamed to the same
commit will both be shown, but the details for that commit will be shown
only once. This is more efficient, but may require more state be kept by
the reader. The `--line-porcelain' option can be used to output full
commit information for each line, allowing simpler (but less efficient)
usage like:

     # count the number of lines attributed to each author
     git blame --line-porcelain file |
     sed -n 's/^author //p' |
     sort | uniq -c | sort -rn


SPECIFYING RANGES
*****************

Unlike _git blame_ and _git annotate_ in older versions of git, the
extent of the annotation can be limited to both line ranges and revision
ranges.  When you are interested in finding the origin for lines 40-60
for file `foo', you can use the `-L' option like so (they mean the same
thing — both ask for 21 lines starting at line 40):

     git blame -L 40,60 foo
     git blame -L 40,+21 foo

   Also you can use a regular expression to specify the line range:

     git blame -L '/^sub hello {/,/^}$/' foo

   which limits the annotation to the body of the `hello' subroutine.

   When you are not interested in changes older than version v2.6.18,
or changes older than 3 weeks, you can use revision range specifiers
similar to _git rev-list_:

     git blame v2.6.18.. -- foo
     git blame --since=3.weeks -- foo

   When revision range specifiers are used to limit the annotation,
lines that have not changed since the range boundary (either the commit
v2.6.18 or the most recent commit that is more than 3 weeks old in the
above example) are blamed for that range boundary commit.

   A particularly useful way is to see if an added file has lines
created by copy-and-paste from existing files.  Sometimes this
indicates that the developer was being sloppy and did not refactor the
code properly.  You can first find the commit that introduced the file
with:

     git log --diff-filter=A --pretty=short -- foo

   and then annotate the change between the commit and its parents,
using `commit^!' notation:

     git blame -C -C -f $commit^! -- foo


INCREMENTAL OUTPUT
******************

When called with `--incremental' option, the command outputs the result
as it is built.  The output generally will talk about lines touched by
more recent commits first (i.e. the lines will be annotated out of
order) and is meant to be used by interactive viewers.

   The output format is similar to the Porcelain format, but it does
not contain the actual lines from the file that is being annotated.

  1. Each blame entry always starts with a line of:

          <40-byte hex sha1> <sourceline> <resultline> <num_lines>

     Line numbers count from 1.

  2. The first time that a commit shows up in the stream, it has various
     other information about it printed out with a one-word tag at the
     beginning of each line describing the extra commit information
     (author, email, committer, dates, summary, etc.).

  3. Unlike the Porcelain format, the filename information is always
     given and terminates the entry:

          "filename" <whitespace-quoted-filename-goes-here>

     and thus it is really quite easy to parse for some line- and
     word-oriented parser (which should be quite natural for most
     scripting languages).

          *Note*

          For people who do parsing: to make it more robust, just
          ignore any lines between the first and last one ("<sha1>" and
          "filename" lines) where you do not recognize the tag words
          (or care about that particular one) at the beginning of the
          "extended information" lines. That way, if there is ever
          added information (like the commit encoding or extended
          commit commentary), a blame viewer will not care.


MAPPING AUTHORS
***************

If the file `.mailmap' exists at the toplevel of the repository, or at
the location pointed to by the mailmap.file configuration option, it is
used to map author and committer names and email addresses to canonical
real names and email addresses.

   In the simple form, each line in the file consists of the canonical
real name of an author, whitespace, and an email address used in the
commit (enclosed by _<_ and _>_) to map to the name. For example:

     Proper Name <commit@email.xx>

   The more complex forms are:

     <proper@email.xx> <commit@email.xx>

   which allows mailmap to replace only the email part of a commit, and:

     Proper Name <proper@email.xx> <commit@email.xx>

   which allows mailmap to replace both the name and the email of a
commit matching the specified commit email address, and:

     Proper Name <proper@email.xx> Commit Name <commit@email.xx>

   which allows mailmap to replace both the name and the email of a
commit matching both the specified commit name and email address.

   Example 1: Your history contains commits by two authors, Jane and
Joe, whose names appear in the repository under several forms:

     Joe Developer <joe@example.com>
     Joe R. Developer <joe@example.com>
     Jane Doe <jane@example.com>
     Jane Doe <jane@laptop.(none)>
     Jane D. <jane@desktop.(none)>

   Now suppose that Joe wants his middle name initial used, and Jane
prefers her family name fully spelled out. A proper `.mailmap' file
would look like:

     Jane Doe         <jane@desktop.(none)>
     Joe R. Developer <joe@example.com>

   Note how there is no need for an entry for <jane@laptop
(mailto:jane@laptop).(none)>, because the real name of that author is
already correct.

   Example 2: Your repository contains commits from the following
authors:

     nick1 <bugs@company.xx>
     nick2 <bugs@company.xx>
     nick2 <nick2@company.xx>
     santa <me@company.xx>
     claus <me@company.xx>
     CTO <cto@coompany.xx>

   Then you might want a `.mailmap' file that looks like:

     <cto@company.xx>                       <cto@coompany.xx>
     Some Dude <some@dude.xx>         nick1 <bugs@company.xx>
     Other Author <other@author.xx>   nick2 <bugs@company.xx>
     Other Author <other@author.xx>         <nick2@company.xx>
     Santa Claus <santa.claus@northpole.xx> <me@company.xx>

   Use hash _#_ for comments that are either on their own line, or after
the email address.



SEE ALSO
********

git-annotate(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-branch,  Up: Top

Name
****

git-branch — List, create, or delete branches



Synopsis
********

     git branch [-color[=<when>] | -no-color] [-r | -a]
             [-list] [-v [-abbrev=<length> | -no-abbrev]]
             [-column[=<options>] | -no-column]
             [(-merged | -no-merged | -contains) [<commit>]] [<pattern>…]
     git branch [-set-upstream | -track | -no-track] [-l] [-f] <branchname> [<start-point>]
     git branch (-m | -M) [<oldbranch>] <newbranch>
     git branch (-d | -D) [-r] <branchname>…
     git branch -edit-description [<branchname>]


DESCRIPTION
***********

With no arguments, existing branches are listed and the current branch
will be highlighted with an asterisk.  Option `-r' causes the
remote-tracking branches to be listed, and option `-a' shows both. This
list mode is also activated by the `--list' option (see below).
<pattern> restricts the output to matching branches, the pattern is a
shell wildcard (i.e., matched using fnmatch(3)).  Multiple patterns may
be given; if any of them matches, the branch is shown.

   With `--contains', shows only the branches that contain the named
commit (in other words, the branches whose tip commits are descendants
of the named commit).  With `--merged', only branches merged into the
named commit (i.e. the branches whose tip commits are reachable from
the named commit) will be listed.  With `--no-merged' only branches not
merged into the named commit will be listed.  If the <commit> argument
is missing it defaults to _HEAD_ (i.e. the tip of the current branch).

   The command’s second form creates a new branch head named
<branchname> which points to the current _HEAD_, or <start-point> if
given.

   Note that this will create the new branch, but it will not switch the
working tree to it; use "git checkout <newbranch>" to switch to the new
branch.

   When a local branch is started off a remote-tracking branch, git
sets up the branch so that _git pull_ will appropriately merge from the
remote-tracking branch. This behavior may be changed via the global
`branch.autosetupmerge' configuration flag. That setting can be
overridden by using the `--track' and `--no-track' options, and changed
later using `git branch --set-upstream'.

   With a `-m' or `-M' option, <oldbranch> will be renamed to
<newbranch>.  If <oldbranch> had a corresponding reflog, it is renamed
to match <newbranch>, and a reflog entry is created to remember the
branch renaming. If <newbranch> exists, -M must be used to force the
rename to happen.

   With a `-d' or `-D' option, `<branchname>' will be deleted.  You may
specify more than one branch for deletion.  If the branch currently has
a reflog then the reflog will also be deleted.

   Use `-r' together with `-d' to delete remote-tracking branches.
Note, that it only makes sense to delete remote-tracking branches if
they no longer exist in the remote repository or if _git fetch_ was
configured not to fetch them again. See also the _prune_ subcommand of
git-remote(1) for a way to clean up all obsolete remote-tracking
branches.



OPTIONS
*******

-d
-delete
     Delete a branch. The branch must be fully merged in its upstream
     branch, or in `HEAD' if no upstream was set with `--track' or
     `--set-upstream'.

-D
     Delete a branch irrespective of its merged status.

-l
-create-reflog
     Create the branch’s reflog.  This activates recording of all
     changes made to the branch ref, enabling use of date based sha1
     expressions such as "<branchname>@{yesterday}".  Note that in
     non-bare repositories, reflogs are usually enabled by default by
     the `core.logallrefupdates' config option.

-f
-force
     Reset <branchname> to <startpoint> if <branchname> exists already.
     Without `-f' _git branch_ refuses to change an existing branch.

-m
-move
     Move/rename a branch and the corresponding reflog.

-M
     Move/rename a branch even if the new branch name already exists.

-color[=<when>]
     Color branches to highlight current, local, and remote-tracking
     branches.  The value must be always (the default), never, or auto.

-no-color
     Turn off branch colors, even when the configuration file gives the
     default to color output.  Same as `--color=never'.

-column[=<options>]
-no-column
     Display branch listing in columns. See configuration variable
     column.branch for option syntax.`--column' and `--no-column'
     without options are equivalent to _always_ and _never_
     respectively.

     This option is only applicable in non-verbose mode.

-r
-remotes
     List or delete (if used with -d) the remote-tracking branches.

-a
-all
     List both remote-tracking branches and local branches.

-list
     Activate the list mode. `git branch <pattern>' would try to create
     a branch, use `git branch --list <pattern>' to list matching
     branches.

-v
-verbose
     When in list mode, show sha1 and commit subject line for each
     head, along with relationship to upstream branch (if any). If
     given twice, print the name of the upstream branch, as well.

-q
-quiet
     Be more quiet when creating or deleting a branch, suppressing
     non-error messages.

-abbrev=<length>
     Alter the sha1’s minimum display length in the output listing.
     The default value is 7 and can be overridden by the `core.abbrev'
     config option.

-no-abbrev
     Display the full sha1s in the output listing rather than
     abbreviating them.

-t
-track
     When creating a new branch, set up configuration to mark the
     start-point branch as "upstream" from the new branch. This
     configuration will tell git to show the relationship between the
     two branches in `git status' and `git branch -v'. Furthermore, it
     directs `git pull' without arguments to pull from the upstream
     when the new branch is checked out.

     This behavior is the default when the start point is a
     remote-tracking branch.  Set the branch.autosetupmerge
     configuration variable to `false' if you want `git checkout' and
     `git branch' to always behave as if _-no-track_ were given. Set it
     to `always' if you want this behavior when the start-point is
     either a local or remote-tracking branch.

-no-track
     Do not set up "upstream" configuration, even if the
     branch.autosetupmerge configuration variable is true.

-set-upstream
     If specified branch does not exist yet or if `--force' has been
     given, acts exactly like `--track'. Otherwise sets up configuration
     like `--track' would when creating the branch, except that where
     branch points to is not changed.

-edit-description
     Open an editor and edit the text to explain what the branch is
     for, to be used by various other commands (e.g. `request-pull').

-contains [<commit>]
     Only list branches which contain the specified commit (HEAD if not
     specified).

-merged [<commit>]
     Only list branches whose tips are reachable from the specified
     commit (HEAD if not specified).

-no-merged [<commit>]
     Only list branches whose tips are not reachable from the specified
     commit (HEAD if not specified).

<branchname>
     The name of the branch to create or delete.  The new branch name
     must pass all checks defined by git-check-ref-format(1).  Some of
     these checks may restrict the characters allowed in a branch name.

<start-point>
     The new branch head will point to this commit.  It may be given as
     a branch name, a commit-id, or a tag.  If this option is omitted,
     the current HEAD will be used instead.

<oldbranch>
     The name of an existing branch to rename.

<newbranch>
     The new name for an existing branch. The same restrictions as for
     <branchname> apply.


Examples
********

Start development from a known tag
          $ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6
          $ cd my2.6
          $ git branch my2.6.14 v2.6.14   (1)
          $ git checkout my2.6.14

    *note (1): CO1-1.
          This step and the next one could be combined into a single
          step with "checkout -b my2.6.14 v2.6.14".

Delete an unneeded branch
          $ git clone git://git.kernel.org/.../git.git my.git
          $ cd my.git
          $ git branch -d -r origin/todo origin/html origin/man   (1)
          $ git branch -D test                                    (2)

    *note (1): CO2-1.
          Delete the remote-tracking branches "todo", "html" and "man".
          The next _fetch_ or _pull_ will create them again unless you
          configure them not to.  See git-fetch(1).

    *note (2): CO2-2.
          Delete the "test" branch even if the "master" branch (or
          whichever branch is currently checked out) does not have all
          commits from the test branch.


Notes
*****

If you are creating a branch that you want to checkout immediately, it
is easier to use the git checkout command with its `-b' option to create
a branch and check it out with a single command.

   The options `--contains', `--merged' and `--no-merged' serve three
related but different purposes:

   * `--contains <commit>' is used to find all branches which will need
     special attention if <commit> were to be rebased or amended, since
     those branches contain the specified <commit>.

   * `--merged' is used to find all branches which can be safely
     deleted, since those branches are fully contained by HEAD.

   * `--no-merged' is used to find branches which are candidates for
     merging into HEAD, since those branches are not fully contained by
     HEAD.


SEE ALSO
********

git-check-ref-format(1), git-fetch(1), git-remote(1), “Understanding
history: What is a branch?” (user-manual.html#what-is-a-branch) in
the Git User’s Manual.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-bundle,  Up: Top

Name
****

git-bundle — Move objects and refs by archive



Synopsis
********

     git bundle create <file> <git-rev-list-args>
     git bundle verify <file>
     git bundle list-heads <file> [<refname>…]
     git bundle unbundle <file> [<refname>…]


DESCRIPTION
***********

Some workflows require that one or more branches of development on one
machine be replicated on another machine, but the two machines cannot
be directly connected, and therefore the interactive git protocols (git,
ssh, rsync, http) cannot be used.  This command provides support for
_git fetch_ and _git pull_ to operate by packaging objects and
references in an archive at the originating machine, then importing
those into another repository using _git fetch_ and _git pull_ after
moving the archive by some means (e.g., by sneakernet).  As no direct
connection between the repositories exists, the user must specify a
basis for the bundle that is held by the destination repository: the
bundle assumes that all objects in the basis are already in the
destination repository.



OPTIONS
*******

create <file>
     Used to create a bundle named _file_.  This requires the
     _git-rev-list-args_ arguments to define the bundle contents.

verify <file>
     Used to check that a bundle file is valid and will apply cleanly
     to the current repository.  This includes checks on the bundle
     format itself as well as checking that the prerequisite commits
     exist and are fully linked in the current repository.  _git
     bundle_ prints a list of missing commits, if any, and exits with a
     non-zero status.

list-heads <file>
     Lists the references defined in the bundle.  If followed by a list
     of references, only references matching those given are printed
     out.

unbundle <file>
     Passes the objects in the bundle to _git index-pack_ for storage
     in the repository, then prints the names of all defined
     references. If a list of references is given, only references
     matching those in the list are printed. This command is really
     plumbing, intended to be called only by _git fetch_.

<git-rev-list-args>
     A list of arguments, acceptable to _git rev-parse_ and _git
     rev-list_ (and containing a named ref, see SPECIFYING REFERENCES
     below), that specifies the specific objects and references to
     transport.  For example, `master~10..master' causes the current
     master reference to be packaged along with all objects added since
     its 10th ancestor commit.  There is no explicit limit to the
     number of references and objects that may be packaged.

[<refname>…]
     A list of references used to limit the references reported as
     available. This is principally of use to _git fetch_, which
     expects to receive only those references asked for and not
     necessarily everything in the pack (in this case, _git bundle_ acts
     like _git fetch-pack_).


SPECIFYING REFERENCES
*********************

_git bundle_ will only package references that are shown by _git
show-ref_: this includes heads, tags, and remote heads.  References
such as `master~1' cannot be packaged, but are perfectly suitable for
defining the basis.  More than one reference may be packaged, and more
than one basis can be specified.  The objects packaged are those not
contained in the union of the given bases.  Each basis can be specified
explicitly (e.g. `^master~10'), or implicitly (e.g.
`master~10..master', `--since=10.days.ago master').

   It is very important that the basis used be held by the destination.
It is okay to err on the side of caution, causing the bundle file to
contain objects already in the destination, as these are ignored when
unpacking at the destination.



EXAMPLE
*******

Assume you want to transfer the history from a repository R1 on machine
A to another repository R2 on machine B.  For whatever reason, direct
connection between A and B is not allowed, but we can move data from A
to B via some mechanism (CD, email, etc.).  We want to update R2 with
development made on the branch master in R1.

   To bootstrap the process, you can first create a bundle that does
not have any basis. You can use a tag to remember up to what commit you
last processed, in order to make it easy to later update the other
repository with an incremental bundle:

     machineA$ cd R1
     machineA$ git bundle create file.bundle master
     machineA$ git tag -f lastR2bundle master

   Then you transfer file.bundle to the target machine B. If you are
creating the repository on machine B, then you can clone from the
bundle as if it were a remote repository instead of creating an empty
repository and then pulling or fetching objects from the bundle:

     machineB$ git clone /home/me/tmp/file.bundle R2

   This will define a remote called "origin" in the resulting
repository that lets you fetch and pull from the bundle. The
$GIT_DIR/config file in R2 will have an entry like this:

     [remote "origin"]
         url = /home/me/tmp/file.bundle
         fetch = refs/heads/*:refs/remotes/origin/*

   To update the resulting mine.git repository, you can fetch or pull
after replacing the bundle stored at /home/me/tmp/file.bundle with
incremental updates.

   After working some more in the original repository, you can create an
incremental bundle to update the other repository:

     machineA$ cd R1
     machineA$ git bundle create file.bundle lastR2bundle..master
     machineA$ git tag -f lastR2bundle master

   You then transfer the bundle to the other machine to replace
/home/me/tmp/file.bundle, and pull from it.

     machineB$ cd R2
     machineB$ git pull

   If you know up to what commit the intended recipient repository
should have the necessary objects, you can use that knowledge to
specify the basis, giving a cut-off point to limit the revisions and
objects that go in the resulting bundle. The previous example used the
lastR2bundle tag for this purpose, but you can use any other options
that you would give to the git-log(1) command. Here are more examples:

   You can use a tag that is present in both:

     $ git bundle create mybundle v1.0.0..master

   You can use a basis based on time:

     $ git bundle create mybundle --since=10.days master

   You can use the number of commits:

     $ git bundle create mybundle -10 master

   You can run `git-bundle verify' to see if you can extract from a
bundle that was created with a basis:

     $ git bundle verify mybundle

   This will list what commits you must have in order to extract from
the bundle and will error out if you do not have them.

   A bundle from a recipient repository’s point of view is just like a
regular repository which it fetches or pulls from. You can, for
example, map references when fetching:

     $ git fetch mybundle master:localRef

   You can also see what references it offers:

     $ git ls-remote mybundle


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cat-file,  Up: Top

Name
****

git-cat-file — Provide content or type and size information for
repository objects



Synopsis
********

     git cat-file (-t | -s | -e | -p | <type> | -textconv ) <object>
     git cat-file (-batch | -batch-check) < <list-of-objects>


DESCRIPTION
***********

In its first form, the command provides the content or the type of an
object in the repository. The type is required unless _-t_ or _-p_ is
used to find the object type, or _-s_ is used to find the object size,
or _-textconv_ is used (which implies type "blob").

   In the second form, a list of objects (separated by linefeeds) is
provided on stdin, and the SHA1, type, and size of each object is
printed on stdout.



OPTIONS
*******

<object>
     The name of the object to show.  For a more complete list of ways
     to spell object names, see the "SPECIFYING REVISIONS" section in
     gitrevisions(7).

-t
     Instead of the content, show the object type identified by
     <object>.

-s
     Instead of the content, show the object size identified by
     <object>.

-e
     Suppress all output; instead exit with zero status if <object>
     exists and is a valid object.

-p
     Pretty-print the contents of <object> based on its type.

<type>
     Typically this matches the real type of <object> but asking for a
     type that can trivially be dereferenced from the given <object> is
     also permitted.  An example is to ask for a "tree" with <object>
     being a commit object that contains it, or to ask for a "blob"
     with <object> being a tag object that points at it.

-textconv
     Show the content as transformed by a textconv filter. In this case,
     <object> has be of the form <treeish>:<path>, or :<path> in order
     to apply the filter to the content recorded in the index at <path>.

-batch
     Print the SHA1, type, size, and contents of each object provided on
     stdin. May not be combined with any other options or arguments.

-batch-check
     Print the SHA1, type, and size of each object provided on stdin.
     May not be combined with any other options or arguments.


OUTPUT
******

If _-t_ is specified, one of the <type>.

   If _-s_ is specified, the size of the <object> in bytes.

   If _-e_ is specified, no output.

   If _-p_ is specified, the contents of <object> are pretty-printed.

   If <type> is specified, the raw (though uncompressed) contents of
the <object> will be returned.

   If _-batch_ is specified, output of the following form is printed
for each object specified on stdin:

     <sha1> SP <type> SP <size> LF
     <contents> LF

   If _-batch-check_ is specified, output of the following form is
printed for each object specified on stdin:

     <sha1> SP <type> SP <size> LF

   For both _-batch_ and _-batch-check_, output of the following form
is printed for each object specified on stdin that does not exist in
the repository:

     <object> SP missing LF


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-check-attr,  Up: Top

Name
****

git-check-attr — Display gitattributes information



Synopsis
********

     git check-attr [-a | -all | attr…] [-] pathname…
     git check-attr -stdin [-z] [-a | -all | attr…] < <list-of-paths>


DESCRIPTION
***********

For every pathname, this command will list if each attribute is
_unspecified_, _set_, or _unset_ as a gitattribute on that pathname.



OPTIONS
*******

-a, -all
     List all attributes that are associated with the specified paths.
     If this option is used, then _unspecified_ attributes will not be
     included in the output.

-cached
     Consider `.gitattributes' in the index only, ignoring the working
     tree.

-stdin
     Read file names from stdin instead of from the command-line.

-z
     Only meaningful with `--stdin'; paths are separated with a NUL
     character instead of a linefeed character.

-
     Interpret all preceding arguments as attributes and all following
     arguments as path names.

   If none of `--stdin', `--all', or `--' is used, the first argument
will be treated as an attribute and the rest of the arguments as
pathnames.



OUTPUT
******

The output is of the form: <path> COLON SP <attribute> COLON SP <info>
LF

   <path> is the path of a file being queried, <attribute> is an
attribute being queried and <info> can be either:

_unspecified_
     when the attribute is not defined for the path.

_unset_
     when the attribute is defined as false.

_set_
     when the attribute is defined as true.

<value>
     when a value has been assigned to the attribute.


EXAMPLES
********

In the examples, the following _.gitattributes_ file is used:

     *.java diff=java -crlf myAttr
     NoMyAttr.java !myAttr
     README caveat=unspecified

   * Listing a single attribute:

     $ git check-attr diff org/example/MyClass.java
     org/example/MyClass.java: diff: java

   * Listing multiple attributes for a file:

     $ git check-attr crlf diff myAttr -- org/example/MyClass.java
     org/example/MyClass.java: crlf: unset
     org/example/MyClass.java: diff: java
     org/example/MyClass.java: myAttr: set

   * Listing all attributes for a file:

     $ git check-attr --all -- org/example/MyClass.java
     org/example/MyClass.java: diff: java
     org/example/MyClass.java: myAttr: set

   * Listing an attribute for multiple files:

     $ git check-attr myAttr -- org/example/MyClass.java org/example/NoMyAttr.java
     org/example/MyClass.java: myAttr: set
     org/example/NoMyAttr.java: myAttr: unspecified

   * Not all values are equally unambiguous:

     $ git check-attr caveat README
     README: caveat: unspecified


SEE ALSO
********

gitattributes(5).



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-check-ref-format,  Up: Top

Name
****

git-check-ref-format — Ensures that a reference name is well formed



Synopsis
********

     git check-ref-format [-normalize]
            [-[no-]allow-onelevel] [-refspec-pattern]
            <refname>
     git check-ref-format -branch <branchname-shorthand>


DESCRIPTION
***********

Checks if a given _refname_ is acceptable, and exits with a non-zero
status if it is not.

   A reference is used in git to specify branches and tags.  A branch
head is stored in the `refs/heads' hierarchy, while a tag is stored in
the `refs/tags' hierarchy of the ref namespace (typically in
`$GIT_DIR/refs/heads' and `$GIT_DIR/refs/tags' directories or, as
entries in file `$GIT_DIR/packed-refs' if refs are packed by `git gc').

   git imposes the following rules on how references are named:

  1. They can include slash `/' for hierarchical (directory) grouping,
     but no slash-separated component can begin with a dot `.' or end
     with the sequence `.lock'.

  2. They must contain at least one `/'. This enforces the presence of a
     category like `heads/', `tags/' etc. but the actual names are not
     restricted.  If the `--allow-onelevel' option is used, this rule
     is waived.

  3. They cannot have two consecutive dots `..' anywhere.

  4. They cannot have ASCII control characters (i.e. bytes whose values
     are lower than \040, or \177 `DEL'), space, tilde `~', caret `^',
     or colon `:' anywhere.

  5. They cannot have question-mark `?', asterisk `*', or open bracket
     `[' anywhere.  See the `--refspec-pattern' option below for an
     exception to this rule.

  6. They cannot begin or end with a slash `/' or contain multiple
     consecutive slashes (see the `--normalize' option below for an
     exception to this rule)

  7. They cannot end with a dot `.'.

  8. They cannot contain a sequence `@{'.

  9. They cannot contain a `\'.

   These rules make it easy for shell script based tools to parse
reference names, pathname expansion by the shell when a reference name
is used unquoted (by mistake), and also avoids ambiguities in certain
reference name expressions (see gitrevisions(7)):

  1. A double-dot `..' is often used as in `ref1..ref2', and in some
     contexts this notation means `^ref1 ref2' (i.e. not in `ref1' and
     in `ref2').

  2. A tilde `~' and caret `^' are used to introduce the postfix _nth
     parent_ and _peel onion_ operation.

  3. A colon `:' is used as in `srcref:dstref' to mean "use srcref’s
     value and store it in dstref" in fetch and push operations.  It
     may also be used to select a specific object such as with _git
     cat-file_: "git cat-file blob v1.3.3:refs.c".

  4. at-open-brace `@{' is used as a notation to access a reflog entry.

   With the `--branch' option, it expands the “previous branch
syntax” `@{-n}'.  For example, `@{-1}' is a way to refer the last
branch you were on.  This option should be used by porcelains to accept
this syntax anywhere a branch name is expected, so they can act as if
you typed the branch name.



OPTIONS
*******

-allow-onelevel
-no-allow-onelevel
     Controls whether one-level refnames are accepted (i.e., refnames
     that do not contain multiple `/'-separated components).  The
     default is `--no-allow-onelevel'.

-refspec-pattern
     Interpret <refname> as a reference name pattern for a refspec (as
     used with remote repositories).  If this option is enabled,
     <refname> is allowed to contain a single `*' in place of a one
     full pathname component (e.g., `foo/*/bar' but not `foo/bar*').

-normalize
     Normalize _refname_ by removing any leading slash (`/') characters
     and collapsing runs of adjacent slashes between name components
     into a single slash.  Iff the normalized refname is valid then
     print it to standard output and exit with a status of 0.
     (`--print' is a deprecated way to spell `--normalize'.)


EXAMPLES
********

   * Print the name of the previous branch:

          $ git check-ref-format --branch @{-1}

   * Determine the reference name to use for a new branch:

          $ ref=$(git check-ref-format --normalize "refs/heads/$newbranch") ||
          die "we do not like '$newbranch' as a branch name."



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-checkout-index,  Up: Top

Name
****

git-checkout-index — Copy files from the index to the working tree



Synopsis
********

     git checkout-index [-u] [-q] [-a] [-f] [-n] [-prefix=<string>]
                        [-stage=<number>|all]
                        [-temp]
                        [-z] [-stdin]
                        [-] [<file>…]


DESCRIPTION
***********

Will copy all files listed from the index to the working directory (not
overwriting existing files).



OPTIONS
*******

-u
-index
     update stat information for the checked out entries in the index
     file.

-q
-quiet
     be quiet if files exist or are not in the index

-f
-force
     forces overwrite of existing files

-a
-all
     checks out all files in the index.  Cannot be used together with
     explicit filenames.

-n
-no-create
     Don’t checkout new files, only refresh files already checked out.

-prefix=<string>
     When creating files, prepend <string> (usually a directory
     including a trailing /)

-stage=<number>|all
     Instead of checking out unmerged entries, copy out the files from
     named stage.  <number> must be between 1 and 3.  Note: -stage=all
     automatically implies -temp.

-temp
     Instead of copying the files to the working directory write the
     content to temporary files.  The temporary name associations will
     be written to stdout.

-stdin
     Instead of taking list of paths from the command line, read list
     of paths from the standard input.  Paths are separated by LF (i.e.
     one path per line) by default.

-z
     Only meaningful with `--stdin'; paths are separated with NUL
     character instead of LF.

-
     Do not interpret any more arguments as options.

   The order of the flags used to matter, but not anymore.

   Just doing `git checkout-index' does nothing. You probably meant
`git checkout-index -a'. And if you want to force it, you want `git
checkout-index -f -a'.

   Intuitiveness is not the goal here. Repeatability is. The reason for
the "no arguments means no work" behavior is that from scripts you are
supposed to be able to do:

     $ find . -name '*.h' -print0 | xargs -0 git checkout-index -f --

   which will force all existing `*.h' files to be replaced with their
cached copies. If an empty command line implied "all", then this would
force-refresh everything in the index, which was not the point.  But
since _git checkout-index_ accepts -stdin it would be faster to use:

     $ find . -name '*.h' -print0 | git checkout-index -f -z --stdin

   The `--' is just a good idea when you know the rest will be
filenames; it will prevent problems with a filename of, for example,
`-a'.  Using `--' is probably a good policy in scripts.



Using -temp or -stage=all
*************************

When `--temp' is used (or implied by `--stage=all') _git
checkout-index_ will create a temporary file for each index entry being
checked out.  The index will not be updated with stat information.
These options can be useful if the caller needs all stages of all
unmerged entries so that the unmerged files can be processed by an
external merge tool.

   A listing will be written to stdout providing the association of
temporary file names to tracked path names.  The listing format has two
variations:

  1. tempname TAB path RS

     The first format is what gets used when `--stage' is omitted or is
     not `--stage=all'. The field tempname is the temporary file name
     holding the file content and path is the tracked path name in the
     index.  Only the requested entries are output.

  2. stage1temp SP stage2temp SP stage3tmp TAB path RS

     The second format is what gets used when `--stage=all'.  The three
     stage temporary fields (stage1temp, stage2temp, stage3temp) list
     the name of the temporary file if there is a stage entry in the
     index or `.' if there is no stage entry.  Paths which only have a
     stage 0 entry will always be omitted from the output.

   In both formats RS (the record separator) is newline by default but
will be the null byte if -z was passed on the command line.  The
temporary file names are always safe strings; they will never contain
directory separators or whitespace characters.  The path field is
always relative to the current directory and the temporary file names
are always relative to the top level directory.

   If the object being copied out to a temporary file is a symbolic
link the content of the link will be written to a normal file.  It is
up to the end-user or the Porcelain to make use of this information.



EXAMPLES
********

To update and refresh only the files already checked out
          $ git checkout-index -n -f -a && git update-index --ignore-missing --refresh

Using _git checkout-index_ to "export an entire tree"
     The prefix ability basically makes it trivial to use _git
     checkout-index_ as an "export as tree" function.  Just read the
     desired tree into the index, and do:

          $ git checkout-index --prefix=git-export-dir/ -a

     `git checkout-index' will "export" the index into the specified
     directory.

     The final "/" is important. The exported name is literally just
     prefixed with the specified string.  Contrast this with the
     following example.

Export files with a prefix
          $ git checkout-index --prefix=.merged- Makefile

     This will check out the currently cached copy of `Makefile' into
     the file `.merged-Makefile'.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-checkout,  Up: Top

Name
****

git-checkout — Checkout a branch or paths to the working tree



Synopsis
********

     git checkout [-q] [-f] [-m] [<branch>]
     git checkout [-q] [-f] [-m] [-detach] [<commit>]
     git checkout [-q] [-f] [-m] [[-b|-B|-orphan] <new_branch>] [<start_point>]
     git checkout [-f|-ours|-theirs|-m|-conflict=<style>] [<tree-ish>] [-] <paths>…
     git checkout [-p|-patch] [<tree-ish>] [-] [<paths>…]


DESCRIPTION
***********

Updates files in the working tree to match the version in the index or
the specified tree.  If no paths are given, _git checkout_ will also
update `HEAD' to set the specified branch as the current branch.

_git checkout_ [<branch>]
_git checkout_ -b|-B <new_branch> [<start point>]
_git checkout_ [-detach] [<commit>]
     This form switches branches by updating the index, working tree,
     and HEAD to reflect the specified branch or commit.

     If `-b' is given, a new branch is created as if git-branch(1) were
     called and then checked out; in this case you can use the
     `--track' or `--no-track' options, which will be passed to _git
     branch_.  As a convenience, `--track' without `-b' implies branch
     creation; see the description of `--track' below.

     If `-B' is given, <new_branch> is created if it doesn’t exist;
     otherwise, it is reset. This is the transactional equivalent of

          $ git branch -f <branch> [<start point>]
          $ git checkout <branch>

     that is to say, the branch is not reset/created unless "git
     checkout" is successful.

_git checkout_ [-p|-patch] [<tree-ish>] [-] <pathspec>…
     When <paths> or `--patch' are given, _git checkout_ does *not*
     switch branches.  It updates the named paths in the working tree
     from the index file or from a named <tree-ish> (most often a
     commit).  In this case, the `-b' and `--track' options are
     meaningless and giving either of them results in an error.  The
     <tree-ish> argument can be used to specify a specific tree-ish
     (i.e.  commit, tag or tree) to update the index for the given
     paths before updating the working tree.

     The index may contain unmerged entries because of a previous
     failed merge.  By default, if you try to check out such an entry
     from the index, the checkout operation will fail and nothing will
     be checked out.  Using `-f' will ignore these unmerged entries.
     The contents from a specific side of the merge can be checked out
     of the index by using `--ours' or `--theirs'.  With `-m', changes
     made to the working tree file can be discarded to re-create the
     original conflicted merge result.


OPTIONS
*******

-q
-quiet
     Quiet, suppress feedback messages.

-f
-force
     When switching branches, proceed even if the index or the working
     tree differs from HEAD.  This is used to throw away local changes.

     When checking out paths from the index, do not fail upon unmerged
     entries; instead, unmerged entries are ignored.

-ours
-theirs
     When checking out paths from the index, check out stage #2
     (_ours_) or #3 (_theirs_) for unmerged paths.

-b <new_branch>
     Create a new branch named <new_branch> and start it at
     <start_point>; see git-branch(1) for details.

-B <new_branch>
     Creates the branch <new_branch> and start it at <start_point>; if
     it already exists, then reset it to <start_point>. This is
     equivalent to running "git branch" with "-f"; see git-branch(1)
     for details.

-t
-track
     When creating a new branch, set up "upstream" configuration. See
     "-track" in git-branch(1) for details.

     If no _-b_ option is given, the name of the new branch will be
     derived from the remote-tracking branch.  If "remotes/" or
     "refs/remotes/" is prefixed it is stripped away, and then the part
     up to the next slash (which would be the nickname of the remote)
     is removed.  This would tell us to use "hack" as the local branch
     when branching off of "origin/hack" (or "remotes/origin/hack", or
     even "refs/remotes/origin/hack").  If the given name has no slash,
     or the above guessing results in an empty name, the guessing is
     aborted.  You can explicitly give a name with _-b_ in such a case.

-no-track
     Do not set up "upstream" configuration, even if the
     branch.autosetupmerge configuration variable is true.

-l
     Create the new branch’s reflog; see git-branch(1) for details.

-detach
     Rather than checking out a branch to work on it, check out a
     commit for inspection and discardable experiments.  This is the
     default behavior of "git checkout <commit>" when <commit> is not a
     branch name.  See the "DETACHED HEAD" section below for details.

-orphan <new_branch>
     Create a new _orphan_ branch, named <new_branch>, started from
     <start_point> and switch to it.  The first commit made on this new
     branch will have no parents and it will be the root of a new
     history totally disconnected from all the other branches and
     commits.

     The index and the working tree are adjusted as if you had
     previously run "git checkout <start_point>".  This allows you to
     start a new history that records a set of paths similar to
     <start_point> by easily running "git commit -a" to make the root
     commit.

     This can be useful when you want to publish the tree from a commit
     without exposing its full history. You might want to do this to
     publish an open source branch of a project whose current tree is
     "clean", but whose full history contains proprietary or otherwise
     encumbered bits of code.

     If you want to start a disconnected history that records a set of
     paths that is totally different from the one of <start_point>,
     then you should clear the index and the working tree right after
     creating the orphan branch by running "git rm -rf ." from the top
     level of the working tree.  Afterwards you will be ready to
     prepare your new files, repopulating the working tree, by copying
     them from elsewhere, extracting a tarball, etc.

-m
-merge
     When switching branches, if you have local modifications to one or
     more files that are different between the current branch and the
     branch to which you are switching, the command refuses to switch
     branches in order to preserve your modifications in context.
     However, with this option, a three-way merge between the current
     branch, your working tree contents, and the new branch is done,
     and you will be on the new branch.

     When a merge conflict happens, the index entries for conflicting
     paths are left unmerged, and you need to resolve the conflicts and
     mark the resolved paths with `git add' (or `git rm' if the merge
     should result in deletion of the path).

     When checking out paths from the index, this option lets you
     recreate the conflicted merge in the specified paths.

-conflict=<style>
     The same as -merge option above, but changes the way the
     conflicting hunks are presented, overriding the
     merge.conflictstyle configuration variable.  Possible values are
     "merge" (default) and "diff3" (in addition to what is shown by
     "merge" style, shows the original contents).

-p
-patch
     Interactively select hunks in the difference between the
     <tree-ish> (or the index, if unspecified) and the working tree.
     The chosen hunks are then applied in reverse to the working tree
     (and if a <tree-ish> was specified, the index).

     This means that you can use `git checkout -p' to selectively
     discard edits from your current working tree. See the
     “Interactive Mode” section of git-add(1) to learn how to
     operate the `--patch' mode.

<branch>
     Branch to checkout; if it refers to a branch (i.e., a name that,
     when prepended with "refs/heads/", is a valid ref), then that
     branch is checked out. Otherwise, if it refers to a valid commit,
     your HEAD becomes "detached" and you are no longer on any branch
     (see below for details).

     As a special case, the `"@{-N}"' syntax for the N-th last branch
     checks out the branch (instead of detaching).  You may also specify
     `-' which is synonymous with `"@{-1}"'.

     As a further special case, you may use `"A...B"' as a shortcut for
     the merge base of `A' and `B' if there is exactly one merge base.
     You can leave out at most one of `A' and `B', in which case it
     defaults to `HEAD'.

<new_branch>
     Name for the new branch.

<start_point>
     The name of a commit at which to start the new branch; see
     git-branch(1) for details. Defaults to HEAD.

<tree-ish>
     Tree to checkout from (when paths are given). If not specified,
     the index will be used.


DETACHED HEAD
*************

HEAD normally refers to a named branch (e.g. _master_). Meanwhile, each
branch refers to a specific commit. Let’s look at a repo with three
commits, one of them tagged, and with branch _master_ checked out:

                HEAD (refers to branch 'master')
                 |
                 v
     a---b---c  branch 'master' (refers to commit 'c')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   When a commit is created in this state, the branch is updated to
refer to the new commit. Specifically, _git commit_ creates a new
commit _d_, whose parent is commit _c_, and then updates branch
_master_ to refer to new commit _d_. HEAD still refers to branch
_master_ and so indirectly now refers to commit _d_:

     $ edit; git add; git commit

                    HEAD (refers to branch 'master')
                     |
                     v
     a---b---c---d  branch 'master' (refers to commit 'd')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   It is sometimes useful to be able to checkout a commit that is not at
the tip of any named branch, or even to create a new commit that is not
referenced by a named branch. Let’s look at what happens when we
checkout commit _b_ (here we show two ways this may be done):

     $ git checkout v2.0  # or
     $ git checkout master^^

        HEAD (refers to commit 'b')
         |
         v
     a---b---c---d  branch 'master' (refers to commit 'd')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   Notice that regardless of which checkout command we use, HEAD now
refers directly to commit _b_. This is known as being in detached HEAD
state.  It means simply that HEAD refers to a specific commit, as
opposed to referring to a named branch. Let’s see what happens when
we create a commit:

     $ edit; git add; git commit

          HEAD (refers to commit 'e')
           |
           v
           e
          /
     a---b---c---d  branch 'master' (refers to commit 'd')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   There is now a new commit _e_, but it is referenced only by HEAD. We
can of course add yet another commit in this state:

     $ edit; git add; git commit

              HEAD (refers to commit 'f')
               |
               v
           e---f
          /
     a---b---c---d  branch 'master' (refers to commit 'd')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   In fact, we can perform all the normal git operations. But, let’s
look at what happens when we then checkout master:

     $ git checkout master

                    HEAD (refers to branch 'master')
           e---f     |
          /          v
     a---b---c---d  branch 'master' (refers to commit 'd')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   It is important to realize that at this point nothing refers to
commit _f_. Eventually commit _f_ (and by extension commit _e_) will be
deleted by the routine git garbage collection process, unless we create
a reference before that happens. If we have not yet moved away from
commit _f_, any of these will create a reference to it:

     $ git checkout -b foo   (1)
     $ git branch foo        (2)
     $ git tag foo           (3)

*note (1): CO1-1.
     creates a new branch _foo_, which refers to commit _f_, and then
     updates HEAD to refer to branch _foo_. In other words, we’ll no
     longer be in detached HEAD state after this command.

*note (2): CO1-2.
     similarly creates a new branch _foo_, which refers to commit _f_,
     but leaves HEAD detached.

*note (3): CO1-3.
     creates a new tag _foo_, which refers to commit _f_, leaving HEAD
     detached.

   If we have moved away from commit _f_, then we must first recover
its object name (typically by using git reflog), and then we can create
a reference to it. For example, to see the last two commits to which
HEAD referred, we can use either of these commands:

     $ git reflog -2 HEAD # or
     $ git log -g -2 HEAD


EXAMPLES
********

  1. The following sequence checks out the `master' branch, reverts the
     `Makefile' to two revisions back, deletes hello.c by mistake, and
     gets it back from the index.

          $ git checkout master             (1)
          $ git checkout master~2 Makefile  (2)
          $ rm -f hello.c
          $ git checkout hello.c            (3)

    *note (1): CO2-1.
          switch branch

    *note (2): CO2-2.
          take a file out of another commit

    *note (3): CO2-3.
          restore hello.c from the index

          If you want to check out _all_ C source files out of the
          index, you can say

               $ git checkout -- '*.c'

          Note the quotes around `*.c'.  The file `hello.c' will also be
          checked out, even though it is no longer in the working tree,
          because the file globbing is used to match entries in the
          index (not in the working tree by the shell).

          If you have an unfortunate branch that is named `hello.c',
          this step would be confused as an instruction to switch to
          that branch.  You should instead write:

               $ git checkout -- hello.c


  2. After working in the wrong branch, switching to the correct branch
     would be done using:

          $ git checkout mytopic

     However, your "wrong" branch and correct "mytopic" branch may
     differ in files that you have modified locally, in which case the
     above checkout would fail like this:

          $ git checkout mytopic
          error: You have local changes to 'frotz'; not switching branches.

     You can give the `-m' flag to the command, which would try a
     three-way merge:

          $ git checkout -m mytopic
          Auto-merging frotz

     After this three-way merge, the local modifications are _not_
     registered in your index file, so `git diff' would show you what
     changes you made since the tip of the new branch.

  3. When a merge conflict happens during switching branches with the
     `-m' option, you would see something like this:

          $ git checkout -m mytopic
          Auto-merging frotz
          ERROR: Merge conflict in frotz
          fatal: merge program failed

     At this point, `git diff' shows the changes cleanly merged as in
     the previous example, as well as the changes in the conflicted
     files.  Edit and resolve the conflict and mark it resolved with
     `git add' as usual:

          $ edit frotz
          $ git add frotz



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cherry-pick,  Up: Top

Name
****

git-cherry-pick — Apply the changes introduced by some existing
commits



Synopsis
********

     git cherry-pick [-edit] [-n] [-m parent-number] [-s] [-x] [-ff] <commit>…
     git cherry-pick -continue
     git cherry-pick -quit
     git cherry-pick -abort


DESCRIPTION
***********

Given one or more existing commits, apply the change each one
introduces, recording a new commit for each.  This requires your
working tree to be clean (no modifications from the HEAD commit).

   When it is not obvious how to apply a change, the following happens:

  1. The current branch and `HEAD' pointer stay at the last commit
     successfully made.

  2. The `CHERRY_PICK_HEAD' ref is set to point at the commit that
     introduced the change that is difficult to apply.

  3. Paths in which the change applied cleanly are updated both in the
     index file and in your working tree.

  4. For conflicting paths, the index file records up to three
     versions, as described in the "TRUE MERGE" section of
     git-merge(1).  The working tree files will include a description
     of the conflict bracketed by the usual conflict markers `<<<<<<<'
     and `>>>>>>>'.

  5. No other modifications are made.

   See git-merge(1) for some hints on resolving such conflicts.



OPTIONS
*******

<commit>…
     Commits to cherry-pick.  For a more complete list of ways to spell
     commits, see gitrevisions(7).  Sets of commits can be passed but
     no traversal is done by default, as if the _-no-walk_ option was
     specified, see git-rev-list(1). Note that specifying a range will
     feed all <commit>… arguments to a single revision walk (see a
     later example that uses _maint master..next_).

-e
-edit
     With this option, _git cherry-pick_ will let you edit the commit
     message prior to committing.

-x
     When recording the commit, append a line that says "(cherry picked
     from commit …)" to the original commit message in order to
     indicate which commit this change was cherry-picked from.  This is
     done only for cherry picks without conflicts.  Do not use this
     option if you are cherry-picking from your private branch because
     the information is useless to the recipient.  If on the other hand
     you are cherry-picking between two publicly visible branches (e.g.
     backporting a fix to a maintenance branch for an older release
     from a development branch), adding this information can be useful.

-r
     It used to be that the command defaulted to do `-x' described
     above, and `-r' was to disable it.  Now the default is not to do
     `-x' so this option is a no-op.

-m parent-number
-mainline parent-number
     Usually you cannot cherry-pick a merge because you do not know
     which side of the merge should be considered the mainline.  This
     option specifies the parent number (starting from 1) of the
     mainline and allows cherry-pick to replay the change relative to
     the specified parent.

-n
-no-commit
     Usually the command automatically creates a sequence of commits.
     This flag applies the changes necessary to cherry-pick each named
     commit to your working tree and the index, without making any
     commit.  In addition, when this option is used, your index does
     not have to match the HEAD commit.  The cherry-pick is done
     against the beginning state of your index.

     This is useful when cherry-picking more than one commits' effect
     to your index in a row.

-s
-signoff
     Add Signed-off-by line at the end of the commit message.

-ff
     If the current HEAD is the same as the parent of the
     cherry-pick’ed commit, then a fast forward to this commit will
     be performed.

-allow-empty
     By default, cherry-picking an empty commit will fail, indicating
     that an explicit invocation of `git commit --allow-empty' is
     required. This option overrides that behavior, allowing empty
     commits to be preserved automatically in a cherry-pick. Note that
     when "-ff" is in effect, empty commits that meet the
     "fast-forward" requirement will be kept even without this option.
     Note also, that use of this option only keeps commits that were
     initially empty (i.e. the commit recorded the same tree as its
     parent).  Commits which are made empty due to a previous commit
     are dropped.  To force the inclusion of those commits use
     `--keep-redundant-commits'.

-keep-redundant-commits
     If a commit being cherry picked duplicates a commit already in the
     current history, it will become empty.  By default these redundant
     commits are ignored.  This option overrides that behavior and
     creates an empty commit object.  Implies `--allow-empty'.

-strategy=<strategy>
     Use the given merge strategy.  Should only be used once.  See the
     MERGE STRATEGIES section in git-merge(1) for details.

-X<option>
-strategy-option=<option>
     Pass the merge strategy-specific option through to the merge
     strategy.  See git-merge(1) for details.


SEQUENCER SUBCOMMANDS
*********************

-continue
     Continue the operation in progress using the information in
     _.git/sequencer_.  Can be used to continue after resolving
     conflicts in a failed cherry-pick or revert.

-quit
     Forget about the current operation in progress.  Can be used to
     clear the sequencer state after a failed cherry-pick or revert.

-abort
     Cancel the operation and return to the pre-sequence state.


EXAMPLES
********

`git cherry-pick master'
     Apply the change introduced by the commit at the tip of the master
     branch and create a new commit with this change.

`git cherry-pick ..master'
`git cherry-pick ^HEAD master'
     Apply the changes introduced by all commits that are ancestors of
     master but not of HEAD to produce new commits.

`git cherry-pick maint next ^master'
`git cherry-pick maint master..next'
     Apply the changes introduced by all commits that are ancestors of
     maint or next, but not master or any of its ancestors.  Note that
     the latter does not mean `maint' and everything between `master'
     and `next'; specifically, `maint' will not be used if it is
     included in `master'.

`git cherry-pick master~4 master~2'
     Apply the changes introduced by the fifth and third last commits
     pointed to by master and create 2 new commits with these changes.

`git cherry-pick -n master~1 next'
     Apply to the working tree and the index the changes introduced by
     the second last commit pointed to by master and by the last commit
     pointed to by next, but do not create any commit with these
     changes.

`git cherry-pick --ff ..next'
     If history is linear and HEAD is an ancestor of next, update the
     working tree and advance the HEAD pointer to match next.
     Otherwise, apply the changes introduced by those commits that are
     in next but not HEAD to the current branch, creating a new commit
     for each new change.

`git rev-list --reverse master -- README | git cherry-pick -n --stdin'
     Apply the changes introduced by all commits on the master branch
     that touched README to the working tree and index, so the result
     can be inspected and made into a single new commit if suitable.

   The following sequence attempts to backport a patch, bails out
because the code the patch applies to has changed too much, and then
tries again, this time exercising more care about matching up context
lines.

     $ git cherry-pick topic^             (1)
     $ git diff                           (2)
     $ git reset --merge ORIG_HEAD        (3)
     $ git cherry-pick -Xpatience topic^  (4)

*note (1): CO1-1.
     apply the change that would be shown by `git show topic^'.  In
     this example, the patch does not apply cleanly, so information
     about the conflict is written to the index and working tree and no
     new commit results.

*note (2): CO1-2.
     summarize changes to be reconciled

*note (3): CO1-3.
     cancel the cherry-pick.  In other words, return to the
     pre-cherry-pick state, preserving any local modifications you had
     in the working tree.

*note (4): CO1-4.
     try to apply the change introduced by `topic^' again, spending
     extra time to avoid mistakes based on incorrectly matching context
     lines.


SEE ALSO
********

git-revert(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cherry,  Up: Top

Name
****

git-cherry — Find commits not merged upstream



Synopsis
********

     git cherry [-v] [<upstream> [<head> [<limit>]]]


DESCRIPTION
***********

The changeset (or "diff") of each commit between the fork-point and
<head> is compared against each commit between the fork-point and
<upstream>.  The commits are compared with their _patch id_, obtained
from the _git patch-id_ program.

   Every commit that doesn’t exist in the <upstream> branch has its
id (sha1) reported, prefixed by a symbol.  The ones that have
equivalent change already in the <upstream> branch are prefixed with a
minus (-) sign, and those that only exist in the <head> branch are
prefixed with a plus (+) symbol:

                __*__*__*__*__> <upstream>
               /
     fork-point
               \__+__+__-__+__+__-__+__> <head>

   If a <limit> has been given then the commits along the <head> branch
up to and including <limit> are not reported:

                __*__*__*__*__> <upstream>
               /
     fork-point
               \__*__*__<limit>__-__+__> <head>

   Because _git cherry_ compares the changeset rather than the commit id
(sha1), you can use _git cherry_ to find out if a commit you made
locally has been applied <upstream> under a different commit id.  For
example, this will happen if you’re feeding patches <upstream> via
email rather than pushing or pulling commits directly.



OPTIONS
*******

-v
     Verbose.

<upstream>
     Upstream branch to compare against.  Defaults to the first tracked
     remote branch, if available.

<head>
     Working branch; defaults to HEAD.

<limit>
     Do not report commits up to (and including) limit.


SEE ALSO
********

git-patch-id(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-citool,  Up: Top

Name
****

git-citool — Graphical alternative to git-commit



Synopsis
********

     git citool


DESCRIPTION
***********

A Tcl/Tk based graphical interface to review modified files, stage them
into the index, enter a commit message and record the new commit onto
the current branch.  This interface is an alternative to the less
interactive _git commit_ program.

   _git citool_ is actually a standard alias for `git gui citool'.  See
git-gui(1) for more details.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-clean,  Up: Top

Name
****

git-clean — Remove untracked files from the working tree



Synopsis
********

     git clean [-d] [-f] [-n] [-q] [-e <pattern>] [-x | -X] [-] <path>…


DESCRIPTION
***********

Cleans the working tree by recursively removing files that are not
under version control, starting from the current directory.

   Normally, only files unknown to git are removed, but if the _-x_
option is specified, ignored files are also removed. This can, for
example, be useful to remove all build products.

   If any optional `<path>...' arguments are given, only those paths
are affected.



OPTIONS
*******

-d
     Remove untracked directories in addition to untracked files.  If
     an untracked directory is managed by a different git repository,
     it is not removed by default.  Use -f option twice if you really
     want to remove such a directory.

-f
-force
     If the git configuration variable clean.requireForce is not set to
     false, _git clean_ will refuse to run unless given -f or -n.

-n
-dry-run
     Don’t actually remove anything, just show what would be done.

-q
-quiet
     Be quiet, only report errors, but not the files that are
     successfully removed.

-e <pattern>
-exclude=<pattern>
     In addition to those found in .gitignore (per directory) and
     $GIT_DIR/info/exclude, also consider these patterns to be in the
     set of the ignore rules in effect.

-x
     Don’t use the standard ignore rules read from .gitignore (per
     directory) and $GIT_DIR/info/exclude, but do still use the ignore
     rules given with `-e' options.  This allows removing all untracked
     files, including build products.  This can be used (possibly in
     conjunction with _git reset_) to create a pristine working
     directory to test a clean build.

-X
     Remove only files ignored by git.  This may be useful to rebuild
     everything from scratch, but keep manually created files.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-clone,  Up: Top

Name
****

git-clone — Clone a repository into a new directory



Synopsis
********

     git clone [-template=<template_directory>]
               [-l] [-s] [-no-hardlinks] [-q] [-n] [-bare] [-mirror]
               [-o <name>] [-b <name>] [-u <upload-pack>] [-reference <repository>]
               [-separate-git-dir <git dir>]
               [-depth <depth>] [-[no-]single-branch]
               [-recursive|-recurse-submodules] [-] <repository>
               [<directory>]


DESCRIPTION
***********

Clones a repository into a newly created directory, creates
remote-tracking branches for each branch in the cloned repository
(visible using `git branch -r'), and creates and checks out an initial
branch that is forked from the cloned repository’s currently active
branch.

   After the clone, a plain `git fetch' without arguments will update
all the remote-tracking branches, and a `git pull' without arguments
will in addition merge the remote master branch into the current master
branch, if any.

   This default configuration is achieved by creating references to the
remote branch heads under `refs/remotes/origin' and by initializing
`remote.origin.url' and `remote.origin.fetch' configuration variables.



OPTIONS
*******

-local
-l
     When the repository to clone from is on a local machine, this flag
     bypasses the normal "git aware" transport mechanism and clones the
     repository by making a copy of HEAD and everything under objects
     and refs directories.  The files under `.git/objects/' directory
     are hardlinked to save space when possible.

     If the repository is specified as a local path (e.g.,
     `/path/to/repo'), this is the default, and -local is essentially a
     no-op.  If the repository is specified as a URL, then this flag is
     ignored (and we never use the local optimizations).  Specifying
     `--no-local' will override the default when `/path/to/repo' is
     given, using the regular git transport instead.

     To force copying instead of hardlinking (which may be desirable if
     you are trying to make a back-up of your repository), but still
     avoid the usual "git aware" transport mechanism, `--no-hardlinks'
     can be used.

-no-hardlinks
     Optimize the cloning process from a repository on a local
     filesystem by copying files under `.git/objects' directory.

-shared
-s
     When the repository to clone is on the local machine, instead of
     using hard links, automatically setup
     `.git/objects/info/alternates' to share the objects with the
     source repository.  The resulting repository starts out without
     any object of its own.

     *NOTE*: this is a possibly dangerous operation; do *not* use it
     unless you understand what it does. If you clone your repository
     using this option and then delete branches (or use any other git
     command that makes any existing commit unreferenced) in the source
     repository, some objects may become unreferenced (or dangling).
     These objects may be removed by normal git operations (such as
     `git commit') which automatically call `git gc --auto'. (See
     git-gc(1).)  If these objects are removed and were referenced by
     the cloned repository, then the cloned repository will become
     corrupt.

     Note that running `git repack' without the `-l' option in a
     repository cloned with `-s' will copy objects from the source
     repository into a pack in the cloned repository, removing the disk
     space savings of `clone -s'.  It is safe, however, to run `git
     gc', which uses the `-l' option by default.

     If you want to break the dependency of a repository cloned with
     `-s' on its source repository, you can simply run `git repack -a'
     to copy all objects from the source repository into a pack in the
     cloned repository.

-reference <repository>
     If the reference repository is on the local machine, automatically
     setup `.git/objects/info/alternates' to obtain objects from the
     reference repository.  Using an already existing repository as an
     alternate will require fewer objects to be copied from the
     repository being cloned, reducing network and local storage costs.

     *NOTE*: see the NOTE for the `--shared' option.

-quiet
-q
     Operate quietly.  Progress is not reported to the standard error
     stream. This flag is also passed to the ‘rsync’ command when
     given.

-verbose
-v
     Run verbosely. Does not affect the reporting of progress status to
     the standard error stream.

-progress
     Progress status is reported on the standard error stream by
     default when it is attached to a terminal, unless -q is specified.
     This flag forces progress status even if the standard error stream
     is not directed to a terminal.

-no-checkout
-n
     No checkout of HEAD is performed after the clone is complete.

-bare
     Make a _bare_ GIT repository.  That is, instead of creating
     `<directory>' and placing the administrative files in
     `<directory>/.git', make the `<directory>' itself the `$GIT_DIR'.
     This obviously implies the `-n' because there is nowhere to check
     out the working tree.  Also the branch heads at the remote are
     copied directly to corresponding local branch heads, without
     mapping them to `refs/remotes/origin/'.  When this option is used,
     neither remote-tracking branches nor the related configuration
     variables are created.

-mirror
     Set up a mirror of the source repository.  This implies `--bare'.
     Compared to `--bare', `--mirror' not only maps local branches of
     the source to local branches of the target, it maps all refs
     (including remote-tracking branches, notes etc.) and sets up a
     refspec configuration such that all these refs are overwritten by
     a `git remote update' in the target repository.

-origin <name>
-o <name>
     Instead of using the remote name `origin' to keep track of the
     upstream repository, use `<name>'.

-branch <name>
-b <name>
     Instead of pointing the newly created HEAD to the branch pointed
     to by the cloned repository’s HEAD, point to `<name>' branch
     instead. `--branch' can also take tags and treat them like
     detached HEAD. In a non-bare repository, this is the branch that
     will be checked out.

-upload-pack <upload-pack>
-u <upload-pack>
     When given, and the repository to clone from is accessed via ssh,
     this specifies a non-default path for the command run on the other
     end.

-template=<template_directory>
     Specify the directory from which templates will be used; (See the
     "TEMPLATE DIRECTORY" section of git-init(1).)

-config <key>=<value>
-c <key>=<value>
     Set a configuration variable in the newly-created repository; this
     takes effect immediately after the repository is initialized, but
     before the remote history is fetched or any files checked out.
     The key is in the same format as expected by git-config(1) (e.g.,
     `core.eol=true'). If multiple values are given for the same key,
     each value will be written to the config file. This makes it safe,
     for example, to add additional fetch refspecs to the origin remote.

-depth <depth>
     Create a _shallow_ clone with a history truncated to the specified
     number of revisions.  A shallow repository has a number of
     limitations (you cannot clone or fetch from it, nor push from nor
     into it), but is adequate if you are only interested in the recent
     history of a large project with a long history, and would want to
     send in fixes as patches.

-single-branch
     Clone only the history leading to the tip of a single branch,
     either specified by the `--branch' option or the primary branch
     remote’s `HEAD' points at. When creating a shallow clone with
     the `--depth' option, this is the default, unless
     `--no-single-branch' is given to fetch the histories near the tips
     of all branches.

-recursive
-recurse-submodules
     After the clone is created, initialize all submodules within,
     using their default settings. This is equivalent to running `git
     submodule update --init --recursive' immediately after the clone
     is finished. This option is ignored if the cloned repository does
     not have a worktree/checkout (i.e. if any of `--no-checkout'/`-n',
     `--bare', or `--mirror' is given)

-separate-git-dir=<git dir>
     Instead of placing the cloned repository where it is supposed to
     be, place the cloned repository at the specified directory, then
     make a filesytem-agnostic git symbolic link to there.  The result
     is git repository can be separated from working tree.

<repository>
     The (possibly remote) repository to clone from.  See the URLS
     section below for more information on specifying repositories.

<directory>
     The name of a new directory to clone into.  The "humanish" part of
     the source repository is used if no directory is explicitly given
     (`repo' for `/path/to/repo.git' and `foo' for `host.xz:foo/.git').
     Cloning into an existing directory is only allowed if the
     directory is empty.


GIT URLS
********

In general, URLs contain information about the transport protocol, the
address of the remote server, and the path to the repository.
Depending on the transport protocol, some of this information may be
absent.

   Git natively supports ssh, git, http, https, ftp, ftps, and rsync
protocols. The following syntaxes may be used with them:

   * ssh://[user@]host.xz[:port]/path/to/repo.git/

   * git://host.xz[:port]/path/to/repo.git/

   * http[s]://host.xz[:port]/path/to/repo.git/

   * ftp[s]://host.xz[:port]/path/to/repo.git/

   * rsync://host.xz/path/to/repo.git/

   An alternative scp-like syntax may also be used with the ssh
protocol:

   * [user@]host.xz:path/to/repo.git/

   The ssh and git protocols additionally support ~username expansion:

   * ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/

   * git://host.xz[:port]/~[user]/path/to/repo.git/

   * [user@]host.xz:/~[user]/path/to/repo.git/

   For local repositories, also supported by git natively, the following
syntaxes may be used:

   * /path/to/repo.git/

   * file:///path/to/repo.git/ (file:///path/to/repo.git/)

   These two syntaxes are mostly equivalent, except the former implies
-local option.

   When git doesn’t know how to handle a certain transport protocol,
it attempts to use the _remote-<transport>_ remote helper, if one
exists. To explicitly request a remote helper, the following syntax may
be used:

   * <transport>::<address>

   where <address> may be a path, a server and path, or an arbitrary
URL-like string recognized by the specific remote helper being invoked.
See git-remote-helpers(1) for details.

   If there are a large number of similarly-named remote repositories
and you want to use a different format for them (such that the URLs you
use will be rewritten into URLs that work), you can create a
configuration section of the form:

             [url "<actual url base>"]
                     insteadOf = <other url base>

   For example, with this:

             [url "git://git.host.xz/"]
                     insteadOf = host.xz:/path/to/
                     insteadOf = work:

   a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will
be rewritten in any context that takes a URL to be
"git://git.host.xz/repo.git".

   If you want to rewrite URLs for push only, you can create a
configuration section of the form:

             [url "<actual url base>"]
                     pushInsteadOf = <other url base>

   For example, with this:

             [url "ssh://example.org/"]
                     pushInsteadOf = git://example.org/

   a URL like "git://example.org/path/to/repo.git" will be rewritten to
"ssh://example.org/path/to/repo.git" for pushes, but pulls will still
use the original URL.



Examples
********

   * Clone from upstream:

          $ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6
          $ cd my2.6
          $ make

   * Make a local clone that borrows from the current directory,
     without checking things out:

          $ git clone -l -s -n . ../copy
          $ cd ../copy
          $ git show-branch

   * Clone from upstream while borrowing from an existing local
     directory:

          $ git clone --reference my2.6 \
                  git://git.kernel.org/pub/scm/.../linux-2.7 \
                  my2.7
          $ cd my2.7

   * Create a bare repository to publish your changes to the public:

          $ git clone --bare -l /home/proj/.git /pub/scm/proj.git

   * Create a repository on the kernel.org machine that borrows from
     Linus:

          $ git clone --bare -l -s /pub/scm/.../torvalds/linux-2.6.git \
              /pub/scm/.../me/subsys-2.6.git



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-column,  Up: Top

Name
****

git-column — Display data in columns



Synopsis
********

     git column [-command=<name>] [-[raw-]mode=<mode>] [-width=<width>]
                  [-indent=<string>] [-nl=<string>] [-padding=<n>]


DESCRIPTION
***********

This command formats its input into multiple columns.



OPTIONS
*******

-command=<name>
     Look up layout mode using configuration variable column.<name> and
     column.ui.

-mode=<mode>
     Specify layout mode. See configuration variable column.ui for
     option syntax.

-raw-mode=<n>
     Same as -mode but take mode encoded as a number. This is mainly
     used by other commands that have already parsed layout mode.

-width=<width>
     Specify the terminal width. By default _git column_ will detect the
     terminal width, or fall back to 80 if it is unable to do so.

-indent=<string>
     String to be printed at the beginning of each line.

-nl=<N>
     String to be printed at the end of each line, including newline
     character.

-padding=<N>
     The number of spaces between columns. One space by default.


Author
******

Written by Nguyen Thai Ngoc Duy <pclouds@gmail.com
(mailto:pclouds@gmail.com)>



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-commit-tree,  Up: Top

Name
****

git-commit-tree — Create a new commit object



Synopsis
********

     git commit-tree <tree> [(-p <parent>)…] < changelog
     git commit-tree [(-p <parent>)…] [(-m <message>)…] [(-F <file>)…] <tree>


DESCRIPTION
***********

This is usually not what an end user wants to run directly.  See
git-commit(1) instead.

   Creates a new commit object based on the provided tree object and
emits the new commit object id on stdout. The log message is read from
the standard input, unless `-m' or `-F' options are given.

   A commit object may have any number of parents. With exactly one
parent, it is an ordinary commit. Having more than one parent makes the
commit a merge between several lines of history. Initial (root) commits
have no parents.

   While a tree represents a particular directory state of a working
directory, a commit represents that state in "time", and explains how
to get there.

   Normally a commit would identify a new "HEAD" state, and while git
doesn’t care where you save the note about that state, in practice we
tend to just write the result to the file that is pointed at by
`.git/HEAD', so that we can always see what the last committed state
was.



OPTIONS
*******

<tree>
     An existing tree object

-p <parent>
     Each _-p_ indicates the id of a parent commit object.

-m <message>
     A paragraph in the commit log message. This can be given more than
     once and each <message> becomes its own paragraph.

-F <file>
     Read the commit log message from the given file. Use `-' to read
     from the standard input.


Commit Information
******************

A commit encapsulates:

   * all parent object ids

   * author name, email and date

   * committer name and email and the commit time.

   While parent object ids are provided on the command line, author and
committer information is taken from the following environment variables,
if set:

     GIT_AUTHOR_NAME
     GIT_AUTHOR_EMAIL
     GIT_AUTHOR_DATE
     GIT_COMMITTER_NAME
     GIT_COMMITTER_EMAIL
     GIT_COMMITTER_DATE
     EMAIL

   (nb "<", ">" and "\n"s are stripped)

   In case (some of) these environment variables are not set, the
information is taken from the configuration items user.name and
user.email, or, if not present, system user name and the hostname used
for outgoing mail (taken from `/etc/mailname' and falling back to the
fully qualified hostname when that file does not exist).

   A commit comment is read from stdin. If a changelog entry is not
provided via "<" redirection, _git commit-tree_ will just wait for one
to be entered and terminated with ^D.



DATE FORMATS
************

The GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variables support
the following date formats:

Git internal format
     It is `<unix timestamp> <timezone offset>', where `<unix
     timestamp>' is the number of seconds since the UNIX epoch.
     `<timezone offset>' is a positive or negative offset from UTC.
     For example CET (which is 2 hours ahead UTC) is `+0200'.

RFC 2822
     The standard email format as described by RFC 2822, for example
     `Thu, 07 Apr 2005 22:13:13 +0200'.

ISO 8601
     Time and date specified by the ISO 8601 standard, for example
     `2005-04-07T22:13:13'. The parser accepts a space instead of the
     `T' character as well.

          *Note*

          In addition, the date part is accepted in the following
          formats: `YYYY.MM.DD', `MM/DD/YYYY' and `DD.MM.YYYY'.


Discussion
**********

At the core level, git is character encoding agnostic.

   * The pathnames recorded in the index and in the tree objects are
     treated as uninterpreted sequences of non-NUL bytes.  What
     readdir(2) returns are what are recorded and compared with the
     data git keeps track of, which in turn are expected to be what
     lstat(2) and creat(2) accepts.  There is no such thing as pathname
     encoding translation.

   * The contents of the blob objects are uninterpreted sequences of
     bytes.  There is no encoding translation at the core level.

   * The commit log messages are uninterpreted sequences of non-NUL
     bytes.

   Although we encourage that the commit log messages are encoded in
UTF-8, both the core and git Porcelain are designed not to force UTF-8
on projects.  If all participants of a particular project find it more
convenient to use legacy encodings, git does not forbid it.  However,
there are a few things to keep in mind.

  1. _git commit_ and _git commit-tree_ issues a warning if the commit
     log message given to it does not look like a valid UTF-8 string,
     unless you explicitly say your project uses a legacy encoding.
     The way to say this is to have i18n.commitencoding in
     `.git/config' file, like this:

          [i18n]
                  commitencoding = ISO-8859-1

     Commit objects created with the above setting record the value of
     `i18n.commitencoding' in its `encoding' header.  This is to help
     other people who look at them later.  Lack of this header implies
     that the commit log message is encoded in UTF-8.

  2. _git log_, _git show_, _git blame_ and friends look at the
     `encoding' header of a commit object, and try to re-code the log
     message into UTF-8 unless otherwise specified.  You can specify
     the desired output encoding with `i18n.logoutputencoding' in
     `.git/config' file, like this:

          [i18n]
                  logoutputencoding = ISO-8859-1

     If you do not have this configuration variable, the value of
     `i18n.commitencoding' is used instead.

   Note that we deliberately chose not to re-code the commit log
message when a commit is made to force UTF-8 at the commit object
level, because re-coding to UTF-8 is not necessarily a reversible
operation.



FILES
*****

/etc/mailname



SEE ALSO
********

git-write-tree(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-commit,  Up: Top

Name
****

git-commit — Record changes to the repository



Synopsis
********

     git commit [-a | -interactive | -patch] [-s] [-v] [-u<mode>] [-amend]
                [-dry-run] [(-c | -C | -fixup | -squash) <commit>]
                [-F <file> | -m <msg>] [-reset-author] [-allow-empty]
                [-allow-empty-message] [-no-verify] [-e] [-author=<author>]
                [-date=<date>] [-cleanup=<mode>] [-status | -no-status]
                [-i | -o] [-] [<file>…]


DESCRIPTION
***********

Stores the current contents of the index in a new commit along with a
log message from the user describing the changes.

   The content to be added can be specified in several ways:

  1. by using _git add_ to incrementally "add" changes to the index
     before using the _commit_ command (Note: even modified files must
     be "added");

  2. by using _git rm_ to remove files from the working tree and the
     index, again before using the _commit_ command;

  3. by listing files as arguments to the _commit_ command, in which
     case the commit will ignore changes staged in the index, and
     instead record the current content of the listed files (which must
     already be known to git);

  4. by using the -a switch with the _commit_ command to automatically
     "add" changes from all known files (i.e. all files that are already
     listed in the index) and to automatically "rm" files in the index
     that have been removed from the working tree, and then perform the
     actual commit;

  5. by using the -interactive or -patch switches with the _commit_
     command to decide one by one which files or hunks should be part
     of the commit, before finalizing the operation. See the
     “Interactive Mode” section of git-add(1) to learn how to
     operate these modes.

   The `--dry-run' option can be used to obtain a summary of what is
included by any of the above for the next commit by giving the same set
of parameters (options and paths).

   If you make a commit and then find a mistake immediately after that,
you can recover from it with _git reset_.



OPTIONS
*******

-a
-all
     Tell the command to automatically stage files that have been
     modified and deleted, but new files you have not told git about
     are not affected.

-p
-patch
     Use the interactive patch selection interface to chose which
     changes to commit. See git-add(1) for details.

-C <commit>
-reuse-message=<commit>
     Take an existing commit object, and reuse the log message and the
     authorship information (including the timestamp) when creating the
     commit.

-c <commit>
-reedit-message=<commit>
     Like _-C_, but with _-c_ the editor is invoked, so that the user
     can further edit the commit message.

-fixup=<commit>
     Construct a commit message for use with `rebase --autosquash'.
     The commit message will be the subject line from the specified
     commit with a prefix of "fixup! ".  See git-rebase(1) for details.

-squash=<commit>
     Construct a commit message for use with `rebase --autosquash'.
     The commit message subject line is taken from the specified commit
     with a prefix of "squash! ".  Can be used with additional commit
     message options (`-m'/`-c'/`-C'/`-F'). See git-rebase(1) for
     details.

-reset-author
     When used with -C/-c/-amend options, or when committing after a a
     conflicting cherry-pick, declare that the authorship of the
     resulting commit now belongs of the committer. This also renews
     the author timestamp.

-short
     When doing a dry-run, give the output in the short-format. See
     git-status(1) for details. Implies `--dry-run'.

-branch
     Show the branch and tracking info even in short-format.

-porcelain
     When doing a dry-run, give the output in a porcelain-ready format.
     See git-status(1) for details. Implies `--dry-run'.

-z
-null
     When showing `short' or `porcelain' status output, terminate
     entries in the status output with NUL, instead of LF. If no format
     is given, implies the `--porcelain' output format.

-F <file>
-file=<file>
     Take the commit message from the given file.  Use _-_ to read the
     message from the standard input.

-author=<author>
     Override the commit author. Specify an explicit author using the
     standard `A U Thor <author@example.com>' format. Otherwise <author>
     is assumed to be a pattern and is used to search for an existing
     commit by that author (i.e. rev-list -all -i -author=<author>);
     the commit author is then copied from the first such commit found.

-date=<date>
     Override the author date used in the commit.

-m <msg>
-message=<msg>
     Use the given <msg> as the commit message.

-t <file>
-template=<file>
     When editing the commit message, start the editor with the
     contents in the given file.  The `commit.template' configuration
     variable is often used to give this option implicitly to the
     command.  This mechanism can be used by projects that want to
     guide participants with some hints on what to write in the message
     in what order.  If the user exits the editor without editing the
     message, the commit is aborted.  This has no effect when a message
     is given by other means, e.g. with the `-m' or `-F' options.

-s
-signoff
     Add Signed-off-by line by the committer at the end of the commit
     log message.

-n
-no-verify
     This option bypasses the pre-commit and commit-msg hooks.  See
     also githooks(5).

-allow-empty
     Usually recording a commit that has the exact same tree as its
     sole parent commit is a mistake, and the command prevents you from
     making such a commit.  This option bypasses the safety, and is
     primarily for use by foreign SCM interface scripts.

-allow-empty-message
     Like -allow-empty this command is primarily for use by foreign SCM
     interface scripts. It allows you to create a commit with an empty
     commit message without using plumbing commands like
     git-commit-tree(1).

-cleanup=<mode>
     This option sets how the commit message is cleaned up.  The
     _<mode>_ can be one of _verbatim_, _whitespace_, _strip_, and
     _default_. The _default_ mode will strip leading and trailing
     empty lines and #commentary from the commit message only if the
     message is to be edited. Otherwise only whitespace removed. The
     _verbatim_ mode does not change message at all, _whitespace_
     removes just leading/trailing whitespace lines and _strip_ removes
     both whitespace and commentary.

-e
-edit
     The message taken from file with `-F', command line with `-m', and
     from file with `-C' are usually used as the commit log message
     unmodified.  This option lets you further edit the message taken
     from these sources.

-amend
     Used to amend the tip of the current branch. Prepare the tree
     object you would want to replace the latest commit as usual (this
     includes the usual -i/-o and explicit paths), and the commit log
     editor is seeded with the commit message from the tip of the
     current branch. The commit you create replaces the current
     tip — if it was a merge, it will have the parents of the
     current tip as parents — so the current top commit is
     discarded.

-no-post-rewrite
     Bypass the post-rewrite hook.

   +

   It is a rough equivalent for:

             $ git reset --soft HEAD^
             $ ... do something else to come up with the right tree ...
             $ git commit -c ORIG_HEAD

   but can be used to amend a merge commit.

   + You should understand the implications of rewriting history if you
amend a commit that has already been published.  (See the "RECOVERING
FROM UPSTREAM REBASE" section in git-rebase(1).)

-i
-include
     Before making a commit out of staged contents so far, stage the
     contents of paths given on the command line as well.  This is
     usually not what you want unless you are concluding a conflicted
     merge.

-o
-only
     Make a commit only from the paths specified on the command line,
     disregarding any contents that have been staged so far. This is
     the default mode of operation of _git commit_ if any paths are
     given on the command line, in which case this option can be
     omitted.  If this option is specified together with _-amend_, then
     no paths need to be specified, which can be used to amend the last
     commit without committing changes that have already been staged.

-u[<mode>]
-untracked-files[=<mode>]
     Show untracked files.

     The mode parameter is optional (defaults to _all_), and is used to
     specify the handling of untracked files; when -u is not used, the
     default is _normal_, i.e. show untracked files and directories.

     The possible options are:

        * _no_     - Show no untracked files

        * _normal_ - Shows untracked files and directories

        * _all_    - Also shows individual files in untracked
          directories.

          The default can be changed using the status.showUntrackedFiles
          configuration variable documented in git-config(1).

-v
-verbose
     Show unified diff between the HEAD commit and what would be
     committed at the bottom of the commit message template.  Note that
     this diff output doesn’t have its lines prefixed with _#_.

-q
-quiet
     Suppress commit summary message.

-dry-run
     Do not create a commit, but show a list of paths that are to be
     committed, paths with local changes that will be left uncommitted
     and paths that are untracked.

-status
     Include the output of git-status(1) in the commit message template
     when using an editor to prepare the commit message.  Defaults to
     on, but can be used to override configuration variable
     commit.status.

-no-status
     Do not include the output of git-status(1) in the commit message
     template when using an editor to prepare the default commit
     message.

-
     Do not interpret any more arguments as options.

<file>…
     When files are given on the command line, the command commits the
     contents of the named files, without recording the changes already
     staged.  The contents of these files are also staged for the next
     commit on top of what have been staged before.


DATE FORMATS
************

The GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variables and the
`--date' option support the following date formats:

Git internal format
     It is `<unix timestamp> <timezone offset>', where `<unix
     timestamp>' is the number of seconds since the UNIX epoch.
     `<timezone offset>' is a positive or negative offset from UTC.
     For example CET (which is 2 hours ahead UTC) is `+0200'.

RFC 2822
     The standard email format as described by RFC 2822, for example
     `Thu, 07 Apr 2005 22:13:13 +0200'.

ISO 8601
     Time and date specified by the ISO 8601 standard, for example
     `2005-04-07T22:13:13'. The parser accepts a space instead of the
     `T' character as well.

          *Note*

          In addition, the date part is accepted in the following
          formats: `YYYY.MM.DD', `MM/DD/YYYY' and `DD.MM.YYYY'.


EXAMPLES
********

When recording your own work, the contents of modified files in your
working tree are temporarily stored to a staging area called the
"index" with _git add_.  A file can be reverted back, only in the index
but not in the working tree, to that of the last commit with `git reset
HEAD -- <file>', which effectively reverts _git add_ and prevents the
changes to this file from participating in the next commit.  After
building the state to be committed incrementally with these commands,
`git commit' (without any pathname parameter) is used to record what
has been staged so far.  This is the most basic form of the command.
An example:

     $ edit hello.c
     $ git rm goodbye.c
     $ git add hello.c
     $ git commit

   Instead of staging files after each individual change, you can tell
`git commit' to notice the changes to the files whose contents are
tracked in your working tree and do corresponding `git add' and `git rm'
for you.  That is, this example does the same as the earlier example if
there is no other change in your working tree:

     $ edit hello.c
     $ rm goodbye.c
     $ git commit -a

   The command `git commit -a' first looks at your working tree,
notices that you have modified hello.c and removed goodbye.c, and
performs necessary `git add' and `git rm' for you.

   After staging changes to many files, you can alter the order the
changes are recorded in, by giving pathnames to `git commit'.  When
pathnames are given, the command makes a commit that only records the
changes made to the named paths:

     $ edit hello.c hello.h
     $ git add hello.c hello.h
     $ edit Makefile
     $ git commit Makefile

   This makes a commit that records the modification to `Makefile'.
The changes staged for `hello.c' and `hello.h' are not included in the
resulting commit.  However, their changes are not lost — they are
still staged and merely held back.  After the above sequence, if you do:

     $ git commit

   this second commit would record the changes to `hello.c' and
`hello.h' as expected.

   After a merge (initiated by _git merge_ or _git pull_) stops because
of conflicts, cleanly merged paths are already staged to be committed
for you, and paths that conflicted are left in unmerged state.  You
would have to first check which paths are conflicting with _git status_
and after fixing them manually in your working tree, you would stage
the result as usual with _git add_:

     $ git status | grep unmerged
     unmerged: hello.c
     $ edit hello.c
     $ git add hello.c

   After resolving conflicts and staging the result, `git ls-files -u'
would stop mentioning the conflicted path.  When you are done, run `git
commit' to finally record the merge:

     $ git commit

   As with the case to record your own changes, you can use `-a' option
to save typing.  One difference is that during a merge resolution, you
cannot use `git commit' with pathnames to alter the order the changes
are committed, because the merge should be recorded as a single commit.
In fact, the command refuses to run when given pathnames (but see `-i'
option).



DISCUSSION
**********

Though not required, it’s a good idea to begin the commit message
with a single short (less than 50 character) line summarizing the
change, followed by a blank line and then a more thorough description.
Tools that turn commits into email, for example, use the first line on
the Subject: line and the rest of the commit in the body.

   At the core level, git is character encoding agnostic.

   * The pathnames recorded in the index and in the tree objects are
     treated as uninterpreted sequences of non-NUL bytes.  What
     readdir(2) returns are what are recorded and compared with the
     data git keeps track of, which in turn are expected to be what
     lstat(2) and creat(2) accepts.  There is no such thing as pathname
     encoding translation.

   * The contents of the blob objects are uninterpreted sequences of
     bytes.  There is no encoding translation at the core level.

   * The commit log messages are uninterpreted sequences of non-NUL
     bytes.

   Although we encourage that the commit log messages are encoded in
UTF-8, both the core and git Porcelain are designed not to force UTF-8
on projects.  If all participants of a particular project find it more
convenient to use legacy encodings, git does not forbid it.  However,
there are a few things to keep in mind.

  1. _git commit_ and _git commit-tree_ issues a warning if the commit
     log message given to it does not look like a valid UTF-8 string,
     unless you explicitly say your project uses a legacy encoding.
     The way to say this is to have i18n.commitencoding in
     `.git/config' file, like this:

          [i18n]
                  commitencoding = ISO-8859-1

     Commit objects created with the above setting record the value of
     `i18n.commitencoding' in its `encoding' header.  This is to help
     other people who look at them later.  Lack of this header implies
     that the commit log message is encoded in UTF-8.

  2. _git log_, _git show_, _git blame_ and friends look at the
     `encoding' header of a commit object, and try to re-code the log
     message into UTF-8 unless otherwise specified.  You can specify
     the desired output encoding with `i18n.logoutputencoding' in
     `.git/config' file, like this:

          [i18n]
                  logoutputencoding = ISO-8859-1

     If you do not have this configuration variable, the value of
     `i18n.commitencoding' is used instead.

   Note that we deliberately chose not to re-code the commit log
message when a commit is made to force UTF-8 at the commit object
level, because re-coding to UTF-8 is not necessarily a reversible
operation.



ENVIRONMENT AND CONFIGURATION VARIABLES
***************************************

The editor used to edit the commit log message will be chosen from the
GIT_EDITOR environment variable, the core.editor configuration
variable, the VISUAL environment variable, or the EDITOR environment
variable (in that order).  See git-var(1) for details.



HOOKS
*****

This command can run `commit-msg', `prepare-commit-msg', `pre-commit',
and `post-commit' hooks.  See githooks(5) for more information.



FILES
*****

`$GIT_DIR/COMMIT_EDITMSG'
     This file contains the commit message of a commit in progress.  If
     `git commit' exits due to an error before creating a commit, any
     commit message that has been provided by the user (e.g., in an
     editor session) will be available in this file, but will be
     overwritten by the next invocation of `git commit'.


SEE ALSO
********

git-add(1), git-rm(1), git-mv(1), git-merge(1), git-commit-tree(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-config,  Up: Top

Name
****

git-config — Get and set repository or global options



Synopsis
********

     git config [<file-option>] [type] [-z|-null] name [value [value_regex]]
     git config [<file-option>] [type] -add name value
     git config [<file-option>] [type] -replace-all name value [value_regex]
     git config [<file-option>] [type] [-z|-null] -get name [value_regex]
     git config [<file-option>] [type] [-z|-null] -get-all name [value_regex]
     git config [<file-option>] [type] [-z|-null] -get-regexp name_regex [value_regex]
     git config [<file-option>] -unset name [value_regex]
     git config [<file-option>] -unset-all name [value_regex]
     git config [<file-option>] -rename-section old_name new_name
     git config [<file-option>] -remove-section name
     git config [<file-option>] [-z|-null] -l | -list
     git config [<file-option>] -get-color name [default]
     git config [<file-option>] -get-colorbool name [stdout-is-tty]
     git config [<file-option>] -e | -edit


DESCRIPTION
***********

You can query/set/replace/unset options with this command. The name is
actually the section and the key separated by a dot, and the value will
be escaped.

   Multiple lines can be added to an option by using the _-add_ option.
If you want to update or unset an option which can occur on multiple
lines, a POSIX regexp `value_regex' needs to be given.  Only the
existing values that match the regexp are updated or unset.  If you
want to handle the lines that do *not* match the regex, just prepend a
single exclamation mark in front (see also *Note EXAMPLES::).

   The type specifier can be either _-int_ or _-bool_, to make _git
config_ ensure that the variable(s) are of the given type and convert
the value to the canonical form (simple decimal number for int, a
"true" or "false" string for bool), or _-path_, which does some path
expansion (see _-path_ below).  If no type specifier is passed, no
checks or transformations are performed on the value.

   When reading, the values are read from the system, global and
repository local configuration files by default, and options _-system_,
_-global_, _-local_ and _-file <filename>_ can be used to tell the
command to read from only that location (see *Note FILES::).

   When writing, the new value is written to the repository local
configuration file by default, and options _-system_, _-global_, _-file
<filename>_ can be used to tell the command to write to that location
(you can say _-local_ but that is the default).

   This command will fail with non-zero status upon error.  Some exit
codes are:

  1. The config file is invalid (ret=3),

  2. can not write to the config file (ret=4),

  3. no section or name was provided (ret=2),

  4. the section or key is invalid (ret=1),

  5. you try to unset an option which does not exist (ret=5),

  6. you try to unset/set an option for which multiple lines match
     (ret=5), or

  7. you try to use an invalid regexp (ret=6).

   On success, the command returns the exit code 0.



OPTIONS
*******

-replace-all
     Default behavior is to replace at most one line. This replaces all
     lines matching the key (and optionally the value_regex).

-add
     Adds a new line to the option without altering any existing
     values.  This is the same as providing _^$_ as the value_regex in
     `--replace-all'.

-get
     Get the value for a given key (optionally filtered by a regex
     matching the value). Returns error code 1 if the key was not found
     and error code 2 if multiple key values were found.

-get-all
     Like get, but does not fail if the number of values for the key is
     not exactly one.

-get-regexp
     Like -get-all, but interprets the name as a regular expression and
     writes out the key names.  Regular expression matching is currently
     case-sensitive and done against a canonicalized version of the key
     in which section and variable names are lowercased, but subsection
     names are not.

-global
     For writing options: write to global _/.gitconfig file rather than
     the repository .git/config, write to $XDG_CONFIG_HOME/git/config
     file if this file exists and the /.gitconfig file doesn’t.

     For reading options: read only from global ~/.gitconfig and from
     $XDG_CONFIG_HOME/git/config rather than from all available files.

     See also *Note FILES::.

-system
     For writing options: write to system-wide $(prefix)/etc/gitconfig
     rather than the repository .git/config.

     For reading options: read only from system-wide
     $(prefix)/etc/gitconfig rather than from all available files.

     See also *Note FILES::.

-f config-file
-file config-file
     Use the given config file instead of the one specified by
     GIT_CONFIG.

-remove-section
     Remove the given section from the configuration file.

-rename-section
     Rename the given section to a new name.

-unset
     Remove the line matching the key from config file.

-unset-all
     Remove all lines matching the key from config file.

-l
-list
     List all variables set in config file.

-bool
     _git config_ will ensure that the output is "true" or "false"

-int
     _git config_ will ensure that the output is a simple decimal
     number.  An optional value suffix of _k_, _m_, or _g_ in the
     config file will cause the value to be multiplied by 1024,
     1048576, or 1073741824 prior to output.

-bool-or-int
     _git config_ will ensure that the output matches the format of
     either -bool or -int, as described above.

-path
     _git-config_ will expand leading _~_ to the value of _$HOME_, and
     _~user_ to the home directory for the specified user.  This option
     has no effect when setting the value (but you can use _git config
     bla ~/_ from the command line to let your shell do the expansion).

-z
-null
     For all options that output values and/or keys, always end values
     with the null character (instead of a newline). Use newline
     instead as a delimiter between key and value. This allows for
     secure parsing of the output without getting confused e.g. by
     values that contain line breaks.

-get-colorbool name [stdout-is-tty]
     Find the color setting for `name' (e.g. `color.diff') and output
     "true" or "false".  `stdout-is-tty' should be either "true" or
     "false", and is taken into account when configuration says "auto".
     If `stdout-is-tty' is missing, then checks the standard output of
     the command itself, and exits with status 0 if color is to be
     used, or exits with status 1 otherwise.  When the color setting
     for `name' is undefined, the command uses `color.ui' as fallback.

-get-color name [default]
     Find the color configured for `name' (e.g. `color.diff.new') and
     output it as the ANSI color escape sequence to the standard
     output.  The optional `default' parameter is used instead, if
     there is no color configured for `name'.

-e
-edit
     Opens an editor to modify the specified config file; either
     _-system_, _-global_, or repository (default).

-includes
-no-includes
     Respect `include.*' directives in config files when looking up
     values. Defaults to on.


FILES
*****

If not set explicitly with _-file_, there are four files where _git
config_ will search for configuration options:

$GIT_DIR/config
     Repository specific configuration file.

~/.gitconfig
     User-specific configuration file. Also called "global"
     configuration file.

$XDG_CONFIG_HOME/git/config
     Second user-specific configuration file. If $XDG_CONFIG_HOME is
     not set or empty, $HOME/.config/git/config will be used. Any
     single-valued variable set in this file will be overwritten by
     whatever is in ~/.gitconfig.  It is a good idea not to create this
     file if you sometimes use older versions of Git, as support for
     this file was added fairly recently.

$(prefix)/etc/gitconfig
     System-wide configuration file.

   If no further options are given, all reading options will read all
of these files that are available. If the global or the system-wide
configuration file are not available they will be ignored. If the
repository configuration file is not available or readable, _git
config_ will exit with a non-zero error code. However, in neither case
will an error message be issued.

   All writing options will per default write to the repository specific
configuration file. Note that this also affects options like
_-replace-all_ and _-unset_. **git config* will only ever change one
file at a time*.

   You can override these rules either by command line options or by
environment variables. The _-global_ and the _-system_ options will
limit the file used to the global or system-wide file respectively. The
GIT_CONFIG environment variable has a similar effect, but you can
specify any filename you want.



ENVIRONMENT
***********

GIT_CONFIG
     Take the configuration from the given file instead of .git/config.
     Using the "-global" option forces this to ~/.gitconfig. Using the
     "-system" option forces this to $(prefix)/etc/gitconfig.

   See also *Note FILES::.



EXAMPLES
********

Given a .git/config like this:

     #
     # This is the config file, and
     # a '#' or ';' character indicates
     # a comment
     #

     ; core variables
     [core]
             ; Don't trust file modes
             filemode = false

     ; Our diff algorithm
     [diff]
             external = /usr/local/bin/diff-wrapper
             renames = true

     ; Proxy settings
     [core]
             gitproxy=proxy-command for kernel.org
             gitproxy=default-proxy ; for all the rest

   you can set the filemode to true with

     % git config core.filemode true

   The hypothetical proxy command entries actually have a postfix to
discern what URL they apply to. Here is how to change the entry for
kernel.org to "ssh".

     % git config core.gitproxy '"ssh" for kernel.org' 'for kernel.org$'

   This makes sure that only the key/value pair for kernel.org is
replaced.

   To delete the entry for renames, do

     % git config --unset diff.renames

   If you want to delete an entry for a multivar (like core.gitproxy
above), you have to provide a regex matching the value of exactly one
line.

   To query the value for a given key, do

     % git config --get core.filemode

   or

     % git config core.filemode

   or, to query a multivar:

     % git config --get core.gitproxy "for kernel.org$"

   If you want to know all the values for a multivar, do:

     % git config --get-all core.gitproxy

   If you like to live dangerously, you can replace *all* core.gitproxy
by a new one with

     % git config --replace-all core.gitproxy ssh

   However, if you really only want to replace the line for the default
proxy, i.e. the one without a "for …" postfix, do something like this:

     % git config core.gitproxy ssh '! for '

   To actually match only values with an exclamation mark, you have to

     % git config section.key value '[!]'

   To add a new proxy, without altering any of the existing ones, use

     % git config --add core.gitproxy '"proxy-command" for example.com'

   An example to use customized color from the configuration in your
script:

     #!/bin/sh
     WS=$(git config --get-color color.diff.whitespace "blue reverse")
     RESET=$(git config --get-color "" "reset")
     echo "${WS}your whitespace color or blue reverse${RESET}"


CONFIGURATION FILE
******************

The git configuration file contains a number of variables that affect
the git command’s behavior. The `.git/config' file in each repository
is used to store the configuration for that repository, and
`$HOME/.gitconfig' is used to store a per-user configuration as
fallback values for the `.git/config' file. The file `/etc/gitconfig'
can be used to store a system-wide default configuration.

   The configuration variables are used by both the git plumbing and
the porcelains. The variables are divided into sections, wherein the
fully qualified variable name of the variable itself is the last
dot-separated segment and the section name is everything before the last
dot. The variable names are case-insensitive, allow only alphanumeric
characters and `-', and must start with an alphabetic character.  Some
variables may appear multiple times.



Syntax
======

The syntax is fairly flexible and permissive; whitespaces are mostly
ignored.  The _#_ and _;_ characters begin comments to the end of line,
blank lines are ignored.

   The file consists of sections and variables.  A section begins with
the name of the section in square brackets and continues until the next
section begins.  Section names are not case sensitive.  Only
alphanumeric characters, `-' and `.' are allowed in section names.
Each variable must belong to some section, which means that there must
be a section header before the first setting of a variable.

   Sections can be further divided into subsections.  To begin a
subsection put its name in double quotes, separated by space from the
section name, in the section header, like in the example below:

             [section "subsection"]

   Subsection names are case sensitive and can contain any characters
except newline (doublequote `"' and backslash have to be escaped as
`\"' and `\\', respectively).  Section headers cannot span multiple
lines.  Variables may belong directly to a section or to a given
subsection.  You can have `[section]' if you have `[section
"subsection"]', but you don’t need to.

   There is also a deprecated `[section.subsection]' syntax. With this
syntax, the subsection name is converted to lower-case and is also
compared case sensitively. These subsection names follow the same
restrictions as section names.

   All the other lines (and the remainder of the line after the section
header) are recognized as setting variables, in the form _name =
value_.  If there is no equal sign on the line, the entire line is
taken as _name_ and the variable is recognized as boolean "true".  The
variable names are case-insensitive, allow only alphanumeric characters
and `-', and must start with an alphabetic character.  There can be more
than one value for a given variable; we say then that the variable is
multivalued.

   Leading and trailing whitespace in a variable value is discarded.
Internal whitespace within a variable value is retained verbatim.

   The values following the equals sign in variable assign are all
either a string, an integer, or a boolean.  Boolean values may be given
as yes/no, 1/0, true/false or on/off.  Case is not significant in
boolean values, when converting value to the canonical form using
_-bool_ type specifier; _git config_ will ensure that the output is
"true" or "false".

   String values may be entirely or partially enclosed in double quotes.
You need to enclose variable values in double quotes if you want to
preserve leading or trailing whitespace, or if the variable value
contains comment characters (i.e. it contains _#_ or _;_).  Double
quote `"' and backslash `\' characters in variable values must be
escaped: use `\"' for `"' and `\\' for `\'.

   The following escape sequences (beside `\"' and `\\') are recognized:
`\n' for newline character (NL), `\t' for horizontal tabulation (HT,
TAB) and `\b' for backspace (BS).  No other char escape sequence, nor
octal char sequences are valid.

   Variable values ending in a `\' are continued on the next line in the
customary UNIX fashion.

   Some variables may require a special value format.



Includes
========

You can include one config file from another by setting the special
`include.path' variable to the name of the file to be included. The
included file is expanded immediately, as if its contents had been
found at the location of the include directive. If the value of the
`include.path' variable is a relative path, the path is considered to be
relative to the configuration file in which the include directive was
found. The value of `include.path' is subject to tilde expansion: `~/'
is expanded to the value of `$HOME', and `~user/' to the specified
user’s home directory. See below for examples.



Example
=======

     # Core variables
     [core]
             ; Don't trust file modes
             filemode = false

     # Our diff algorithm
     [diff]
             external = /usr/local/bin/diff-wrapper
             renames = true

     [branch "devel"]
             remote = origin
             merge = refs/heads/devel

     # Proxy settings
     [core]
             gitProxy="ssh" for "kernel.org"
             gitProxy=default-proxy ; for the rest

     [include]
             path = /path/to/foo.inc ; include by absolute path
             path = foo ; expand "foo" relative to the current file
             path = ~/foo ; expand "foo" in your $HOME directory


Variables
=========

Note that this list is non-comprehensive and not necessarily complete.
For command-specific variables, you will find a more detailed
description in the appropriate manual page. You will find a description
of non-core porcelain configuration variables in the respective
porcelain documentation.

advice.*
     These variables control various optional help messages designed to
     aid new users. All _advice.*_ variables default to _true_, and you
     can tell Git that you do not need help by setting these to _false_:

    pushNonFastForward
          Set this variable to _false_ if you want to disable
          _pushNonFFCurrent_, _pushNonFFDefault_, and
          _pushNonFFMatching_ simultaneously.

    pushNonFFCurrent
          Advice shown when git-push(1) fails due to a non-fast-forward
          update to the current branch.

    pushNonFFDefault
          Advice to set _push.default_ to _upstream_ or _current_ when
          you ran git-push(1) and pushed _matching refs_ by default
          (i.e. you did not provide an explicit refspec, and no
          _push.default_ configuration was set) and it resulted in a
          non-fast-forward error.

    pushNonFFMatching
          Advice shown when you ran git-push(1) and pushed _matching
          refs_ explicitly (i.e. you used _:_, or specified a refspec
          that isn’t your current branch) and it resulted in a
          non-fast-forward error.

    statusHints
          Show directions on how to proceed from the current state in
          the output of git-status(1) and in the template shown when
          writing commit messages in git-commit(1).

    commitBeforeMerge
          Advice shown when git-merge(1) refuses to merge to avoid
          overwriting local changes.

    resolveConflict
          Advices shown by various commands when conflicts prevent the
          operation from being performed.

    implicitIdentity
          Advice on how to set your identity configuration when your
          information is guessed from the system username and domain
          name.

    detachedHead
          Advice shown when you used git-checkout(1) to move to the
          detach HEAD state, to instruct how to create a local branch
          after the fact.

    amWorkDir
          Advice that shows the location of the patch file when
          git-am(1) fails to apply it.

core.fileMode
     If false, the executable bit differences between the index and the
     working tree are ignored; useful on broken filesystems like FAT.
     See git-update-index(1).

     The default is true, except git-clone(1) or git-init(1) will probe
     and set core.fileMode false if appropriate when the repository is
     created.

core.ignoreCygwinFSTricks
     This option is only used by Cygwin implementation of Git. If false,
     the Cygwin stat() and lstat() functions are used. This may be
     useful if your repository consists of a few separate directories
     joined in one hierarchy using Cygwin mount. If true, Git uses
     native Win32 API whenever it is possible and falls back to Cygwin
     functions only to handle symbol links. The native mode is more
     than twice faster than normal Cygwin l/stat() functions. True by
     default, unless core.filemode is true, in which case
     ignoreCygwinFSTricks is ignored as Cygwin’s POSIX emulation is
     required to support core.filemode.

core.ignorecase
     If true, this option enables various workarounds to enable git to
     work better on filesystems that are not case sensitive, like FAT.
     For example, if a directory listing finds "makefile" when git
     expects "Makefile", git will assume it is really the same file,
     and continue to remember it as "Makefile".

     The default is false, except git-clone(1) or git-init(1) will
     probe and set core.ignorecase true if appropriate when the
     repository is created.

core.precomposeunicode
     This option is only used by Mac OS implementation of git.  When
     core.precomposeunicode=true, git reverts the unicode decomposition
     of filenames done by Mac OS. This is useful when sharing a
     repository between Mac OS and Linux or Windows.  (Git for Windows
     1.7.10 or higher is needed, or git under cygwin 1.7).  When false,
     file names are handled fully transparent by git, which is backward
     compatible with older versions of git.

core.trustctime
     If false, the ctime differences between the index and the working
     tree are ignored; useful when the inode change time is regularly
     modified by something outside Git (file system crawlers and some
     backup systems).  See git-update-index(1). True by default.

core.quotepath
     The commands that output paths (e.g. _ls-files_, _diff_), when not
     given the `-z' option, will quote "unusual" characters in the
     pathname by enclosing the pathname in a double-quote pair and with
     backslashes the same way strings in C source code are quoted.  If
     this variable is set to false, the bytes higher than 0x80 are not
     quoted but output as verbatim.  Note that double quote, backslash
     and control characters are always quoted without `-z' regardless
     of the setting of this variable.

core.eol
     Sets the line ending type to use in the working directory for
     files that have the `text' property set.  Alternatives are _lf_,
     _crlf_ and _native_, which uses the platform’s native line
     ending.  The default value is `native'.  See gitattributes(5) for
     more information on end-of-line conversion.

core.safecrlf
     If true, makes git check if converting `CRLF' is reversible when
     end-of-line conversion is active.  Git will verify if a command
     modifies a file in the work tree either directly or indirectly.
     For example, committing a file followed by checking out the same
     file should yield the original file in the work tree.  If this is
     not the case for the current setting of `core.autocrlf', git will
     reject the file.  The variable can be set to "warn", in which case
     git will only warn about an irreversible conversion but continue
     the operation.

     CRLF conversion bears a slight chance of corrupting data.  When it
     is enabled, git will convert CRLF to LF during commit and LF to
     CRLF during checkout.  A file that contains a mixture of LF and
     CRLF before the commit cannot be recreated by git.  For text files
     this is the right thing to do: it corrects line endings such that
     we have only LF line endings in the repository.  But for binary
     files that are accidentally classified as text the conversion can
     corrupt data.

     If you recognize such corruption early you can easily fix it by
     setting the conversion type explicitly in .gitattributes.  Right
     after committing you still have the original file in your work
     tree and this file is not yet corrupted.  You can explicitly tell
     git that this file is binary and git will handle the file
     appropriately.

     Unfortunately, the desired effect of cleaning up text files with
     mixed line endings and the undesired effect of corrupting binary
     files cannot be distinguished.  In both cases CRLFs are removed in
     an irreversible way.  For text files this is the right thing to do
     because CRLFs are line endings, while for binary files converting
     CRLFs corrupts data.

     Note, this safety check does not mean that a checkout will
     generate a file identical to the original file for a different
     setting of `core.eol' and `core.autocrlf', but only for the
     current one.  For example, a text file with `LF' would be accepted
     with `core.eol=lf' and could later be checked out with
     `core.eol=crlf', in which case the resulting file would contain
     `CRLF', although the original file contained `LF'.  However, in
     both work trees the line endings would be consistent, that is
     either all `LF' or all `CRLF', but never mixed.  A file with mixed
     line endings would be reported by the `core.safecrlf' mechanism.

core.autocrlf
     Setting this variable to "true" is almost the same as setting the
     `text' attribute to "auto" on all files except that text files are
     not guaranteed to be normalized: files that contain `CRLF' in the
     repository will not be touched.  Use this setting if you want to
     have `CRLF' line endings in your working directory even though the
     repository does not have normalized line endings.  This variable
     can be set to _input_, in which case no output conversion is
     performed.

core.symlinks
     If false, symbolic links are checked out as small plain files that
     contain the link text. git-update-index(1) and git-add(1) will not
     change the recorded type to regular file. Useful on filesystems
     like FAT that do not support symbolic links.

     The default is true, except git-clone(1) or git-init(1) will probe
     and set core.symlinks false if appropriate when the repository is
     created.

core.gitProxy
     A "proxy command" to execute (as _command host port_) instead of
     establishing direct connection to the remote server when using the
     git protocol for fetching. If the variable value is in the
     "COMMAND for DOMAIN" format, the command is applied only on
     hostnames ending with the specified domain string. This variable
     may be set multiple times and is matched in the given order; the
     first match wins.

     Can be overridden by the _GIT_PROXY_COMMAND_ environment variable
     (which always applies universally, without the special "for"
     handling).

     The special string `none' can be used as the proxy command to
     specify that no proxy be used for a given domain pattern.  This is
     useful for excluding servers inside a firewall from proxy use,
     while defaulting to a common proxy for external domains.

core.ignoreStat
     If true, commands which modify both the working tree and the index
     will mark the updated paths with the "assume unchanged" bit in the
     index. These marked files are then assumed to stay unchanged in the
     working tree, until you mark them otherwise manually - Git will not
     detect the file changes by lstat() calls. This is useful on systems
     where those are very slow, such as Microsoft Windows.  See
     git-update-index(1).  False by default.

core.preferSymlinkRefs
     Instead of the default "symref" format for HEAD and other symbolic
     reference files, use symbolic links.  This is sometimes needed to
     work with old scripts that expect HEAD to be a symbolic link.

core.bare
     If true this repository is assumed to be _bare_ and has no working
     directory associated with it.  If this is the case a number of
     commands that require a working directory will be disabled, such
     as git-add(1) or git-merge(1).

     This setting is automatically guessed by git-clone(1) or
     git-init(1) when the repository was created.  By default a
     repository that ends in "/.git" is assumed to be not bare (bare =
     false), while all other repositories are assumed to be bare (bare
     = true).

core.worktree
     Set the path to the root of the working tree.  This can be
     overridden by the GIT_WORK_TREE environment variable and the
     _-work-tree_ command line option.  The value can be an absolute
     path or relative to the path to the .git directory, which is
     either specified by -git-dir or GIT_DIR, or automatically
     discovered.  If -git-dir or GIT_DIR is specified but none of
     -work-tree, GIT_WORK_TREE and core.worktree is specified, the
     current working directory is regarded as the top level of your
     working tree.

     Note that this variable is honored even when set in a configuration
     file in a ".git" subdirectory of a directory and its value differs
     from the latter directory (e.g. "/path/to/.git/config" has
     core.worktree set to "/different/path"), which is most likely a
     misconfiguration.  Running git commands in the "/path/to"
     directory will still use "/different/path" as the root of the work
     tree and can cause confusion unless you know what you are doing
     (e.g. you are creating a read-only snapshot of the same index to a
     location different from the repository’s usual working tree).

core.logAllRefUpdates
     Enable the reflog. Updates to a ref <ref> is logged to the file
     "$GIT_DIR/logs/<ref>", by appending the new and old SHA1, the
     date/time and the reason of the update, but only when the file
     exists.  If this configuration variable is set to true, missing
     "$GIT_DIR/logs/<ref>" file is automatically created for branch
     heads (i.e. under refs/heads/), remote refs (i.e. under
     refs/remotes/), note refs (i.e. under refs/notes/), and the
     symbolic ref HEAD.

     This information can be used to determine what commit was the tip
     of a branch "2 days ago".

     This value is true by default in a repository that has a working
     directory associated with it, and false by default in a bare
     repository.

core.repositoryFormatVersion
     Internal variable identifying the repository format and layout
     version.

core.sharedRepository
     When _group_ (or _true_), the repository is made shareable between
     several users in a group (making sure all the files and objects are
     group-writable). When _all_ (or _world_ or _everybody_), the
     repository will be readable by all users, additionally to being
     group-shareable. When _umask_ (or _false_), git will use
     permissions reported by umask(2). When _0xxx_, where _0xxx_ is an
     octal number, files in the repository will have this mode value.
     _0xxx_ will override user’s umask value (whereas the other
     options will only override requested parts of the user’s umask
     value). Examples: _0660_ will make the repo read/write-able for
     the owner and group, but inaccessible to others (equivalent to
     _group_ unless umask is e.g. _0022_). _0640_ is a repository that
     is group-readable but not group-writable.  See git-init(1). False
     by default.

core.warnAmbiguousRefs
     If true, git will warn you if the ref name you passed it is
     ambiguous and might match multiple refs in the .git/refs/ tree.
     True by default.

core.compression
     An integer -1..9, indicating a default compression level.  -1 is
     the zlib default. 0 means no compression, and 1..9 are various
     speed/size tradeoffs, 9 being slowest.  If set, this provides a
     default to other compression variables, such as
     _core.loosecompression_ and _pack.compression_.

core.loosecompression
     An integer -1..9, indicating the compression level for objects that
     are not in a pack file. -1 is the zlib default. 0 means no
     compression, and 1..9 are various speed/size tradeoffs, 9 being
     slowest.  If not set,  defaults to core.compression.  If that is
     not set,  defaults to 1 (best speed).

core.packedGitWindowSize
     Number of bytes of a pack file to map into memory in a single
     mapping operation.  Larger window sizes may allow your system to
     process a smaller number of large pack files more quickly.
     Smaller window sizes will negatively affect performance due to
     increased calls to the operating system’s memory manager, but
     may improve performance when accessing a large number of large
     pack files.

     Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32
     MiB on 32 bit platforms and 1 GiB on 64 bit platforms.  This should
     be reasonable for all users/operating systems.  You probably do
     not need to adjust this value.

     Common unit suffixes of _k_, _m_, or _g_ are supported.

core.packedGitLimit
     Maximum number of bytes to map simultaneously into memory from
     pack files.  If Git needs to access more than this many bytes at
     once to complete an operation it will unmap existing regions to
     reclaim virtual address space within the process.

     Default is 256 MiB on 32 bit platforms and 8 GiB on 64 bit
     platforms.  This should be reasonable for all users/operating
     systems, except on the largest projects.  You probably do not need
     to adjust this value.

     Common unit suffixes of _k_, _m_, or _g_ are supported.

core.deltaBaseCacheLimit
     Maximum number of bytes to reserve for caching base objects that
     may be referenced by multiple deltified objects.  By storing the
     entire decompressed base objects in a cache Git is able to avoid
     unpacking and decompressing frequently used base objects multiple
     times.

     Default is 16 MiB on all platforms.  This should be reasonable for
     all users/operating systems, except on the largest projects.  You
     probably do not need to adjust this value.

     Common unit suffixes of _k_, _m_, or _g_ are supported.

core.bigFileThreshold
     Files larger than this size are stored deflated, without
     attempting delta compression.  Storing large files without delta
     compression avoids excessive memory usage, at the slight expense
     of increased disk usage.

     Default is 512 MiB on all platforms.  This should be reasonable
     for most projects as source code and other text files can still be
     delta compressed, but larger binary media files won’t be.

     Common unit suffixes of _k_, _m_, or _g_ are supported.

core.excludesfile
     In addition to _.gitignore_ (per-directory) and
     _.git/info/exclude_, git looks into this file for patterns of
     files which are not meant to be tracked.  "`~/'" is expanded to
     the value of `$HOME' and "`~user/'" to the specified user’s home
     directory. Its default value is $XDG_CONFIG_HOME/git/ignore.  If
     $XDG_CONFIG_HOME is either not set or empty,
     $HOME/.config/git/ignore is used instead. See gitignore(5).

core.askpass
     Some commands (e.g. svn and http interfaces) that interactively
     ask for a password can be told to use an external program given
     via the value of this variable. Can be overridden by the
     _GIT_ASKPASS_ environment variable. If not set, fall back to the
     value of the _SSH_ASKPASS_ environment variable or, failing that,
     a simple password prompt. The external program shall be given a
     suitable prompt as command line argument and write the password on
     its STDOUT.

core.attributesfile
     In addition to _.gitattributes_ (per-directory) and
     _.git/info/attributes_, git looks into this file for attributes
     (see gitattributes(5)). Path expansions are made the same way as
     for `core.excludesfile'. Its default value is
     $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is either not
     set or empty, $HOME/.config/git/attributes is used instead.

core.editor
     Commands such as `commit' and `tag' that lets you edit messages by
     launching an editor uses the value of this variable when it is
     set, and the environment variable `GIT_EDITOR' is not set.  See
     git-var(1).

sequence.editor
     Text editor used by `git rebase -i' for editing the rebase insn
     file.  The value is meant to be interpreted by the shell when it
     is used.  It can be overridden by the `GIT_SEQUENCE_EDITOR'
     environment variable.  When not configured the default commit
     message editor is used instead.

core.pager
     The command that git will use to paginate output.  Can be
     overridden with the `GIT_PAGER' environment variable.  Note that
     git sets the `LESS' environment variable to `FRSX' if it is unset
     when it runs the pager.  One can change these settings by setting
     the `LESS' variable to some other value.  Alternately, these
     settings can be overridden on a project or global basis by setting
     the `core.pager' option.  Setting `core.pager' has no affect on
     the `LESS' environment variable behaviour above, so if you want to
     override git’s default settings this way, you need to be
     explicit.  For example, to disable the S option in a backward
     compatible manner, set `core.pager' to `less -+$LESS -FRX'.  This
     will be passed to the shell by git, which will translate the final
     command to `LESS=FRSX less -+FRSX -FRX'.

core.whitespace
     A comma separated list of common whitespace problems to notice.
     _git diff_ will use `color.diff.whitespace' to highlight them, and
     _git apply -whitespace=error_ will consider them as errors.  You
     can prefix `-' to disable any of them (e.g. `-trailing-space'):

        * `blank-at-eol' treats trailing whitespaces at the end of the
          line as an error (enabled by default).

        * `space-before-tab' treats a space character that appears
          immediately before a tab character in the initial indent part
          of the line as an error (enabled by default).

        * `indent-with-non-tab' treats a line that is indented with
          space characters instead of the equivalent tabs as an error
          (not enabled by default).

        * `tab-in-indent' treats a tab character in the initial indent
          part of the line as an error (not enabled by default).

        * `blank-at-eof' treats blank lines added at the end of file as
          an error (enabled by default).

        * `trailing-space' is a short-hand to cover both `blank-at-eol'
          and `blank-at-eof'.

        * `cr-at-eol' treats a carriage-return at the end of line as
          part of the line terminator, i.e. with it, `trailing-space'
          does not trigger if the character before such a
          carriage-return is not a whitespace (not enabled by default).

        * `tabwidth=<n>' tells how many character positions a tab
          occupies; this is relevant for `indent-with-non-tab' and when
          git fixes `tab-in-indent' errors. The default tab width is 8.
          Allowed values are 1 to 63.

core.fsyncobjectfiles
     This boolean will enable _fsync()_ when writing object files.

     This is a total waste of time and effort on a filesystem that
     orders data writes properly, but can be useful for filesystems
     that do not use journalling (traditional UNIX filesystems) or that
     only journal metadata and not file contents (OS X’s HFS+, or
     Linux ext3 with "data=writeback").

core.preloadindex
     Enable parallel index preload for operations like _git diff_

     This can speed up operations like _git diff_ and _git status_
     especially on filesystems like NFS that have weak caching
     semantics and thus relatively high IO latencies.  With this set to
     _true_, git will do the index comparison to the filesystem data in
     parallel, allowing overlapping IO’s.

core.createObject
     You can set this to _link_, in which case a hardlink followed by a
     delete of the source are used to make sure that object creation
     will not overwrite existing objects.

     On some file system/operating system combinations, this is
     unreliable.  Set this config setting to _rename_ there; However,
     This will remove the check that makes sure that existing object
     files will not get overwritten.

core.notesRef
     When showing commit messages, also show notes which are stored in
     the given ref.  The ref must be fully qualified.  If the given ref
     does not exist, it is not an error but means that no notes should
     be printed.

     This setting defaults to "refs/notes/commits", and it can be
     overridden by the _GIT_NOTES_REF_ environment variable.  See
     git-notes(1).

core.sparseCheckout
     Enable "sparse checkout" feature. See section "Sparse checkout" in
     git-read-tree(1) for more information.

core.abbrev
     Set the length object names are abbreviated to.  If unspecified,
     many commands abbreviate to 7 hexdigits, which may not be enough
     for abbreviated object names to stay unique for sufficiently long
     time.

add.ignore-errors
add.ignoreErrors
     Tells _git add_ to continue adding files when some files cannot be
     added due to indexing errors. Equivalent to the _-ignore-errors_
     option of git-add(1).  Older versions of git accept only
     `add.ignore-errors', which does not follow the usual naming
     convention for configuration variables.  Newer versions of git
     honor `add.ignoreErrors' as well.

alias.*
     Command aliases for the git(1) command wrapper - e.g.  after
     defining "alias.last = cat-file commit HEAD", the invocation "git
     last" is equivalent to "git cat-file commit HEAD". To avoid
     confusion and troubles with script usage, aliases that hide
     existing git commands are ignored. Arguments are split by spaces,
     the usual shell quoting and escaping is supported.  quote pair and
     a backslash can be used to quote them.

     If the alias expansion is prefixed with an exclamation point, it
     will be treated as a shell command.  For example, defining
     "alias.new = !gitk -all -not ORIG_HEAD", the invocation "git new"
     is equivalent to running the shell command "gitk -all -not
     ORIG_HEAD".  Note that shell commands will be executed from the
     top-level directory of a repository, which may not necessarily be
     the current directory.  _GIT_PREFIX_ is set as returned by running
     _git rev-parse -show-prefix_ from the original current directory.
     See git-rev-parse(1).

am.keepcr
     If true, git-am will call git-mailsplit for patches in mbox format
     with parameter _-keep-cr_. In this case git-mailsplit will not
     remove `\r' from lines ending with `\r\n'. Can be overridden by
     giving _-no-keep-cr_ from the command line.  See git-am(1),
     git-mailsplit(1).

apply.ignorewhitespace
     When set to _change_, tells _git apply_ to ignore changes in
     whitespace, in the same way as the _-ignore-space-change_ option.
     When set to one of: no, none, never, false tells _git apply_ to
     respect all whitespace differences.  See git-apply(1).

apply.whitespace
     Tells _git apply_ how to handle whitespaces, in the same way as
     the _-whitespace_ option. See git-apply(1).

branch.autosetupmerge
     Tells _git branch_ and _git checkout_ to set up new branches so
     that git-pull(1) will appropriately merge from the starting point
     branch. Note that even if this option is not set, this behavior
     can be chosen per-branch using the `--track' and `--no-track'
     options. The valid settings are: `false' — no automatic
     setup is done; `true' — automatic setup is done when the
     starting point is a remote-tracking branch; `always' — 
      automatic setup is done when the starting point is either a
     local branch or remote-tracking branch. This option defaults to
     true.

branch.autosetuprebase
     When a new branch is created with _git branch_ or _git checkout_
     that tracks another branch, this variable tells git to set up pull
     to rebase instead of merge (see "branch.<name>.rebase").  When
     `never', rebase is never automatically set to true.  When `local',
     rebase is set to true for tracked branches of other local branches.
     When `remote', rebase is set to true for tracked branches of
     remote-tracking branches.  When `always', rebase will be set to
     true for all tracking branches.  See "branch.autosetupmerge" for
     details on how to set up a branch to track another branch.  This
     option defaults to never.

branch.<name>.remote
     When in branch <name>, it tells _git fetch_ and _git push_ which
     remote to fetch from/push to.  It defaults to `origin' if no
     remote is configured. `origin' is also used if you are not on any
     branch.

branch.<name>.merge
     Defines, together with branch.<name>.remote, the upstream branch
     for the given branch. It tells _git fetch_/_git pull_/_git rebase_
     which branch to merge and can also affect _git push_ (see
     push.default).  When in branch <name>, it tells _git fetch_ the
     default refspec to be marked for merging in FETCH_HEAD. The value
     is handled like the remote part of a refspec, and must match a ref
     which is fetched from the remote given by "branch.<name>.remote".
     The merge information is used by _git pull_ (which at first calls
     _git fetch_) to lookup the default branch for merging. Without
     this option, _git pull_ defaults to merge the first refspec
     fetched.  Specify multiple values to get an octopus merge.  If you
     wish to setup _git pull_ so that it merges into <name> from
     another branch in the local repository, you can point
     branch.<name>.merge to the desired branch, and use the special
     setting `.' (a period) for branch.<name>.remote.

branch.<name>.mergeoptions
     Sets default options for merging into branch <name>. The syntax and
     supported options are the same as those of git-merge(1), but
     option values containing whitespace characters are currently not
     supported.

branch.<name>.rebase
     When true, rebase the branch <name> on top of the fetched branch,
     instead of merging the default branch from the default remote when
     "git pull" is run. See "pull.rebase" for doing this in a non
     branch-specific manner.

     *NOTE*: this is a possibly dangerous operation; do *not* use it
     unless you understand the implications (see git-rebase(1) for
     details).

browser.<tool>.cmd
     Specify the command to invoke the specified browser. The specified
     command is evaluated in shell with the URLs passed as arguments.
     (See git-web-browse(1).)

browser.<tool>.path
     Override the path for the given tool that may be used to browse
     HTML help (see _-w_ option in git-help(1)) or a working repository
     in gitweb (see git-instaweb(1)).

clean.requireForce
     A boolean to make git-clean do nothing unless given -f or -n.
     Defaults to true.

color.branch
     A boolean to enable/disable color in the output of git-branch(1).
     May be set to `always', `false' (or `never') or `auto' (or
     `true'), in which case colors are used only when the output is to
     a terminal. Defaults to false.

color.branch.<slot>
     Use customized color for branch coloration. `<slot>' is one of
     `current' (the current branch), `local' (a local branch), `remote'
     (a remote-tracking branch in refs/remotes/), `plain' (other refs).

     The value for these configuration variables is a list of colors
     (at most two) and attributes (at most one), separated by spaces.
     The colors accepted are `normal', `black', `red', `green',
     `yellow', `blue', `magenta', `cyan' and `white'; the attributes
     are `bold', `dim', `ul', `blink' and `reverse'.  The first color
     given is the foreground; the second is the background.  The
     position of the attribute, if any, doesn’t matter.

color.diff
     Whether to use ANSI escape sequences to add color to patches.  If
     this is set to `always', git-diff(1), git-log(1), and git-show(1)
     will use color for all patches.  If it is set to `true' or `auto',
     those commands will only use color when output is to the terminal.
     Defaults to false.

     This does not affect git-format-patch(1) nor the _git-diff-*_
     plumbing commands.  Can be overridden on the command line with the
     `--color[=<when>]' option.

color.diff.<slot>
     Use customized color for diff colorization.  `<slot>' specifies
     which part of the patch to use the specified color, and is one of
     `plain' (context text), `meta' (metainformation), `frag' (hunk
     header), _func_ (function in hunk header), `old' (removed lines),
     `new' (added lines), `commit' (commit headers), or `whitespace'
     (highlighting whitespace errors). The values of these variables
     may be specified as in color.branch.<slot>.

color.decorate.<slot>
     Use customized color for _git log -decorate_ output.  `<slot>' is
     one of `branch', `remoteBranch', `tag', `stash' or `HEAD' for local
     branches, remote-tracking branches, tags, stash and HEAD,
     respectively.

color.grep
     When set to `always', always highlight matches.  When `false' (or
     `never'), never.  When set to `true' or `auto', use color only
     when the output is written to the terminal.  Defaults to `false'.

color.grep.<slot>
     Use customized color for grep colorization.  `<slot>' specifies
     which part of the line to use the specified color, and is one of

    `context'
          non-matching text in context lines (when using `-A', `-B', or
          `-C')

    `filename'
          filename prefix (when not using `-h')

    `function'
          function name lines (when using `-p')

    `linenumber'
          line number prefix (when using `-n')

    `match'
          matching text

    `selected'
          non-matching text in selected lines

    `separator'
          separators between fields on a line (`:', `-', and `=') and
          between hunks (`--')

     The values of these variables may be specified as in
     color.branch.<slot>.

color.interactive
     When set to `always', always use colors for interactive prompts
     and displays (such as those used by "git-add -interactive").  When
     false (or `never'), never.  When set to `true' or `auto', use
     colors only when the output is to the terminal. Defaults to false.

color.interactive.<slot>
     Use customized color for _git add -interactive_ output. `<slot>'
     may be `prompt', `header', `help' or `error', for four distinct
     types of normal output from interactive commands.  The values of
     these variables may be specified as in color.branch.<slot>.

color.pager
     A boolean to enable/disable colored output when the pager is in
     use (default is true).

color.showbranch
     A boolean to enable/disable color in the output of
     git-show-branch(1). May be set to `always', `false' (or `never')
     or `auto' (or `true'), in which case colors are used only when the
     output is to a terminal. Defaults to false.

color.status
     A boolean to enable/disable color in the output of git-status(1).
     May be set to `always', `false' (or `never') or `auto' (or
     `true'), in which case colors are used only when the output is to
     a terminal. Defaults to false.

color.status.<slot>
     Use customized color for status colorization. `<slot>' is one of
     `header' (the header text of the status message), `added' or
     `updated' (files which are added but not committed), `changed'
     (files which are changed but not added in the index), `untracked'
     (files which are not tracked by git), `branch' (the current
     branch), or `nobranch' (the color the _no branch_ warning is shown
     in, defaulting to red). The values of these variables may be
     specified as in color.branch.<slot>.

color.ui
     This variable determines the default value for variables such as
     `color.diff' and `color.grep' that control the use of color per
     command family. Its scope will expand as more commands learn
     configuration to set a default for the `--color' option.  Set it
     to `always' if you want all output not intended for machine
     consumption to use color, to `true' or `auto' if you want such
     output to use color when written to the terminal, or to `false' or
     `never' if you prefer git commands not to use color unless enabled
     explicitly with some other configuration or the `--color' option.

column.ui
     Specify whether supported commands should output in columns.  This
     variable consists of a list of tokens separated by spaces or
     commas:

    `always'
          always show in columns

    `never'
          never show in columns

    `auto'
          show in columns if the output is to the terminal

    `column'
          fill columns before rows (default)

    `row'
          fill rows before columns

    `plain'
          show in one column

    `dense'
          make unequal size columns to utilize more space

    `nodense'
          make equal size columns

     This option defaults to _never_.

column.branch
     Specify whether to output branch listing in `git branch' in
     columns.  See `column.ui' for details.

column.status
     Specify whether to output untracked files in `git status' in
     columns.  See `column.ui' for details.

column.tag
     Specify whether to output tag listing in `git tag' in columns.
     See `column.ui' for details.

commit.status
     A boolean to enable/disable inclusion of status information in the
     commit message template when using an editor to prepare the commit
     message.  Defaults to true.

commit.template
     Specify a file to use as the template for new commit messages.
     "`~/'" is expanded to the value of `$HOME' and "`~user/'" to the
     specified user’s home directory.

credential.helper
     Specify an external helper to be called when a username or
     password credential is needed; the helper may consult external
     storage to avoid prompting the user for the credentials. See
     gitcredentials(7) for details.

credential.useHttpPath
     When acquiring credentials, consider the "path" component of an
     http or https URL to be important. Defaults to false. See
     gitcredentials(7) for more information.

credential.username
     If no username is set for a network authentication, use this
     username by default. See credential.<context>.* below, and
     gitcredentials(7).

credential.<url>.*
     Any of the credential.* options above can be applied selectively to
     some credentials. For example
     "credential.https://example.com.username" would set the default
     username only for https connections to example.com. See
     gitcredentials(7) for details on how URLs are matched.

diff.autorefreshindex
     When using _git diff_ to compare with work tree files, do not
     consider stat-only change as changed.  Instead, silently run `git
     update-index --refresh' to update the cached stat information for
     paths whose contents in the work tree match the contents in the
     index.  This option defaults to true.  Note that this affects only
     _git diff_ Porcelain, and not lower level _diff_ commands such as
     _git diff-files_.

diff.dirstat
     A comma separated list of `--dirstat' parameters specifying the
     default behavior of the `--dirstat' option to git-diff(1)` and
     friends. The defaults can be overridden on the command line (using
     `--dirstat=<param1,param2,...>'). The fallback defaults (when not
     changed by `diff.dirstat') are `changes,noncumulative,3'.  The
     following parameters are available:

    `changes'
          Compute the dirstat numbers by counting the lines that have
          been removed from the source, or added to the destination.
          This ignores the amount of pure code movements within a file.
          In other words, rearranging lines in a file is not counted
          as much as other changes.  This is the default behavior when
          no parameter is given.

    `lines'
          Compute the dirstat numbers by doing the regular line-based
          diff analysis, and summing the removed/added line counts.
          (For binary files, count 64-byte chunks instead, since binary
          files have no natural concept of lines). This is a more
          expensive `--dirstat' behavior than the `changes' behavior,
          but it does count rearranged lines within a file as much as
          other changes. The resulting output is consistent with what
          you get from the other `--*stat' options.

    `files'
          Compute the dirstat numbers by counting the number of files
          changed.  Each changed file counts equally in the dirstat
          analysis. This is the computationally cheapest `--dirstat'
          behavior, since it does not have to look at the file contents
          at all.

    `cumulative'
          Count changes in a child directory for the parent directory
          as well.  Note that when using `cumulative', the sum of the
          percentages reported may exceed 100%. The default
          (non-cumulative) behavior can be specified with the
          `noncumulative' parameter.

    <limit>
          An integer parameter specifies a cut-off percent (3% by
          default).  Directories contributing less than this percentage
          of the changes are not shown in the output.

     Example: The following will count changed files, while ignoring
     directories with less than 10% of the total amount of changed
     files, and accumulating child directory counts in the parent
     directories: `files,10,cumulative'.

diff.statGraphWidth
     Limit the width of the graph part in -stat output. If set, applies
     to all commands generating -stat output except format-patch.

diff.external
     If this config variable is set, diff generation is not performed
     using the internal diff machinery, but using the given command.
     Can be overridden with the ‘GIT_EXTERNAL_DIFF’ environment
     variable.  The command is called with parameters as described
     under "git Diffs" in git(1).  Note: if you want to use an external
     diff program only on a subset of your files, you might want to use
     gitattributes(5) instead.

diff.ignoreSubmodules
     Sets the default value of -ignore-submodules. Note that this
     affects only _git diff_ Porcelain, and not lower level _diff_
     commands such as _git diff-files_. _git checkout_ also honors this
     setting when reporting uncommitted changes.

diff.mnemonicprefix
     If set, _git diff_ uses a prefix pair that is different from the
     standard "a/" and "b/" depending on what is being compared.  When
     this configuration is in effect, reverse diff output also swaps
     the order of the prefixes:

    `git diff'
          compares the (i)ndex and the (w)ork tree;

    `git diff HEAD'
          compares a (c)ommit and the (w)ork tree;

    `git diff --cached'
          compares a (c)ommit and the (i)ndex;

    `git diff HEAD:file1 file2'
          compares an (o)bject and a (w)ork tree entity;

    `git diff --no-index a b'
          compares two non-git things (1) and (2).

diff.noprefix
     If set, _git diff_ does not show any source or destination prefix.

diff.renameLimit
     The number of files to consider when performing the copy/rename
     detection; equivalent to the _git diff_ option _-l_.

diff.renames
     Tells git to detect renames.  If set to any boolean value, it will
     enable basic rename detection.  If set to "copies" or "copy", it
     will detect copies, as well.

diff.suppressBlankEmpty
     A boolean to inhibit the standard behavior of printing a space
     before each empty output line. Defaults to false.

diff.<driver>.command
     The custom diff driver command.  See gitattributes(5) for details.

diff.<driver>.xfuncname
     The regular expression that the diff driver should use to
     recognize the hunk header.  A built-in pattern may also be used.
     See gitattributes(5) for details.

diff.<driver>.binary
     Set this option to true to make the diff driver treat files as
     binary.  See gitattributes(5) for details.

diff.<driver>.textconv
     The command that the diff driver should call to generate the
     text-converted version of a file.  The result of the conversion is
     used to generate a human-readable diff.  See gitattributes(5) for
     details.

diff.<driver>.wordregex
     The regular expression that the diff driver should use to split
     words in a line.  See gitattributes(5) for details.

diff.<driver>.cachetextconv
     Set this option to true to make the diff driver cache the text
     conversion outputs.  See gitattributes(5) for details.

diff.tool
     The diff tool to be used by git-difftool(1).  This option
     overrides `merge.tool', and has the same valid built-in values as
     `merge.tool' minus "tortoisemerge" and plus "kompare".  Any other
     value is treated as a custom diff tool, and there must be a
     corresponding `difftool.<tool>.cmd' option.

difftool.<tool>.path
     Override the path for the given tool.  This is useful in case your
     tool is not in the PATH.

difftool.<tool>.cmd
     Specify the command to invoke the specified diff tool.  The
     specified command is evaluated in shell with the following
     variables available:  _LOCAL_ is set to the name of the temporary
     file containing the contents of the diff pre-image and _REMOTE_ is
     set to the name of the temporary file containing the contents of
     the diff post-image.

difftool.prompt
     Prompt before each invocation of the diff tool.

diff.wordRegex
     A POSIX Extended Regular Expression used to determine what is a
     "word" when performing word-by-word difference calculations.
     Character sequences that match the regular expression are "words",
     all other characters are *ignorable* whitespace.

fetch.recurseSubmodules
     This option can be either set to a boolean value or to _on-demand_.
     Setting it to a boolean changes the behavior of fetch and pull to
     unconditionally recurse into submodules when set to true or to not
     recurse at all when set to false. When set to _on-demand_ (the
     default value), fetch and pull will only recurse into a populated
     submodule when its superproject retrieves a commit that updates
     the submodule’s reference.

fetch.fsckObjects
     If it is set to true, git-fetch-pack will check all fetched
     objects. It will abort in the case of a malformed object or a
     broken link. The result of an abort are only dangling objects.
     Defaults to false. If not set, the value of `transfer.fsckObjects'
     is used instead.

fetch.unpackLimit
     If the number of objects fetched over the git native transfer is
     below this limit, then the objects will be unpacked into loose
     object files. However if the number of received objects equals or
     exceeds this limit then the received pack will be stored as a
     pack, after adding any missing delta bases.  Storing the pack from
     a push can make the push operation complete faster, especially on
     slow filesystems.  If not set, the value of `transfer.unpackLimit'
     is used instead.

format.attach
     Enable multipart/mixed attachments as the default for
     _format-patch_.  The value can also be a double quoted string
     which will enable attachments as the default and set the value as
     the boundary.  See the -attach option in git-format-patch(1).

format.numbered
     A boolean which can enable or disable sequence numbers in patch
     subjects.  It defaults to "auto" which enables it only if there is
     more than one patch.  It can be enabled or disabled for all
     messages by setting it to "true" or "false".  See -numbered option
     in git-format-patch(1).

format.headers
     Additional email headers to include in a patch to be submitted by
     mail.  See git-format-patch(1).

format.to
format.cc
     Additional recipients to include in a patch to be submitted by
     mail.  See the -to and -cc options in git-format-patch(1).

format.subjectprefix
     The default for format-patch is to output files with the _[PATCH]_
     subject prefix. Use this variable to change that prefix.

format.signature
     The default for format-patch is to output a signature containing
     the git version number. Use this variable to change that default.
     Set this variable to the empty string ("") to suppress signature
     generation.

format.suffix
     The default for format-patch is to output files with the suffix
     `.patch'. Use this variable to change that suffix (make sure to
     include the dot if you want it).

format.pretty
     The default pretty format for log/show/whatchanged command, See
     git-log(1), git-show(1), git-whatchanged(1).

format.thread
     The default threading style for _git format-patch_.  Can be a
     boolean value, or `shallow' or `deep'.  `shallow' threading makes
     every mail a reply to the head of the series, where the head is
     chosen from the cover letter, the `--in-reply-to', and the first
     patch mail, in this order.  `deep' threading makes every mail a
     reply to the previous one.  A true boolean value is the same as
     `shallow', and a false value disables threading.

format.signoff
     A boolean value which lets you enable the `-s/--signoff' option of
     format-patch by default. *Note_* Adding the Signed-off-by: line to
     a patch should be a conscious act and means that you certify you
     have the rights to submit this work under the same open source
     license.  Please see the _SubmittingPatches_ document for further
     discussion.

filter.<driver>.clean
     The command which is used to convert the content of a worktree
     file to a blob upon checkin.  See gitattributes(5) for details.

filter.<driver>.smudge
     The command which is used to convert the content of a blob object
     to a worktree file upon checkout.  See gitattributes(5) for
     details.

gc.aggressiveWindow
     The window size parameter used in the delta compression algorithm
     used by _git gc -aggressive_.  This defaults to 250.

gc.auto
     When there are approximately more than this many loose objects in
     the repository, `git gc --auto' will pack them.  Some Porcelain
     commands use this command to perform a light-weight garbage
     collection from time to time.  The default value is 6700.  Setting
     this to 0 disables it.

gc.autopacklimit
     When there are more than this many packs that are not marked with
     `*.keep' file in the repository, `git gc --auto' consolidates them
     into one larger pack.  The default value is 50.  Setting this to 0
     disables it.

gc.packrefs
     Running `git pack-refs' in a repository renders it unclonable by
     Git versions prior to 1.5.1.2 over dumb transports such as HTTP.
     This variable determines whether _git gc_ runs `git pack-refs'.
     This can be set to `notbare' to enable it within all non-bare
     repos or it can be set to a boolean value.  The default is `true'.

gc.pruneexpire
     When _git gc_ is run, it will call _prune -expire 2.weeks.ago_.
     Override the grace period with this config variable.  The value
     "now" may be used to disable this  grace period and always prune
     unreachable objects immediately.

gc.reflogexpire
gc.<pattern>.reflogexpire
     _git reflog expire_ removes reflog entries older than this time;
     defaults to 90 days.  With "<pattern>" (e.g.  "refs/stash") in the
     middle the setting applies only to the refs that match the
     <pattern>.

gc.reflogexpireunreachable
gc.<ref>.reflogexpireunreachable
     _git reflog expire_ removes reflog entries older than this time
     and are not reachable from the current tip; defaults to 30 days.
     With "<pattern>" (e.g. "refs/stash") in the middle, the setting
     applies only to the refs that match the <pattern>.

gc.rerereresolved
     Records of conflicted merge you resolved earlier are kept for this
     many days when _git rerere gc_ is run.  The default is 60 days.
     See git-rerere(1).

gc.rerereunresolved
     Records of conflicted merge you have not resolved are kept for
     this many days when _git rerere gc_ is run.  The default is 15
     days.  See git-rerere(1).

gitcvs.commitmsgannotation
     Append this string to each commit message. Set to empty string to
     disable this feature. Defaults to "via git-CVS emulator".

gitcvs.enabled
     Whether the CVS server interface is enabled for this repository.
     See git-cvsserver(1).

gitcvs.logfile
     Path to a log file where the CVS server interface well… logs
     various stuff. See git-cvsserver(1).

gitcvs.usecrlfattr
     If true, the server will look up the end-of-line conversion
     attributes for files to determine the _-k_ modes to use. If the
     attributes force git to treat a file as text, the _-k_ mode will
     be left blank so CVS clients will treat it as text. If they
     suppress text conversion, the file will be set with _-kb_ mode,
     which suppresses any newline munging the client might otherwise
     do. If the attributes do not allow the file type to be determined,
     then _gitcvs.allbinary_ is used. See gitattributes(5).

gitcvs.allbinary
     This is used if _gitcvs.usecrlfattr_ does not resolve the correct
     _-kb_ mode to use. If true, all unresolved files are sent to the
     client in mode _-kb_. This causes the client to treat them as
     binary files, which suppresses any newline munging it otherwise
     might do. Alternatively, if it is set to "guess", then the
     contents of the file are examined to decide if it is binary,
     similar to _core.autocrlf_.

gitcvs.dbname
     Database used by git-cvsserver to cache revision information
     derived from the git repository. The exact meaning depends on the
     used database driver, for SQLite (which is the default driver) this
     is a filename. Supports variable substitution (see
     git-cvsserver(1) for details). May not contain semicolons (`;').
     Default: _%Ggitcvs.%m.sqlite_

gitcvs.dbdriver
     Used Perl DBI driver. You can specify any available driver for
     this here, but it might not work. git-cvsserver is tested with
     _DBD::SQLite_, reported to work with _DBD::Pg_, and reported *not*
     to work with _DBD::mysql_. Experimental feature.  May not contain
     double colons (`:'). Default: _SQLite_.  See git-cvsserver(1).

gitcvs.dbuser, gitcvs.dbpass
     Database user and password. Only useful if setting
     _gitcvs.dbdriver_, since SQLite has no concept of database users
     and/or passwords.  _gitcvs.dbuser_ supports variable substitution
     (see git-cvsserver(1) for details).

gitcvs.dbTableNamePrefix
     Database table name prefix.  Prepended to the names of any
     database tables used, allowing a single database to be used for
     several repositories.  Supports variable substitution (see
     git-cvsserver(1) for details).  Any non-alphabetic characters will
     be replaced with underscores.

   All gitcvs variables except for _gitcvs.usecrlfattr_ and
_gitcvs.allbinary_ can also be specified as
_gitcvs.<access_method>.<varname>_ (where _access_method_ is one of
"ext" and "pserver") to make them apply only for the given access
method.

gitweb.category
gitweb.description
gitweb.owner
gitweb.url
     See gitweb(1) for description.

gitweb.avatar
gitweb.blame
gitweb.grep
gitweb.highlight
gitweb.patches
gitweb.pickaxe
gitweb.remote_heads
gitweb.showsizes
gitweb.snapshot
     See gitweb.conf(5) for description.

grep.lineNumber
     If set to true, enable _-n_ option by default.

grep.extendedRegexp
     If set to true, enable _-extended-regexp_ option by default.

gpg.program
     Use this custom program instead of "gpg" found on $PATH when
     making or verifying a PGP signature. The program must support the
     same command line interface as GPG, namely, to verify a detached
     signature, "gpg -verify $file - <$signature" is run, and the
     program is expected to signal a good signature by exiting with
     code 0, and to generate an ascii-armored detached signature, the
     standard input of "gpg -bsau $key" is fed with the contents to be
     signed, and the program is expected to send the result to its
     standard output.

gui.commitmsgwidth
     Defines how wide the commit message window is in the git-gui(1).
     "75" is the default.

gui.diffcontext
     Specifies how many context lines should be used in calls to diff
     made by the git-gui(1). The default is "5".

gui.encoding
     Specifies the default encoding to use for displaying of file
     contents in git-gui(1) and gitk(1).  It can be overridden by
     setting the _encoding_ attribute for relevant files (see
     gitattributes(5)).  If this option is not set, the tools default
     to the locale encoding.

gui.matchtrackingbranch
     Determines if new branches created with git-gui(1) should default
     to tracking remote branches with matching names or not. Default:
     "false".

gui.newbranchtemplate
     Is used as suggested name when creating new branches using the
     git-gui(1).

gui.pruneduringfetch
     "true" if git-gui(1) should prune remote-tracking branches when
     performing a fetch. The default value is "false".

gui.trustmtime
     Determines if git-gui(1) should trust the file modification
     timestamp or not. By default the timestamps are not trusted.

gui.spellingdictionary
     Specifies the dictionary used for spell checking commit messages in
     the git-gui(1). When set to "none" spell checking is turned off.

gui.fastcopyblame
     If true, _git gui blame_ uses `-C' instead of `-C -C' for original
     location detection. It makes blame significantly faster on huge
     repositories at the expense of less thorough copy detection.

gui.copyblamethreshold
     Specifies the threshold to use in _git gui blame_ original location
     detection, measured in alphanumeric characters. See the
     git-blame(1) manual for more information on copy detection.

gui.blamehistoryctx
     Specifies the radius of history context in days to show in gitk(1)
     for the selected commit, when the `Show History Context' menu item
     is invoked from _git gui blame_. If this variable is set to zero,
     the whole history is shown.

guitool.<name>.cmd
     Specifies the shell command line to execute when the corresponding
     item of the git-gui(1) `Tools' menu is invoked. This option is
     mandatory for every tool. The command is executed from the root of
     the working directory, and in the environment it receives the name
     of the tool as _GIT_GUITOOL_, the name of the currently selected
     file as _FILENAME_, and the name of the current branch as
     _CUR_BRANCH_ (if the head is detached, _CUR_BRANCH_ is empty).

guitool.<name>.needsfile
     Run the tool only if a diff is selected in the GUI. It guarantees
     that _FILENAME_ is not empty.

guitool.<name>.noconsole
     Run the command silently, without creating a window to display its
     output.

guitool.<name>.norescan
     Don’t rescan the working directory for changes after the tool
     finishes execution.

guitool.<name>.confirm
     Show a confirmation dialog before actually running the tool.

guitool.<name>.argprompt
     Request a string argument from the user, and pass it to the tool
     through the _ARGS_ environment variable. Since requesting an
     argument implies confirmation, the _confirm_ option has no effect
     if this is enabled. If the option is set to _true_, _yes_, or _1_,
     the dialog uses a built-in generic prompt; otherwise the exact
     value of the variable is used.

guitool.<name>.revprompt
     Request a single valid revision from the user, and set the
     _REVISION_ environment variable. In other aspects this option is
     similar to _argprompt_, and can be used together with it.

guitool.<name>.revunmerged
     Show only unmerged branches in the _revprompt_ subdialog.  This is
     useful for tools similar to merge or rebase, but not for things
     like checkout or reset.

guitool.<name>.title
     Specifies the title to use for the prompt dialog. The default is
     the tool name.

guitool.<name>.prompt
     Specifies the general prompt string to display at the top of the
     dialog, before subsections for _argprompt_ and _revprompt_.  The
     default value includes the actual command.

help.browser
     Specify the browser that will be used to display help in the _web_
     format. See git-help(1).

help.format
     Override the default help format used by git-help(1).  Values
     _man_, _info_, _web_ and _html_ are supported. _man_ is the
     default. _web_ and _html_ are the same.

help.autocorrect
     Automatically correct and execute mistyped commands after waiting
     for the given number of deciseconds (0.1 sec). If more than one
     command can be deduced from the entered text, nothing will be
     executed.  If the value of this option is negative, the corrected
     command will be executed immediately. If the value is 0 - the
     command will be just shown but not executed.  This is the default.

http.proxy
     Override the HTTP proxy, normally configured using the
     _http_proxy_, _https_proxy_, and _all_proxy_ environment variables
     (see `curl(1)').  This can be overridden on a per-remote basis; see
     remote.<name>.proxy

http.cookiefile
     File containing previously stored cookie lines which should be used
     in the git http session, if they match the server. The file format
     of the file to read cookies from should be plain HTTP headers or
     the Netscape/Mozilla cookie file format (see curl(1)).  NOTE that
     the file specified with http.cookiefile is only used as input. No
     cookies will be stored in the file.

http.sslVerify
     Whether to verify the SSL certificate when fetching or pushing
     over HTTPS. Can be overridden by the _GIT_SSL_NO_VERIFY_
     environment variable.

http.sslCert
     File containing the SSL certificate when fetching or pushing over
     HTTPS. Can be overridden by the _GIT_SSL_CERT_ environment
     variable.

http.sslKey
     File containing the SSL private key when fetching or pushing over
     HTTPS. Can be overridden by the _GIT_SSL_KEY_ environment variable.

http.sslCertPasswordProtected
     Enable git’s password prompt for the SSL certificate.  Otherwise
     OpenSSL will prompt the user, possibly many times, if the
     certificate or private key is encrypted.  Can be overridden by the
     _GIT_SSL_CERT_PASSWORD_PROTECTED_ environment variable.

http.sslCAInfo
     File containing the certificates to verify the peer with when
     fetching or pushing over HTTPS. Can be overridden by the
     _GIT_SSL_CAINFO_ environment variable.

http.sslCAPath
     Path containing files with the CA certificates to verify the peer
     with when fetching or pushing over HTTPS. Can be overridden by the
     _GIT_SSL_CAPATH_ environment variable.

http.maxRequests
     How many HTTP requests to launch in parallel. Can be overridden by
     the _GIT_HTTP_MAX_REQUESTS_ environment variable. Default is 5.

http.minSessions
     The number of curl sessions (counted across slots) to be kept
     across requests. They will not be ended with curl_easy_cleanup()
     until http_cleanup() is invoked. If USE_CURL_MULTI is not defined,
     this value will be capped at 1. Defaults to 1.

http.postBuffer
     Maximum size in bytes of the buffer used by smart HTTP transports
     when POSTing data to the remote system.  For requests larger than
     this buffer size, HTTP/1.1 and Transfer-Encoding: chunked is used
     to avoid creating a massive pack file locally.  Default is 1 MiB,
     which is sufficient for most requests.

http.lowSpeedLimit, http.lowSpeedTime
     If the HTTP transfer speed is less than _http.lowSpeedLimit_ for
     longer than _http.lowSpeedTime_ seconds, the transfer is aborted.
     Can be overridden by the _GIT_HTTP_LOW_SPEED_LIMIT_ and
     _GIT_HTTP_LOW_SPEED_TIME_ environment variables.

http.noEPSV
     A boolean which disables using of EPSV ftp command by curl.  This
     can helpful with some "poor" ftp servers which don’t support
     EPSV mode. Can be overridden by the _GIT_CURL_FTP_NO_EPSV_
     environment variable. Default is false (curl will use EPSV).

http.useragent
     The HTTP USER_AGENT string presented to an HTTP server.  The
     default value represents the version of the client git such as
     git/1.7.1.  This option allows you to override this value to a
     more common value such as Mozilla/4.0.  This may be necessary, for
     instance, if connecting through a firewall that restricts HTTP
     connections to a set of common USER_AGENT strings (but not
     including those like git/1.7.1).  Can be overridden by the
     _GIT_HTTP_USER_AGENT_ environment variable.

i18n.commitEncoding
     Character encoding the commit messages are stored in; git itself
     does not care per se, but this information is necessary e.g. when
     importing commits from emails or in the gitk graphical history
     browser (and possibly at other places in the future or in other
     porcelains). See e.g. git-mailinfo(1). Defaults to _utf-8_.

i18n.logOutputEncoding
     Character encoding the commit messages are converted to when
     running _git log_ and friends.

imap
     The configuration variables in the _imap_ section are described in
     git-imap-send(1).

init.templatedir
     Specify the directory from which templates will be copied.  (See
     the "TEMPLATE DIRECTORY" section of git-init(1).)

instaweb.browser
     Specify the program that will be used to browse your working
     repository in gitweb. See git-instaweb(1).

instaweb.httpd
     The HTTP daemon command-line to start gitweb on your working
     repository. See git-instaweb(1).

instaweb.local
     If true the web server started by git-instaweb(1) will be bound to
     the local IP (127.0.0.1).

instaweb.modulepath
     The default module path for git-instaweb(1) to use instead of
     /usr/lib/apache2/modules.  Only used if httpd is Apache.

instaweb.port
     The port number to bind the gitweb httpd to. See git-instaweb(1).

interactive.singlekey
     In interactive commands, allow the user to provide one-letter
     input with a single key (i.e., without hitting enter).  Currently
     this is used by the `--patch' mode of git-add(1), git-checkout(1),
     git-commit(1), git-reset(1), and git-stash(1). Note that this
     setting is silently ignored if portable keystroke input is not
     available.

log.abbrevCommit
     If true, makes git-log(1), git-show(1), and git-whatchanged(1)
     assume `--abbrev-commit'. You may override this option with
     `--no-abbrev-commit'.

log.date
     Set the default date-time mode for the _log_ command.  Setting a
     value for log.date is similar to using _git log_'s `--date'
     option.  Possible values are `relative', `local', `default',
     `iso', `rfc', and `short'; see git-log(1) for details.

log.decorate
     Print out the ref names of any commits that are shown by the log
     command. If _short_ is specified, the ref name prefixes
     _refs/heads/_, _refs/tags/_ and _refs/remotes/_ will not be
     printed. If _full_ is specified, the full ref name (including
     prefix) will be printed.  This is the same as the log commands
     _-decorate_ option.

log.showroot
     If true, the initial commit will be shown as a big creation event.
     This is equivalent to a diff against an empty tree.  Tools like
     git-log(1) or git-whatchanged(1), which normally hide the root
     commit will now show it. True by default.

mailmap.file
     The location of an augmenting mailmap file. The default mailmap,
     located in the root of the repository, is loaded first, then the
     mailmap file pointed to by this variable.  The location of the
     mailmap file may be in a repository subdirectory, or somewhere
     outside of the repository itself.  See git-shortlog(1) and
     git-blame(1).

man.viewer
     Specify the programs that may be used to display help in the _man_
     format. See git-help(1).

man.<tool>.cmd
     Specify the command to invoke the specified man viewer. The
     specified command is evaluated in shell with the man page passed
     as argument. (See git-help(1).)

man.<tool>.path
     Override the path for the given tool that may be used to display
     help in the _man_ format. See git-help(1).

merge.conflictstyle
     Specify the style in which conflicted hunks are written out to
     working tree files upon merge.  The default is "merge", which
     shows a `<<<<<<<' conflict marker, changes made by one side, a
     `=======' marker, changes made by the other side, and then a
     `>>>>>>>' marker.  An alternate style, "diff3", adds a `|||||||'
     marker and the original text before the `=======' marker.

merge.defaultToUpstream
     If merge is called without any commit argument, merge the upstream
     branches configured for the current branch by using their last
     observed values stored in their remote tracking branches.  The
     values of the `branch.<current branch>.merge' that name the
     branches at the remote named by `branch.<current branch>.remote'
     are consulted, and then they are mapped via `remote.<remote>.fetch'
     to their corresponding remote tracking branches, and the tips of
     these tracking branches are merged.

merge.ff
     By default, git does not create an extra merge commit when merging
     a commit that is a descendant of the current commit. Instead, the
     tip of the current branch is fast-forwarded. When set to `false',
     this variable tells git to create an extra merge commit in such a
     case (equivalent to giving the `--no-ff' option from the command
     line). When set to `only', only such fast-forward merges are
     allowed (equivalent to giving the `--ff-only' option from the
     command line).

merge.log
     In addition to branch names, populate the log message with at most
     the specified number of one-line descriptions from the actual
     commits that are being merged.  Defaults to false, and true is a
     synonym for 20.

merge.renameLimit
     The number of files to consider when performing rename detection
     during a merge; if not specified, defaults to the value of
     diff.renameLimit.

merge.renormalize
     Tell git that canonical representation of files in the repository
     has changed over time (e.g. earlier commits record text files with
     CRLF line endings, but recent ones use LF line endings).  In such
     a repository, git can convert the data recorded in commits to a
     canonical form before performing a merge to reduce unnecessary
     conflicts.  For more information, see section "Merging branches
     with differing checkin/checkout attributes" in gitattributes(5).

merge.stat
     Whether to print the diffstat between ORIG_HEAD and the merge
     result at the end of the merge.  True by default.

merge.tool
     Controls which merge resolution program is used by
     git-mergetool(1).  Valid built-in values are: "araxis", "bc3",
     "diffuse", "ecmerge", "emerge", "gvimdiff", "kdiff3", "meld",
     "opendiff", "p4merge", "tkdiff", "tortoisemerge", "vimdiff" and
     "xxdiff".  Any other value is treated is custom merge tool and
     there must be a corresponding mergetool.<tool>.cmd option.

merge.verbosity
     Controls the amount of output shown by the recursive merge
     strategy.  Level 0 outputs nothing except a final error message if
     conflicts were detected. Level 1 outputs only conflicts, 2 outputs
     conflicts and file changes.  Level 5 and above outputs debugging
     information.  The default is level 2.  Can be overridden by the
     _GIT_MERGE_VERBOSITY_ environment variable.

merge.<driver>.name
     Defines a human-readable name for a custom low-level merge driver.
     See gitattributes(5) for details.

merge.<driver>.driver
     Defines the command that implements a custom low-level merge
     driver.  See gitattributes(5) for details.

merge.<driver>.recursive
     Names a low-level merge driver to be used when performing an
     internal merge between common ancestors.  See gitattributes(5) for
     details.

mergetool.<tool>.path
     Override the path for the given tool.  This is useful in case your
     tool is not in the PATH.

mergetool.<tool>.cmd
     Specify the command to invoke the specified merge tool.  The
     specified command is evaluated in shell with the following
     variables available: _BASE_ is the name of a temporary file
     containing the common base of the files to be merged, if available;
     _LOCAL_ is the name of a temporary file containing the contents of
     the file on the current branch; _REMOTE_ is the name of a temporary
     file containing the contents of the file from the branch being
     merged; _MERGED_ contains the name of the file to which the merge
     tool should write the results of a successful merge.

mergetool.<tool>.trustExitCode
     For a custom merge command, specify whether the exit code of the
     merge command can be used to determine whether the merge was
     successful.  If this is not set to true then the merge target file
     timestamp is checked and the merge assumed to have been successful
     if the file has been updated, otherwise the user is prompted to
     indicate the success of the merge.

mergetool.keepBackup
     After performing a merge, the original file with conflict markers
     can be saved as a file with a `.orig' extension.  If this variable
     is set to `false' then this file is not preserved.  Defaults to
     `true' (i.e. keep the backup files).

mergetool.keepTemporaries
     When invoking a custom merge tool, git uses a set of temporary
     files to pass to the tool. If the tool returns an error and this
     variable is set to `true', then these temporary files will be
     preserved, otherwise they will be removed after the tool has
     exited. Defaults to `false'.

mergetool.prompt
     Prompt before each invocation of the merge resolution program.

notes.displayRef
     The (fully qualified) refname from which to show notes when
     showing commit messages.  The value of this variable can be set to
     a glob, in which case notes from all matching refs will be shown.
     You may also specify this configuration variable several times.  A
     warning will be issued for refs that do not exist, but a glob that
     does not match any refs is silently ignored.

     This setting can be overridden with the `GIT_NOTES_DISPLAY_REF'
     environment variable, which must be a colon separated list of refs
     or globs.

     The effective value of "core.notesRef" (possibly overridden by
     GIT_NOTES_REF) is also implicitly added to the list of refs to be
     displayed.

notes.rewrite.<command>
     When rewriting commits with <command> (currently `amend' or
     `rebase') and this variable is set to `true', git automatically
     copies your notes from the original to the rewritten commit.
     Defaults to `true', but see "notes.rewriteRef" below.

notes.rewriteMode
     When copying notes during a rewrite (see the
     "notes.rewrite.<command>" option), determines what to do if the
     target commit already has a note.  Must be one of `overwrite',
     `concatenate', or `ignore'.  Defaults to `concatenate'.

     This setting can be overridden with the `GIT_NOTES_REWRITE_MODE'
     environment variable.

notes.rewriteRef
     When copying notes during a rewrite, specifies the (fully
     qualified) ref whose notes should be copied.  The ref may be a
     glob, in which case notes in all matching refs will be copied.
     You may also specify this configuration several times.

     Does not have a default value; you must configure this variable to
     enable note rewriting.  Set it to `refs/notes/commits' to enable
     rewriting for the default commit notes.

     This setting can be overridden with the `GIT_NOTES_REWRITE_REF'
     environment variable, which must be a colon separated list of refs
     or globs.

pack.window
     The size of the window used by git-pack-objects(1) when no window
     size is given on the command line. Defaults to 10.

pack.depth
     The maximum delta depth used by git-pack-objects(1) when no
     maximum depth is given on the command line. Defaults to 50.

pack.windowMemory
     The window memory size limit used by git-pack-objects(1) when no
     limit is given on the command line.  The value can be suffixed
     with "k", "m", or "g".  Defaults to 0, meaning no limit.

pack.compression
     An integer -1..9, indicating the compression level for objects in
     a pack file. -1 is the zlib default. 0 means no compression, and
     1..9 are various speed/size tradeoffs, 9 being slowest.  If not
     set,  defaults to core.compression.  If that is not set,  defaults
     to -1, the zlib default, which is "a default compromise between
     speed and compression (currently equivalent to level 6)."

     Note that changing the compression level will not automatically
     recompress all existing objects. You can force recompression by
     passing the -F option to git-repack(1).

pack.deltaCacheSize
     The maximum memory in bytes used for caching deltas in
     git-pack-objects(1) before writing them out to a pack.  This cache
     is used to speed up the writing object phase by not having to
     recompute the final delta result once the best match for all
     objects is found.  Repacking large repositories on machines which
     are tight with memory might be badly impacted by this though,
     especially if this cache pushes the system into swapping.  A value
     of 0 means no limit. The smallest size of 1 byte may be used to
     virtually disable this cache. Defaults to 256 MiB.

pack.deltaCacheLimit
     The maximum size of a delta, that is cached in
     git-pack-objects(1). This cache is used to speed up the writing
     object phase by not having to recompute the final delta result
     once the best match for all objects is found. Defaults to 1000.

pack.threads
     Specifies the number of threads to spawn when searching for best
     delta matches.  This requires that git-pack-objects(1) be compiled
     with pthreads otherwise this option is ignored with a warning.
     This is meant to reduce packing time on multiprocessor machines.
     The required amount of memory for the delta search window is
     however multiplied by the number of threads.  Specifying 0 will
     cause git to auto-detect the number of CPU’s and set the number
     of threads accordingly.

pack.indexVersion
     Specify the default pack index version.  Valid values are 1 for
     legacy pack index used by Git versions prior to 1.5.2, and 2 for
     the new pack index with capabilities for packs larger than 4 GB as
     well as proper protection against the repacking of corrupted
     packs.  Version 2 is the default.  Note that version 2 is enforced
     and this config option ignored whenever the corresponding pack is
     larger than 2 GB.

     If you have an old git that does not understand the version 2
     `*.idx' file, cloning or fetching over a non native protocol (e.g.
     "http" and "rsync") that will copy both `*.pack' file and
     corresponding `*.idx' file from the other side may give you a
     repository that cannot be accessed with your older version of git.
     If the `*.pack' file is smaller than 2 GB, however, you can use
     git-index-pack(1) on the *.pack file to regenerate the `*.idx'
     file.

pack.packSizeLimit
     The maximum size of a pack.  This setting only affects packing to
     a file when repacking, i.e. the git:// protocol is unaffected.  It
     can be overridden by the `--max-pack-size' option of
     git-repack(1). The minimum size allowed is limited to 1 MiB. The
     default is unlimited.  Common unit suffixes of _k_, _m_, or _g_ are
     supported.

pager.<cmd>
     If the value is boolean, turns on or off pagination of the output
     of a particular git subcommand when writing to a tty.  Otherwise,
     turns on pagination for the subcommand using the pager specified
     by the value of `pager.<cmd>'.  If `--paginate' or `--no-pager' is
     specified on the command line, it takes precedence over this
     option.  To disable pagination for all commands, set `core.pager'
     or `GIT_PAGER' to `cat'.

pretty.<name>
     Alias for a -pretty= format string, as specified in git-log(1).
     Any aliases defined here can be used just as the built-in pretty
     formats could. For example, running `git config pretty.changelog
     "format:* %H %s"' would cause the invocation `git log
     --pretty=changelog' to be equivalent to running `git log
     "--pretty=format:* %H %s"'.  Note that an alias with the same name
     as a built-in format will be silently ignored.

pull.rebase
     When true, rebase branches on top of the fetched branch, instead
     of merging the default branch from the default remote when "git
     pull" is run. See "branch.<name>.rebase" for setting this on a
     per-branch basis.

     *NOTE*: this is a possibly dangerous operation; do *not* use it
     unless you understand the implications (see git-rebase(1) for
     details).

pull.octopus
     The default merge strategy to use when pulling multiple branches
     at once.

pull.twohead
     The default merge strategy to use when pulling a single branch.

push.default
     Defines the action git push should take if no refspec is given on
     the command line, no refspec is configured in the remote, and no
     refspec is implied by any of the options given on the command
     line. Possible values are:

        * `nothing' - do not push anything.

        * `matching' - push all branches having the same name in both
          ends.  This is for those who prepare all the branches into a
          publishable shape and then push them out with a single
          command.  It is not appropriate for pushing into a repository
          shared by multiple users, since locally stalled branches will
          attempt a non-fast forward push if other users updated the
          branch.  This is currently the default, but Git 2.0 will
          change the default to `simple'.

        * `upstream' - push the current branch to its upstream branch.
          With this, `git push' will update the same remote ref as the
          one which is merged by `git pull', making `push' and `pull'
          symmetrical.  See "branch.<name>.merge" for how to configure
          the upstream branch.

        * `simple' - like `upstream', but refuses to push if the
          upstream branch’s name is different from the local one.
          This is the safest option and is well-suited for beginners.
          It will become the default in Git 2.0.

        * `current' - push the current branch to a branch of the same
          name.

     The `simple', `current' and `upstream' modes are for those who
     want to push out a single branch after finishing work, even when
     the other branches are not yet ready to be pushed out. If you are
     working with other people to push into the same shared repository,
     you would want to use one of these.

rebase.stat
     Whether to show a diffstat of what changed upstream since the last
     rebase. False by default.

rebase.autosquash
     If set to true enable _-autosquash_ option by default.

receive.autogc
     By default, git-receive-pack will run "git-gc -auto" after
     receiving data from git-push and updating refs.  You can stop it
     by setting this variable to false.

receive.fsckObjects
     If it is set to true, git-receive-pack will check all received
     objects. It will abort in the case of a malformed object or a
     broken link. The result of an abort are only dangling objects.
     Defaults to false. If not set, the value of `transfer.fsckObjects'
     is used instead.

receive.unpackLimit
     If the number of objects received in a push is below this limit
     then the objects will be unpacked into loose object files. However
     if the number of received objects equals or exceeds this limit
     then the received pack will be stored as a pack, after adding any
     missing delta bases.  Storing the pack from a push can make the
     push operation complete faster, especially on slow filesystems.
     If not set, the value of `transfer.unpackLimit' is used instead.

receive.denyDeletes
     If set to true, git-receive-pack will deny a ref update that
     deletes the ref. Use this to prevent such a ref deletion via a
     push.

receive.denyDeleteCurrent
     If set to true, git-receive-pack will deny a ref update that
     deletes the currently checked out branch of a non-bare repository.

receive.denyCurrentBranch
     If set to true or "refuse", git-receive-pack will deny a ref update
     to the currently checked out branch of a non-bare repository.
     Such a push is potentially dangerous because it brings the HEAD
     out of sync with the index and working tree. If set to "warn",
     print a warning of such a push to stderr, but allow the push to
     proceed. If set to false or "ignore", allow such pushes with no
     message. Defaults to "refuse".

receive.denyNonFastForwards
     If set to true, git-receive-pack will deny a ref update which is
     not a fast-forward. Use this to prevent such an update via a push,
     even if that push is forced. This configuration variable is set
     when initializing a shared repository.

receive.updateserverinfo
     If set to true, git-receive-pack will run git-update-server-info
     after receiving data from git-push and updating refs.

remote.<name>.url
     The URL of a remote repository.  See git-fetch(1) or git-push(1).

remote.<name>.pushurl
     The push URL of a remote repository.  See git-push(1).

remote.<name>.proxy
     For remotes that require curl (http, https and ftp), the URL to
     the proxy to use for that remote.  Set to the empty string to
     disable proxying for that remote.

remote.<name>.fetch
     The default set of "refspec" for git-fetch(1). See git-fetch(1).

remote.<name>.push
     The default set of "refspec" for git-push(1). See git-push(1).

remote.<name>.mirror
     If true, pushing to this remote will automatically behave as if
     the `--mirror' option was given on the command line.

remote.<name>.skipDefaultUpdate
     If true, this remote will be skipped by default when updating
     using git-fetch(1) or the `update' subcommand of git-remote(1).

remote.<name>.skipFetchAll
     If true, this remote will be skipped by default when updating
     using git-fetch(1) or the `update' subcommand of git-remote(1).

remote.<name>.receivepack
     The default program to execute on the remote side when pushing.
     See option -receive-pack of git-push(1).

remote.<name>.uploadpack
     The default program to execute on the remote side when fetching.
     See option -upload-pack of git-fetch-pack(1).

remote.<name>.tagopt
     Setting this value to -no-tags disables automatic tag following
     when fetching from remote <name>. Setting it to -tags will fetch
     every tag from remote <name>, even if they are not reachable from
     remote branch heads. Passing these flags directly to git-fetch(1)
     can override this setting. See options -tags and -no-tags of
     git-fetch(1).

remote.<name>.vcs
     Setting this to a value <vcs> will cause git to interact with the
     remote with the git-remote-<vcs> helper.

remotes.<group>
     The list of remotes which are fetched by "git remote update
     <group>".  See git-remote(1).

repack.usedeltabaseoffset
     By default, git-repack(1) creates packs that use delta-base
     offset. If you need to share your repository with git older than
     version 1.4.4, either directly or via a dumb protocol such as
     http, then you need to set this option to "false" and repack.
     Access from old git versions over the native protocol are
     unaffected by this option.

rerere.autoupdate
     When set to true, `git-rerere' updates the index with the
     resulting contents after it cleanly resolves conflicts using
     previously recorded resolution.  Defaults to false.

rerere.enabled
     Activate recording of resolved conflicts, so that identical
     conflict hunks can be resolved automatically, should they be
     encountered again.  By default, git-rerere(1) is enabled if there
     is an `rr-cache' directory under the `$GIT_DIR', e.g. if "rerere"
     was previously used in the repository.

sendemail.identity
     A configuration identity. When given, causes values in the
     _sendemail.<identity>_ subsection to take precedence over values
     in the _sendemail_ section. The default identity is the value of
     _sendemail.identity_.

sendemail.smtpencryption
     See git-send-email(1) for description.  Note that this setting is
     not subject to the _identity_ mechanism.

sendemail.smtpssl
     Deprecated alias for _sendemail.smtpencryption = ssl_.

sendemail.<identity>.*
     Identity-specific versions of the _sendemail.*_ parameters found
     below, taking precedence over those when the this identity is
     selected, through command-line or _sendemail.identity_.

sendemail.aliasesfile
sendemail.aliasfiletype
sendemail.bcc
sendemail.cc
sendemail.cccmd
sendemail.chainreplyto
sendemail.confirm
sendemail.envelopesender
sendemail.from
sendemail.multiedit
sendemail.signedoffbycc
sendemail.smtppass
sendemail.suppresscc
sendemail.suppressfrom
sendemail.to
sendemail.smtpdomain
sendemail.smtpserver
sendemail.smtpserverport
sendemail.smtpserveroption
sendemail.smtpuser
sendemail.thread
sendemail.validate
     See git-send-email(1) for description.

sendemail.signedoffcc
     Deprecated alias for _sendemail.signedoffbycc_.

showbranch.default
     The default set of branches for git-show-branch(1).  See
     git-show-branch(1).

status.relativePaths
     By default, git-status(1) shows paths relative to the current
     directory. Setting this variable to `false' shows paths relative
     to the repository root (this was the default for git prior to
     v1.5.4).

status.showUntrackedFiles
     By default, git-status(1) and git-commit(1) show files which are
     not currently tracked by Git. Directories which contain only
     untracked files, are shown with the directory name only. Showing
     untracked files means that Git needs to lstat() all all the files
     in the whole repository, which might be slow on some systems. So,
     this variable controls how the commands displays the untracked
     files. Possible values are:

        * `no' - Show no untracked files.

        * `normal' - Show untracked files and directories.

        * `all' - Show also individual files in untracked directories.

     If this variable is not specified, it defaults to _normal_.  This
     variable can be overridden with the -u|-untracked-files option of
     git-status(1) and git-commit(1).

status.submodulesummary
     Defaults to false.  If this is set to a non zero number or true
     (identical to -1 or an unlimited number), the submodule summary
     will be enabled and a summary of commits for modified submodules
     will be shown (see -summary-limit option of git-submodule(1)).

submodule.<name>.path
submodule.<name>.url
submodule.<name>.update
     The path within this project, URL, and the updating strategy for a
     submodule.  These variables are initially populated by _git
     submodule init_; edit them to override the URL and other values
     found in the `.gitmodules' file.  See git-submodule(1) and
     gitmodules(5) for details.

submodule.<name>.fetchRecurseSubmodules
     This option can be used to control recursive fetching of this
     submodule. It can be overridden by using the
     -[no-]recurse-submodules command line option to "git fetch" and
     "git pull".  This setting will override that from in the
     gitmodules(5) file.

submodule.<name>.ignore
     Defines under what circumstances "git status" and the diff family
     show a submodule as modified. When set to "all", it will never be
     considered modified, "dirty" will ignore all changes to the
     submodules work tree and takes only differences between the HEAD
     of the submodule and the commit recorded in the superproject into
     account. "untracked" will additionally let submodules with
     modified tracked files in their work tree show up.  Using "none"
     (the default when this option is not set) also shows submodules
     that have untracked files in their work tree as changed.  This
     setting overrides any setting made in .gitmodules for this
     submodule, both settings can be overridden on the command line by
     using the "-ignore-submodules" option.

tar.umask
     This variable can be used to restrict the permission bits of tar
     archive entries.  The default is 0002, which turns off the world
     write bit.  The special value "user" indicates that the archiving
     user’s umask will be used instead.  See umask(2) and
     git-archive(1).

transfer.fsckObjects
     When `fetch.fsckObjects' or `receive.fsckObjects' are not set, the
     value of this variable is used instead.  Defaults to false.

transfer.unpackLimit
     When `fetch.unpackLimit' or `receive.unpackLimit' are not set, the
     value of this variable is used instead.  The default value is 100.

url.<base>.insteadOf
     Any URL that starts with this value will be rewritten to start,
     instead, with <base>. In cases where some site serves a large
     number of repositories, and serves them with multiple access
     methods, and some users need to use different access methods, this
     feature allows people to specify any of the equivalent URLs and
     have git automatically rewrite the URL to the best alternative for
     the particular user, even for a never-before-seen repository on
     the site.  When more than one insteadOf strings match a given URL,
     the longest match is used.

url.<base>.pushInsteadOf
     Any URL that starts with this value will not be pushed to;
     instead, it will be rewritten to start with <base>, and the
     resulting URL will be pushed to. In cases where some site serves a
     large number of repositories, and serves them with multiple access
     methods, some of which do not allow push, this feature allows
     people to specify a pull-only URL and have git automatically use
     an appropriate URL to push, even for a never-before-seen
     repository on the site.  When more than one pushInsteadOf strings
     match a given URL, the longest match is used.  If a remote has an
     explicit pushurl, git will ignore this setting for that remote.

user.email
     Your email address to be recorded in any newly created commits.
     Can be overridden by the _GIT_AUTHOR_EMAIL_,
     _GIT_COMMITTER_EMAIL_, and _EMAIL_ environment variables.  See
     git-commit-tree(1).

user.name
     Your full name to be recorded in any newly created commits.  Can
     be overridden by the _GIT_AUTHOR_NAME_ and _GIT_COMMITTER_NAME_
     environment variables.  See git-commit-tree(1).

user.signingkey
     If git-tag(1) is not selecting the key you want it to
     automatically when creating a signed tag, you can override the
     default selection with this variable.  This option is passed
     unchanged to gpg’s -local-user parameter, so you may specify a
     key using any method that gpg supports.

web.browser
     Specify a web browser that may be used by some commands.
     Currently only git-instaweb(1) and git-help(1) may use it.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-count-objects,  Up: Top

Name
****

git-count-objects — Count unpacked number of objects and their disk
consumption



Synopsis
********

     git count-objects [-v]


DESCRIPTION
***********

This counts the number of unpacked object files and disk space consumed
by them, to help you decide when it is a good time to repack.



OPTIONS
*******

-v
-verbose
     In addition to the number of loose objects and disk space
     consumed, it reports the number of in-pack objects, number of
     packs, disk space consumed by those packs, and number of objects
     that can be removed by running `git prune-packed'.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-credential-cache--daemon,  Up: Top

Name
****

git-credential-cache-daemon — Temporarily store user credentials in
memory



Synopsis
********

     git credential-cache—daemon <socket>


DESCRIPTION
***********

     *Note*

     You probably don’t want to invoke this command yourself; it is
     started automatically when you use git-credential-cache(1).

   This command listens on the Unix domain socket specified by
`<socket>' for `git-credential-cache' clients. Clients may store and
retrieve credentials. Each credential is held for a timeout specified
by the client; once no credentials are held, the daemon exits.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-credential-cache,  Up: Top

Name
****

git-credential-cache — Helper to temporarily store passwords in memory



Synopsis
********

     git config credential.helper 'cache [options]'


DESCRIPTION
***********

This command caches credentials in memory for use by future git
programs. The stored credentials never touch the disk, and are forgotten
after a configurable timeout.  The cache is accessible over a Unix
domain socket, restricted to the current user by filesystem permissions.

   You probably don’t want to invoke this command directly; it is
meant to be used as a credential helper by other parts of git. See
gitcredentials(7) or `EXAMPLES' below.



OPTIONS
*******

-timeout <seconds>
     Number of seconds to cache credentials (default: 900).

-socket <path>
     Use `<path>' to contact a running cache daemon (or start a new
     cache daemon if one is not started). Defaults to
     `~/.git-credential-cache/socket'. If your home directory is on a
     network-mounted filesystem, you may need to change this to a local
     filesystem.


CONTROLLING THE DAEMON
**********************

If you would like the daemon to exit early, forgetting all cached
credentials before their timeout, you can issue an `exit' action:

     git credential-cache exit


EXAMPLES
********

The point of this helper is to reduce the number of times you must type
your username or password. For example:

     $ git config credential.helper cache
     $ git push http://example.com/repo.git
     Username: <type your username>
     Password: <type your password>

     [work for 5 more minutes]
     $ git push http://example.com/repo.git
     [your credentials are used automatically]

   You can provide options via the credential.helper configuration
variable (this example drops the cache time to 5 minutes):

     $ git config credential.helper 'cache --timeout=300'


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-credential-store,  Up: Top

Name
****

git-credential-store — Helper to store credentials on disk



Synopsis
********

     git config credential.helper 'store [options]'


DESCRIPTION
***********

     *Note*

     Using this helper will store your passwords unencrypted on disk,
     protected only by filesystem permissions. If this is not an
     acceptable security tradeoff, try git-credential-cache(1), or find
     a helper that integrates with secure storage provided by your
     operating system.

   This command stores credentials indefinitely on disk for use by
future git programs.

   You probably don’t want to invoke this command directly; it is
meant to be used as a credential helper by other parts of git. See
gitcredentials(7) or `EXAMPLES' below.



OPTIONS
*******

-store=<path>
     Use `<path>' to store credentials. The file will have its
     filesystem permissions set to prevent other users on the system
     from reading it, but will not be encrypted or otherwise protected.
     Defaults to `~/.git-credentials'.


EXAMPLES
********

The point of this helper is to reduce the number of times you must type
your username or password. For example:

     $ git config credential.helper store
     $ git push http://example.com/repo.git
     Username: <type your username>
     Password: <type your password>

     [several days later]
     $ git push http://example.com/repo.git
     [your credentials are used automatically]


STORAGE FORMAT
**************

The `.git-credentials' file is stored in plaintext. Each credential is
stored on its own line as a URL like:

     https://user:pass@example.com

   When git needs authentication for a particular URL context,
credential-store will consider that context a pattern to match against
each entry in the credentials file.  If the protocol, hostname, and
username (if we already have one) match, then the password is returned
to git. See the discussion of configuration in gitcredentials(7) for
more information.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-credential,  Up: Top

Name
****

git-credential — Retrieve and store user credentials



Synopsis
********

     git credential <fill|approve|reject>


DESCRIPTION
***********

Git has an internal interface for storing and retrieving credentials
from system-specific helpers, as well as prompting the user for
usernames and passwords. The git-credential command exposes this
interface to scripts which may want to retrieve, store, or prompt for
credentials in the same manner as git. The design of this scriptable
interface models the internal C API; see the git credential API
(technical/api-credentials.txt) for more background on the concepts.

   git-credential takes an "action" option on the command-line (one of
`fill', `approve', or `reject') and reads a credential description on
stdin (see INPUT/OUTPUT FORMAT (*note INPUT/OUTPUT FORMAT::)).

   If the action is `fill', git-credential will attempt to add
"username" and "password" attributes to the description by reading
config files, by contacting any configured credential helpers, or by
prompting the user. The username and password attributes of the
credential description are then printed to stdout together with the
attributes already provided.

   If the action is `approve', git-credential will send the description
to any configured credential helpers, which may store the credential
for later use.

   If the action is `reject', git-credential will send the description
to any configured credential helpers, which may erase any stored
credential matching the description.

   If the action is `approve' or `reject', no output should be emitted.



TYPICAL USE OF GIT CREDENTIAL
*****************************

An application using git-credential will typically use `git credential'
following these steps:

  1. Generate a credential description based on the context.

     For example, if we want a password for
     `https://example.com/foo.git', we might generate the following
     credential description (don’t forget the blank line at the end;
     it tells `git credential' that the application finished feeding
     all the infomation it has):

          protocol=https
          host=example.com
          path=foo.git

  2. Ask git-credential to give us a username and password for this
     description. This is done by running `git credential fill',
     feeding the description from step (1) to its standard input. The
     complete credential description (including the credential per se,
     i.e. the login and password) will be produced on standard output,
     like:

          protocol=https
          host=example.com
          username=bob
          password=secr3t

     In most cases, this means the attributes given in the input will be
     repeated in the output, but git may also modify the credential
     description, for example by removing the `path' attribute when the
     protocol is HTTP(s) and `credential.useHttpPath' is false.

     If the `git credential' knew about the password, this step may not
     have involved the user actually typing this password (the user may
     have typed a password to unlock the keychain instead, or no user
     interaction was done if the keychain was already unlocked) before
     it returned `password=secr3t'.

  3. Use the credential (e.g., access the URL with the username and
     password from step (2)), and see if it’s accepted.

  4. Report on the success or failure of the password. If the
     credential allowed the operation to complete successfully, then it
     can be marked with an "approve" action to tell `git credential' to
     reuse it in its next invocation. If the credential was rejected
     during the operation, use the "reject" action so that `git
     credential' will ask for a new password in its next invocation. In
     either case, `git credential' should be fed with the credential
     description obtained from step (2) (which also contain the ones
     provided in step (1)).


INPUT/OUTPUT FORMAT
*******************

`git credential' reads and/or writes (depending on the action used)
credential information in its standard input/output. This information
can correspond either to keys for which `git credential' will obtain
the login/password information (e.g. host, protocol, path), or to the
actual credential data to be obtained (login/password).

   The credential is split into a set of named attributes, with one
attribute per line. Each attribute is specified by a key-value pair,
separated by an `=' (equals) sign, followed by a newline. The key may
contain any bytes except `=', newline, or NUL. The value may contain
any bytes except newline or NUL.  In both cases, all bytes are treated
as-is (i.e., there is no quoting, and one cannot transmit a value with
newline or NUL in it). The list of attributes is terminated by a blank
line or end-of-file.  Git understands the following attributes:

`protocol'
     The protocol over which the credential will be used (e.g.,
     `https').

`host'
     The remote hostname for a network credential.

`path'
     The path with which the credential will be used. E.g., for
     accessing a remote https repository, this will be the
     repository’s path on the server.

`username'
     The credential’s username, if we already have one (e.g., from a
     URL, from the user, or from a previously run helper).

`password'
     The credential’s password, if we are asking it to be stored.

`url'
     When this special attribute is read by `git credential', the value
     is parsed as a URL and treated as if its constituent parts were
     read (e.g., `url=https://example.com' would behave as if
     `protocol=https' and `host=example.com' had been provided). This
     can help callers avoid parsing URLs themselves.  Note that any
     components which are missing from the URL (e.g., there is no
     username in the example above) will be set to empty; if you want
     to provide a URL and override some attributes, provide the URL
     attribute first, followed by any overrides.


File: gitman.info,  Node: git-cvsexportcommit,  Up: Top

Name
****

git-cvsexportcommit — Export a single commit to a CVS checkout



Synopsis
********

     git cvsexportcommit [-h] [-u] [-v] [-c] [-P] [-p] [-a] [-d cvsroot]
             [-w cvsworkdir] [-W] [-f] [-m msgprefix] [PARENTCOMMIT] COMMITID


DESCRIPTION
***********

Exports a commit from GIT to a CVS checkout, making it easier to merge
patches from a git repository into a CVS repository.

   Specify the name of a CVS checkout using the -w switch or execute it
from the root of the CVS working copy. In the latter case GIT_DIR must
be defined. See examples below.

   It does its best to do the safe thing, it will check that the files
are unchanged and up to date in the CVS checkout, and it will not
autocommit by default.

   Supports file additions, removals, and commits that affect binary
files.

   If the commit is a merge commit, you must tell _git cvsexportcommit_
what parent the changeset should be done against.



OPTIONS
*******

-c
     Commit automatically if the patch applied cleanly. It will not
     commit if any hunks fail to apply or there were other problems.

-p
     Be pedantic (paranoid) when applying patches. Invokes patch with
     -fuzz=0

-a
     Add authorship information. Adds Author line, and Committer (if
     different from Author) to the message.

-d
     Set an alternative CVSROOT to use.  This corresponds to the CVS -d
     parameter.  Usually users will not want to set this, except if
     using CVS in an asymmetric fashion.

-f
     Force the merge even if the files are not up to date.

-P
     Force the parent commit, even if it is not a direct parent.

-m
     Prepend the commit message with the provided prefix.  Useful for
     patch series and the like.

-u
     Update affected files from CVS repository before attempting export.

-k
     Reverse CVS keyword expansion (e.g. $Revision: 1.2.3.4$ becomes
     $Revision$) in working CVS checkout before applying patch.

-w
     Specify the location of the CVS checkout to use for the export.
     This option does not require GIT_DIR to be set before execution if
     the current directory is within a git repository.  The default is
     the value of _cvsexportcommit.cvsdir_.

-W
     Tell cvsexportcommit that the current working directory is not only
     a Git checkout, but also the CVS checkout.  Therefore, Git will
     reset the working directory to the parent commit before proceeding.

-v
     Verbose.


CONFIGURATION
*************

cvsexportcommit.cvsdir
     The default location of the CVS checkout to use for the export.


EXAMPLES
********

Merge one patch into CVS
          $ export GIT_DIR=~/project/.git
          $ cd ~/project_cvs_checkout
          $ git cvsexportcommit -v <commit-sha1>
          $ cvs commit -F .msg <files>

Merge one patch into CVS (-c and -w options). The working directory is within the Git Repo
                  $ git cvsexportcommit -v -c -w ~/project_cvs_checkout <commit-sha1>

Merge pending patches into CVS automatically — only if you really know what you are doing
          $ export GIT_DIR=~/project/.git
          $ cd ~/project_cvs_checkout
          $ git cherry cvshead myhead | sed -n 's/^+ //p' | xargs -l1 git cvsexportcommit -c -p -v



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cvsimport,  Up: Top

Name
****

git-cvsimport — Salvage your data out of another SCM people love to
hate



Synopsis
********

     git cvsimport [-o <branch-for-HEAD>] [-h] [-v] [-d <CVSROOT>]
                   [-A <author-conv-file>] [-p <options-for-cvsps>] [-P <file>]
                   [-C <git_repository>] [-z <fuzz>] [-i] [-k] [-u] [-s <subst>]
                   [-a] [-m] [-M <regex>] [-S <regex>] [-L <commitlimit>]
                   [-r <remote>] [-R] [<CVS_module>]


DESCRIPTION
***********

Imports a CVS repository into git. It will either create a new
repository, or incrementally import into an existing one.

   Splitting the CVS log into patch sets is done by _cvsps_.  At least
version 2.1 is required.

   *WARNING:* for certain situations the import leads to incorrect
results.  Please see the section ISSUES (*note ISSUES::) for further
reference.

   You should *never* do any work of your own on the branches that are
created by _git cvsimport_.  By default initial import will create and
populate a "master" branch from the CVS repository’s main branch
which you’re free to work with; after that, you need to _git merge_
incremental imports, or any CVS branches, yourself.  It is advisable to
specify a named remote via -r to separate and protect the incoming
branches.

   If you intend to set up a shared public repository that all
developers can read/write, or if you want to use git-cvsserver(1), then
you probably want to make a bare clone of the imported repository, and
use the clone as the shared repository.  See gitcvs-migration(7).



OPTIONS
*******

-v
     Verbosity: let _cvsimport_ report what it is doing.

-d <CVSROOT>
     The root of the CVS archive. May be local (a simple path) or
     remote; currently, only the :local:, :ext: and :pserver: access
     methods are supported. If not given, _git cvsimport_ will try to
     read it from `CVS/Root'. If no such file exists, it checks for the
     `CVSROOT' environment variable.

<CVS_module>
     The CVS module you want to import. Relative to <CVSROOT>.  If not
     given, _git cvsimport_ tries to read it from `CVS/Repository'.

-C <target-dir>
     The git repository to import to.  If the directory doesn’t
     exist, it will be created.  Default is the current directory.

-r <remote>
     The git remote to import this CVS repository into.  Moves all CVS
     branches into remotes/<remote>/<branch> akin to the way _git
     clone_ uses _origin_ by default.

-o <branch-for-HEAD>
     When no remote is specified (via -r) the _HEAD_ branch from CVS is
     imported to the _origin_ branch within the git repository, as
     _HEAD_ already has a special meaning for git.  When a remote is
     specified the _HEAD_ branch is named remotes/<remote>/master
     mirroring _git clone_ behaviour.  Use this option if you want to
     import into a different branch.

     Use _-o master_ for continuing an import that was initially done by
     the old cvs2git tool.

-i
     Import-only: don’t perform a checkout after importing.  This
     option ensures the working directory and index remain untouched
     and will not create them if they do not exist.

-k
     Kill keywords: will extract files with _-kk_ from the CVS archive
     to avoid noisy changesets. Highly recommended, but off by default
     to preserve compatibility with early imported trees.

-u
     Convert underscores in tag and branch names to dots.

-s <subst>
     Substitute the character "/" in branch names with <subst>

-p <options-for-cvsps>
     Additional options for cvsps.  The options _-u_ and _-A_ are
     implicit and should not be used here.

     If you need to pass multiple options, separate them with a comma.

-z <fuzz>
     Pass the timestamp fuzz factor to cvsps, in seconds. If unset,
     cvsps defaults to 300s.

-P <cvsps-output-file>
     Instead of calling cvsps, read the provided cvsps output file.
     Useful for debugging or when cvsps is being handled outside
     cvsimport.

-m
     Attempt to detect merges based on the commit message. This option
     will enable default regexes that try to capture the source branch
     name from the commit message.

-M <regex>
     Attempt to detect merges based on the commit message with a custom
     regex. It can be used with _-m_ to enable the default regexes as
     well. You must escape forward slashes.

     The regex must capture the source branch name in $1.

     This option can be used several times to provide several detection
     regexes.

-S <regex>
     Skip paths matching the regex.

-a
     Import all commits, including recent ones. cvsimport by default
     skips commits that have a timestamp less than 10 minutes ago.

-L <limit>
     Limit the number of commits imported. Workaround for cases where
     cvsimport leaks memory.

-A <author-conv-file>
     CVS by default uses the Unix username when writing its commit
     logs. Using this option and an author-conv-file in this format

                  exon=Andreas Ericsson <ae@op5.se>
                  spawn=Simon Pawn <spawn@frog-pond.org>

     _git cvsimport_ will make it appear as those authors had their
     GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL set properly all along.

     For convenience, this data is saved to `$GIT_DIR/cvs-authors' each
     time the _-A_ option is provided and read from that same file each
     time _git cvsimport_ is run.

     It is not recommended to use this feature if you intend to export
     changes back to CVS again later with _git cvsexportcommit_.

-R
     Generate a `$GIT_DIR/cvs-revisions' file containing a mapping from
     CVS revision numbers to newly-created Git commit IDs.  The
     generated file will contain one line for each (filename, revision)
     pair imported; each line will look like

          src/widget.c 1.1 1d862f173cdc7325b6fa6d2ae1cfd61fd1b512b7

     The revision data is appended to the file if it already exists,
     for use when doing incremental imports.

     This option may be useful if you have CVS revision numbers stored
     in commit messages, bug-tracking systems, email archives, and the
     like.

-h
     Print a short usage message and exit.


OUTPUT
******

If _-v_ is specified, the script reports what it is doing.

   Otherwise, success is indicated the Unix way, i.e. by simply exiting
with a zero exit status.



ISSUES
******

Problems related to timestamps:

   * If timestamps of commits in the CVS repository are not stable
     enough to be used for ordering commits changes may show up in the
     wrong order.

   * If any files were ever "cvs import"ed more than once (e.g., import
     of more than one vendor release) the HEAD contains the wrong
     content.

   * If the timestamp order of different files cross the revision order
     within the commit matching time window the order of commits may be
     wrong.

   Problems related to branches:

   * Branches on which no commits have been made are not imported.

   * All files from the branching point are added to a branch even if
     never added in CVS.

   * This applies to files added to the source branch *after* a daughter
     branch was created: if previously no commit was made on the
     daughter branch they will erroneously be added to the daughter
     branch in git.

   Problems related to tags:

   * Multiple tags on the same revision are not imported.

   If you suspect that any of these issues may apply to the repository
you want to import consider using these alternative tools which proved
to be more stable in practice:

   * cvs2git (part of cvs2svn), `http://cvs2svn.tigris.org'

   * parsecvs, `http://cgit.freedesktop.org/~keithp/parsecvs'


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cvsserver,  Up: Top

Name
****

git-cvsserver — A CVS server emulator for git



Synopsis
********

SSH:

     export CVS_SERVER="git cvsserver"
     cvs -d :ext:user@server/path/repo.git co <HEAD_name>

   pserver (/etc/inetd.conf):

     cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver

   Usage:

     git-cvsserver [options] [pserver|server] [<directory> …]


OPTIONS
*******

All these options obviously only make sense if enforced by the server
side.  They have been implemented to resemble the git-daemon(1) options
as closely as possible.

-base-path <path>
     Prepend _path_ to requested CVSROOT

-strict-paths
     Don’t allow recursing into subdirectories

-export-all
     Don’t check for `gitcvs.enabled' in config. You also have to
     specify a list of allowed directories (see below) if you want to
     use this option.

-V
-version
     Print version information and exit

-h
-H
-help
     Print usage information and exit

<directory>
     You can specify a list of allowed directories. If no directories
     are given, all are allowed. This is an additional restriction,
     gitcvs access still needs to be enabled by the `gitcvs.enabled'
     config option unless _-export-all_ was given, too.


DESCRIPTION
***********

This application is a CVS emulation layer for git.

   It is highly functional. However, not all methods are implemented,
and for those methods that are implemented, not all switches are
implemented.

   Testing has been done using both the CLI CVS client, and the Eclipse
CVS plugin. Most functionality works fine with both of these clients.



LIMITATIONS
***********

CVS clients cannot tag, branch or perform GIT merges.

   _git-cvsserver_ maps GIT branches to CVS modules. This is very
different from what most CVS users would expect since in CVS modules
usually represent one or more directories.



INSTALLATION
************

  1. If you are going to offer CVS access via pserver, add a line in
     /etc/inetd.conf like

             cvspserver stream tcp nowait nobody git-cvsserver pserver

     Note: Some inetd servers let you specify the name of the executable
     independently of the value of argv[0] (i.e. the name the program
     assumes it was executed with). In this case the correct line in
     /etc/inetd.conf looks like

             cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver

     Only anonymous access is provided by pserve by default. To commit
     you will have to create pserver accounts, simply add a
     gitcvs.authdb setting in the config file of the repositories you
     want the cvsserver to allow writes to, for example:

             [gitcvs]
                  authdb = /etc/cvsserver/passwd

     The format of these files is username followed by the crypted
     password, for example:

             myuser:$1Oyx5r9mdGZ2
             myuser:$1$BA)@$vbnMJMDym7tA32AamXrm./

     You can use the _htpasswd_ facility that comes with Apache to make
     these files, but Apache’s MD5 crypt method differs from the one
     used by most C library’s crypt() function, so don’t use the -m
     option.

     Alternatively you can produce the password with perl’s crypt()
     operator:

             perl -e 'my ($user, $pass) = @ARGV; printf "%s:%s\n", $user, crypt($user, $pass)' $USER password

     Then provide your password via the pserver method, for example:

             cvs -d:pserver:someuser:somepassword <at> server/path/repo.git co <HEAD_name>

     No special setup is needed for SSH access, other than having GIT
     tools in the PATH. If you have clients that do not accept the
     CVS_SERVER environment variable, you can rename _git-cvsserver_ to
     `cvs'.

     Note: Newer CVS versions (>= 1.12.11) also support specifying
     CVS_SERVER directly in CVSROOT like

          cvs -d ":ext;CVS_SERVER=git cvsserver:user@server/path/repo.git" co <HEAD_name>

     This has the advantage that it will be saved in your _CVS/Root_
     files and you don’t need to worry about always setting the
     correct environment variable.  SSH users restricted to _git-shell_
     don’t need to override the default with CVS_SERVER (and
     shouldn’t) as _git-shell_ understands `cvs' to mean
     _git-cvsserver_ and pretends that the other end runs the real
     _cvs_ better.

  2. For each repo that you want accessible from CVS you need to edit
     config in the repo and add the following section.

             [gitcvs]
                  enabled=1
                  # optional for debugging
                  logfile=/path/to/logfile

     Note: you need to ensure each user that is going to invoke
     _git-cvsserver_ has write access to the log file and to the
     database (see Database Backend (*note Database Backend::). If you
     want to offer write access over SSH, the users of course also need
     write access to the git repository itself.

     You also need to ensure that each repository is "bare" (without a
     git index file) for `cvs commit' to work. See gitcvs-migration(7).

     All configuration variables can also be overridden for a specific
     method of access. Valid method names are "ext" (for SSH access)
     and "pserver". The following example configuration would disable
     pserver access while still allowing access over SSH.

             [gitcvs]
                  enabled=0

             [gitcvs "ext"]
                  enabled=1

  3. If you didn’t specify the CVSROOT/CVS_SERVER directly in the
     checkout command, automatically saving it in your _CVS/Root_
     files, then you need to set them explicitly in your environment.
     CVSROOT should be set as per normal, but the directory should
     point at the appropriate git repo.  As above, for SSH clients
     _not_ restricted to _git-shell_, CVS_SERVER should be set to
     _git-cvsserver_.

               export CVSROOT=:ext:user@server:/var/git/project.git
               export CVS_SERVER="git cvsserver"

  4. For SSH clients that will make commits, make sure their server-side
     .ssh/environment files (or .bashrc, etc., according to their
     specific shell) export appropriate values for GIT_AUTHOR_NAME,
     GIT_AUTHOR_EMAIL, GIT_COMMITTER_NAME, and GIT_COMMITTER_EMAIL.
     For SSH clients whose login shell is bash, .bashrc may be a
     reasonable alternative.

  5. Clients should now be able to check out the project. Use the CVS
     _module_ name to indicate what GIT _head_ you want to check out.
     This also sets the name of your newly checked-out directory,
     unless you tell it otherwise with `-d <dir_name>'.  For example,
     this checks out _master_ branch to the `project-master' directory:

               cvs co -d project-master master



Database Backend
****************

_git-cvsserver_ uses one database per git head (i.e. CVS module) to
store information about the repository to maintain consistent CVS
revision numbers. The database needs to be updated (i.e. written to)
after every commit.

   If the commit is done directly by using `git' (as opposed to using
_git-cvsserver_) the update will need to happen on the next repository
access by _git-cvsserver_, independent of access method and requested
operation.

   That means that even if you offer only read access (e.g. by using
the pserver method), _git-cvsserver_ should have write access to the
database to work reliably (otherwise you need to make sure that the
database is up-to-date any time _git-cvsserver_ is executed).

   By default it uses SQLite databases in the git directory, named
`gitcvs.<module_name>.sqlite'. Note that the SQLite backend creates
temporary files in the same directory as the database file on write so
it might not be enough to grant the users using _git-cvsserver_ write
access to the database file without granting them write access to the
directory, too.

   The database can not be reliably regenerated in a consistent form
after the branch it is tracking has changed.  Example: For merged
branches, _git-cvsserver_ only tracks one branch of development, and
after a _git merge_ an incrementally updated database may track a
different branch than a database regenerated from scratch, causing
inconsistent CVS revision numbers. `git-cvsserver' has no way of
knowing which branch it would have picked if it had been run
incrementally pre-merge. So if you have to fully or partially (from old
backup) regenerate the database, you should be suspicious of
pre-existing CVS sandboxes.

   You can configure the database backend with the following
configuration variables:



Configuring database backend
============================

_git-cvsserver_ uses the Perl DBI module. Please also read its
documentation if changing these variables, especially about
`DBI->connect()'.

gitcvs.dbname
     Database name. The exact meaning depends on the selected database
     driver, for SQLite this is a filename.  Supports variable
     substitution (see below). May not contain semicolons (`;').
     Default: _%Ggitcvs.%m.sqlite_

gitcvs.dbdriver
     Used DBI driver. You can specify any available driver for this
     here, but it might not work. cvsserver is tested with
     _DBD::SQLite_, reported to work with _DBD::Pg_, and reported *not*
     to work with _DBD::mysql_.  Please regard this as an experimental
     feature. May not contain colons (`:').  Default: _SQLite_

gitcvs.dbuser
     Database user. Only useful if setting `dbdriver', since SQLite has
     no concept of database users. Supports variable substitution (see
     below).

gitcvs.dbpass
     Database password.  Only useful if setting `dbdriver', since
     SQLite has no concept of database passwords.

gitcvs.dbTableNamePrefix
     Database table name prefix.  Supports variable substitution (see
     below).  Any non-alphabetic characters will be replaced with
     underscores.

   All variables can also be set per access method, see above (*note
configaccessmethod::).



Variable substitution
---------------------

In `dbdriver' and `dbuser' you can use the following variables:

%G
     git directory name

%g
     git directory name, where all characters except for alpha-numeric
     ones, `.', and `-' are replaced with `_' (this should make it
     easier to use the directory name in a filename if wanted)

%m
     CVS module/git head name

%a
     access method (one of "ext" or "pserver")

%u
     Name of the user running _git-cvsserver_.  If no name can be
     determined, the numeric uid is used.


ENVIRONMENT
***********

These variables obviate the need for command-line options in some
circumstances, allowing easier restricted usage through git-shell.

   GIT_CVSSERVER_BASE_PATH takes the place of the argument to
-base-path.

   GIT_CVSSERVER_ROOT specifies a single-directory whitelist. The
repository must still be configured to allow access through
git-cvsserver, as described above.

   When these environment variables are set, the corresponding
command-line arguments may not be used.



Eclipse CVS Client Notes
************************

To get a checkout with the Eclipse CVS client:

  1. Select "Create a new project → From CVS checkout"

  2. Create a new location. See the notes below for details on how to
     choose the right protocol.

  3. Browse the _modules_ available. It will give you a list of the
     heads in the repository. You will not be able to browse the tree
     from there. Only the heads.

  4. Pick _HEAD_ when it asks what branch/tag to check out. Untick the
     "launch commit wizard" to avoid committing the .project file.

   Protocol notes: If you are using anonymous access via pserver, just
select that.  Those using SSH access should choose the _ext_ protocol,
and configure _ext_ access on the
Preferences→Team→CVS→ExtConnection pane. Set CVS_SERVER to "`git
cvsserver'". Note that password support is not good when using _ext_,
you will definitely want to have SSH keys setup.

   Alternatively, you can just use the non-standard extssh protocol
that Eclipse offer. In that case CVS_SERVER is ignored, and you will
have to replace the cvs utility on the server with _git-cvsserver_ or
manipulate your `.bashrc' so that calling _cvs_ effectively calls
_git-cvsserver_.



Clients known to work
*********************

   * CVS 1.12.9 on Debian

   * CVS 1.11.17 on MacOSX (from Fink package)

   * Eclipse 3.0, 3.1.2 on MacOSX (see Eclipse CVS Client Notes)

   * TortoiseCVS


Operations supported
********************

All the operations required for normal use are supported, including
checkout, diff, status, update, log, add, remove, commit.  Legacy
monitoring operations are not supported (edit, watch and related).
Exports and tagging (tags and branches) are not supported at this stage.



CRLF Line Ending Conversions
============================

By default the server leaves the _-k_ mode blank for all files, which
causes the CVS client to treat them as a text files, subject to
end-of-line conversion on some platforms.

   You can make the server use the end-of-line conversion attributes to
set the _-k_ modes for files by setting the `gitcvs.usecrlfattr' config
variable.  See gitattributes(5) for more information about end-of-line
conversion.

   Alternatively, if `gitcvs.usecrlfattr' config is not enabled or the
attributes do not allow automatic detection for a filename, then the
server uses the `gitcvs.allbinary' config for the default setting.  If
`gitcvs.allbinary' is set, then file not otherwise specified will
default to _-kb_ mode. Otherwise the _-k_ mode is left blank. But if
`gitcvs.allbinary' is set to "guess", then the correct _-k_ mode will
be guessed based on the contents of the file.

   For best consistency with _cvs_, it is probably best to override the
defaults by setting `gitcvs.usecrlfattr' to true, and
`gitcvs.allbinary' to "guess".



Dependencies
************

_git-cvsserver_ depends on DBD::SQLite.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-daemon,  Up: Top

Name
****

git-daemon — A really simple server for git repositories



Synopsis
********

     git daemon [-verbose] [-syslog] [-export-all]
                  [-timeout=<n>] [-init-timeout=<n>] [-max-connections=<n>]
                  [-strict-paths] [-base-path=<path>] [-base-path-relaxed]
                  [-user-path | -user-path=<path>]
                  [-interpolated-path=<pathtemplate>]
                  [-reuseaddr] [-detach] [-pid-file=<file>]
                  [-enable=<service>] [-disable=<service>]
                  [-allow-override=<service>] [-forbid-override=<service>]
                  [-inetd | [-listen=<host_or_ipaddr>] [-port=<n>] [-user=<user> [-group=<group>]]
                  [<directory>…]


DESCRIPTION
***********

A really simple TCP git daemon that normally listens on port
"DEFAULT_GIT_PORT" aka 9418.  It waits for a connection asking for a
service, and will serve that service if it is enabled.

   It verifies that the directory has the magic file
"git-daemon-export-ok", and it will refuse to export any git directory
that hasn’t explicitly been marked for export this way (unless the
_-export-all_ parameter is specified). If you pass some directory paths
as _git daemon_ arguments, you can further restrict the offers to a
whitelist comprising of those.

   By default, only `upload-pack' service is enabled, which serves _git
fetch-pack_ and _git ls-remote_ clients, which are invoked from _git
fetch_, _git pull_, and _git clone_.

   This is ideally suited for read-only updates, i.e., pulling from git
repositories.

   An `upload-archive' also exists to serve _git archive_.



OPTIONS
*******

-strict-paths
     Match paths exactly (i.e. don’t allow "/foo/repo" when the real
     path is "/foo/repo.git" or "/foo/repo/.git") and don’t do
     user-relative paths.  _git daemon_ will refuse to start when this
     option is enabled and no whitelist is specified.

-base-path=<path>
     Remap all the path requests as relative to the given path.  This
     is sort of "GIT root" - if you run _git daemon_ with
     _-base-path=/srv/git_ on example.com, then if you later try to pull
     _git://example.com/hello.git_, _git daemon_ will interpret the path
     as _/srv/git/hello.git_.

-base-path-relaxed
     If -base-path is enabled and repo lookup fails, with this option
     _git daemon_ will attempt to lookup without prefixing the base
     path.  This is useful for switching to -base-path usage, while
     still allowing the old paths.

-interpolated-path=<pathtemplate>
     To support virtual hosting, an interpolated path template can be
     used to dynamically construct alternate paths.  The template
     supports %H for the target hostname as supplied by the client but
     converted to all lowercase, %CH for the canonical hostname, %IP
     for the server’s IP address, %P for the port number, and %D for
     the absolute path of the named repository.  After interpolation,
     the path is validated against the directory whitelist.

-export-all
     Allow pulling from all directories that look like GIT repositories
     (have the _objects_ and _refs_ subdirectories), even if they do
     not have the _git-daemon-export-ok_ file.

-inetd
     Have the server run as an inetd service. Implies -syslog.
     Incompatible with -detach, -port, -listen, -user and -group
     options.

-listen=<host_or_ipaddr>
     Listen on a specific IP address or hostname.  IP addresses can be
     either an IPv4 address or an IPv6 address if supported.  If IPv6
     is not supported, then -listen=hostname is also not supported and
     -listen must be given an IPv4 address.  Can be given more than
     once.  Incompatible with _-inetd_ option.

-port=<n>
     Listen on an alternative port.  Incompatible with _-inetd_ option.

-init-timeout=<n>
     Timeout (in seconds) between the moment the connection is
     established and the client request is received (typically a rather
     low value, since that should be basically immediate).

-timeout=<n>
     Timeout (in seconds) for specific client sub-requests. This
     includes the time it takes for the server to process the
     sub-request and the time spent waiting for the next client’s
     request.

-max-connections=<n>
     Maximum number of concurrent clients, defaults to 32.  Set it to
     zero for no limit.

-syslog
     Log to syslog instead of stderr. Note that this option does not
     imply -verbose, thus by default only error conditions will be
     logged.

-user-path
-user-path=<path>
     Allow ~user notation to be used in requests.  When specified with
     no parameter, requests to git://host/~alice/foo is taken as a
     request to access _foo_ repository in the home directory of user
     `alice'.  If `--user-path=path' is specified, the same request is
     taken as a request to access `path/foo' repository in the home
     directory of user `alice'.

-verbose
     Log details about the incoming connections and requested files.

-reuseaddr
     Use SO_REUSEADDR when binding the listening socket.  This allows
     the server to restart without waiting for old connections to time
     out.

-detach
     Detach from the shell. Implies -syslog.

-pid-file=<file>
     Save the process id in _file_.  Ignored when the daemon is run
     under `--inetd'.

-user=<user>
-group=<group>
     Change daemon’s uid and gid before entering the service loop.
     When only `--user' is given without `--group', the primary group
     ID for the user is used.  The values of the option are given to
     `getpwnam(3)' and `getgrnam(3)' and numeric IDs are not supported.

     Giving these options is an error when used with `--inetd'; use the
     facility of inet daemon to achieve the same before spawning _git
     daemon_ if needed.

-enable=<service>
-disable=<service>
     Enable/disable the service site-wide per default.  Note that a
     service disabled site-wide can still be enabled per repository if
     it is marked overridable and the repository enables the service
     with a configuration item.

-allow-override=<service>
-forbid-override=<service>
     Allow/forbid overriding the site-wide default with per repository
     configuration.  By default, all the services are overridable.

-informative-errors
-no-informative-errors
     When informative errors are turned on, git-daemon will report more
     verbose errors to the client, differentiating conditions like "no
     such repository" from "repository not exported". This is more
     convenient for clients, but may leak information about the
     existence of unexported repositories.  When informative errors are
     not enabled, all errors report "access denied" to the client. The
     default is -no-informative-errors.

<directory>
     A directory to add to the whitelist of allowed directories. Unless
     -strict-paths is specified this will also include subdirectories
     of each named directory.


SERVICES
********

These services can be globally enabled/disabled using the command line
options of this command.  If a finer-grained control is desired (e.g.
to allow _git archive_ to be run against only in a few selected
repositories the daemon serves), the per-repository configuration file
can be used to enable or disable them.

upload-pack
     This serves _git fetch-pack_ and _git ls-remote_ clients.  It is
     enabled by default, but a repository can disable it by setting
     `daemon.uploadpack' configuration item to `false'.

upload-archive
     This serves _git archive -remote_.  It is disabled by default, but
     a repository can enable it by setting `daemon.uploadarch'
     configuration item to `true'.

receive-pack
     This serves _git send-pack_ clients, allowing anonymous push.  It
     is disabled by default, as there is _no_ authentication in the
     protocol (in other words, anybody can push anything into the
     repository, including removal of refs).  This is solely meant for
     a closed LAN setting where everybody is friendly.  This service
     can be enabled by setting `daemon.receivepack' configuration item
     to `true'.


EXAMPLES
********

We assume the following in /etc/services
          $ grep 9418 /etc/services
          git             9418/tcp                # Git Version Control System

_git daemon_ as inetd server
     To set up _git daemon_ as an inetd service that handles any
     repository under the whitelisted set of directories, /pub/foo and
     /pub/bar, place an entry like the following into /etc/inetd all on
     one line:

                  git stream tcp nowait nobody  /usr/bin/git
                          git daemon --inetd --verbose --export-all
                          /pub/foo /pub/bar

_git daemon_ as inetd server for virtual hosts
     To set up _git daemon_ as an inetd service that handles
     repositories for different virtual hosts, `www.example.com' and
     `www.example.org', place an entry like the following into
     `/etc/inetd' all on one line:

                  git stream tcp nowait nobody /usr/bin/git
                          git daemon --inetd --verbose --export-all
                          --interpolated-path=/pub/%H%D
                          /pub/www.example.org/software
                          /pub/www.example.com/software
                          /software

     In this example, the root-level directory `/pub' will contain a
     subdirectory for each virtual host name supported.  Further, both
     hosts advertise repositories simply as
     `git://www.example.com/software/repo.git'.  For pre-1.4.0 clients,
     a symlink from `/software' into the appropriate default repository
     could be made as well.

_git daemon_ as regular daemon for virtual hosts
     To set up _git daemon_ as a regular, non-inetd service that
     handles repositories for multiple virtual hosts based on their IP
     addresses, start the daemon like this:

                  git daemon --verbose --export-all
                          --interpolated-path=/pub/%IP/%D
                          /pub/192.168.1.200/software
                          /pub/10.10.220.23/software

     In this example, the root-level directory `/pub' will contain a
     subdirectory for each virtual host IP address supported.
     Repositories can still be accessed by hostname though, assuming
     they correspond to these IP addresses.

selectively enable/disable services per repository
     To enable _git archive -remote_ and disable _git fetch_ against a
     repository, have the following in the configuration file in the
     repository (that is the file _config_ next to _HEAD_, _refs_ and
     _objects_).

                  [daemon]
                          uploadpack = false
                          uploadarch = true



ENVIRONMENT
***********

_git daemon_ will set REMOTE_ADDR to the IP address of the client that
connected to it, if the IP address is available. REMOTE_ADDR will be
available in the environment of hooks called when services are
performed.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-describe,  Up: Top

Name
****

git-describe — Show the most recent tag that is reachable from a
commit



Synopsis
********

     git describe [-all] [-tags] [-contains] [-abbrev=<n>] <committish>…
     git describe [-all] [-tags] [-contains] [-abbrev=<n>] -dirty[=<mark>]


DESCRIPTION
***********

The command finds the most recent tag that is reachable from a commit.
If the tag points to the commit, then only the tag is shown.
Otherwise, it suffixes the tag name with the number of additional
commits on top of the tagged object and the abbreviated object name of
the most recent commit.

   By default (without -all or -tags) `git describe' only shows
annotated tags.  For more information about creating annotated tags see
the -a and -s options to git-tag(1).



OPTIONS
*******

<committish>…
     Committish object names to describe.

-dirty[=<mark>]
     Describe the working tree.  It means describe HEAD and appends
     <mark> (`-dirty' by default) if the working tree is dirty.

-all
     Instead of using only the annotated tags, use any ref found in
     `refs/' namespace.  This option enables matching any known branch,
     remote-tracking branch, or lightweight tag.

-tags
     Instead of using only the annotated tags, use any tag found in
     `refs/tags' namespace.  This option enables matching a lightweight
     (non-annotated) tag.

-contains
     Instead of finding the tag that predates the commit, find the tag
     that comes after the commit, and thus contains it.  Automatically
     implies -tags.

-abbrev=<n>
     Instead of using the default 7 hexadecimal digits as the
     abbreviated object name, use <n> digits, or as many digits as
     needed to form a unique object name.  An <n> of 0 will suppress
     long format, only showing the closest tag.

-candidates=<n>
     Instead of considering only the 10 most recent tags as candidates
     to describe the input committish consider up to <n> candidates.
     Increasing <n> above 10 will take slightly longer but may produce
     a more accurate result.  An <n> of 0 will cause only exact matches
     to be output.

-exact-match
     Only output exact matches (a tag directly references the supplied
     commit).  This is a synonym for -candidates=0.

-debug
     Verbosely display information about the searching strategy being
     employed to standard error.  The tag name will still be printed to
     standard out.

-long
     Always output the long format (the tag, the number of commits and
     the abbreviated commit name) even when it matches a tag.  This is
     useful when you want to see parts of the commit object name in
     "describe" output, even when the commit in question happens to be
     a tagged version.  Instead of just emitting the tag name, it will
     describe such a commit as v1.2-0-gdeadbee (0th commit since tag
     v1.2 that points at object deadbee….).

-match <pattern>
     Only consider tags matching the given pattern (can be used to avoid
     leaking private tags made from the repository).

-always
     Show uniquely abbreviated commit object as fallback.


EXAMPLES
********

With something like git.git current tree, I get:

     [torvalds@g5 git]$ git describe parent
     v1.0.4-14-g2414721

   i.e. the current head of my "parent" branch is based on v1.0.4, but
since it has a few commits on top of that, describe has added the
number of additional commits ("14") and an abbreviated object name for
the commit itself ("2414721") at the end.

   The number of additional commits is the number of commits which
would be displayed by "git log v1.0.4..parent".  The hash suffix is
"-g" + 7-char abbreviation for the tip commit of parent (which was
`2414721b194453f058079d897d13c4e377f92dc6').  The "g" prefix stands for
"git" and is used to allow describing the version of a software
depending on the SCM the software is managed with. This is useful in an
environment where people may use different SCMs.

   Doing a _git describe_ on a tag-name will just show the tag name:

     [torvalds@g5 git]$ git describe v1.0.4
     v1.0.4

   With -all, the command can use branch heads as references, so the
output shows the reference path as well:

     [torvalds@g5 git]$ git describe --all --abbrev=4 v1.0.5^2
     tags/v1.0.0-21-g975b

     [torvalds@g5 git]$ git describe --all --abbrev=4 HEAD^
     heads/lt/describe-7-g975b

   With -abbrev set to 0, the command can be used to find the closest
tagname without any suffix:

     [torvalds@g5 git]$ git describe --abbrev=0 v1.0.5^2
     tags/v1.0.0

   Note that the suffix you get if you type these commands today may be
longer than what Linus saw above when he ran these commands, as your
git repository may have new commits whose object names begin with 975b
that did not exist back then, and "-g975b" suffix alone may not be
sufficient to disambiguate these commits.



SEARCH STRATEGY
***************

For each committish supplied, _git describe_ will first look for a tag
which tags exactly that commit.  Annotated tags will always be
preferred over lightweight tags, and tags with newer dates will always
be preferred over tags with older dates.  If an exact match is found,
its name will be output and searching will stop.

   If an exact match was not found, _git describe_ will walk back
through the commit history to locate an ancestor commit which has been
tagged.  The ancestor’s tag will be output along with an abbreviation
of the input committish’s SHA1.

   If multiple tags were found during the walk then the tag which has
the fewest commits different from the input committish will be selected
and output.  Here fewest commits different is defined as the number of
commits which would be shown by `git log tag..input' will be the
smallest number of commits possible.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-diff-files,  Up: Top

Name
****

git-diff-files — Compares files in the working tree and the index



Synopsis
********

     git diff-files [-q] [-0|-1|-2|-3|-c|-cc] [<common diff options>] [<path>…]


DESCRIPTION
***********

Compares the files in the working tree and the index.  When paths are
specified, compares only those named paths.  Otherwise all entries in
the index are compared.  The output format is the same as for _git
diff-index_ and _git diff-tree_.



OPTIONS
*******

-p
-u
-patch
     Generate patch (see section on generating patches).

-U<n>
-unified=<n>
     Generate diffs with <n> lines of context instead of the usual
     three.  Implies `-p'.

-raw
     Generate the raw format.  This is the default.

-patch-with-raw
     Synonym for `-p --raw'.

-minimal
     Spend extra time to make sure the smallest possible diff is
     produced.

-patience
     Generate a diff using the "patience diff" algorithm.

-histogram
     Generate a diff using the "histogram diff" algorithm.

-stat[=<width>[,<name-width>[,<count>]]]
     Generate a diffstat. By default, as much space as necessary will
     be used for the filename part, and the rest for the graph part.
     Maximum width defaults to terminal width, or 80 columns if not
     connected to a terminal, and can be overridden by `<width>'. The
     width of the filename part can be limited by giving another width
     `<name-width>' after a comma. The width of the graph part can be
     limited by using `--stat-graph-width=<width>' (affects all
     commands generating a stat graph) or by setting
     `diff.statGraphWidth=<width>' (does not affect `git format-patch').
     By giving a third parameter `<count>', you can limit the output to
     the first `<count>' lines, followed by `...' if there are more.

     These parameters can also be set individually with
     `--stat-width=<width>', `--stat-name-width=<name-width>' and
     `--stat-count=<count>'.

-numstat
     Similar to `--stat', but shows number of added and deleted lines
     in decimal notation and pathname without abbreviation, to make it
     more machine friendly.  For binary files, outputs two `-' instead
     of saying `0 0'.

-shortstat
     Output only the last line of the `--stat' format containing total
     number of modified files, as well as number of added and deleted
     lines.

-dirstat[=<param1,param2,…>]
     Output the distribution of relative amount of changes for each
     sub-directory. The behavior of `--dirstat' can be customized by
     passing it a comma separated list of parameters.  The defaults are
     controlled by the `diff.dirstat' configuration variable (see
     git-config(1)).  The following parameters are available:

    `changes'
          Compute the dirstat numbers by counting the lines that have
          been removed from the source, or added to the destination.
          This ignores the amount of pure code movements within a file.
          In other words, rearranging lines in a file is not counted
          as much as other changes.  This is the default behavior when
          no parameter is given.

    `lines'
          Compute the dirstat numbers by doing the regular line-based
          diff analysis, and summing the removed/added line counts.
          (For binary files, count 64-byte chunks instead, since binary
          files have no natural concept of lines). This is a more
          expensive `--dirstat' behavior than the `changes' behavior,
          but it does count rearranged lines within a file as much as
          other changes. The resulting output is consistent with what
          you get from the other `--*stat' options.

    `files'
          Compute the dirstat numbers by counting the number of files
          changed.  Each changed file counts equally in the dirstat
          analysis. This is the computationally cheapest `--dirstat'
          behavior, since it does not have to look at the file contents
          at all.

    `cumulative'
          Count changes in a child directory for the parent directory
          as well.  Note that when using `cumulative', the sum of the
          percentages reported may exceed 100%. The default
          (non-cumulative) behavior can be specified with the
          `noncumulative' parameter.

    <limit>
          An integer parameter specifies a cut-off percent (3% by
          default).  Directories contributing less than this percentage
          of the changes are not shown in the output.

     Example: The following will count changed files, while ignoring
     directories with less than 10% of the total amount of changed
     files, and accumulating child directory counts in the parent
     directories: `--dirstat=files,10,cumulative'.

-summary
     Output a condensed summary of extended header information such as
     creations, renames and mode changes.

-patch-with-stat
     Synonym for `-p --stat'.

-z
     When `--raw', `--numstat', `--name-only' or `--name-status' has
     been given, do not munge pathnames and use NULs as output field
     terminators.

     Without this option, each pathname output will have TAB, LF,
     double quotes, and backslash characters replaced with `\t', `\n',
     `\"', and `\\', respectively, and the pathname will be enclosed in
     double quotes if any of those replacements occurred.

-name-only
     Show only names of changed files.

-name-status
     Show only names and status of changed files. See the description
     of the `--diff-filter' option on what the status letters mean.

-submodule[=<format>]
     Specify how differences in submodules are shown.  When
     `--submodule' or `--submodule=log' is given, the _log_ format is
     used.  This format lists the commits in the range like
     git-submodule(1) `summary' does.  Omitting the `--submodule'
     option or specifying `--submodule=short', uses the _short_ format.
     This format just shows the names of the commits at the beginning
     and end of the range.

-color[=<when>]
     Show colored diff.  The value must be `always' (the default for
     `<when>'), `never', or `auto'.  The default value is `never'.

-no-color
     Turn off colored diff.  It is the same as `--color=never'.

-word-diff[=<mode>]
     Show a word diff, using the <mode> to delimit changed words.  By
     default, words are delimited by whitespace; see
     `--word-diff-regex' below.  The <mode> defaults to _plain_, and
     must be one of:

    color
          Highlight changed words using only colors.  Implies `--color'.

    plain
          Show words as `[-removed-]' and `{+added+}'.  Makes no
          attempts to escape the delimiters if they appear in the input,
          so the output may be ambiguous.

    porcelain
          Use a special line-based format intended for script
          consumption.  Added/removed/unchanged runs are printed in the
          usual unified diff format, starting with a `+'/`-'/` `
          character at the beginning of the line and extending to the
          end of the line.  Newlines in the input are represented by a
          tilde `~' on a line of its own.

    none
          Disable word diff again.

     Note that despite the name of the first mode, color is used to
     highlight the changed parts in all modes if enabled.

-word-diff-regex=<regex>
     Use <regex> to decide what a word is, instead of considering runs
     of non-whitespace to be a word.  Also implies `--word-diff' unless
     it was already enabled.

     Every non-overlapping match of the <regex> is considered a word.
     Anything between these matches is considered whitespace and
     ignored(!) for the purposes of finding differences.  You may want
     to append `|[^[:space:]]' to your regular expression to make sure
     that it matches all non-whitespace characters.  A match that
     contains a newline is silently truncated(!) at the newline.

     The regex can also be set via a diff driver or configuration
     option, see gitattributes(1) or git-config(1).  Giving it
     explicitly overrides any diff driver or configuration setting.
     Diff drivers override configuration settings.

-color-words[=<regex>]
     Equivalent to `--word-diff=color' plus (if a regex was specified)
     `--word-diff-regex=<regex>'.

-no-renames
     Turn off rename detection, even when the configuration file gives
     the default to do so.

-check
     Warn if changes introduce whitespace errors.  What are considered
     whitespace errors is controlled by `core.whitespace'
     configuration.  By default, trailing whitespaces (including lines
     that solely consist of whitespaces) and a space character that is
     immediately followed by a tab character inside the initial indent
     of the line are considered whitespace errors.  Exits with non-zero
     status if problems are found. Not compatible with -exit-code.

-full-index
     Instead of the first handful of characters, show the full pre- and
     post-image blob object names on the "index" line when generating
     patch format output.

-binary
     In addition to `--full-index', output a binary diff that can be
     applied with `git-apply'.

-abbrev[=<n>]
     Instead of showing the full 40-byte hexadecimal object name in
     diff-raw format output and diff-tree header lines, show only a
     partial prefix.  This is independent of the `--full-index' option
     above, which controls the diff-patch output format.  Non default
     number of digits can be specified with `--abbrev=<n>'.

-B[<n>][/<m>]
-break-rewrites[=[<n>][/<m>]]
     Break complete rewrite changes into pairs of delete and create.
     This serves two purposes:

     It affects the way a change that amounts to a total rewrite of a
     file not as a series of deletion and insertion mixed together with
     a very few lines that happen to match textually as the context,
     but as a single deletion of everything old followed by a single
     insertion of everything new, and the number `m' controls this
     aspect of the -B option (defaults to 60%). `-B/70%' specifies that
     less than 30% of the original should remain in the result for git
     to consider it a total rewrite (i.e. otherwise the resulting patch
     will be a series of deletion and insertion mixed together with
     context lines).

     When used with -M, a totally-rewritten file is also considered as
     the source of a rename (usually -M only considers a file that
     disappeared as the source of a rename), and the number `n'
     controls this aspect of the -B option (defaults to 50%). `-B20%'
     specifies that a change with addition and deletion compared to 20%
     or more of the file’s size are eligible for being picked up as a
     possible source of a rename to another file.

-M[<n>]
-find-renames[=<n>]
     Detect renames.  If `n' is specified, it is a threshold on the
     similarity index (i.e. amount of addition/deletions compared to the
     file’s size). For example, `-M90%' means git should consider a
     delete/add pair to be a rename if more than 90% of the file
     hasn’t changed.

-C[<n>]
-find-copies[=<n>]
     Detect copies as well as renames.  See also `--find-copies-harder'.
     If `n' is specified, it has the same meaning as for `-M<n>'.

-find-copies-harder
     For performance reasons, by default, `-C' option finds copies only
     if the original file of the copy was modified in the same
     changeset.  This flag makes the command inspect unmodified files
     as candidates for the source of copy.  This is a very expensive
     operation for large projects, so use it with caution.  Giving more
     than one `-C' option has the same effect.

-D
-irreversible-delete
     Omit the preimage for deletes, i.e. print only the header but not
     the diff between the preimage and `/dev/null'. The resulting patch
     is not meant to be applied with `patch' nor `git apply'; this is
     solely for people who want to just concentrate on reviewing the
     text after the change. In addition, the output obviously lack
     enough information to apply such a patch in reverse, even manually,
     hence the name of the option.

     When used together with `-B', omit also the preimage in the
     deletion part of a delete/create pair.

-l<num>
     The `-M' and `-C' options require O(n^2) processing time where n
     is the number of potential rename/copy targets.  This option
     prevents rename/copy detection from running if the number of
     rename/copy targets exceeds the specified number.

-diff-filter=[(A|C|D|M|R|T|U|X|B)…[*]]
     Select only files that are Added (`A'), Copied (`C'), Deleted
     (`D'), Modified (`M'), Renamed (`R'), have their type (i.e.
     regular file, symlink, submodule, …) changed (`T'), are Unmerged
     (`U'), are Unknown (`X'), or have had their pairing Broken (`B').
     Any combination of the filter characters (including none) can be
     used.  When `*' (All-or-none) is added to the combination, all
     paths are selected if there is any file that matches other
     criteria in the comparison; if there is no file that matches other
     criteria, nothing is selected.

-S<string>
     Look for differences that introduce or remove an instance of
     <string>. Note that this is different than the string simply
     appearing in diff output; see the _pickaxe_ entry in
     gitdiffcore(7) for more details.

-G<regex>
     Look for differences whose added or removed line matches the given
     <regex>.

-pickaxe-all
     When `-S' or `-G' finds a change, show all the changes in that
     changeset, not just the files that contain the change in <string>.

-pickaxe-regex
     Make the <string> not a plain string but an extended POSIX regex
     to match.

-O<orderfile>
     Output the patch in the order specified in the <orderfile>, which
     has one shell glob pattern per line.

-R
     Swap two inputs; that is, show differences from index or on-disk
     file to tree contents.

-relative[=<path>]
     When run from a subdirectory of the project, it can be told to
     exclude changes outside the directory and show pathnames relative
     to it with this option.  When you are not in a subdirectory (e.g.
     in a bare repository), you can name which subdirectory to make the
     output relative to by giving a <path> as an argument.

-a
-text
     Treat all files as text.

-ignore-space-at-eol
     Ignore changes in whitespace at EOL.

-b
-ignore-space-change
     Ignore changes in amount of whitespace.  This ignores whitespace
     at line end, and considers all other sequences of one or more
     whitespace characters to be equivalent.

-w
-ignore-all-space
     Ignore whitespace when comparing lines.  This ignores differences
     even if one line has whitespace where the other line has none.

-inter-hunk-context=<lines>
     Show the context between diff hunks, up to the specified number of
     lines, thereby fusing hunks that are close to each other.

-W
-function-context
     Show whole surrounding functions of changes.

-exit-code
     Make the program exit with codes similar to diff(1).  That is, it
     exits with 1 if there were differences and 0 means no differences.

-quiet
     Disable all output of the program. Implies `--exit-code'.

-ext-diff
     Allow an external diff helper to be executed. If you set an
     external diff driver with gitattributes(5), you need to use this
     option with git-log(1) and friends.

-no-ext-diff
     Disallow external diff drivers.

-textconv
-no-textconv
     Allow (or disallow) external text conversion filters to be run
     when comparing binary files. See gitattributes(5) for details.
     Because textconv filters are typically a one-way conversion, the
     resulting diff is suitable for human consumption, but cannot be
     applied. For this reason, textconv filters are enabled by default
     only for git-diff(1) and git-log(1), but not for
     git-format-patch(1) or diff plumbing commands.

-ignore-submodules[=<when>]
     Ignore changes to submodules in the diff generation. <when> can be
     either "none", "untracked", "dirty" or "all", which is the default
     Using "none" will consider the submodule modified when it either
     contains untracked or modified files or its HEAD differs from the
     commit recorded in the superproject and can be used to override
     any settings of the _ignore_ option in git-config(1) or
     gitmodules(5). When "untracked" is used submodules are not
     considered dirty when they only contain untracked content (but
     they are still scanned for modified content). Using "dirty"
     ignores all changes to the work tree of submodules, only changes
     to the commits stored in the superproject are shown (this was the
     behavior until 1.7.0). Using "all" hides all changes to submodules.

-src-prefix=<prefix>
     Show the given source prefix instead of "a/".

-dst-prefix=<prefix>
     Show the given destination prefix instead of "b/".

-no-prefix
     Do not show any source or destination prefix.

   For more detailed explanation on these common options, see also
gitdiffcore(7).

-1 -base
-2 -ours
-3 -theirs
-0
     Diff against the "base" version, "our branch" or "their branch"
     respectively.  With these options, diffs for merged entries are
     not shown.

     The default is to diff against our branch (-2) and the cleanly
     resolved paths.  The option -0 can be given to omit diff output
     for unmerged entries and just show "Unmerged".

-c
-cc
     This compares stage 2 (our branch), stage 3 (their branch) and the
     working tree file and outputs a combined diff, similar to the way
     _diff-tree_ shows a merge commit with these flags.

-q
     Remain silent even on nonexistent files


Raw output format
*****************

The raw output format from "git-diff-index", "git-diff-tree",
"git-diff-files" and "git diff -raw" are very similar.

   These commands all compare two sets of things; what is compared
differs:

git-diff-index <tree-ish>
     compares the <tree-ish> and the files on the filesystem.

git-diff-index -cached <tree-ish>
     compares the <tree-ish> and the index.

git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…]
     compares the trees named by the two arguments.

git-diff-files [<pattern>…]
     compares the index and the files on the filesystem.

   The "git-diff-tree" command begins its output by printing the hash of
what is being compared. After that, all the commands print one output
line per changed file.

   An output line is formatted this way:

     in-place edit  :100644 100644 bcd1234... 0123456... M file0
     copy-edit      :100644 100644 abcd123... 1234567... C68 file1 file2
     rename-edit    :100644 100644 abcd123... 1234567... R86 file1 file3
     create         :000000 100644 0000000... 1234567... A file4
     delete         :100644 000000 1234567... 0000000... D file5
     unmerged       :000000 000000 0000000... 0000000... U file6

   That is, from the left to the right:

  1. a colon.

  2. mode for "src"; 000000 if creation or unmerged.

  3. a space.

  4. mode for "dst"; 000000 if deletion or unmerged.

  5. a space.

  6. sha1 for "src"; 0{40} if creation or unmerged.

  7. a space.

  8. sha1 for "dst"; 0{40} if creation, unmerged or "look at work tree".

  9. a space.

 10. status, followed by optional "score" number.

 11. a tab or a NUL when _-z_ option is used.

 12. path for "src"

 13. a tab or a NUL when _-z_ option is used; only exists for C or R.

 14. path for "dst"; only exists for C or R.

 15. an LF or a NUL when _-z_ option is used, to terminate the record.

   Possible status letters are:

   * A: addition of a file

   * C: copy of a file into a new one

   * D: deletion of a file

   * M: modification of the contents or mode of a file

   * R: renaming of a file

   * T: change in the type of the file

   * U: file is unmerged (you must complete the merge before it can be
     committed)

   * X: "unknown" change type (most probably a bug, please report it)

   Status letters C and R are always followed by a score (denoting the
percentage of similarity between the source and target of the move or
copy), and are the only ones to be so.

   <sha1> is shown as all 0’s if a file is new on the filesystem and
it is out of sync with the index.

   Example:

     :100644 100644 5be4a4...... 000000...... M file.c

   When `-z' option is not used, TAB, LF, and backslash characters in
pathnames are represented as `\t', `\n', and `\\', respectively.



diff format for merges
**********************

"git-diff-tree", "git-diff-files" and "git-diff -raw" can take _-c_ or
_-cc_ option to generate diff output also for merge commits.  The
output differs from the format described above in the following way:

  1. there is a colon for each parent

  2. there are more "src" modes and "src" sha1

  3. status is concatenated status characters for each parent

  4. no optional "score" number

  5. single path, only for "dst"

   Example:

     ::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM      describe.c

   Note that _combined diff_ lists only files which were modified from
all parents.



Generating patches with -p
**************************

When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
with a _-p_ option, "git diff" without the _-raw_ option, or "git log"
with the "-p" option, they do not produce the output described above;
instead they produce a patch file.  You can customize the creation of
such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS
environment variables.

   What the -p option produces is slightly different from the
traditional diff format:

  1. It is preceded with a "git diff" header that looks like this:

          diff --git a/file1 b/file2

     The `a/' and `b/' filenames are the same unless rename/copy is
     involved.  Especially, even for a creation or a deletion,
     `/dev/null' is _not_ used in place of the `a/' or `b/' filenames.

     When rename/copy is involved, `file1' and `file2' show the name of
     the source file of the rename/copy and the name of the file that
     rename/copy produces, respectively.

  2. It is followed by one or more extended header lines:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     File modes are printed as 6-digit octal numbers including the file
     type and file permission bits.

     Path names in extended headers do not include the `a/' and `b/'
     prefixes.

     The similarity index is the percentage of unchanged lines, and the
     dissimilarity index is the percentage of changed lines.  It is a
     rounded down integer, followed by a percent sign.  The similarity
     index value of 100% is thus reserved for two equal files, while
     100% dissimilarity means that no line from the old file made it
     into the new one.

     The index line includes the SHA-1 checksum before and after the
     change.  The <mode> is included if the file mode does not change;
     otherwise, separate lines indicate the old and the new mode.

  3. TAB, LF, double quote and backslash characters in pathnames are
     represented as `\t', `\n', `\"' and `\\', respectively.  If there
     is need for such substitution then the whole pathname is put in
     double quotes.

  4. All the `file1' files in the output refer to files before the
     commit, and all the `file2' files refer to files after the commit.
     It is incorrect to apply each change to each file sequentially.
     For example, this patch will swap a and b:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a


combined diff format
********************

Any diff-generating command can take the ‘-c` or `--cc' option to
produce a _combined diff_ when showing a merge. This is the default
format when showing merges with git-diff(1) or git-show(1). Note also
that you can give the `-m’ option to any of these commands to force
generation of diffs with individual parents of a merge.

   A _combined diff_ format looks like this:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. It is preceded with a "git diff" header, that looks like this
     (when _-c_ option is used):

          diff --combined file

     or like this (when _-cc_ option is used):

          diff --cc file

  2. It is followed by one or more extended header lines (this example
     shows a merge with two parents):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     The `mode <mode>,<mode>..<mode>' line appears only if at least one
     of the <mode> is different from the rest. Extended headers with
     information about detected contents movement (renames and copying
     detection) are designed to work with diff of two <tree-ish> and
     are not used by combined diff format.

  3. It is followed by two-line from-file/to-file header

          --- a/file
          +++ b/file

     Similar to two-line header for traditional _unified_ diff format,
     `/dev/null' is used to signal created or deleted files.

  4. Chunk header format is modified to prevent people from
     accidentally feeding it to `patch -p1'. Combined diff format was
     created for review of merge commit changes, and was not meant for
     apply. The change is similar to the change in the extended _index_
     header:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     There are (number of parents + 1) `@' characters in the chunk
     header for combined diff format.

   Unlike the traditional _unified_ diff format, which shows two files
A and B with a single column that has `-' (minus — appears in A
but removed in B), `+' (plus — missing in A but added to B), or
`" "' (space — unchanged) prefix, this format compares two or
more files file1, file2,… with one file X, and shows how X differs
from each of fileN.  One column for each of fileN is prepended to the
output line to note how X’s line is different from it.

   A `-' character in the column N means that the line appears in fileN
but it does not appear in the result.  A `+' character in the column N
means that the line appears in the result, and fileN does not have that
line (in other words, the line was added, from the point of view of
that parent).

   In the above example output, the function signature was changed from
both files (hence two `-' removals from both file1 and file2, plus `++'
to mean one line that was added does not appear in either file1 nor
file2).  Also eight other lines are the same from file1 but do not
appear in file2 (hence prefixed with `+').

   When shown by `git diff-tree -c', it compares the parents of a merge
commit with the merge result (i.e. file1..fileN are the parents).  When
shown by `git diff-files -c', it compares the two unresolved merge
parents with the working tree file (i.e. file1 is stage 2 aka "our
version", file2 is stage 3 aka "their version").



other diff formats
******************

The `--summary' option describes newly added, deleted, renamed and
copied files.  The `--stat' option adds diffstat(1) graph to the
output.  These options can be combined with other options, such as
`-p', and are meant for human consumption.

   When showing a change that involves a rename or a copy, `--stat'
output formats the pathnames compactly by combining common prefix and
suffix of the pathnames.  For example, a change that moves
`arch/i386/Makefile' to `arch/x86/Makefile' while modifying 4 lines
will be shown like this:

     arch/{i386 => x86}/Makefile    |   4 +--

   The `--numstat' option gives the diffstat(1) information but is
designed for easier machine consumption.  An entry in `--numstat'
output looks like this:

     1       2       README
     3       1       arch/{i386 => x86}/Makefile

   That is, from left to right:

  1. the number of added lines;

  2. a tab;

  3. the number of deleted lines;

  4. a tab;

  5. pathname (possibly with rename/copy information);

  6. a newline.

   When `-z' output option is in effect, the output is formatted this
way:

     1       2       README NUL
     3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL

   That is:

  1. the number of added lines;

  2. a tab;

  3. the number of deleted lines;

  4. a tab;

  5. a NUL (only exists if renamed/copied);

  6. pathname in preimage;

  7. a NUL (only exists if renamed/copied);

  8. pathname in postimage (only exists if renamed/copied);

  9. a NUL.

   The extra `NUL' before the preimage path in renamed case is to allow
scripts that read the output to tell if the current record being read is
a single-path record or a rename/copy record without reading ahead.
After reading added and deleted lines, reading up to `NUL' would yield
the pathname, but if that is `NUL', the record will show two paths.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-diff-index,  Up: Top

Name
****

git-diff-index — Compares content and mode of blobs between the index
and repository



Synopsis
********

     git diff-index [-m] [-cached] [<common diff options>] <tree-ish> [<path>…]


DESCRIPTION
***********

Compares the content and mode of the blobs found via a tree object with
the content of the current index and, optionally ignoring the stat
state of the file on disk.  When paths are specified, compares only
those named paths.  Otherwise all entries in the index are compared.



OPTIONS
*******

-p
-u
-patch
     Generate patch (see section on generating patches).

-U<n>
-unified=<n>
     Generate diffs with <n> lines of context instead of the usual
     three.  Implies `-p'.

-raw
     Generate the raw format.  This is the default.

-patch-with-raw
     Synonym for `-p --raw'.

-minimal
     Spend extra time to make sure the smallest possible diff is
     produced.

-patience
     Generate a diff using the "patience diff" algorithm.

-histogram
     Generate a diff using the "histogram diff" algorithm.

-stat[=<width>[,<name-width>[,<count>]]]
     Generate a diffstat. By default, as much space as necessary will
     be used for the filename part, and the rest for the graph part.
     Maximum width defaults to terminal width, or 80 columns if not
     connected to a terminal, and can be overridden by `<width>'. The
     width of the filename part can be limited by giving another width
     `<name-width>' after a comma. The width of the graph part can be
     limited by using `--stat-graph-width=<width>' (affects all
     commands generating a stat graph) or by setting
     `diff.statGraphWidth=<width>' (does not affect `git format-patch').
     By giving a third parameter `<count>', you can limit the output to
     the first `<count>' lines, followed by `...' if there are more.

     These parameters can also be set individually with
     `--stat-width=<width>', `--stat-name-width=<name-width>' and
     `--stat-count=<count>'.

-numstat
     Similar to `--stat', but shows number of added and deleted lines
     in decimal notation and pathname without abbreviation, to make it
     more machine friendly.  For binary files, outputs two `-' instead
     of saying `0 0'.

-shortstat
     Output only the last line of the `--stat' format containing total
     number of modified files, as well as number of added and deleted
     lines.

-dirstat[=<param1,param2,…>]
     Output the distribution of relative amount of changes for each
     sub-directory. The behavior of `--dirstat' can be customized by
     passing it a comma separated list of parameters.  The defaults are
     controlled by the `diff.dirstat' configuration variable (see
     git-config(1)).  The following parameters are available:

    `changes'
          Compute the dirstat numbers by counting the lines that have
          been removed from the source, or added to the destination.
          This ignores the amount of pure code movements within a file.
          In other words, rearranging lines in a file is not counted
          as much as other changes.  This is the default behavior when
          no parameter is given.

    `lines'
          Compute the dirstat numbers by doing the regular line-based
          diff analysis, and summing the removed/added line counts.
          (For binary files, count 64-byte chunks instead, since binary
          files have no natural concept of lines). This is a more
          expensive `--dirstat' behavior than the `changes' behavior,
          but it does count rearranged lines within a file as much as
          other changes. The resulting output is consistent with what
          you get from the other `--*stat' options.

    `files'
          Compute the dirstat numbers by counting the number of files
          changed.  Each changed file counts equally in the dirstat
          analysis. This is the computationally cheapest `--dirstat'
          behavior, since it does not have to look at the file contents
          at all.

    `cumulative'
          Count changes in a child directory for the parent directory
          as well.  Note that when using `cumulative', the sum of the
          percentages reported may exceed 100%. The default
          (non-cumulative) behavior can be specified with the
          `noncumulative' parameter.

    <limit>
          An integer parameter specifies a cut-off percent (3% by
          default).  Directories contributing less than this percentage
          of the changes are not shown in the output.

     Example: The following will count changed files, while ignoring
     directories with less than 10% of the total amount of changed
     files, and accumulating child directory counts in the parent
     directories: `--dirstat=files,10,cumulative'.

-summary
     Output a condensed summary of extended header information such as
     creations, renames and mode changes.

-patch-with-stat
     Synonym for `-p --stat'.

-z
     When `--raw', `--numstat', `--name-only' or `--name-status' has
     been given, do not munge pathnames and use NULs as output field
     terminators.

     Without this option, each pathname output will have TAB, LF,
     double quotes, and backslash characters replaced with `\t', `\n',
     `\"', and `\\', respectively, and the pathname will be enclosed in
     double quotes if any of those replacements occurred.

-name-only
     Show only names of changed files.

-name-status
     Show only names and status of changed files. See the description
     of the `--diff-filter' option on what the status letters mean.

-submodule[=<format>]
     Specify how differences in submodules are shown.  When
     `--submodule' or `--submodule=log' is given, the _log_ format is
     used.  This format lists the commits in the range like
     git-submodule(1) `summary' does.  Omitting the `--submodule'
     option or specifying `--submodule=short', uses the _short_ format.
     This format just shows the names of the commits at the beginning
     and end of the range.

-color[=<when>]
     Show colored diff.  The value must be `always' (the default for
     `<when>'), `never', or `auto'.  The default value is `never'.

-no-color
     Turn off colored diff.  It is the same as `--color=never'.

-word-diff[=<mode>]
     Show a word diff, using the <mode> to delimit changed words.  By
     default, words are delimited by whitespace; see
     `--word-diff-regex' below.  The <mode> defaults to _plain_, and
     must be one of:

    color
          Highlight changed words using only colors.  Implies `--color'.

    plain
          Show words as `[-removed-]' and `{+added+}'.  Makes no
          attempts to escape the delimiters if they appear in the input,
          so the output may be ambiguous.

    porcelain
          Use a special line-based format intended for script
          consumption.  Added/removed/unchanged runs are printed in the
          usual unified diff format, starting with a `+'/`-'/` `
          character at the beginning of the line and extending to the
          end of the line.  Newlines in the input are represented by a
          tilde `~' on a line of its own.

    none
          Disable word diff again.

     Note that despite the name of the first mode, color is used to
     highlight the changed parts in all modes if enabled.

-word-diff-regex=<regex>
     Use <regex> to decide what a word is, instead of considering runs
     of non-whitespace to be a word.  Also implies `--word-diff' unless
     it was already enabled.

     Every non-overlapping match of the <regex> is considered a word.
     Anything between these matches is considered whitespace and
     ignored(!) for the purposes of finding differences.  You may want
     to append `|[^[:space:]]' to your regular expression to make sure
     that it matches all non-whitespace characters.  A match that
     contains a newline is silently truncated(!) at the newline.

     The regex can also be set via a diff driver or configuration
     option, see gitattributes(1) or git-config(1).  Giving it
     explicitly overrides any diff driver or configuration setting.
     Diff drivers override configuration settings.

-color-words[=<regex>]
     Equivalent to `--word-diff=color' plus (if a regex was specified)
     `--word-diff-regex=<regex>'.

-no-renames
     Turn off rename detection, even when the configuration file gives
     the default to do so.

-check
     Warn if changes introduce whitespace errors.  What are considered
     whitespace errors is controlled by `core.whitespace'
     configuration.  By default, trailing whitespaces (including lines
     that solely consist of whitespaces) and a space character that is
     immediately followed by a tab character inside the initial indent
     of the line are considered whitespace errors.  Exits with non-zero
     status if problems are found. Not compatible with -exit-code.

-full-index
     Instead of the first handful of characters, show the full pre- and
     post-image blob object names on the "index" line when generating
     patch format output.

-binary
     In addition to `--full-index', output a binary diff that can be
     applied with `git-apply'.

-abbrev[=<n>]
     Instead of showing the full 40-byte hexadecimal object name in
     diff-raw format output and diff-tree header lines, show only a
     partial prefix.  This is independent of the `--full-index' option
     above, which controls the diff-patch output format.  Non default
     number of digits can be specified with `--abbrev=<n>'.

-B[<n>][/<m>]
-break-rewrites[=[<n>][/<m>]]
     Break complete rewrite changes into pairs of delete and create.
     This serves two purposes:

     It affects the way a change that amounts to a total rewrite of a
     file not as a series of deletion and insertion mixed together with
     a very few lines that happen to match textually as the context,
     but as a single deletion of everything old followed by a single
     insertion of everything new, and the number `m' controls this
     aspect of the -B option (defaults to 60%). `-B/70%' specifies that
     less than 30% of the original should remain in the result for git
     to consider it a total rewrite (i.e. otherwise the resulting patch
     will be a series of deletion and insertion mixed together with
     context lines).

     When used with -M, a totally-rewritten file is also considered as
     the source of a rename (usually -M only considers a file that
     disappeared as the source of a rename), and the number `n'
     controls this aspect of the -B option (defaults to 50%). `-B20%'
     specifies that a change with addition and deletion compared to 20%
     or more of the file’s size are eligible for being picked up as a
     possible source of a rename to another file.

-M[<n>]
-find-renames[=<n>]
     Detect renames.  If `n' is specified, it is a threshold on the
     similarity index (i.e. amount of addition/deletions compared to the
     file’s size). For example, `-M90%' means git should consider a
     delete/add pair to be a rename if more than 90% of the file
     hasn’t changed.

-C[<n>]
-find-copies[=<n>]
     Detect copies as well as renames.  See also `--find-copies-harder'.
     If `n' is specified, it has the same meaning as for `-M<n>'.

-find-copies-harder
     For performance reasons, by default, `-C' option finds copies only
     if the original file of the copy was modified in the same
     changeset.  This flag makes the command inspect unmodified files
     as candidates for the source of copy.  This is a very expensive
     operation for large projects, so use it with caution.  Giving more
     than one `-C' option has the same effect.

-D
-irreversible-delete
     Omit the preimage for deletes, i.e. print only the header but not
     the diff between the preimage and `/dev/null'. The resulting patch
     is not meant to be applied with `patch' nor `git apply'; this is
     solely for people who want to just concentrate on reviewing the
     text after the change. In addition, the output obviously lack
     enough information to apply such a patch in reverse, even manually,
     hence the name of the option.

     When used together with `-B', omit also the preimage in the
     deletion part of a delete/create pair.

-l<num>
     The `-M' and `-C' options require O(n^2) processing time where n
     is the number of potential rename/copy targets.  This option
     prevents rename/copy detection from running if the number of
     rename/copy targets exceeds the specified number.

-diff-filter=[(A|C|D|M|R|T|U|X|B)…[*]]
     Select only files that are Added (`A'), Copied (`C'), Deleted
     (`D'), Modified (`M'), Renamed (`R'), have their type (i.e.
     regular file, symlink, submodule, …) changed (`T'), are Unmerged
     (`U'), are Unknown (`X'), or have had their pairing Broken (`B').
     Any combination of the filter characters (including none) can be
     used.  When `*' (All-or-none) is added to the combination, all
     paths are selected if there is any file that matches other
     criteria in the comparison; if there is no file that matches other
     criteria, nothing is selected.

-S<string>
     Look for differences that introduce or remove an instance of
     <string>. Note that this is different than the string simply
     appearing in diff output; see the _pickaxe_ entry in
     gitdiffcore(7) for more details.

-G<regex>
     Look for differences whose added or removed line matches the given
     <regex>.

-pickaxe-all
     When `-S' or `-G' finds a change, show all the changes in that
     changeset, not just the files that contain the change in <string>.

-pickaxe-regex
     Make the <string> not a plain string but an extended POSIX regex
     to match.

-O<orderfile>
     Output the patch in the order specified in the <orderfile>, which
     has one shell glob pattern per line.

-R
     Swap two inputs; that is, show differences from index or on-disk
     file to tree contents.

-relative[=<path>]
     When run from a subdirectory of the project, it can be told to
     exclude changes outside the directory and show pathnames relative
     to it with this option.  When you are not in a subdirectory (e.g.
     in a bare repository), you can name which subdirectory to make the
     output relative to by giving a <path> as an argument.

-a
-text
     Treat all files as text.

-ignore-space-at-eol
     Ignore changes in whitespace at EOL.

-b
-ignore-space-change
     Ignore changes in amount of whitespace.  This ignores whitespace
     at line end, and considers all other sequences of one or more
     whitespace characters to be equivalent.

-w
-ignore-all-space
     Ignore whitespace when comparing lines.  This ignores differences
     even if one line has whitespace where the other line has none.

-inter-hunk-context=<lines>
     Show the context between diff hunks, up to the specified number of
     lines, thereby fusing hunks that are close to each other.

-W
-function-context
     Show whole surrounding functions of changes.

-exit-code
     Make the program exit with codes similar to diff(1).  That is, it
     exits with 1 if there were differences and 0 means no differences.

-quiet
     Disable all output of the program. Implies `--exit-code'.

-ext-diff
     Allow an external diff helper to be executed. If you set an
     external diff driver with gitattributes(5), you need to use this
     option with git-log(1) and friends.

-no-ext-diff
     Disallow external diff drivers.

-textconv
-no-textconv
     Allow (or disallow) external text conversion filters to be run
     when comparing binary files. See gitattributes(5) for details.
     Because textconv filters are typically a one-way conversion, the
     resulting diff is suitable for human consumption, but cannot be
     applied. For this reason, textconv filters are enabled by default
     only for git-diff(1) and git-log(1), but not for
     git-format-patch(1) or diff plumbing commands.

-ignore-submodules[=<when>]
     Ignore changes to submodules in the diff generation. <when> can be
     either "none", "untracked", "dirty" or "all", which is the default
     Using "none" will consider the submodule modified when it either
     contains untracked or modified files or its HEAD differs from the
     commit recorded in the superproject and can be used to override
     any settings of the _ignore_ option in git-config(1) or
     gitmodules(5). When "untracked" is used submodules are not
     considered dirty when they only contain untracked content (but
     they are still scanned for modified content). Using "dirty"
     ignores all changes to the work tree of submodules, only changes
     to the commits stored in the superproject are shown (this was the
     behavior until 1.7.0). Using "all" hides all changes to submodules.

-src-prefix=<prefix>
     Show the given source prefix instead of "a/".

-dst-prefix=<prefix>
     Show the given destination prefix instead of "b/".

-no-prefix
     Do not show any source or destination prefix.

   For more detailed explanation on these common options, see also
gitdiffcore(7).

<tree-ish>
     The id of a tree object to diff against.

-cached
     do not consider the on-disk file at all

-m
     By default, files recorded in the index but not checked out are
     reported as deleted.  This flag makes _git diff-index_ say that
     all non-checked-out files are up to date.


Raw output format
*****************

The raw output format from "git-diff-index", "git-diff-tree",
"git-diff-files" and "git diff -raw" are very similar.

   These commands all compare two sets of things; what is compared
differs:

git-diff-index <tree-ish>
     compares the <tree-ish> and the files on the filesystem.

git-diff-index -cached <tree-ish>
     compares the <tree-ish> and the index.

git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…]
     compares the trees named by the two arguments.

git-diff-files [<pattern>…]
     compares the index and the files on the filesystem.

   The "git-diff-tree" command begins its output by printing the hash of
what is being compared. After that, all the commands print one output
line per changed file.

   An output line is formatted this way:

     in-place edit  :100644 100644 bcd1234... 0123456... M file0
     copy-edit      :100644 100644 abcd123... 1234567... C68 file1 file2
     rename-edit    :100644 100644 abcd123... 1234567... R86 file1 file3
     create         :000000 100644 0000000... 1234567... A file4
     delete         :100644 000000 1234567... 0000000... D file5
     unmerged       :000000 000000 0000000... 0000000... U file6

   That is, from the left to the right:

  1. a colon.

  2. mode for "src"; 000000 if creation or unmerged.

  3. a space.

  4. mode for "dst"; 000000 if deletion or unmerged.

  5. a space.

  6. sha1 for "src"; 0{40} if creation or unmerged.

  7. a space.

  8. sha1 for "dst"; 0{40} if creation, unmerged or "look at work tree".

  9. a space.

 10. status, followed by optional "score" number.

 11. a tab or a NUL when _-z_ option is used.

 12. path for "src"

 13. a tab or a NUL when _-z_ option is used; only exists for C or R.

 14. path for "dst"; only exists for C or R.

 15. an LF or a NUL when _-z_ option is used, to terminate the record.

   Possible status letters are:

   * A: addition of a file

   * C: copy of a file into a new one

   * D: deletion of a file

   * M: modification of the contents or mode of a file

   * R: renaming of a file

   * T: change in the type of the file

   * U: file is unmerged (you must complete the merge before it can be
     committed)

   * X: "unknown" change type (most probably a bug, please report it)

   Status letters C and R are always followed by a score (denoting the
percentage of similarity between the source and target of the move or
copy), and are the only ones to be so.

   <sha1> is shown as all 0’s if a file is new on the filesystem and
it is out of sync with the index.

   Example:

     :100644 100644 5be4a4...... 000000...... M file.c

   When `-z' option is not used, TAB, LF, and backslash characters in
pathnames are represented as `\t', `\n', and `\\', respectively.



diff format for merges
**********************

"git-diff-tree", "git-diff-files" and "git-diff -raw" can take _-c_ or
_-cc_ option to generate diff output also for merge commits.  The
output differs from the format described above in the following way:

  1. there is a colon for each parent

  2. there are more "src" modes and "src" sha1

  3. status is concatenated status characters for each parent

  4. no optional "score" number

  5. single path, only for "dst"

   Example:

     ::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM      describe.c

   Note that _combined diff_ lists only files which were modified from
all parents.



Generating patches with -p
**************************

When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
with a _-p_ option, "git diff" without the _-raw_ option, or "git log"
with the "-p" option, they do not produce the output described above;
instead they produce a patch file.  You can customize the creation of
such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS
environment variables.

   What the -p option produces is slightly different from the
traditional diff format:

  1. It is preceded with a "git diff" header that looks like this:

          diff --git a/file1 b/file2

     The `a/' and `b/' filenames are the same unless rename/copy is
     involved.  Especially, even for a creation or a deletion,
     `/dev/null' is _not_ used in place of the `a/' or `b/' filenames.

     When rename/copy is involved, `file1' and `file2' show the name of
     the source file of the rename/copy and the name of the file that
     rename/copy produces, respectively.

  2. It is followed by one or more extended header lines:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     File modes are printed as 6-digit octal numbers including the file
     type and file permission bits.

     Path names in extended headers do not include the `a/' and `b/'
     prefixes.

     The similarity index is the percentage of unchanged lines, and the
     dissimilarity index is the percentage of changed lines.  It is a
     rounded down integer, followed by a percent sign.  The similarity
     index value of 100% is thus reserved for two equal files, while
     100% dissimilarity means that no line from the old file made it
     into the new one.

     The index line includes the SHA-1 checksum before and after the
     change.  The <mode> is included if the file mode does not change;
     otherwise, separate lines indicate the old and the new mode.

  3. TAB, LF, double quote and backslash characters in pathnames are
     represented as `\t', `\n', `\"' and `\\', respectively.  If there
     is need for such substitution then the whole pathname is put in
     double quotes.

  4. All the `file1' files in the output refer to files before the
     commit, and all the `file2' files refer to files after the commit.
     It is incorrect to apply each change to each file sequentially.
     For example, this patch will swap a and b:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a


combined diff format
********************

Any diff-generating command can take the ‘-c` or `--cc' option to
produce a _combined diff_ when showing a merge. This is the default
format when showing merges with git-diff(1) or git-show(1). Note also
that you can give the `-m’ option to any of these commands to force
generation of diffs with individual parents of a merge.

   A _combined diff_ format looks like this:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. It is preceded with a "git diff" header, that looks like this
     (when _-c_ option is used):

          diff --combined file

     or like this (when _-cc_ option is used):

          diff --cc file

  2. It is followed by one or more extended header lines (this example
     shows a merge with two parents):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     The `mode <mode>,<mode>..<mode>' line appears only if at least one
     of the <mode> is different from the rest. Extended headers with
     information about detected contents movement (renames and copying
     detection) are designed to work with diff of two <tree-ish> and
     are not used by combined diff format.

  3. It is followed by two-line from-file/to-file header

          --- a/file
          +++ b/file

     Similar to two-line header for traditional _unified_ diff format,
     `/dev/null' is used to signal created or deleted files.

  4. Chunk header format is modified to prevent people from
     accidentally feeding it to `patch -p1'. Combined diff format was
     created for review of merge commit changes, and was not meant for
     apply. The change is similar to the change in the extended _index_
     header:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     There are (number of parents + 1) `@' characters in the chunk
     header for combined diff format.

   Unlike the traditional _unified_ diff format, which shows two files
A and B with a single column that has `-' (minus — appears in A
but removed in B), `+' (plus — missing in A but added to B), or
`" "' (space — unchanged) prefix, this format compares two or
more files file1, file2,… with one file X, and shows how X differs
from each of fileN.  One column for each of fileN is prepended to the
output line to note how X’s line is different from it.

   A `-' character in the column N means that the line appears in fileN
but it does not appear in the result.  A `+' character in the column N
means that the line appears in the result, and fileN does not have that
line (in other words, the line was added, from the point of view of
that parent).

   In the above example output, the function signature was changed from
both files (hence two `-' removals from both file1 and file2, plus `++'
to mean one line that was added does not appear in either file1 nor
file2).  Also eight other lines are the same from file1 but do not
appear in file2 (hence prefixed with `+').

   When shown by `git diff-tree -c', it compares the parents of a merge
commit with the merge result (i.e. file1..fileN are the parents).  When
shown by `git diff-files -c', it compares the two unresolved merge
parents with the working tree file (i.e. file1 is stage 2 aka "our
version", file2 is stage 3 aka "their version").



other diff formats
******************

The `--summary' option describes newly added, deleted, renamed and
copied files.  The `--stat' option adds diffstat(1) graph to the
output.  These options can be combined with other options, such as
`-p', and are meant for human consumption.

   When showing a change that involves a rename or a copy, `--stat'
output formats the pathnames compactly by combining common prefix and
suffix of the pathnames.  For example, a change that moves
`arch/i386/Makefile' to `arch/x86/Makefile' while modifying 4 lines
will be shown like this:

     arch/{i386 => x86}/Makefile    |   4 +--

   The `--numstat' option gives the diffstat(1) information but is
designed for easier machine consumption.  An entry in `--numstat'
output looks like this:

     1       2       README
     3       1       arch/{i386 => x86}/Makefile

   That is, from left to right:

  1. the number of added lines;

  2. a tab;

  3. the number of deleted lines;

  4. a tab;

  5. pathname (possibly with rename/copy information);

  6. a newline.

   When `-z' output option is in effect, the output is formatted this
way:

     1       2       README NUL
     3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL

   That is:

  1. the number of added lines;

  2. a tab;

  3. the number of deleted lines;

  4. a tab;

  5. a NUL (only exists if renamed/copied);

  6. pathname in preimage;

  7. a NUL (only exists if renamed/copied);

  8. pathname in postimage (only exists if renamed/copied);

  9. a NUL.

   The extra `NUL' before the preimage path in renamed case is to allow
scripts that read the output to tell if the current record being read is
a single-path record or a rename/copy record without reading ahead.
After reading added and deleted lines, reading up to `NUL' would yield
the pathname, but if that is `NUL', the record will show two paths.



Operating Modes
***************

You can choose whether you want to trust the index file entirely (using
the _-cached_ flag) or ask the diff logic to show any files that
don’t match the stat state as being "tentatively changed".  Both of
these operations are very useful indeed.



Cached Mode
***********

If _-cached_ is specified, it allows you to ask:

     show me the differences between HEAD and the current index
     contents (the ones I'd write using 'git write-tree')

   For example, let’s say that you have worked on your working
directory, updated some files in the index and are ready to commit. You
want to see exactly *what* you are going to commit, without having to
write a new tree object and compare it that way, and to do that, you
just do

     git diff-index --cached HEAD

   Example: let’s say I had renamed `commit.c' to `git-commit.c', and
I had done an `update-index' to make that effective in the index file.
`git diff-files' wouldn’t show anything at all, since the index file
matches my working directory. But doing a _git diff-index_ does:

     torvalds@ppc970:~/git> git diff-index --cached HEAD
     -100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        commit.c
     +100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        git-commit.c

   You can see easily that the above is a rename.

   In fact, `git diff-index --cached' *should* always be entirely
equivalent to actually doing a _git write-tree_ and comparing that.
Except this one is much nicer for the case where you just want to check
where you are.

   So doing a `git diff-index --cached' is basically very useful when
you are asking yourself "what have I already marked for being
committed, and what’s the difference to a previous tree".



Non-cached Mode
***************

The "non-cached" mode takes a different approach, and is potentially
the more useful of the two in that what it does can’t be emulated with
a _git write-tree_ + _git diff-tree_. Thus that’s the default mode.
The non-cached version asks the question:

     show me the differences between HEAD and the currently checked out
     tree - index contents _and_ files that aren't up-to-date

   which is obviously a very useful question too, since that tells you
what you *could* commit. Again, the output matches the _git diff-tree
-r_ output to a tee, but with a twist.

   The twist is that if some file doesn’t match the index, we don’t
have a backing store thing for it, and we use the magic "all-zero" sha1
to show that. So let’s say that you have edited `kernel/sched.c', but
have not actually done a _git update-index_ on it yet - there is no
"object" associated with the new state, and you get:

     torvalds@ppc970:~/v2.6/linux> git diff-index --abbrev HEAD
     :100644 100664 7476bb... 000000...      kernel/sched.c

   i.e., it shows that the tree has changed, and that `kernel/sched.c'
has is not up-to-date and may contain new stuff. The all-zero sha1
means that to get the real diff, you need to look at the object in the
working directory directly rather than do an object-to-object diff.

     *Note*

     As with other commands of this type, _git diff-index_ does not
     actually look at the contents of the file at all. So maybe
     `kernel/sched.c' hasn’t actually changed, and it’s just that
     you touched it. In either case, it’s a note that you need to
     _git update-index_ it to make the index be in sync.

     *Note*

     You can have a mixture of files show up as "has been updated" and
     "is still dirty in the working directory" together. You can always
     tell which file is in which state, since the "has been updated"
     ones show a valid sha1, and the "not in sync with the index" ones
     will always have the special all-zero sha1.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-diff-tree,  Up: Top

Name
****

git-diff-tree — Compares the content and mode of blobs found via two
tree objects



Synopsis
********

     git diff-tree [-stdin] [-m] [-s] [-v] [-no-commit-id] [-pretty]
                   [-t] [-r] [-c | -cc] [-root] [<common diff options>]
                   <tree-ish> [<tree-ish>] [<path>…]


DESCRIPTION
***********

Compares the content and mode of the blobs found via two tree objects.

   If there is only one <tree-ish> given, the commit is compared with
its parents (see -stdin below).

   Note that _git diff-tree_ can use the tree encapsulated in a commit
object.



OPTIONS
*******

-p
-u
-patch
     Generate patch (see section on generating patches).

-U<n>
-unified=<n>
     Generate diffs with <n> lines of context instead of the usual
     three.  Implies `-p'.

-raw
     Generate the raw format.  This is the default.

-patch-with-raw
     Synonym for `-p --raw'.

-minimal
     Spend extra time to make sure the smallest possible diff is
     produced.

-patience
     Generate a diff using the "patience diff" algorithm.

-histogram
     Generate a diff using the "histogram diff" algorithm.

-stat[=<width>[,<name-width>[,<count>]]]
     Generate a diffstat. By default, as much space as necessary will
     be used for the filename part, and the rest for the graph part.
     Maximum width defaults to terminal width, or 80 columns if not
     connected to a terminal, and can be overridden by `<width>'. The
     width of the filename part can be limited by giving another width
     `<name-width>' after a comma. The width of the graph part can be
     limited by using `--stat-graph-width=<width>' (affects all
     commands generating a stat graph) or by setting
     `diff.statGraphWidth=<width>' (does not affect `git format-patch').
     By giving a third parameter `<count>', you can limit the output to
     the first `<count>' lines, followed by `...' if there are more.

     These parameters can also be set individually with
     `--stat-width=<width>', `--stat-name-width=<name-width>' and
     `--stat-count=<count>'.

-numstat
     Similar to `--stat', but shows number of added and deleted lines
     in decimal notation and pathname without abbreviation, to make it
     more machine friendly.  For binary files, outputs two `-' instead
     of saying `0 0'.

-shortstat
     Output only the last line of the `--stat' format containing total
     number of modified files, as well as number of added and deleted
     lines.

-dirstat[=<param1,param2,…>]
     Output the distribution of relative amount of changes for each
     sub-directory. The behavior of `--dirstat' can be customized by
     passing it a comma separated list of parameters.  The defaults are
     controlled by the `diff.dirstat' configuration variable (see
     git-config(1)).  The following parameters are available:

    `changes'
          Compute the dirstat numbers by counting the lines that have
          been removed from the source, or added to the destination.
          This ignores the amount of pure code movements within a file.
          In other words, rearranging lines in a file is not counted
          as much as other changes.  This is the default behavior when
          no parameter is given.

    `lines'
          Compute the dirstat numbers by doing the regular line-based
          diff analysis, and summing the removed/added line counts.
          (For binary files, count 64-byte chunks instead, since binary
          files have no natural concept of lines). This is a more
          expensive `--dirstat' behavior than the `changes' behavior,
          but it does count rearranged lines within a file as much as
          other changes. The resulting output is consistent with what
          you get from the other `--*stat' options.

    `files'
          Compute the dirstat numbers by counting the number of files
          changed.  Each changed file counts equally in the dirstat
          analysis. This is the computationally cheapest `--dirstat'
          behavior, since it does not have to look at the file contents
          at all.

    `cumulative'
          Count changes in a child directory for the parent directory
          as well.  Note that when using `cumulative', the sum of the
          percentages reported may exceed 100%. The default
          (non-cumulative) behavior can be specified with the
          `noncumulative' parameter.

    <limit>
          An integer parameter specifies a cut-off percent (3% by
          default).  Directories contributing less than this percentage
          of the changes are not shown in the output.

     Example: The following will count changed files, while ignoring
     directories with less than 10% of the total amount of changed
     files, and accumulating child directory counts in the parent
     directories: `--dirstat=files,10,cumulative'.

-summary
     Output a condensed summary of extended header information such as
     creations, renames and mode changes.

-patch-with-stat
     Synonym for `-p --stat'.

-z
     When `--raw', `--numstat', `--name-only' or `--name-status' has
     been given, do not munge pathnames and use NULs as output field
     terminators.

     Without this option, each pathname output will have TAB, LF,
     double quotes, and backslash characters replaced with `\t', `\n',
     `\"', and `\\', respectively, and the pathname will be enclosed in
     double quotes if any of those replacements occurred.

-name-only
     Show only names of changed files.

-name-status
     Show only names and status of changed files. See the description
     of the `--diff-filter' option on what the status letters mean.

-submodule[=<format>]
     Specify how differences in submodules are shown.  When
     `--submodule' or `--submodule=log' is given, the _log_ format is
     used.  This format lists the commits in the range like
     git-submodule(1) `summary' does.  Omitting the `--submodule'
     option or specifying `--submodule=short', uses the _short_ format.
     This format just shows the names of the commits at the beginning
     and end of the range.

-color[=<when>]
     Show colored diff.  The value must be `always' (the default for
     `<when>'), `never', or `auto'.  The default value is `never'.

-no-color
     Turn off colored diff.  It is the same as `--color=never'.

-word-diff[=<mode>]
     Show a word diff, using the <mode> to delimit changed words.  By
     default, words are delimited by whitespace; see
     `--word-diff-regex' below.  The <mode> defaults to _plain_, and
     must be one of:

    color
          Highlight changed words using only colors.  Implies `--color'.

    plain
          Show words as `[-removed-]' and `{+added+}'.  Makes no
          attempts to escape the delimiters if they appear in the input,
          so the output may be ambiguous.

    porcelain
          Use a special line-based format intended for script
          consumption.  Added/removed/unchanged runs are printed in the
          usual unified diff format, starting with a `+'/`-'/` `
          character at the beginning of the line and extending to the
          end of the line.  Newlines in the input are represented by a
          tilde `~' on a line of its own.

    none
          Disable word diff again.

     Note that despite the name of the first mode, color is used to
     highlight the changed parts in all modes if enabled.

-word-diff-regex=<regex>
     Use <regex> to decide what a word is, instead of considering runs
     of non-whitespace to be a word.  Also implies `--word-diff' unless
     it was already enabled.

     Every non-overlapping match of the <regex> is considered a word.
     Anything between these matches is considered whitespace and
     ignored(!) for the purposes of finding differences.  You may want
     to append `|[^[:space:]]' to your regular expression to make sure
     that it matches all non-whitespace characters.  A match that
     contains a newline is silently truncated(!) at the newline.

     The regex can also be set via a diff driver or configuration
     option, see gitattributes(1) or git-config(1).  Giving it
     explicitly overrides any diff driver or configuration setting.
     Diff drivers override configuration settings.

-color-words[=<regex>]
     Equivalent to `--word-diff=color' plus (if a regex was specified)
     `--word-diff-regex=<regex>'.

-no-renames
     Turn off rename detection, even when the configuration file gives
     the default to do so.

-check
     Warn if changes introduce whitespace errors.  What are considered
     whitespace errors is controlled by `core.whitespace'
     configuration.  By default, trailing whitespaces (including lines
     that solely consist of whitespaces) and a space character that is
     immediately followed by a tab character inside the initial indent
     of the line are considered whitespace errors.  Exits with non-zero
     status if problems are found. Not compatible with -exit-code.

-full-index
     Instead of the first handful of characters, show the full pre- and
     post-image blob object names on the "index" line when generating
     patch format output.

-binary
     In addition to `--full-index', output a binary diff that can be
     applied with `git-apply'.

-abbrev[=<n>]
     Instead of showing the full 40-byte hexadecimal object name in
     diff-raw format output and diff-tree header lines, show only a
     partial prefix.  This is independent of the `--full-index' option
     above, which controls the diff-patch output format.  Non default
     number of digits can be specified with `--abbrev=<n>'.

-B[<n>][/<m>]
-break-rewrites[=[<n>][/<m>]]
     Break complete rewrite changes into pairs of delete and create.
     This serves two purposes:

     It affects the way a change that amounts to a total rewrite of a
     file not as a series of deletion and insertion mixed together with
     a very few lines that happen to match textually as the context,
     but as a single deletion of everything old followed by a single
     insertion of everything new, and the number `m' controls this
     aspect of the -B option (defaults to 60%). `-B/70%' specifies that
     less than 30% of the original should remain in the result for git
     to consider it a total rewrite (i.e. otherwise the resulting patch
     will be a series of deletion and insertion mixed together with
     context lines).

     When used with -M, a totally-rewritten file is also considered as
     the source of a rename (usually -M only considers a file that
     disappeared as the source of a rename), and the number `n'
     controls this aspect of the -B option (defaults to 50%). `-B20%'
     specifies that a change with addition and deletion compared to 20%
     or more of the file’s size are eligible for being picked up as a
     possible source of a rename to another file.

-M[<n>]
-find-renames[=<n>]
     Detect renames.  If `n' is specified, it is a threshold on the
     similarity index (i.e. amount of addition/deletions compared to the
     file’s size). For example, `-M90%' means git should consider a
     delete/add pair to be a rename if more than 90% of the file
     hasn’t changed.

-C[<n>]
-find-copies[=<n>]
     Detect copies as well as renames.  See also `--find-copies-harder'.
     If `n' is specified, it has the same meaning as for `-M<n>'.

-find-copies-harder
     For performance reasons, by default, `-C' option finds copies only
     if the original file of the copy was modified in the same
     changeset.  This flag makes the command inspect unmodified files
     as candidates for the source of copy.  This is a very expensive
     operation for large projects, so use it with caution.  Giving more
     than one `-C' option has the same effect.

-D
-irreversible-delete
     Omit the preimage for deletes, i.e. print only the header but not
     the diff between the preimage and `/dev/null'. The resulting patch
     is not meant to be applied with `patch' nor `git apply'; this is
     solely for people who want to just concentrate on reviewing the
     text after the change. In addition, the output obviously lack
     enough information to apply such a patch in reverse, even manually,
     hence the name of the option.

     When used together with `-B', omit also the preimage in the
     deletion part of a delete/create pair.

-l<num>
     The `-M' and `-C' options require O(n^2) processing time where n
     is the number of potential rename/copy targets.  This option
     prevents rename/copy detection from running if the number of
     rename/copy targets exceeds the specified number.

-diff-filter=[(A|C|D|M|R|T|U|X|B)…[*]]
     Select only files that are Added (`A'), Copied (`C'), Deleted
     (`D'), Modified (`M'), Renamed (`R'), have their type (i.e.
     regular file, symlink, submodule, …) changed (`T'), are Unmerged
     (`U'), are Unknown (`X'), or have had their pairing Broken (`B').
     Any combination of the filter characters (including none) can be
     used.  When `*' (All-or-none) is added to the combination, all
     paths are selected if there is any file that matches other
     criteria in the comparison; if there is no file that matches other
     criteria, nothing is selected.

-S<string>
     Look for differences that introduce or remove an instance of
     <string>. Note that this is different than the string simply
     appearing in diff output; see the _pickaxe_ entry in
     gitdiffcore(7) for more details.

-G<regex>
     Look for differences whose added or removed line matches the given
     <regex>.

-pickaxe-all
     When `-S' or `-G' finds a change, show all the changes in that
     changeset, not just the files that contain the change in <string>.

-pickaxe-regex
     Make the <string> not a plain string but an extended POSIX regex
     to match.

-O<orderfile>
     Output the patch in the order specified in the <orderfile>, which
     has one shell glob pattern per line.

-R
     Swap two inputs; that is, show differences from index or on-disk
     file to tree contents.

-relative[=<path>]
     When run from a subdirectory of the project, it can be told to
     exclude changes outside the directory and show pathnames relative
     to it with this option.  When you are not in a subdirectory (e.g.
     in a bare repository), you can name which subdirectory to make the
     output relative to by giving a <path> as an argument.

-a
-text
     Treat all files as text.

-ignore-space-at-eol
     Ignore changes in whitespace at EOL.

-b
-ignore-space-change
     Ignore changes in amount of whitespace.  This ignores whitespace
     at line end, and considers all other sequences of one or more
     whitespace characters to be equivalent.

-w
-ignore-all-space
     Ignore whitespace when comparing lines.  This ignores differences
     even if one line has whitespace where the other line has none.

-inter-hunk-context=<lines>
     Show the context between diff hunks, up to the specified number of
     lines, thereby fusing hunks that are close to each other.

-W
-function-context
     Show whole surrounding functions of changes.

-exit-code
     Make the program exit with codes similar to diff(1).  That is, it
     exits with 1 if there were differences and 0 means no differences.

-quiet
     Disable all output of the program. Implies `--exit-code'.

-ext-diff
     Allow an external diff helper to be executed. If you set an
     external diff driver with gitattributes(5), you need to use this
     option with git-log(1) and friends.

-no-ext-diff
     Disallow external diff drivers.

-textconv
-no-textconv
     Allow (or disallow) external text conversion filters to be run
     when comparing binary files. See gitattributes(5) for details.
     Because textconv filters are typically a one-way conversion, the
     resulting diff is suitable for human consumption, but cannot be
     applied. For this reason, textconv filters are enabled by default
     only for git-diff(1) and git-log(1), but not for
     git-format-patch(1) or diff plumbing commands.

-ignore-submodules[=<when>]
     Ignore changes to submodules in the diff generation. <when> can be
     either "none", "untracked", "dirty" or "all", which is the default
     Using "none" will consider the submodule modified when it either
     contains untracked or modified files or its HEAD differs from the
     commit recorded in the superproject and can be used to override
     any settings of the _ignore_ option in git-config(1) or
     gitmodules(5). When "untracked" is used submodules are not
     considered dirty when they only contain untracked content (but
     they are still scanned for modified content). Using "dirty"
     ignores all changes to the work tree of submodules, only changes
     to the commits stored in the superproject are shown (this was the
     behavior until 1.7.0). Using "all" hides all changes to submodules.

-src-prefix=<prefix>
     Show the given source prefix instead of "a/".

-dst-prefix=<prefix>
     Show the given destination prefix instead of "b/".

-no-prefix
     Do not show any source or destination prefix.

   For more detailed explanation on these common options, see also
gitdiffcore(7).

<tree-ish>
     The id of a tree object.

<path>…
     If provided, the results are limited to a subset of files matching
     one of these prefix strings.  i.e., file matches
     `/^<pattern1>|<pattern2>|.../' Note that this parameter does not
     provide any wildcard or regexp features.

-r
     recurse into sub-trees

-t
     show tree entry itself as well as subtrees.  Implies -r.

-root
     When _-root_ is specified the initial commit will be shown as a big
     creation event. This is equivalent to a diff against the NULL tree.

-stdin
     When _-stdin_ is specified, the command does not take <tree-ish>
     arguments from the command line.  Instead, it reads lines
     containing either two <tree>, one <commit>, or a list of <commit>
     from its standard input.  (Use a single space as separator.)

     When two trees are given, it compares the first tree with the
     second.  When a single commit is given, it compares the commit
     with its parents.  The remaining commits, when given, are used as
     if they are parents of the first commit.

     When comparing two trees, the ID of both trees (separated by a
     space and terminated by a newline) is printed before the
     difference.  When comparing commits, the ID of the first (or only)
     commit, followed by a newline, is printed.

     The following flags further affect the behavior when comparing
     commits (but not trees).

-m
     By default, _git diff-tree -stdin_ does not show differences for
     merge commits.  With this flag, it shows differences to that
     commit from all of its parents. See also _-c_.

-s
     By default, _git diff-tree -stdin_ shows differences, either in
     machine-readable form (without _-p_) or in patch form (with _-p_).
     This output can be suppressed.  It is only useful with _-v_ flag.

-v
     This flag causes _git diff-tree -stdin_ to also show the commit
     message before the differences.

-pretty[=<format>]
-format=<format>
     Pretty-print the contents of the commit logs in a given format,
     where _<format>_ can be one of _oneline_, _short_, _medium_,
     _full_, _fuller_, _email_, _raw_ and _format:<string>_.  See the
     "PRETTY FORMATS" section for some additional details for each
     format.  When omitted, the format defaults to _medium_.

     Note: you can specify the default pretty format in the repository
     configuration (see git-config(1)).

-abbrev-commit
     Instead of showing the full 40-byte hexadecimal commit object
     name, show only a partial prefix.  Non default number of digits
     can be specified with "-abbrev=<n>" (which also modifies diff
     output, if it is displayed).

     This should make "-pretty=oneline" a whole lot more readable for
     people using 80-column terminals.

-no-abbrev-commit
     Show the full 40-byte hexadecimal commit object name. This negates
     `--abbrev-commit' and those options which imply it such as
     "-oneline". It also overrides the _log.abbrevCommit_ variable.

-oneline
     This is a shorthand for "-pretty=oneline -abbrev-commit" used
     together.

-encoding[=<encoding>]
     The commit objects record the encoding used for the log message in
     their encoding header; this option can be used to tell the command
     to re-code the commit log message in the encoding preferred by the
     user.  For non plumbing commands this defaults to UTF-8.

-notes[=<ref>]
     Show the notes (see git-notes(1)) that annotate the commit, when
     showing the commit log message.  This is the default for `git
     log', `git show' and `git whatchanged' commands when there is no
     `--pretty', `--format' nor `--oneline' option given on the command
     line.

     By default, the notes shown are from the notes refs listed in the
     _core.notesRef_ and _notes.displayRef_ variables (or corresponding
     environment overrides). See git-config(1) for more details.

     With an optional _<ref>_ argument, show this notes ref instead of
     the default notes ref(s). The ref is taken to be in `refs/notes/'
     if it is not qualified.

     Multiple -notes options can be combined to control which notes are
     being displayed. Examples: "-notes=foo" will show only notes from
     "refs/notes/foo"; "-notes=foo -notes" will show both notes from
     "refs/notes/foo" and from the default notes ref(s).

-no-notes
     Do not show notes. This negates the above `--notes' option, by
     resetting the list of notes refs from which notes are shown.
     Options are parsed in the order given on the command line, so e.g.
     "-notes -notes=foo -no-notes -notes=bar" will only show notes from
     "refs/notes/bar".

-show-notes[=<ref>]
-[no-]standard-notes
     These options are deprecated. Use the above -notes/-no-notes
     options instead.

-no-commit-id
     _git diff-tree_ outputs a line with the commit ID when applicable.
     This flag suppressed the commit ID output.

-c
     This flag changes the way a merge commit is displayed (which means
     it is useful only when the command is given one <tree-ish>, or
     _-stdin_).  It shows the differences from each of the parents to
     the merge result simultaneously instead of showing pairwise diff
     between a parent and the result one at a time (which is what the
     _-m_ option does).  Furthermore, it lists only files which were
     modified from all parents.

-cc
     This flag changes the way a merge commit patch is displayed, in a
     similar way to the _-c_ option. It implies the _-c_ and _-p_
     options and further compresses the patch output by omitting
     uninteresting hunks whose the contents in the parents have only
     two variants and the merge result picks one of them without
     modification.  When all hunks are uninteresting, the commit itself
     and the commit log message is not shown, just like in any other
     "empty diff" case.

-always
     Show the commit itself and the commit log message even if the diff
     itself is empty.


PRETTY FORMATS
**************

If the commit is a merge, and if the pretty-format is not _oneline_,
_email_ or _raw_, an additional line is inserted before the _Author:_
line.  This line begins with "Merge: " and the sha1s of ancestral
commits are printed, separated by spaces.  Note that the listed commits
may not necessarily be the list of the *direct* parent commits if you
have limited your view of history: for example, if you are only
interested in changes related to a certain directory or file.

   There are several built-in formats, and you can define additional
formats by setting a pretty.<name> config option to either another
format name, or a _format:_ string, as described below (see
git-config(1)). Here are the details of the built-in formats:

   * _oneline_

          <sha1> <title line>

     This is designed to be as compact as possible.

   * _short_

          commit <sha1>
          Author: <author>

          <title line>

   * _medium_

          commit <sha1>
          Author: <author>
          Date:   <author date>

          <title line>

          <full commit message>

   * _full_

          commit <sha1>
          Author: <author>
          Commit: <committer>

          <title line>

          <full commit message>

   * _fuller_

          commit <sha1>
          Author:     <author>
          AuthorDate: <author date>
          Commit:     <committer>
          CommitDate: <committer date>

          <title line>

          <full commit message>

   * _email_

          From <sha1> <date>
          From: <author>
          Date: <author date>
          Subject: [PATCH] <title line>

          <full commit message>

   * _raw_

     The _raw_ format shows the entire commit exactly as stored in the
     commit object.  Notably, the SHA1s are displayed in full,
     regardless of whether -abbrev or -no-abbrev are used, and
     _parents_ information show the true parent commits, without taking
     grafts nor history simplification into account.

   * _format:<string>_

     The _format:<string>_ format allows you to specify which
     information you want to show. It works a little bit like printf
     format, with the notable exception that you get a newline with _%n_
     instead of _\n_.

     E.g, _format:"The author of %h was %an, %ar%nThe title was
     >>%s<<%n"_ would show something like this:

          The author of fe6e0ee was Junio C Hamano, 23 hours ago
          The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

     The placeholders are:

        * _%H_: commit hash

        * _%h_: abbreviated commit hash

        * _%T_: tree hash

        * _%t_: abbreviated tree hash

        * _%P_: parent hashes

        * _%p_: abbreviated parent hashes

        * _%an_: author name

        * _%aN_: author name (respecting .mailmap, see git-shortlog(1)
          or git-blame(1))

        * _%ae_: author email

        * _%aE_: author email (respecting .mailmap, see git-shortlog(1)
          or git-blame(1))

        * _%ad_: author date (format respects -date= option)

        * _%aD_: author date, RFC2822 style

        * _%ar_: author date, relative

        * _%at_: author date, UNIX timestamp

        * _%ai_: author date, ISO 8601 format

        * _%cn_: committer name

        * _%cN_: committer name (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%ce_: committer email

        * _%cE_: committer email (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%cd_: committer date

        * _%cD_: committer date, RFC2822 style

        * _%cr_: committer date, relative

        * _%ct_: committer date, UNIX timestamp

        * _%ci_: committer date, ISO 8601 format

        * _%d_: ref names, like the -decorate option of git-log(1)

        * _%e_: encoding

        * _%s_: subject

        * _%f_: sanitized subject line, suitable for a filename

        * _%b_: body

        * _%B_: raw body (unwrapped subject and body)

        * _%N_: commit notes

        * _%gD_: reflog selector, e.g., `refs/stash@{1}'

        * _%gd_: shortened reflog selector, e.g., `stash@{1}'

        * _%gn_: reflog identity name

        * _%gN_: reflog identity name (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%ge_: reflog identity email

        * _%gE_: reflog identity email (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%gs_: reflog subject

        * _%Cred_: switch color to red

        * _%Cgreen_: switch color to green

        * _%Cblue_: switch color to blue

        * _%Creset_: reset color

        * _%C(…)_: color specification, as described in
          color.branch.* config option

        * _%m_: left, right or boundary mark

        * _%n_: newline

        * _%%_: a raw _%_

        * _%x00_: print a byte from a hex code

        * _%w([<w>[,<i1>[,<i2>]]])_: switch line wrapping, like the -w
          option of git-shortlog(1).

     *Note*

     Some placeholders may depend on other options given to the
     revision traversal engine. For example, the `%g*' reflog options
     will insert an empty string unless we are traversing reflog
     entries (e.g., by `git log -g'). The `%d' placeholder will use the
     "short" decoration format if `--decorate' was not already provided
     on the command line.

   If you add a `+' (plus sign) after _%_ of a placeholder, a line-feed
is inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.

   If you add a `-' (minus sign) after _%_ of a placeholder, line-feeds
that immediately precede the expansion are deleted if and only if the
placeholder expands to an empty string.

   If you add a ` ` (space) after _%_ of a placeholder, a space is
inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.

   * _tformat:_

     The _tformat:_ format works exactly like _format:_, except that it
     provides "terminator" semantics instead of "separator" semantics.
     In other words, each commit has the message terminator character
     (usually a newline) appended, rather than a separator placed
     between entries.  This means that the final entry of a single-line
     format will be properly terminated with a new line, just as the
     "oneline" format does.  For example:

          $ git log -2 --pretty=format:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973 -- NO NEWLINE

          $ git log -2 --pretty=tformat:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973

     In addition, any unrecognized string that has a `%' in it is
     interpreted as if it has `tformat:' in front of it.  For example,
     these two are equivalent:

          $ git log -2 --pretty=tformat:%h 4da45bef
          $ git log -2 --pretty=%h 4da45bef



Limiting Output
***************

If you’re only interested in differences in a subset of files, for
example some architecture-specific files, you might do:

     git diff-tree -r <tree-ish> <tree-ish> arch/ia64 include/asm-ia64

   and it will only show you what changed in those two directories.

   Or if you are searching for what changed in just `kernel/sched.c',
just do

     git diff-tree -r <tree-ish> <tree-ish> kernel/sched.c

   and it will ignore all differences to other files.

   The pattern is always the prefix, and is matched exactly.  There are
no wildcards.  Even stricter, it has to match a complete path component.
I.e. "foo" does not pick up `foobar.h'.  "foo" does match `foo/bar.h'
so it can be used to name subdirectories.

   An example of normal usage is:

     torvalds@ppc970:~/git> git diff-tree --abbrev 5319e4
     :100664 100664 ac348b... a01513...    git-fsck-objects.c

   which tells you that the last commit changed just one file (it’s
from this one:

     commit 3c6f7ca19ad4043e9e72fa94106f352897e651a8
     tree 5319e4d609cdd282069cc4dce33c1db559539b03
     parent b4e628ea30d5ab3606119d2ea5caeab141d38df7
     author Linus Torvalds <torvalds@ppc970.osdl.org> Sat Apr 9 12:02:30 2005
     committer Linus Torvalds <torvalds@ppc970.osdl.org> Sat Apr 9 12:02:30 2005

     Make "git-fsck-objects" print out all the root commits it finds.

     Once I do the reference tracking, I'll also make it print out all the
     HEAD commits it finds, which is even more interesting.

   in case you care).



Raw output format
*****************

The raw output format from "git-diff-index", "git-diff-tree",
"git-diff-files" and "git diff -raw" are very similar.

   These commands all compare two sets of things; what is compared
differs:

git-diff-index <tree-ish>
     compares the <tree-ish> and the files on the filesystem.

git-diff-index -cached <tree-ish>
     compares the <tree-ish> and the index.

git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…]
     compares the trees named by the two arguments.

git-diff-files [<pattern>…]
     compares the index and the files on the filesystem.

   The "git-diff-tree" command begins its output by printing the hash of
what is being compared. After that, all the commands print one output
line per changed file.

   An output line is formatted this way:

     in-place edit  :100644 100644 bcd1234... 0123456... M file0
     copy-edit      :100644 100644 abcd123... 1234567... C68 file1 file2
     rename-edit    :100644 100644 abcd123... 1234567... R86 file1 file3
     create         :000000 100644 0000000... 1234567... A file4
     delete         :100644 000000 1234567... 0000000... D file5
     unmerged       :000000 000000 0000000... 0000000... U file6

   That is, from the left to the right:

  1. a colon.

  2. mode for "src"; 000000 if creation or unmerged.

  3. a space.

  4. mode for "dst"; 000000 if deletion or unmerged.

  5. a space.

  6. sha1 for "src"; 0{40} if creation or unmerged.

  7. a space.

  8. sha1 for "dst"; 0{40} if creation, unmerged or "look at work tree".

  9. a space.

 10. status, followed by optional "score" number.

 11. a tab or a NUL when _-z_ option is used.

 12. path for "src"

 13. a tab or a NUL when _-z_ option is used; only exists for C or R.

 14. path for "dst"; only exists for C or R.

 15. an LF or a NUL when _-z_ option is used, to terminate the record.

   Possible status letters are:

   * A: addition of a file

   * C: copy of a file into a new one

   * D: deletion of a file

   * M: modification of the contents or mode of a file

   * R: renaming of a file

   * T: change in the type of the file

   * U: file is unmerged (you must complete the merge before it can be
     committed)

   * X: "unknown" change type (most probably a bug, please report it)

   Status letters C and R are always followed by a score (denoting the
percentage of similarity between the source and target of the move or
copy), and are the only ones to be so.

   <sha1> is shown as all 0’s if a file is new on the filesystem and
it is out of sync with the index.

   Example:

     :100644 100644 5be4a4...... 000000...... M file.c

   When `-z' option is not used, TAB, LF, and backslash characters in
pathnames are represented as `\t', `\n', and `\\', respectively.



diff format for merges
**********************

"git-diff-tree", "git-diff-files" and "git-diff -raw" can take _-c_ or
_-cc_ option to generate diff output also for merge commits.  The
output differs from the format described above in the following way:

  1. there is a colon for each parent

  2. there are more "src" modes and "src" sha1

  3. status is concatenated status characters for each parent

  4. no optional "score" number

  5. single path, only for "dst"

   Example:

     ::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM      describe.c

   Note that _combined diff_ lists only files which were modified from
all parents.



Generating patches with -p
**************************

When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
with a _-p_ option, "git diff" without the _-raw_ option, or "git log"
with the "-p" option, they do not produce the output described above;
instead they produce a patch file.  You can customize the creation of
such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS
environment variables.

   What the -p option produces is slightly different from the
traditional diff format:

  1. It is preceded with a "git diff" header that looks like this:

          diff --git a/file1 b/file2

     The `a/' and `b/' filenames are the same unless rename/copy is
     involved.  Especially, even for a creation or a deletion,
     `/dev/null' is _not_ used in place of the `a/' or `b/' filenames.

     When rename/copy is involved, `file1' and `file2' show the name of
     the source file of the rename/copy and the name of the file that
     rename/copy produces, respectively.

  2. It is followed by one or more extended header lines:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     File modes are printed as 6-digit octal numbers including the file
     type and file permission bits.

     Path names in extended headers do not include the `a/' and `b/'
     prefixes.

     The similarity index is the percentage of unchanged lines, and the
     dissimilarity index is the percentage of changed lines.  It is a
     rounded down integer, followed by a percent sign.  The similarity
     index value of 100% is thus reserved for two equal files, while
     100% dissimilarity means that no line from the old file made it
     into the new one.

     The index line includes the SHA-1 checksum before and after the
     change.  The <mode> is included if the file mode does not change;
     otherwise, separate lines indicate the old and the new mode.

  3. TAB, LF, double quote and backslash characters in pathnames are
     represented as `\t', `\n', `\"' and `\\', respectively.  If there
     is need for such substitution then the whole pathname is put in
     double quotes.

  4. All the `file1' files in the output refer to files before the
     commit, and all the `file2' files refer to files after the commit.
     It is incorrect to apply each change to each file sequentially.
     For example, this patch will swap a and b:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a


combined diff format
********************

Any diff-generating command can take the ‘-c` or `--cc' option to
produce a _combined diff_ when showing a merge. This is the default
format when showing merges with git-diff(1) or git-show(1). Note also
that you can give the `-m’ option to any of these commands to force
generation of diffs with individual parents of a merge.

   A _combined diff_ format looks like this:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. It is preceded with a "git diff" header, that looks like this
     (when _-c_ option is used):

          diff --combined file

     or like this (when _-cc_ option is used):

          diff --cc file

  2. It is followed by one or more extended header lines (this example
     shows a merge with two parents):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     The `mode <mode>,<mode>..<mode>' line appears only if at least one
     of the <mode> is different from the rest. Extended headers with
     information about detected contents movement (renames and copying
     detection) are designed to work with diff of two <tree-ish> and
     are not used by combined diff format.

  3. It is followed by two-line from-file/to-file header

          --- a/file
          +++ b/file

     Similar to two-line header for traditional _unified_ diff format,
     `/dev/null' is used to signal created or deleted files.

  4. Chunk header format is modified to prevent people from
     accidentally feeding it to `patch -p1'. Combined diff format was
     created for review of merge commit changes, and was not meant for
     apply. The change is similar to the change in the extended _index_
     header:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     There are (number of parents + 1) `@' characters in the chunk
     header for combined diff format.

   Unlike the traditional _unified_ diff format, which shows two files
A and B with a single column that has `-' (minus — appears in A
but removed in B), `+' (plus — missing in A but added to B), or
`" "' (space — unchanged) prefix, this format compares two or
more files file1, file2,… with one file X, and shows how X differs
from each of fileN.  One column for each of fileN is prepended to the
output line to note how X’s line is different from it.

   A `-' character in the column N means that the line appears in fileN
but it does not appear in the result.  A `+' character in the column N
means that the line appears in the result, and fileN does not have that
line (in other words, the line was added, from the point of view of
that parent).

   In the above example output, the function signature was changed from
both files (hence two `-' removals from both file1 and file2, plus `++'
to mean one line that was added does not appear in either file1 nor
file2).  Also eight other lines are the same from file1 but do not
appear in file2 (hence prefixed with `+').

   When shown by `git diff-tree -c', it compares the parents of a merge
commit with the merge result (i.e. file1..fileN are the parents).  When
shown by `git diff-files -c', it compares the two unresolved merge
parents with the working tree file (i.e. file1 is stage 2 aka "our
version", file2 is stage 3 aka "their version").



other diff formats
******************

The `--summary' option describes newly added, deleted, renamed and
copied files.  The `--stat' option adds diffstat(1) graph to the
output.  These options can be combined with other options, such as
`-p', and are meant for human consumption.

   When showing a change that involves a rename or a copy, `--stat'
output formats the pathnames compactly by combining common prefix and
suffix of the pathnames.  For example, a change that moves
`arch/i386/Makefile' to `arch/x86/Makefile' while modifying 4 lines
will be shown like this:

     arch/{i386 => x86}/Makefile    |   4 +--

   The `--numstat' option gives the diffstat(1) information but is
designed for easier machine consumption.  An entry in `--numstat'
output looks like this:

     1       2       README
     3       1       arch/{i386 => x86}/Makefile

   That is, from left to right:

  1. the number of added lines;

  2. a tab;

  3. the number of deleted lines;

  4. a tab;

  5. pathname (possibly with rename/copy information);

  6. a newline.

   When `-z' output option is in effect, the output is formatted this
way:

     1       2       README NUL
     3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL

   That is:

  1. the number of added lines;

  2. a tab;

  3. the number of deleted lines;

  4. a tab;

  5. a NUL (only exists if renamed/copied);

  6. pathname in preimage;

  7. a NUL (only exists if renamed/copied);

  8. pathname in postimage (only exists if renamed/copied);

  9. a NUL.

   The extra `NUL' before the preimage path in renamed case is to allow
scripts that read the output to tell if the current record being read is
a single-path record or a rename/copy record without reading ahead.
After reading added and deleted lines, reading up to `NUL' would yield
the pathname, but if that is `NUL', the record will show two paths.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-diff,  Up: Top

Name
****

git-diff — Show changes between commits, commit and working tree, etc



Synopsis
********

     git diff [options] [<commit>] [-] [<path>…]
     git diff [options] -cached [<commit>] [-] [<path>…]
     git diff [options] <commit> <commit> [-] [<path>…]
     git diff [options] [-no-index] [-] <path> <path>


DESCRIPTION
***********

Show changes between the working tree and the index or a tree, changes
between the index and a tree, changes between two trees, or changes
between two files on disk.

_git diff_ [-options] [-] [<path>…]
     This form is to view the changes you made relative to the index
     (staging area for the next commit).  In other words, the
     differences are what you _could_ tell git to further add to the
     index but you still haven’t.  You can stage these changes by
     using git-add(1).

     If exactly two paths are given and at least one points outside the
     current repository, _git diff_ will compare the two files /
     directories. This behavior can be forced by -no-index.

_git diff_ [-options] -cached [<commit>] [-] [<path>…]
     This form is to view the changes you staged for the next commit
     relative to the named <commit>.  Typically you would want
     comparison with the latest commit, so if you do not give <commit>,
     it defaults to HEAD.  If HEAD does not exist (e.g. unborned
     branches) and <commit> is not given, it shows all staged changes.
     -staged is a synonym of -cached.

_git diff_ [-options] <commit> [-] [<path>…]
     This form is to view the changes you have in your working tree
     relative to the named <commit>.  You can use HEAD to compare it
     with the latest commit, or a branch name to compare with the tip
     of a different branch.

_git diff_ [-options] <commit> <commit> [-] [<path>…]
     This is to view the changes between two arbitrary <commit>.

_git diff_ [-options] <commit>..<commit> [-] [<path>…]
     This is synonymous to the previous form.  If <commit> on one side
     is omitted, it will have the same effect as using HEAD instead.

_git diff_ [-options] <commit>...<commit> [-] [<path>…]
     This form is to view the changes on the branch containing and up
     to the second <commit>, starting at a common ancestor of both
     <commit>.  "git diff A...B" is equivalent to "git diff
     $(git-merge-base A B) B".  You can omit any one of <commit>, which
     has the same effect as using HEAD instead.

   Just in case if you are doing something exotic, it should be noted
that all of the <commit> in the above description, except in the last
two forms that use ".." notations, can be any <tree>.  The third form
(_git diff <commit> <commit>_) can also be used to compare two <blob>
objects.

   For a more complete list of ways to spell <commit>, see "SPECIFYING
REVISIONS" section in gitrevisions(7).  However, "diff" is about
comparing two _endpoints_, not ranges, and the range notations
("<commit>..<commit>" and "<commit>...<commit>") do not mean a range as
defined in the "SPECIFYING RANGES" section in gitrevisions(7).



OPTIONS
*******

-p
-u
-patch
     Generate patch (see section on generating patches).  This is the
     default.

-U<n>
-unified=<n>
     Generate diffs with <n> lines of context instead of the usual
     three.  Implies `-p'.

-raw
     Generate the raw format.

-patch-with-raw
     Synonym for `-p --raw'.

-minimal
     Spend extra time to make sure the smallest possible diff is
     produced.

-patience
     Generate a diff using the "patience diff" algorithm.

-histogram
     Generate a diff using the "histogram diff" algorithm.

-stat[=<width>[,<name-width>[,<count>]]]
     Generate a diffstat. By default, as much space as necessary will
     be used for the filename part, and the rest for the graph part.
     Maximum width defaults to terminal width, or 80 columns if not
     connected to a terminal, and can be overridden by `<width>'. The
     width of the filename part can be limited by giving another width
     `<name-width>' after a comma. The width of the graph part can be
     limited by using `--stat-graph-width=<width>' (affects all
     commands generating a stat graph) or by setting
     `diff.statGraphWidth=<width>' (does not affect `git format-patch').
     By giving a third parameter `<count>', you can limit the output to
     the first `<count>' lines, followed by `...' if there are more.

     These parameters can also be set individually with
     `--stat-width=<width>', `--stat-name-width=<name-width>' and
     `--stat-count=<count>'.

-numstat
     Similar to `--stat', but shows number of added and deleted lines
     in decimal notation and pathname without abbreviation, to make it
     more machine friendly.  For binary files, outputs two `-' instead
     of saying `0 0'.

-shortstat
     Output only the last line of the `--stat' format containing total
     number of modified files, as well as number of added and deleted
     lines.

-dirstat[=<param1,param2,…>]
     Output the distribution of relative amount of changes for each
     sub-directory. The behavior of `--dirstat' can be customized by
     passing it a comma separated list of parameters.  The defaults are
     controlled by the `diff.dirstat' configuration variable (see
     git-config(1)).  The following parameters are available:

    `changes'
          Compute the dirstat numbers by counting the lines that have
          been removed from the source, or added to the destination.
          This ignores the amount of pure code movements within a file.
          In other words, rearranging lines in a file is not counted
          as much as other changes.  This is the default behavior when
          no parameter is given.

    `lines'
          Compute the dirstat numbers by doing the regular line-based
          diff analysis, and summing the removed/added line counts.
          (For binary files, count 64-byte chunks instead, since binary
          files have no natural concept of lines). This is a more
          expensive `--dirstat' behavior than the `changes' behavior,
          but it does count rearranged lines within a file as much as
          other changes. The resulting output is consistent with what
          you get from the other `--*stat' options.

    `files'
          Compute the dirstat numbers by counting the number of files
          changed.  Each changed file counts equally in the dirstat
          analysis. This is the computationally cheapest `--dirstat'
          behavior, since it does not have to look at the file contents
          at all.

    `cumulative'
          Count changes in a child directory for the parent directory
          as well.  Note that when using `cumulative', the sum of the
          percentages reported may exceed 100%. The default
          (non-cumulative) behavior can be specified with the
          `noncumulative' parameter.

    <limit>
          An integer parameter specifies a cut-off percent (3% by
          default).  Directories contributing less than this percentage
          of the changes are not shown in the output.

     Example: The following will count changed files, while ignoring
     directories with less than 10% of the total amount of changed
     files, and accumulating child directory counts in the parent
     directories: `--dirstat=files,10,cumulative'.

-summary
     Output a condensed summary of extended header information such as
     creations, renames and mode changes.

-patch-with-stat
     Synonym for `-p --stat'.

-z
     When `--raw', `--numstat', `--name-only' or `--name-status' has
     been given, do not munge pathnames and use NULs as output field
     terminators.

     Without this option, each pathname output will have TAB, LF,
     double quotes, and backslash characters replaced with `\t', `\n',
     `\"', and `\\', respectively, and the pathname will be enclosed in
     double quotes if any of those replacements occurred.

-name-only
     Show only names of changed files.

-name-status
     Show only names and status of changed files. See the description
     of the `--diff-filter' option on what the status letters mean.

-submodule[=<format>]
     Specify how differences in submodules are shown.  When
     `--submodule' or `--submodule=log' is given, the _log_ format is
     used.  This format lists the commits in the range like
     git-submodule(1) `summary' does.  Omitting the `--submodule'
     option or specifying `--submodule=short', uses the _short_ format.
     This format just shows the names of the commits at the beginning
     and end of the range.

-color[=<when>]
     Show colored diff.  The value must be `always' (the default for
     `<when>'), `never', or `auto'.  The default value is `never'.  It
     can be changed by the `color.ui' and `color.diff' configuration
     settings.

-no-color
     Turn off colored diff.  This can be used to override configuration
     settings.  It is the same as `--color=never'.

-word-diff[=<mode>]
     Show a word diff, using the <mode> to delimit changed words.  By
     default, words are delimited by whitespace; see
     `--word-diff-regex' below.  The <mode> defaults to _plain_, and
     must be one of:

    color
          Highlight changed words using only colors.  Implies `--color'.

    plain
          Show words as `[-removed-]' and `{+added+}'.  Makes no
          attempts to escape the delimiters if they appear in the input,
          so the output may be ambiguous.

    porcelain
          Use a special line-based format intended for script
          consumption.  Added/removed/unchanged runs are printed in the
          usual unified diff format, starting with a `+'/`-'/` `
          character at the beginning of the line and extending to the
          end of the line.  Newlines in the input are represented by a
          tilde `~' on a line of its own.

    none
          Disable word diff again.

     Note that despite the name of the first mode, color is used to
     highlight the changed parts in all modes if enabled.

-word-diff-regex=<regex>
     Use <regex> to decide what a word is, instead of considering runs
     of non-whitespace to be a word.  Also implies `--word-diff' unless
     it was already enabled.

     Every non-overlapping match of the <regex> is considered a word.
     Anything between these matches is considered whitespace and
     ignored(!) for the purposes of finding differences.  You may want
     to append `|[^[:space:]]' to your regular expression to make sure
     that it matches all non-whitespace characters.  A match that
     contains a newline is silently truncated(!) at the newline.

     The regex can also be set via a diff driver or configuration
     option, see gitattributes(1) or git-config(1).  Giving it
     explicitly overrides any diff driver or configuration setting.
     Diff drivers override configuration settings.

-color-words[=<regex>]
     Equivalent to `--word-diff=color' plus (if a regex was specified)
     `--word-diff-regex=<regex>'.

-no-renames
     Turn off rename detection, even when the configuration file gives
     the default to do so.

-check
     Warn if changes introduce whitespace errors.  What are considered
     whitespace errors is controlled by `core.whitespace'
     configuration.  By default, trailing whitespaces (including lines
     that solely consist of whitespaces) and a space character that is
     immediately followed by a tab character inside the initial indent
     of the line are considered whitespace errors.  Exits with non-zero
     status if problems are found. Not compatible with -exit-code.

-full-index
     Instead of the first handful of characters, show the full pre- and
     post-image blob object names on the "index" line when generating
     patch format output.

-binary
     In addition to `--full-index', output a binary diff that can be
     applied with `git-apply'.

-abbrev[=<n>]
     Instead of showing the full 40-byte hexadecimal object name in
     diff-raw format output and diff-tree header lines, show only a
     partial prefix.  This is independent of the `--full-index' option
     above, which controls the diff-patch output format.  Non default
     number of digits can be specified with `--abbrev=<n>'.

-B[<n>][/<m>]
-break-rewrites[=[<n>][/<m>]]
     Break complete rewrite changes into pairs of delete and create.
     This serves two purposes:

     It affects the way a change that amounts to a total rewrite of a
     file not as a series of deletion and insertion mixed together with
     a very few lines that happen to match textually as the context,
     but as a single deletion of everything old followed by a single
     insertion of everything new, and the number `m' controls this
     aspect of the -B option (defaults to 60%). `-B/70%' specifies that
     less than 30% of the original should remain in the result for git
     to consider it a total rewrite (i.e. otherwise the resulting patch
     will be a series of deletion and insertion mixed together with
     context lines).

     When used with -M, a totally-rewritten file is also considered as
     the source of a rename (usually -M only considers a file that
     disappeared as the source of a rename), and the number `n'
     controls this aspect of the -B option (defaults to 50%). `-B20%'
     specifies that a change with addition and deletion compared to 20%
     or more of the file’s size are eligible for being picked up as a
     possible source of a rename to another file.

-M[<n>]
-find-renames[=<n>]
     Detect renames.  If `n' is specified, it is a threshold on the
     similarity index (i.e. amount of addition/deletions compared to the
     file’s size). For example, `-M90%' means git should consider a
     delete/add pair to be a rename if more than 90% of the file
     hasn’t changed.

-C[<n>]
-find-copies[=<n>]
     Detect copies as well as renames.  See also `--find-copies-harder'.
     If `n' is specified, it has the same meaning as for `-M<n>'.

-find-copies-harder
     For performance reasons, by default, `-C' option finds copies only
     if the original file of the copy was modified in the same
     changeset.  This flag makes the command inspect unmodified files
     as candidates for the source of copy.  This is a very expensive
     operation for large projects, so use it with caution.  Giving more
     than one `-C' option has the same effect.

-D
-irreversible-delete
     Omit the preimage for deletes, i.e. print only the header but not
     the diff between the preimage and `/dev/null'. The resulting patch
     is not meant to be applied with `patch' nor `git apply'; this is
     solely for people who want to just concentrate on reviewing the
     text after the change. In addition, the output obviously lack
     enough information to apply such a patch in reverse, even manually,
     hence the name of the option.

     When used together with `-B', omit also the preimage in the
     deletion part of a delete/create pair.

-l<num>
     The `-M' and `-C' options require O(n^2) processing time where n
     is the number of potential rename/copy targets.  This option
     prevents rename/copy detection from running if the number of
     rename/copy targets exceeds the specified number.

-diff-filter=[(A|C|D|M|R|T|U|X|B)…[*]]
     Select only files that are Added (`A'), Copied (`C'), Deleted
     (`D'), Modified (`M'), Renamed (`R'), have their type (i.e.
     regular file, symlink, submodule, …) changed (`T'), are Unmerged
     (`U'), are Unknown (`X'), or have had their pairing Broken (`B').
     Any combination of the filter characters (including none) can be
     used.  When `*' (All-or-none) is added to the combination, all
     paths are selected if there is any file that matches other
     criteria in the comparison; if there is no file that matches other
     criteria, nothing is selected.

-S<string>
     Look for differences that introduce or remove an instance of
     <string>. Note that this is different than the string simply
     appearing in diff output; see the _pickaxe_ entry in
     gitdiffcore(7) for more details.

-G<regex>
     Look for differences whose added or removed line matches the given
     <regex>.

-pickaxe-all
     When `-S' or `-G' finds a change, show all the changes in that
     changeset, not just the files that contain the change in <string>.

-pickaxe-regex
     Make the <string> not a plain string but an extended POSIX regex
     to match.

-O<orderfile>
     Output the patch in the order specified in the <orderfile>, which
     has one shell glob pattern per line.

-R
     Swap two inputs; that is, show differences from index or on-disk
     file to tree contents.

-relative[=<path>]
     When run from a subdirectory of the project, it can be told to
     exclude changes outside the directory and show pathnames relative
     to it with this option.  When you are not in a subdirectory (e.g.
     in a bare repository), you can name which subdirectory to make the
     output relative to by giving a <path> as an argument.

-a
-text
     Treat all files as text.

-ignore-space-at-eol
     Ignore changes in whitespace at EOL.

-b
-ignore-space-change
     Ignore changes in amount of whitespace.  This ignores whitespace
     at line end, and considers all other sequences of one or more
     whitespace characters to be equivalent.

-w
-ignore-all-space
     Ignore whitespace when comparing lines.  This ignores differences
     even if one line has whitespace where the other line has none.

-inter-hunk-context=<lines>
     Show the context between diff hunks, up to the specified number of
     lines, thereby fusing hunks that are close to each other.

-W
-function-context
     Show whole surrounding functions of changes.

-exit-code
     Make the program exit with codes similar to diff(1).  That is, it
     exits with 1 if there were differences and 0 means no differences.

-quiet
     Disable all output of the program. Implies `--exit-code'.

-ext-diff
     Allow an external diff helper to be executed. If you set an
     external diff driver with gitattributes(5), you need to use this
     option with git-log(1) and friends.

-no-ext-diff
     Disallow external diff drivers.

-textconv
-no-textconv
     Allow (or disallow) external text conversion filters to be run
     when comparing binary files. See gitattributes(5) for details.
     Because textconv filters are typically a one-way conversion, the
     resulting diff is suitable for human consumption, but cannot be
     applied. For this reason, textconv filters are enabled by default
     only for git-diff(1) and git-log(1), but not for
     git-format-patch(1) or diff plumbing commands.

-ignore-submodules[=<when>]
     Ignore changes to submodules in the diff generation. <when> can be
     either "none", "untracked", "dirty" or "all", which is the default
     Using "none" will consider the submodule modified when it either
     contains untracked or modified files or its HEAD differs from the
     commit recorded in the superproject and can be used to override
     any settings of the _ignore_ option in git-config(1) or
     gitmodules(5). When "untracked" is used submodules are not
     considered dirty when they only contain untracked content (but
     they are still scanned for modified content). Using "dirty"
     ignores all changes to the work tree of submodules, only changes
     to the commits stored in the superproject are shown (this was the
     behavior until 1.7.0). Using "all" hides all changes to submodules.

-src-prefix=<prefix>
     Show the given source prefix instead of "a/".

-dst-prefix=<prefix>
     Show the given destination prefix instead of "b/".

-no-prefix
     Do not show any source or destination prefix.

   For more detailed explanation on these common options, see also
gitdiffcore(7).

<path>…
     The <paths> parameters, when given, are used to limit the diff to
     the named paths (you can give directory names and get diff for all
     files under them).


Raw output format
*****************

The raw output format from "git-diff-index", "git-diff-tree",
"git-diff-files" and "git diff -raw" are very similar.

   These commands all compare two sets of things; what is compared
differs:

git-diff-index <tree-ish>
     compares the <tree-ish> and the files on the filesystem.

git-diff-index -cached <tree-ish>
     compares the <tree-ish> and the index.

git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…]
     compares the trees named by the two arguments.

git-diff-files [<pattern>…]
     compares the index and the files on the filesystem.

   The "git-diff-tree" command begins its output by printing the hash of
what is being compared. After that, all the commands print one output
line per changed file.

   An output line is formatted this way:

     in-place edit  :100644 100644 bcd1234... 0123456... M file0
     copy-edit      :100644 100644 abcd123... 1234567... C68 file1 file2
     rename-edit    :100644 100644 abcd123... 1234567... R86 file1 file3
     create         :000000 100644 0000000... 1234567... A file4
     delete         :100644 000000 1234567... 0000000... D file5
     unmerged       :000000 000000 0000000... 0000000... U file6

   That is, from the left to the right:

  1. a colon.

  2. mode for "src"; 000000 if creation or unmerged.

  3. a space.

  4. mode for "dst"; 000000 if deletion or unmerged.

  5. a space.

  6. sha1 for "src"; 0{40} if creation or unmerged.

  7. a space.

  8. sha1 for "dst"; 0{40} if creation, unmerged or "look at work tree".

  9. a space.

 10. status, followed by optional "score" number.

 11. a tab or a NUL when _-z_ option is used.

 12. path for "src"

 13. a tab or a NUL when _-z_ option is used; only exists for C or R.

 14. path for "dst"; only exists for C or R.

 15. an LF or a NUL when _-z_ option is used, to terminate the record.

   Possible status letters are:

   * A: addition of a file

   * C: copy of a file into a new one

   * D: deletion of a file

   * M: modification of the contents or mode of a file

   * R: renaming of a file

   * T: change in the type of the file

   * U: file is unmerged (you must complete the merge before it can be
     committed)

   * X: "unknown" change type (most probably a bug, please report it)

   Status letters C and R are always followed by a score (denoting the
percentage of similarity between the source and target of the move or
copy), and are the only ones to be so.

   <sha1> is shown as all 0’s if a file is new on the filesystem and
it is out of sync with the index.

   Example:

     :100644 100644 5be4a4...... 000000...... M file.c

   When `-z' option is not used, TAB, LF, and backslash characters in
pathnames are represented as `\t', `\n', and `\\', respectively.



diff format for merges
**********************

"git-diff-tree", "git-diff-files" and "git-diff -raw" can take _-c_ or
_-cc_ option to generate diff output also for merge commits.  The
output differs from the format described above in the following way:

  1. there is a colon for each parent

  2. there are more "src" modes and "src" sha1

  3. status is concatenated status characters for each parent

  4. no optional "score" number

  5. single path, only for "dst"

   Example:

     ::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM      describe.c

   Note that _combined diff_ lists only files which were modified from
all parents.



Generating patches with -p
**************************

When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
with a _-p_ option, "git diff" without the _-raw_ option, or "git log"
with the "-p" option, they do not produce the output described above;
instead they produce a patch file.  You can customize the creation of
such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS
environment variables.

   What the -p option produces is slightly different from the
traditional diff format:

  1. It is preceded with a "git diff" header that looks like this:

          diff --git a/file1 b/file2

     The `a/' and `b/' filenames are the same unless rename/copy is
     involved.  Especially, even for a creation or a deletion,
     `/dev/null' is _not_ used in place of the `a/' or `b/' filenames.

     When rename/copy is involved, `file1' and `file2' show the name of
     the source file of the rename/copy and the name of the file that
     rename/copy produces, respectively.

  2. It is followed by one or more extended header lines:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     File modes are printed as 6-digit octal numbers including the file
     type and file permission bits.

     Path names in extended headers do not include the `a/' and `b/'
     prefixes.

     The similarity index is the percentage of unchanged lines, and the
     dissimilarity index is the percentage of changed lines.  It is a
     rounded down integer, followed by a percent sign.  The similarity
     index value of 100% is thus reserved for two equal files, while
     100% dissimilarity means that no line from the old file made it
     into the new one.

     The index line includes the SHA-1 checksum before and after the
     change.  The <mode> is included if the file mode does not change;
     otherwise, separate lines indicate the old and the new mode.

  3. TAB, LF, double quote and backslash characters in pathnames are
     represented as `\t', `\n', `\"' and `\\', respectively.  If there
     is need for such substitution then the whole pathname is put in
     double quotes.

  4. All the `file1' files in the output refer to files before the
     commit, and all the `file2' files refer to files after the commit.
     It is incorrect to apply each change to each file sequentially.
     For example, this patch will swap a and b:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a


combined diff format
********************

Any diff-generating command can take the ‘-c` or `--cc' option to
produce a _combined diff_ when showing a merge. This is the default
format when showing merges with git-diff(1) or git-show(1). Note also
that you can give the `-m’ option to any of these commands to force
generation of diffs with individual parents of a merge.

   A _combined diff_ format looks like this:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. It is preceded with a "git diff" header, that looks like this
     (when _-c_ option is used):

          diff --combined file

     or like this (when _-cc_ option is used):

          diff --cc file

  2. It is followed by one or more extended header lines (this example
     shows a merge with two parents):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     The `mode <mode>,<mode>..<mode>' line appears only if at least one
     of the <mode> is different from the rest. Extended headers with
     information about detected contents movement (renames and copying
     detection) are designed to work with diff of two <tree-ish> and
     are not used by combined diff format.

  3. It is followed by two-line from-file/to-file header

          --- a/file
          +++ b/file

     Similar to two-line header for traditional _unified_ diff format,
     `/dev/null' is used to signal created or deleted files.

  4. Chunk header format is modified to prevent people from
     accidentally feeding it to `patch -p1'. Combined diff format was
     created for review of merge commit changes, and was not meant for
     apply. The change is similar to the change in the extended _index_
     header:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     There are (number of parents + 1) `@' characters in the chunk
     header for combined diff format.

   Unlike the traditional _unified_ diff format, which shows two files
A and B with a single column that has `-' (minus — appears in A
but removed in B), `+' (plus — missing in A but added to B), or
`" "' (space — unchanged) prefix, this format compares two or
more files file1, file2,… with one file X, and shows how X differs
from each of fileN.  One column for each of fileN is prepended to the
output line to note how X’s line is different from it.

   A `-' character in the column N means that the line appears in fileN
but it does not appear in the result.  A `+' character in the column N
means that the line appears in the result, and fileN does not have that
line (in other words, the line was added, from the point of view of
that parent).

   In the above example output, the function signature was changed from
both files (hence two `-' removals from both file1 and file2, plus `++'
to mean one line that was added does not appear in either file1 nor
file2).  Also eight other lines are the same from file1 but do not
appear in file2 (hence prefixed with `+').

   When shown by `git diff-tree -c', it compares the parents of a merge
commit with the merge result (i.e. file1..fileN are the parents).  When
shown by `git diff-files -c', it compares the two unresolved merge
parents with the working tree file (i.e. file1 is stage 2 aka "our
version", file2 is stage 3 aka "their version").



other diff formats
******************

The `--summary' option describes newly added, deleted, renamed and
copied files.  The `--stat' option adds diffstat(1) graph to the
output.  These options can be combined with other options, such as
`-p', and are meant for human consumption.

   When showing a change that involves a rename or a copy, `--stat'
output formats the pathnames compactly by combining common prefix and
suffix of the pathnames.  For example, a change that moves
`arch/i386/Makefile' to `arch/x86/Makefile' while modifying 4 lines
will be shown like this:

     arch/{i386 => x86}/Makefile    |   4 +--

   The `--numstat' option gives the diffstat(1) information but is
designed for easier machine consumption.  An entry in `--numstat'
output looks like this:

     1       2       README
     3       1       arch/{i386 => x86}/Makefile

   That is, from left to right:

  1. the number of added lines;

  2. a tab;

  3. the number of deleted lines;

  4. a tab;

  5. pathname (possibly with rename/copy information);

  6. a newline.

   When `-z' output option is in effect, the output is formatted this
way:

     1       2       README NUL
     3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL

   That is:

  1. the number of added lines;

  2. a tab;

  3. the number of deleted lines;

  4. a tab;

  5. a NUL (only exists if renamed/copied);

  6. pathname in preimage;

  7. a NUL (only exists if renamed/copied);

  8. pathname in postimage (only exists if renamed/copied);

  9. a NUL.

   The extra `NUL' before the preimage path in renamed case is to allow
scripts that read the output to tell if the current record being read is
a single-path record or a rename/copy record without reading ahead.
After reading added and deleted lines, reading up to `NUL' would yield
the pathname, but if that is `NUL', the record will show two paths.



EXAMPLES
********

Various ways to check your working tree
          $ git diff            (1)
          $ git diff --cached   (2)
          $ git diff HEAD       (3)

    *note (1): CO1-1.
          Changes in the working tree not yet staged for the next
          commit.

    *note (2): CO1-2.
          Changes between the index and your last commit; what you
          would be committing if you run "git commit" without "-a"
          option.

    *note (3): CO1-3.
          Changes in the working tree since your last commit; what you
          would be committing if you run "git commit -a"

Comparing with arbitrary commits
          $ git diff test            (1)
          $ git diff HEAD -- ./test  (2)
          $ git diff HEAD^ HEAD      (3)

    *note (1): CO2-1.
          Instead of using the tip of the current branch, compare with
          the tip of "test" branch.

    *note (2): CO2-2.
          Instead of comparing with the tip of "test" branch, compare
          with the tip of the current branch, but limit the comparison
          to the file "test".

    *note (3): CO2-3.
          Compare the version before the last commit and the last
          commit.

Comparing branches
          $ git diff topic master    (1)
          $ git diff topic..master   (2)
          $ git diff topic...master  (3)

    *note (1): CO3-1.
          Changes between the tips of the topic and the master branches.

    *note (2): CO3-2.
          Same as above.

    *note (3): CO3-3.
          Changes that occurred on the master branch since when the
          topic branch was started off it.

Limiting the diff output
          $ git diff --diff-filter=MRC            (1)
          $ git diff --name-status                (2)
          $ git diff arch/i386 include/asm-i386   (3)

    *note (1): CO4-1.
          Show only modification, rename and copy, but not addition nor
          deletion.

    *note (2): CO4-2.
          Show only names and the nature of change, but not actual diff
          output.

    *note (3): CO4-3.
          Limit diff output to named subtrees.

Munging the diff output
          $ git diff --find-copies-harder -B -C  (1)
          $ git diff -R                          (2)

    *note (1): CO5-1.
          Spend extra cycles to find renames, copies and complete
          rewrites (very expensive).

    *note (2): CO5-2.
          Output diff in reverse.


SEE ALSO
********

diff(1), git-difftool(1), git-log(1), gitdiffcore(7),
git-format-patch(1), git-apply(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-difftool,  Up: Top

Name
****

git-difftool — Show changes using common diff tools



Synopsis
********

     git difftool [<options>] [<commit> [<commit>]] [-] [<path>…]


DESCRIPTION
***********

_git difftool_ is a git command that allows you to compare and edit
files between revisions using common diff tools.  _git difftool_ is a
frontend to _git diff_ and accepts the same options and arguments. See
git-diff(1).



OPTIONS
*******

-d
-dir-diff
     Copy the modified files to a temporary location and perform a
     directory diff on them. This mode never prompts before launching
     the diff tool.

-y
-no-prompt
     Do not prompt before launching a diff tool.

-prompt
     Prompt before each invocation of the diff tool.  This is the
     default behaviour; the option is provided to override any
     configuration settings.

-t <tool>
-tool=<tool>
     Use the diff tool specified by <tool>.  Valid values include
     emerge, kompare, meld, and vimdiff. Run `git difftool --tool-help'
     for the list of valid <tool> settings.

     If a diff tool is not specified, _git difftool_ will use the
     configuration variable `diff.tool'.  If the configuration variable
     `diff.tool' is not set, _git difftool_ will pick a suitable
     default.

     You can explicitly provide a full path to the tool by setting the
     configuration variable `difftool.<tool>.path'. For example, you
     can configure the absolute path to kdiff3 by setting
     `difftool.kdiff3.path'. Otherwise, _git difftool_ assumes the tool
     is available in PATH.

     Instead of running one of the known diff tools, _git difftool_ can
     be customized to run an alternative program by specifying the
     command line to invoke in a configuration variable
     `difftool.<tool>.cmd'.

     When _git difftool_ is invoked with this tool (either through the
     `-t' or `--tool' option or the `diff.tool' configuration variable)
     the configured command line will be invoked with the following
     variables available: `$LOCAL' is set to the name of the temporary
     file containing the contents of the diff pre-image and `$REMOTE'
     is set to the name of the temporary file containing the contents
     of the diff post-image.  `$MERGED' is the name of the file which is
     being compared. `$BASE' is provided for compatibility with custom
     merge tool commands and has the same value as `$MERGED'.

-tool-help
     Print a list of diff tools that may be used with `--tool'.

-x <command>
-extcmd=<command>
     Specify a custom command for viewing diffs.  _git-difftool_
     ignores the configured defaults and runs `$command $LOCAL $REMOTE'
     when this option is specified.  Additionally, `$BASE' is set in
     the environment.

-g
-gui
     When _git-difftool_ is invoked with the `-g' or `--gui' option the
     default diff tool will be read from the configured `diff.guitool'
     variable instead of `diff.tool'.

   See git-diff(1) for the full list of supported options.



CONFIG VARIABLES
****************

_git difftool_ falls back to _git mergetool_ config variables when the
difftool equivalents have not been defined.

diff.tool
     The default diff tool to use.

diff.guitool
     The default diff tool to use when `--gui' is specified.

difftool.<tool>.path
     Override the path for the given tool.  This is useful in case your
     tool is not in the PATH.

difftool.<tool>.cmd
     Specify the command to invoke the specified diff tool.

     See the `--tool=<tool>' option above for more details.

difftool.prompt
     Prompt before each invocation of the diff tool.


SEE ALSO
********

git-diff(1)
     Show changes between commits, commit and working tree, etc

git-mergetool(1)
     Run merge conflict resolution tools to resolve merge conflicts

git-config(1)
     Get and set repository or global options


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fast-export,  Up: Top

Name
****

git-fast-export — Git data exporter



Synopsis
********

     git fast-export [options] | git fast-import


DESCRIPTION
***********

This program dumps the given revisions in a form suitable to be piped
into _git fast-import_.

   You can use it as a human-readable bundle replacement (see
git-bundle(1)), or as a kind of an interactive _git filter-branch_.



OPTIONS
*******

-progress=<n>
     Insert _progress_ statements every <n> objects, to be shown by
     _git fast-import_ during import.

-signed-tags=(verbatim|warn|strip|abort)
     Specify how to handle signed tags.  Since any transformation after
     the export can change the tag names (which can also happen when
     excluding revisions) the signatures will not match.

     When asking to _abort_ (which is the default), this program will
     die when encountering a signed tag.  With _strip_, the tags will
     be made unsigned, with _verbatim_, they will be silently exported
     and with _warn_, they will be exported, but you will see a warning.

-tag-of-filtered-object=(abort|drop|rewrite)
     Specify how to handle tags whose tagged object is filtered out.
     Since revisions and files to export can be limited by path, tagged
     objects may be filtered completely.

     When asking to _abort_ (which is the default), this program will
     die when encountering such a tag.  With _drop_ it will omit such
     tags from the output.  With _rewrite_, if the tagged object is a
     commit, it will rewrite the tag to tag an ancestor commit (via
     parent rewriting; see git-rev-list(1))

-M
-C
     Perform move and/or copy detection, as described in the
     git-diff(1) manual page, and use it to generate rename and copy
     commands in the output dump.

     Note that earlier versions of this command did not complain and
     produced incorrect results if you gave these options.

-export-marks=<file>
     Dumps the internal marks table to <file> when complete.  Marks are
     written one per line as `:markid SHA-1'. Only marks for revisions
     are dumped; marks for blobs are ignored.  Backends can use this
     file to validate imports after they have been completed, or to
     save the marks table across incremental runs.  As <file> is only
     opened and truncated at completion, the same path can also be
     safely given to -import-marks.

-import-marks=<file>
     Before processing any input, load the marks specified in <file>.
     The input file must exist, must be readable, and must use the same
     format as produced by -export-marks.

     Any commits that have already been marked will not be exported
     again.  If the backend uses a similar -import-marks file, this
     allows for incremental bidirectional exporting of the repository
     by keeping the marks the same across runs.

-fake-missing-tagger
     Some old repositories have tags without a tagger.  The fast-import
     protocol was pretty strict about that, and did not allow that.  So
     fake a tagger to be able to fast-import the output.

-use-done-feature
     Start the stream with a _feature done_ stanza, and terminate it
     with a _done_ command.

-no-data
     Skip output of blob objects and instead refer to blobs via their
     original SHA-1 hash.  This is useful when rewriting the directory
     structure or history of a repository without touching the contents
     of individual files.  Note that the resulting stream can only be
     used by a repository which already contains the necessary objects.

-full-tree
     This option will cause fast-export to issue a "deleteall"
     directive for each commit followed by a full list of all files in
     the commit (as opposed to just listing the files which are
     different from the commit’s first parent).

[<git-rev-list-args>…]
     A list of arguments, acceptable to _git rev-parse_ and _git
     rev-list_, that specifies the specific objects and references to
     export.  For example, `master~10..master' causes the current
     master reference to be exported along with all objects added since
     its 10th ancestor commit.


EXAMPLES
********

     $ git fast-export --all | (cd /empty/repository && git fast-import)

   This will export the whole repository and import it into the existing
empty repository.  Except for reencoding commits that are not in UTF-8,
it would be a one-to-one mirror.

     $ git fast-export master~5..master |
             sed "s|refs/heads/master|refs/heads/other|" |
             git fast-import

   This makes a new branch called _other_ from _master~5..master_ (i.e.
if _master_ has linear history, it will take the last 5 commits).

   Note that this assumes that none of the blobs and commit messages
referenced by that revision range contains the string
_refs/heads/master_.



Limitations
***********

Since _git fast-import_ cannot tag trees, you will not be able to
export the linux-2.6.git repository completely, as it contains a tag
referencing a tree instead of a commit.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fast-import,  Up: Top

Name
****

git-fast-import — Backend for fast Git data importers



Synopsis
********

     frontend | git fast-import [options]


DESCRIPTION
***********

This program is usually not what the end user wants to run directly.
Most end users want to use one of the existing frontend programs, which
parses a specific type of foreign source and feeds the contents stored
there to _git fast-import_.

   fast-import reads a mixed command/data stream from standard input and
writes one or more packfiles directly into the current repository.
When EOF is received on standard input, fast import writes out updated
branch and tag refs, fully updating the current repository with the
newly imported data.

   The fast-import backend itself can import into an empty repository
(one that has already been initialized by _git init_) or incrementally
update an existing populated repository.  Whether or not incremental
imports are supported from a particular foreign source depends on the
frontend program in use.



OPTIONS
*******

-date-format=<fmt>
     Specify the type of dates the frontend will supply to fast-import
     within `author', `committer' and `tagger' commands.  See “Date
     Formats” below for details about which formats are supported,
     and their syntax.

— done
     Terminate with error if there is no _done_ command at the end of
     the stream.

-force
     Force updating modified existing branches, even if doing so would
     cause commits to be lost (as the new commit does not contain the
     old commit).

-max-pack-size=<n>
     Maximum size of each output packfile.  The default is unlimited.

-big-file-threshold=<n>
     Maximum size of a blob that fast-import will attempt to create a
     delta for, expressed in bytes.  The default is 512m (512 MiB).
     Some importers may wish to lower this on systems with constrained
     memory.

-depth=<n>
     Maximum delta depth, for blob and tree deltification.  Default is
     10.

-active-branches=<n>
     Maximum number of branches to maintain active at once.  See
     “Memory Utilization” below for details.  Default is 5.

-export-marks=<file>
     Dumps the internal marks table to <file> when complete.  Marks are
     written one per line as `:markid SHA-1'.  Frontends can use this
     file to validate imports after they have been completed, or to
     save the marks table across incremental runs.  As <file> is only
     opened and truncated at checkpoint (or completion) the same path
     can also be safely given to -import-marks.

-import-marks=<file>
     Before processing any input, load the marks specified in <file>.
     The input file must exist, must be readable, and must use the same
     format as produced by -export-marks.  Multiple options may be
     supplied to import more than one set of marks.  If a mark is
     defined to different values, the last file wins.

-import-marks-if-exists=<file>
     Like -import-marks but instead of erroring out, silently skips the
     file if it does not exist.

-relative-marks
     After specifying -relative-marks the paths specified with
     -import-marks= and -export-marks= are relative to an internal
     directory in the current repository.  In git-fast-import this
     means that the paths are relative to the .git/info/fast-import
     directory. However, other importers may use a different location.

-no-relative-marks
     Negates a previous -relative-marks. Allows for combining relative
     and non-relative marks by interweaving -(no-)-relative-marks with
     the -(import|export)-marks= options.

-cat-blob-fd=<fd>
     Write responses to `cat-blob' and `ls' queries to the file
     descriptor <fd> instead of `stdout'.  Allows `progress' output
     intended for the end-user to be separated from other output.

-done
     Require a `done' command at the end of the stream.  This option
     might be useful for detecting errors that cause the frontend to
     terminate before it has started to write a stream.

-export-pack-edges=<file>
     After creating a packfile, print a line of data to <file> listing
     the filename of the packfile and the last commit on each branch
     that was written to that packfile.  This information may be useful
     after importing projects whose total object set exceeds the 4 GiB
     packfile limit, as these commits can be used as edge points during
     calls to _git pack-objects_.

-quiet
     Disable all non-fatal output, making fast-import silent when it is
     successful.  This option disables the output shown by -stats.

-stats
     Display some basic statistics about the objects fast-import has
     created, the packfiles they were stored into, and the memory used
     by fast-import during this run.  Showing this output is currently
     the default, but can be disabled with -quiet.


Performance
***********

The design of fast-import allows it to import large projects in a
minimum amount of memory usage and processing time.  Assuming the
frontend is able to keep up with fast-import and feed it a constant
stream of data, import times for projects holding 10+ years of history
and containing 100,000+ individual commits are generally completed in
just 1-2 hours on quite modest (~$2,000 USD) hardware.

   Most bottlenecks appear to be in foreign source data access (the
source just cannot extract revisions fast enough) or disk IO
(fast-import writes as fast as the disk will take the data).  Imports
will run faster if the source data is stored on a different drive than
the destination Git repository (due to less IO contention).



Development Cost
****************

A typical frontend for fast-import tends to weigh in at approximately
200 lines of Perl/Python/Ruby code.  Most developers have been able to
create working importers in just a couple of hours, even though it is
their first exposure to fast-import, and sometimes even to Git.  This is
an ideal situation, given that most conversion tools are throw-away
(use once, and never look back).



Parallel Operation
******************

Like _git push_ or _git fetch_, imports handled by fast-import are safe
to run alongside parallel `git repack -a -d' or `git gc' invocations,
or any other Git operation (including _git prune_, as loose objects are
never used by fast-import).

   fast-import does not lock the branch or tag refs it is actively
importing.  After the import, during its ref update phase, fast-import
tests each existing branch ref to verify the update will be a
fast-forward update (the commit stored in the ref is contained in the
new history of the commit to be written).  If the update is not a
fast-forward update, fast-import will skip updating that ref and instead
prints a warning message.  fast-import will always attempt to update all
branch refs, and does not stop on the first failure.

   Branch updates can be forced with -force, but it’s recommended that
this only be used on an otherwise quiet repository.  Using -force is
not necessary for an initial import into an empty repository.



Technical Discussion
********************

fast-import tracks a set of branches in memory.  Any branch can be
created or modified at any point during the import process by sending a
`commit' command on the input stream.  This design allows a frontend
program to process an unlimited number of branches simultaneously,
generating commits in the order they are available from the source
data.  It also simplifies the frontend programs considerably.

   fast-import does not use or alter the current working directory, or
any file within it.  (It does however update the current Git repository,
as referenced by `GIT_DIR'.)  Therefore an import frontend may use the
working directory for its own purposes, such as extracting file
revisions from the foreign source.  This ignorance of the working
directory also allows fast-import to run very quickly, as it does not
need to perform any costly file update operations when switching
between branches.



Input Format
************

With the exception of raw file data (which Git does not interpret) the
fast-import input format is text (ASCII) based.  This text based format
simplifies development and debugging of frontend programs, especially
when a higher level language such as Perl, Python or Ruby is being used.

   fast-import is very strict about its input.  Where we say SP below
we mean *exactly* one space.  Likewise LF means one (and only one)
linefeed and HT one (and only one) horizontal tab.  Supplying
additional whitespace characters will cause unexpected results, such as
branch names or file names with leading or trailing spaces in their
name, or early termination of fast-import when it encounters unexpected
input.



Stream Comments
===============

To aid in debugging frontends fast-import ignores any line that begins
with `#' (ASCII pound/hash) up to and including the line ending `LF'.
A comment line may contain any sequence of bytes that does not contain
an LF and therefore may be used to include any detailed debugging
information that might be specific to the frontend and useful when
inspecting a fast-import data stream.



Date Formats
============

The following date formats are supported.  A frontend should select the
format it will use for this import by passing the format name in the
-date-format=<fmt> command line option.

`raw'
     This is the Git native format and is `<time> SP <offutc>'.  It is
     also fast-import’s default format, if -date-format was not
     specified.

     The time of the event is specified by `<time>' as the number of
     seconds since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is
     written as an ASCII decimal integer.

     The local offset is specified by `<offutc>' as a positive or
     negative offset from UTC.  For example EST (which is 5 hours
     behind UTC) would be expressed in `<tz>' by “-0500” while UTC
     is “+0000”.  The local offset does not affect `<time>'; it is
     used only as an advisement to help formatting routines display the
     timestamp.

     If the local offset is not available in the source material, use
     “+0000”, or the most common local offset.  For example many
     organizations have a CVS repository which has only ever been
     accessed by users who are located in the same location and
     timezone.  In this case a reasonable offset from UTC could be
     assumed.

     Unlike the `rfc2822' format, this format is very strict.  Any
     variation in formatting will cause fast-import to reject the value.

`rfc2822'
     This is the standard email format as described by RFC 2822.

     An example value is “Tue Feb 6 11:22:18 2007 -0500”.  The Git
     parser is accurate, but a little on the lenient side.  It is the
     same parser used by _git am_ when applying patches received from
     email.

     Some malformed strings may be accepted as valid dates.  In some of
     these cases Git will still be able to obtain the correct date from
     the malformed string.  There are also some types of malformed
     strings which Git will parse wrong, and yet consider valid.
     Seriously malformed strings will be rejected.

     Unlike the `raw' format above, the timezone/UTC offset information
     contained in an RFC 2822 date string is used to adjust the date
     value to UTC prior to storage.  Therefore it is important that
     this information be as accurate as possible.

     If the source material uses RFC 2822 style dates, the frontend
     should let fast-import handle the parsing and conversion (rather
     than attempting to do it itself) as the Git parser has been well
     tested in the wild.

     Frontends should prefer the `raw' format if the source material
     already uses UNIX-epoch format, can be coaxed to give dates in that
     format, or its format is easily convertible to it, as there is no
     ambiguity in parsing.

`now'
     Always use the current time and timezone.  The literal `now' must
     always be supplied for `<when>'.

     This is a toy format.  The current time and timezone of this system
     is always copied into the identity string at the time it is being
     created by fast-import.  There is no way to specify a different
     time or timezone.

     This particular format is supplied as it’s short to implement and
     may be useful to a process that wants to create a new commit right
     now, without needing to use a working directory or _git
     update-index_.

     If separate `author' and `committer' commands are used in a
     `commit' the timestamps may not match, as the system clock will be
     polled twice (once for each command).  The only way to ensure that
     both author and committer identity information has the same
     timestamp is to omit `author' (thus copying from `committer') or
     to use a date format other than `now'.


Commands
========

fast-import accepts several commands to update the current repository
and control the current import process.  More detailed discussion (with
examples) of each command follows later.

`commit'
     Creates a new branch or updates an existing branch by creating a
     new commit and updating the branch to point at the newly created
     commit.

`tag'
     Creates an annotated tag object from an existing commit or branch.
     Lightweight tags are not supported by this command, as they are
     not recommended for recording meaningful points in time.

`reset'
     Reset an existing branch (or a new branch) to a specific revision.
     This command must be used to change a branch to a specific
     revision without making a commit on it.

`blob'
     Convert raw file data into a blob, for future use in a `commit'
     command.  This command is optional and is not needed to perform an
     import.

`checkpoint'
     Forces fast-import to close the current packfile, generate its
     unique SHA-1 checksum and index, and start a new packfile.  This
     command is optional and is not needed to perform an import.

`progress'
     Causes fast-import to echo the entire line to its own standard
     output.  This command is optional and is not needed to perform an
     import.

`done'
     Marks the end of the stream. This command is optional unless the
     `done' feature was requested using the `--done' command line
     option or `feature done' command.

`cat-blob'
     Causes fast-import to print a blob in _cat-file -batch_ format to
     the file descriptor set with `--cat-blob-fd' or `stdout' if
     unspecified.

`ls'
     Causes fast-import to print a line describing a directory entry in
     _ls-tree_ format to the file descriptor set with `--cat-blob-fd'
     or `stdout' if unspecified.

`feature'
     Require that fast-import supports the specified feature, or abort
     if it does not.

`option'
     Specify any of the options listed under OPTIONS that do not change
     stream semantic to suit the frontend’s needs. This command is
     optional and is not needed to perform an import.


commit
======

Create or update a branch with a new commit, recording one logical
change to the project.

             'commit' SP <ref> LF
             mark?
             ('author' (SP <name>)? SP LT <email> GT SP <when> LF)?
             'committer' (SP <name>)? SP LT <email> GT SP <when> LF
             data
             ('from' SP <committish> LF)?
             ('merge' SP <committish> LF)?
             (filemodify | filedelete | filecopy | filerename | filedeleteall | notemodify)*
             LF?

   where `<ref>' is the name of the branch to make the commit on.
Typically branch names are prefixed with `refs/heads/' in Git, so
importing the CVS branch symbol `RELENG-1_0' would use
`refs/heads/RELENG-1_0' for the value of `<ref>'.  The value of `<ref>'
must be a valid refname in Git.  As `LF' is not valid in a Git refname,
no quoting or escaping syntax is supported here.

   A `mark' command may optionally appear, requesting fast-import to
save a reference to the newly created commit for future use by the
frontend (see below for format).  It is very common for frontends to
mark every commit they create, thereby allowing future branch creation
from any imported commit.

   The `data' command following `committer' must supply the commit
message (see below for `data' command syntax).  To import an empty
commit message use a 0 length data.  Commit messages are free-form and
are not interpreted by Git.  Currently they must be encoded in UTF-8,
as fast-import does not permit other encodings to be specified.

   Zero or more `filemodify', `filedelete', `filecopy', `filerename',
`filedeleteall' and `notemodify' commands may be included to update the
contents of the branch prior to creating the commit.  These commands
may be supplied in any order.  However it is recommended that a
`filedeleteall' command precede all `filemodify', `filecopy',
`filerename' and `notemodify' commands in the same commit, as
`filedeleteall' wipes the branch clean (see below).

   The `LF' after the command is optional (it used to be required).



author
------

An `author' command may optionally appear, if the author information
might differ from the committer information.  If `author' is omitted
then fast-import will automatically use the committer’s information
for the author portion of the commit.  See below for a description of
the fields in `author', as they are identical to `committer'.



committer
---------

The `committer' command indicates who made this commit, and when they
made it.

   Here `<name>' is the person’s display name (for example “Com M
Itter”) and `<email>' is the person’s email address
(“cm@example.com (mailto:cm@example.com)”).  `LT' and `GT' are the
literal less-than (\x3c) and greater-than (\x3e) symbols.  These are
required to delimit the email address from the other fields in the
line.  Note that `<name>' and `<email>' are free-form and may contain
any sequence of bytes, except `LT', `GT' and `LF'.  `<name>' is
typically UTF-8 encoded.

   The time of the change is specified by `<when>' using the date format
that was selected by the -date-format=<fmt> command line option.  See
“Date Formats” above for the set of supported formats, and their
syntax.



from
----

The `from' command is used to specify the commit to initialize this
branch from.  This revision will be the first ancestor of the new
commit.

   Omitting the `from' command in the first commit of a new branch will
cause fast-import to create that commit with no ancestor. This tends to
be desired only for the initial commit of a project.  If the frontend
creates all files from scratch when making a new branch, a `merge'
command may be used instead of `from' to start the commit with an empty
tree.  Omitting the `from' command on existing branches is usually
desired, as the current commit on that branch is automatically assumed
to be the first ancestor of the new commit.

   As `LF' is not valid in a Git refname or SHA-1 expression, no
quoting or escaping syntax is supported within `<committish>'.

   Here `<committish>' is any of the following:

   * The name of an existing branch already in fast-import’s internal
     branch table.  If fast-import doesn’t know the name, it’s
     treated as a SHA-1 expression.

   * A mark reference, `:<idnum>', where `<idnum>' is the mark number.

     The reason fast-import uses `:' to denote a mark reference is this
     character is not legal in a Git branch name.  The leading `:'
     makes it easy to distinguish between the mark 42 (`:42') and the
     branch 42 (`42' or `refs/heads/42'), or an abbreviated SHA-1 which
     happened to consist only of base-10 digits.

     Marks must be declared (via `mark') before they can be used.

   * A complete 40 byte or abbreviated commit SHA-1 in hex.

   * Any valid Git SHA-1 expression that resolves to a commit.  See
     “SPECIFYING REVISIONS” in gitrevisions(7) for details.

   The special case of restarting an incremental import from the
current branch value should be written as:

             from refs/heads/branch^0

   The `^0' suffix is necessary as fast-import does not permit a branch
to start from itself, and the branch is created in memory before the
`from' command is even read from the input.  Adding `^0' will force
fast-import to resolve the commit through Git’s revision parsing
library, rather than its internal branch table, thereby loading in the
existing value of the branch.



merge
-----

Includes one additional ancestor commit.  If the `from' command is
omitted when creating a new branch, the first `merge' commit will be
the first ancestor of the current commit, and the branch will start out
with no files.  An unlimited number of `merge' commands per commit are
permitted by fast-import, thereby establishing an n-way merge.  However
Git’s other tools never create commits with more than 15 additional
ancestors (forming a 16-way merge).  For this reason it is suggested
that frontends do not use more than 15 `merge' commands per commit; 16,
if starting a new, empty branch.

   Here `<committish>' is any of the commit specification expressions
also accepted by `from' (see above).



filemodify
----------

Included in a `commit' command to add a new file or change the content
of an existing file.  This command has two different means of
specifying the content of the file.

External data format
     The data content for the file was already supplied by a prior
     `blob' command.  The frontend just needs to connect it.

                  'M' SP <mode> SP <dataref> SP <path> LF

     Here usually `<dataref>' must be either a mark reference
     (`:<idnum>') set by a prior `blob' command, or a full 40-byte
     SHA-1 of an existing Git blob object.  If `<mode>' is `040000`'
     then `<dataref>' must be the full 40-byte SHA-1 of an existing Git
     tree object or a mark reference set with `--import-marks'.

Inline data format
     The data content for the file has not been supplied yet.  The
     frontend wants to supply it as part of this modify command.

                  'M' SP <mode> SP 'inline' SP <path> LF
                  data

     See below for a detailed description of the `data' command.

   In both formats `<mode>' is the type of file entry, specified in
octal.  Git only supports the following modes:

   * `100644' or `644': A normal (not-executable) file.  The majority
     of files in most projects use this mode.  If in doubt, this is
     what you want.

   * `100755' or `755': A normal, but executable, file.

   * `120000': A symlink, the content of the file will be the link
     target.

   * `160000': A gitlink, SHA-1 of the object refers to a commit in
     another repository. Git links can only be specified by SHA or
     through a commit mark. They are used to implement submodules.

   * `040000': A subdirectory.  Subdirectories can only be specified by
     SHA or through a tree mark set with `--import-marks'.

   In both formats `<path>' is the complete path of the file to be added
(if not already existing) or modified (if already existing).

   A `<path>' string must use UNIX-style directory separators (forward
slash `/'), may contain any byte other than `LF', and must not start
with double quote (`"').

   If an `LF' or double quote must be encoded into `<path>' shell-style
quoting should be used, e.g. `"path/with\n and \" in it"'.

   The value of `<path>' must be in canonical form. That is it must not:

   * contain an empty directory component (e.g. `foo//bar' is invalid),

   * end with a directory separator (e.g. `foo/' is invalid),

   * start with a directory separator (e.g. `/foo' is invalid),

   * contain the special component `.' or `..' (e.g. `foo/./bar' and
     `foo/../bar' are invalid).

   The root of the tree can be represented by an empty string as
`<path>'.

   It is recommended that `<path>' always be encoded using UTF-8.



filedelete
----------

Included in a `commit' command to remove a file or recursively delete
an entire directory from the branch.  If the file or directory removal
makes its parent directory empty, the parent directory will be
automatically removed too.  This cascades up the tree until the first
non-empty directory or the root is reached.

             'D' SP <path> LF

   here `<path>' is the complete path of the file or subdirectory to be
removed from the branch.  See `filemodify' above for a detailed
description of `<path>'.



filecopy
--------

Recursively copies an existing file or subdirectory to a different
location within the branch.  The existing file or directory must exist.
If the destination exists it will be completely replaced by the
content copied from the source.

             'C' SP <path> SP <path> LF

   here the first `<path>' is the source location and the second
`<path>' is the destination.  See `filemodify' above for a detailed
description of what `<path>' may look like.  To use a source path that
contains SP the path must be quoted.

   A `filecopy' command takes effect immediately.  Once the source
location has been copied to the destination any future commands applied
to the source location will not impact the destination of the copy.



filerename
----------

Renames an existing file or subdirectory to a different location within
the branch.  The existing file or directory must exist. If the
destination exists it will be replaced by the source directory.

             'R' SP <path> SP <path> LF

   here the first `<path>' is the source location and the second
`<path>' is the destination.  See `filemodify' above for a detailed
description of what `<path>' may look like.  To use a source path that
contains SP the path must be quoted.

   A `filerename' command takes effect immediately.  Once the source
location has been renamed to the destination any future commands
applied to the source location will create new files there and not
impact the destination of the rename.

   Note that a `filerename' is the same as a `filecopy' followed by a
`filedelete' of the source location.  There is a slight performance
advantage to using `filerename', but the advantage is so small that it
is never worth trying to convert a delete/add pair in source material
into a rename for fast-import.  This `filerename' command is provided
just to simplify frontends that already have rename information and
don’t want bother with decomposing it into a `filecopy' followed by a
`filedelete'.



filedeleteall
-------------

Included in a `commit' command to remove all files (and also all
directories) from the branch.  This command resets the internal branch
structure to have no files in it, allowing the frontend to subsequently
add all interesting files from scratch.

             'deleteall' LF

   This command is extremely useful if the frontend does not know (or
does not care to know) what files are currently on the branch, and
therefore cannot generate the proper `filedelete' commands to update
the content.

   Issuing a `filedeleteall' followed by the needed `filemodify'
commands to set the correct content will produce the same results as
sending only the needed `filemodify' and `filedelete' commands.  The
`filedeleteall' approach may however require fast-import to use slightly
more memory per active branch (less than 1 MiB for even most large
projects); so frontends that can easily obtain only the affected paths
for a commit are encouraged to do so.



notemodify
----------

Included in a `commit' `<notes_ref>' command to add a new note
annotating a `<committish>' or change this annotation contents.
Internally it is similar to filemodify 100644 on `<committish>' path
(maybe split into subdirectories). It’s not advised to use any other
commands to write to the `<notes_ref>' tree except `filedeleteall' to
delete all existing notes in this tree.  This command has two different
means of specifying the content of the note.

External data format
     The data content for the note was already supplied by a prior
     `blob' command.  The frontend just needs to connect it to the
     commit that is to be annotated.

                  'N' SP <dataref> SP <committish> LF

     Here `<dataref>' can be either a mark reference (`:<idnum>') set
     by a prior `blob' command, or a full 40-byte SHA-1 of an existing
     Git blob object.

Inline data format
     The data content for the note has not been supplied yet.  The
     frontend wants to supply it as part of this modify command.

                  'N' SP 'inline' SP <committish> LF
                  data

     See below for a detailed description of the `data' command.

   In both formats `<committish>' is any of the commit specification
expressions also accepted by `from' (see above).



mark
====

Arranges for fast-import to save a reference to the current object,
allowing the frontend to recall this object at a future point in time,
without knowing its SHA-1.  Here the current object is the object
creation command the `mark' command appears within.  This can be
`commit', `tag', and `blob', but `commit' is the most common usage.

             'mark' SP ':' <idnum> LF

   where `<idnum>' is the number assigned by the frontend to this mark.
The value of `<idnum>' is expressed as an ASCII decimal integer.  The
value 0 is reserved and cannot be used as a mark.  Only values greater
than or equal to 1 may be used as marks.

   New marks are created automatically.  Existing marks can be moved to
another object simply by reusing the same `<idnum>' in another `mark'
command.



tag
===

Creates an annotated tag referring to a specific commit.  To create
lightweight (non-annotated) tags see the `reset' command below.

             'tag' SP <name> LF
             'from' SP <committish> LF
             'tagger' (SP <name>)? SP LT <email> GT SP <when> LF
             data

   where `<name>' is the name of the tag to create.

   Tag names are automatically prefixed with `refs/tags/' when stored
in Git, so importing the CVS branch symbol `RELENG-1_0-FINAL' would use
just `RELENG-1_0-FINAL' for `<name>', and fast-import will write the
corresponding ref as `refs/tags/RELENG-1_0-FINAL'.

   The value of `<name>' must be a valid refname in Git and therefore
may contain forward slashes.  As `LF' is not valid in a Git refname, no
quoting or escaping syntax is supported here.

   The `from' command is the same as in the `commit' command; see above
for details.

   The `tagger' command uses the same format as `committer' within
`commit'; again see above for details.

   The `data' command following `tagger' must supply the annotated tag
message (see below for `data' command syntax).  To import an empty tag
message use a 0 length data.  Tag messages are free-form and are not
interpreted by Git.  Currently they must be encoded in UTF-8, as
fast-import does not permit other encodings to be specified.

   Signing annotated tags during import from within fast-import is not
supported.  Trying to include your own PGP/GPG signature is not
recommended, as the frontend does not (easily) have access to the
complete set of bytes which normally goes into such a signature.  If
signing is required, create lightweight tags from within fast-import
with `reset', then create the annotated versions of those tags offline
with the standard _git tag_ process.



reset
=====

Creates (or recreates) the named branch, optionally starting from a
specific revision.  The reset command allows a frontend to issue a new
`from' command for an existing branch, or to create a new branch from
an existing commit without creating a new commit.

             'reset' SP <ref> LF
             ('from' SP <committish> LF)?
             LF?

   For a detailed description of `<ref>' and `<committish>' see above
under `commit' and `from'.

   The `LF' after the command is optional (it used to be required).

   The `reset' command can also be used to create lightweight
(non-annotated) tags.  For example:

     reset refs/tags/938
     from :938

   would create the lightweight tag `refs/tags/938' referring to
whatever commit mark `:938' references.



blob
====

Requests writing one file revision to the packfile.  The revision is
not connected to any commit; this connection must be formed in a
subsequent `commit' command by referencing the blob through an assigned
mark.

             'blob' LF
             mark?
             data

   The mark command is optional here as some frontends have chosen to
generate the Git SHA-1 for the blob on their own, and feed that
directly to `commit'.  This is typically more work than it’s worth
however, as marks are inexpensive to store and easy to use.



data
====

Supplies raw data (for use as blob/file content, commit messages, or
annotated tag messages) to fast-import.  Data can be supplied using an
exact byte count or delimited with a terminating line.  Real frontends
intended for production-quality conversions should always use the exact
byte count format, as it is more robust and performs better.  The
delimited format is intended primarily for testing fast-import.

   Comment lines appearing within the `<raw>' part of `data' commands
are always taken to be part of the body of the data and are therefore
never ignored by fast-import.  This makes it safe to import any
file/message content whose lines might start with `#'.

Exact byte count format
     The frontend must specify the number of bytes of data.

                  'data' SP <count> LF
                  <raw> LF?

     where `<count>' is the exact number of bytes appearing within
     `<raw>'.  The value of `<count>' is expressed as an ASCII decimal
     integer.  The `LF' on either side of `<raw>' is not included in
     `<count>' and will not be included in the imported data.

     The `LF' after `<raw>' is optional (it used to be required) but
     recommended.  Always including it makes debugging a fast-import
     stream easier as the next command always starts in column 0 of the
     next line, even if `<raw>' did not end with an `LF'.

Delimited format
     A delimiter string is used to mark the end of the data.
     fast-import will compute the length by searching for the delimiter.
     This format is primarily useful for testing and is not recommended
     for real data.

                  'data' SP '<<' <delim> LF
                  <raw> LF
                  <delim> LF
                  LF?

     where `<delim>' is the chosen delimiter string.  The string
     `<delim>' must not appear on a line by itself within `<raw>', as
     otherwise fast-import will think the data ends earlier than it
     really does.  The `LF' immediately trailing `<raw>' is part of
     `<raw>'.  This is one of the limitations of the delimited format,
     it is impossible to supply a data chunk which does not have an LF
     as its last byte.

     The `LF' after `<delim> LF' is optional (it used to be required).


checkpoint
==========

Forces fast-import to close the current packfile, start a new one, and
to save out all current branch refs, tags and marks.

             'checkpoint' LF
             LF?

   Note that fast-import automatically switches packfiles when the
current packfile reaches -max-pack-size, or 4 GiB, whichever limit is
smaller.  During an automatic packfile switch fast-import does not
update the branch refs, tags or marks.

   As a `checkpoint' can require a significant amount of CPU time and
disk IO (to compute the overall pack SHA-1 checksum, generate the
corresponding index file, and update the refs) it can easily take
several minutes for a single `checkpoint' command to complete.

   Frontends may choose to issue checkpoints during extremely large and
long running imports, or when they need to allow another Git process
access to a branch.  However given that a 30 GiB Subversion repository
can be loaded into Git through fast-import in about 3 hours, explicit
checkpointing may not be necessary.

   The `LF' after the command is optional (it used to be required).



progress
========

Causes fast-import to print the entire `progress' line unmodified to
its standard output channel (file descriptor 1) when the command is
processed from the input stream.  The command otherwise has no impact
on the current import, or on any of fast-import’s internal state.

             'progress' SP <any> LF
             LF?

   The `<any>' part of the command may contain any sequence of bytes
that does not contain `LF'.  The `LF' after the command is optional.
Callers may wish to process the output through a tool such as sed to
remove the leading part of the line, for example:

     frontend | git fast-import | sed 's/^progress //'

   Placing a `progress' command immediately after a `checkpoint' will
inform the reader when the `checkpoint' has been completed and it can
safely access the refs that fast-import updated.



cat-blob
========

Causes fast-import to print a blob to a file descriptor previously
arranged with the `--cat-blob-fd' argument.  The command otherwise has
no impact on the current import; its main purpose is to retrieve blobs
that may be in fast-import’s memory but not accessible from the
target repository.

             'cat-blob' SP <dataref> LF

   The `<dataref>' can be either a mark reference (`:<idnum>') set
previously or a full 40-byte SHA-1 of a Git blob, preexisting or ready
to be written.

   Output uses the same format as `git cat-file --batch':

     <sha1> SP 'blob' SP <size> LF
     <contents> LF

   This command can be used anywhere in the stream that comments are
accepted.  In particular, the `cat-blob' command can be used in the
middle of a commit but not in the middle of a `data' command.

   See “Responses To Commands” below for details about how to read
this output safely.



ls
==

Prints information about the object at a path to a file descriptor
previously arranged with the `--cat-blob-fd' argument.  This allows
printing a blob from the active commit (with `cat-blob') or copying a
blob or tree from a previous commit for use in the current one (with
`filemodify').

   The `ls' command can be used anywhere in the stream that comments are
accepted, including the middle of a commit.

Reading from the active commit
     This form can only be used in the middle of a `commit'.  The path
     names a directory entry within fast-import’s active commit.  The
     path must be quoted in this case.

                  'ls' SP <path> LF

Reading from a named tree
     The `<dataref>' can be a mark reference (`:<idnum>') or the full
     40-byte SHA-1 of a Git tag, commit, or tree object, preexisting or
     waiting to be written.  The path is relative to the top level of
     the tree named by `<dataref>'.

                  'ls' SP <dataref> SP <path> LF

   See `filemodify' above for a detailed description of `<path>'.

   Output uses the same format as `git ls-tree <tree> -- <path>':

     <mode> SP ('blob' | 'tree' | 'commit') SP <dataref> HT <path> LF

   The <dataref> represents the blob, tree, or commit object at <path>
and can be used in later _cat-blob_, _filemodify_, or _ls_ commands.

   If there is no file or subtree at that path, _git fast-import_ will
instead report

     missing SP <path> LF

   See “Responses To Commands” below for details about how to read
this output safely.



feature
=======

Require that fast-import supports the specified feature, or abort if it
does not.

             'feature' SP <feature> ('=' <argument>)? LF

   The <feature> part of the command may be any one of the following:

date-format
export-marks
relative-marks
no-relative-marks
force
     Act as though the corresponding command-line option with a leading
     _-_ was passed on the command line (see OPTIONS, above).

import-marks
import-marks-if-exists
     Like -import-marks except in two respects: first, only one
     "feature import-marks" or "feature import-marks-if-exists" command
     is allowed per stream; second, an -import-marks= or
     -import-marks-if-exists command-line option overrides any of these
     "feature" commands in the stream; third, "feature
     import-marks-if-exists" like a corresponding command-line option
     silently skips a nonexistent file.

cat-blob
ls
     Require that the backend support the _cat-blob_ or _ls_ command.
     Versions of fast-import not supporting the specified command will
     exit with a message indicating so.  This lets the import error out
     early with a clear message, rather than wasting time on the early
     part of an import before the unsupported command is detected.

notes
     Require that the backend support the _notemodify_ (N) subcommand
     to the _commit_ command.  Versions of fast-import not supporting
     notes will exit with a message indicating so.

done
     Error out if the stream ends without a _done_ command.  Without
     this feature, errors causing the frontend to end abruptly at a
     convenient point in the stream can go undetected.  This may occur,
     for example, if an import front end dies in mid-operation without
     emitting SIGTERM or SIGKILL at its subordinate git fast-import
     instance.


option
======

Processes the specified option so that git fast-import behaves in a way
that suits the frontend’s needs.  Note that options specified by the
frontend are overridden by any options the user may specify to git
fast-import itself.

         'option' SP <option> LF

   The `<option>' part of the command may contain any of the options
listed in the OPTIONS section that do not change import semantics,
without the leading _-_ and is treated in the same way.

   Option commands must be the first commands on the input (not counting
feature commands), to give an option command after any non-option
command is an error.

   The following commandline options change import semantics and may
therefore not be passed as option:

   * date-format

   * import-marks

   * export-marks

   * cat-blob-fd

   * force


done
====

If the `done' feature is not in use, treated as if EOF was read.  This
can be used to tell fast-import to finish early.

   If the `--done' command line option or `feature done' command is in
use, the `done' command is mandatory and marks the end of the stream.



Responses To Commands
*********************

New objects written by fast-import are not available immediately.  Most
fast-import commands have no visible effect until the next checkpoint
(or completion).  The frontend can send commands to fill
fast-import’s input pipe without worrying about how quickly they will
take effect, which improves performance by simplifying scheduling.

   For some frontends, though, it is useful to be able to read back
data from the current repository as it is being updated (for example
when the source material describes objects in terms of patches to be
applied to previously imported objects).  This can be accomplished by
connecting the frontend and fast-import via bidirectional pipes:

     mkfifo fast-import-output
     frontend <fast-import-output |
     git fast-import >fast-import-output

   A frontend set up this way can use `progress', `ls', and `cat-blob'
commands to read information from the import in progress.

   To avoid deadlock, such frontends must completely consume any
pending output from `progress', `ls', and `cat-blob' before performing
writes to fast-import that might block.



Crash Reports
*************

If fast-import is supplied invalid input it will terminate with a
non-zero exit status and create a crash report in the top level of the
Git repository it was importing into.  Crash reports contain a snapshot
of the internal fast-import state as well as the most recent commands
that lead up to the crash.

   All recent commands (including stream comments, file changes and
progress commands) are shown in the command history within the crash
report, but raw file data and commit messages are excluded from the
crash report.  This exclusion saves space within the report file and
reduces the amount of buffering that fast-import must perform during
execution.

   After writing a crash report fast-import will close the current
packfile and export the marks table.  This allows the frontend
developer to inspect the repository state and resume the import from
the point where it crashed.  The modified branches and tags are not
updated during a crash, as the import did not complete successfully.
Branch and tag information can be found in the crash report and must be
applied manually if the update is needed.

   An example crash:

     $ cat >in <<END_OF_INPUT
     # my very first test commit
     commit refs/heads/master
     committer Shawn O. Pearce <spearce> 19283 -0400
     # who is that guy anyway?
     data <<EOF
     this is my commit
     EOF
     M 644 inline .gitignore
     data <<EOF
     .gitignore
     EOF
     M 777 inline bob
     END_OF_INPUT

     $ git fast-import <in
     fatal: Corrupt mode: M 777 inline bob
     fast-import: dumping crash report to .git/fast_import_crash_8434

     $ cat .git/fast_import_crash_8434
     fast-import crash report:
         fast-import process: 8434
         parent process     : 1391
         at Sat Sep 1 00:58:12 2007

     fatal: Corrupt mode: M 777 inline bob

     Most Recent Commands Before Crash
     ---------------------------------
       # my very first test commit
       commit refs/heads/master
       committer Shawn O. Pearce <spearce> 19283 -0400
       # who is that guy anyway?
       data <<EOF
       M 644 inline .gitignore
       data <<EOF
     * M 777 inline bob

     Active Branch LRU
     -----------------
         active_branches = 1 cur, 5 max

     pos  clock name
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      1)      0 refs/heads/master

     Inactive Branches
     -----------------
     refs/heads/master:
       status      : active loaded dirty
       tip commit  : 0000000000000000000000000000000000000000
       old tree    : 0000000000000000000000000000000000000000
       cur tree    : 0000000000000000000000000000000000000000
       commit clock: 0
       last pack   :

     -------------------
     END OF CRASH REPORT


Tips and Tricks
***************

The following tips and tricks have been collected from various users of
fast-import, and are offered here as suggestions.



Use One Mark Per Commit
=======================

When doing a repository conversion, use a unique mark per commit (`mark
:<n>') and supply the -export-marks option on the command line.
fast-import will dump a file which lists every mark and the Git object
SHA-1 that corresponds to it.  If the frontend can tie the marks back
to the source repository, it is easy to verify the accuracy and
completeness of the import by comparing each Git commit to the
corresponding source revision.

   Coming from a system such as Perforce or Subversion this should be
quite simple, as the fast-import mark can also be the Perforce changeset
number or the Subversion revision number.



Freely Skip Around Branches
===========================

Don’t bother trying to optimize the frontend to stick to one branch
at a time during an import.  Although doing so might be slightly faster
for fast-import, it tends to increase the complexity of the frontend
code considerably.

   The branch LRU builtin to fast-import tends to behave very well, and
the cost of activating an inactive branch is so low that bouncing around
between branches has virtually no impact on import performance.



Handling Renames
================

When importing a renamed file or directory, simply delete the old
name(s) and modify the new name(s) during the corresponding commit.
Git performs rename detection after-the-fact, rather than explicitly
during a commit.



Use Tag Fixup Branches
======================

Some other SCM systems let the user create a tag from multiple files
which are not from the same commit/changeset.  Or to create tags which
are a subset of the files available in the repository.

   Importing these tags as-is in Git is impossible without making at
least one commit which “fixes up” the files to match the content of
the tag.  Use fast-import’s `reset' command to reset a dummy branch
outside of your normal branch space to the base commit for the tag,
then commit one or more file fixup commits, and finally tag the dummy
branch.

   For example since all normal branches are stored under `refs/heads/'
name the tag fixup branch `TAG_FIXUP'.  This way it is impossible for
the fixup branch used by the importer to have namespace conflicts with
real branches imported from the source (the name `TAG_FIXUP' is not
`refs/heads/TAG_FIXUP').

   When committing fixups, consider using `merge' to connect the
commit(s) which are supplying file revisions to the fixup branch.
Doing so will allow tools such as _git blame_ to track through the real
commit history and properly annotate the source files.

   After fast-import terminates the frontend will need to do `rm
.git/TAG_FIXUP' to remove the dummy branch.



Import Now, Repack Later
========================

As soon as fast-import completes the Git repository is completely valid
and ready for use.  Typically this takes only a very short time, even
for considerably large projects (100,000+ commits).

   However repacking the repository is necessary to improve data
locality and access performance.  It can also take hours on extremely
large projects (especially if -f and a large -window parameter is
used).  Since repacking is safe to run alongside readers and writers,
run the repack in the background and let it finish when it finishes.
There is no reason to wait to explore your new Git project!

   If you choose to wait for the repack, don’t try to run benchmarks
or performance tests until repacking is completed.  fast-import outputs
suboptimal packfiles that are simply never seen in real use situations.



Repacking Historical Data
=========================

If you are repacking very old imported data (e.g. older than the last
year), consider expending some extra CPU time and supplying -window=50
(or higher) when you run _git repack_.  This will take longer, but will
also produce a smaller packfile.  You only need to expend the effort
once, and everyone using your project will benefit from the smaller
repository.



Include Some Progress Messages
==============================

Every once in a while have your frontend emit a `progress' message to
fast-import.  The contents of the messages are entirely free-form, so
one suggestion would be to output the current month and year each time
the current commit date moves into the next month.  Your users will
feel better knowing how much of the data stream has been processed.



Packfile Optimization
*********************

When packing a blob fast-import always attempts to deltify against the
last blob written.  Unless specifically arranged for by the frontend,
this will probably not be a prior version of the same file, so the
generated delta will not be the smallest possible.  The resulting
packfile will be compressed, but will not be optimal.

   Frontends which have efficient access to all revisions of a single
file (for example reading an RCS/CVS ,v file) can choose to supply all
revisions of that file as a sequence of consecutive `blob' commands.
This allows fast-import to deltify the different file revisions against
each other, saving space in the final packfile.  Marks can be used to
later identify individual file revisions during a sequence of `commit'
commands.

   The packfile(s) created by fast-import do not encourage good disk
access patterns.  This is caused by fast-import writing the data in the
order it is received on standard input, while Git typically organizes
data within packfiles to make the most recent (current tip) data appear
before historical data.  Git also clusters commits together, speeding
up revision traversal through better cache locality.

   For this reason it is strongly recommended that users repack the
repository with `git repack -a -d' after fast-import completes, allowing
Git to reorganize the packfiles for faster data access.  If blob deltas
are suboptimal (see above) then also adding the `-f' option to force
recomputation of all deltas can significantly reduce the final packfile
size (30-50% smaller can be quite typical).



Memory Utilization
******************

There are a number of factors which affect how much memory fast-import
requires to perform an import.  Like critical sections of core Git,
fast-import uses its own memory allocators to amortize any overheads
associated with malloc.  In practice fast-import tends to amortize any
malloc overheads to 0, due to its use of large block allocations.



per object
==========

fast-import maintains an in-memory structure for every object written in
this execution.  On a 32 bit system the structure is 32 bytes, on a 64
bit system the structure is 40 bytes (due to the larger pointer sizes).
Objects in the table are not deallocated until fast-import terminates.
Importing 2 million objects on a 32 bit system will require
approximately 64 MiB of memory.

   The object table is actually a hashtable keyed on the object name
(the unique SHA-1).  This storage configuration allows fast-import to
reuse an existing or already written object and avoid writing duplicates
to the output packfile.  Duplicate blobs are surprisingly common in an
import, typically due to branch merges in the source.



per mark
========

Marks are stored in a sparse array, using 1 pointer (4 bytes or 8
bytes, depending on pointer size) per mark.  Although the array is
sparse, frontends are still strongly encouraged to use marks between 1
and n, where n is the total number of marks required for this import.



per branch
==========

Branches are classified as active and inactive.  The memory usage of
the two classes is significantly different.

   Inactive branches are stored in a structure which uses 96 or 120
bytes (32 bit or 64 bit systems, respectively), plus the length of the
branch name (typically under 200 bytes), per branch.  fast-import will
easily handle as many as 10,000 inactive branches in under 2 MiB of
memory.

   Active branches have the same overhead as inactive branches, but
also contain copies of every tree that has been recently modified on
that branch.  If subtree `include' has not been modified since the
branch became active, its contents will not be loaded into memory, but
if subtree `src' has been modified by a commit since the branch became
active, then its contents will be loaded in memory.

   As active branches store metadata about the files contained on that
branch, their in-memory storage size can grow to a considerable size
(see below).

   fast-import automatically moves active branches to inactive status
based on a simple least-recently-used algorithm.  The LRU chain is
updated on each `commit' command.  The maximum number of active
branches can be increased or decreased on the command line with
-active-branches=.



per active tree
===============

Trees (aka directories) use just 12 bytes of memory on top of the
memory required for their entries (see “per active file” below).
The cost of a tree is virtually 0, as its overhead amortizes out over
the individual file entries.



per active file entry
=====================

Files (and pointers to subtrees) within active trees require 52 or 64
bytes (32/64 bit platforms) per entry.  To conserve space, file and
tree names are pooled in a common string table, allowing the filename
“Makefile” to use just 16 bytes (after including the string header
overhead) no matter how many times it occurs within the project.

   The active branch LRU, when coupled with the filename string pool
and lazy loading of subtrees, allows fast-import to efficiently import
projects with 2,000+ branches and 45,114+ files in a very limited
memory footprint (less than 2.7 MiB per active branch).



Signals
*******

Sending *SIGUSR1* to the _git fast-import_ process ends the current
packfile early, simulating a `checkpoint' command.  The impatient
operator can use this facility to peek at the objects and refs from an
import in progress, at the cost of some added running time and worse
compression.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fetch-pack,  Up: Top

Name
****

git-fetch-pack — Receive missing objects from another repository



Synopsis
********

     git fetch-pack [-all] [-quiet|-q] [-keep|-k] [-thin] [-include-tag] [-upload-pack=<git-upload-pack>] [-depth=<n>] [-no-progress] [-v] [<host>:]<directory> [<refs>…]


DESCRIPTION
***********

Usually you would want to use _git fetch_, which is a higher level
wrapper of this command, instead.

   Invokes _git-upload-pack_ on a possibly remote repository and asks
it to send objects missing from this repository, to update the named
heads.  The list of commits available locally is found out by scanning
the local refs/ hierarchy and sent to _git-upload-pack_ running on the
other end.

   This command degenerates to download everything to complete the
asked refs from the remote side when the local side does not have a
common ancestor commit.



OPTIONS
*******

-all
     Fetch all remote refs.

-stdin
     Take the list of refs from stdin, one per line. If there are refs
     specified on the command line in addition to this option, then the
     refs from stdin are processed after those on the command line.

     If _-stateless-rpc_ is specified together with this option then
     the list of refs must be in packet format (pkt-line). Each ref must
     be in a separate packet, and the list must end with a flush packet.

-q
-quiet
     Pass _-q_ flag to _git unpack-objects_; this makes the cloning
     process less verbose.

-k
-keep
     Do not invoke _git unpack-objects_ on received data, but create a
     single packfile out of it instead, and store it in the object
     database. If provided twice then the pack is locked against
     repacking.

-thin
     Fetch a "thin" pack, which records objects in deltified form based
     on objects not included in the pack to reduce network traffic.

-include-tag
     If the remote side supports it, annotated tags objects will be
     downloaded on the same connection as the other objects if the
     object the tag references is downloaded.  The caller must
     otherwise determine the tags this option made available.

-upload-pack=<git-upload-pack>
     Use this to specify the path to _git-upload-pack_ on the remote
     side, if is not found on your $PATH.  Installations of sshd
     ignores the user’s environment setup scripts for login shells
     (e.g. .bash_profile) and your privately installed git may not be
     found on the system default $PATH.  Another workaround suggested
     is to set up your $PATH in ".bashrc", but this flag is for people
     who do not want to pay the overhead for non-interactive shells by
     having a lean .bashrc file (they set most of the things up in
     .bash_profile).

-exec=<git-upload-pack>
     Same as -upload-pack=<git-upload-pack>.

-depth=<n>
     Limit fetching to ancestor-chains not longer than n.

-no-progress
     Do not show the progress.

-v
     Run verbosely.

<host>
     A remote host that houses the repository.  When this part is
     specified, _git-upload-pack_ is invoked via ssh.

<directory>
     The repository to sync from.

<refs>…
     The remote heads to update from. This is relative to $GIT_DIR
     (e.g. "HEAD", "refs/heads/master").  When unspecified, update from
     all heads the remote side has.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fetch,  Up: Top

Name
****

git-fetch — Download objects and refs from another repository



Synopsis
********

     git fetch [<options>] [<repository> [<refspec>…]]
     git fetch [<options>] <group>
     git fetch -multiple [<options>] [(<repository> | <group>)…]
     git fetch -all [<options>]


DESCRIPTION
***********

Fetches named heads or tags from one or more other repositories, along
with the objects necessary to complete them.

   The ref names and their object names of fetched refs are stored in
`.git/FETCH_HEAD'.  This information is left for a later merge
operation done by _git merge_.

   When <refspec> stores the fetched result in remote-tracking branches,
the tags that point at these branches are automatically followed.  This
is done by first fetching from the remote using the given <refspec>s,
and if the repository has objects that are pointed by remote tags that
it does not yet have, then fetch those missing tags.  If the other end
has tags that point at branches you are not interested in, you will not
get them.

   _git fetch_ can fetch from either a single named repository, or from
several repositories at once if <group> is given and there is a
remotes.<group> entry in the configuration file.  (See git-config(1)).



OPTIONS
*******

-all
     Fetch all remotes.

-a
-append
     Append ref names and object names of fetched refs to the existing
     contents of `.git/FETCH_HEAD'.  Without this option old data in
     `.git/FETCH_HEAD' will be overwritten.

-depth=<depth>
     Deepen the history of a _shallow_ repository created by `git
     clone' with `--depth=<depth>' option (see git-clone(1)) by the
     specified number of commits.

-dry-run
     Show what would be done, without making any changes.

-f
-force
     When _git fetch_ is used with `<rbranch>:<lbranch>' refspec, it
     refuses to update the local branch `<lbranch>' unless the remote
     branch `<rbranch>' it fetches is a descendant of `<lbranch>'.
     This option overrides that check.

-k
-keep
     Keep downloaded pack.

-multiple
     Allow several <repository> and <group> arguments to be specified.
     No <refspec>s may be specified.

-p
-prune
     After fetching, remove any remote-tracking branches which no
     longer exist on the remote.

-n
-no-tags
     By default, tags that point at objects that are downloaded from
     the remote repository are fetched and stored locally.  This option
     disables this automatic tag following. The default behavior for a
     remote may be specified with the remote.<name>.tagopt setting. See
     git-config(1).

-t
-tags
     Most of the tags are fetched automatically as branch heads are
     downloaded, but tags that do not point at objects reachable from
     the branch heads that are being tracked will not be fetched by
     this mechanism.  This flag lets all tags and their associated
     objects be downloaded. The default behavior for a remote may be
     specified with the remote.<name>.tagopt setting. See git-config(1).

-recurse-submodules[=yes|on-demand|no]
     This option controls if and under what conditions new commits of
     populated submodules should be fetched too. It can be used as a
     boolean option to completely disable recursion when set to _no_ or
     to unconditionally recurse into all populated submodules when set
     to _yes_, which is the default when this option is used without any
     value. Use _on-demand_ to only recurse into a populated submodule
     when the superproject retrieves a commit that updates the
     submodule’s reference to a commit that isn’t already in the
     local submodule clone.

-no-recurse-submodules
     Disable recursive fetching of submodules (this has the same effect
     as using the _-recurse-submodules=no_ option).

-submodule-prefix=<path>
     Prepend <path> to paths printed in informative messages such as
     "Fetching submodule foo".  This option is used internally when
     recursing over submodules.

-recurse-submodules-default=[yes|on-demand]
     This option is used internally to temporarily provide a
     non-negative default value for the -recurse-submodules option.
     All other methods of configuring fetch’s submodule recursion
     (such as settings in gitmodules(5) and git-config(1)) override
     this option, as does specifying -[no-]recurse-submodules directly.

-u
-update-head-ok
     By default _git fetch_ refuses to update the head which
     corresponds to the current branch.  This flag disables the check.
     This is purely for the internal use for _git pull_ to communicate
     with _git fetch_, and unless you are implementing your own
     Porcelain you are not supposed to use it.

-upload-pack <upload-pack>
     When given, and the repository to fetch from is handled by _git
     fetch-pack_, _-exec=<upload-pack>_ is passed to the command to
     specify non-default path for the command run on the other end.

-q
-quiet
     Pass -quiet to git-fetch-pack and silence any other internally
     used git commands. Progress is not reported to the standard error
     stream.

-v
-verbose
     Be verbose.

-progress
     Progress status is reported on the standard error stream by
     default when it is attached to a terminal, unless -q is specified.
     This flag forces progress status even if the standard error stream
     is not directed to a terminal.

<repository>
     The "remote" repository that is the source of a fetch or pull
     operation.  This parameter can be either a URL (see the section
     GIT URLS  below) or the name of a remote (see the section REMOTES
     below).

<group>
     A name referring to a list of repositories as the value of
     remotes.<group> in the configuration file.  (See git-config(1)).

<refspec>
     The format of a <refspec> parameter is an optional plus `+',
     followed by the source ref <src>, followed by a colon `:',
     followed by the destination ref <dst>.

     The remote ref that matches <src> is fetched, and if <dst> is not
     empty string, the local ref that matches it is fast-forwarded
     using <src>.  If the optional plus `+' is used, the local ref is
     updated even if it does not result in a fast-forward update.

          *Note*

          If the remote branch from which you want to pull is modified
          in non-linear ways such as being rewound and rebased
          frequently, then a pull will attempt a merge with an older
          version of itself, likely conflict, and fail.  It is under
          these conditions that you would want to use the `+' sign to
          indicate non-fast-forward updates will be needed.  There is
          currently no easy way to determine or declare that a branch
          will be made available in a repository with this behavior;
          the pulling user simply must know this is the expected usage
          pattern for a branch.

          *Note*

          You never do your own development on branches that appear on
          the right hand side of a <refspec> colon on `Pull:' lines;
          they are to be updated by _git fetch_.  If you intend to do
          development derived from a remote branch `B', have a `Pull:'
          line to track it (i.e. `Pull: B:remote-B'), and have a
          separate branch `my-B' to do your development on top of it.
          The latter is created by `git branch my-B remote-B' (or its
          equivalent `git checkout -b my-B remote-B').  Run `git fetch'
          to keep track of the progress of the remote side, and when
          you see something new on the remote branch, merge it into
          your development branch with `git pull . remote-B', while you
          are on `my-B' branch.

          *Note*

          There is a difference between listing multiple <refspec>
          directly on _git pull_ command line and having multiple
          `Pull:' <refspec> lines for a <repository> and running _git
          pull_ command without any explicit <refspec> parameters.
          <refspec> listed explicitly on the command line are always
          merged into the current branch after fetching.  In other
          words, if you list more than one remote refs, you would be
          making an Octopus.  While _git pull_ run without any explicit
          <refspec> parameter takes default <refspec>s from `Pull:'
          lines, it merges only the first <refspec> found into the
          current branch, after fetching all the remote refs.  This is
          because making an Octopus from remote refs is rarely done,
          while keeping track of multiple remote heads in one-go by
          fetching more than one is often useful.

     Some short-cut notations are also supported.

        * `tag <tag>' means the same as
          `refs/tags/<tag>:refs/tags/<tag>'; it requests fetching
          everything up to the given tag.

        * A parameter <ref> without a colon is equivalent to <ref>:
          when pulling/fetching, so it merges <ref> into the current
          branch without storing the remote branch anywhere locally


GIT URLS
********

In general, URLs contain information about the transport protocol, the
address of the remote server, and the path to the repository.
Depending on the transport protocol, some of this information may be
absent.

   Git natively supports ssh, git, http, https, ftp, ftps, and rsync
protocols. The following syntaxes may be used with them:

   * ssh://[user@]host.xz[:port]/path/to/repo.git/

   * git://host.xz[:port]/path/to/repo.git/

   * http[s]://host.xz[:port]/path/to/repo.git/

   * ftp[s]://host.xz[:port]/path/to/repo.git/

   * rsync://host.xz/path/to/repo.git/

   An alternative scp-like syntax may also be used with the ssh
protocol:

   * [user@]host.xz:path/to/repo.git/

   The ssh and git protocols additionally support ~username expansion:

   * ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/

   * git://host.xz[:port]/~[user]/path/to/repo.git/

   * [user@]host.xz:/~[user]/path/to/repo.git/

   For local repositories, also supported by git natively, the following
syntaxes may be used:

   * /path/to/repo.git/

   * file:///path/to/repo.git/ (file:///path/to/repo.git/)

   These two syntaxes are mostly equivalent, except when cloning, when
the former implies -local option. See git-clone(1) for details.

   When git doesn’t know how to handle a certain transport protocol,
it attempts to use the _remote-<transport>_ remote helper, if one
exists. To explicitly request a remote helper, the following syntax may
be used:

   * <transport>::<address>

   where <address> may be a path, a server and path, or an arbitrary
URL-like string recognized by the specific remote helper being invoked.
See git-remote-helpers(1) for details.

   If there are a large number of similarly-named remote repositories
and you want to use a different format for them (such that the URLs you
use will be rewritten into URLs that work), you can create a
configuration section of the form:

             [url "<actual url base>"]
                     insteadOf = <other url base>

   For example, with this:

             [url "git://git.host.xz/"]
                     insteadOf = host.xz:/path/to/
                     insteadOf = work:

   a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will
be rewritten in any context that takes a URL to be
"git://git.host.xz/repo.git".

   If you want to rewrite URLs for push only, you can create a
configuration section of the form:

             [url "<actual url base>"]
                     pushInsteadOf = <other url base>

   For example, with this:

             [url "ssh://example.org/"]
                     pushInsteadOf = git://example.org/

   a URL like "git://example.org/path/to/repo.git" will be rewritten to
"ssh://example.org/path/to/repo.git" for pushes, but pulls will still
use the original URL.



REMOTES
*******

The name of one of the following can be used instead of a URL as
`<repository>' argument:

   * a remote in the git configuration file: `$GIT_DIR/config',

   * a file in the `$GIT_DIR/remotes' directory, or

   * a file in the `$GIT_DIR/branches' directory.

   All of these also allow you to omit the refspec from the command line
because they each contain a refspec which git will use by default.



Named remote in configuration file
==================================

You can choose to provide the name of a remote which you had previously
configured using git-remote(1), git-config(1) or even by a manual edit
to the `$GIT_DIR/config' file.  The URL of this remote will be used to
access the repository.  The refspec of this remote will be used by
default when you do not provide a refspec on the command line.  The
entry in the config file would appear like this:

             [remote "<name>"]
                     url = <url>
                     pushurl = <pushurl>
                     push = <refspec>
                     fetch = <refspec>

   The `<pushurl>' is used for pushes only. It is optional and defaults
to `<url>'.



Named file in $GIT_DIR/remotes
==============================

You can choose to provide the name of a file in `$GIT_DIR/remotes'.
The URL in this file will be used to access the repository.  The refspec
in this file will be used as default when you do not provide a refspec
on the command line.  This file should have the following format:

             URL: one of the above URL format
             Push: <refspec>
             Pull: <refspec>

   `Push:' lines are used by _git push_ and `Pull:' lines are used by
_git pull_ and _git fetch_.  Multiple `Push:' and `Pull:' lines may be
specified for additional branch mappings.



Named file in $GIT_DIR/branches
===============================

You can choose to provide the name of a file in `$GIT_DIR/branches'.
The URL in this file will be used to access the repository.  This file
should have the following format:

             <url>#<head>

   `<url>' is required; `#<head>' is optional.

   Depending on the operation, git will use one of the following
refspecs, if you don’t provide one on the command line.  `<branch>'
is the name of this file in `$GIT_DIR/branches' and `<head>' defaults
to `master'.

   git fetch uses:

             refs/heads/<head>:refs/heads/<branch>

   git push uses:

             HEAD:refs/heads/<head>


EXAMPLES
********

   * Update the remote-tracking branches:

          $ git fetch origin

     The above command copies all branches from the remote refs/heads/
     namespace and stores them to the local refs/remotes/origin/
     namespace, unless the branch.<name>.fetch option is used to
     specify a non-default refspec.

   * Using refspecs explicitly:

          $ git fetch origin +pu:pu maint:tmp

     This updates (or creates, as necessary) branches `pu' and `tmp' in
     the local repository by fetching from the branches (respectively)
     `pu' and `maint' from the remote repository.

     The `pu' branch will be updated even if it is does not
     fast-forward, because it is prefixed with a plus sign; `tmp' will
     not be.


BUGS
****

Using -recurse-submodules can only fetch new commits in already checked
out submodules right now. When e.g. upstream added a new submodule in
the just fetched commits of the superproject the submodule itself can
not be fetched, making it impossible to check out that submodule later
without having to do a fetch again. This is expected to be fixed in a
future git version.



SEE ALSO
********

git-pull(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-filter-branch,  Up: Top

Name
****

git-filter-branch — Rewrite branches



Synopsis
********

     git filter-branch [-env-filter <command>] [-tree-filter <command>]
             [-index-filter <command>] [-parent-filter <command>]
             [-msg-filter <command>] [-commit-filter <command>]
             [-tag-name-filter <command>] [-subdirectory-filter <directory>]
             [-prune-empty]
             [-original <namespace>] [-d <directory>] [-f | -force]
             [-] [<rev-list options>…]


DESCRIPTION
***********

Lets you rewrite git revision history by rewriting the branches
mentioned in the <rev-list options>, applying custom filters on each
revision.  Those filters can modify each tree (e.g. removing a file or
running a perl rewrite on all files) or information about each commit.
Otherwise, all information (including original commit times or merge
information) will be preserved.

   The command will only rewrite the _positive_ refs mentioned in the
command line (e.g. if you pass _a..b_, only _b_ will be rewritten).  If
you specify no filters, the commits will be recommitted without any
changes, which would normally have no effect.  Nevertheless, this may be
useful in the future for compensating for some git bugs or such,
therefore such a usage is permitted.

   *NOTE*: This command honors `.git/info/grafts' file and refs in the
`refs/replace/' namespace.  If you have any grafts or replacement refs
defined, running this command will make them permanent.

   *WARNING*! The rewritten history will have different object names
for all the objects and will not converge with the original branch.
You will not be able to easily push and distribute the rewritten branch
on top of the original branch.  Please do not use this command if you
do not know the full implications, and avoid using it anyway, if a
simple single commit would suffice to fix your problem.  (See the
"RECOVERING FROM UPSTREAM REBASE" section in git-rebase(1) for further
information about rewriting published history.)

   Always verify that the rewritten version is correct: The original
refs, if different from the rewritten ones, will be stored in the
namespace _refs/original/_.

   Note that since this operation is very I/O expensive, it might be a
good idea to redirect the temporary directory off-disk with the _-d_
option, e.g. on tmpfs.  Reportedly the speedup is very noticeable.



Filters
=======

The filters are applied in the order as listed below.  The <command>
argument is always evaluated in the shell context using the _eval_
command (with the notable exception of the commit filter, for technical
reasons).  Prior to that, the $GIT_COMMIT environment variable will be
set to contain the id of the commit being rewritten.  Also,
GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME,
GIT_COMMITTER_EMAIL, and GIT_COMMITTER_DATE are set according to the
current commit.  The values of these variables after the filters have
run, are used for the new commit.  If any evaluation of <command>
returns a non-zero exit status, the whole operation will be aborted.

   A _map_ function is available that takes an "original sha1 id"
argument and outputs a "rewritten sha1 id" if the commit has been
already rewritten, and "original sha1 id" otherwise; the _map_ function
can return several ids on separate lines if your commit filter emitted
multiple commits.



OPTIONS
*******

-env-filter <command>
     This filter may be used if you only need to modify the environment
     in which the commit will be performed.  Specifically, you might
     want to rewrite the author/committer name/email/time environment
     variables (see git-commit-tree(1) for details).  Do not forget to
     re-export the variables.

-tree-filter <command>
     This is the filter for rewriting the tree and its contents.  The
     argument is evaluated in shell with the working directory set to
     the root of the checked out tree.  The new tree is then used as-is
     (new files are auto-added, disappeared files are auto-removed -
     neither .gitignore files nor any other ignore rules *HAVE ANY
     EFFECT*!).

-index-filter <command>
     This is the filter for rewriting the index.  It is similar to the
     tree filter but does not check out the tree, which makes it much
     faster.  Frequently used with `git rm --cached --ignore-unmatch
     ...', see EXAMPLES below.  For hairy cases, see
     git-update-index(1).

-parent-filter <command>
     This is the filter for rewriting the commit’s parent list.  It
     will receive the parent string on stdin and shall output the new
     parent string on stdout.  The parent string is in the format
     described in git-commit-tree(1): empty for the initial commit, "-p
     parent" for a normal commit and "-p parent1 -p parent2 -p parent3
     …" for a merge commit.

-msg-filter <command>
     This is the filter for rewriting the commit messages.  The
     argument is evaluated in the shell with the original commit
     message on standard input; its standard output is used as the new
     commit message.

-commit-filter <command>
     This is the filter for performing the commit.  If this filter is
     specified, it will be called instead of the _git commit-tree_
     command, with arguments of the form "<TREE_ID> [(-p
     <PARENT_COMMIT_ID>)…]" and the log message on stdin.  The commit
     id is expected on stdout.

     As a special extension, the commit filter may emit multiple commit
     ids; in that case, the rewritten children of the original commit
     will have all of them as parents.

     You can use the _map_ convenience function in this filter, and
     other convenience functions, too.  For example, calling
     _skip_commit "$@"_ will leave out the current commit (but not its
     changes! If you want that, use _git rebase_ instead).

     You can also use the `git_commit_non_empty_tree "$@"' instead of
     `git commit-tree "$@"' if you don’t wish to keep commits with a
     single parent and that makes no change to the tree.

-tag-name-filter <command>
     This is the filter for rewriting tag names. When passed, it will
     be called for every tag ref that points to a rewritten object (or
     to a tag object which points to a rewritten object).  The original
     tag name is passed via standard input, and the new tag name is
     expected on standard output.

     The original tags are not deleted, but can be overwritten; use
     "-tag-name-filter cat" to simply update the tags.  In this case,
     be very careful and make sure you have the old tags backed up in
     case the conversion has run afoul.

     Nearly proper rewriting of tag objects is supported. If the tag has
     a message attached, a new tag object will be created with the same
     message, author, and timestamp. If the tag has a signature
     attached, the signature will be stripped. It is by definition
     impossible to preserve signatures. The reason this is "nearly"
     proper, is because ideally if the tag did not change (points to
     the same object, has the same name, etc.)  it should retain any
     signature. That is not the case, signatures will always be
     removed, buyer beware. There is also no support for changing the
     author or timestamp (or the tag message for that matter). Tags
     which point to other tags will be rewritten to point to the
     underlying commit.

-subdirectory-filter <directory>
     Only look at the history which touches the given subdirectory.
     The result will contain that directory (and only that) as its
     project root. Implies *Note Remap to ancestor::.

-prune-empty
     Some kind of filters will generate empty commits, that left the
     tree untouched.  This switch allow git-filter-branch to ignore such
     commits.  Though, this switch only applies for commits that have
     one and only one parent, it will hence keep merges points. Also,
     this option is not compatible with the use of _-commit-filter_.
     Though you just need to use the function
     _git_commit_non_empty_tree "$@"_ instead of the `git commit-tree
     "$@"' idiom in your commit filter to make that happen.

-original <namespace>
     Use this option to set the namespace where the original commits
     will be stored. The default value is _refs/original_.

-d <directory>
     Use this option to set the path to the temporary directory used for
     rewriting.  When applying a tree filter, the command needs to
     temporarily check out the tree to some directory, which may consume
     considerable space in case of large projects.  By default it does
     this in the _.git-rewrite/_ directory but you can override that
     choice by this parameter.

-f
-force
     _git filter-branch_ refuses to start with an existing temporary
     directory or when there are already refs starting with
     _refs/original/_, unless forced.

<rev-list options>…
     Arguments for _git rev-list_.  All positive refs included by these
     options are rewritten.  You may also specify options such as
     _-all_, but you must use _-_ to separate them from the _git
     filter-branch_ options. Implies *Note Remap to ancestor::.


Remap to ancestor
=================

By using rev-list(1) arguments, e.g., path limiters, you can limit the
set of revisions which get rewritten. However, positive refs on the
command line are distinguished: we don’t let them be excluded by such
limiters. For this purpose, they are instead rewritten to point at the
nearest ancestor that was not excluded.



Examples
********

Suppose you want to remove a file (containing confidential information
or copyright violation) from all commits:

     git filter-branch --tree-filter 'rm filename' HEAD

   However, if the file is absent from the tree of some commit, a
simple `rm filename' will fail for that tree and commit.  Thus you may
instead want to use `rm -f filename' as the script.

   Using `--index-filter' with _git rm_ yields a significantly faster
version.  Like with using `rm filename', `git rm --cached filename'
will fail if the file is absent from the tree of a commit.  If you want
to "completely forget" a file, it does not matter when it entered
history, so we also add `--ignore-unmatch':

     git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD

   Now, you will get the rewritten history saved in HEAD.

   To rewrite the repository to look as if `foodir/' had been its
project root, and discard all other history:

     git filter-branch --subdirectory-filter foodir -- --all

   Thus you can, e.g., turn a library subdirectory into a repository of
its own.  Note the `--' that separates _filter-branch_ options from
revision options, and the `--all' to rewrite all branches and tags.

   To set a commit (which typically is at the tip of another history)
to be the parent of the current initial commit, in order to paste the
other history behind the current history:

     git filter-branch --parent-filter 'sed "s/^\$/-p <graft-id>/"' HEAD

   (if the parent string is empty - which happens when we are dealing
with the initial commit - add graftcommit as a parent).  Note that this
assumes history with a single root (that is, no merge without common
ancestors happened).  If this is not the case, use:

     git filter-branch --parent-filter \
             'test $GIT_COMMIT = <commit-id> && echo "-p <graft-id>" || cat' HEAD

   or even simpler:

     echo "$commit-id $graft-id" >> .git/info/grafts
     git filter-branch $graft-id..HEAD

   To remove commits authored by "Darl McBribe" from the history:

     git filter-branch --commit-filter '
             if [ "$GIT_AUTHOR_NAME" = "Darl McBribe" ];
             then
                     skip_commit "$@";
             else
                     git commit-tree "$@";
             fi' HEAD

   The function _skip_commit_ is defined as follows:

     skip_commit()
     {
             shift;
             while [ -n "$1" ];
             do
                     shift;
                     map "$1";
                     shift;
             done;
     }

   The shift magic first throws away the tree id and then the -p
parameters.  Note that this handles merges properly! In case Darl
committed a merge between P1 and P2, it will be propagated properly and
all children of the merge will become merge commits with P1,P2 as their
parents instead of the merge commit.

   *NOTE* the changes introduced by the commits, and which are not
reverted by subsequent commits, will still be in the rewritten branch.
If you want to throw out _changes_ together with the commits, you
should use the interactive mode of _git rebase_.

   You can rewrite the commit log messages using `--msg-filter'.  For
example, _git svn-id_ strings in a repository created by _git svn_ can
be removed this way:

     git filter-branch --msg-filter '
             sed -e "/^git-svn-id:/d"
     '

   If you need to add _Acked-by_ lines to, say, the last 10 commits
(none of which is a merge), use this command:

     git filter-branch --msg-filter '
             cat &&
             echo "Acked-by: Bugs Bunny <bunny@bugzilla.org>"
     ' HEAD~10..HEAD

   To restrict rewriting to only part of the history, specify a revision
range in addition to the new branch name.  The new branch name will
point to the top-most revision that a _git rev-list_ of this range will
print.

   Consider this history:

          D--E--F--G--H
         /     /
     A--B-----C

   To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use:

     git filter-branch ... C..H

   To rewrite commits E,F,G,H, use one of these:

     git filter-branch ... C..H --not D
     git filter-branch ... D..H --not C

   To move the whole tree into a subdirectory, or remove it from there:

     git filter-branch --index-filter \
             'git ls-files -s | sed "s-\t\"*-&newsubdir/-" |
                     GIT_INDEX_FILE=$GIT_INDEX_FILE.new \
                             git update-index --index-info &&
              mv "$GIT_INDEX_FILE.new" "$GIT_INDEX_FILE"' HEAD


Checklist for Shrinking a Repository
************************************

git-filter-branch is often used to get rid of a subset of files,
usually with some combination of `--index-filter' and
`--subdirectory-filter'.  People expect the resulting repository to be
smaller than the original, but you need a few more steps to actually
make it smaller, because git tries hard not to lose your objects until
you tell it to.  First make sure that:

   * You really removed all variants of a filename, if a blob was moved
     over its lifetime.  `git log --name-only --follow --all --
     filename' can help you find renames.

   * You really filtered all refs: use `--tag-name-filter cat -- --all'
     when calling git-filter-branch.

   Then there are two ways to get a smaller repository.  A safer way is
to clone, that keeps your original intact.

   * Clone it with `git clone file:///path/to/repo'.  The clone will
     not have the removed objects.  See git-clone(1).  (Note that
     cloning with a plain path just hardlinks everything!)

   If you really don’t want to clone it, for whatever reasons, check
the following points instead (in this order).  This is a very
destructive approach, so *make a backup* or go back to cloning it.  You
have been warned.

   * Remove the original refs backed up by git-filter-branch: say `git
     for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git
     update-ref -d'.

   * Expire all reflogs with `git reflog expire --expire=now --all'.

   * Garbage collect all unreferenced objects with `git gc --prune=now'
     (or if your git-gc is not new enough to support arguments to
     `--prune', use `git repack -ad; git prune' instead).


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fmt-merge-msg,  Up: Top

Name
****

git-fmt-merge-msg — Produce a merge commit message



Synopsis
********

     git fmt-merge-msg [-m <message>] [-log[=<n>] | -no-log] <$GIT_DIR/FETCH_HEAD
     git fmt-merge-msg [-m <message>] [-log[=<n>] | -no-log] -F <file>


DESCRIPTION
***********

Takes the list of merged objects on stdin and produces a suitable
commit message to be used for the merge commit, usually to be passed as
the _<merge-message>_ argument of _git merge_.

   This command is intended mostly for internal use by scripts
automatically invoking _git merge_.



OPTIONS
*******

-log[=<n>]
     In addition to branch names, populate the log message with
     one-line descriptions from the actual commits that are being
     merged.  At most <n> commits from each merge parent will be used
     (20 if <n> is omitted).  This overrides the `merge.log'
     configuration variable.

-no-log
     Do not list one-line descriptions from the actual commits being
     merged.

-summary
-no-summary
     Synonyms to -log and -no-log; these are deprecated and will be
     removed in the future.

-m <message>
-message <message>
     Use <message> instead of the branch names for the first line of
     the log message.  For use with `--log'.

-F <file>
-file <file>
     Take the list of merged objects from <file> instead of stdin.


CONFIGURATION
*************

merge.branchdesc
     In addition to branch names, populate the log message with the
     branch description text associated with them.  Defaults to false.

merge.log
     In addition to branch names, populate the log message with at most
     the specified number of one-line descriptions from the actual
     commits that are being merged.  Defaults to false, and true is a
     synonym for 20.

merge.summary
     Synonym to `merge.log'; this is deprecated and will be removed in
     the future.


SEE ALSO
********

git-merge(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-for-each-ref,  Up: Top

Name
****

git-for-each-ref — Output information on each ref



Synopsis
********

     git for-each-ref [-count=<count>] [-shell|-perl|-python|-tcl]
                        [(-sort=<key>)…] [-format=<format>] [<pattern>…]


DESCRIPTION
***********

Iterate over all refs that match `<pattern>' and show them according to
the given `<format>', after sorting them according to the given set of
`<key>'.  If `<count>' is given, stop after showing that many refs.
The interpolated values in `<format>' can optionally be quoted as
string literals in the specified host language allowing their direct
evaluation in that language.



OPTIONS
*******

<count>
     By default the command shows all refs that match `<pattern>'.
     This option makes it stop after showing that many refs.

<key>
     A field name to sort on.  Prefix `-' to sort in descending order
     of the value.  When unspecified, `refname' is used.  You may use
     the -sort=<key> option multiple times, in which case the last key
     becomes the primary key.

<format>
     A string that interpolates `%(fieldname)' from the object pointed
     at by a ref being shown.  If `fieldname' is prefixed with an
     asterisk (`*') and the ref points at a tag object, the value for
     the field in the object tag refers is used.  When unspecified,
     defaults to `%(objectname) SPC %(objecttype) TAB %(refname)'.  It
     also interpolates `%%' to `%', and `%xx' where `xx' are hex digits
     interpolates to character with hex code `xx'; for example `%00'
     interpolates to `\0' (NUL), `%09' to `\t' (TAB) and `%0a' to `\n'
     (LF).

<pattern>…
     If one or more patterns are given, only refs are shown that match
     against at least one pattern, either using fnmatch(3) or
     literally, in the latter case matching completely or from the
     beginning up to a slash.

-shell
-perl
-python
-tcl
     If given, strings that substitute `%(fieldname)' placeholders are
     quoted as string literals suitable for the specified host
     language.  This is meant to produce a scriptlet that can directly
     be `eval`ed.


FIELD NAMES
***********

Various values from structured fields in referenced objects can be used
to interpolate into the resulting output, or as sort keys.

   For all objects, the following names can be used:

refname
     The name of the ref (the part after $GIT_DIR/).  For a
     non-ambiguous short name of the ref append `:short'.  The option
     core.warnAmbiguousRefs is used to select the strict abbreviation
     mode.

objecttype
     The type of the object (`blob', `tree', `commit', `tag').

objectsize
     The size of the object (the same as _git cat-file -s_ reports).

objectname
     The object name (aka SHA-1).  For a non-ambiguous abbreviation of
     the object name append `:short'.

upstream
     The name of a local ref which can be considered “upstream”
     from the displayed ref. Respects `:short' in the same way as
     `refname' above.

   In addition to the above, for commit and tag objects, the header
field names (`tree', `parent', `object', `type', and `tag') can be used
to specify the value in the header field.

   Fields that have name-email-date tuple as its value (`author',
`committer', and `tagger') can be suffixed with `name', `email', and
`date' to extract the named component.

   The complete message in a commit and tag object is `contents'.  Its
first line is `contents:subject', the remaining lines are
`contents:body' and the optional GPG signature is `contents:signature'.

   For sorting purposes, fields with numeric values sort in numeric
order (`objectsize', `authordate', `committerdate', `taggerdate').  All
other fields are used to sort in their byte-value order.

   In any case, a field name that refers to a field inapplicable to the
object referred by the ref does not cause an error.  It returns an
empty string instead.

   As a special case for the date-type fields, you may specify a format
for the date by adding one of `:default', `:relative', `:short',
`:local', `:iso8601' or `:rfc2822' to the end of the fieldname; e.g.
`%(taggerdate:relative)'.



EXAMPLES
********

An example directly producing formatted text.  Show the most recent 3
tagged commits:

     #!/bin/sh

     git for-each-ref --count=3 --sort='-*authordate' \
     --format='From: %(*authorname) %(*authoremail)
     Subject: %(*subject)
     Date: %(*authordate)
     Ref: %(*refname)

     %(*body)
     ' 'refs/tags'

   A simple example showing the use of shell eval on the output,
demonstrating the use of -shell.  List the prefixes of all heads:

     #!/bin/sh

     git for-each-ref --shell --format="ref=%(refname)" refs/heads | \
     while read entry
     do
             eval "$entry"
             echo `dirname $ref`
     done

   A bit more elaborate report on tags, demonstrating that the format
may be an entire script:

     #!/bin/sh

     fmt='
             r=%(refname)
             t=%(*objecttype)
             T=${r#refs/tags/}

             o=%(*objectname)
             n=%(*authorname)
             e=%(*authoremail)
             s=%(*subject)
             d=%(*authordate)
             b=%(*body)

             kind=Tag
             if test "z$t" = z
             then
                     # could be a lightweight tag
                     t=%(objecttype)
                     kind="Lightweight tag"
                     o=%(objectname)
                     n=%(authorname)
                     e=%(authoremail)
                     s=%(subject)
                     d=%(authordate)
                     b=%(body)
             fi
             echo "$kind $T points at a $t object $o"
             if test "z$t" = zcommit
             then
                     echo "The commit was authored by $n $e
     at $d, and titled

         $s

     Its message reads as:
     "
                     echo "$b" | sed -e "s/^/    /"
                     echo
             fi
     '

     eval=`git for-each-ref --shell --format="$fmt" \
             --sort='*objecttype' \
             --sort=-taggerdate \
             refs/tags`
     eval "$eval"


Author
******

Written by Junio C Hamano <gitster@pobox.com
(mailto:gitster@pobox.com)>.



Documentation
*************

Documentation by Junio C Hamano and the git-list <git@vger.kernel.org
(mailto:git@vger.kernel.org)>.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-format-patch,  Up: Top

Name
****

git-format-patch — Prepare patches for e-mail submission



Synopsis
********

     git format-patch [-k] [(-o|-output-directory) <dir> | -stdout]
                        [-no-thread | -thread[=<style>]]
                        [(-attach|-inline)[=<boundary>] | -no-attach]
                        [-s | -signoff]
                        [-signature=<signature> | -no-signature]
                        [-n | -numbered | -N | -no-numbered]
                        [-start-number <n>] [-numbered-files]
                        [-in-reply-to=Message-Id] [-suffix=.<sfx>]
                        [-ignore-if-in-upstream]
                        [-subject-prefix=Subject-Prefix]
                        [-to=<email>] [-cc=<email>]
                        [-cover-letter] [-quiet]
                        [<common diff options>]
                        [ <since> | <revision range> ]


DESCRIPTION
***********

Prepare each commit with its patch in one file per commit, formatted to
resemble UNIX mailbox format.  The output of this command is convenient
for e-mail submission or for use with _git am_.

   There are two ways to specify which commits to operate on.

  1. A single commit, <since>, specifies that the commits leading to
     the tip of the current branch that are not in the history that
     leads to the <since> to be output.

  2. Generic <revision range> expression (see "SPECIFYING REVISIONS"
     section in gitrevisions(7)) means the commits in the specified
     range.

   The first rule takes precedence in the case of a single <commit>.  To
apply the second rule, i.e., format everything since the beginning of
history up until <commit>, use the _-root_ option: `git format-patch
--root <commit>'.  If you want to format only <commit> itself, you can
do this with `git format-patch -1 <commit>'.

   By default, each output file is numbered sequentially from 1, and
uses the first line of the commit message (massaged for pathname
safety) as the filename. With the `--numbered-files' option, the output
file names will only be numbers, without the first line of the commit
appended.  The names of the output files are printed to standard
output, unless the `--stdout' option is specified.

   If `-o' is specified, output files are created in <dir>.  Otherwise
they are created in the current working directory.

   By default, the subject of a single patch is "[PATCH] First Line" and
the subject when multiple patches are output is "[PATCH n/m] First
Line". To force 1/1 to be added for a single patch, use `-n'.  To omit
patch numbers from the subject, use `-N'.

   If given `--thread', `git-format-patch' will generate `In-Reply-To'
and `References' headers to make the second and subsequent patch mails
appear as replies to the first mail; this also generates a `Message-Id'
header to reference.



OPTIONS
*******

-p
-no-stat
     Generate plain patches without any diffstats.

-U<n>
-unified=<n>
     Generate diffs with <n> lines of context instead of the usual
     three.

-minimal
     Spend extra time to make sure the smallest possible diff is
     produced.

-patience
     Generate a diff using the "patience diff" algorithm.

-histogram
     Generate a diff using the "histogram diff" algorithm.

-stat[=<width>[,<name-width>[,<count>]]]
     Generate a diffstat. By default, as much space as necessary will
     be used for the filename part, and the rest for the graph part.
     Maximum width defaults to terminal width, or 80 columns if not
     connected to a terminal, and can be overridden by `<width>'. The
     width of the filename part can be limited by giving another width
     `<name-width>' after a comma. The width of the graph part can be
     limited by using `--stat-graph-width=<width>' (affects all
     commands generating a stat graph) or by setting
     `diff.statGraphWidth=<width>' (does not affect `git format-patch').
     By giving a third parameter `<count>', you can limit the output to
     the first `<count>' lines, followed by `...' if there are more.

     These parameters can also be set individually with
     `--stat-width=<width>', `--stat-name-width=<name-width>' and
     `--stat-count=<count>'.

-numstat
     Similar to `--stat', but shows number of added and deleted lines
     in decimal notation and pathname without abbreviation, to make it
     more machine friendly.  For binary files, outputs two `-' instead
     of saying `0 0'.

-shortstat
     Output only the last line of the `--stat' format containing total
     number of modified files, as well as number of added and deleted
     lines.

-dirstat[=<param1,param2,…>]
     Output the distribution of relative amount of changes for each
     sub-directory. The behavior of `--dirstat' can be customized by
     passing it a comma separated list of parameters.  The defaults are
     controlled by the `diff.dirstat' configuration variable (see
     git-config(1)).  The following parameters are available:

    `changes'
          Compute the dirstat numbers by counting the lines that have
          been removed from the source, or added to the destination.
          This ignores the amount of pure code movements within a file.
          In other words, rearranging lines in a file is not counted
          as much as other changes.  This is the default behavior when
          no parameter is given.

    `lines'
          Compute the dirstat numbers by doing the regular line-based
          diff analysis, and summing the removed/added line counts.
          (For binary files, count 64-byte chunks instead, since binary
          files have no natural concept of lines). This is a more
          expensive `--dirstat' behavior than the `changes' behavior,
          but it does count rearranged lines within a file as much as
          other changes. The resulting output is consistent with what
          you get from the other `--*stat' options.

    `files'
          Compute the dirstat numbers by counting the number of files
          changed.  Each changed file counts equally in the dirstat
          analysis. This is the computationally cheapest `--dirstat'
          behavior, since it does not have to look at the file contents
          at all.

    `cumulative'
          Count changes in a child directory for the parent directory
          as well.  Note that when using `cumulative', the sum of the
          percentages reported may exceed 100%. The default
          (non-cumulative) behavior can be specified with the
          `noncumulative' parameter.

    <limit>
          An integer parameter specifies a cut-off percent (3% by
          default).  Directories contributing less than this percentage
          of the changes are not shown in the output.

     Example: The following will count changed files, while ignoring
     directories with less than 10% of the total amount of changed
     files, and accumulating child directory counts in the parent
     directories: `--dirstat=files,10,cumulative'.

-summary
     Output a condensed summary of extended header information such as
     creations, renames and mode changes.

-no-renames
     Turn off rename detection, even when the configuration file gives
     the default to do so.

-full-index
     Instead of the first handful of characters, show the full pre- and
     post-image blob object names on the "index" line when generating
     patch format output.

-binary
     In addition to `--full-index', output a binary diff that can be
     applied with `git-apply'.

-abbrev[=<n>]
     Instead of showing the full 40-byte hexadecimal object name in
     diff-raw format output and diff-tree header lines, show only a
     partial prefix.  This is independent of the `--full-index' option
     above, which controls the diff-patch output format.  Non default
     number of digits can be specified with `--abbrev=<n>'.

-B[<n>][/<m>]
-break-rewrites[=[<n>][/<m>]]
     Break complete rewrite changes into pairs of delete and create.
     This serves two purposes:

     It affects the way a change that amounts to a total rewrite of a
     file not as a series of deletion and insertion mixed together with
     a very few lines that happen to match textually as the context,
     but as a single deletion of everything old followed by a single
     insertion of everything new, and the number `m' controls this
     aspect of the -B option (defaults to 60%). `-B/70%' specifies that
     less than 30% of the original should remain in the result for git
     to consider it a total rewrite (i.e. otherwise the resulting patch
     will be a series of deletion and insertion mixed together with
     context lines).

     When used with -M, a totally-rewritten file is also considered as
     the source of a rename (usually -M only considers a file that
     disappeared as the source of a rename), and the number `n'
     controls this aspect of the -B option (defaults to 50%). `-B20%'
     specifies that a change with addition and deletion compared to 20%
     or more of the file’s size are eligible for being picked up as a
     possible source of a rename to another file.

-M[<n>]
-find-renames[=<n>]
     Detect renames.  If `n' is specified, it is a threshold on the
     similarity index (i.e. amount of addition/deletions compared to the
     file’s size). For example, `-M90%' means git should consider a
     delete/add pair to be a rename if more than 90% of the file
     hasn’t changed.

-C[<n>]
-find-copies[=<n>]
     Detect copies as well as renames.  See also `--find-copies-harder'.
     If `n' is specified, it has the same meaning as for `-M<n>'.

-find-copies-harder
     For performance reasons, by default, `-C' option finds copies only
     if the original file of the copy was modified in the same
     changeset.  This flag makes the command inspect unmodified files
     as candidates for the source of copy.  This is a very expensive
     operation for large projects, so use it with caution.  Giving more
     than one `-C' option has the same effect.

-D
-irreversible-delete
     Omit the preimage for deletes, i.e. print only the header but not
     the diff between the preimage and `/dev/null'. The resulting patch
     is not meant to be applied with `patch' nor `git apply'; this is
     solely for people who want to just concentrate on reviewing the
     text after the change. In addition, the output obviously lack
     enough information to apply such a patch in reverse, even manually,
     hence the name of the option.

     When used together with `-B', omit also the preimage in the
     deletion part of a delete/create pair.

-l<num>
     The `-M' and `-C' options require O(n^2) processing time where n
     is the number of potential rename/copy targets.  This option
     prevents rename/copy detection from running if the number of
     rename/copy targets exceeds the specified number.

-O<orderfile>
     Output the patch in the order specified in the <orderfile>, which
     has one shell glob pattern per line.

-a
-text
     Treat all files as text.

-ignore-space-at-eol
     Ignore changes in whitespace at EOL.

-b
-ignore-space-change
     Ignore changes in amount of whitespace.  This ignores whitespace
     at line end, and considers all other sequences of one or more
     whitespace characters to be equivalent.

-w
-ignore-all-space
     Ignore whitespace when comparing lines.  This ignores differences
     even if one line has whitespace where the other line has none.

-inter-hunk-context=<lines>
     Show the context between diff hunks, up to the specified number of
     lines, thereby fusing hunks that are close to each other.

-W
-function-context
     Show whole surrounding functions of changes.

-ext-diff
     Allow an external diff helper to be executed. If you set an
     external diff driver with gitattributes(5), you need to use this
     option with git-log(1) and friends.

-no-ext-diff
     Disallow external diff drivers.

-textconv
-no-textconv
     Allow (or disallow) external text conversion filters to be run
     when comparing binary files. See gitattributes(5) for details.
     Because textconv filters are typically a one-way conversion, the
     resulting diff is suitable for human consumption, but cannot be
     applied. For this reason, textconv filters are enabled by default
     only for git-diff(1) and git-log(1), but not for
     git-format-patch(1) or diff plumbing commands.

-ignore-submodules[=<when>]
     Ignore changes to submodules in the diff generation. <when> can be
     either "none", "untracked", "dirty" or "all", which is the default
     Using "none" will consider the submodule modified when it either
     contains untracked or modified files or its HEAD differs from the
     commit recorded in the superproject and can be used to override
     any settings of the _ignore_ option in git-config(1) or
     gitmodules(5). When "untracked" is used submodules are not
     considered dirty when they only contain untracked content (but
     they are still scanned for modified content). Using "dirty"
     ignores all changes to the work tree of submodules, only changes
     to the commits stored in the superproject are shown (this was the
     behavior until 1.7.0). Using "all" hides all changes to submodules.

-src-prefix=<prefix>
     Show the given source prefix instead of "a/".

-dst-prefix=<prefix>
     Show the given destination prefix instead of "b/".

-no-prefix
     Do not show any source or destination prefix.

   For more detailed explanation on these common options, see also
gitdiffcore(7).

-<n>
     Prepare patches from the topmost <n> commits.

-o <dir>
-output-directory <dir>
     Use <dir> to store the resulting files, instead of the current
     working directory.

-n
-numbered
     Name output in _[PATCH n/m]_ format, even with a single patch.

-N
-no-numbered
     Name output in _[PATCH]_ format.

-start-number <n>
     Start numbering the patches at <n> instead of 1.

-numbered-files
     Output file names will be a simple number sequence without the
     default first line of the commit appended.

-k
-keep-subject
     Do not strip/add _[PATCH]_ from the first line of the commit log
     message.

-s
-signoff
     Add `Signed-off-by:' line to the commit message, using the
     committer identity of yourself.

-stdout
     Print all commits to the standard output in mbox format, instead
     of creating a file for each one.

-attach[=<boundary>]
     Create multipart/mixed attachment, the first part of which is the
     commit message and the patch itself in the second part, with
     `Content-Disposition: attachment'.

-no-attach
     Disable the creation of an attachment, overriding the
     configuration setting.

-inline[=<boundary>]
     Create multipart/mixed attachment, the first part of which is the
     commit message and the patch itself in the second part, with
     `Content-Disposition: inline'.

-thread[=<style>]
-no-thread
     Controls addition of `In-Reply-To' and `References' headers to
     make the second and subsequent mails appear as replies to the
     first.  Also controls generation of the `Message-Id' header to
     reference.

     The optional <style> argument can be either `shallow' or `deep'.
     _shallow_ threading makes every mail a reply to the head of the
     series, where the head is chosen from the cover letter, the
     `--in-reply-to', and the first patch mail, in this order.  _deep_
     threading makes every mail a reply to the previous one.

     The default is `--no-thread', unless the _format.thread_
     configuration is set.  If `--thread' is specified without a style,
     it defaults to the style specified by _format.thread_ if any, or
     else `shallow'.

     Beware that the default for _git send-email_ is to thread emails
     itself.  If you want `git format-patch' to take care of threading,
     you will want to ensure that threading is disabled for `git
     send-email'.

-in-reply-to=Message-Id
     Make the first mail (or all the mails with `--no-thread') appear
     as a reply to the given Message-Id, which avoids breaking threads
     to provide a new patch series.

-ignore-if-in-upstream
     Do not include a patch that matches a commit in <until>..<since>.
     This will examine all patches reachable from <since> but not from
     <until> and compare them with the patches being generated, and any
     patch that matches is ignored.

-subject-prefix=<Subject-Prefix>
     Instead of the standard _[PATCH]_ prefix in the subject line,
     instead use _[<Subject-Prefix>]_. This allows for useful naming of
     a patch series, and can be combined with the `--numbered' option.

-to=<email>
     Add a `To:' header to the email headers. This is in addition to
     any configured headers, and may be used multiple times.  The
     negated form `--no-to' discards all `To:' headers added so far
     (from config or command line).

-cc=<email>
     Add a `Cc:' header to the email headers. This is in addition to
     any configured headers, and may be used multiple times.  The
     negated form `--no-cc' discards all `Cc:' headers added so far
     (from config or command line).

-add-header=<header>
     Add an arbitrary header to the email headers.  This is in addition
     to any configured headers, and may be used multiple times.  For
     example, `--add-header="Organization: git-foo"'.  The negated form
     `--no-add-header' discards *all* (`To:', `Cc:', and custom)
     headers added so far from config or command line.

-cover-letter
     In addition to the patches, generate a cover letter file
     containing the shortlog and the overall diffstat.  You can fill in
     a description in the file before sending it out.

-[no]-signature=<signature>
     Add a signature to each message produced. Per RFC 3676 the
     signature is separated from the body by a line with '- ' on it. If
     the signature option is omitted the signature defaults to the git
     version number.

-suffix=.<sfx>
     Instead of using `.patch' as the suffix for generated filenames,
     use specified suffix.  A common alternative is `--suffix=.txt'.
     Leaving this empty will remove the `.patch' suffix.

     Note that the leading character does not have to be a dot; for
     example, you can use `--suffix=-patch' to get
     `0001-description-of-my-change-patch'.

-quiet
     Do not print the names of the generated files to standard output.

-no-binary
     Do not output contents of changes in binary files, instead display
     a notice that those files changed.  Patches generated using this
     option cannot be applied properly, but they are still useful for
     code review.

-root
     Treat the revision argument as a <revision range>, even if it is
     just a single commit (that would normally be treated as a
     <since>).  Note that root commits included in the specified range
     are always formatted as creation patches, independently of this
     flag.


CONFIGURATION
*************

You can specify extra mail header lines to be added to each message,
defaults for the subject prefix and file suffix, number patches when
outputting more than one patch, add "To" or "Cc:" headers, configure
attachments, and sign off patches with configuration variables.

     [format]
             headers = "Organization: git-foo\n"
             subjectprefix = CHANGE
             suffix = .txt
             numbered = auto
             to = <email>
             cc = <email>
             attach [ = mime-boundary-string ]
             signoff = true


DISCUSSION
**********

The patch produced by _git format-patch_ is in UNIX mailbox format,
with a fixed "magic" time stamp to indicate that the file is output
from format-patch rather than a real mailbox, like so:

     From 8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00 2001
     From: Tony Luck <tony.luck@intel.com>
     Date: Tue, 13 Jul 2010 11:42:54 -0700
     Subject: [PATCH] =?UTF-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=
      =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig=20diet?=
     MIME-Version: 1.0
     Content-Type: text/plain; charset=UTF-8
     Content-Transfer-Encoding: 8bit

     arch/arm config files were slimmed down using a python script
     (See commit c2330e286f68f1c408b4aa6515ba49d57f05beae comment)

     Do the same for ia64 so we can have sleek & trim looking
     ...

   Typically it will be placed in a MUA’s drafts folder, edited to add
timely commentary that should not go in the changelog after the three
dashes, and then sent as a message whose body, in our example, starts
with "arch/arm config files were…".  On the receiving end, readers
can save interesting patches in a UNIX mailbox and apply them with
git-am(1).

   When a patch is part of an ongoing discussion, the patch generated by
_git format-patch_ can be tweaked to take advantage of the _git am
-scissors_ feature.  After your response to the discussion comes a line
that consists solely of "`-- >8 --'" (scissors and perforation),
followed by the patch with unnecessary header fields removed:

     ...
     > So we should do such-and-such.

     Makes sense to me.  How about this patch?

     -- >8 --
     Subject: [IA64] Put ia64 config files on the Uwe Kleine-König diet

     arch/arm config files were slimmed down using a python script
     ...

   When sending a patch this way, most often you are sending your own
patch, so in addition to the "`From $SHA1 $magic_timestamp'" marker you
should omit `From:' and `Date:' lines from the patch file.  The patch
title is likely to be different from the subject of the discussion the
patch is in response to, so it is likely that you would want to keep
the Subject: line, like the example above.



Checking for patch corruption
=============================

Many mailers if not set up properly will corrupt whitespace.  Here are
two common types of corruption:

   * Empty context lines that do not have _any_ whitespace.

   * Non-empty context lines that have one extra whitespace at the
     beginning.

   One way to test if your MUA is set up correctly is:

   * Send the patch to yourself, exactly the way you would, except with
     To: and Cc: lines that do not contain the list and maintainer
     address.

   * Save that patch to a file in UNIX mailbox format.  Call it a.patch,
     say.

   * Apply it:

          $ git fetch <project> master:test-apply
          $ git checkout test-apply
          $ git reset --hard
          $ git am a.patch

   If it does not apply correctly, there can be various reasons.

   * The patch itself does not apply cleanly.  That is _bad_ but does
     not have much to do with your MUA.  You might want to rebase the
     patch with git-rebase(1) before regenerating it in this case.

   * The MUA corrupted your patch; "am" would complain that the patch
     does not apply.  Look in the .git/rebase-apply/ subdirectory and
     see what _patch_ file contains and check for the common corruption
     patterns mentioned above.

   * While at it, check the _info_ and _final-commit_ files as well.
     If what is in _final-commit_ is not exactly what you would want to
     see in the commit log message, it is very likely that the receiver
     would end up hand editing the log message when applying your
     patch.  Things like "Hi, this is my first patch.\n" in the patch
     e-mail should come after the three-dash line that signals the end
     of the commit message.


MUA-SPECIFIC HINTS
******************

Here are some hints on how to successfully submit patches inline using
various mailers.



GMail
=====

GMail does not have any way to turn off line wrapping in the web
interface, so it will mangle any emails that you send.  You can however
use "git send-email" and send your patches through the GMail SMTP
server, or use any IMAP email client to connect to the google IMAP
server and forward the emails through that.

   For hints on using _git send-email_ to send your patches through the
GMail SMTP server, see the EXAMPLE section of git-send-email(1).

   For hints on submission using the IMAP interface, see the EXAMPLE
section of git-imap-send(1).



Thunderbird
===========

By default, Thunderbird will both wrap emails as well as flag them as
being _format=flowed_, both of which will make the resulting email
unusable by git.

   There are three different approaches: use an add-on to turn off line
wraps, configure Thunderbird to not mangle patches, or use an external
editor to keep Thunderbird from mangling the patches.



Approach #1 (add-on)
--------------------

Install the Toggle Word Wrap add-on that is available from
https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/
(https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/) It
adds a menu entry "Enable Word Wrap" in the composer’s "Options" menu
that you can tick off. Now you can compose the message as you otherwise
do (cut + paste, _git format-patch_ | _git imap-send_, etc), but you
have to insert line breaks manually in any text that you type.



Approach #2 (configuration)
---------------------------

Three steps:

  1. Configure your mail server composition as plain text:
     Edit…Account Settings…Composition & Addressing, uncheck
     "Compose Messages in HTML".

  2. Configure your general composition window to not wrap.

     In Thunderbird 2: Edit..Preferences..Composition, wrap plain text
     messages at 0

     In Thunderbird 3: Edit..Preferences..Advanced..Config Editor.
     Search for "mail.wrap_long_lines".  Toggle it to make sure it is
     set to `false'.

  3. Disable the use of format=flowed:
     Edit..Preferences..Advanced..Config Editor.  Search for
     "mailnews.send_plaintext_flowed".  Toggle it to make sure it is
     set to `false'.

   After that is done, you should be able to compose email as you
otherwise would (cut + paste, _git format-patch_ | _git imap-send_,
etc), and the patches will not be mangled.



Approach #3 (external editor)
-----------------------------

The following Thunderbird extensions are needed: AboutConfig from
http://aboutconfig.mozdev.org/ (http://aboutconfig.mozdev.org/) and
External Editor from http://globs.org/articles.php?lng=en&pg=8
(http://globs.org/articles.php?lng=en&pg=8)

  1. Prepare the patch as a text file using your method of choice.

  2. Before opening a compose window, use Edit→Account Settings to
     uncheck the "Compose messages in HTML format" setting in the
     "Composition & Addressing" panel of the account to be used to send
     the patch.

  3. In the main Thunderbird window, _before_ you open the compose
     window for the patch, use Tools→about:config to set the
     following to the indicated values:

                  mailnews.send_plaintext_flowed  => false
                  mailnews.wraplength             => 0

  4. Open a compose window and click the external editor icon.

  5. In the external editor window, read in the patch file and exit the
     editor normally.

   Side note: it may be possible to do step 2 with about:config and the
following settings but no one’s tried yet.

             mail.html_compose                       => false
             mail.identity.default.compose_html      => false
             mail.identity.id?.compose_html          => false

   There is a script in contrib/thunderbird-patch-inline which can help
you include patches with Thunderbird in an easy way. To use it, do the
steps above and then use the script as the external editor.



KMail
=====

This should help you to submit patches inline using KMail.

  1. Prepare the patch as a text file.

  2. Click on New Mail.

  3. Go under "Options" in the Composer window and be sure that "Word
     wrap" is not set.

  4. Use Message → Insert file… and insert the patch.

  5. Back in the compose window: add whatever other text you wish to the
     message, complete the addressing and subject fields, and press
     send.


EXAMPLES
********

   * Extract commits between revisions R1 and R2, and apply them on top
     of the current branch using _git am_ to cherry-pick them:

          $ git format-patch -k --stdout R1..R2 | git am -3 -k

   * Extract all commits which are in the current branch but not in the
     origin branch:

          $ git format-patch origin

     For each commit a separate file is created in the current
     directory.

   * Extract all commits that lead to _origin_ since the inception of
     the project:

          $ git format-patch --root origin

   * The same as the previous one:

          $ git format-patch -M -B origin

     Additionally, it detects and handles renames and complete rewrites
     intelligently to produce a renaming patch.  A renaming patch
     reduces the amount of text output, and generally makes it easier
     to review.  Note that non-git "patch" programs won’t understand
     renaming patches, so use it only when you know the recipient uses
     git to apply your patch.

   * Extract three topmost commits from the current branch and format
     them as e-mailable patches:

          $ git format-patch -3



SEE ALSO
********

git-am(1), git-send-email(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fsck-objects,  Up: Top

Name
****

git-fsck-objects — Verifies the connectivity and validity of the
objects in the database



Synopsis
********

     git fsck-objects …


DESCRIPTION
***********

This is a synonym for git-fsck(1).  Please refer to the documentation
of that command.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fsck,  Up: Top

Name
****

git-fsck — Verifies the connectivity and validity of the objects in
the database



Synopsis
********

     git fsck [-tags] [-root] [-unreachable] [-cache] [-no-reflogs]
              [-[no-]full] [-strict] [-verbose] [-lost-found]
              [-[no-]dangling] [-[no-]progress] [<object>*]


DESCRIPTION
***********

Verifies the connectivity and validity of the objects in the database.



OPTIONS
*******

<object>
     An object to treat as the head of an unreachability trace.

     If no objects are given, _git fsck_ defaults to using the index
     file, all SHA1 references in `refs' namespace, and all reflogs
     (unless -no-reflogs is given) as heads.

-unreachable
     Print out objects that exist but that aren’t reachable from any
     of the reference nodes.

-dangling
-no-dangling
     Print objects that exist but that are never _directly_ used
     (default).  `--no-dangling' can be used to omit this information
     from the output.

-root
     Report root nodes.

-tags
     Report tags.

-cache
     Consider any object recorded in the index also as a head node for
     an unreachability trace.

-no-reflogs
     Do not consider commits that are referenced only by an entry in a
     reflog to be reachable.  This option is meant only to search for
     commits that used to be in a ref, but now aren’t, but are still
     in that corresponding reflog.

-full
     Check not just objects in GIT_OBJECT_DIRECTORY ($GIT_DIR/objects),
     but also the ones found in alternate object pools listed in
     GIT_ALTERNATE_OBJECT_DIRECTORIES or
     $GIT_DIR/objects/info/alternates, and in packed git archives found
     in $GIT_DIR/objects/pack and corresponding pack subdirectories in
     alternate object pools.  This is now default; you can turn it off
     with -no-full.

-strict
     Enable more strict checking, namely to catch a file mode recorded
     with g+w bit set, which was created by older versions of git.
     Existing repositories, including the Linux kernel, git itself, and
     sparse repository have old objects that triggers this check, but
     it is recommended to check new projects with this flag.

-verbose
     Be chatty.

-lost-found
     Write dangling objects into .git/lost-found/commit/ or
     .git/lost-found/other/, depending on type.  If the object is a
     blob, the contents are written into the file, rather than its
     object name.

-progress
-no-progress
     Progress status is reported on the standard error stream by
     default when it is attached to a terminal, unless -no-progress or
     -verbose is specified. -progress forces progress status even if
     the standard error stream is not directed to a terminal.


DISCUSSION
**********

git-fsck tests SHA1 and general object sanity, and it does full tracking
of the resulting reachability and everything else. It prints out any
corruption it finds (missing or bad objects), and if you use the
_-unreachable_ flag it will also print out objects that exist but that
aren’t reachable from any of the specified head nodes (or the default
set, as mentioned above).

   Any corrupt objects you will have to find in backups or other
archives (i.e., you can just remove them and do an _rsync_ with some
other site in the hopes that somebody else has the object you have
corrupted).



Extracted Diagnostics
*********************

expect dangling commits - potential heads - due to lack of head information
     You haven’t specified any nodes as heads so it won’t be
     possible to differentiate between un-parented commits and root
     nodes.

missing sha1 directory _<dir>_
     The directory holding the sha1 objects is missing.

unreachable <type> <object>
     The <type> object <object>, isn’t actually referred to directly
     or indirectly in any of the trees or commits seen. This can mean
     that there’s another root node that you’re not specifying or
     that the tree is corrupt. If you haven’t missed a root node then
     you might as well delete unreachable nodes since they can’t be
     used.

missing <type> <object>
     The <type> object <object>, is referred to but isn’t present in
     the database.

dangling <type> <object>
     The <type> object <object>, is present in the database but never
     _directly_ used. A dangling commit could be a root node.

sha1 mismatch <object>
     The database has an object who’s sha1 doesn’t match the
     database value.  This indicates a serious data integrity problem.


Environment Variables
*********************

GIT_OBJECT_DIRECTORY
     used to specify the object database root (usually $GIT_DIR/objects)

GIT_INDEX_FILE
     used to specify the index file of the index

GIT_ALTERNATE_OBJECT_DIRECTORIES
     used to specify additional object database roots (usually unset)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-gc,  Up: Top

Name
****

git-gc — Cleanup unnecessary files and optimize the local repository



Synopsis
********

     git gc [-aggressive] [-auto] [-quiet] [-prune=<date> | -no-prune]


DESCRIPTION
***********

Runs a number of housekeeping tasks within the current repository, such
as compressing file revisions (to reduce disk space and increase
performance) and removing unreachable objects which may have been
created from prior invocations of _git add_.

   Users are encouraged to run this task on a regular basis within each
repository to maintain good disk space utilization and good operating
performance.

   Some git commands may automatically run _git gc_; see the `--auto'
flag below for details. If you know what you’re doing and all you
want is to disable this behavior permanently without further
considerations, just do:

     $ git config --global gc.auto 0


OPTIONS
*******

-aggressive
     Usually _git gc_ runs very quickly while providing good disk space
     utilization and performance.  This option will cause _git gc_ to
     more aggressively optimize the repository at the expense of taking
     much more time.  The effects of this optimization are persistent,
     so this option only needs to be used occasionally; every few
     hundred changesets or so.

-auto
     With this option, _git gc_ checks whether any housekeeping is
     required; if not, it exits without performing any work.  Some git
     commands run `git gc --auto' after performing operations that
     could create many loose objects.

     Housekeeping is required if there are too many loose objects or
     too many packs in the repository. If the number of loose objects
     exceeds the value of the `gc.auto' configuration variable, then
     all loose objects are combined into a single pack using `git
     repack -d -l'.  Setting the value of `gc.auto' to 0 disables
     automatic packing of loose objects.

     If the number of packs exceeds the value of `gc.autopacklimit',
     then existing packs (except those marked with a `.keep' file) are
     consolidated into a single pack by using the `-A' option of _git
     repack_. Setting `gc.autopacklimit' to 0 disables automatic
     consolidation of packs.

-prune=<date>
     Prune loose objects older than date (default is 2 weeks ago,
     overridable by the config variable `gc.pruneExpire').  This option
     is on by default.

-no-prune
     Do not prune any loose objects.

-quiet
     Suppress all progress reports.


Configuration
*************

The optional configuration variable _gc.reflogExpire_ can be set to
indicate how long historical entries within each branch’s reflog
should remain available in this repository.  The setting is expressed
as a length of time, for example _90 days_ or _3 months_.  It defaults
to _90 days_.

   The optional configuration variable _gc.reflogExpireUnreachable_ can
be set to indicate how long historical reflog entries which are not
part of the current branch should remain available in this repository.
These types of entries are generally created as a result of using `git
commit --amend' or `git rebase' and are the commits prior to the amend
or rebase occurring.  Since these changes are not part of the current
project most users will want to expire them sooner.  This option
defaults to _30 days_.

   The above two configuration variables can be given to a pattern.  For
example, this sets non-default expiry values only to remote-tracking
branches:

     [gc "refs/remotes/*"]
             reflogExpire = never
             reflogexpireUnreachable = 3 days

   The optional configuration variable _gc.rerereresolved_ indicates
how long records of conflicted merge you resolved earlier are kept.
This defaults to 60 days.

   The optional configuration variable _gc.rerereunresolved_ indicates
how long records of conflicted merge you have not resolved are kept.
This defaults to 15 days.

   The optional configuration variable _gc.packrefs_ determines if _git
gc_ runs _git pack-refs_. This can be set to "notbare" to enable it
within all non-bare repos or it can be set to a boolean value.  This
defaults to true.

   The optional configuration variable _gc.aggressiveWindow_ controls
how much time is spent optimizing the delta compression of the objects
in the repository when the -aggressive option is specified.  The larger
the value, the more time is spent optimizing the delta compression.  See
the documentation for the -window' option in git-repack(1) for more
details.  This defaults to 250.

   The optional configuration variable _gc.pruneExpire_ controls how old
the unreferenced loose objects have to be before they are pruned.  The
default is "2 weeks ago".



Notes
*****

_git gc_ tries very hard to be safe about the garbage it collects. In
particular, it will keep not only objects referenced by your current set
of branches and tags, but also objects referenced by the index,
remote-tracking branches, refs saved by _git filter-branch_ in
refs/original/, or reflogs (which may reference commits in branches
that were later amended or rewound).

   If you are expecting some objects to be collected and they aren’t,
check all of those locations and decide whether it makes sense in your
case to remove those references.



HOOKS
*****

The _git gc -auto_ command will run the _pre-auto-gc_ hook.  See
githooks(5) for more information.



SEE ALSO
********

git-prune(1) git-reflog(1) git-repack(1) git-rerere(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-get-tar-commit-id,  Up: Top

Name
****

git-get-tar-commit-id — Extract commit ID from an archive created
using git-archive



Synopsis
********

     git get-tar-commit-id < <tarfile>


DESCRIPTION
***********

Acts as a filter, extracting the commit ID stored in archives created by
_git archive_.  It reads only the first 1024 bytes of input, thus its
runtime is not influenced by the size of <tarfile> very much.

   If no commit ID is found, _git get-tar-commit-id_ quietly exists
with a return code of 1.  This can happen if <tarfile> had not been
created using _git archive_ or if the first parameter of _git archive_
had been a tree ID instead of a commit ID or tag.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-grep,  Up: Top

Name
****

git-grep — Print lines matching a pattern



Synopsis
********

     git grep [-a | -text] [-I] [-i | -ignore-case] [-w | -word-regexp]
                [-v | -invert-match] [-h|-H] [-full-name]
                [-E | -extended-regexp] [-G | -basic-regexp]
                [-P | -perl-regexp]
                [-F | -fixed-strings] [-n | -line-number]
                [-l | -files-with-matches] [-L | -files-without-match]
                [(-O | -open-files-in-pager) [<pager>]]
                [-z | -null]
                [-c | -count] [-all-match] [-q | -quiet]
                [-max-depth <depth>]
                [-color[=<when>] | -no-color]
                [-break] [-heading] [-p | -show-function]
                [-A <post-context>] [-B <pre-context>] [-C <context>]
                [-W | -function-context]
                [-f <file>] [-e] <pattern>
                [-and|-or|-not|(|)|-e <pattern>…]
                [ [-exclude-standard] [-cached | -no-index | -untracked] | <tree>…]
                [-] [<pathspec>…]


DESCRIPTION
***********

Look for specified patterns in the tracked files in the work tree, blobs
registered in the index file, or blobs in given tree objects.  Patterns
are lists of one or more search expressions separated by newline
characters.  An empty string as search expression matches all lines.



CONFIGURATION
*************

grep.lineNumber
     If set to true, enable _-n_ option by default.

grep.extendedRegexp
     If set to true, enable _-extended-regexp_ option by default.


OPTIONS
*******

-cached
     Instead of searching tracked files in the working tree, search
     blobs registered in the index file.

-no-index
     Search files in the current directory that is not managed by git.

-untracked
     In addition to searching in the tracked files in the working tree,
     search also in untracked files.

-no-exclude-standard
     Also search in ignored files by not honoring the `.gitignore'
     mechanism. Only useful with `--untracked'.

-exclude-standard
     Do not pay attention to ignored files specified via the
     `.gitignore' mechanism.  Only useful when searching files in the
     current directory with `--no-index'.

-a
-text
     Process binary files as if they were text.

-i
-ignore-case
     Ignore case differences between the patterns and the files.

-I
     Don’t match the pattern in binary files.

-max-depth <depth>
     For each <pathspec> given on command line, descend at most <depth>
     levels of directories. A negative value means no limit.  This
     option is ignored if <pathspec> contains active wildcards.  In
     other words if "a*" matches a directory named "a*", "*" is matched
     literally so -max-depth is still effective.

-w
-word-regexp
     Match the pattern only at word boundary (either begin at the
     beginning of a line, or preceded by a non-word character; end at
     the end of a line or followed by a non-word character).

-v
-invert-match
     Select non-matching lines.

-h
-H
     By default, the command shows the filename for each match.  `-h'
     option is used to suppress this output.  `-H' is there for
     completeness and does not do anything except it overrides `-h'
     given earlier on the command line.

-full-name
     When run from a subdirectory, the command usually outputs paths
     relative to the current directory.  This option forces paths to be
     output relative to the project top directory.

-E
-extended-regexp
-G
-basic-regexp
     Use POSIX extended/basic regexp for patterns.  Default is to use
     basic regexp.

-P
-perl-regexp
     Use Perl-compatible regexp for patterns. Requires libpcre to be
     compiled in.

-F
-fixed-strings
     Use fixed strings for patterns (don’t interpret pattern as a
     regex).

-n
-line-number
     Prefix the line number to matching lines.

-l
-files-with-matches
-name-only
-L
-files-without-match
     Instead of showing every matched line, show only the names of
     files that contain (or do not contain) matches.  For better
     compatibility with _git diff_, `--name-only' is a synonym for
     `--files-with-matches'.

-O [<pager>]
-open-files-in-pager [<pager>]
     Open the matching files in the pager (not the output of _grep_).
     If the pager happens to be "less" or "vi", and the user specified
     only one pattern, the first file is positioned at the first match
     automatically.

-z
-null
     Output \0 instead of the character that normally follows a file
     name.

-c
-count
     Instead of showing every matched line, show the number of lines
     that match.

-color[=<when>]
     Show colored matches.  The value must be always (the default),
     never, or auto.

-no-color
     Turn off match highlighting, even when the configuration file
     gives the default to color output.  Same as `--color=never'.

-break
     Print an empty line between matches from different files.

-heading
     Show the filename above the matches in that file instead of at the
     start of each shown line.

-p
-show-function
     Show the preceding line that contains the function name of the
     match, unless the matching line is a function name itself.  The
     name is determined in the same way as _git diff_ works out patch
     hunk headers (see _Defining a custom hunk-header_ in
     gitattributes(5)).

-<num>
-C <num>
-context <num>
     Show <num> leading and trailing lines, and place a line containing
     `--' between contiguous groups of matches.

-A <num>
-after-context <num>
     Show <num> trailing lines, and place a line containing `--'
     between contiguous groups of matches.

-B <num>
-before-context <num>
     Show <num> leading lines, and place a line containing `--' between
     contiguous groups of matches.

-W
-function-context
     Show the surrounding text from the previous line containing a
     function name up to the one before the next function name,
     effectively showing the whole function in which the match was
     found.

-f <file>
     Read patterns from <file>, one per line.

-e
     The next parameter is the pattern. This option has to be used for
     patterns starting with `-' and should be used in scripts passing
     user input to grep.  Multiple patterns are combined by _or_.

-and
-or
-not
( … )
     Specify how multiple patterns are combined using Boolean
     expressions.  `--or' is the default operator.  `--and' has higher
     precedence than `--or'.  `-e' has to be used for all patterns.

-all-match
     When giving multiple pattern expressions combined with `--or',
     this flag is specified to limit the match to files that have lines
     to match all of them.

-q
-quiet
     Do not output matched lines; instead, exit with status 0 when
     there is a match and with non-zero status when there isn’t.

<tree>…
     Instead of searching tracked files in the working tree, search
     blobs in the given trees.

-
     Signals the end of options; the rest of the parameters are
     <pathspec> limiters.

<pathspec>…
     If given, limit the search to paths matching at least one pattern.
     Both leading paths match and glob(7) patterns are supported.


Examples
********

`git grep 'time_t' -- '*.[ch]''
     Looks for `time_t' in all tracked .c and .h files in the working
     directory and its subdirectories.

`git grep -e '#define' --and \( -e MAX_PATH -e PATH_MAX \)'
     Looks for a line that has `#define' and either `MAX_PATH' or
     `PATH_MAX'.

`git grep --all-match -e NODE -e Unexpected'
     Looks for a line that has `NODE' or `Unexpected' in files that
     have lines that match both.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-gui,  Up: Top

Name
****

git-gui — A portable graphical interface to Git



Synopsis
********

     git gui [<command>] [arguments]


DESCRIPTION
***********

A Tcl/Tk based graphical user interface to Git.  _git gui_ focuses on
allowing users to make changes to their repository by making new
commits, amending existing ones, creating branches, performing local
merges, and fetching/pushing to remote repositories.

   Unlike _gitk_, _git gui_ focuses on commit generation and single
file annotation and does not show project history.  It does however
supply menu actions to start a _gitk_ session from within _git gui_.

   _git gui_ is known to work on all popular UNIX systems, Mac OS X,
and Windows (under both Cygwin and MSYS).  To the extent possible OS
specific user interface guidelines are followed, making _git gui_ a
fairly native interface for users.



COMMANDS
********

blame
     Start a blame viewer on the specified file on the given version
     (or working directory if not specified).

browser
     Start a tree browser showing all files in the specified commit (or
     _HEAD_ by default).  Files selected through the browser are opened
     in the blame viewer.

citool
     Start _git gui_ and arrange to make exactly one commit before
     exiting and returning to the shell.  The interface is limited to
     only commit actions, slightly reducing the application’s startup
     time and simplifying the menubar.

version
     Display the currently running version of _git gui_.


Examples
********

`git gui blame Makefile'
     Show the contents of the file _Makefile_ in the current working
     directory, and provide annotations for both the original author of
     each line, and who moved the line to its current location.  The
     uncommitted file is annotated, and uncommitted changes (if any)
     are explicitly attributed to _Not Yet Committed_.

`git gui blame v0.99.8 Makefile'
     Show the contents of _Makefile_ in revision _v0.99.8_ and provide
     annotations for each line.  Unlike the above example the file is
     read from the object database and not the working directory.

`git gui blame --line=100 Makefile'
     Loads annotations as described above and automatically scrolls the
     view to center on line _100_.

`git gui citool'
     Make one commit and return to the shell when it is complete.  This
     command returns a non-zero exit code if the window was closed in
     any way other than by making a commit.

`git gui citool --amend'
     Automatically enter the _Amend Last Commit_ mode of the interface.

`git gui citool --nocommit'
     Behave as normal citool, but instead of making a commit simply
     terminate with a zero exit code. It still checks that the index
     does not contain any unmerged entries, so you can use it as a GUI
     version of git-mergetool(1)

`git citool'
     Same as `git gui citool' (above).

`git gui browser maint'
     Show a browser for the tree of the _maint_ branch.  Files selected
     in the browser can be viewed with the internal blame viewer.


SEE ALSO
********

gitk(1)
     The git repository browser.  Shows branches, commit history and
     file differences.  gitk is the utility started by _git gui_'s
     Repository Visualize actions.


Other
*****

_git gui_ is actually maintained as an independent project, but stable
versions are distributed as part of the Git suite for the convenience
of end users.

   A _git gui_ development repository can be obtained from:

     git clone git://repo.or.cz/git-gui.git

   or

     git clone http://repo.or.cz/r/git-gui.git

   or browsed online at http://repo.or.cz/w/git-gui.git/
(http://repo.or.cz/w/git-gui.git/).



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-hash-object,  Up: Top

Name
****

git-hash-object — Compute object ID and optionally creates a blob
from a file



Synopsis
********

     git hash-object [-t <type>] [-w] [-path=<file>|-no-filters] [-stdin] [-] <file>…
     git hash-object [-t <type>] [-w] -stdin-paths [-no-filters] < <list-of-paths>


DESCRIPTION
***********

Computes the object ID value for an object with specified type with the
contents of the named file (which can be outside of the work tree), and
optionally writes the resulting object into the object database.
Reports its object ID to its standard output.  This is used by _git
cvsimport_ to update the index without modifying files in the work
tree.  When <type> is not specified, it defaults to "blob".



OPTIONS
*******

-t <type>
     Specify the type (default: "blob").

-w
     Actually write the object into the object database.

-stdin
     Read the object from standard input instead of from a file.

-stdin-paths
     Read file names from stdin instead of from the command-line.

-path
     Hash object as it were located at the given path. The location of
     file does not directly influence on the hash value, but path is
     used to determine what git filters should be applied to the object
     before it can be placed to the object database, and, as result of
     applying filters, the actual blob put into the object database may
     differ from the given file. This option is mainly useful for
     hashing temporary files located outside of the working directory
     or files read from stdin.

-no-filters
     Hash the contents as is, ignoring any input filter that would have
     been chosen by the attributes mechanism, including the end-of-line
     conversion. If the file is read from standard input then this is
     always implied, unless the -path option is given.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-help,  Up: Top

Name
****

git-help — display help information about git



Synopsis
********

     git help [-a|-all|-i|-info|-m|-man|-w|-web] [COMMAND]


DESCRIPTION
***********

With no options and no COMMAND given, the synopsis of the _git_ command
and a list of the most commonly used git commands are printed on the
standard output.

   If the option _-all_ or _-a_ is given, then all available commands
are printed on the standard output.

   If a git command is named, a manual page for that command is brought
up. The _man_ program is used by default for this purpose, but this can
be overridden by other options or configuration variables.

   Note that `git --help ...' is identical to `git help ...' because the
former is internally converted into the latter.



OPTIONS
*******

-a
-all
     Prints all the available commands on the standard output. This
     option supersedes any other option.

-i
-info
     Display manual page for the command in the _info_ format. The
     _info_ program will be used for that purpose.

-m
-man
     Display manual page for the command in the _man_ format. This
     option may be used to override a value set in the _help.format_
     configuration variable.

     By default the _man_ program will be used to display the manual
     page, but the _man.viewer_ configuration variable may be used to
     choose other display programs (see below).

-w
-web
     Display manual page for the command in the _web_ (HTML) format. A
     web browser will be used for that purpose.

     The web browser can be specified using the configuration variable
     _help.browser_, or _web.browser_ if the former is not set. If none
     of these config variables is set, the _git web-browse_ helper
     script (called by _git help_) will pick a suitable default. See
     git-web-browse(1) for more information about this.


CONFIGURATION VARIABLES
***********************



help.format
===========

If no command line option is passed, the _help.format_ configuration
variable will be checked. The following values are supported for this
variable; they make _git help_ behave as their corresponding command
line option:

   * "man" corresponds to _-m|-man_,

   * "info" corresponds to _-i|-info_,

   * "web" or "html" correspond to _-w|-web_.


help.browser, web.browser and browser.<tool>.path
=================================================

The _help.browser_, _web.browser_ and _browser.<tool>.path_ will also
be checked if the _web_ format is chosen (either by command line option
or configuration variable). See _-w|-web_ in the OPTIONS section above
and git-web-browse(1).



man.viewer
==========

The _man.viewer_ config variable will be checked if the _man_ format is
chosen. The following values are currently supported:

   * "man": use the _man_ program as usual,

   * "woman": use _emacsclient_ to launch the "woman" mode in emacs
     (this only works starting with emacsclient versions 22),

   * "konqueror": use _kfmclient_ to open the man page in a new
     konqueror tab (see _Note about konqueror_ below).

   Values for other tools can be used if there is a corresponding
_man.<tool>.cmd_ configuration entry (see below).

   Multiple values may be given to the _man.viewer_ configuration
variable. Their corresponding programs will be tried in the order
listed in the configuration file.

   For example, this configuration:

             [man]
                     viewer = konqueror
                     viewer = woman

   will try to use konqueror first. But this may fail (for example if
DISPLAY is not set) and in that case emacs' woman mode will be tried.

   If everything fails, or if no viewer is configured, the viewer
specified in the GIT_MAN_VIEWER environment variable will be tried.  If
that fails too, the _man_ program will be tried anyway.



man.<tool>.path
===============

You can explicitly provide a full path to your preferred man viewer by
setting the configuration variable _man.<tool>.path_. For example, you
can configure the absolute path to konqueror by setting
_man.konqueror.path_. Otherwise, _git help_ assumes the tool is
available in PATH.



man.<tool>.cmd
==============

When the man viewer, specified by the _man.viewer_ configuration
variables, is not among the supported ones, then the corresponding
_man.<tool>.cmd_ configuration variable will be looked up. If this
variable exists then the specified tool will be treated as a custom
command and a shell eval will be used to run the command with the man
page passed as arguments.



Note about konqueror
====================

When _konqueror_ is specified in the _man.viewer_ configuration
variable, we launch _kfmclient_ to try to open the man page on an
already opened konqueror in a new tab if possible.

   For consistency, we also try such a trick if _man.konqueror.path_ is
set to something like _A_PATH_TO/konqueror_. That means we will try to
launch _A_PATH_TO/kfmclient_ instead.

   If you really want to use _konqueror_, then you can use something
like the following:

             [man]
                     viewer = konq

             [man "konq"]
                     cmd = A_PATH_TO/konqueror


Note about git config -global
=============================

Note that all these configuration variables should probably be set
using the _-global_ flag, for example like this:

     $ git config --global help.format web
     $ git config --global web.browser firefox

   as they are probably more user specific than repository specific.
See git-config(1) for more information about this.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-http-backend,  Up: Top

Name
****

git-http-backend — Server side implementation of Git over HTTP



Synopsis
********

     git http-backend


DESCRIPTION
***********

A simple CGI program to serve the contents of a Git repository to Git
clients accessing the repository over http:// and https:// protocols.
The program supports clients fetching using both the smart HTTP protocol
and the backwards-compatible dumb HTTP protocol, as well as clients
pushing using the smart HTTP protocol.

   It verifies that the directory has the magic file
"git-daemon-export-ok", and it will refuse to export any git directory
that hasn’t explicitly been marked for export this way (unless the
GIT_HTTP_EXPORT_ALL environmental variable is set).

   By default, only the `upload-pack' service is enabled, which serves
_git fetch-pack_ and _git ls-remote_ clients, which are invoked from
_git fetch_, _git pull_, and _git clone_.  If the client is
authenticated, the `receive-pack' service is enabled, which serves _git
send-pack_ clients, which is invoked from _git push_.



SERVICES
********

These services can be enabled/disabled using the per-repository
configuration file:

http.getanyfile
     This serves Git clients older than version 1.6.6 that are unable
     to use the upload pack service.  When enabled, clients are able to
     read any file within the repository, including objects that are no
     longer reachable from a branch but are still present.  It is
     enabled by default, but a repository can disable it by setting
     this configuration item to `false'.

http.uploadpack
     This serves _git fetch-pack_ and _git ls-remote_ clients.  It is
     enabled by default, but a repository can disable it by setting
     this configuration item to `false'.

http.receivepack
     This serves _git send-pack_ clients, allowing push.  It is
     disabled by default for anonymous users, and enabled by default
     for users authenticated by the web server.  It can be disabled by
     setting this item to `false', or enabled for all users, including
     anonymous users, by setting it to `true'.


URL TRANSLATION
***************

To determine the location of the repository on disk, _git http-backend_
concatenates the environment variables PATH_INFO, which is set
automatically by the web server, and GIT_PROJECT_ROOT, which must be set
manually in the web server configuration.  If GIT_PROJECT_ROOT is not
set, _git http-backend_ reads PATH_TRANSLATED, which is also set
automatically by the web server.



EXAMPLES
********

All of the following examples map _http://$hostname/git/foo/bar.git_ to
_/var/www/git/foo/bar.git_.

Apache 2.x
     Ensure mod_cgi, mod_alias, and mod_env are enabled, set
     GIT_PROJECT_ROOT (or DocumentRoot) appropriately, and create a
     ScriptAlias to the CGI:

          SetEnv GIT_PROJECT_ROOT /var/www/git
          SetEnv GIT_HTTP_EXPORT_ALL
          ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/

     To enable anonymous read access but authenticated write access,
     require authorization with a LocationMatch directive:

          <LocationMatch "^/git/.*/git-receive-pack$">
                  AuthType Basic
                  AuthName "Git Access"
                  Require group committers
                  ...
          </LocationMatch>

     To require authentication for both reads and writes, use a Location
     directive around the repository, or one of its parent directories:

          <Location /git/private>
                  AuthType Basic
                  AuthName "Private Git Access"
                  Require group committers
                  ...
          </Location>

     To serve gitweb at the same url, use a ScriptAliasMatch to only
     those URLs that _git http-backend_ can handle, and forward the
     rest to gitweb:

          ScriptAliasMatch \
                  "(?x)^/git/(.*/(HEAD | \
                                  info/refs | \
                                  objects/(info/[^/]+ | \
                                           [0-9a-f]{2}/[0-9a-f]{38} | \
                                           pack/pack-[0-9a-f]{40}\.(pack|idx)) | \
                                  git-(upload|receive)-pack))$" \
                  /usr/libexec/git-core/git-http-backend/$1

          ScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/

     To serve multiple repositories from different gitnamespaces(7) in a
     single repository:

          SetEnvIf Request_URI "^/git/([^/]*)" GIT_NAMESPACE=$1
          ScriptAliasMatch ^/git/[^/]*(.*) /usr/libexec/git-core/git-http-backend/storage.git$1

Accelerated static Apache 2.x
     Similar to the above, but Apache can be used to return static
     files that are stored on disk.  On many systems this may be more
     efficient as Apache can ask the kernel to copy the file contents
     from the file system directly to the network:

          SetEnv GIT_PROJECT_ROOT /var/www/git

          AliasMatch ^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          /var/www/git/$1
          AliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /var/www/git/$1
          ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/

     This can be combined with the gitweb configuration:

          SetEnv GIT_PROJECT_ROOT /var/www/git

          AliasMatch ^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          /var/www/git/$1
          AliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /var/www/git/$1
          ScriptAliasMatch \
                  "(?x)^/git/(.*/(HEAD | \
                                  info/refs | \
                                  objects/info/[^/]+ | \
                                  git-(upload|receive)-pack))$" \
                  /usr/libexec/git-core/git-http-backend/$1
          ScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/



ENVIRONMENT
***********

_git http-backend_ relies upon the CGI environment variables set by the
invoking web server, including:

   * PATH_INFO (if GIT_PROJECT_ROOT is set, otherwise PATH_TRANSLATED)

   * REMOTE_USER

   * REMOTE_ADDR

   * CONTENT_TYPE

   * QUERY_STRING

   * REQUEST_METHOD

   The GIT_HTTP_EXPORT_ALL environmental variable may be passed to
_git-http-backend_ to bypass the check for the "git-daemon-export-ok"
file in each repository before allowing export of that repository.

   The backend process sets GIT_COMMITTER_NAME to _$REMOTE_USER_ and
GIT_COMMITTER_EMAIL to _${REMOTE_USER}@http.${REMOTE_ADDR}_, ensuring
that any reflogs created by _git-receive-pack_ contain some identifying
information of the remote user who performed the push.

   All CGI environment variables are available to each of the hooks
invoked by the _git-receive-pack_.



Author
******

Written by Shawn O. Pearce <spearce@spearce.org
(mailto:spearce@spearce.org)>.



Documentation
*************

Documentation by Shawn O. Pearce <spearce@spearce.org
(mailto:spearce@spearce.org)>.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-http-fetch,  Up: Top

Name
****

git-http-fetch — Download from a remote git repository via HTTP



Synopsis
********

     git http-fetch [-c] [-t] [-a] [-d] [-v] [-w filename] [-recover] [-stdin] <commit> <url>


DESCRIPTION
***********

Downloads a remote git repository via HTTP.

   *NOTE*: use of this command without -a is deprecated.  The -a
behaviour will become the default in a future release.



OPTIONS
*******

commit-id
     Either the hash or the filename under [URL]/refs/ to pull.

-c
     Get the commit objects.

-t
     Get trees associated with the commit objects.

-a
     Get all the objects.

-v
     Report what is downloaded.

-w <filename>
     Writes the commit-id into the filename under
     $GIT_DIR/refs/<filename> on the local end after the transfer is
     complete.

-stdin
     Instead of a commit id on the command line (which is not expected
     in this case), _git http-fetch_ expects lines on stdin in the
     format

          <commit-id>['\t'<filename-as-in--w>]

-recover
     Verify that everything reachable from target is fetched.  Used
     after an earlier fetch is interrupted.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-http-push,  Up: Top

Name
****

git-http-push — Push objects over HTTP/DAV to another repository



Synopsis
********

     git http-push [-all] [-dry-run] [-force] [-verbose] <url> <ref> [<ref>…]


DESCRIPTION
***********

Sends missing objects to remote repository, and updates the remote
branch.

   *NOTE*: This command is temporarily disabled if your libcurl is
older than 7.16, as the combination has been reported not to work and
sometimes corrupts repository.



OPTIONS
*******

-all
     Do not assume that the remote repository is complete in its
     current state, and verify all objects in the entire local ref’s
     history exist in the remote repository.

-force
     Usually, the command refuses to update a remote ref that is not an
     ancestor of the local ref used to overwrite it.  This flag
     disables the check.  What this means is that the remote repository
     can lose commits; use it with care.

-dry-run
     Do everything except actually send the updates.

-verbose
     Report the list of objects being walked locally and the list of
     objects successfully sent to the remote repository.

-d
-D
     Remove <ref> from remote repository.  The specified branch cannot
     be the remote HEAD.  If -d is specified the following other
     conditions must also be met:

        * Remote HEAD must resolve to an object that exists locally

        * Specified branch resolves to an object that exists locally

        * Specified branch is an ancestor of the remote HEAD

<ref>…
     The remote refs to update.


Specifying the Refs
*******************

A _<ref>_ specification can be either a single pattern, or a pair of
such patterns separated by a colon ":" (this means that a ref name
cannot have a colon in it).  A single pattern _<name>_ is just a
shorthand for _<name>:<name>_.

   Each pattern pair consists of the source side (before the colon) and
the destination side (after the colon).  The ref to be pushed is
determined by finding a match that matches the source side, and where
it is pushed is determined by using the destination side.

   * It is an error if <src> does not match exactly one of the local
     refs.

   * If <dst> does not match any remote ref, either

        * it has to start with "refs/"; <dst> is used as the
          destination literally in this case.

        * <src> == <dst> and the ref that matched the <src> must not
          exist in the set of remote refs; the ref matched <src>
          locally is used as the name of the destination.

   Without _-force_, the <src> ref is stored at the remote only if
<dst> does not exist, or <dst> is a proper subset (i.e. an ancestor) of
<src>.  This check, known as "fast-forward check", is performed in
order to avoid accidentally overwriting the remote ref and lose other
peoples' commits from there.

   With _-force_, the fast-forward check is disabled for all refs.

   Optionally, a <ref> parameter can be prefixed with a plus _+_ sign
to disable the fast-forward check only on that ref.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-imap-send,  Up: Top

Name
****

git-imap-send — Send a collection of patches from stdin to an IMAP
folder



Synopsis
********

     git imap-send


DESCRIPTION
***********

This command uploads a mailbox generated with _git format-patch_ into
an IMAP drafts folder.  This allows patches to be sent as other email
is when using mail clients that cannot read mailbox files directly. The
command also works with any general mailbox in which emails have the
fields "From", "Date", and "Subject" in that order.

   Typical usage is something like:

   git format-patch -signoff -stdout -attach origin | git imap-send



CONFIGURATION
*************

To use the tool, imap.folder and either imap.tunnel or imap.host must
be set to appropriate values.



Variables
=========

imap.folder
     The folder to drop the mails into, which is typically the Drafts
     folder. For example: "INBOX.Drafts", "INBOX/Drafts" or
     "[Gmail]/Drafts". Required to use imap-send.

imap.tunnel
     Command used to setup a tunnel to the IMAP server through which
     commands will be piped instead of using a direct network connection
     to the server. Required when imap.host is not set to use imap-send.

imap.host
     A URL identifying the server. Use a `imap://' prefix for non-secure
     connections and a `imaps://' prefix for secure connections.
     Ignored when imap.tunnel is set, but required to use imap-send
     otherwise.

imap.user
     The username to use when logging in to the server.

imap.pass
     The password to use when logging in to the server.

imap.port
     An integer port number to connect to on the server.  Defaults to
     143 for imap:// hosts and 993 for imaps:// hosts.  Ignored when
     imap.tunnel is set.

imap.sslverify
     A boolean to enable/disable verification of the server certificate
     used by the SSL/TLS connection. Default is `true'. Ignored when
     imap.tunnel is set.

imap.preformattedHTML
     A boolean to enable/disable the use of html encoding when sending
     a patch.  An html encoded patch will be bracketed with <pre> and
     have a content type of text/html.  Ironically, enabling this
     option causes Thunderbird to send the patch as a plain/text,
     format=fixed email.  Default is `false'.

imap.authMethod
     Specify authenticate method for authentication with IMAP server.
     Current supported method is _CRAM-MD5_ only.


Examples
========

Using tunnel mode:

     [imap]
         folder = "INBOX.Drafts"
         tunnel = "ssh -q -C user@example.com /usr/bin/imapd ./Maildir 2> /dev/null"

   Using direct mode:

     [imap]
         folder = "INBOX.Drafts"
         host = imap://imap.example.com
         user = bob
         pass = p4ssw0rd

   Using direct mode with SSL:

     [imap]
         folder = "INBOX.Drafts"
         host = imaps://imap.example.com
         user = bob
         pass = p4ssw0rd
         port = 123
         sslverify = false


EXAMPLE
*******

To submit patches using GMail’s IMAP interface, first, edit your
~/.gitconfig to specify your account settings:

     [imap]
             folder = "[Gmail]/Drafts"
             host = imaps://imap.gmail.com
             user = user@gmail.com
             port = 993
             sslverify = false

   You might need to instead use: folder = "[Google Mail]/Drafts" if
you get an error that the "Folder doesn’t exist".

   Once the commits are ready to be sent, run the following command:

     $ git format-patch --cover-letter -M --stdout origin/master | git imap-send

   Just make sure to disable line wrapping in the email client
(GMail’s web interface will wrap lines no matter what, so you need to
use a real IMAP client).



CAUTION
*******

It is still your responsibility to make sure that the email message
sent by your email program meets the standards of your project.  Many
projects do not like patches to be attached.  Some mail agents will
transform patches (e.g. wrap lines, send them as format=flowed) in ways
that make them fail.  You will get angry flames ridiculing you if you
don’t check this.

   Thunderbird in particular is known to be problematic.  Thunderbird
users may wish to visit this web page for more information:
http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email
(http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email)



SEE ALSO
********

git-format-patch(1), git-send-email(1), mbox(5)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-index-pack,  Up: Top

Name
****

git-index-pack — Build pack index file for an existing packed archive



Synopsis
********

     git index-pack [-v] [-o <index-file>] <pack-file>
     git index-pack -stdin [-fix-thin] [-keep] [-v] [-o <index-file>]
                      [<pack-file>]


DESCRIPTION
***********

Reads a packed archive (.pack) from the specified file, and builds a
pack index file (.idx) for it.  The packed archive together with the
pack index can then be placed in the objects/pack/ directory of a git
repository.



OPTIONS
*******

-v
     Be verbose about what is going on, including progress status.

-o <index-file>
     Write the generated pack index into the specified file.  Without
     this option the name of pack index file is constructed from the
     name of packed archive file by replacing .pack with .idx (and the
     program fails if the name of packed archive does not end with
     .pack).

-stdin
     When this flag is provided, the pack is read from stdin instead
     and a copy is then written to <pack-file>. If <pack-file> is not
     specified, the pack is written to objects/pack/ directory of the
     current git repository with a default name determined from the
     pack content.  If <pack-file> is not specified consider using
     -keep to prevent a race condition between this process and _git
     repack_.

-fix-thin
     Fix a "thin" pack produced by `git pack-objects --thin' (see
     git-pack-objects(1) for details) by adding the excluded objects
     the deltified objects are based on to the pack. This option only
     makes sense in conjunction with -stdin.

-keep
     Before moving the index into its final destination create an empty
     .keep file for the associated pack file.  This option is usually
     necessary with -stdin to prevent a simultaneous _git repack_
     process from deleting the newly constructed pack and index before
     refs can be updated to use objects contained in the pack.

-keep=<msg>
     Like -keep create a .keep file before moving the index into its
     final destination, but rather than creating an empty file place
     _<msg>_ followed by an LF into the .keep file.  The _<msg>_
     message can later be searched for within all .keep files to locate
     any which have outlived their usefulness.

-index-version=<version>[,<offset>]
     This is intended to be used by the test suite only. It allows to
     force the version for the generated pack index, and to force
     64-bit index entries on objects located above the given offset.

-strict
     Die, if the pack contains broken objects or links.

-threads=<n>
     Specifies the number of threads to spawn when resolving deltas.
     This requires that index-pack be compiled with pthreads otherwise
     this option is ignored with a warning.  This is meant to reduce
     packing time on multiprocessor machines. The required amount of
     memory for the delta search window is however multiplied by the
     number of threads.  Specifying 0 will cause git to auto-detect the
     number of CPU’s and use maximum 3 threads.


Note
****

Once the index has been created, the list of object names is sorted and
the SHA1 hash of that list is printed to stdout. If -stdin was also
used then this is prefixed by either "pack\t", or "keep\t" if a new
.keep file was successfully created. This is useful to remove a .keep
file used as a lock to prevent the race with _git repack_ mentioned
above.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-init-db,  Up: Top

Name
****

git-init-db — Creates an empty git repository



Synopsis
********

     git init-db [-q | -quiet] [-bare] [-template=<template_directory>] [-separate-git-dir <git dir>] [-shared[=<permissions>]]


DESCRIPTION
***********

This is a synonym for git-init(1).  Please refer to the documentation
of that command.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-init,  Up: Top

Name
****

git-init — Create an empty git repository or reinitialize an existing
one



Synopsis
********

     git init [-q | -quiet] [-bare] [-template=<template_directory>]
               [-separate-git-dir <git dir>]
               [-shared[=<permissions>]] [directory]


DESCRIPTION
***********

This command creates an empty git repository - basically a `.git'
directory with subdirectories for `objects', `refs/heads', `refs/tags',
and template files.  An initial `HEAD' file that references the HEAD of
the master branch is also created.

   If the `$GIT_DIR' environment variable is set then it specifies a
path to use instead of `./.git' for the base of the repository.

   If the object storage directory is specified via the
`$GIT_OBJECT_DIRECTORY' environment variable then the sha1 directories
are created underneath - otherwise the default `$GIT_DIR/objects'
directory is used.

   Running _git init_ in an existing repository is safe. It will not
overwrite things that are already there. The primary reason for
rerunning _git init_ is to pick up newly added templates (or to move
the repository to another place if -separate-git-dir is given).



OPTIONS
*******

-q
-quiet
     Only print error and warning messages, all other output will be
     suppressed.

-bare
     Create a bare repository. If GIT_DIR environment is not set, it is
     set to the current working directory.

-template=<template_directory>
     Specify the directory from which templates will be used.  (See the
     "TEMPLATE DIRECTORY" section below.)

-separate-git-dir=<git dir>
     Instead of initializing the repository where it is supposed to be,
     place a filesytem-agnostic git symbolic link there, pointing to the
     specified git path, and initialize a git repository at the path.
     The result is git repository can be separated from working tree.
     If this is reinitialization, the repository will be moved to the
     specified path.

-shared[=(false|true|umask|group|all|world|everybody|0xxx)]
     Specify that the git repository is to be shared amongst several
     users.  This allows users belonging to the same group to push into
     that repository.  When specified, the config variable
     "core.sharedRepository" is set so that files and directories under
     `$GIT_DIR' are created with the requested permissions.  When not
     specified, git will use permissions reported by umask(2).

   The option can have the following values, defaulting to _group_ if
no value is given:

   * _umask_ (or _false_): Use permissions reported by umask(2). The
     default, when `--shared' is not specified.

   * _group_ (or _true_): Make the repository group-writable, (and
     g+sx, since the git group may be not the primary group of all
     users).  This is used to loosen the permissions of an otherwise
     safe umask(2) value.  Note that the umask still applies to the
     other permission bits (e.g. if umask is _0022_, using _group_ will
     not remove read privileges from other (non-group) users). See
     _0xxx_ for how to exactly specify the repository permissions.

   * _all_ (or _world_ or _everybody_): Same as _group_, but make the
     repository readable by all users.

   * _0xxx_: _0xxx_ is an octal number and each file will have mode
     _0xxx_.  _0xxx_ will override users' umask(2) value (and not only
     loosen permissions as _group_ and _all_ does). _0640_ will create
     a repository which is group-readable, but not group-writable or
     accessible to others. _0660_ will create a repo that is readable
     and writable to the current user and group, but inaccessible to
     others.

   By default, the configuration flag receive.denyNonFastForwards is
enabled in shared repositories, so that you cannot force a non
fast-forwarding push into it.

   If you name a (possibly non-existent) directory at the end of the
command line, the command is run inside the directory (possibly after
creating it).



TEMPLATE DIRECTORY
******************

The template directory contains files and directories that will be
copied to the `$GIT_DIR' after it is created.

   The template directory used will (in order):

   * The argument given with the `--template' option.

   * The contents of the `$GIT_TEMPLATE_DIR' environment variable.

   * The `init.templatedir' configuration variable.

   * The default template directory: `/usr/share/git-core/templates'.

   The default template directory includes some directory structure,
some suggested "exclude patterns", and copies of sample "hook" files.
The suggested patterns and hook files are all modifiable and extensible.



EXAMPLES
********

Start a new git repository for an existing code base
          $ cd /path/to/my/codebase
          $ git init      (1)
          $ git add .     (2)

    *note (1): CO1-1.
          prepare /path/to/my/codebase/.git directory

    *note (2): CO1-2.
          add all existing file to the index


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-instaweb,  Up: Top

Name
****

git-instaweb — Instantly browse your working repository in gitweb



Synopsis
********

     git instaweb [-local] [-httpd=<httpd>] [-port=<port>]
                    [-browser=<browser>]
     git instaweb [-start] [-stop] [-restart]


DESCRIPTION
***********

A simple script to set up `gitweb' and a web server for browsing the
local repository.



OPTIONS
*******

-l
-local
     Only bind the web server to the local IP (127.0.0.1).

-d
-httpd
     The HTTP daemon command-line that will be executed.  Command-line
     options may be specified here, and the configuration file will be
     added at the end of the command-line.  Currently apache2,
     lighttpd, mongoose, plackup and webrick are supported.  (Default:
     lighttpd)

-m
-module-path
     The module path (only needed if httpd is Apache).  (Default:
     /usr/lib/apache2/modules)

-p
-port
     The port number to bind the httpd to.  (Default: 1234)

-b
-browser
     The web browser that should be used to view the gitweb page. This
     will be passed to the _git web-browse_ helper script along with
     the URL of the gitweb instance. See git-web-browse(1) for more
     information about this. If the script fails, the URL will be
     printed to stdout.

start
-start
     Start the httpd instance and exit.  Regenerate configuration files
     as necessary for spawning a new instance.

stop
-stop
     Stop the httpd instance and exit.  This does not generate any of
     the configuration files for spawning a new instance, nor does it
     close the browser.

restart
-restart
     Restart the httpd instance and exit.  Regenerate configuration
     files as necessary for spawning a new instance.


CONFIGURATION
*************

You may specify configuration in your .git/config

     [instaweb]
             local = true
             httpd = apache2 -f
             port = 4321
             browser = konqueror
             modulepath = /usr/lib/apache2/modules

   If the configuration variable _instaweb.browser_ is not set,
_web.browser_ will be used instead if it is defined. See
git-web-browse(1) for more information about this.



SEE ALSO
********

gitweb(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-log,  Up: Top

Name
****

git-log — Show commit logs



Synopsis
********

     git log [<options>] [<since>..<until>] [[-] <path>…]


DESCRIPTION
***********

Shows the commit logs.

   The command takes options applicable to the _git rev-list_ command
to control what is shown and how, and options applicable to the _git
diff-*_ commands to control how the changes each commit introduces are
shown.



OPTIONS
*******

-<n>
     Limits the number of commits to show.  Note that this is a commit
     limiting option, see below.

<since>..<until>
     Show only commits between the named two commits.  When either
     <since> or <until> is omitted, it defaults to `HEAD', i.e. the tip
     of the current branch.  For a more complete list of ways to spell
     <since> and <until>, see gitrevisions(7).

-follow
     Continue listing the history of a file beyond renames (works only
     for a single file).

-no-decorate
-decorate[=short|full|no]
     Print out the ref names of any commits that are shown. If _short_
     is specified, the ref name prefixes _refs/heads/_, _refs/tags/_ and
     _refs/remotes/_ will not be printed. If _full_ is specified, the
     full ref name (including prefix) will be printed. The default
     option is _short_.

-source
     Print out the ref name given on the command line by which each
     commit was reached.

-full-diff
     Without this flag, "git log -p <path>…" shows commits that touch
     the specified paths, and diffs about the same specified paths.
     With this, the full diff is shown for commits that touch the
     specified paths; this means that "<path>…" limits only commits,
     and doesn’t limit diff for those commits.

     Note that this affects all diff-based output types, e.g. those
     produced by -stat etc.

-log-size
     Before the log message print out its size in bytes. Intended
     mainly for porcelain tools consumption. If git is unable to
     produce a valid value size is set to zero.  Note that only message
     is considered, if also a diff is shown its size is not included.

[-] <path>…
     Show only commits that are enough to explain how the files that
     match the specified paths came to be.  See "History
     Simplification" below for details and other simplification modes.

     To prevent confusion with options and branch names, paths may need
     to be prefixed with "- " to separate them from options or refnames.


Commit Limiting
===============

Besides specifying a range of commits that should be listed using the
special notations explained in the description, additional commit
limiting may be applied. Note that they are applied before commit
ordering and formatting options, such as _-reverse_.

-n _number_
-max-count=<number>
     Limit the number of commits to output.

-skip=<number>
     Skip _number_ commits before starting to show the commit output.

-since=<date>
-after=<date>
     Show commits more recent than a specific date.

-until=<date>
-before=<date>
     Show commits older than a specific date.

-author=<pattern>
-committer=<pattern>
     Limit the commits output to ones with author/committer header
     lines that match the specified pattern (regular expression).

-grep=<pattern>
     Limit the commits output to ones with log message that matches the
     specified pattern (regular expression).

-all-match
     Limit the commits output to ones that match all given -grep,
     -author and -committer instead of ones that match at least one.

-i
-regexp-ignore-case
     Match the regexp limiting patterns without regard to letters case.

-E
-extended-regexp
     Consider the limiting patterns to be extended regular expressions
     instead of the default basic regular expressions.

-F
-fixed-strings
     Consider the limiting patterns to be fixed strings (don’t
     interpret pattern as a regular expression).

-remove-empty
     Stop when a given path disappears from the tree.

-merges
     Print only merge commits. This is exactly the same as
     `--min-parents=2'.

-no-merges
     Do not print commits with more than one parent. This is exactly
     the same as `--max-parents=1'.

-min-parents=<number>
-max-parents=<number>
-no-min-parents
-no-max-parents
     Show only commits which have at least (or at most) that many
     commits. In particular, `--max-parents=1' is the same as
     `--no-merges', `--min-parents=2' is the same as `--merges'.
     `--max-parents=0' gives all root commits and `--min-parents=3' all
     octopus merges.

     `--no-min-parents' and `--no-max-parents' reset these limits (to
     no limit) again.  Equivalent forms are `--min-parents=0' (any
     commit has 0 or more parents) and `--max-parents=-1' (negative
     numbers denote no upper limit).

-first-parent
     Follow only the first parent commit upon seeing a merge commit.
     This option can give a better overview when viewing the evolution
     of a particular topic branch, because merges into a topic branch
     tend to be only about adjusting to updated upstream from time to
     time, and this option allows you to ignore the individual commits
     brought in to your history by such a merge.

-not
     Reverses the meaning of the _^_ prefix (or lack thereof) for all
     following revision specifiers, up to the next _-not_.

-all
     Pretend as if all the refs in `refs/' are listed on the command
     line as _<commit>_.

-branches[=<pattern>]
     Pretend as if all the refs in `refs/heads' are listed on the
     command line as _<commit>_. If _<pattern>_ is given, limit
     branches to ones matching given shell glob. If pattern lacks _?_,
     _*_, or _[_, _/*_ at the end is implied.

-tags[=<pattern>]
     Pretend as if all the refs in `refs/tags' are listed on the
     command line as _<commit>_. If _<pattern>_ is given, limit tags to
     ones matching given shell glob. If pattern lacks _?_, _*_, or _[_,
     _/*_ at the end is implied.

-remotes[=<pattern>]
     Pretend as if all the refs in `refs/remotes' are listed on the
     command line as _<commit>_. If _<pattern>_ is given, limit
     remote-tracking branches to ones matching given shell glob.  If
     pattern lacks _?_, _*_, or _[_, _/*_ at the end is implied.

-glob=<glob-pattern>
     Pretend as if all the refs matching shell glob _<glob-pattern>_
     are listed on the command line as _<commit>_. Leading _refs/_, is
     automatically prepended if missing. If pattern lacks _?_, _*_, or
     _[_, _/*_ at the end is implied.

-ignore-missing
     Upon seeing an invalid object name in the input, pretend as if the
     bad input was not given.

-bisect
     Pretend as if the bad bisection ref `refs/bisect/bad' was listed
     and as if it was followed by `--not' and the good bisection refs
     `refs/bisect/good-*' on the command line.

-stdin
     In addition to the _<commit>_ listed on the command line, read
     them from the standard input. If a _-_ separator is seen, stop
     reading commits and start reading paths to limit the result.

-cherry-mark
     Like `--cherry-pick' (see below) but mark equivalent commits with
     `=' rather than omitting them, and inequivalent ones with `+'.

-cherry-pick
     Omit any commit that introduces the same change as another commit
     on the "other side" when the set of commits are limited with
     symmetric difference.

     For example, if you have two branches, `A' and `B', a usual way to
     list all commits on only one side of them is with `--left-right'
     (see the example below in the description of the `--left-right'
     option).  It however shows the commits that were cherry-picked
     from the other branch (for example, "3rd on b" may be cherry-picked
     from branch A).  With this option, such pairs of commits are
     excluded from the output.

-left-only
-right-only
     List only commits on the respective side of a symmetric range,
     i.e. only those which would be marked `<' resp. `>' by
     `--left-right'.

     For example, `--cherry-pick --right-only A...B' omits those
     commits from `B' which are in `A' or are patch-equivalent to a
     commit in `A'. In other words, this lists the `+' commits from
     `git cherry A B'.  More precisely, `--cherry-pick --right-only
     --no-merges' gives the exact list.

-cherry
     A synonym for `--right-only --cherry-mark --no-merges'; useful to
     limit the output to the commits on our side and mark those that
     have been applied to the other side of a forked history with `git
     log --cherry upstream...mybranch', similar to `git cherry upstream
     mybranch'.

-g
-walk-reflogs
     Instead of walking the commit ancestry chain, walk reflog entries
     from the most recent one to older ones.  When this option is used
     you cannot specify commits to exclude (that is, _^commit_,
     _commit1..commit2_, nor _commit1...commit2_ notations cannot be
     used).

     With _-pretty_ format other than oneline (for obvious reasons),
     this causes the output to have two extra lines of information
     taken from the reflog.  By default, _commit@{Nth}_ notation is
     used in the output.  When the starting commit is specified as
     _commit@{now}_, output also uses _commit@{timestamp}_ notation
     instead.  Under _-pretty=oneline_, the commit message is prefixed
     with this information on the same line.  This option cannot be
     combined with _-reverse_.  See also git-reflog(1).

-merge
     After a failed merge, show refs that touch files having a conflict
     and don’t exist on all heads to merge.

-boundary
     Output uninteresting commits at the boundary, which are usually
     not shown.


History Simplification
======================

Sometimes you are only interested in parts of the history, for example
the commits modifying a particular <path>. But there are two parts of
_History Simplification_, one part is selecting the commits and the
other is how to do it, as there are various strategies to simplify the
history.

   The following options select the commits to be shown:

<paths>
     Commits modifying the given <paths> are selected.

-simplify-by-decoration
     Commits that are referred by some branch or tag are selected.

   Note that extra commits can be shown to give a meaningful history.

   The following options affect the way the simplification is performed:

Default mode
     Simplifies the history to the simplest history explaining the
     final state of the tree. Simplest because it prunes some side
     branches if the end result is the same (i.e. merging branches with
     the same content)

-full-history
     Same as the default mode, but does not prune some history.

-dense
     Only the selected commits are shown, plus some to have a
     meaningful history.

-sparse
     All commits in the simplified history are shown.

-simplify-merges
     Additional option to _-full-history_ to remove some needless
     merges from the resulting history, as there are no selected
     commits contributing to this merge.

-ancestry-path
     When given a range of commits to display (e.g. _commit1..commit2_
     or _commit2 ^commit1_), only display commits that exist directly
     on the ancestry chain between the _commit1_ and _commit2_, i.e.
     commits that are both descendants of _commit1_, and ancestors of
     _commit2_.

   A more detailed explanation follows.

   Suppose you specified `foo' as the <paths>.  We shall call commits
that modify `foo' !TREESAME, and the rest TREESAME.  (In a diff
filtered for `foo', they look different and equal, respectively.)

   In the following, we will always refer to the same example history to
illustrate the differences between simplification settings.  We assume
that you are filtering for a file `foo' in this commit graph:

               .-A---M---N---O---P
              /     /   /   /   /
             I     B   C   D   E
              \   /   /   /   /
               `-------------'

   The horizontal line of history A--P is taken to be the first parent
of each merge.  The commits are:

   * `I' is the initial commit, in which `foo' exists with contents
     "asdf", and a file `quux' exists with contents "quux".  Initial
     commits are compared to an empty tree, so `I' is !TREESAME.

   * In `A', `foo' contains just "foo".

   * `B' contains the same change as `A'.  Its merge `M' is trivial and
     hence TREESAME to all parents.

   * `C' does not change `foo', but its merge `N' changes it to
     "foobar", so it is not TREESAME to any parent.

   * `D' sets `foo' to "baz".  Its merge `O' combines the strings from
     `N' and `D' to "foobarbaz"; i.e., it is not TREESAME to any parent.

   * `E' changes `quux' to "xyzzy", and its merge `P' combines the
     strings to "quux xyzzy".  Despite appearing interesting, `P' is
     TREESAME to all parents.

   _rev-list_ walks backwards through history, including or excluding
commits based on whether _-full-history_ and/or parent rewriting (via
_-parents_ or _-children_) are used.  The following settings are
available.

Default mode
     Commits are included if they are not TREESAME to any parent
     (though this can be changed, see _-sparse_ below).  If the commit
     was a merge, and it was TREESAME to one parent, follow only that
     parent.  (Even if there are several TREESAME parents, follow only
     one of them.)  Otherwise, follow all parents.

     This results in:

                    .-A---N---O
                   /     /   /
                  I---------D

     Note how the rule to only follow the TREESAME parent, if one is
     available, removed `B' from consideration entirely.  `C' was
     considered via `N', but is TREESAME.  Root commits are compared to
     an empty tree, so `I' is !TREESAME.

     Parent/child relations are only visible with -parents, but that
     does not affect the commits selected in default mode, so we have
     shown the parent lines.

-full-history without parent rewriting
     This mode differs from the default in one point: always follow all
     parents of a merge, even if it is TREESAME to one of them.  Even
     if more than one side of the merge has commits that are included,
     this does not imply that the merge itself is!  In the example, we
     get

                  I  A  B  N  D  O

     `P' and `M' were excluded because they are TREESAME to a parent.
     `E', `C' and `B' were all walked, but only `B' was !TREESAME, so
     the others do not appear.

     Note that without parent rewriting, it is not really possible to
     talk about the parent/child relationships between the commits, so
     we show them disconnected.

-full-history with parent rewriting
     Ordinary commits are only included if they are !TREESAME (though
     this can be changed, see _-sparse_ below).

     Merges are always included.  However, their parent list is
     rewritten: Along each parent, prune away commits that are not
     included themselves.  This results in

                    .-A---M---N---O---P
                   /     /   /   /   /
                  I     B   /   D   /
                   \   /   /   /   /
                    `-------------'

     Compare to _-full-history_ without rewriting above.  Note that `E'
     was pruned away because it is TREESAME, but the parent list of P
     was rewritten to contain `E''s parent `I'.  The same happened for
     `C' and `N'.  Note also that `P' was included despite being
     TREESAME.

   In addition to the above settings, you can change whether TREESAME
affects inclusion:

-dense
     Commits that are walked are included if they are not TREESAME to
     any parent.

-sparse
     All commits that are walked are included.

     Note that without _-full-history_, this still simplifies merges: if
     one of the parents is TREESAME, we follow only that one, so the
     other sides of the merge are never walked.

-simplify-merges
     First, build a history graph in the same way that _-full-history_
     with parent rewriting does (see above).

     Then simplify each commit `C' to its replacement `C'' in the final
     history according to the following rules:

        * Set `C'' to `C'.

        * Replace each parent `P' of `C'' with its simplification `P''.
          In the process, drop parents that are ancestors of other
          parents, and remove duplicates.

        * If after this parent rewriting, `C'' is a root or merge
          commit (has zero or >1 parents), a boundary commit, or
          !TREESAME, it remains.  Otherwise, it is replaced with its
          only parent.

     The effect of this is best shown by way of comparing to
     _-full-history_ with parent rewriting.  The example turns into:

                    .-A---M---N---O
                   /     /       /
                  I     B       D
                   \   /       /
                    `---------'

     Note the major differences in `N' and `P' over _-full-history_:

        * `N''s parent list had `I' removed, because it is an ancestor
          of the other parent `M'.  Still, `N' remained because it is
          !TREESAME.

        * `P''s parent list similarly had `I' removed.  `P' was then
          removed completely, because it had one parent and is TREESAME.

   Finally, there is a fifth simplification mode available:

-ancestry-path
     Limit the displayed commits to those directly on the ancestry
     chain between the "from" and "to" commits in the given commit
     range. I.e. only display commits that are ancestor of the "to"
     commit, and descendants of the "from" commit.

     As an example use case, consider the following commit history:

                      D---E-------F
                     /     \       \
                    B---C---G---H---I---J
                   /                     \
                  A-------K---------------L--M

     A regular _D..M_ computes the set of commits that are ancestors of
     `M', but excludes the ones that are ancestors of `D'. This is
     useful to see what happened to the history leading to `M' since
     `D', in the sense that "what does `M' have that did not exist in
     `D'". The result in this example would be all the commits, except
     `A' and `B' (and `D' itself, of course).

     When we want to find out what commits in `M' are contaminated with
     the bug introduced by `D' and need fixing, however, we might want
     to view only the subset of _D..M_ that are actually descendants of
     `D', i.e.  excluding `C' and `K'. This is exactly what the
     _-ancestry-path_ option does. Applied to the _D..M_ range, it
     results in:

                          E-------F
                           \       \
                            G---H---I---J
                                         \
                                          L--M


   The _-simplify-by-decoration_ option allows you to view only the big
picture of the topology of the history, by omitting commits that are
not referenced by tags.  Commits are marked as !TREESAME (in other
words, kept after history simplification rules described above) if (1)
they are referenced by tags, or (2) they change the contents of the
paths given on the command line.  All other commits are marked as
TREESAME (subject to be simplified away).



Commit Ordering
===============

By default, the commits are shown in reverse chronological order.

-date-order
     Show no parents before all of its children are shown, but
     otherwise show commits in the commit timestamp order.

-topo-order
     Show no parents before all of its children are shown, and avoid
     showing commits on multiple lines of history intermixed.

     For example, in a commit history like this:

              ---1----2----4----7
                  \              \
                   3----5----6----8---

     where the numbers denote the order of commit timestamps, `git
     rev-list' and friends with `--date-order' show the commits in the
     timestamp order: 8 7 6 5 4 3 2 1.

     With `--topo-order', they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6
     5 3 1); some older commits are shown before newer ones in order to
     avoid showing the commits from two parallel development track mixed
     together.

-reverse
     Output the commits in reverse order.  Cannot be combined with
     _-walk-reflogs_.


Object Traversal
================

These options are mostly targeted for packing of git repositories.

-objects
     Print the object IDs of any object referenced by the listed
     commits.  _-objects foo ^bar_ thus means "send me all object IDs
     which I need to download if I have the commit object _bar_, but
     not _foo_".

-objects-edge
     Similar to _-objects_, but also print the IDs of excluded commits
     prefixed with a "-" character.  This is used by
     git-pack-objects(1) to build "thin" pack, which records objects in
     deltified form based on objects contained in these excluded
     commits to reduce network traffic.

-unpacked
     Only useful with _-objects_; print the object IDs that are not in
     packs.

-no-walk[=(sorted|unsorted)]
     Only show the given commits, but do not traverse their ancestors.
     This has no effect if a range is specified. If the argument
     "unsorted" is given, the commits are show in the order they were
     given on the command line. Otherwise (if "sorted" or no argument
     was given), the commits are show in reverse chronological order by
     commit time.

-do-walk
     Overrides a previous -no-walk.


Commit Formatting
=================

-pretty[=<format>]
-format=<format>
     Pretty-print the contents of the commit logs in a given format,
     where _<format>_ can be one of _oneline_, _short_, _medium_,
     _full_, _fuller_, _email_, _raw_ and _format:<string>_.  See the
     "PRETTY FORMATS" section for some additional details for each
     format.  When omitted, the format defaults to _medium_.

     Note: you can specify the default pretty format in the repository
     configuration (see git-config(1)).

-abbrev-commit
     Instead of showing the full 40-byte hexadecimal commit object
     name, show only a partial prefix.  Non default number of digits
     can be specified with "-abbrev=<n>" (which also modifies diff
     output, if it is displayed).

     This should make "-pretty=oneline" a whole lot more readable for
     people using 80-column terminals.

-no-abbrev-commit
     Show the full 40-byte hexadecimal commit object name. This negates
     `--abbrev-commit' and those options which imply it such as
     "-oneline". It also overrides the _log.abbrevCommit_ variable.

-oneline
     This is a shorthand for "-pretty=oneline -abbrev-commit" used
     together.

-encoding[=<encoding>]
     The commit objects record the encoding used for the log message in
     their encoding header; this option can be used to tell the command
     to re-code the commit log message in the encoding preferred by the
     user.  For non plumbing commands this defaults to UTF-8.

-notes[=<ref>]
     Show the notes (see git-notes(1)) that annotate the commit, when
     showing the commit log message.  This is the default for `git
     log', `git show' and `git whatchanged' commands when there is no
     `--pretty', `--format' nor `--oneline' option given on the command
     line.

     By default, the notes shown are from the notes refs listed in the
     _core.notesRef_ and _notes.displayRef_ variables (or corresponding
     environment overrides). See git-config(1) for more details.

     With an optional _<ref>_ argument, show this notes ref instead of
     the default notes ref(s). The ref is taken to be in `refs/notes/'
     if it is not qualified.

     Multiple -notes options can be combined to control which notes are
     being displayed. Examples: "-notes=foo" will show only notes from
     "refs/notes/foo"; "-notes=foo -notes" will show both notes from
     "refs/notes/foo" and from the default notes ref(s).

-no-notes
     Do not show notes. This negates the above `--notes' option, by
     resetting the list of notes refs from which notes are shown.
     Options are parsed in the order given on the command line, so e.g.
     "-notes -notes=foo -no-notes -notes=bar" will only show notes from
     "refs/notes/bar".

-show-notes[=<ref>]
-[no-]standard-notes
     These options are deprecated. Use the above -notes/-no-notes
     options instead.

-relative-date
     Synonym for `--date=relative'.

-date=(relative|local|default|iso|rfc|short|raw)
     Only takes effect for dates shown in human-readable format, such
     as when using "-pretty". `log.date' config variable sets a default
     value for log command’s -date option.

     `--date=relative' shows dates relative to the current time, e.g.
     "2 hours ago".

     `--date=local' shows timestamps in user’s local timezone.

     `--date=iso' (or `--date=iso8601') shows timestamps in ISO 8601
     format.

     `--date=rfc' (or `--date=rfc2822') shows timestamps in RFC 2822
     format, often found in E-mail messages.

     `--date=short' shows only date but not time, in `YYYY-MM-DD'
     format.

     `--date=raw' shows the date in the internal raw git format `%s %z'
     format.

     `--date=default' shows timestamps in the original timezone (either
     committer’s or author’s).

-parents
     Print also the parents of the commit (in the form "commit
     parent…").  Also enables parent rewriting, see _History
     Simplification_ below.

-children
     Print also the children of the commit (in the form "commit
     child…").  Also enables parent rewriting, see _History
     Simplification_ below.

-left-right
     Mark which side of a symmetric diff a commit is reachable from.
     Commits from the left side are prefixed with `<' and those from
     the right with `>'.  If combined with `--boundary', those commits
     are prefixed with `-'.

     For example, if you have this topology:

                       y---b---b  branch B
                      / \ /
                     /   .
                    /   / \
                   o---x---a---a  branch A

     you would get an output like this:

                  $ git rev-list --left-right --boundary --pretty=oneline A...B

                  >bbbbbbb... 3rd on b
                  >bbbbbbb... 2nd on b
                  <aaaaaaa... 3rd on a
                  <aaaaaaa... 2nd on a
                  -yyyyyyy... 1st on b
                  -xxxxxxx... 1st on a

-graph
     Draw a text-based graphical representation of the commit history
     on the left hand side of the output.  This may cause extra lines
     to be printed in between commits, in order for the graph history
     to be drawn properly.

     This enables parent rewriting, see _History Simplification_ below.

     This implies the _-topo-order_ option by default, but the
     _-date-order_ option may also be specified.


Diff Formatting
===============

Below are listed options that control the formatting of diff output.
Some of them are specific to git-rev-list(1), however other diff
options may be given. See git-diff-files(1) for more options.

-c
     With this option, diff output for a merge commit shows the
     differences from each of the parents to the merge result
     simultaneously instead of showing pairwise diff between a parent
     and the result one at a time. Furthermore, it lists only files
     which were modified from all parents.

-cc
     This flag implies the _-c_ option and further compresses the patch
     output by omitting uninteresting hunks whose contents in the
     parents have only two variants and the merge result picks one of
     them without modification.

-m
     This flag makes the merge commits show the full diff like regular
     commits; for each merge parent, a separate log entry and diff is
     generated. An exception is that only diff against the first parent
     is shown when _-first-parent_ option is given; in that case, the
     output represents the changes the merge brought _into_ the
     then-current branch.

-r
     Show recursive diffs.

-t
     Show the tree objects in the diff output. This implies _-r_.

-s
     Suppress diff output.


PRETTY FORMATS
**************

If the commit is a merge, and if the pretty-format is not _oneline_,
_email_ or _raw_, an additional line is inserted before the _Author:_
line.  This line begins with "Merge: " and the sha1s of ancestral
commits are printed, separated by spaces.  Note that the listed commits
may not necessarily be the list of the *direct* parent commits if you
have limited your view of history: for example, if you are only
interested in changes related to a certain directory or file.

   There are several built-in formats, and you can define additional
formats by setting a pretty.<name> config option to either another
format name, or a _format:_ string, as described below (see
git-config(1)). Here are the details of the built-in formats:

   * _oneline_

          <sha1> <title line>

     This is designed to be as compact as possible.

   * _short_

          commit <sha1>
          Author: <author>

          <title line>

   * _medium_

          commit <sha1>
          Author: <author>
          Date:   <author date>

          <title line>

          <full commit message>

   * _full_

          commit <sha1>
          Author: <author>
          Commit: <committer>

          <title line>

          <full commit message>

   * _fuller_

          commit <sha1>
          Author:     <author>
          AuthorDate: <author date>
          Commit:     <committer>
          CommitDate: <committer date>

          <title line>

          <full commit message>

   * _email_

          From <sha1> <date>
          From: <author>
          Date: <author date>
          Subject: [PATCH] <title line>

          <full commit message>

   * _raw_

     The _raw_ format shows the entire commit exactly as stored in the
     commit object.  Notably, the SHA1s are displayed in full,
     regardless of whether -abbrev or -no-abbrev are used, and
     _parents_ information show the true parent commits, without taking
     grafts nor history simplification into account.

   * _format:<string>_

     The _format:<string>_ format allows you to specify which
     information you want to show. It works a little bit like printf
     format, with the notable exception that you get a newline with _%n_
     instead of _\n_.

     E.g, _format:"The author of %h was %an, %ar%nThe title was
     >>%s<<%n"_ would show something like this:

          The author of fe6e0ee was Junio C Hamano, 23 hours ago
          The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

     The placeholders are:

        * _%H_: commit hash

        * _%h_: abbreviated commit hash

        * _%T_: tree hash

        * _%t_: abbreviated tree hash

        * _%P_: parent hashes

        * _%p_: abbreviated parent hashes

        * _%an_: author name

        * _%aN_: author name (respecting .mailmap, see git-shortlog(1)
          or git-blame(1))

        * _%ae_: author email

        * _%aE_: author email (respecting .mailmap, see git-shortlog(1)
          or git-blame(1))

        * _%ad_: author date (format respects -date= option)

        * _%aD_: author date, RFC2822 style

        * _%ar_: author date, relative

        * _%at_: author date, UNIX timestamp

        * _%ai_: author date, ISO 8601 format

        * _%cn_: committer name

        * _%cN_: committer name (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%ce_: committer email

        * _%cE_: committer email (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%cd_: committer date

        * _%cD_: committer date, RFC2822 style

        * _%cr_: committer date, relative

        * _%ct_: committer date, UNIX timestamp

        * _%ci_: committer date, ISO 8601 format

        * _%d_: ref names, like the -decorate option of git-log(1)

        * _%e_: encoding

        * _%s_: subject

        * _%f_: sanitized subject line, suitable for a filename

        * _%b_: body

        * _%B_: raw body (unwrapped subject and body)

        * _%N_: commit notes

        * _%gD_: reflog selector, e.g., `refs/stash@{1}'

        * _%gd_: shortened reflog selector, e.g., `stash@{1}'

        * _%gn_: reflog identity name

        * _%gN_: reflog identity name (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%ge_: reflog identity email

        * _%gE_: reflog identity email (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%gs_: reflog subject

        * _%Cred_: switch color to red

        * _%Cgreen_: switch color to green

        * _%Cblue_: switch color to blue

        * _%Creset_: reset color

        * _%C(…)_: color specification, as described in
          color.branch.* config option

        * _%m_: left, right or boundary mark

        * _%n_: newline

        * _%%_: a raw _%_

        * _%x00_: print a byte from a hex code

        * _%w([<w>[,<i1>[,<i2>]]])_: switch line wrapping, like the -w
          option of git-shortlog(1).

     *Note*

     Some placeholders may depend on other options given to the
     revision traversal engine. For example, the `%g*' reflog options
     will insert an empty string unless we are traversing reflog
     entries (e.g., by `git log -g'). The `%d' placeholder will use the
     "short" decoration format if `--decorate' was not already provided
     on the command line.

   If you add a `+' (plus sign) after _%_ of a placeholder, a line-feed
is inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.

   If you add a `-' (minus sign) after _%_ of a placeholder, line-feeds
that immediately precede the expansion are deleted if and only if the
placeholder expands to an empty string.

   If you add a ` ` (space) after _%_ of a placeholder, a space is
inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.

   * _tformat:_

     The _tformat:_ format works exactly like _format:_, except that it
     provides "terminator" semantics instead of "separator" semantics.
     In other words, each commit has the message terminator character
     (usually a newline) appended, rather than a separator placed
     between entries.  This means that the final entry of a single-line
     format will be properly terminated with a new line, just as the
     "oneline" format does.  For example:

          $ git log -2 --pretty=format:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973 -- NO NEWLINE

          $ git log -2 --pretty=tformat:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973

     In addition, any unrecognized string that has a `%' in it is
     interpreted as if it has `tformat:' in front of it.  For example,
     these two are equivalent:

          $ git log -2 --pretty=tformat:%h 4da45bef
          $ git log -2 --pretty=%h 4da45bef



Common diff options
*******************

-p
-u
-patch
     Generate patch (see section on generating patches).

-U<n>
-unified=<n>
     Generate diffs with <n> lines of context instead of the usual
     three.  Implies `-p'.

-raw
     Generate the raw format.

-patch-with-raw
     Synonym for `-p --raw'.

-minimal
     Spend extra time to make sure the smallest possible diff is
     produced.

-patience
     Generate a diff using the "patience diff" algorithm.

-histogram
     Generate a diff using the "histogram diff" algorithm.

-stat[=<width>[,<name-width>[,<count>]]]
     Generate a diffstat. By default, as much space as necessary will
     be used for the filename part, and the rest for the graph part.
     Maximum width defaults to terminal width, or 80 columns if not
     connected to a terminal, and can be overridden by `<width>'. The
     width of the filename part can be limited by giving another width
     `<name-width>' after a comma. The width of the graph part can be
     limited by using `--stat-graph-width=<width>' (affects all
     commands generating a stat graph) or by setting
     `diff.statGraphWidth=<width>' (does not affect `git format-patch').
     By giving a third parameter `<count>', you can limit the output to
     the first `<count>' lines, followed by `...' if there are more.

     These parameters can also be set individually with
     `--stat-width=<width>', `--stat-name-width=<name-width>' and
     `--stat-count=<count>'.

-numstat
     Similar to `--stat', but shows number of added and deleted lines
     in decimal notation and pathname without abbreviation, to make it
     more machine friendly.  For binary files, outputs two `-' instead
     of saying `0 0'.

-shortstat
     Output only the last line of the `--stat' format containing total
     number of modified files, as well as number of added and deleted
     lines.

-dirstat[=<param1,param2,…>]
     Output the distribution of relative amount of changes for each
     sub-directory. The behavior of `--dirstat' can be customized by
     passing it a comma separated list of parameters.  The defaults are
     controlled by the `diff.dirstat' configuration variable (see
     git-config(1)).  The following parameters are available:

    `changes'
          Compute the dirstat numbers by counting the lines that have
          been removed from the source, or added to the destination.
          This ignores the amount of pure code movements within a file.
          In other words, rearranging lines in a file is not counted
          as much as other changes.  This is the default behavior when
          no parameter is given.

    `lines'
          Compute the dirstat numbers by doing the regular line-based
          diff analysis, and summing the removed/added line counts.
          (For binary files, count 64-byte chunks instead, since binary
          files have no natural concept of lines). This is a more
          expensive `--dirstat' behavior than the `changes' behavior,
          but it does count rearranged lines within a file as much as
          other changes. The resulting output is consistent with what
          you get from the other `--*stat' options.

    `files'
          Compute the dirstat numbers by counting the number of files
          changed.  Each changed file counts equally in the dirstat
          analysis. This is the computationally cheapest `--dirstat'
          behavior, since it does not have to look at the file contents
          at all.

    `cumulative'
          Count changes in a child directory for the parent directory
          as well.  Note that when using `cumulative', the sum of the
          percentages reported may exceed 100%. The default
          (non-cumulative) behavior can be specified with the
          `noncumulative' parameter.

    <limit>
          An integer parameter specifies a cut-off percent (3% by
          default).  Directories contributing less than this percentage
          of the changes are not shown in the output.

     Example: The following will count changed files, while ignoring
     directories with less than 10% of the total amount of changed
     files, and accumulating child directory counts in the parent
     directories: `--dirstat=files,10,cumulative'.

-summary
     Output a condensed summary of extended header information such as
     creations, renames and mode changes.

-patch-with-stat
     Synonym for `-p --stat'.

-z
     Separate the commits with NULs instead of with new newlines.

     Also, when `--raw' or `--numstat' has been given, do not munge
     pathnames and use NULs as output field terminators.

     Without this option, each pathname output will have TAB, LF,
     double quotes, and backslash characters replaced with `\t', `\n',
     `\"', and `\\', respectively, and the pathname will be enclosed in
     double quotes if any of those replacements occurred.

-name-only
     Show only names of changed files.

-name-status
     Show only names and status of changed files. See the description
     of the `--diff-filter' option on what the status letters mean.

-submodule[=<format>]
     Specify how differences in submodules are shown.  When
     `--submodule' or `--submodule=log' is given, the _log_ format is
     used.  This format lists the commits in the range like
     git-submodule(1) `summary' does.  Omitting the `--submodule'
     option or specifying `--submodule=short', uses the _short_ format.
     This format just shows the names of the commits at the beginning
     and end of the range.

-color[=<when>]
     Show colored diff.  The value must be `always' (the default for
     `<when>'), `never', or `auto'.  The default value is `never'.

-no-color
     Turn off colored diff.  It is the same as `--color=never'.

-word-diff[=<mode>]
     Show a word diff, using the <mode> to delimit changed words.  By
     default, words are delimited by whitespace; see
     `--word-diff-regex' below.  The <mode> defaults to _plain_, and
     must be one of:

    color
          Highlight changed words using only colors.  Implies `--color'.

    plain
          Show words as `[-removed-]' and `{+added+}'.  Makes no
          attempts to escape the delimiters if they appear in the input,
          so the output may be ambiguous.

    porcelain
          Use a special line-based format intended for script
          consumption.  Added/removed/unchanged runs are printed in the
          usual unified diff format, starting with a `+'/`-'/` `
          character at the beginning of the line and extending to the
          end of the line.  Newlines in the input are represented by a
          tilde `~' on a line of its own.

    none
          Disable word diff again.

     Note that despite the name of the first mode, color is used to
     highlight the changed parts in all modes if enabled.

-word-diff-regex=<regex>
     Use <regex> to decide what a word is, instead of considering runs
     of non-whitespace to be a word.  Also implies `--word-diff' unless
     it was already enabled.

     Every non-overlapping match of the <regex> is considered a word.
     Anything between these matches is considered whitespace and
     ignored(!) for the purposes of finding differences.  You may want
     to append `|[^[:space:]]' to your regular expression to make sure
     that it matches all non-whitespace characters.  A match that
     contains a newline is silently truncated(!) at the newline.

     The regex can also be set via a diff driver or configuration
     option, see gitattributes(1) or git-config(1).  Giving it
     explicitly overrides any diff driver or configuration setting.
     Diff drivers override configuration settings.

-color-words[=<regex>]
     Equivalent to `--word-diff=color' plus (if a regex was specified)
     `--word-diff-regex=<regex>'.

-no-renames
     Turn off rename detection, even when the configuration file gives
     the default to do so.

-check
     Warn if changes introduce whitespace errors.  What are considered
     whitespace errors is controlled by `core.whitespace'
     configuration.  By default, trailing whitespaces (including lines
     that solely consist of whitespaces) and a space character that is
     immediately followed by a tab character inside the initial indent
     of the line are considered whitespace errors.  Exits with non-zero
     status if problems are found. Not compatible with -exit-code.

-full-index
     Instead of the first handful of characters, show the full pre- and
     post-image blob object names on the "index" line when generating
     patch format output.

-binary
     In addition to `--full-index', output a binary diff that can be
     applied with `git-apply'.

-abbrev[=<n>]
     Instead of showing the full 40-byte hexadecimal object name in
     diff-raw format output and diff-tree header lines, show only a
     partial prefix.  This is independent of the `--full-index' option
     above, which controls the diff-patch output format.  Non default
     number of digits can be specified with `--abbrev=<n>'.

-B[<n>][/<m>]
-break-rewrites[=[<n>][/<m>]]
     Break complete rewrite changes into pairs of delete and create.
     This serves two purposes:

     It affects the way a change that amounts to a total rewrite of a
     file not as a series of deletion and insertion mixed together with
     a very few lines that happen to match textually as the context,
     but as a single deletion of everything old followed by a single
     insertion of everything new, and the number `m' controls this
     aspect of the -B option (defaults to 60%). `-B/70%' specifies that
     less than 30% of the original should remain in the result for git
     to consider it a total rewrite (i.e. otherwise the resulting patch
     will be a series of deletion and insertion mixed together with
     context lines).

     When used with -M, a totally-rewritten file is also considered as
     the source of a rename (usually -M only considers a file that
     disappeared as the source of a rename), and the number `n'
     controls this aspect of the -B option (defaults to 50%). `-B20%'
     specifies that a change with addition and deletion compared to 20%
     or more of the file’s size are eligible for being picked up as a
     possible source of a rename to another file.

-M[<n>]
-find-renames[=<n>]
     If generating diffs, detect and report renames for each commit.
     For following files across renames while traversing history, see
     `--follow'.  If `n' is specified, it is a threshold on the
     similarity index (i.e. amount of addition/deletions compared to the
     file’s size). For example, `-M90%' means git should consider a
     delete/add pair to be a rename if more than 90% of the file
     hasn’t changed.

-C[<n>]
-find-copies[=<n>]
     Detect copies as well as renames.  See also `--find-copies-harder'.
     If `n' is specified, it has the same meaning as for `-M<n>'.

-find-copies-harder
     For performance reasons, by default, `-C' option finds copies only
     if the original file of the copy was modified in the same
     changeset.  This flag makes the command inspect unmodified files
     as candidates for the source of copy.  This is a very expensive
     operation for large projects, so use it with caution.  Giving more
     than one `-C' option has the same effect.

-D
-irreversible-delete
     Omit the preimage for deletes, i.e. print only the header but not
     the diff between the preimage and `/dev/null'. The resulting patch
     is not meant to be applied with `patch' nor `git apply'; this is
     solely for people who want to just concentrate on reviewing the
     text after the change. In addition, the output obviously lack
     enough information to apply such a patch in reverse, even manually,
     hence the name of the option.

     When used together with `-B', omit also the preimage in the
     deletion part of a delete/create pair.

-l<num>
     The `-M' and `-C' options require O(n^2) processing time where n
     is the number of potential rename/copy targets.  This option
     prevents rename/copy detection from running if the number of
     rename/copy targets exceeds the specified number.

-diff-filter=[(A|C|D|M|R|T|U|X|B)…[*]]
     Select only files that are Added (`A'), Copied (`C'), Deleted
     (`D'), Modified (`M'), Renamed (`R'), have their type (i.e.
     regular file, symlink, submodule, …) changed (`T'), are Unmerged
     (`U'), are Unknown (`X'), or have had their pairing Broken (`B').
     Any combination of the filter characters (including none) can be
     used.  When `*' (All-or-none) is added to the combination, all
     paths are selected if there is any file that matches other
     criteria in the comparison; if there is no file that matches other
     criteria, nothing is selected.

-S<string>
     Look for differences that introduce or remove an instance of
     <string>. Note that this is different than the string simply
     appearing in diff output; see the _pickaxe_ entry in
     gitdiffcore(7) for more details.

-G<regex>
     Look for differences whose added or removed line matches the given
     <regex>.

-pickaxe-all
     When `-S' or `-G' finds a change, show all the changes in that
     changeset, not just the files that contain the change in <string>.

-pickaxe-regex
     Make the <string> not a plain string but an extended POSIX regex
     to match.

-O<orderfile>
     Output the patch in the order specified in the <orderfile>, which
     has one shell glob pattern per line.

-R
     Swap two inputs; that is, show differences from index or on-disk
     file to tree contents.

-relative[=<path>]
     When run from a subdirectory of the project, it can be told to
     exclude changes outside the directory and show pathnames relative
     to it with this option.  When you are not in a subdirectory (e.g.
     in a bare repository), you can name which subdirectory to make the
     output relative to by giving a <path> as an argument.

-a
-text
     Treat all files as text.

-ignore-space-at-eol
     Ignore changes in whitespace at EOL.

-b
-ignore-space-change
     Ignore changes in amount of whitespace.  This ignores whitespace
     at line end, and considers all other sequences of one or more
     whitespace characters to be equivalent.

-w
-ignore-all-space
     Ignore whitespace when comparing lines.  This ignores differences
     even if one line has whitespace where the other line has none.

-inter-hunk-context=<lines>
     Show the context between diff hunks, up to the specified number of
     lines, thereby fusing hunks that are close to each other.

-W
-function-context
     Show whole surrounding functions of changes.

-ext-diff
     Allow an external diff helper to be executed. If you set an
     external diff driver with gitattributes(5), you need to use this
     option with git-log(1) and friends.

-no-ext-diff
     Disallow external diff drivers.

-textconv
-no-textconv
     Allow (or disallow) external text conversion filters to be run
     when comparing binary files. See gitattributes(5) for details.
     Because textconv filters are typically a one-way conversion, the
     resulting diff is suitable for human consumption, but cannot be
     applied. For this reason, textconv filters are enabled by default
     only for git-diff(1) and git-log(1), but not for
     git-format-patch(1) or diff plumbing commands.

-ignore-submodules[=<when>]
     Ignore changes to submodules in the diff generation. <when> can be
     either "none", "untracked", "dirty" or "all", which is the default
     Using "none" will consider the submodule modified when it either
     contains untracked or modified files or its HEAD differs from the
     commit recorded in the superproject and can be used to override
     any settings of the _ignore_ option in git-config(1) or
     gitmodules(5). When "untracked" is used submodules are not
     considered dirty when they only contain untracked content (but
     they are still scanned for modified content). Using "dirty"
     ignores all changes to the work tree of submodules, only changes
     to the commits stored in the superproject are shown (this was the
     behavior until 1.7.0). Using "all" hides all changes to submodules.

-src-prefix=<prefix>
     Show the given source prefix instead of "a/".

-dst-prefix=<prefix>
     Show the given destination prefix instead of "b/".

-no-prefix
     Do not show any source or destination prefix.

   For more detailed explanation on these common options, see also
gitdiffcore(7).



Generating patches with -p
**************************

When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
with a _-p_ option, "git diff" without the _-raw_ option, or "git log"
with the "-p" option, they do not produce the output described above;
instead they produce a patch file.  You can customize the creation of
such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS
environment variables.

   What the -p option produces is slightly different from the
traditional diff format:

  1. It is preceded with a "git diff" header that looks like this:

          diff --git a/file1 b/file2

     The `a/' and `b/' filenames are the same unless rename/copy is
     involved.  Especially, even for a creation or a deletion,
     `/dev/null' is _not_ used in place of the `a/' or `b/' filenames.

     When rename/copy is involved, `file1' and `file2' show the name of
     the source file of the rename/copy and the name of the file that
     rename/copy produces, respectively.

  2. It is followed by one or more extended header lines:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     File modes are printed as 6-digit octal numbers including the file
     type and file permission bits.

     Path names in extended headers do not include the `a/' and `b/'
     prefixes.

     The similarity index is the percentage of unchanged lines, and the
     dissimilarity index is the percentage of changed lines.  It is a
     rounded down integer, followed by a percent sign.  The similarity
     index value of 100% is thus reserved for two equal files, while
     100% dissimilarity means that no line from the old file made it
     into the new one.

     The index line includes the SHA-1 checksum before and after the
     change.  The <mode> is included if the file mode does not change;
     otherwise, separate lines indicate the old and the new mode.

  3. TAB, LF, double quote and backslash characters in pathnames are
     represented as `\t', `\n', `\"' and `\\', respectively.  If there
     is need for such substitution then the whole pathname is put in
     double quotes.

  4. All the `file1' files in the output refer to files before the
     commit, and all the `file2' files refer to files after the commit.
     It is incorrect to apply each change to each file sequentially.
     For example, this patch will swap a and b:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a


combined diff format
********************

Any diff-generating command can take the ‘-c` or `--cc' option to
produce a _combined diff_ when showing a merge. This is the default
format when showing merges with git-diff(1) or git-show(1). Note also
that you can give the `-m’ option to any of these commands to force
generation of diffs with individual parents of a merge.

   A _combined diff_ format looks like this:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. It is preceded with a "git diff" header, that looks like this
     (when _-c_ option is used):

          diff --combined file

     or like this (when _-cc_ option is used):

          diff --cc file

  2. It is followed by one or more extended header lines (this example
     shows a merge with two parents):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     The `mode <mode>,<mode>..<mode>' line appears only if at least one
     of the <mode> is different from the rest. Extended headers with
     information about detected contents movement (renames and copying
     detection) are designed to work with diff of two <tree-ish> and
     are not used by combined diff format.

  3. It is followed by two-line from-file/to-file header

          --- a/file
          +++ b/file

     Similar to two-line header for traditional _unified_ diff format,
     `/dev/null' is used to signal created or deleted files.

  4. Chunk header format is modified to prevent people from
     accidentally feeding it to `patch -p1'. Combined diff format was
     created for review of merge commit changes, and was not meant for
     apply. The change is similar to the change in the extended _index_
     header:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     There are (number of parents + 1) `@' characters in the chunk
     header for combined diff format.

   Unlike the traditional _unified_ diff format, which shows two files
A and B with a single column that has `-' (minus — appears in A
but removed in B), `+' (plus — missing in A but added to B), or
`" "' (space — unchanged) prefix, this format compares two or
more files file1, file2,… with one file X, and shows how X differs
from each of fileN.  One column for each of fileN is prepended to the
output line to note how X’s line is different from it.

   A `-' character in the column N means that the line appears in fileN
but it does not appear in the result.  A `+' character in the column N
means that the line appears in the result, and fileN does not have that
line (in other words, the line was added, from the point of view of
that parent).

   In the above example output, the function signature was changed from
both files (hence two `-' removals from both file1 and file2, plus `++'
to mean one line that was added does not appear in either file1 nor
file2).  Also eight other lines are the same from file1 but do not
appear in file2 (hence prefixed with `+').

   When shown by `git diff-tree -c', it compares the parents of a merge
commit with the merge result (i.e. file1..fileN are the parents).  When
shown by `git diff-files -c', it compares the two unresolved merge
parents with the working tree file (i.e. file1 is stage 2 aka "our
version", file2 is stage 3 aka "their version").



Examples
********

`git log --no-merges'
     Show the whole commit history, but skip any merges

`git log v2.6.12.. include/scsi drivers/scsi'
     Show all commits since version _v2.6.12_ that changed any file in
     the include/scsi or drivers/scsi subdirectories

`git log --since="2 weeks ago" -- gitk'
     Show the changes during the last two weeks to the file _gitk_.
     The "-" is necessary to avoid confusion with the *branch* named
     _gitk_

`git log --name-status release..test'
     Show the commits that are in the "test" branch but not yet in the
     "release" branch, along with the list of paths each commit
     modifies.

`git log --follow builtin-rev-list.c'
     Shows the commits that changed builtin-rev-list.c, including those
     commits that occurred before the file was given its present name.

`git log --branches --not --remotes=origin'
     Shows all commits that are in any of local branches but not in any
     of remote-tracking branches for _origin_ (what you have that
     origin doesn’t).

`git log master --not --remotes=*/master'
     Shows all commits that are in local master but not in any remote
     repository master branches.

`git log -p -m --first-parent'
     Shows the history including change diffs, but only from the "main
     branch" perspective, skipping commits that come from merged
     branches, and showing full diffs of changes introduced by the
     merges.  This makes sense only when following a strict policy of
     merging all topic branches when staying on a single integration
     branch.


Discussion
**********

At the core level, git is character encoding agnostic.

   * The pathnames recorded in the index and in the tree objects are
     treated as uninterpreted sequences of non-NUL bytes.  What
     readdir(2) returns are what are recorded and compared with the
     data git keeps track of, which in turn are expected to be what
     lstat(2) and creat(2) accepts.  There is no such thing as pathname
     encoding translation.

   * The contents of the blob objects are uninterpreted sequences of
     bytes.  There is no encoding translation at the core level.

   * The commit log messages are uninterpreted sequences of non-NUL
     bytes.

   Although we encourage that the commit log messages are encoded in
UTF-8, both the core and git Porcelain are designed not to force UTF-8
on projects.  If all participants of a particular project find it more
convenient to use legacy encodings, git does not forbid it.  However,
there are a few things to keep in mind.

  1. _git commit_ and _git commit-tree_ issues a warning if the commit
     log message given to it does not look like a valid UTF-8 string,
     unless you explicitly say your project uses a legacy encoding.
     The way to say this is to have i18n.commitencoding in
     `.git/config' file, like this:

          [i18n]
                  commitencoding = ISO-8859-1

     Commit objects created with the above setting record the value of
     `i18n.commitencoding' in its `encoding' header.  This is to help
     other people who look at them later.  Lack of this header implies
     that the commit log message is encoded in UTF-8.

  2. _git log_, _git show_, _git blame_ and friends look at the
     `encoding' header of a commit object, and try to re-code the log
     message into UTF-8 unless otherwise specified.  You can specify
     the desired output encoding with `i18n.logoutputencoding' in
     `.git/config' file, like this:

          [i18n]
                  logoutputencoding = ISO-8859-1

     If you do not have this configuration variable, the value of
     `i18n.commitencoding' is used instead.

   Note that we deliberately chose not to re-code the commit log
message when a commit is made to force UTF-8 at the commit object
level, because re-coding to UTF-8 is not necessarily a reversible
operation.



Configuration
*************

See git-config(1) for core variables and git-diff(1) for settings
related to diff generation.

format.pretty
     Default for the `--format' option.  (See "PRETTY FORMATS" above.)
     Defaults to "medium".

i18n.logOutputEncoding
     Encoding to use when displaying logs.  (See "Discussion", above.)
     Defaults to the value of `i18n.commitEncoding' if set, UTF-8
     otherwise.

log.date
     Default format for human-readable dates.  (Compare the `--date'
     option.)  Defaults to "default", which means to write dates like
     `Sat May 8 19:35:34 2010 -0500'.

log.showroot
     If `false', _git log_ and related commands will not treat the
     initial commit as a big creation event.  Any root commits in `git
     log -p' output would be shown without a diff attached.  The
     default is `true'.

mailmap.file
     See git-shortlog(1).

notes.displayRef
     Which refs, in addition to the default set by `core.notesRef' or
     _GIT_NOTES_REF_, to read notes from when showing commit messages
     with the _log_ family of commands.  See git-notes(1).

     May be an unabbreviated ref name or a glob and may be specified
     multiple times.  A warning will be issued for refs that do not
     exist, but a glob that does not match any refs is silently ignored.

     This setting can be disabled by the `--no-notes' option,
     overridden by the _GIT_NOTES_DISPLAY_REF_ environment variable,
     and overridden by the `--notes=<ref>' option.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-lost-found,  Up: Top

Name
****

git-lost-found — Recover lost refs that luckily have not yet been
pruned



Synopsis
********

     git lost-found


DESCRIPTION
***********

*NOTE*: this command is deprecated.  Use git-fsck(1) with the option
_-lost-found_ instead.

   Finds dangling commits and tags from the object database, and
creates refs to them in the .git/lost-found/ directory.  Commits and
tags that dereference to commits are stored in .git/lost-found/commit,
and other objects are stored in .git/lost-found/other.



OUTPUT
******

Prints to standard output the object names and one-line descriptions of
any commits or tags found.



EXAMPLE
*******

Suppose you run _git tag -f_ and mistype the tag to overwrite.  The ref
to your tag is overwritten, but until you run _git prune_, the tag
itself is still there.

     $ git lost-found
     [1ef2b196d909eed523d4f3c9bf54b78cdd6843c6] GIT 0.99.9c
     ...

   Also you can use gitk to browse how any tags found relate to each
other.

     $ gitk $(cd .git/lost-found/commit && echo ??*)

   After making sure you know which the object is the tag you are
looking for, you can reconnect it to your regular `refs' hierarchy by
using the `update-ref' command.

     $ git cat-file -t 1ef2b196
     tag
     $ git cat-file tag 1ef2b196
     object fa41bbce8e38c67a218415de6cfa510c7e50032a
     type commit
     tag v0.99.9c
     tagger Junio C Hamano <junkio@cox.net> 1131059594 -0800

     GIT 0.99.9c

     This contains the following changes from the "master" branch, since
     ...
     $ git update-ref refs/tags/not-lost-anymore 1ef2b196
     $ git rev-parse not-lost-anymore
     1ef2b196d909eed523d4f3c9bf54b78cdd6843c6


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-ls-files,  Up: Top

Name
****

git-ls-files — Show information about files in the index and the
working tree



Synopsis
********

     git ls-files [-z] [-t] [-v]
                     (-[cached|deleted|others|ignored|stage|unmerged|killed|modified])*
                     (-[c|d|o|i|s|u|k|m])*
                     [-x <pattern>|-exclude=<pattern>]
                     [-X <file>|-exclude-from=<file>]
                     [-exclude-per-directory=<file>]
                     [-exclude-standard]
                     [-error-unmatch] [-with-tree=<tree-ish>]
                     [-full-name] [-abbrev] [-] [<file>…]


DESCRIPTION
***********

This merges the file listing in the directory cache index with the
actual working directory list, and shows different combinations of the
two.

   One or more of the options below may be used to determine the files
shown:



OPTIONS
*******

-c
-cached
     Show cached files in the output (default)

-d
-deleted
     Show deleted files in the output

-m
-modified
     Show modified files in the output

-o
-others
     Show other (i.e. untracked) files in the output

-i
-ignored
     Show only ignored files in the output. When showing files in the
     index, print only those matched by an exclude pattern. When
     showing "other" files, show only those matched by an exclude
     pattern.

-s
-stage
     Show staged contents' object name, mode bits and stage number in
     the output.

-directory
     If a whole directory is classified as "other", show just its name
     (with a trailing slash) and not its whole contents.

-no-empty-directory
     Do not list empty directories. Has no effect without -directory.

-u
-unmerged
     Show unmerged files in the output (forces -stage)

-k
-killed
     Show files on the filesystem that need to be removed due to
     file/directory conflicts for checkout-index to succeed.

-z
     \0 line termination on output.

-x <pattern>
-exclude=<pattern>
     Skip untracked files matching pattern.  Note that pattern is a
     shell wildcard pattern. See EXCLUDE PATTERNS below for more
     information.

-X <file>
-exclude-from=<file>
     Read exclude patterns from <file>; 1 per line.

-exclude-per-directory=<file>
     Read additional exclude patterns that apply only to the directory
     and its subdirectories in <file>.

-exclude-standard
     Add the standard git exclusions: .git/info/exclude, .gitignore in
     each directory, and the user’s global exclusion file.

-error-unmatch
     If any <file> does not appear in the index, treat this as an error
     (return 1).

-with-tree=<tree-ish>
     When using -error-unmatch to expand the user supplied <file> (i.e.
     path pattern) arguments to paths, pretend that paths which were
     removed in the index since the named <tree-ish> are still present.
     Using this option with `-s' or `-u' options does not make any
     sense.

-t
     This feature is semi-deprecated. For scripting purpose,
     git-status(1) `--porcelain' and git-diff-files(1) `--name-status'
     are almost always superior alternatives, and users should look at
     git-status(1) `--short' or git-diff(1) `--name-status' for more
     user-friendly alternatives.

     This option identifies the file status with the following tags
     (followed by a space) at the start of each line:

H
     cached

S
     skip-worktree

M
     unmerged

R
     removed/deleted

C
     modified/changed

K
     to be killed

?
     other

-v
     Similar to `-t', but use lowercase letters for files that are
     marked as _assume unchanged_ (see git-update-index(1)).

-full-name
     When run from a subdirectory, the command usually outputs paths
     relative to the current directory.  This option forces paths to be
     output relative to the project top directory.

-abbrev[=<n>]
     Instead of showing the full 40-byte hexadecimal object lines, show
     only a partial prefix.  Non default number of digits can be
     specified with -abbrev=<n>.

-debug
     After each line that describes a file, add more data about its
     cache entry.  This is intended to show as much information as
     possible for manual inspection; the exact format may change at any
     time.

-
     Do not interpret any more arguments as options.

<file>
     Files to show. If no files are given all files which match the
     other specified criteria are shown.


Output
******

_git ls-files_ just outputs the filenames unless _-stage_ is specified
in which case it outputs:

     [<tag> ]<mode> <object> <stage> <file>

   _git ls-files -unmerged_ and _git ls-files -stage_ can be used to
examine detailed information on unmerged paths.

   For an unmerged path, instead of recording a single mode/SHA1 pair,
the index records up to three such pairs; one from tree O in stage 1, A
in stage 2, and B in stage 3.  This information can be used by the user
(or the porcelain) to see what should eventually be recorded at the
path. (see git-read-tree(1) for more information on state)

   When `-z' option is not used, TAB, LF, and backslash characters in
pathnames are represented as `\t', `\n', and `\\', respectively.



Exclude Patterns
****************

_git ls-files_ can use a list of "exclude patterns" when traversing the
directory tree and finding files to show when the flags -others or
-ignored are specified.  gitignore(5) specifies the format of exclude
patterns.

   These exclude patterns come from these places, in order:

  1. The command line flag -exclude=<pattern> specifies a single
     pattern.  Patterns are ordered in the same order they appear in
     the command line.

  2. The command line flag -exclude-from=<file> specifies a file
     containing a list of patterns.  Patterns are ordered in the same
     order they appear in the file.

  3. The command line flag -exclude-per-directory=<name> specifies a
     name of the file in each directory _git ls-files_ examines,
     normally `.gitignore'.  Files in deeper directories take
     precedence.  Patterns are ordered in the same order they appear in
     the files.

   A pattern specified on the command line with -exclude or read from
the file specified with -exclude-from is relative to the top of the
directory tree.  A pattern read from a file specified by
-exclude-per-directory is relative to the directory that the pattern
file appears in.



SEE ALSO
********

git-read-tree(1), gitignore(5)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-ls-remote,  Up: Top

Name
****

git-ls-remote — List references in a remote repository



Synopsis
********

     git ls-remote [-heads] [-tags]  [-u <exec> | -upload-pack <exec>]
                   [-exit-code] <repository> [<refs>…]


DESCRIPTION
***********

Displays references available in a remote repository along with the
associated commit IDs.



OPTIONS
*******

-h
-heads
-t
-tags
     Limit to only refs/heads and refs/tags, respectively.  These
     options are _not_ mutually exclusive; when given both, references
     stored in refs/heads and refs/tags are displayed.

-u <exec>
-upload-pack=<exec>
     Specify the full path of _git-upload-pack_ on the remote host.
     This allows listing references from repositories accessed via SSH
     and where the SSH daemon does not use the PATH configured by the
     user.

-exit-code
     Exit with status "2" when no matching refs are found in the remote
     repository. Usually the command exits with status "0" to indicate
     it successfully talked with the remote repository, whether it
     found any matching refs.

<repository>
     Location of the repository.  The shorthand defined in
     $GIT_DIR/branches/ can be used. Use "." (dot) to list references in
     the local repository.

<refs>…
     When unspecified, all references, after filtering done with -heads
     and -tags, are shown.  When <refs>… are specified, only
     references matching the given patterns are displayed.


EXAMPLES
********

     $ git ls-remote --tags ./.
     d6602ec5194c87b0fc87103ca4d67251c76f233a        refs/tags/v0.99
     f25a265a342aed6041ab0cc484224d9ca54b6f41        refs/tags/v0.99.1
     7ceca275d047c90c0c7d5afb13ab97efdf51bd6e        refs/tags/v0.99.3
     c5db5456ae3b0873fc659c19fafdde22313cc441        refs/tags/v0.99.2
     0918385dbd9656cab0d1d81ba7453d49bbc16250        refs/tags/junio-gpg-pub
     $ git ls-remote http://www.kernel.org/pub/scm/git/git.git master pu rc
     5fe978a5381f1fbad26a80e682ddd2a401966740        refs/heads/master
     c781a84b5204fb294c9ccc79f8b3baceeb32c061        refs/heads/pu
     b1d096f2926c4e37c9c0b6a7bf2119bedaa277cb        refs/heads/rc
     $ echo http://www.kernel.org/pub/scm/git/git.git >.git/branches/public
     $ git ls-remote --tags public v\*
     d6602ec5194c87b0fc87103ca4d67251c76f233a        refs/tags/v0.99
     f25a265a342aed6041ab0cc484224d9ca54b6f41        refs/tags/v0.99.1
     c5db5456ae3b0873fc659c19fafdde22313cc441        refs/tags/v0.99.2
     7ceca275d047c90c0c7d5afb13ab97efdf51bd6e        refs/tags/v0.99.3


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-ls-tree,  Up: Top

Name
****

git-ls-tree — List the contents of a tree object



Synopsis
********

     git ls-tree [-d] [-r] [-t] [-l] [-z]
                 [-name-only] [-name-status] [-full-name] [-full-tree] [-abbrev[=<n>]]
                 <tree-ish> [<path>…]


DESCRIPTION
***********

Lists the contents of a given tree object, like what "/bin/ls -a" does
in the current working directory.  Note that:

   * the behaviour is slightly different from that of "/bin/ls" in that
     the _<path>_ denotes just a list of patterns to match, e.g. so
     specifying directory name (without _-r_) will behave differently,
     and order of the arguments does not matter.

   * the behaviour is similar to that of "/bin/ls" in that the _<path>_
     is taken as relative to the current working directory.  E.g. when
     you are in a directory _sub_ that has a directory _dir_, you can
     run _git ls-tree -r HEAD dir_ to list the contents of the tree
     (that is _sub/dir_ in _HEAD_).  You don’t want to give a tree
     that is not at the root level (e.g. `git ls-tree -r HEAD:sub dir')
     in this case, as that would result in asking for _sub/sub/dir_ in
     the _HEAD_ commit.  However, the current working directory can be
     ignored by passing -full-tree option.


OPTIONS
*******

<tree-ish>
     Id of a tree-ish.

-d
     Show only the named tree entry itself, not its children.

-r
     Recurse into sub-trees.

-t
     Show tree entries even when going to recurse them. Has no effect
     if _-r_ was not passed. _-d_ implies _-t_.

-l
-long
     Show object size of blob (file) entries.

-z
     \0 line termination on output.

-name-only
-name-status
     List only filenames (instead of the "long" output), one per line.

-abbrev[=<n>]
     Instead of showing the full 40-byte hexadecimal object lines, show
     only a partial prefix.  Non default number of digits can be
     specified with -abbrev=<n>.

-full-name
     Instead of showing the path names relative to the current working
     directory, show the full path names.

-full-tree
     Do not limit the listing to the current working directory.
     Implies -full-name.

[<path>…]
     When paths are given, show them (note that this isn’t really raw
     pathnames, but rather a list of patterns to match).  Otherwise
     implicitly uses the root level of the tree as the sole path
     argument.


Output Format
*************

     <mode> SP <type> SP <object> TAB <file>

   Unless the `-z' option is used, TAB, LF, and backslash characters in
pathnames are represented as `\t', `\n', and `\\', respectively.  This
output format is compatible with what `--index-info --stdin' of _git
update-index_ expects.

   When the `-l' option is used, format changes to

     <mode> SP <type> SP <object> SP <object size> TAB <file>

   Object size identified by <object> is given in bytes, and
right-justified with minimum width of 7 characters.  Object size is
given only for blobs (file) entries; for other entries `-' character is
used in place of size.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mailinfo,  Up: Top

Name
****

git-mailinfo — Extracts patch and authorship from a single e-mail
message



Synopsis
********

     git mailinfo [-k|-b] [-u | -encoding=<encoding> | -n] [-scissors] <msg> <patch>


DESCRIPTION
***********

Reads a single e-mail message from the standard input, and writes the
commit log message in <msg> file, and the patches in <patch> file.  The
author name, e-mail and e-mail subject are written out to the standard
output to be used by _git am_ to create a commit.  It is usually not
necessary to use this command directly.  See git-am(1) instead.



OPTIONS
*******

-k
     Usually the program removes email cruft from the Subject: header
     line to extract the title line for the commit log message.  This
     option prevents this munging, and is most useful when used to read
     back _git format-patch -k_ output.

     Specifically, the following are removed until none of them remain:

        * Leading and trailing whitespace.

        * Leading `Re:', `re:', and `:'.

        * Leading bracketed strings (between `[' and `]', usually
          `[PATCH]').

     Finally, runs of whitespace are normalized to a single ASCII space
     character.

-b
     When -k is not in effect, all leading strings bracketed with _[_
     and _]_ pairs are stripped.  This option limits the stripping to
     only the pairs whose bracketed string contains the word "PATCH".

-u
     The commit log message, author name and author email are taken
     from the e-mail, and after minimally decoding MIME transfer
     encoding, re-coded in the charset specified by i18n.commitencoding
     (defaulting to UTF-8) by transliterating them.  This used to be
     optional but now it is the default.

     Note that the patch is always used as-is without charset
     conversion, even with this flag.

-encoding=<encoding>
     Similar to -u.  But when re-coding, the charset specified here is
     used instead of the one specified by i18n.commitencoding or UTF-8.

-n
     Disable all charset re-coding of the metadata.

-scissors
     Remove everything in body before a scissors line.  A line that
     mainly consists of scissors (either ">8" or "8<") and perforation
     (dash "-") marks is called a scissors line, and is used to request
     the reader to cut the message at that line.  If such a line
     appears in the body of the message before the patch, everything
     before it (including the scissors line itself) is ignored when
     this option is used.

     This is useful if you want to begin your message in a discussion
     thread with comments and suggestions on the message you are
     responding to, and to conclude it with a patch submission,
     separating the discussion and the beginning of the proposed commit
     log message with a scissors line.

     This can enabled by default with the configuration option
     mailinfo.scissors.

-no-scissors
     Ignore scissors lines. Useful for overriding mailinfo.scissors
     settings.

<msg>
     The commit log message extracted from e-mail, usually except the
     title line which comes from e-mail Subject.

<patch>
     The patch extracted from e-mail.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mailsplit,  Up: Top

Name
****

git-mailsplit — Simple UNIX mbox splitter program



Synopsis
********

     git mailsplit [-b] [-f<nn>] [-d<prec>] [-keep-cr] -o<directory> [-] [(<mbox>|<Maildir>)…]


DESCRIPTION
***********

Splits a mbox file or a Maildir into a list of files: "0001" "0002" ..
in the specified directory so you can process them further from there.

     *Important*

     Maildir splitting relies upon filenames being sorted to output
     patches in the correct order.


OPTIONS
*******

<mbox>
     Mbox file to split.  If not given, the mbox is read from the
     standard input.

<Maildir>
     Root of the Maildir to split. This directory should contain the
     cur, tmp and new subdirectories.

-o<directory>
     Directory in which to place the individual messages.

-b
     If any file doesn’t begin with a From line, assume it is a
     single mail message instead of signaling error.

-d<prec>
     Instead of the default 4 digits with leading zeros, different
     precision can be specified for the generated filenames.

-f<nn>
     Skip the first <nn> numbers, for example if -f3 is specified,
     start the numbering with 0004.

-keep-cr
     Do not remove `\r' from lines ending with `\r\n'.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge-base,  Up: Top

Name
****

git-merge-base — Find as good common ancestors as possible for a merge



Synopsis
********

     git merge-base [-a|-all] <commit> <commit>…
     git merge-base [-a|-all] -octopus <commit>…
     git merge-base -independent <commit>…


DESCRIPTION
***********

_git merge-base_ finds best common ancestor(s) between two commits to
use in a three-way merge.  One common ancestor is _better_ than another
common ancestor if the latter is an ancestor of the former.  A common
ancestor that does not have any better common ancestor is a _best common
ancestor_, i.e. a _merge base_.  Note that there can be more than one
merge base for a pair of commits.



OPERATION MODE
**************

As the most common special case, specifying only two commits on the
command line means computing the merge base between the given two
commits.

   More generally, among the two commits to compute the merge base from,
one is specified by the first commit argument on the command line; the
other commit is a (possibly hypothetical) commit that is a merge across
all the remaining commits on the command line.

   As a consequence, the _merge base_ is not necessarily contained in
each of the commit arguments if more than two commits are specified.
This is different from git-show-branch(1) when used with the
`--merge-base' option.

-octopus
     Compute the best common ancestors of all supplied commits, in
     preparation for an n-way merge.  This mimics the behavior of _git
     show-branch -merge-base_.

-independent
     Instead of printing merge bases, print a minimal subset of the
     supplied commits with the same ancestors.  In other words, among
     the commits given, list those which cannot be reached from any
     other.  This mimics the behavior of _git show-branch -independent_.


OPTIONS
*******

-a
-all
     Output all merge bases for the commits, instead of just one.


DISCUSSION
**********

Given two commits _A_ and _B_, `git merge-base A B' will output a commit
which is reachable from both _A_ and _B_ through the parent
relationship.

   For example, with this topology:

              o---o---o---B
             /
     ---o---1---o---o---o---A

   the merge base between _A_ and _B_ is _1_.

   Given three commits _A_, _B_ and _C_, `git merge-base A B C' will
compute the merge base between _A_ and a hypothetical commit _M_, which
is a merge between _B_ and _C_.  For example, with this topology:

            o---o---o---o---C
           /
          /   o---o---o---B
         /   /
     ---2---1---o---o---o---A

   the result of `git merge-base A B C' is _1_.  This is because the
equivalent topology with a merge commit _M_ between _B_ and _C_ is:

            o---o---o---o---o
           /                 \
          /   o---o---o---o---M
         /   /
     ---2---1---o---o---o---A

   and the result of `git merge-base A M' is _1_.  Commit _2_ is also a
common ancestor between _A_ and _M_, but _1_ is a better common
ancestor, because _2_ is an ancestor of _1_.  Hence, _2_ is not a merge
base.

   The result of `git merge-base --octopus A B C' is _2_, because _2_ is
the best common ancestor of all commits.

   When the history involves criss-cross merges, there can be more than
one _best_ common ancestor for two commits.  For example, with this
topology:

     ---1---o---A
         \ /
          X
         / \
     ---2---o---o---B

   both _1_ and _2_ are merge-bases of A and B.  Neither one is better
than the other (both are _best_ merge bases).  When the `--all' option
is not given, it is unspecified which best one is output.



See also
********

git-rev-list(1), git-show-branch(1), git-merge(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge-file,  Up: Top

Name
****

git-merge-file — Run a three-way file merge



Synopsis
********

     git merge-file [-L <current-name> [-L <base-name> [-L <other-name>]]]
             [-ours|-theirs|-union] [-p|-stdout] [-q|-quiet] [-marker-size=<n>]
             <current-file> <base-file> <other-file>


DESCRIPTION
***********

_git merge-file_ incorporates all changes that lead from the
`<base-file>' to `<other-file>' into `<current-file>'. The result
ordinarily goes into `<current-file>'. _git merge-file_ is useful for
combining separate changes to an original. Suppose `<base-file>' is the
original, and both `<current-file>' and `<other-file>' are
modifications of `<base-file>', then _git merge-file_ combines both
changes.

   A conflict occurs if both `<current-file>' and `<other-file>' have
changes in a common segment of lines. If a conflict is found, _git
merge-file_ normally outputs a warning and brackets the conflict with
lines containing <<<<<<< and >>>>>>> markers. A typical conflict will
look like this:

     <<<<<<< A
     lines in file A
     =======
     lines in file B
     >>>>>>> B

   If there are conflicts, the user should edit the result and delete
one of the alternatives.  When `--ours', `--theirs', or `--union'
option is in effect, however, these conflicts are resolved favouring
lines from `<current-file>', lines from `<other-file>', or lines from
both respectively.  The length of the conflict markers can be given
with the `--marker-size' option.

   The exit value of this program is negative on error, and the number
of conflicts otherwise. If the merge was clean, the exit value is 0.

   _git merge-file_ is designed to be a minimal clone of RCS _merge_;
that is, it implements all of RCS _merge_'s functionality which is
needed by git(1).



OPTIONS
*******

-L <label>
     This option may be given up to three times, and specifies labels
     to be used in place of the corresponding file names in conflict
     reports. That is, `git merge-file -L x -L y -L z a b c' generates
     output that looks like it came from files x, y and z instead of
     from files a, b and c.

-p
     Send results to standard output instead of overwriting
     `<current-file>'.

-q
     Quiet; do not warn about conflicts.

-ours
-theirs
-union
     Instead of leaving conflicts in the file, resolve conflicts
     favouring our (or their or both) side of the lines.


EXAMPLES
********

`git merge-file README.my README README.upstream'
     combines the changes of README.my and README.upstream since README,
     tries to merge them and writes the result into README.my.

`git merge-file -L a -L b -L c tmp/a123 tmp/b234 tmp/c345'
     merges tmp/a123 and tmp/c345 with the base tmp/b234, but uses
     labels `a' and `c' instead of `tmp/a123' and `tmp/c345'.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge-index,  Up: Top

Name
****

git-merge-index — Run a merge for files needing merging



Synopsis
********

     git merge-index [-o] [-q] <merge-program> (-a | [-] <file>*)


DESCRIPTION
***********

This looks up the <file>(s) in the index and, if there are any merge
entries, passes the SHA1 hash for those files as arguments 1, 2, 3
(empty argument if no file), and <file> as argument 4.  File modes for
the three files are passed as arguments 5, 6 and 7.



OPTIONS
*******

-
     Do not interpret any more arguments as options.

-a
     Run merge against all files in the index that need merging.

-o
     Instead of stopping at the first failed merge, do all of them in
     one shot - continue with merging even when previous merges
     returned errors, and only return the error code after all the
     merges.

-q
     Do not complain about a failed merge program (a merge program
     failure usually indicates conflicts during the merge). This is for
     porcelains which might want to emit custom messages.

   If _git merge-index_ is called with multiple <file>s (or -a) then it
processes them in turn only stopping if merge returns a non-zero exit
code.

   Typically this is run with a script calling git’s imitation of the
_merge_ command from the RCS package.

   A sample script called _git merge-one-file_ is included in the
distribution.

   ALERT ALERT ALERT! The git "merge object order" is different from the
RCS _merge_ program merge object order. In the above ordering, the
original is first. But the argument order to the 3-way merge program
_merge_ is to have the original in the middle. Don’t ask me why.

   Examples:

     torvalds@ppc970:~/merge-test> git merge-index cat MM
     This is MM from the original tree.                    # original
     This is modified MM in the branch A.                  # merge1
     This is modified MM in the branch B.                  # merge2
     This is modified MM in the branch B.                  # current contents

   or

     torvalds@ppc970:~/merge-test> git merge-index cat AA MM
     cat: : No such file or directory
     This is added AA in the branch A.
     This is added AA in the branch B.
     This is added AA in the branch B.
     fatal: merge program failed

   where the latter example shows how _git merge-index_ will stop
trying to merge once anything has returned an error (i.e., `cat'
returned an error for the AA file, because it didn’t exist in the
original, and thus _git merge-index_ didn’t even try to merge the MM
thing).



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge-one-file,  Up: Top

Name
****

git-merge-one-file — The standard helper program to use with
git-merge-index



Synopsis
********

     git merge-one-file


DESCRIPTION
***********

This is the standard helper program to use with _git merge-index_ to
resolve a merge after the trivial merge done with _git read-tree -m_.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge-tree,  Up: Top

Name
****

git-merge-tree — Show three-way merge without touching index



Synopsis
********

     git merge-tree <base-tree> <branch1> <branch2>


DESCRIPTION
***********

Reads three treeish, and output trivial merge results and conflicting
stages to the standard output.  This is similar to what three-way _git
read-tree -m_ does, but instead of storing the results in the index,
the command outputs the entries to the standard output.

   This is meant to be used by higher level scripts to compute merge
results outside of the index, and stuff the results back into the
index.  For this reason, the output from the command omits entries that
match the <branch1> tree.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge,  Up: Top

Name
****

git-merge — Join two or more development histories together



Synopsis
********

     git merge [-n] [-stat] [-no-commit] [-squash] [-[no-]edit]
             [-s <strategy>] [-X <strategy-option>]
             [-[no-]rerere-autoupdate] [-m <msg>] [<commit>…]
     git merge <msg> HEAD <commit>…
     git merge -abort


DESCRIPTION
***********

Incorporates changes from the named commits (since the time their
histories diverged from the current branch) into the current branch.
This command is used by _git pull_ to incorporate changes from another
repository and can be used by hand to merge changes from one branch
into another.

   Assume the following history exists and the current branch is
"`master'":

               A---B---C topic
              /
         D---E---F---G master

   Then "`git merge topic'" will replay the changes made on the `topic'
branch since it diverged from `master' (i.e., `E') until its current
commit (`C') on top of `master', and record the result in a new commit
along with the names of the two parent commits and a log message from
the user describing the changes.

               A---B---C topic
              /         \
         D---E---F---G---H master

   The second syntax (<msg> `HEAD' <commit>…) is supported for
historical reasons.  Do not use it from the command line or in new
scripts.  It is the same as `git merge -m <msg> <commit>...'.

   The third syntax ("`git merge --abort'") can only be run after the
merge has resulted in conflicts. _git merge -abort_ will abort the
merge process and try to reconstruct the pre-merge state. However, if
there were uncommitted changes when the merge started (and especially
if those changes were further modified after the merge was started),
_git merge -abort_ will in some cases be unable to reconstruct the
original (pre-merge) changes. Therefore:

   *Warning*: Running _git merge_ with uncommitted changes is
discouraged: while possible, it leaves you in a state that is hard to
back out of in the case of a conflict.



OPTIONS
*******

-commit
-no-commit
     Perform the merge and commit the result. This option can be used
     to override -no-commit.

     With -no-commit perform the merge but pretend the merge failed and
     do not autocommit, to give the user a chance to inspect and
     further tweak the merge result before committing.

-edit
-no-edit
     Invoke an editor before committing successful mechanical merge to
     further edit the auto-generated merge message, so that the user
     can explain and justify the merge. The `--no-edit' option can be
     used to accept the auto-generated message (this is generally
     discouraged). The `--edit' option is still useful if you are
     giving a draft message with the `-m' option from the command line
     and want to edit it in the editor.

     Older scripts may depend on the historical behaviour of not
     allowing the user to edit the merge log message. They will see an
     editor opened when they run `git merge'. To make it easier to
     adjust such scripts to the updated behaviour, the environment
     variable `GIT_MERGE_AUTOEDIT' can be set to `no' at the beginning
     of them.

-ff
     When the merge resolves as a fast-forward, only update the branch
     pointer, without creating a merge commit.  This is the default
     behavior.

-no-ff
     Create a merge commit even when the merge resolves as a
     fast-forward.

-ff-only
     Refuse to merge and exit with a non-zero status unless the current
     `HEAD' is already up-to-date or the merge can be resolved as a
     fast-forward.

-log[=<n>]
-no-log
     In addition to branch names, populate the log message with
     one-line descriptions from at most <n> actual commits that are
     being merged. See also git-fmt-merge-msg(1).

     With -no-log do not list one-line descriptions from the actual
     commits being merged.

-stat
-n
-no-stat
     Show a diffstat at the end of the merge. The diffstat is also
     controlled by the configuration option merge.stat.

     With -n or -no-stat do not show a diffstat at the end of the merge.

-squash
-no-squash
     Produce the working tree and index state as if a real merge
     happened (except for the merge information), but do not actually
     make a commit or move the `HEAD', nor record `$GIT_DIR/MERGE_HEAD'
     to cause the next `git commit' command to create a merge commit.
     This allows you to create a single commit on top of the current
     branch whose effect is the same as merging another branch (or more
     in case of an octopus).

     With -no-squash perform the merge and commit the result. This
     option can be used to override -squash.

-s <strategy>
-strategy=<strategy>
     Use the given merge strategy; can be supplied more than once to
     specify them in the order they should be tried.  If there is no
     `-s' option, a built-in list of strategies is used instead (_git
     merge-recursive_ when merging a single head, _git merge-octopus_
     otherwise).

-X <option>
-strategy-option=<option>
     Pass merge strategy specific option through to the merge strategy.

-summary
-no-summary
     Synonyms to -stat and -no-stat; these are deprecated and will be
     removed in the future.

-q
-quiet
     Operate quietly. Implies -no-progress.

-v
-verbose
     Be verbose.

-progress
-no-progress
     Turn progress on/off explicitly. If neither is specified, progress
     is shown if standard error is connected to a terminal.  Note that
     not all merge strategies may support progress reporting.

-m <msg>
     Set the commit message to be used for the merge commit (in case
     one is created).

     If `--log' is specified, a shortlog of the commits being merged
     will be appended to the specified message.

     The _git fmt-merge-msg_ command can be used to give a good default
     for automated _git merge_ invocations.

-rerere-autoupdate
-no-rerere-autoupdate
     Allow the rerere mechanism to update the index with the result of
     auto-conflict resolution if possible.

-abort
     Abort the current conflict resolution process, and try to
     reconstruct the pre-merge state.

     If there were uncommitted worktree changes present when the merge
     started, _git merge -abort_ will in some cases be unable to
     reconstruct these changes. It is therefore recommended to always
     commit or stash your changes before running _git merge_.

     _git merge -abort_ is equivalent to _git reset -merge_ when
     `MERGE_HEAD' is present.

<commit>…
     Commits, usually other branch heads, to merge into our branch.
     Specifying more than one commit will create a merge with more than
     two parents (affectionately called an Octopus merge).

     If no commit is given from the command line, and if
     `merge.defaultToUpstream' configuration variable is set, merge the
     remote tracking branches that the current branch is configured to
     use as its upstream.  See also the configuration section of this
     manual page.


PRE-MERGE CHECKS
****************

Before applying outside changes, you should get your own work in good
shape and committed locally, so it will not be clobbered if there are
conflicts.  See also git-stash(1).  _git pull_ and _git merge_ will
stop without doing anything when local uncommitted changes overlap with
files that _git pull_/_git merge_ may need to update.

   To avoid recording unrelated changes in the merge commit, _git pull_
and _git merge_ will also abort if there are any changes registered in
the index relative to the `HEAD' commit.  (One exception is when the
changed index entries are in the state that would result from the merge
already.)

   If all named commits are already ancestors of `HEAD', _git merge_
will exit early with the message "Already up-to-date."



FAST-FORWARD MERGE
******************

Often the current branch head is an ancestor of the named commit.  This
is the most common case especially when invoked from _git pull_: you
are tracking an upstream repository, you have committed no local
changes, and now you want to update to a newer upstream revision.  In
this case, a new commit is not needed to store the combined history;
instead, the `HEAD' (along with the index) is updated to point at the
named commit, without creating an extra merge commit.

   This behavior can be suppressed with the `--no-ff' option.



TRUE MERGE
**********

Except in a fast-forward merge (see above), the branches to be merged
must be tied together by a merge commit that has both of them as its
parents.

   A merged version reconciling the changes from all branches to be
merged is committed, and your `HEAD', index, and working tree are
updated to it.  It is possible to have modifications in the working
tree as long as they do not overlap; the update will preserve them.

   When it is not obvious how to reconcile the changes, the following
happens:

  1. The `HEAD' pointer stays the same.

  2. The `MERGE_HEAD' ref is set to point to the other branch head.

  3. Paths that merged cleanly are updated both in the index file and
     in your working tree.

  4. For conflicting paths, the index file records up to three
     versions: stage 1 stores the version from the common ancestor,
     stage 2 from `HEAD', and stage 3 from `MERGE_HEAD' (you can
     inspect the stages with `git ls-files -u').  The working tree
     files contain the result of the "merge" program; i.e. 3-way merge
     results with familiar conflict markers `<<<' `===' `>>>'.

  5. No other changes are made.  In particular, the local modifications
     you had before you started merge will stay the same and the index
     entries for them stay as they were, i.e. matching `HEAD'.

   If you tried a merge which resulted in complex conflicts and want to
start over, you can recover with `git merge --abort'.



HOW CONFLICTS ARE PRESENTED
***************************

During a merge, the working tree files are updated to reflect the result
of the merge.  Among the changes made to the common ancestor’s
version, non-overlapping ones (that is, you changed an area of the file
while the other side left that area intact, or vice versa) are
incorporated in the final result verbatim.  When both sides made
changes to the same area, however, git cannot randomly pick one side
over the other, and asks you to resolve it by leaving what both sides
did to that area.

   By default, git uses the same style as the one used by the "merge"
program from the RCS suite to present such a conflicted hunk, like this:

     Here are lines that are either unchanged from the common
     ancestor, or cleanly resolved because only one side changed.
     <<<<<<< yours:sample.txt
     Conflict resolution is hard;
     let's go shopping.
     =======
     Git makes conflict resolution easy.
     >>>>>>> theirs:sample.txt
     And here is another line that is cleanly resolved or unmodified.

   The area where a pair of conflicting changes happened is marked with
markers `<<<<<<<', `=======', and `>>>>>>>'.  The part before the
`=======' is typically your side, and the part afterwards is typically
their side.

   The default format does not show what the original said in the
conflicting area.  You cannot tell how many lines are deleted and
replaced with Barbie’s remark on your side.  The only thing you can
tell is that your side wants to say it is hard and you’d prefer to go
shopping, while the other side wants to claim it is easy.

   An alternative style can be used by setting the "merge.conflictstyle"
configuration variable to "diff3".  In "diff3" style, the above conflict
may look like this:

     Here are lines that are either unchanged from the common
     ancestor, or cleanly resolved because only one side changed.
     <<<<<<< yours:sample.txt
     Conflict resolution is hard;
     let's go shopping.
     |||||||
     Conflict resolution is hard.
     =======
     Git makes conflict resolution easy.
     >>>>>>> theirs:sample.txt
     And here is another line that is cleanly resolved or unmodified.

   In addition to the `<<<<<<<', `=======', and `>>>>>>>' markers, it
uses another `|||||||' marker that is followed by the original text.
You can tell that the original just stated a fact, and your side simply
gave in to that statement and gave up, while the other side tried to
have a more positive attitude.  You can sometimes come up with a better
resolution by viewing the original.



HOW TO RESOLVE CONFLICTS
************************

After seeing a conflict, you can do two things:

   * Decide not to merge.  The only clean-ups you need are to reset the
     index file to the `HEAD' commit to reverse 2. and to clean up
     working tree changes made by 2. and 3.; `git merge --abort' can be
     used for this.

   * Resolve the conflicts.  Git will mark the conflicts in the working
     tree.  Edit the files into shape and _git add_ them to the index.
     Use _git commit_ to seal the deal.

   You can work through the conflict with a number of tools:

   * Use a mergetool.  `git mergetool' to launch a graphical mergetool
     which will work you through the merge.

   * Look at the diffs.  `git diff' will show a three-way diff,
     highlighting changes from both the `HEAD' and `MERGE_HEAD'
     versions.

   * Look at the diffs from each branch. `git log --merge -p <path>'
     will show diffs first for the `HEAD' version and then the
     `MERGE_HEAD' version.

   * Look at the originals.  `git show :1:filename' shows the common
     ancestor, `git show :2:filename' shows the `HEAD' version, and
     `git show :3:filename' shows the `MERGE_HEAD' version.


EXAMPLES
********

   * Merge branches `fixes' and `enhancements' on top of the current
     branch, making an octopus merge:

          $ git merge fixes enhancements

   * Merge branch `obsolete' into the current branch, using `ours'
     merge strategy:

          $ git merge -s ours obsolete

   * Merge branch `maint' into the current branch, but do not make a
     new commit automatically:

          $ git merge --no-commit maint

     This can be used when you want to include further changes to the
     merge, or want to write your own merge commit message.

     You should refrain from abusing this option to sneak substantial
     changes into a merge commit.  Small fixups like bumping
     release/version name would be acceptable.


MERGE STRATEGIES
****************

The merge mechanism (_git-merge_ and _git-pull_ commands) allows the
backend _merge strategies_ to be chosen with `-s' option.  Some
strategies can also take their own options, which can be passed by
giving `-X<option>' arguments to _git-merge_ and/or _git-pull_.

resolve
     This can only resolve two heads (i.e. the current branch and
     another branch you pulled from) using a 3-way merge algorithm.  It
     tries to carefully detect criss-cross merge ambiguities and is
     considered generally safe and fast.

recursive
     This can only resolve two heads using a 3-way merge algorithm.
     When there is more than one common ancestor that can be used for
     3-way merge, it creates a merged tree of the common ancestors and
     uses that as the reference tree for the 3-way merge.  This has been
     reported to result in fewer merge conflicts without causing
     mis-merges by tests done on actual merge commits taken from Linux
     2.6 kernel development history.  Additionally this can detect and
     handle merges involving renames.  This is the default merge
     strategy when pulling or merging one branch.

     The _recursive_ strategy can take the following options:

    ours
          This option forces conflicting hunks to be auto-resolved
          cleanly by favoring _our_ version.  Changes from the other
          tree that do not conflict with our side are reflected to the
          merge result.

          This should not be confused with the _ours_ merge strategy,
          which does not even look at what the other tree contains at
          all.  It discards everything the other tree did, declaring
          _our_ history contains all that happened in it.

    theirs
          This is opposite of _ours_.

    patience
          With this option, _merge-recursive_ spends a little extra time
          to avoid mismerges that sometimes occur due to unimportant
          matching lines (e.g., braces from distinct functions).  Use
          this when the branches to be merged have diverged wildly.
          See also git-diff(1) `--patience'.

    ignore-space-change
    ignore-all-space
    ignore-space-at-eol
          Treats lines with the indicated type of whitespace change as
          unchanged for the sake of a three-way merge.  Whitespace
          changes mixed with other changes to a line are not ignored.
          See also git-diff(1) `-b', `-w', and `--ignore-space-at-eol'.

             * If _their_ version only introduces whitespace changes to
               a line, _our_ version is used;

             * If _our_ version introduces whitespace changes but
               _their_ version includes a substantial change, _their_
               version is used;

             * Otherwise, the merge proceeds in the usual way.

    renormalize
          This runs a virtual check-out and check-in of all three stages
          of a file when resolving a three-way merge.  This option is
          meant to be used when merging branches with different clean
          filters or end-of-line normalization rules.  See "Merging
          branches with differing checkin/checkout attributes" in
          gitattributes(5) for details.

    no-renormalize
          Disables the `renormalize' option.  This overrides the
          `merge.renormalize' configuration variable.

    rename-threshold=<n>
          Controls the similarity threshold used for rename detection.
          See also git-diff(1) `-M'.

    subtree[=<path>]
          This option is a more advanced form of _subtree_ strategy,
          where the strategy makes a guess on how two trees must be
          shifted to match with each other when merging.  Instead, the
          specified path is prefixed (or stripped from the beginning)
          to make the shape of two trees to match.

octopus
     This resolves cases with more than two heads, but refuses to do a
     complex merge that needs manual resolution.  It is primarily meant
     to be used for bundling topic branch heads together.  This is the
     default merge strategy when pulling or merging more than one
     branch.

ours
     This resolves any number of heads, but the resulting tree of the
     merge is always that of the current branch head, effectively
     ignoring all changes from all other branches.  It is meant to be
     used to supersede old development history of side branches.  Note
     that this is different from the -Xours option to the _recursive_
     merge strategy.

subtree
     This is a modified recursive strategy. When merging trees A and B,
     if B corresponds to a subtree of A, B is first adjusted to match
     the tree structure of A, instead of reading the trees at the same
     level. This adjustment is also done to the common ancestor tree.


CONFIGURATION
*************

merge.conflictstyle
     Specify the style in which conflicted hunks are written out to
     working tree files upon merge.  The default is "merge", which
     shows a `<<<<<<<' conflict marker, changes made by one side, a
     `=======' marker, changes made by the other side, and then a
     `>>>>>>>' marker.  An alternate style, "diff3", adds a `|||||||'
     marker and the original text before the `=======' marker.

merge.defaultToUpstream
     If merge is called without any commit argument, merge the upstream
     branches configured for the current branch by using their last
     observed values stored in their remote tracking branches.  The
     values of the `branch.<current branch>.merge' that name the
     branches at the remote named by `branch.<current branch>.remote'
     are consulted, and then they are mapped via `remote.<remote>.fetch'
     to their corresponding remote tracking branches, and the tips of
     these tracking branches are merged.

merge.ff
     By default, git does not create an extra merge commit when merging
     a commit that is a descendant of the current commit. Instead, the
     tip of the current branch is fast-forwarded. When set to `false',
     this variable tells git to create an extra merge commit in such a
     case (equivalent to giving the `--no-ff' option from the command
     line). When set to `only', only such fast-forward merges are
     allowed (equivalent to giving the `--ff-only' option from the
     command line).

merge.log
     In addition to branch names, populate the log message with at most
     the specified number of one-line descriptions from the actual
     commits that are being merged.  Defaults to false, and true is a
     synonym for 20.

merge.renameLimit
     The number of files to consider when performing rename detection
     during a merge; if not specified, defaults to the value of
     diff.renameLimit.

merge.renormalize
     Tell git that canonical representation of files in the repository
     has changed over time (e.g. earlier commits record text files with
     CRLF line endings, but recent ones use LF line endings).  In such
     a repository, git can convert the data recorded in commits to a
     canonical form before performing a merge to reduce unnecessary
     conflicts.  For more information, see section "Merging branches
     with differing checkin/checkout attributes" in gitattributes(5).

merge.stat
     Whether to print the diffstat between ORIG_HEAD and the merge
     result at the end of the merge.  True by default.

merge.tool
     Controls which merge resolution program is used by
     git-mergetool(1).  Valid built-in values are: "araxis", "bc3",
     "diffuse", "ecmerge", "emerge", "gvimdiff", "kdiff3", "meld",
     "opendiff", "p4merge", "tkdiff", "tortoisemerge", "vimdiff" and
     "xxdiff".  Any other value is treated is custom merge tool and
     there must be a corresponding mergetool.<tool>.cmd option.

merge.verbosity
     Controls the amount of output shown by the recursive merge
     strategy.  Level 0 outputs nothing except a final error message if
     conflicts were detected. Level 1 outputs only conflicts, 2 outputs
     conflicts and file changes.  Level 5 and above outputs debugging
     information.  The default is level 2.  Can be overridden by the
     _GIT_MERGE_VERBOSITY_ environment variable.

merge.<driver>.name
     Defines a human-readable name for a custom low-level merge driver.
     See gitattributes(5) for details.

merge.<driver>.driver
     Defines the command that implements a custom low-level merge
     driver.  See gitattributes(5) for details.

merge.<driver>.recursive
     Names a low-level merge driver to be used when performing an
     internal merge between common ancestors.  See gitattributes(5) for
     details.

branch.<name>.mergeoptions
     Sets default options for merging into branch <name>. The syntax and
     supported options are the same as those of _git merge_, but option
     values containing whitespace characters are currently not
     supported.


SEE ALSO
********

git-fmt-merge-msg(1), git-pull(1), gitattributes(5), git-reset(1),
git-diff(1), git-ls-files(1), git-add(1), git-rm(1), git-mergetool(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mergetool--lib,  Up: Top

Name
****

git-mergetool-lib — Common git merge tool shell scriptlets



Synopsis
********

     TOOL_MODE=(diff|merge) . "$(git -exec-path)/git-mergetool-lib"


DESCRIPTION
***********

This is not a command the end user would want to run.  Ever.  This
documentation is meant for people who are studying the Porcelain-ish
scripts and/or are writing new ones.

   The _git-mergetool-lib_ scriptlet is designed to be sourced (using
`.') by other shell scripts to set up functions for working with git
merge tools.

   Before sourcing _git-mergetool-lib_, your script must set `TOOL_MODE'
to define the operation mode for the functions listed below.  _diff_
and _merge_ are valid values.



FUNCTIONS
*********

get_merge_tool
     returns a merge tool.

get_merge_tool_cmd
     returns the custom command for a merge tool.

get_merge_tool_path
     returns the custom path for a merge tool.

run_merge_tool
     launches a merge tool given the tool name and a true/false flag to
     indicate whether a merge base is present.  _$MERGED_, _$LOCAL_,
     _$REMOTE_, and _$BASE_ must be defined for use by the merge tool.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mergetool,  Up: Top

Name
****

git-mergetool — Run merge conflict resolution tools to resolve merge
conflicts



Synopsis
********

     git mergetool [-tool=<tool>] [-y|-no-prompt|-prompt] [<file>…]


DESCRIPTION
***********

Use `git mergetool' to run one of several merge utilities to resolve
merge conflicts.  It is typically run after _git merge_.

   If one or more <file> parameters are given, the merge tool program
will be run to resolve differences on each file (skipping those without
conflicts).  Specifying a directory will include all unresolved files in
that path.  If no <file> names are specified, _git mergetool_ will run
the merge tool program on every file with merge conflicts.



OPTIONS
*******

-t <tool>
-tool=<tool>
     Use the merge resolution program specified by <tool>.  Valid
     values include emerge, gvimdiff, kdiff3, meld, vimdiff, and
     tortoisemerge. Run `git mergetool --tool-help' for the list of
     valid <tool> settings.

     If a merge resolution program is not specified, _git mergetool_
     will use the configuration variable `merge.tool'.  If the
     configuration variable `merge.tool' is not set, _git mergetool_
     will pick a suitable default.

     You can explicitly provide a full path to the tool by setting the
     configuration variable `mergetool.<tool>.path'. For example, you
     can configure the absolute path to kdiff3 by setting
     `mergetool.kdiff3.path'. Otherwise, _git mergetool_ assumes the
     tool is available in PATH.

     Instead of running one of the known merge tool programs, _git
     mergetool_ can be customized to run an alternative program by
     specifying the command line to invoke in a configuration variable
     `mergetool.<tool>.cmd'.

     When _git mergetool_ is invoked with this tool (either through the
     `-t' or `--tool' option or the `merge.tool' configuration
     variable) the configured command line will be invoked with `$BASE'
     set to the name of a temporary file containing the common base for
     the merge, if available; `$LOCAL' set to the name of a temporary
     file containing the contents of the file on the current branch;
     `$REMOTE' set to the name of a temporary file containing the
     contents of the file to be merged, and `$MERGED' set to the name
     of the file to which the merge tool should write the result of the
     merge resolution.

     If the custom merge tool correctly indicates the success of a
     merge resolution with its exit code, then the configuration
     variable `mergetool.<tool>.trustExitCode' can be set to `true'.
     Otherwise, _git mergetool_ will prompt the user to indicate the
     success of the resolution after the custom tool has exited.

-y
-no-prompt
     Don’t prompt before each invocation of the merge resolution
     program.

-prompt
     Prompt before each invocation of the merge resolution program.
     This is the default behaviour; the option is provided to override
     any configuration settings.


TEMPORARY FILES
***************

`git mergetool' creates `*.orig' backup files while resolving merges.
These are safe to remove once a file has been merged and its `git
mergetool' session has completed.

   Setting the `mergetool.keepBackup' configuration variable to `false'
causes `git mergetool' to automatically remove the backup as files are
successfully merged.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mktag,  Up: Top

Name
****

git-mktag — Creates a tag object



Synopsis
********

     git mktag < signature_file


DESCRIPTION
***********

Reads a tag contents on standard input and creates a tag object that
can also be used to sign other objects.

   The output is the new tag’s <object> identifier.



Tag Format
**********

A tag signature file has a very simple fixed format: four lines of

     object <sha1>
     type <typename>
     tag <tagname>
     tagger <tagger>

   followed by some _optional_ free-form message (some tags created by
older git may not have `tagger' line).  The message, when exists, is
separated by a blank line from the header.  The message part may
contain a signature that git itself doesn’t care about, but that can
be verified with gpg.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mktree,  Up: Top

Name
****

git-mktree — Build a tree-object from ls-tree formatted text



Synopsis
********

     git mktree [-z] [-missing] [-batch]


DESCRIPTION
***********

Reads standard input in non-recursive `ls-tree' output format, and
creates a tree object.  The order of the tree entries is normalised by
mktree so pre-sorting the input is not required.  The object name of
the tree object built is written to the standard output.



OPTIONS
*******

-z
     Read the NUL-terminated `ls-tree -z' output instead.

-missing
     Allow missing objects.  The default behaviour (without this option)
     is to verify that each tree entry’s sha1 identifies an existing
     object.  This option has no effect on the treatment of gitlink
     entries (aka "submodules") which are always allowed to be missing.

-batch
     Allow building of more than one tree object before exiting.  Each
     tree is separated by as single blank line. The final new-line is
     optional.  Note - if the _-z_ option is used, lines are terminated
     with NUL.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mv,  Up: Top

Name
****

git-mv — Move or rename a file, a directory, or a symlink



Synopsis
********

     git mv <options>… <args>…


DESCRIPTION
***********

This script is used to move or rename a file, directory or symlink.

     git mv [-v] [-f] [-n] [-k] <source> <destination>
     git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>

   In the first form, it renames <source>, which must exist and be
either a file, symlink or directory, to <destination>.  In the second
form, the last argument has to be an existing directory; the given
sources will be moved into this directory.

   The index is updated after successful completion, but the change
must still be committed.



OPTIONS
*******

-f
-force
     Force renaming or moving of a file even if the target exists

-k
     Skip move or rename actions which would lead to an error
     condition. An error happens when a source is neither existing nor
     controlled by GIT, or when it would overwrite an existing file
     unless _-f_ is given.

-n
-dry-run
     Do nothing; only show what would happen

-v
-verbose
     Report the names of files as they are moved.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-name-rev,  Up: Top

Name
****

git-name-rev — Find symbolic names for given revs



Synopsis
********

     git name-rev [-tags] [-refs=<pattern>]
                    ( -all | -stdin | <committish>… )


DESCRIPTION
***********

Finds symbolic names suitable for human digestion for revisions given
in any format parsable by _git rev-parse_.



OPTIONS
*******

-tags
     Do not use branch names, but only tags to name the commits

-refs=<pattern>
     Only use refs whose names match a given shell pattern.

-all
     List all commits reachable from all refs

-stdin
     Read from stdin, append "(<rev_name>)" to all sha1’s of nameable
     commits, and pass to stdout

-name-only
     Instead of printing both the SHA-1 and the name, print only the
     name.  If given with -tags the usual tag prefix of "tags/" is also
     omitted from the name, matching the output of `git-describe' more
     closely.

-no-undefined
     Die with error code != 0 when a reference is undefined, instead of
     printing `undefined'.

-always
     Show uniquely abbreviated commit object as fallback.


EXAMPLE
*******

Given a commit, find out where it is relative to the local refs. Say
somebody wrote you about that fantastic commit
33db5f4d9027a10e477ccf054b2c1ab94f74c85a.  Of course, you look into the
commit, but that only tells you what happened, but not the context.

   Enter _git name-rev_:

     % git name-rev 33db5f4d9027a10e477ccf054b2c1ab94f74c85a
     33db5f4d9027a10e477ccf054b2c1ab94f74c85a tags/v0.99~940

   Now you are wiser, because you know that it happened 940 revisions
before v0.99.

   Another nice thing you can do is:

     % git log | git name-rev --stdin


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-notes,  Up: Top

Name
****

git-notes — Add or inspect object notes



Synopsis
********

     git notes [list [<object>]]
     git notes add [-f] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
     git notes copy [-f] ( -stdin | <from-object> <to-object> )
     git notes append [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
     git notes edit [<object>]
     git notes show [<object>]
     git notes merge [-v | -q] [-s <strategy> ] <notes_ref>
     git notes merge -commit [-v | -q]
     git notes merge -abort [-v | -q]
     git notes remove [-ignore-missing] [-stdin] [<object>…]
     git notes prune [-n | -v]
     git notes get-ref


DESCRIPTION
***********

Adds, removes, or reads notes attached to objects, without touching the
objects themselves.

   By default, notes are saved to and read from `refs/notes/commits',
but this default can be overridden.  See the OPTIONS, CONFIGURATION, and
ENVIRONMENT sections below.  If this ref does not exist, it will be
quietly created when it is first needed to store a note.

   A typical use of notes is to supplement a commit message without
changing the commit itself. Notes can be shown by _git log_ along with
the original commit message. To distinguish these notes from the
message stored in the commit object, the notes are indented like the
message, after an unindented line saying "Notes (<refname>):" (or
"Notes:" for `refs/notes/commits').

   To change which notes are shown by _git log_, see the
"notes.displayRef" configuration in git-log(1).

   See the "notes.rewrite.<command>" configuration for a way to carry
notes across commands that rewrite commits.



SUBCOMMANDS
***********

list
     List the notes object for a given object. If no object is given,
     show a list of all note objects and the objects they annotate (in
     the format "<note object> <annotated object>").  This is the
     default subcommand if no subcommand is given.

add
     Add notes for a given object (defaults to HEAD). Abort if the
     object already has notes (use `-f' to overwrite existing notes).
     However, if you’re using `add' interactively (using an editor to
     supply the notes contents), then - instead of aborting - the
     existing notes will be opened in the editor (like the `edit'
     subcommand).

copy
     Copy the notes for the first object onto the second object.  Abort
     if the second object already has notes, or if the first object has
     none (use -f to overwrite existing notes to the second object).
     This subcommand is equivalent to: `git notes add [-f] -C $(git
     notes list <from-object>) <to-object>'

     In `--stdin' mode, take lines in the format

          <from-object> SP <to-object> [ SP <rest> ] LF

     on standard input, and copy the notes from each <from-object> to
     its corresponding <to-object>.  (The optional `<rest>' is ignored
     so that the command can read the input given to the `post-rewrite'
     hook.)

append
     Append to the notes of an existing object (defaults to HEAD).
     Creates a new notes object if needed.

edit
     Edit the notes for a given object (defaults to HEAD).

show
     Show the notes for a given object (defaults to HEAD).

merge
     Merge the given notes ref into the current notes ref.  This will
     try to merge the changes made by the given notes ref (called
     "remote") since the merge-base (if any) into the current notes ref
     (called "local").

     If conflicts arise and a strategy for automatically resolving
     conflicting notes (see the -s/-strategy option) is not given, the
     "manual" resolver is used. This resolver checks out the
     conflicting notes in a special worktree
     (`.git/NOTES_MERGE_WORKTREE'), and instructs the user to manually
     resolve the conflicts there.  When done, the user can either
     finalize the merge with _git notes merge -commit_, or abort the
     merge with _git notes merge -abort_.

remove
     Remove the notes for given objects (defaults to HEAD). When giving
     zero or one object from the command line, this is equivalent to
     specifying an empty note message to the `edit' subcommand.

prune
     Remove all notes for non-existing/unreachable objects.

get-ref
     Print the current notes ref. This provides an easy way to retrieve
     the current notes ref (e.g. from scripts).


OPTIONS
*******

-f
-force
     When adding notes to an object that already has notes, overwrite
     the existing notes (instead of aborting).

-m <msg>
-message=<msg>
     Use the given note message (instead of prompting).  If multiple
     `-m' options are given, their values are concatenated as separate
     paragraphs.  Lines starting with `#' and empty lines other than a
     single line between paragraphs will be stripped out.

-F <file>
-file=<file>
     Take the note message from the given file.  Use _-_ to read the
     note message from the standard input.  Lines starting with `#' and
     empty lines other than a single line between paragraphs will be
     stripped out.

-C <object>
-reuse-message=<object>
     Take the given blob object (for example, another note) as the note
     message. (Use `git notes copy <object>' instead to copy notes
     between objects.)

-c <object>
-reedit-message=<object>
     Like _-C_, but with _-c_ the editor is invoked, so that the user
     can further edit the note message.

-ref <ref>
     Manipulate the notes tree in <ref>.  This overrides
     _GIT_NOTES_REF_ and the "core.notesRef" configuration.  The ref is
     taken to be in `refs/notes/' if it is not qualified.

-ignore-missing
     Do not consider it an error to request removing notes from an
     object that does not have notes attached to it.

-stdin
     Also read the object names to remove notes from from the standard
     input (there is no reason you cannot combine this with object
     names from the command line).

-n
-dry-run
     Do not remove anything; just report the object names whose notes
     would be removed.

-s <strategy>
-strategy=<strategy>
     When merging notes, resolve notes conflicts using the given
     strategy. The following strategies are recognized: "manual"
     (default), "ours", "theirs", "union" and "cat_sort_uniq".  See the
     "NOTES MERGE STRATEGIES" section below for more information on
     each notes merge strategy.

-commit
     Finalize an in-progress _git notes merge_. Use this option when
     you have resolved the conflicts that _git notes merge_ stored in
     .git/NOTES_MERGE_WORKTREE. This amends the partial merge commit
     created by _git notes merge_ (stored in .git/NOTES_MERGE_PARTIAL)
     by adding the notes in .git/NOTES_MERGE_WORKTREE. The notes ref
     stored in the .git/NOTES_MERGE_REF symref is updated to the
     resulting commit.

-abort
     Abort/reset a in-progress _git notes merge_, i.e. a notes merge
     with conflicts. This simply removes all files related to the notes
     merge.

-q
-quiet
     When merging notes, operate quietly.

-v
-verbose
     When merging notes, be more verbose.  When pruning notes, report
     all object names whose notes are removed.


DISCUSSION
**********

Commit notes are blobs containing extra information about an object
(usually information to supplement a commit’s message).  These blobs
are taken from notes refs.  A notes ref is usually a branch which
contains "files" whose paths are the object names for the objects they
describe, with some directory separators included for performance
reasons (1).

   Every notes change creates a new commit at the specified notes ref.
You can therefore inspect the history of the notes by invoking, e.g.,
`git log -p notes/commits'.  Currently the commit message only records
which operation triggered the update, and the commit authorship is
determined according to the usual rules (see git-commit(1)).  These
details may change in the future.

   It is also permitted for a notes ref to point directly to a tree
object, in which case the history of the notes can be read with `git
log -p -g <refname>'.



NOTES MERGE STRATEGIES
**********************

The default notes merge strategy is "manual", which checks out
conflicting notes in a special work tree for resolving notes conflicts
(`.git/NOTES_MERGE_WORKTREE'), and instructs the user to resolve the
conflicts in that work tree.  When done, the user can either finalize
the merge with _git notes merge -commit_, or abort the merge with _git
notes merge -abort_.

   "ours" automatically resolves conflicting notes in favor of the local
version (i.e. the current notes ref).

   "theirs" automatically resolves notes conflicts in favor of the
remote version (i.e. the given notes ref being merged into the current
notes ref).

   "union" automatically resolves notes conflicts by concatenating the
local and remote versions.

   "cat_sort_uniq" is similar to "union", but in addition to
concatenating the local and remote versions, this strategy also sorts
the resulting lines, and removes duplicate lines from the result. This
is equivalent to applying the "cat | sort | uniq" shell pipeline to the
local and remote versions. This strategy is useful if the notes follow
a line-based format where one wants to avoid duplicated lines in the
merge result.  Note that if either the local or remote version contain
duplicate lines prior to the merge, these will also be removed by this
notes merge strategy.



EXAMPLES
********

You can use notes to add annotations with information that was not
available at the time a commit was written.

     $ git notes add -m 'Tested-by: Johannes Sixt <j6t@kdbg.org>' 72a144e2
     $ git show -s 72a144e
     [...]
         Signed-off-by: Junio C Hamano <gitster@pobox.com>

     Notes:
         Tested-by: Johannes Sixt <j6t@kdbg.org>

   In principle, a note is a regular Git blob, and any kind of
(non-)format is accepted.  You can binary-safely create notes from
arbitrary files using _git hash-object_:

     $ cc *.c
     $ blob=$(git hash-object -w a.out)
     $ git notes --ref=built add -C "$blob" HEAD

   (You cannot simply use `git notes --ref=built add -F a.out HEAD'
because that is not binary-safe.)  Of course, it doesn’t make much
sense to display non-text-format notes with _git log_, so if you use
such notes, you’ll probably need to write some special-purpose tools
to do something useful with them.



CONFIGURATION
*************

core.notesRef
     Notes ref to read and manipulate instead of `refs/notes/commits'.
     Must be an unabbreviated ref name.  This setting can be overridden
     through the environment and command line.

notes.displayRef
     Which ref (or refs, if a glob or specified more than once), in
     addition to the default set by `core.notesRef' or _GIT_NOTES_REF_,
     to read notes from when showing commit messages with the _git log_
     family of commands.  This setting can be overridden on the command
     line or by the _GIT_NOTES_DISPLAY_REF_ environment variable.  See
     git-log(1).

notes.rewrite.<command>
     When rewriting commits with <command> (currently `amend' or
     `rebase'), if this variable is `false', git will not copy notes
     from the original to the rewritten commit.  Defaults to `true'.
     See also "`notes.rewriteRef'" below.

     This setting can be overridden by the _GIT_NOTES_REWRITE_REF_
     environment variable.

notes.rewriteMode
     When copying notes during a rewrite, what to do if the target
     commit already has a note.  Must be one of `overwrite',
     `concatenate', and `ignore'.  Defaults to `concatenate'.

     This setting can be overridden with the `GIT_NOTES_REWRITE_MODE'
     environment variable.

notes.rewriteRef
     When copying notes during a rewrite, specifies the (fully
     qualified) ref whose notes should be copied.  May be a glob, in
     which case notes in all matching refs will be copied.  You may
     also specify this configuration several times.

     Does not have a default value; you must configure this variable to
     enable note rewriting.

     Can be overridden with the _GIT_NOTES_REWRITE_REF_ environment
     variable.


ENVIRONMENT
***********

_GIT_NOTES_REF_
     Which ref to manipulate notes from, instead of
     `refs/notes/commits'.  This overrides the `core.notesRef' setting.

_GIT_NOTES_DISPLAY_REF_
     Colon-delimited list of refs or globs indicating which refs, in
     addition to the default from `core.notesRef' or _GIT_NOTES_REF_,
     to read notes from when showing commit messages.  This overrides
     the `notes.displayRef' setting.

     A warning will be issued for refs that do not exist, but a glob
     that does not match any refs is silently ignored.

_GIT_NOTES_REWRITE_MODE_
     When copying notes during a rewrite, what to do if the target
     commit already has a note.  Must be one of `overwrite',
     `concatenate', and `ignore'.  This overrides the
     `core.rewriteMode' setting.

_GIT_NOTES_REWRITE_REF_
     When rewriting commits, which notes to copy from the original to
     the rewritten commit.  Must be a colon-delimited list of refs or
     globs.

     If not set in the environment, the list of notes to copy depends
     on the `notes.rewrite.<command>' and `notes.rewriteRef' settings.


Author
******

Written by Johannes Schindelin <johannes.schindelin@gmx.de
(mailto:johannes.schindelin@gmx.de)> and Johan Herland
<johan@herland.net (mailto:johan@herland.net)>



Documentation
*************

Documentation by Johannes Schindelin and Johan Herland



GIT
***

Part of the git(7) suite

   ---------- Footnotes ----------

   (1) Permitted pathnames have the form
_ab_`/'_cd_`/'_ef_`/'_…_`/'_abcdef…_: a sequence of directory names
of two hexadecimal digits each followed by a filename with the rest of
the object ID.


File: gitman.info,  Node: git-p4,  Up: Top

Name
****

git-p4 — Import from and submit to Perforce repositories



Synopsis
********

     git p4 clone [<sync options>] [<clone options>] <p4 depot path>…
     git p4 sync [<sync options>] [<p4 depot path>…]
     git p4 rebase
     git p4 submit [<submit options>] [<master branch name>]


DESCRIPTION
***********

This command provides a way to interact with p4 repositories using git.

   Create a new git repository from an existing p4 repository using
_git p4 clone_, giving it one or more p4 depot paths.  Incorporate new
commits from p4 changes with _git p4 sync_.  The _sync_ command is also
used to include new branches from other p4 depot paths.  Submit git
changes back to p4 using _git p4 submit_.  The command _git p4 rebase_
does a sync plus rebases the current branch onto the updated p4 remote
branch.



EXAMPLE
*******

   * Clone a repository:

          $ git p4 clone //depot/path/project

   * Do some work in the newly created git repository:

          $ cd project
          $ vi foo.h
          $ git commit -a -m "edited foo.h"

   * Update the git repository with recent changes from p4, rebasing
     your work on top:

          $ git p4 rebase

   * Submit your commits back to p4:

          $ git p4 submit



COMMANDS
********



Clone
=====

Generally, _git p4 clone_ is used to create a new git directory from an
existing p4 repository:

     $ git p4 clone //depot/path/project

   This:

  1. Creates an empty git repository in a subdirectory called _project_.

  2. Imports the full contents of the head revision from the given p4
     depot path into a single commit in the git branch
     _refs/remotes/p4/master_.

  3. Creates a local branch, _master_ from this remote and checks it
     out.

   To reproduce the entire p4 history in git, use the _@all_ modifier on
the depot path:

     $ git p4 clone //depot/path/project@all


Sync
====

As development continues in the p4 repository, those changes can be
included in the git repository using:

     $ git p4 sync

   This command finds new changes in p4 and imports them as git commits.

   P4 repositories can be added to an existing git repository using
_git p4 sync_ too:

     $ mkdir repo-git
     $ cd repo-git
     $ git init
     $ git p4 sync //path/in/your/perforce/depot

   This imports the specified depot into _refs/remotes/p4/master_ in an
existing git repository.  The _-branch_ option can be used to specify a
different branch to be used for the p4 content.

   If a git repository includes branches _refs/remotes/origin/p4_, these
will be fetched and consulted first during a _git p4 sync_.  Since
importing directly from p4 is considerably slower than pulling changes
from a git remote, this can be useful in a multi-developer environment.



Rebase
======

A common working pattern is to fetch the latest changes from the p4
depot and merge them with local uncommitted changes.  Often, the p4
repository is the ultimate location for all code, thus a rebase
workflow makes sense.  This command does _git p4 sync_ followed by _git
rebase_ to move local commits on top of updated p4 changes.

     $ git p4 rebase


Submit
======

Submitting changes from a git repository back to the p4 repository
requires a separate p4 client workspace.  This should be specified
using the _P4CLIENT_ environment variable or the git configuration
variable _git-p4.client_.  The p4 client must exist, but the client root
will be created and populated if it does not already exist.

   To submit all changes that are in the current git branch but not in
the _p4/master_ branch, use:

     $ git p4 submit

   To specify a branch other than the current one, use:

     $ git p4 submit topicbranch

   The upstream reference is generally _refs/remotes/p4/master_, but can
be overridden using the _-origin=_ command-line option.

   The p4 changes will be created as the user invoking _git p4 submit_.
The _-preserve-user_ option will cause ownership to be modified
according to the author of the git commit.  This option requires admin
privileges in p4, which can be granted using _p4 protect_.



OPTIONS
*******



General options
===============

All commands except clone accept these options.

-git-dir <dir>
     Set the _GIT_DIR_ environment variable.  See git(1).

-verbose
     Provide more progress information.


Sync options
============

These options can be used in the initial _clone_ as well as in
subsequent _sync_ operations.

-branch <branch>
     Import changes into given branch.  If the branch starts with
     _refs/_, it will be used as is, otherwise the path _refs/heads/_
     will be prepended.  The default branch is _master_.  If used with
     an initial clone, no HEAD will be checked out.

     This example imports a new remote "p4/proj2" into an existing git
     repository:

              $ git init
              $ git p4 sync --branch=refs/remotes/p4/proj2 //depot/proj2

-detect-branches
     Use the branch detection algorithm to find new paths in p4.  It is
     documented below in "BRANCH DETECTION".

-changesfile <file>
     Import exactly the p4 change numbers listed in _file_, one per
     line.  Normally, _git p4_ inspects the current p4 repository state
     and detects the changes it should import.

-silent
     Do not print any progress information.

-detect-labels
     Query p4 for labels associated with the depot paths, and add them
     as tags in git. Limited usefulness as only imports labels
     associated with new changelists. Deprecated.

-import-labels
     Import labels from p4 into git.

-import-local
     By default, p4 branches are stored in _refs/remotes/p4/_, where
     they will be treated as remote-tracking branches by git-branch(1)
     and other commands.  This option instead puts p4 branches in
     _refs/heads/p4/_.  Note that future sync operations must specify
     _-import-local_ as well so that they can find the p4 branches in
     refs/heads.

-max-changes <n>
     Limit the number of imported changes to _n_.  Useful to limit the
     amount of history when using the _@all_ p4 revision specifier.

-keep-path
     The mapping of file names from the p4 depot path to git, by
     default, involves removing the entire depot path.  With this
     option, the full p4 depot path is retained in git.  For example,
     path _//depot/main/foo/bar.c_, when imported from _//depot/main/_,
     becomes _foo/bar.c_.  With _-keep-path_, the git path is instead
     _depot/main/foo/bar.c_.

-use-client-spec
     Use a client spec to find the list of interesting files in p4.
     See the "CLIENT SPEC" section below.


Clone options
=============

These options can be used in an initial _clone_, along with the _sync_
options described above.

-destination <directory>
     Where to create the git repository.  If not provided, the last
     component in the p4 depot path is used to create a new directory.

-bare
     Perform a bare clone.  See git-clone(1).

-/ <path>
     Exclude selected depot paths when cloning.


Submit options
==============

These options can be used to modify _git p4 submit_ behavior.

-origin <commit>
     Upstream location from which commits are identified to submit to
     p4.  By default, this is the most recent p4 commit reachable from
     _HEAD_.

-M
     Detect renames.  See git-diff(1).  Renames will be represented in
     p4 using explicit _move_ operations.  There is no corresponding
     option to detect copies, but there are variables for both moves
     and copies.

-preserve-user
     Re-author p4 changes before submitting to p4.  This option
     requires p4 admin privileges.

-export-labels
     Export tags from git as p4 labels. Tags found in git are applied
     to the perforce working directory.


Rebase options
==============

These options can be used to modify _git p4 rebase_ behavior.

-import-labels
     Import p4 labels.


DEPOT PATH SYNTAX
*****************

The p4 depot path argument to _git p4 sync_ and _git p4 clone_ can be
one or more space-separated p4 depot paths, with an optional p4
revision specifier on the end:

"//depot/my/project"
     Import one commit with all files in the _#head_ change under that
     tree.

"//depot/my/project@all"
     Import one commit for each change in the history of that depot
     path.

"//depot/my/project@1,6"
     Import only changes 1 through 6.

"//depot/proj1@all //depot/proj2@all"
     Import all changes from both named depot paths into a single
     repository.  Only files below these directories are included.
     There is not a subdirectory in git for each "proj1" and "proj2".
     You must use the _-destination_ option when specifying more than
     one depot path.  The revision specifier must be specified
     identically on each depot path.  If there are files in the depot
     paths with the same name, the path with the most recently updated
     version of the file is the one that appears in git.

   See _p4 help revisions_ for the full syntax of p4 revision
specifiers.



CLIENT SPEC
***********

The p4 client specification is maintained with the _p4 client_ command
and contains among other fields, a View that specifies how the depot is
mapped into the client repository.  The _clone_ and _sync_ commands can
consult the client spec when given the _-use-client-spec_ option or
when the useClientSpec variable is true.  After _git p4 clone_, the
useClientSpec variable is automatically set in the repository
configuration file.  This allows future _git p4 submit_ commands to
work properly; the submit command looks only at the variable and does
not have a command-line option.

   The full syntax for a p4 view is documented in _p4 help views_.
_Git p4_ knows only a subset of the view syntax.  It understands
multi-line mappings, overlays with _+_, exclusions with _-_ and
double-quotes around whitespace.  Of the possible wildcards, _git p4_
only handles _…_, and only when it is at the end of the path.  _Git
p4_ will complain if it encounters an unhandled wildcard.

   Bugs in the implementation of overlap mappings exist.  If multiple
depot paths map through overlays to the same location in the repository,
_git p4_ can choose the wrong one.  This is hard to solve without
dedicating a client spec just for _git p4_.

   The name of the client can be given to _git p4_ in multiple ways.
The variable _git-p4.client_ takes precedence if it exists.  Otherwise,
normal p4 mechanisms of determining the client are used:  environment
variable P4CLIENT, a file referenced by P4CONFIG, or the local host
name.



BRANCH DETECTION
****************

P4 does not have the same concept of a branch as git.  Instead, p4
organizes its content as a directory tree, where by convention
different logical branches are in different locations in the tree.  The
_p4 branch_ command is used to maintain mappings between different
areas in the tree, and indicate related content.  _git p4_ can use
these mappings to determine branch relationships.

   If you have a repository where all the branches of interest exist as
subdirectories of a single depot path, you can use _-detect-branches_
when cloning or syncing to have _git p4_ automatically find
subdirectories in p4, and to generate these as branches in git.

   For example, if the P4 repository structure is:

     //depot/main/...
     //depot/branch1/...

   And "p4 branch -o branch1" shows a View line that looks like:

     //depot/main/... //depot/branch1/...

   Then this _git p4 clone_ command:

     git p4 clone --detect-branches //depot@all

   produces a separate branch in _refs/remotes/p4/_ for //depot/main,
called _master_, and one for //depot/branch1 called _depot/branch1_.

   However, it is not necessary to create branches in p4 to be able to
use them like branches.  Because it is difficult to infer branch
relationships automatically, a git configuration setting
_git-p4.branchList_ can be used to explicitly identify branch
relationships.  It is a list of "source:destination" pairs, like a
simple p4 branch specification, where the "source" and "destination" are
the path elements in the p4 repository.  The example above relied on the
presence of the p4 branch.  Without p4 branches, the same result will
occur with:

     git config git-p4.branchList main:branch1
     git p4 clone --detect-branches //depot@all


PERFORMANCE
***********

The fast-import mechanism used by _git p4_ creates one pack file for
each invocation of _git p4 sync_.  Normally, git garbage compression
(git-gc(1)) automatically compresses these to fewer pack files, but
explicit invocation of _git repack -adf_ may improve performance.



CONFIGURATION VARIABLES
***********************

The following config settings can be used to modify _git p4_ behavior.
They all are in the _git-p4_ section.



General variables
=================

git-p4.user
     User specified as an option to all p4 commands, with _-u <user>_.
     The environment variable _P4USER_ can be used instead.

git-p4.password
     Password specified as an option to all p4 commands, with _-P
     <password>_.  The environment variable _P4PASS_ can be used
     instead.

git-p4.port
     Port specified as an option to all p4 commands, with _-p <port>_.
     The environment variable _P4PORT_ can be used instead.

git-p4.host
     Host specified as an option to all p4 commands, with _-h <host>_.
     The environment variable _P4HOST_ can be used instead.

git-p4.client
     Client specified as an option to all p4 commands, with _-c
     <client>_, including the client spec.


Clone and sync variables
========================

git-p4.syncFromOrigin
     Because importing commits from other git repositories is much
     faster than importing them from p4, a mechanism exists to find p4
     changes first in git remotes.  If branches exist under
     _refs/remote/origin/p4_, those will be fetched and used when
     syncing from p4.  This variable can be set to _false_ to disable
     this behavior.

git-p4.branchUser
     One phase in branch detection involves looking at p4 branches to
     find new ones to import.  By default, all branches are inspected.
     This option limits the search to just those owned by the single
     user named in the variable.

git-p4.branchList
     List of branches to be imported when branch detection is enabled.
     Each entry should be a pair of branch names separated by a colon
     (:).  This example declares that both branchA and branchB were
     created from main:

          git config       git-p4.branchList main:branchA
          git config --add git-p4.branchList main:branchB

git-p4.ignoredP4Labels
     List of p4 labels to ignore. This is built automatically as
     unimportable labels are discovered.

git-p4.importLabels
     Import p4 labels into git, as per -import-labels.

git-p4.labelImportRegexp
     Only p4 labels matching this regular expression will be imported.
     The default value is _[a-zA-Z0-9_\-.]+$_.

git-p4.useClientSpec
     Specify that the p4 client spec should be used to identify p4
     depot paths of interest.  This is equivalent to specifying the
     option _-use-client-spec_.  See the "CLIENT SPEC" section above.
     This variable is a boolean, not the name of a p4 client.


Submit variables
================

git-p4.detectRenames
     Detect renames.  See git-diff(1).  This can be true, false, or a
     score as expected by _git diff -M_.

git-p4.detectCopies
     Detect copies.  See git-diff(1).  This can be true, false, or a
     score as expected by _git diff -C_.

git-p4.detectCopiesHarder
     Detect copies harder.  See git-diff(1).  A boolean.

git-p4.preserveUser
     On submit, re-author changes to reflect the git author, regardless
     of who invokes _git p4 submit_.

git-p4.allowMissingP4Users
     When _preserveUser_ is true, _git p4_ normally dies if it cannot
     find an author in the p4 user map.  This setting submits the
     change regardless.

git-p4.skipSubmitEdit
     The submit process invokes the editor before each p4 change is
     submitted.  If this setting is true, though, the editing step is
     skipped.

git-p4.skipSubmitEditCheck
     After editing the p4 change message, _git p4_ makes sure that the
     description really was changed by looking at the file modification
     time.  This option disables that test.

git-p4.allowSubmit
     By default, any branch can be used as the source for a _git p4
     submit_ operation.  This configuration variable, if set, permits
     only the named branches to be used as submit sources.  Branch names
     must be the short names (no "refs/heads/"), and should be
     separated by commas (","), with no spaces.

git-p4.skipUserNameCheck
     If the user running _git p4 submit_ does not exist in the p4 user
     map, _git p4_ exits.  This option can be used to force submission
     regardless.

git-p4.attemptRCSCleanup
     If enabled, _git p4 submit_ will attempt to cleanup RCS keywords
     ($Header$, etc). These would otherwise cause merge conflicts and
     prevent the submit going ahead. This option should be considered
     experimental at present.

git-p4.exportLabels
     Export git tags to p4 labels, as per -export-labels.

git-p4.labelExportRegexp
     Only p4 labels matching this regular expression will be exported.
     The default value is _[a-zA-Z0-9_\-.]+$_.


IMPLEMENTATION DETAILS
**********************

   * Changesets from p4 are imported using git fast-import.

   * Cloning or syncing does not require a p4 client; file contents are
     collected using _p4 print_.

   * Submitting requires a p4 client, which is not in the same location
     as the git repository.  Patches are applied, one at a time, to
     this p4 client and submitted from there.

   * Each commit imported by _git p4_ has a line at the end of the log
     message indicating the p4 depot location and change number.  This
     line is used by later _git p4 sync_ operations to know which p4
     changes are new.


File: gitman.info,  Node: git-pack-objects,  Up: Top

Name
****

git-pack-objects — Create a packed archive of objects



Synopsis
********

     git pack-objects [-q | -progress | -all-progress] [-all-progress-implied]
             [-no-reuse-delta] [-delta-base-offset] [-non-empty]
             [-local] [-incremental] [-window=<n>] [-depth=<n>]
             [-revs [-unpacked | -all]] [-stdout | base-name]
             [-keep-true-parents] < object-list


DESCRIPTION
***********

Reads list of objects from the standard input, and writes a packed
archive with specified base-name, or to the standard output.

   A packed archive is an efficient way to transfer a set of objects
between two repositories as well as an access efficient archival
format.  In a packed archive, an object is either stored as a
compressed whole or as a difference from some other object.  The latter
is often called a delta.

   The packed archive format (.pack) is designed to be self-contained
so that it can be unpacked without any further information. Therefore,
each object that a delta depends upon must be present within the pack.

   A pack index file (.idx) is generated for fast, random access to the
objects in the pack. Placing both the index file (.idx) and the packed
archive (.pack) in the pack/ subdirectory of $GIT_OBJECT_DIRECTORY (or
any of the directories on $GIT_ALTERNATE_OBJECT_DIRECTORIES) enables
git to read from the pack archive.

   The _git unpack-objects_ command can read the packed archive and
expand the objects contained in the pack into "one-file one-object"
format; this is typically done by the smart-pull commands when a pack
is created on-the-fly for efficient network transport by their peers.



OPTIONS
*******

base-name
     Write into a pair of files (.pack and .idx), using <base-name> to
     determine the name of the created file.  When this option is used,
     the two files are written in <base-name>-<SHA1>.{pack,idx} files.
     <SHA1> is a hash of the sorted object names to make the resulting
     filename based on the pack content, and written to the standard
     output of the command.

-stdout
     Write the pack contents (what would have been written to .pack
     file) out to the standard output.

-revs
     Read the revision arguments from the standard input, instead of
     individual object names.  The revision arguments are processed the
     same way as _git rev-list_ with the `--objects' flag uses its
     `commit' arguments to build the list of objects it outputs.  The
     objects on the resulting list are packed.

-unpacked
     This implies `--revs'.  When processing the list of revision
     arguments read from the standard input, limit the objects packed
     to those that are not already packed.

-all
     This implies `--revs'.  In addition to the list of revision
     arguments read from the standard input, pretend as if all refs
     under `refs/' are specified to be included.

-include-tag
     Include unasked-for annotated tags if the object they reference
     was included in the resulting packfile.  This can be useful to
     send new tags to native git clients.

-window=<n>
-depth=<n>
     These two options affect how the objects contained in the pack are
     stored using delta compression.  The objects are first internally
     sorted by type, size and optionally names and compared against the
     other objects within -window to see if using delta compression
     saves space.  -depth limits the maximum delta depth; making it too
     deep affects the performance on the unpacker side, because delta
     data needs to be applied that many times to get to the necessary
     object.  The default value for -window is 10 and -depth is 50.

-window-memory=<n>
     This option provides an additional limit on top of `--window'; the
     window size will dynamically scale down so as to not take up more
     than _<n>_ bytes in memory.  This is useful in repositories with a
     mix of large and small objects to not run out of memory with a
     large window, but still be able to take advantage of the large
     window for the smaller objects.  The size can be suffixed with
     "k", "m", or "g".  `--window-memory=0' makes memory usage
     unlimited, which is the default.

-max-pack-size=<n>
     Maximum size of each output pack file. The size can be suffixed
     with "k", "m", or "g". The minimum size allowed is limited to 1
     MiB.  If specified,  multiple packfiles may be created.  The
     default is unlimited, unless the config variable
     `pack.packSizeLimit' is set.

-honor-pack-keep
     This flag causes an object already in a local pack that has a
     .keep file to be ignored, even if it would have otherwise been
     packed.

-incremental
     This flag causes an object already in a pack to be ignored even if
     it would have otherwise been packed.

-local
     This flag causes an object that is borrowed from an alternate
     object store to be ignored even if it would have otherwise been
     packed.

-non-empty
     Only create a packed archive if it would contain at least one
     object.

-progress
     Progress status is reported on the standard error stream by
     default when it is attached to a terminal, unless -q is specified.
     This flag forces progress status even if the standard error stream
     is not directed to a terminal.

-all-progress
     When -stdout is specified then progress report is displayed during
     the object count and compression phases but inhibited during the
     write-out phase. The reason is that in some cases the output
     stream is directly linked to another command which may wish to
     display progress status of its own as it processes incoming pack
     data.  This flag is like -progress except that it forces progress
     report for the write-out phase as well even if -stdout is used.

-all-progress-implied
     This is used to imply -all-progress whenever progress display is
     activated.  Unlike -all-progress this flag doesn’t actually
     force any progress display by itself.

-q
     This flag makes the command not to report its progress on the
     standard error stream.

-no-reuse-delta
     When creating a packed archive in a repository that has existing
     packs, the command reuses existing deltas.  This sometimes results
     in a slightly suboptimal pack.  This flag tells the command not to
     reuse existing deltas but compute them from scratch.

-no-reuse-object
     This flag tells the command not to reuse existing object data at
     all, including non deltified object, forcing recompression of
     everything.  This implies -no-reuse-delta. Useful only in the
     obscure case where wholesale enforcement of a different
     compression level on the packed data is desired.

-compression=<n>
     Specifies compression level for newly-compressed data in the
     generated pack.  If not specified,  pack compression level is
     determined first by pack.compression,  then by core.compression,
     and defaults to -1,  the zlib default,  if neither is set.  Add
     -no-reuse-object if you want to force a uniform compression level
     on all data no matter the source.

-thin
     Create a "thin" pack by omitting the common objects between a
     sender and a receiver in order to reduce network transfer. This
     option only makes sense in conjunction with -stdout.

     Note: A thin pack violates the packed archive format by omitting
     required objects and is thus unusable by git without making it
     self-contained. Use `git index-pack --fix-thin' (see
     git-index-pack(1)) to restore the self-contained property.

-delta-base-offset
     A packed archive can express the base object of a delta as either
     a 20-byte object name or as an offset in the stream, but ancient
     versions of git don’t understand the latter.  By default, _git
     pack-objects_ only uses the former format for better
     compatibility.  This option allows the command to use the latter
     format for compactness.  Depending on the average delta chain
     length, this option typically shrinks the resulting packfile by
     3-5 per-cent.

     Note: Porcelain commands such as `git gc' (see git-gc(1)), `git
     repack' (see git-repack(1)) pass this option by default in modern
     git when they put objects in your repository into pack files.  So
     does `git bundle' (see git-bundle(1)) when it creates a bundle.

-threads=<n>
     Specifies the number of threads to spawn when searching for best
     delta matches.  This requires that pack-objects be compiled with
     pthreads otherwise this option is ignored with a warning.  This is
     meant to reduce packing time on multiprocessor machines.  The
     required amount of memory for the delta search window is however
     multiplied by the number of threads.  Specifying 0 will cause git
     to auto-detect the number of CPU’s and set the number of threads
     accordingly.

-index-version=<version>[,<offset>]
     This is intended to be used by the test suite only. It allows to
     force the version for the generated pack index, and to force
     64-bit index entries on objects located above the given offset.

-keep-true-parents
     With this option, parents that are hidden by grafts are packed
     nevertheless.


SEE ALSO
********

git-rev-list(1) git-repack(1) git-prune-packed(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-pack-redundant,  Up: Top

Name
****

git-pack-redundant — Find redundant pack files



Synopsis
********

     git pack-redundant [ -verbose ] [ -alt-odb ] < -all | .pack filename … >


DESCRIPTION
***********

This program computes which packs in your repository are redundant. The
output is suitable for piping to `xargs rm' if you are in the root of
the repository.

   _git pack-redundant_ accepts a list of objects on standard input.
Any objects given will be ignored when checking which packs are
required. This makes the following command useful when wanting to
remove packs which contain unreachable objects.

   git fsck -full -unreachable | cut -d ' ' -f3 | \ git pack-redundant
-all | xargs rm



OPTIONS
*******

-all
     Processes all packs. Any filenames on the command line are ignored.

-alt-odb
     Don’t require objects present in packs from alternate object
     directories to be present in local packs.

-verbose
     Outputs some statistics to stderr. Has a small performance penalty.


SEE ALSO
********

git-pack-objects(1) git-repack(1) git-prune-packed(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-pack-refs,  Up: Top

Name
****

git-pack-refs — Pack heads and tags for efficient repository access



Synopsis
********

     git pack-refs [-all] [-no-prune]


DESCRIPTION
***********

Traditionally, tips of branches and tags (collectively known as _refs_)
were stored one file per ref in a (sub)directory under `$GIT_DIR/refs'
directory.  While many branch tips tend to be updated often, most tags
and some branch tips are never updated.  When a repository has hundreds
or thousands of tags, this one-file-per-ref format both wastes storage
and hurts performance.

   This command is used to solve the storage and performance problem by
storing the refs in a single file, `$GIT_DIR/packed-refs'.  When a ref
is missing from the traditional `$GIT_DIR/refs' directory hierarchy, it
is looked up in this file and used if found.

   Subsequent updates to branches always create new files under
`$GIT_DIR/refs' directory hierarchy.

   A recommended practice to deal with a repository with too many refs
is to pack its refs with `--all --prune' once, and occasionally run
`git pack-refs --prune'.  Tags are by definition stationary and are not
expected to change.  Branch heads will be packed with the initial
`pack-refs --all', but only the currently active branch heads will
become unpacked, and the next `pack-refs' (without `--all') will leave
them unpacked.



OPTIONS
*******

-all
     The command by default packs all tags and refs that are already
     packed, and leaves other refs alone.  This is because branches are
     expected to be actively developed and packing their tips does not
     help performance.  This option causes branch tips to be packed as
     well.  Useful for a repository with many branches of historical
     interests.

-no-prune
     The command usually removes loose refs under `$GIT_DIR/refs'
     hierarchy after packing them.  This option tells it not to.


BUGS
****

Older documentation written before the packed-refs mechanism was
introduced may still say things like ".git/refs/heads/<branch> file
exists" when it means "branch <branch> exists".



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-parse-remote,  Up: Top

Name
****

git-parse-remote — Routines to help parsing remote repository access
parameters



Synopsis
********

     . "$(git -exec-path)/git-parse-remote"


DESCRIPTION
***********

This script is included in various scripts to supply routines to parse
files under $GIT_DIR/remotes/ and $GIT_DIR/branches/ and configuration
variables that are related to fetching, pulling and pushing.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-patch-id,  Up: Top

Name
****

git-patch-id — Compute unique ID for a patch



Synopsis
********

     git patch-id < <patch>


DESCRIPTION
***********

A "patch ID" is nothing but a SHA1 of the diff associated with a patch,
with whitespace and line numbers ignored.  As such, it’s "reasonably
stable", but at the same time also reasonably unique, i.e., two patches
that have the same "patch ID" are almost guaranteed to be the same
thing.

   IOW, you can use this thing to look for likely duplicate commits.

   When dealing with _git diff-tree_ output, it takes advantage of the
fact that the patch is prefixed with the object name of the commit, and
outputs two 40-byte hexadecimal strings.  The first string is the patch
ID, and the second string is the commit ID.  This can be used to make a
mapping from patch ID to commit ID.



OPTIONS
*******

<patch>
     The diff to create the ID of.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-peek-remote,  Up: Top

Name
****

git-peek-remote — List the references in a remote repository



Synopsis
********

     git peek-remote [-upload-pack=<git-upload-pack>] [<host>:]<directory>


DESCRIPTION
***********

This command is deprecated; use _git ls-remote_ instead.



OPTIONS
*******

-upload-pack=<git-upload-pack>
     Use this to specify the path to _git-upload-pack_ on the remote
     side, if it is not found on your $PATH. Some installations of sshd
     ignores the user’s environment setup scripts for login shells
     (e.g. .bash_profile) and your privately installed git may not be
     found on the system default $PATH.  Another workaround suggested
     is to set up your $PATH in ".bashrc", but this flag is for people
     who do not want to pay the overhead for non-interactive shells,
     but prefer having a lean .bashrc file (they set most of the things
     up in .bash_profile).

<host>
     A remote host that houses the repository.  When this part is
     specified, _git-upload-pack_ is invoked via ssh.

<directory>
     The repository to sync from.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-prune-packed,  Up: Top

Name
****

git-prune-packed — Remove extra objects that are already in pack files



Synopsis
********

     git prune-packed [-n|-dry-run] [-q|-quiet]


DESCRIPTION
***********

This program searches the `$GIT_OBJECT_DIR' for all objects that
currently exist in a pack file as well as the independent object
directories.

   All such extra objects are removed.

   A pack is a collection of objects, individually compressed, with
delta compression applied, stored in a single file, with an associated
index file.

   Packs are used to reduce the load on mirror systems, backup engines,
disk storage, etc.



OPTIONS
*******

-n
-dry-run
     Don’t actually remove any objects, only show those that would
     have been removed.

-q
-quiet
     Squelch the progress indicator.


SEE ALSO
********

git-pack-objects(1) git-repack(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-prune,  Up: Top

Name
****

git-prune — Prune all unreachable objects from the object database



Synopsis
********

     git prune [-n] [-v] [-expire <expire>] [-] [<head>…]


DESCRIPTION
***********

     *Note*

     In most cases, users should run _git gc_, which calls _git prune_.
     See the section "NOTES", below.

   This runs _git fsck -unreachable_ using all the refs available in
`refs/', optionally with additional set of objects specified on the
command line, and prunes all unpacked objects unreachable from any of
these head objects from the object database.  In addition, it prunes
the unpacked objects that are also found in packs by running _git
prune-packed_.

   Note that unreachable, packed objects will remain.  If this is not
desired, see git-repack(1).



OPTIONS
*******

-n
-dry-run
     Do not remove anything; just report what it would remove.

-v
-verbose
     Report all removed objects.

-
     Do not interpret any more arguments as options.

-expire <time>
     Only expire loose objects older than <time>.

<head>…
     In addition to objects reachable from any of our references, keep
     objects reachable from listed <head>s.


EXAMPLE
*******

To prune objects not used by your repository nor another that borrows
from your repository via its `.git/objects/info/alternates':

     $ git prune $(cd ../another && $(git rev-parse --all))


Notes
*****

In most cases, users will not need to call _git prune_ directly, but
should instead call _git gc_, which handles pruning along with many
other housekeeping tasks.

   For a description of which objects are considered for pruning, see
_git fsck_'s -unreachable option.



SEE ALSO
********

git-fsck(1), git-gc(1), git-reflog(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-pull,  Up: Top

Name
****

git-pull — Fetch from and merge with another repository or a local
branch



Synopsis
********

     git pull [options] [<repository> [<refspec>…]]


DESCRIPTION
***********

Incorporates changes from a remote repository into the current branch.
In its default mode, `git pull' is shorthand for `git fetch' followed
by `git merge FETCH_HEAD'.

   More precisely, _git pull_ runs _git fetch_ with the given
parameters and calls _git merge_ to merge the retrieved branch heads
into the current branch.  With `--rebase', it runs _git rebase_ instead
of _git merge_.

   <repository> should be the name of a remote repository as passed to
git-fetch(1).  <refspec> can name an arbitrary remote ref (for example,
the name of a tag) or even a collection of refs with corresponding
remote-tracking branches (e.g., refs/heads/*:refs/remotes/origin/*),
but usually it is the name of a branch in the remote repository.

   Default values for <repository> and <branch> are read from the
"remote" and "merge" configuration for the current branch as set by
git-branch(1) `--track'.

   Assume the following history exists and the current branch is
"`master'":

               A---B---C master on origin
              /
         D---E---F---G master

   Then "`git pull'" will fetch and replay the changes from the remote
`master' branch since it diverged from the local `master' (i.e., `E')
until its current commit (`C') on top of `master' and record the result
in a new commit along with the names of the two parent commits and a
log message from the user describing the changes.

               A---B---C remotes/origin/master
              /         \
         D---E---F---G---H master

   See git-merge(1) for details, including how conflicts are presented
and handled.

   In git 1.7.0 or later, to cancel a conflicting merge, use `git reset
--merge'.  *Warning*: In older versions of git, running _git pull_ with
uncommitted changes is discouraged: while possible, it leaves you in a
state that may be hard to back out of in the case of a conflict.

   If any of the remote changes overlap with local uncommitted changes,
the merge will be automatically cancelled and the work tree untouched.
It is generally best to get any local changes in working order before
pulling or stash them away with git-stash(1).



OPTIONS
*******

Options meant for _git pull_ itself and the underlying _git merge_ must
be given before the options meant for _git fetch_.

-q
-quiet
     This is passed to both underlying git-fetch to squelch reporting of
     during transfer, and underlying git-merge to squelch output during
     merging.

-v
-verbose
     Pass -verbose to git-fetch and git-merge.

-[no-]recurse-submodules[=yes|on-demand|no]
     This option controls if new commits of all populated submodules
     should be fetched too (see git-config(1) and gitmodules(5)).  That
     might be necessary to get the data needed for merging submodule
     commits, a feature git learned in 1.7.3. Notice that the result of
     a merge will not be checked out in the submodule, "git submodule
     update" has to be called afterwards to bring the work tree up to
     date with the merge result.


Options related to merging
==========================

-commit
-no-commit
     Perform the merge and commit the result. This option can be used
     to override -no-commit.

     With -no-commit perform the merge but pretend the merge failed and
     do not autocommit, to give the user a chance to inspect and
     further tweak the merge result before committing.

-edit
-no-edit
     Invoke an editor before committing successful mechanical merge to
     further edit the auto-generated merge message, so that the user
     can explain and justify the merge. The `--no-edit' option can be
     used to accept the auto-generated message (this is generally
     discouraged). The `--edit' option is still useful if you are
     giving a draft message with the `-m' option from the command line
     and want to edit it in the editor.

     Older scripts may depend on the historical behaviour of not
     allowing the user to edit the merge log message. They will see an
     editor opened when they run `git merge'. To make it easier to
     adjust such scripts to the updated behaviour, the environment
     variable `GIT_MERGE_AUTOEDIT' can be set to `no' at the beginning
     of them.

-ff
     When the merge resolves as a fast-forward, only update the branch
     pointer, without creating a merge commit.  This is the default
     behavior.

-no-ff
     Create a merge commit even when the merge resolves as a
     fast-forward.

-ff-only
     Refuse to merge and exit with a non-zero status unless the current
     `HEAD' is already up-to-date or the merge can be resolved as a
     fast-forward.

-log[=<n>]
-no-log
     In addition to branch names, populate the log message with
     one-line descriptions from at most <n> actual commits that are
     being merged. See also git-fmt-merge-msg(1).

     With -no-log do not list one-line descriptions from the actual
     commits being merged.

-stat
-n
-no-stat
     Show a diffstat at the end of the merge. The diffstat is also
     controlled by the configuration option merge.stat.

     With -n or -no-stat do not show a diffstat at the end of the merge.

-squash
-no-squash
     Produce the working tree and index state as if a real merge
     happened (except for the merge information), but do not actually
     make a commit or move the `HEAD', nor record `$GIT_DIR/MERGE_HEAD'
     to cause the next `git commit' command to create a merge commit.
     This allows you to create a single commit on top of the current
     branch whose effect is the same as merging another branch (or more
     in case of an octopus).

     With -no-squash perform the merge and commit the result. This
     option can be used to override -squash.

-s <strategy>
-strategy=<strategy>
     Use the given merge strategy; can be supplied more than once to
     specify them in the order they should be tried.  If there is no
     `-s' option, a built-in list of strategies is used instead (_git
     merge-recursive_ when merging a single head, _git merge-octopus_
     otherwise).

-X <option>
-strategy-option=<option>
     Pass merge strategy specific option through to the merge strategy.

-summary
-no-summary
     Synonyms to -stat and -no-stat; these are deprecated and will be
     removed in the future.

-q
-quiet
     Operate quietly. Implies -no-progress.

-v
-verbose
     Be verbose.

-progress
-no-progress
     Turn progress on/off explicitly. If neither is specified, progress
     is shown if standard error is connected to a terminal.  Note that
     not all merge strategies may support progress reporting.

-r
-rebase
     Rebase the current branch on top of the upstream branch after
     fetching.  If there is a remote-tracking branch corresponding to
     the upstream branch and the upstream branch was rebased since last
     fetched, the rebase uses that information to avoid rebasing
     non-local changes.

     See `pull.rebase', `branch.<name>.rebase' and
     `branch.autosetuprebase' in git-config(1) if you want to make `git
     pull' always use `--rebase' instead of merging.

          *Note*

          This is a potentially _dangerous_ mode of operation.  It
          rewrites history, which does not bode well when you published
          that history already.  Do *not* use this option unless you
          have read git-rebase(1) carefully.

-no-rebase
     Override earlier -rebase.


Options related to fetching
===========================

-all
     Fetch all remotes.

-a
-append
     Append ref names and object names of fetched refs to the existing
     contents of `.git/FETCH_HEAD'.  Without this option old data in
     `.git/FETCH_HEAD' will be overwritten.

-depth=<depth>
     Deepen the history of a _shallow_ repository created by `git
     clone' with `--depth=<depth>' option (see git-clone(1)) by the
     specified number of commits.

-f
-force
     When _git fetch_ is used with `<rbranch>:<lbranch>' refspec, it
     refuses to update the local branch `<lbranch>' unless the remote
     branch `<rbranch>' it fetches is a descendant of `<lbranch>'.
     This option overrides that check.

-k
-keep
     Keep downloaded pack.

-no-tags
     By default, tags that point at objects that are downloaded from
     the remote repository are fetched and stored locally.  This option
     disables this automatic tag following. The default behavior for a
     remote may be specified with the remote.<name>.tagopt setting. See
     git-config(1).

-u
-update-head-ok
     By default _git fetch_ refuses to update the head which
     corresponds to the current branch.  This flag disables the check.
     This is purely for the internal use for _git pull_ to communicate
     with _git fetch_, and unless you are implementing your own
     Porcelain you are not supposed to use it.

-upload-pack <upload-pack>
     When given, and the repository to fetch from is handled by _git
     fetch-pack_, _-exec=<upload-pack>_ is passed to the command to
     specify non-default path for the command run on the other end.

-progress
     Progress status is reported on the standard error stream by
     default when it is attached to a terminal, unless -q is specified.
     This flag forces progress status even if the standard error stream
     is not directed to a terminal.

<repository>
     The "remote" repository that is the source of a fetch or pull
     operation.  This parameter can be either a URL (see the section
     GIT URLS  below) or the name of a remote (see the section REMOTES
     below).

<refspec>
     The format of a <refspec> parameter is an optional plus `+',
     followed by the source ref <src>, followed by a colon `:',
     followed by the destination ref <dst>.

     The remote ref that matches <src> is fetched, and if <dst> is not
     empty string, the local ref that matches it is fast-forwarded
     using <src>.  If the optional plus `+' is used, the local ref is
     updated even if it does not result in a fast-forward update.

          *Note*

          If the remote branch from which you want to pull is modified
          in non-linear ways such as being rewound and rebased
          frequently, then a pull will attempt a merge with an older
          version of itself, likely conflict, and fail.  It is under
          these conditions that you would want to use the `+' sign to
          indicate non-fast-forward updates will be needed.  There is
          currently no easy way to determine or declare that a branch
          will be made available in a repository with this behavior;
          the pulling user simply must know this is the expected usage
          pattern for a branch.

          *Note*

          You never do your own development on branches that appear on
          the right hand side of a <refspec> colon on `Pull:' lines;
          they are to be updated by _git fetch_.  If you intend to do
          development derived from a remote branch `B', have a `Pull:'
          line to track it (i.e. `Pull: B:remote-B'), and have a
          separate branch `my-B' to do your development on top of it.
          The latter is created by `git branch my-B remote-B' (or its
          equivalent `git checkout -b my-B remote-B').  Run `git fetch'
          to keep track of the progress of the remote side, and when
          you see something new on the remote branch, merge it into
          your development branch with `git pull . remote-B', while you
          are on `my-B' branch.

          *Note*

          There is a difference between listing multiple <refspec>
          directly on _git pull_ command line and having multiple
          `Pull:' <refspec> lines for a <repository> and running _git
          pull_ command without any explicit <refspec> parameters.
          <refspec> listed explicitly on the command line are always
          merged into the current branch after fetching.  In other
          words, if you list more than one remote refs, you would be
          making an Octopus.  While _git pull_ run without any explicit
          <refspec> parameter takes default <refspec>s from `Pull:'
          lines, it merges only the first <refspec> found into the
          current branch, after fetching all the remote refs.  This is
          because making an Octopus from remote refs is rarely done,
          while keeping track of multiple remote heads in one-go by
          fetching more than one is often useful.

     Some short-cut notations are also supported.

        * `tag <tag>' means the same as
          `refs/tags/<tag>:refs/tags/<tag>'; it requests fetching
          everything up to the given tag.

        * A parameter <ref> without a colon is equivalent to <ref>:
          when pulling/fetching, so it merges <ref> into the current
          branch without storing the remote branch anywhere locally


GIT URLS
********

In general, URLs contain information about the transport protocol, the
address of the remote server, and the path to the repository.
Depending on the transport protocol, some of this information may be
absent.

   Git natively supports ssh, git, http, https, ftp, ftps, and rsync
protocols. The following syntaxes may be used with them:

   * ssh://[user@]host.xz[:port]/path/to/repo.git/

   * git://host.xz[:port]/path/to/repo.git/

   * http[s]://host.xz[:port]/path/to/repo.git/

   * ftp[s]://host.xz[:port]/path/to/repo.git/

   * rsync://host.xz/path/to/repo.git/

   An alternative scp-like syntax may also be used with the ssh
protocol:

   * [user@]host.xz:path/to/repo.git/

   The ssh and git protocols additionally support ~username expansion:

   * ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/

   * git://host.xz[:port]/~[user]/path/to/repo.git/

   * [user@]host.xz:/~[user]/path/to/repo.git/

   For local repositories, also supported by git natively, the following
syntaxes may be used:

   * /path/to/repo.git/

   * file:///path/to/repo.git/ (file:///path/to/repo.git/)

   These two syntaxes are mostly equivalent, except when cloning, when
the former implies -local option. See git-clone(1) for details.

   When git doesn’t know how to handle a certain transport protocol,
it attempts to use the _remote-<transport>_ remote helper, if one
exists. To explicitly request a remote helper, the following syntax may
be used:

   * <transport>::<address>

   where <address> may be a path, a server and path, or an arbitrary
URL-like string recognized by the specific remote helper being invoked.
See git-remote-helpers(1) for details.

   If there are a large number of similarly-named remote repositories
and you want to use a different format for them (such that the URLs you
use will be rewritten into URLs that work), you can create a
configuration section of the form:

             [url "<actual url base>"]
                     insteadOf = <other url base>

   For example, with this:

             [url "git://git.host.xz/"]
                     insteadOf = host.xz:/path/to/
                     insteadOf = work:

   a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will
be rewritten in any context that takes a URL to be
"git://git.host.xz/repo.git".

   If you want to rewrite URLs for push only, you can create a
configuration section of the form:

             [url "<actual url base>"]
                     pushInsteadOf = <other url base>

   For example, with this:

             [url "ssh://example.org/"]
                     pushInsteadOf = git://example.org/

   a URL like "git://example.org/path/to/repo.git" will be rewritten to
"ssh://example.org/path/to/repo.git" for pushes, but pulls will still
use the original URL.



REMOTES
*******

The name of one of the following can be used instead of a URL as
`<repository>' argument:

   * a remote in the git configuration file: `$GIT_DIR/config',

   * a file in the `$GIT_DIR/remotes' directory, or

   * a file in the `$GIT_DIR/branches' directory.

   All of these also allow you to omit the refspec from the command line
because they each contain a refspec which git will use by default.



Named remote in configuration file
==================================

You can choose to provide the name of a remote which you had previously
configured using git-remote(1), git-config(1) or even by a manual edit
to the `$GIT_DIR/config' file.  The URL of this remote will be used to
access the repository.  The refspec of this remote will be used by
default when you do not provide a refspec on the command line.  The
entry in the config file would appear like this:

             [remote "<name>"]
                     url = <url>
                     pushurl = <pushurl>
                     push = <refspec>
                     fetch = <refspec>

   The `<pushurl>' is used for pushes only. It is optional and defaults
to `<url>'.



Named file in $GIT_DIR/remotes
==============================

You can choose to provide the name of a file in `$GIT_DIR/remotes'.
The URL in this file will be used to access the repository.  The refspec
in this file will be used as default when you do not provide a refspec
on the command line.  This file should have the following format:

             URL: one of the above URL format
             Push: <refspec>
             Pull: <refspec>

   `Push:' lines are used by _git push_ and `Pull:' lines are used by
_git pull_ and _git fetch_.  Multiple `Push:' and `Pull:' lines may be
specified for additional branch mappings.



Named file in $GIT_DIR/branches
===============================

You can choose to provide the name of a file in `$GIT_DIR/branches'.
The URL in this file will be used to access the repository.  This file
should have the following format:

             <url>#<head>

   `<url>' is required; `#<head>' is optional.

   Depending on the operation, git will use one of the following
refspecs, if you don’t provide one on the command line.  `<branch>'
is the name of this file in `$GIT_DIR/branches' and `<head>' defaults
to `master'.

   git fetch uses:

             refs/heads/<head>:refs/heads/<branch>

   git push uses:

             HEAD:refs/heads/<head>


MERGE STRATEGIES
****************

The merge mechanism (_git-merge_ and _git-pull_ commands) allows the
backend _merge strategies_ to be chosen with `-s' option.  Some
strategies can also take their own options, which can be passed by
giving `-X<option>' arguments to _git-merge_ and/or _git-pull_.

resolve
     This can only resolve two heads (i.e. the current branch and
     another branch you pulled from) using a 3-way merge algorithm.  It
     tries to carefully detect criss-cross merge ambiguities and is
     considered generally safe and fast.

recursive
     This can only resolve two heads using a 3-way merge algorithm.
     When there is more than one common ancestor that can be used for
     3-way merge, it creates a merged tree of the common ancestors and
     uses that as the reference tree for the 3-way merge.  This has been
     reported to result in fewer merge conflicts without causing
     mis-merges by tests done on actual merge commits taken from Linux
     2.6 kernel development history.  Additionally this can detect and
     handle merges involving renames.  This is the default merge
     strategy when pulling or merging one branch.

     The _recursive_ strategy can take the following options:

    ours
          This option forces conflicting hunks to be auto-resolved
          cleanly by favoring _our_ version.  Changes from the other
          tree that do not conflict with our side are reflected to the
          merge result.

          This should not be confused with the _ours_ merge strategy,
          which does not even look at what the other tree contains at
          all.  It discards everything the other tree did, declaring
          _our_ history contains all that happened in it.

    theirs
          This is opposite of _ours_.

    patience
          With this option, _merge-recursive_ spends a little extra time
          to avoid mismerges that sometimes occur due to unimportant
          matching lines (e.g., braces from distinct functions).  Use
          this when the branches to be merged have diverged wildly.
          See also git-diff(1) `--patience'.

    ignore-space-change
    ignore-all-space
    ignore-space-at-eol
          Treats lines with the indicated type of whitespace change as
          unchanged for the sake of a three-way merge.  Whitespace
          changes mixed with other changes to a line are not ignored.
          See also git-diff(1) `-b', `-w', and `--ignore-space-at-eol'.

             * If _their_ version only introduces whitespace changes to
               a line, _our_ version is used;

             * If _our_ version introduces whitespace changes but
               _their_ version includes a substantial change, _their_
               version is used;

             * Otherwise, the merge proceeds in the usual way.

    renormalize
          This runs a virtual check-out and check-in of all three stages
          of a file when resolving a three-way merge.  This option is
          meant to be used when merging branches with different clean
          filters or end-of-line normalization rules.  See "Merging
          branches with differing checkin/checkout attributes" in
          gitattributes(5) for details.

    no-renormalize
          Disables the `renormalize' option.  This overrides the
          `merge.renormalize' configuration variable.

    rename-threshold=<n>
          Controls the similarity threshold used for rename detection.
          See also git-diff(1) `-M'.

    subtree[=<path>]
          This option is a more advanced form of _subtree_ strategy,
          where the strategy makes a guess on how two trees must be
          shifted to match with each other when merging.  Instead, the
          specified path is prefixed (or stripped from the beginning)
          to make the shape of two trees to match.

octopus
     This resolves cases with more than two heads, but refuses to do a
     complex merge that needs manual resolution.  It is primarily meant
     to be used for bundling topic branch heads together.  This is the
     default merge strategy when pulling or merging more than one
     branch.

ours
     This resolves any number of heads, but the resulting tree of the
     merge is always that of the current branch head, effectively
     ignoring all changes from all other branches.  It is meant to be
     used to supersede old development history of side branches.  Note
     that this is different from the -Xours option to the _recursive_
     merge strategy.

subtree
     This is a modified recursive strategy. When merging trees A and B,
     if B corresponds to a subtree of A, B is first adjusted to match
     the tree structure of A, instead of reading the trees at the same
     level. This adjustment is also done to the common ancestor tree.


DEFAULT BEHAVIOUR
*****************

Often people use `git pull' without giving any parameter.
Traditionally, this has been equivalent to saying `git pull origin'.
However, when configuration `branch.<name>.remote' is present while on
branch `<name>', that value is used instead of `origin'.

   In order to determine what URL to use to fetch from, the value of
the configuration `remote.<origin>.url' is consulted and if there is
not any such variable, the value on `URL: ` line in
`$GIT_DIR/remotes/<origin>' file is used.

   In order to determine what remote branches to fetch (and optionally
store in the remote-tracking branches) when the command is run without
any refspec parameters on the command line, values of the configuration
variable `remote.<origin>.fetch' are consulted, and if there aren’t
any, `$GIT_DIR/remotes/<origin>' file is consulted and its `Pull: `
lines are used.  In addition to the refspec formats described in the
OPTIONS section, you can have a globbing refspec that looks like this:

     refs/heads/*:refs/remotes/origin/*

   A globbing refspec must have a non-empty RHS (i.e. must store what
were fetched in remote-tracking branches), and its LHS and RHS must end
with `/*'.  The above specifies that all remote branches are tracked
using remote-tracking branches in `refs/remotes/origin/' hierarchy
under the same name.

   The rule to determine which remote branch to merge after fetching is
a bit involved, in order not to break backward compatibility.

   If explicit refspecs were given on the command line of `git pull',
they are all merged.

   When no refspec was given on the command line, then `git pull' uses
the refspec from the configuration or `$GIT_DIR/remotes/<origin>'.  In
such cases, the following rules apply:

  1. If `branch.<name>.merge' configuration for the current branch
     `<name>' exists, that is the name of the branch at the remote site
     that is merged.

  2. If the refspec is a globbing one, nothing is merged.

  3. Otherwise the remote branch of the first refspec is merged.


EXAMPLES
********

   * Update the remote-tracking branches for the repository you cloned
     from, then merge one of them into your current branch:

          $ git pull, git pull origin

     Normally the branch merged in is the HEAD of the remote repository,
     but the choice is determined by the branch.<name>.remote and
     branch.<name>.merge options; see git-config(1) for details.

   * Merge into the current branch the remote branch `next':

          $ git pull origin next

     This leaves a copy of `next' temporarily in FETCH_HEAD, but does
     not update any remote-tracking branches. Using remote-tracking
     branches, the same can be done by invoking fetch and merge:

          $ git fetch origin
          $ git merge origin/next


   If you tried a pull which resulted in a complex conflicts and would
want to start over, you can recover with _git reset_.



BUGS
****

Using -recurse-submodules can only fetch new commits in already checked
out submodules right now. When e.g. upstream added a new submodule in
the just fetched commits of the superproject the submodule itself can
not be fetched, making it impossible to check out that submodule later
without having to do a fetch again. This is expected to be fixed in a
future git version.



SEE ALSO
********

git-fetch(1), git-merge(1), git-config(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-push,  Up: Top

Name
****

git-push — Update remote refs along with associated objects



Synopsis
********

     git push [-all | -mirror | -tags] [-n | -dry-run] [-receive-pack=<git-receive-pack>]
                [-repo=<repository>] [-f | -force] [-prune] [-v | -verbose] [-u | -set-upstream]
                [<repository> [<refspec>…]]


DESCRIPTION
***********

Updates remote refs using local refs, while sending objects necessary
to complete the given refs.

   You can make interesting things happen to a repository every time
you push into it, by setting up _hooks_ there.  See documentation for
git-receive-pack(1).



OPTIONS
*******

<repository>
     The "remote" repository that is destination of a push operation.
     This parameter can be either a URL (see the section GIT URLS
     below) or the name of a remote (see the section REMOTES  below).

<refspec>…
     The format of a <refspec> parameter is an optional plus `+',
     followed by the source ref <src>, followed by a colon `:',
     followed by the destination ref <dst>.  It is used to specify with
     what <src> object the <dst> ref in the remote repository is to be
     updated.

     The <src> is often the name of the branch you would want to push,
     but it can be any arbitrary "SHA-1 expression", such as `master~4'
     or `HEAD' (see gitrevisions(7)).

     The <dst> tells which ref on the remote side is updated with this
     push. Arbitrary expressions cannot be used here, an actual ref must
     be named. If `:'<dst> is omitted, the same ref as <src> will be
     updated.

     The object referenced by <src> is used to update the <dst>
     reference on the remote side, but by default this is only allowed
     if the update can fast-forward <dst>.  By having the optional
     leading `+', you can tell git to update the <dst> ref even when
     the update is not a fast-forward.  This does *not* attempt to
     merge <src> into <dst>.  See EXAMPLES below for details.

     `tag <tag>' means the same as `refs/tags/<tag>:refs/tags/<tag>'.

     Pushing an empty <src> allows you to delete the <dst> ref from the
     remote repository.

     The special refspec `:' (or `+:' to allow non-fast-forward updates)
     directs git to push "matching" branches: for every branch that
     exists on the local side, the remote side is updated if a branch
     of the same name already exists on the remote side.  This is the
     default operation mode if no explicit refspec is found (that is
     neither on the command line nor in any Push line of the
     corresponding remotes file--see below).

-all
     Instead of naming each ref to push, specifies that all refs under
     `refs/heads/' be pushed.

-prune
     Remove remote branches that don’t have a local counterpart. For
     example a remote branch `tmp' will be removed if a local branch
     with the same name doesn’t exist any more. This also respects
     refspecs, e.g.  `git push --prune remote refs/heads/*:refs/tmp/*'
     would make sure that remote `refs/tmp/foo' will be removed if
     `refs/heads/foo' doesn’t exist.

-mirror
     Instead of naming each ref to push, specifies that all refs under
     `refs/' (which includes but is not limited to `refs/heads/',
     `refs/remotes/', and `refs/tags/') be mirrored to the remote
     repository.  Newly created local refs will be pushed to the remote
     end, locally updated refs will be force updated on the remote end,
     and deleted refs will be removed from the remote end.  This is the
     default if the configuration option `remote.<remote>.mirror' is
     set.

-n
-dry-run
     Do everything except actually send the updates.

-porcelain
     Produce machine-readable output.  The output status line for each
     ref will be tab-separated and sent to stdout instead of stderr.
     The full symbolic names of the refs will be given.

-delete
     All listed refs are deleted from the remote repository. This is
     the same as prefixing all refs with a colon.

-tags
     All refs under `refs/tags' are pushed, in addition to refspecs
     explicitly listed on the command line.

-receive-pack=<git-receive-pack>
-exec=<git-receive-pack>
     Path to the _git-receive-pack_ program on the remote end.
     Sometimes useful when pushing to a remote repository over ssh, and
     you do not have the program in a directory on the default $PATH.

-f
-force
     Usually, the command refuses to update a remote ref that is not an
     ancestor of the local ref used to overwrite it.  This flag
     disables the check.  This can cause the remote repository to lose
     commits; use it with care.

-repo=<repository>
     This option is only relevant if no <repository> argument is passed
     in the invocation. In this case, _git push_ derives the remote
     name from the current branch: If it tracks a remote branch, then
     that remote repository is pushed to. Otherwise, the name "origin"
     is used. For this latter case, this option can be used to override
     the name "origin". In other words, the difference between these
     two commands

          git push public         #1
          git push --repo=public  #2

     is that #1 always pushes to "public" whereas #2 pushes to "public"
     only if the current branch does not track a remote branch. This is
     useful if you write an alias or script around _git push_.

-u
-set-upstream
     For every branch that is up to date or successfully pushed, add
     upstream (tracking) reference, used by argument-less git-pull(1)
     and other commands. For more information, see
     _branch.<name>.merge_ in git-config(1).

-thin
-no-thin
     These options are passed to git-send-pack(1). A thin transfer
     significantly reduces the amount of sent data when the sender and
     receiver share many of the same objects in common. The default is
     -thin.

-q
-quiet
     Suppress all output, including the listing of updated refs, unless
     an error occurs. Progress is not reported to the standard error
     stream.

-v
-verbose
     Run verbosely.

-progress
     Progress status is reported on the standard error stream by
     default when it is attached to a terminal, unless -q is specified.
     This flag forces progress status even if the standard error stream
     is not directed to a terminal.

-recurse-submodules=check|on-demand
     Make sure all submodule commits used by the revisions to be pushed
     are available on a remote tracking branch. If _check_ is used git
     will verify that all submodule commits that changed in the
     revisions to be pushed are available on at least one remote of the
     submodule. If any commits are missing the push will be aborted and
     exit with non-zero status. If _on-demand_ is used all submodules
     that changed in the revisions to be pushed will be pushed. If
     on-demand was not able to push all necessary revisions it will
     also be aborted and exit with non-zero status.


GIT URLS
********

In general, URLs contain information about the transport protocol, the
address of the remote server, and the path to the repository.
Depending on the transport protocol, some of this information may be
absent.

   Git natively supports ssh, git, http, https, ftp, ftps, and rsync
protocols. The following syntaxes may be used with them:

   * ssh://[user@]host.xz[:port]/path/to/repo.git/

   * git://host.xz[:port]/path/to/repo.git/

   * http[s]://host.xz[:port]/path/to/repo.git/

   * ftp[s]://host.xz[:port]/path/to/repo.git/

   * rsync://host.xz/path/to/repo.git/

   An alternative scp-like syntax may also be used with the ssh
protocol:

   * [user@]host.xz:path/to/repo.git/

   The ssh and git protocols additionally support ~username expansion:

   * ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/

   * git://host.xz[:port]/~[user]/path/to/repo.git/

   * [user@]host.xz:/~[user]/path/to/repo.git/

   For local repositories, also supported by git natively, the following
syntaxes may be used:

   * /path/to/repo.git/

   * file:///path/to/repo.git/ (file:///path/to/repo.git/)

   These two syntaxes are mostly equivalent, except when cloning, when
the former implies -local option. See git-clone(1) for details.

   When git doesn’t know how to handle a certain transport protocol,
it attempts to use the _remote-<transport>_ remote helper, if one
exists. To explicitly request a remote helper, the following syntax may
be used:

   * <transport>::<address>

   where <address> may be a path, a server and path, or an arbitrary
URL-like string recognized by the specific remote helper being invoked.
See git-remote-helpers(1) for details.

   If there are a large number of similarly-named remote repositories
and you want to use a different format for them (such that the URLs you
use will be rewritten into URLs that work), you can create a
configuration section of the form:

             [url "<actual url base>"]
                     insteadOf = <other url base>

   For example, with this:

             [url "git://git.host.xz/"]
                     insteadOf = host.xz:/path/to/
                     insteadOf = work:

   a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will
be rewritten in any context that takes a URL to be
"git://git.host.xz/repo.git".

   If you want to rewrite URLs for push only, you can create a
configuration section of the form:

             [url "<actual url base>"]
                     pushInsteadOf = <other url base>

   For example, with this:

             [url "ssh://example.org/"]
                     pushInsteadOf = git://example.org/

   a URL like "git://example.org/path/to/repo.git" will be rewritten to
"ssh://example.org/path/to/repo.git" for pushes, but pulls will still
use the original URL.



REMOTES
*******

The name of one of the following can be used instead of a URL as
`<repository>' argument:

   * a remote in the git configuration file: `$GIT_DIR/config',

   * a file in the `$GIT_DIR/remotes' directory, or

   * a file in the `$GIT_DIR/branches' directory.

   All of these also allow you to omit the refspec from the command line
because they each contain a refspec which git will use by default.



Named remote in configuration file
==================================

You can choose to provide the name of a remote which you had previously
configured using git-remote(1), git-config(1) or even by a manual edit
to the `$GIT_DIR/config' file.  The URL of this remote will be used to
access the repository.  The refspec of this remote will be used by
default when you do not provide a refspec on the command line.  The
entry in the config file would appear like this:

             [remote "<name>"]
                     url = <url>
                     pushurl = <pushurl>
                     push = <refspec>
                     fetch = <refspec>

   The `<pushurl>' is used for pushes only. It is optional and defaults
to `<url>'.



Named file in $GIT_DIR/remotes
==============================

You can choose to provide the name of a file in `$GIT_DIR/remotes'.
The URL in this file will be used to access the repository.  The refspec
in this file will be used as default when you do not provide a refspec
on the command line.  This file should have the following format:

             URL: one of the above URL format
             Push: <refspec>
             Pull: <refspec>

   `Push:' lines are used by _git push_ and `Pull:' lines are used by
_git pull_ and _git fetch_.  Multiple `Push:' and `Pull:' lines may be
specified for additional branch mappings.



Named file in $GIT_DIR/branches
===============================

You can choose to provide the name of a file in `$GIT_DIR/branches'.
The URL in this file will be used to access the repository.  This file
should have the following format:

             <url>#<head>

   `<url>' is required; `#<head>' is optional.

   Depending on the operation, git will use one of the following
refspecs, if you don’t provide one on the command line.  `<branch>'
is the name of this file in `$GIT_DIR/branches' and `<head>' defaults
to `master'.

   git fetch uses:

             refs/heads/<head>:refs/heads/<branch>

   git push uses:

             HEAD:refs/heads/<head>


OUTPUT
******

The output of "git push" depends on the transport method used; this
section describes the output when pushing over the git protocol (either
locally or via ssh).

   The status of the push is output in tabular form, with each line
representing the status of a single ref. Each line is of the form:

      <flag> <summary> <from> -> <to> (<reason>)

   If -porcelain is used, then each line of the output is of the form:

      <flag> \t <from>:<to> \t <summary> (<reason>)

   The status of up-to-date refs is shown only if -porcelain or -verbose
option is used.

flag
     A single character indicating the status of the ref:

    (space)
          for a successfully pushed fast-forward;

    `+'
          for a successful forced update;

    `-'
          for a successfully deleted ref;

    `*'
          for a successfully pushed new ref;

    `!'
          for a ref that was rejected or failed to push; and

    `='
          for a ref that was up to date and did not need pushing.

summary
     For a successfully pushed ref, the summary shows the old and new
     values of the ref in a form suitable for using as an argument to
     `git log' (this is `<old>..<new>' in most cases, and
     `<old>...<new>' for forced non-fast-forward updates).

     For a failed update, more details are given:

    rejected
          Git did not try to send the ref at all, typically because it
          is not a fast-forward and you did not force the update.

    remote rejected
          The remote end refused the update.  Usually caused by a hook
          on the remote side, or because the remote repository has one
          of the following safety options in effect:
          `receive.denyCurrentBranch' (for pushes to the checked out
          branch), `receive.denyNonFastForwards' (for forced
          non-fast-forward updates), `receive.denyDeletes' or
          `receive.denyDeleteCurrent'.  See git-config(1).

    remote failure
          The remote end did not report the successful update of the
          ref, perhaps because of a temporary error on the remote side,
          a break in the network connection, or other transient error.

from
     The name of the local ref being pushed, minus its `refs/<type>/'
     prefix. In the case of deletion, the name of the local ref is
     omitted.

to
     The name of the remote ref being updated, minus its `refs/<type>/'
     prefix.

reason
     A human-readable explanation. In the case of successfully pushed
     refs, no explanation is needed. For a failed ref, the reason for
     failure is described.


Note about fast-forwards
************************

When an update changes a branch (or more in general, a ref) that used to
point at commit A to point at another commit B, it is called a
fast-forward update if and only if B is a descendant of A.

   In a fast-forward update from A to B, the set of commits that the
original commit A built on top of is a subset of the commits the new
commit B builds on top of.  Hence, it does not lose any history.

   In contrast, a non-fast-forward update will lose history.  For
example, suppose you and somebody else started at the same commit X,
and you built a history leading to commit B while the other person
built a history leading to commit A.  The history looks like this:

           B
          /
      ---X---A

   Further suppose that the other person already pushed changes leading
to A back to the original repository you two obtained the original
commit X.

   The push done by the other person updated the branch that used to
point at commit X to point at commit A.  It is a fast-forward.

   But if you try to push, you will attempt to update the branch (that
now points at A) with commit B.  This does _not_ fast-forward.  If you
did so, the changes introduced by commit A will be lost, because
everybody will now start building on top of B.

   The command by default does not allow an update that is not a
fast-forward to prevent such loss of history.

   If you do not want to lose your work (history from X to B) nor the
work by the other person (history from X to A), you would need to first
fetch the history from the repository, create a history that contains
changes done by both parties, and push the result back.

   You can perform "git pull", resolve potential conflicts, and "git
push" the result.  A "git pull" will create a merge commit C between
commits A and B.

           B---C
          /   /
      ---X---A

   Updating A with the resulting merge commit will fast-forward and your
push will be accepted.

   Alternatively, you can rebase your change between X and B on top of
A, with "git pull -rebase", and push the result back.  The rebase will
create a new commit D that builds the change between X and B on top of
A.

           B   D
          /   /
      ---X---A

   Again, updating A with this commit will fast-forward and your push
will be accepted.

   There is another common situation where you may encounter
non-fast-forward rejection when you try to push, and it is possible
even when you are pushing into a repository nobody else pushes into.
After you push commit A yourself (in the first picture in this
section), replace it with "git commit -amend" to produce commit B, and
you try to push it out, because forgot that you have pushed A out
already. In such a case, and only if you are certain that nobody in the
meantime fetched your earlier commit A (and started building on top of
it), you can run "git push -force" to overwrite it. In other words,
"git push -force" is a method reserved for a case where you do mean to
lose history.



Examples
********

`git push'
     Works like `git push <remote>', where <remote> is the current
     branch’s remote (or `origin', if no remote is configured for the
     current branch).

`git push origin'
     Without additional configuration, works like `git push origin :'.

     The default behavior of this command when no <refspec> is given
     can be configured by setting the `push' option of the remote.

     For example, to default to pushing only the current branch to
     `origin' use `git config remote.origin.push HEAD'.  Any valid
     <refspec> (like the ones in the examples below) can be configured
     as the default for `git push origin'.

`git push origin :'
     Push "matching" branches to `origin'. See <refspec> in the OPTIONS
     (*note [OPTIONS]::) section above for a description of "matching"
     branches.

`git push origin master'
     Find a ref that matches `master' in the source repository (most
     likely, it would find `refs/heads/master'), and update the same
     ref (e.g. `refs/heads/master') in `origin' repository with it.  If
     `master' did not exist remotely, it would be created.

`git push origin HEAD'
     A handy way to push the current branch to the same name on the
     remote.

`git push origin master:satellite/master dev:satellite/dev'
     Use the source ref that matches `master' (e.g. `refs/heads/master')
     to update the ref that matches `satellite/master' (most probably
     `refs/remotes/satellite/master') in the `origin' repository, then
     do the same for `dev' and `satellite/dev'.

`git push origin HEAD:master'
     Push the current branch to the remote ref matching `master' in the
     `origin' repository. This form is convenient to push the current
     branch without thinking about its local name.

`git push origin master:refs/heads/experimental'
     Create the branch `experimental' in the `origin' repository by
     copying the current `master' branch.  This form is only needed to
     create a new branch or tag in the remote repository when the local
     name and the remote name are different; otherwise, the ref name on
     its own will work.

`git push origin :experimental'
     Find a ref that matches `experimental' in the `origin' repository
     (e.g. `refs/heads/experimental'), and delete it.

`git push origin +dev:master'
     Update the origin repository’s master branch with the dev branch,
     allowing non-fast-forward updates.  *This can leave unreferenced
     commits dangling in the origin repository.*  Consider the
     following situation, where a fast-forward is not possible:

                      o---o---o---A---B  origin/master
                               \
                                X---Y---Z  dev

     The above command would change the origin repository to

                                A---B  (unnamed branch)
                               /
                      o---o---o---X---Y---Z  master

     Commits A and B would no longer belong to a branch with a symbolic
     name, and so would be unreachable.  As such, these commits would
     be removed by a `git gc' command on the origin repository.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-quiltimport,  Up: Top

Name
****

git-quiltimport — Applies a quilt patchset onto the current branch



Synopsis
********

     git quiltimport [-dry-run | -n] [-author <author>] [-patches <dir>]


DESCRIPTION
***********

Applies a quilt patchset onto the current git branch, preserving the
patch boundaries, patch order, and patch descriptions present in the
quilt patchset.

   For each patch the code attempts to extract the author from the
patch description.  If that fails it falls back to the author specified
with -author.  If the -author flag was not given the patch description
is displayed and the user is asked to interactively enter the author of
the patch.

   If a subject is not found in the patch description the patch name is
preserved as the 1 line subject in the git description.



OPTIONS
*******

-n
-dry-run
     Walk through the patches in the series and warn if we cannot find
     all of the necessary information to commit a patch.  At the time
     of this writing only missing author information is warned about.

-author Author Name <Author Email>
     The author name and email address to use when no author
     information can be found in the patch description.

-patches <dir>
     The directory to find the quilt patches and the quilt series file.

     The default for the patch directory is patches or the value of the
     $QUILT_PATCHES environment variable.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-read-tree,  Up: Top

Name
****

git-read-tree — Reads tree information into the index



Synopsis
********

     git read-tree [[-m [-trivial] [-aggressive] | -reset | -prefix=<prefix>]
                     [-u [-exclude-per-directory=<gitignore>] | -i]]
                     [-index-output=<file>] [-no-sparse-checkout]
                     (-empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])


DESCRIPTION
***********

Reads the tree information given by <tree-ish> into the index, but does
not actually *update* any of the files it "caches". (see:
git-checkout-index(1))

   Optionally, it can merge a tree into the index, perform a
fast-forward (i.e. 2-way) merge, or a 3-way merge, with the `-m' flag.
When used with `-m', the `-u' flag causes it to also update the files
in the work tree with the result of the merge.

   Trivial merges are done by _git read-tree_ itself.  Only conflicting
paths will be in unmerged state when _git read-tree_ returns.



OPTIONS
*******

-m
     Perform a merge, not just a read.  The command will refuse to run
     if your index file has unmerged entries, indicating that you have
     not finished previous merge you started.

-reset
     Same as -m, except that unmerged entries are discarded instead of
     failing.

-u
     After a successful merge, update the files in the work tree with
     the result of the merge.

-i
     Usually a merge requires the index file as well as the files in
     the working tree to be up to date with the current head commit, in
     order not to lose local changes.  This flag disables the check
     with the working tree and is meant to be used when creating a
     merge of trees that are not directly related to the current
     working tree status into a temporary index file.

-n
-dry-run
     Check if the command would error out, without updating the index
     nor the files in the working tree for real.

-v
     Show the progress of checking files out.

-trivial
     Restrict three-way merge by _git read-tree_ to happen only if
     there is no file-level merging required, instead of resolving
     merge for trivial cases and leaving conflicting files unresolved
     in the index.

-aggressive
     Usually a three-way merge by _git read-tree_ resolves the merge
     for really trivial cases and leaves other cases unresolved in the
     index, so that porcelains can implement different merge policies.
     This flag makes the command resolve a few more cases internally:

        * when one side removes a path and the other side leaves the
          path unmodified.  The resolution is to remove that path.

        * when both sides remove a path.  The resolution is to remove
          that path.

        * when both sides add a path identically.  The resolution is to
          add that path.

-prefix=<prefix>/
     Keep the current index contents, and read the contents of the
     named tree-ish under the directory at `<prefix>'.  The command
     will refuse to overwrite entries that already existed in the
     original index file. Note that the `<prefix>/' value must end with
     a slash.

-exclude-per-directory=<gitignore>
     When running the command with `-u' and `-m' options, the merge
     result may need to overwrite paths that are not tracked in the
     current branch.  The command usually refuses to proceed with the
     merge to avoid losing such a path.  However this safety valve
     sometimes gets in the way.  For example, it often happens that the
     other branch added a file that used to be a generated file in your
     branch, and the safety valve triggers when you try to switch to
     that branch after you ran `make' but before running `make clean'
     to remove the generated file.  This option tells the command to
     read per-directory exclude file (usually _.gitignore_) and allows
     such an untracked but explicitly ignored file to be overwritten.

-index-output=<file>
     Instead of writing the results out to `$GIT_INDEX_FILE', write the
     resulting index in the named file.  While the command is
     operating, the original index file is locked with the same
     mechanism as usual.  The file must allow to be rename(2)ed into
     from a temporary file that is created next to the usual index
     file; typically this means it needs to be on the same filesystem
     as the index file itself, and you need write permission to the
     directories the index file and index output file are located in.

-no-sparse-checkout
     Disable sparse checkout support even if `core.sparseCheckout' is
     true.

-empty
     Instead of reading tree object(s) into the index, just empty it.

<tree-ish#>
     The id of the tree object(s) to be read/merged.


Merging
*******

If `-m' is specified, _git read-tree_ can perform 3 kinds of merge, a
single tree merge if only 1 tree is given, a fast-forward merge with 2
trees, or a 3-way merge if 3 trees are provided.



Single Tree Merge
=================

If only 1 tree is specified, _git read-tree_ operates as if the user
did not specify `-m', except that if the original index has an entry
for a given pathname, and the contents of the path match with the tree
being read, the stat info from the index is used. (In other words, the
index’s stat()s take precedence over the merged tree’s).

   That means that if you do a `git read-tree -m <newtree>' followed by
a `git checkout-index -f -u -a', the _git checkout-index_ only checks
out the stuff that really changed.

   This is used to avoid unnecessary false hits when _git diff-files_ is
run after _git read-tree_.



Two Tree Merge
==============

Typically, this is invoked as `git read-tree -m $H $M', where $H is the
head commit of the current repository, and $M is the head of a foreign
tree, which is simply ahead of $H (i.e. we are in a fast-forward
situation).

   When two trees are specified, the user is telling _git read-tree_
the following:

  1. The current index and work tree is derived from $H, but the user
     may have local changes in them since $H.

  2. The user wants to fast-forward to $M.

   In this case, the `git read-tree -m $H $M' command makes sure that
no local change is lost as the result of this "merge".  Here are the
"carry forward" rules, where "I" denotes the index, "clean" means that
index and work tree coincide, and "exists"/"nothing" refer to the
presence of a path in the specified commit:

        I                   H        M        Result
       -------------------------------------------------------
     0  nothing             nothing  nothing  (does not happen)
     1  nothing             nothing  exists   use M
     2  nothing             exists   nothing  remove path from index
     3  nothing             exists   exists,  use M if "initial checkout",
                                     H == M   keep index otherwise
                                     exists,  fail
                                     H != M

        clean I==H  I==M
       ------------------
     4  yes   N/A   N/A     nothing  nothing  keep index
     5  no    N/A   N/A     nothing  nothing  keep index

     6  yes   N/A   yes     nothing  exists   keep index
     7  no    N/A   yes     nothing  exists   keep index
     8  yes   N/A   no      nothing  exists   fail
     9  no    N/A   no      nothing  exists   fail

     10 yes   yes   N/A     exists   nothing  remove path from index
     11 no    yes   N/A     exists   nothing  fail
     12 yes   no    N/A     exists   nothing  fail
     13 no    no    N/A     exists   nothing  fail

        clean (H==M)
       ------
     14 yes                 exists   exists   keep index
     15 no                  exists   exists   keep index

        clean I==H  I==M (H!=M)
       ------------------
     16 yes   no    no      exists   exists   fail
     17 no    no    no      exists   exists   fail
     18 yes   no    yes     exists   exists   keep index
     19 no    no    yes     exists   exists   keep index
     20 yes   yes   no      exists   exists   use M
     21 no    yes   no      exists   exists   fail

   In all "keep index" cases, the index entry stays as in the original
index file.  If the entry is not up to date, _git read-tree_ keeps the
copy in the work tree intact when operating under the -u flag.

   When this form of _git read-tree_ returns successfully, you can see
which of the "local changes" that you made were carried forward by
running `git diff-index --cached $M'.  Note that this does not
necessarily match what `git diff-index --cached $H' would have produced
before such a two tree merge.  This is because of cases 18 and 19 -- if
you already had the changes in $M (e.g. maybe you picked it up via
e-mail in a patch form), `git diff-index --cached $H' would have told
you about the change before this merge, but it would not show in `git
diff-index --cached $M' output after the two-tree merge.

   Case 3 is slightly tricky and needs explanation.  The result from
this rule logically should be to remove the path if the user staged the
removal of the path and then switching to a new branch.  That however
will prevent the initial checkout from happening, so the rule is
modified to use M (new tree) only when the content of the index is
empty.  Otherwise the removal of the path is kept as long as $H and $M
are the same.



3-Way Merge
===========

Each "index" entry has two bits worth of "stage" state. stage 0 is the
normal one, and is the only one you’d see in any kind of normal use.

   However, when you do _git read-tree_ with three trees, the "stage"
starts out at 1.

   This means that you can do

     $ git read-tree -m <tree1> <tree2> <tree3>

   and you will end up with an index with all of the <tree1> entries in
"stage1", all of the <tree2> entries in "stage2" and all of the <tree3>
entries in "stage3".  When performing a merge of another branch into
the current branch, we use the common ancestor tree as <tree1>, the
current branch head as <tree2>, and the other branch head as <tree3>.

   Furthermore, _git read-tree_ has special-case logic that says: if
you see a file that matches in all respects in the following states, it
"collapses" back to "stage0":

   * stage 2 and 3 are the same; take one or the other (it makes no
     difference - the same work has been done on our branch in stage 2
     and their branch in stage 3)

   * stage 1 and stage 2 are the same and stage 3 is different; take
     stage 3 (our branch in stage 2 did not do anything since the
     ancestor in stage 1 while their branch in stage 3 worked on it)

   * stage 1 and stage 3 are the same and stage 2 is different take
     stage 2 (we did something while they did nothing)

   The _git write-tree_ command refuses to write a nonsensical tree,
and it will complain about unmerged entries if it sees a single entry
that is not stage 0.

   OK, this all sounds like a collection of totally nonsensical rules,
but it’s actually exactly what you want in order to do a fast merge.
The different stages represent the "result tree" (stage 0, aka
"merged"), the original tree (stage 1, aka "orig"), and the two trees
you are trying to merge (stage 2 and 3 respectively).

   The order of stages 1, 2 and 3 (hence the order of three <tree-ish>
command line arguments) are significant when you start a 3-way merge
with an index file that is already populated.  Here is an outline of
how the algorithm works:

   * if a file exists in identical format in all three trees, it will
     automatically collapse to "merged" state by _git read-tree_.

   * a file that has _any_ difference what-so-ever in the three trees
     will stay as separate entries in the index. It’s up to "porcelain
     policy" to determine how to remove the non-0 stages, and insert a
     merged version.

   * the index file saves and restores with all this information, so you
     can merge things incrementally, but as long as it has entries in
     stages 1/2/3 (i.e., "unmerged entries") you can’t write the
     result. So now the merge algorithm ends up being really simple:

        * you walk the index in order, and ignore all entries of stage
          0, since they’ve already been done.

        * if you find a "stage1", but no matching "stage2" or "stage3",
          you know it’s been removed from both trees (it only existed
          in the original tree), and you remove that entry.

        * if you find a matching "stage2" and "stage3" tree, you remove
          one of them, and turn the other into a "stage0" entry. Remove
          any matching "stage1" entry if it exists too.  .. all the
          normal trivial rules ..

   You would normally use _git merge-index_ with supplied _git
merge-one-file_ to do this last step.  The script updates the files in
the working tree as it merges each path and at the end of a successful
merge.

   When you start a 3-way merge with an index file that is already
populated, it is assumed that it represents the state of the files in
your work tree, and you can even have files with changes unrecorded in
the index file.  It is further assumed that this state is "derived"
from the stage 2 tree.  The 3-way merge refuses to run if it finds an
entry in the original index file that does not match stage 2.

   This is done to prevent you from losing your work-in-progress
changes, and mixing your random changes in an unrelated merge commit.
To illustrate, suppose you start from what has been committed last to
your repository:

     $ JC=`git rev-parse --verify "HEAD^0"`
     $ git checkout-index -f -u -a $JC

   You do random edits, without running _git update-index_.  And then
you notice that the tip of your "upstream" tree has advanced since you
pulled from him:

     $ git fetch git://.... linus
     $ LT=`git rev-parse FETCH_HEAD`

   Your work tree is still based on your HEAD ($JC), but you have some
edits since.  Three-way merge makes sure that you have not added or
modified index entries since $JC, and if you haven’t, then does the
right thing.  So with the following sequence:

     $ git read-tree -m -u `git merge-base $JC $LT` $JC $LT
     $ git merge-index git-merge-one-file -a
     $ echo "Merge with Linus" | \
       git commit-tree `git write-tree` -p $JC -p $LT

   what you would commit is a pure merge between $JC and $LT without
your work-in-progress changes, and your work tree would be updated to
the result of the merge.

   However, if you have local changes in the working tree that would be
overwritten by this merge, _git read-tree_ will refuse to run to
prevent your changes from being lost.

   In other words, there is no need to worry about what exists only in
the working tree.  When you have local changes in a part of the project
that is not involved in the merge, your changes do not interfere with
the merge, and are kept intact.  When they *do* interfere, the merge
does not even start (_git read-tree_ complains loudly and fails without
modifying anything).  In such a case, you can simply continue doing
what you were in the middle of doing, and when your working tree is
ready (i.e. you have finished your work-in-progress), attempt the merge
again.



Sparse checkout
***************

"Sparse checkout" allows populating the working directory sparsely.  It
uses the skip-worktree bit (see git-update-index(1)) to tell Git
whether a file in the working directory is worth looking at.

   _git read-tree_ and other merge-based commands (_git merge_, _git
checkout_…) can help maintaining the skip-worktree bitmap and working
directory update. `$GIT_DIR/info/sparse-checkout' is used to define the
skip-worktree reference bitmap. When _git read-tree_ needs to update
the working directory, it resets the skip-worktree bit in the index
based on this file, which uses the same syntax as .gitignore files.  If
an entry matches a pattern in this file, skip-worktree will not be set
on that entry. Otherwise, skip-worktree will be set.

   Then it compares the new skip-worktree value with the previous one.
If skip-worktree turns from set to unset, it will add the corresponding
file back. If it turns from unset to set, that file will be removed.

   While `$GIT_DIR/info/sparse-checkout' is usually used to specify what
files are in, you can also specify what files are _not_ in, using
negate patterns. For example, to remove the file `unwanted':

     /*
     !unwanted

   Another tricky thing is fully repopulating the working directory
when you no longer want sparse checkout. You cannot just disable "sparse
checkout" because skip-worktree bits are still in the index and your
working directory is still sparsely populated. You should re-populate
the working directory with the `$GIT_DIR/info/sparse-checkout' file
content as follows:

     /*

   Then you can disable sparse checkout. Sparse checkout support in _git
read-tree_ and similar commands is disabled by default. You need to
turn `core.sparseCheckout' on in order to have sparse checkout support.



SEE ALSO
********

git-write-tree(1); git-ls-files(1); gitignore(5)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-rebase,  Up: Top

Name
****

git-rebase — Forward-port local commits to the updated upstream head



Synopsis
********

     git rebase [-i | -interactive] [options] [-exec <cmd>] [-onto <newbase>]
             [<upstream>] [<branch>]
     git rebase [-i | -interactive] [options] [-exec <cmd>] [-onto <newbase>]
             -root [<branch>]
     git rebase -continue | -skip | -abort


DESCRIPTION
***********

If <branch> is specified, _git rebase_ will perform an automatic `git
checkout <branch>' before doing anything else.  Otherwise it remains on
the current branch.

   If <upstream> is not specified, the upstream configured in
branch.<name>.remote and branch.<name>.merge options will be used; see
git-config(1) for details.  If you are currently not on any branch or
if the current branch does not have a configured upstream, the rebase
will abort.

   All changes made by commits in the current branch but that are not
in <upstream> are saved to a temporary area.  This is the same set of
commits that would be shown by `git log <upstream>..HEAD' (or `git log
HEAD', if -root is specified).

   The current branch is reset to <upstream>, or <newbase> if the -onto
option was supplied.  This has the exact same effect as `git reset
--hard <upstream>' (or <newbase>).  ORIG_HEAD is set to point at the
tip of the branch before the reset.

   The commits that were previously saved into the temporary area are
then reapplied to the current branch, one by one, in order. Note that
any commits in HEAD which introduce the same textual changes as a commit
in HEAD..<upstream> are omitted (i.e., a patch already accepted upstream
with a different commit message or timestamp will be skipped).

   It is possible that a merge failure will prevent this process from
being completely automatic.  You will have to resolve any such merge
failure and run `git rebase --continue'.  Another option is to bypass
the commit that caused the merge failure with `git rebase --skip'.  To
check out the original <branch> and remove the .git/rebase-apply
working files, use the command `git rebase --abort' instead.

   Assume the following history exists and the current branch is
"topic":

               A---B---C topic
              /
         D---E---F---G master

   From this point, the result of either of the following commands:

     git rebase master
     git rebase master topic

   would be:

                       A'--B'--C' topic
                      /
         D---E---F---G master

   *NOTE_* The latter form is just a short-hand of `git checkout topic'
followed by `git rebase master'. When rebase exits `topic' will remain
the checked-out branch.

   If the upstream branch already contains a change you have made (e.g.,
because you mailed a patch which was applied upstream), then that commit
will be skipped. For example, running ‘git rebase master` on the
following history (in which A’ and A introduce the same set of
changes, but have different committer information):

               A---B---C topic
              /
         D---E---A'---F master

   will result in:

                        B'---C' topic
                       /
         D---E---A'---F master

   Here is how you would transplant a topic branch based on one branch
to another, to pretend that you forked the topic branch from the latter
branch, using `rebase --onto'.

   First let’s assume your _topic_ is based on branch _next_.  For
example, a feature developed in _topic_ depends on some functionality
which is found in _next_.

         o---o---o---o---o  master
              \
               o---o---o---o---o  next
                                \
                                 o---o---o  topic

   We want to make _topic_ forked from branch _master_; for example,
because the functionality on which _topic_ depends was merged into the
more stable _master_ branch. We want our tree to look like this:

         o---o---o---o---o  master
             |            \
             |             o'--o'--o'  topic
              \
               o---o---o---o---o  next

   We can get this using the following command:

     git rebase --onto master next topic

   Another example of -onto option is to rebase part of a branch.  If
we have the following situation:

                                 H---I---J topicB
                                /
                       E---F---G  topicA
                      /
         A---B---C---D  master

   then the command

     git rebase --onto master topicA topicB

   would result in:

                      H'--I'--J'  topicB
                     /
                     | E---F---G  topicA
                     |/
         A---B---C---D  master

   This is useful when topicB does not depend on topicA.

   A range of commits could also be removed with rebase.  If we have
the following situation:

         E---F---G---H---I---J  topicA

   then the command

     git rebase --onto topicA~5 topicA~3 topicA

   would result in the removal of commits F and G:

         E---H'---I'---J'  topicA

   This is useful if F and G were flawed in some way, or should not be
part of topicA.  Note that the argument to -onto and the <upstream>
parameter can be any valid commit-ish.

   In case of conflict, _git rebase_ will stop at the first problematic
commit and leave conflict markers in the tree.  You can use _git diff_
to locate the markers (<<<<<<) and make edits to resolve the conflict.
For each file you edit, you need to tell git that the conflict has been
resolved, typically this would be done with

     git add <filename>

   After resolving the conflict manually and updating the index with the
desired resolution, you can continue the rebasing process with

     git rebase --continue

   Alternatively, you can undo the _git rebase_ with

     git rebase --abort


CONFIGURATION
*************

rebase.stat
     Whether to show a diffstat of what changed upstream since the last
     rebase. False by default.

rebase.autosquash
     If set to true enable _-autosquash_ option by default.


OPTIONS
*******

-onto <newbase>
     Starting point at which to create the new commits. If the -onto
     option is not specified, the starting point is <upstream>.  May be
     any valid commit, and not just an existing branch name.

     As a special case, you may use "A...B" as a shortcut for the merge
     base of A and B if there is exactly one merge base. You can leave
     out at most one of A and B, in which case it defaults to HEAD.

<upstream>
     Upstream branch to compare against.  May be any valid commit, not
     just an existing branch name. Defaults to the configured upstream
     for the current branch.

<branch>
     Working branch; defaults to HEAD.

-continue
     Restart the rebasing process after having resolved a merge
     conflict.

-abort
     Abort the rebase operation and reset HEAD to the original branch.
     If <branch> was provided when the rebase operation was started,
     then HEAD will be reset to <branch>. Otherwise HEAD will be reset
     to where it was when the rebase operation was started.

-keep-empty
     Keep the commits that do not change anything from its parents in
     the result.

-skip
     Restart the rebasing process by skipping the current patch.

-m
-merge
     Use merging strategies to rebase.  When the recursive (default)
     merge strategy is used, this allows rebase to be aware of renames
     on the upstream side.

     Note that a rebase merge works by replaying each commit from the
     working branch on top of the <upstream> branch.  Because of this,
     when a merge conflict happens, the side reported as _ours_ is the
     so-far rebased series, starting with <upstream>, and _theirs_ is
     the working branch.  In other words, the sides are swapped.

-s <strategy>
-strategy=<strategy>
     Use the given merge strategy.  If there is no `-s' option _git
     merge-recursive_ is used instead.  This implies -merge.

     Because _git rebase_ replays each commit from the working branch
     on top of the <upstream> branch using the given strategy, using
     the _ours_ strategy simply discards all patches from the <branch>,
     which makes little sense.

-X <strategy-option>
-strategy-option=<strategy-option>
     Pass the <strategy-option> through to the merge strategy.  This
     implies `--merge' and, if no strategy has been specified, `-s
     recursive'.  Note the reversal of _ours_ and _theirs_ as noted
     above for the `-m' option.

-q
-quiet
     Be quiet. Implies -no-stat.

-v
-verbose
     Be verbose. Implies -stat.

-stat
     Show a diffstat of what changed upstream since the last rebase. The
     diffstat is also controlled by the configuration option
     rebase.stat.

-n
-no-stat
     Do not show a diffstat as part of the rebase process.

-no-verify
     This option bypasses the pre-rebase hook.  See also githooks(5).

-verify
     Allows the pre-rebase hook to run, which is the default.  This
     option can be used to override -no-verify.  See also githooks(5).

-C<n>
     Ensure at least <n> lines of surrounding context match before and
     after each change.  When fewer lines of surrounding context exist
     they all must match.  By default no context is ever ignored.

-f
-force-rebase
     Force the rebase even if the current branch is a descendant of the
     commit you are rebasing onto.  Normally non-interactive rebase will
     exit with the message "Current branch is up to date" in such a
     situation.  Incompatible with the -interactive option.

     You may find this (or -no-ff with an interactive rebase) helpful
     after reverting a topic branch merge, as this option recreates the
     topic branch with fresh commits so it can be remerged successfully
     without needing to "revert the reversion" (see the
     revert-a-faulty-merge How-To (howto/revert-a-faulty-merge.txt) for
     details).

-ignore-whitespace
-whitespace=<option>
     These flag are passed to the _git apply_ program (see
     git-apply(1)) that applies the patch.  Incompatible with the
     -interactive option.

-committer-date-is-author-date
-ignore-date
     These flags are passed to _git am_ to easily change the dates of
     the rebased commits (see git-am(1)).  Incompatible with the
     -interactive option.

-i
-interactive
     Make a list of the commits which are about to be rebased.  Let the
     user edit that list before rebasing.  This mode can also be used to
     split commits (see SPLITTING COMMITS below).

-p
-preserve-merges
     Instead of ignoring merges, try to recreate them.

     This uses the `--interactive' machinery internally, but combining
     it with the `--interactive' option explicitly is generally not a
     good idea unless you know what you are doing (see BUGS below).

-x <cmd>
-exec <cmd>
     Append "exec <cmd>" after each line creating a commit in the final
     history. <cmd> will be interpreted as one or more shell commands.

     This option can only be used with the `--interactive' option (see
     INTERACTIVE MODE below).

     You may execute several commands by either using one instance of
     `--exec' with several commands:

          git rebase -i --exec "cmd1 && cmd2 && ..."

     or by giving more than one `--exec':

          git rebase -i --exec "cmd1" --exec "cmd2" --exec ...

     If `--autosquash' is used, "exec" lines will not be appended for
     the intermediate commits, and will only appear at the end of each
     squash/fixup series.

-root
     Rebase all commits reachable from <branch>, instead of limiting
     them with an <upstream>.  This allows you to rebase the root
     commit(s) on a branch.  When used with -onto, it will skip changes
     already contained in <newbase> (instead of <upstream>) whereas
     without -onto it will operate on every change.  When used together
     with both -onto and -preserve-merges, _all_ root commits will be
     rewritten to have <newbase> as parent instead.

-autosquash
-no-autosquash
     When the commit log message begins with "squash! …" (or "fixup!
     …"), and there is a commit whose title begins with the same …,
     automatically modify the todo list of rebase -i so that the commit
     marked for squashing comes right after the commit to be modified,
     and change the action of the moved commit from `pick' to `squash'
     (or `fixup').

     This option is only valid when the _-interactive_ option is used.

     If the _-autosquash_ option is enabled by default using the
     configuration variable `rebase.autosquash', this option can be
     used to override and disable this setting.

-no-ff
     With -interactive, cherry-pick all rebased commits instead of
     fast-forwarding over the unchanged ones.  This ensures that the
     entire history of the rebased branch is composed of new commits.

     Without -interactive, this is a synonym for -force-rebase.

     You may find this helpful after reverting a topic branch merge, as
     this option recreates the topic branch with fresh commits so it
     can be remerged successfully without needing to "revert the
     reversion" (see the revert-a-faulty-merge How-To
     (howto/revert-a-faulty-merge.txt) for details).


MERGE STRATEGIES
****************

The merge mechanism (_git-merge_ and _git-pull_ commands) allows the
backend _merge strategies_ to be chosen with `-s' option.  Some
strategies can also take their own options, which can be passed by
giving `-X<option>' arguments to _git-merge_ and/or _git-pull_.

resolve
     This can only resolve two heads (i.e. the current branch and
     another branch you pulled from) using a 3-way merge algorithm.  It
     tries to carefully detect criss-cross merge ambiguities and is
     considered generally safe and fast.

recursive
     This can only resolve two heads using a 3-way merge algorithm.
     When there is more than one common ancestor that can be used for
     3-way merge, it creates a merged tree of the common ancestors and
     uses that as the reference tree for the 3-way merge.  This has been
     reported to result in fewer merge conflicts without causing
     mis-merges by tests done on actual merge commits taken from Linux
     2.6 kernel development history.  Additionally this can detect and
     handle merges involving renames.  This is the default merge
     strategy when pulling or merging one branch.

     The _recursive_ strategy can take the following options:

    ours
          This option forces conflicting hunks to be auto-resolved
          cleanly by favoring _our_ version.  Changes from the other
          tree that do not conflict with our side are reflected to the
          merge result.

          This should not be confused with the _ours_ merge strategy,
          which does not even look at what the other tree contains at
          all.  It discards everything the other tree did, declaring
          _our_ history contains all that happened in it.

    theirs
          This is opposite of _ours_.

    patience
          With this option, _merge-recursive_ spends a little extra time
          to avoid mismerges that sometimes occur due to unimportant
          matching lines (e.g., braces from distinct functions).  Use
          this when the branches to be merged have diverged wildly.
          See also git-diff(1) `--patience'.

    ignore-space-change
    ignore-all-space
    ignore-space-at-eol
          Treats lines with the indicated type of whitespace change as
          unchanged for the sake of a three-way merge.  Whitespace
          changes mixed with other changes to a line are not ignored.
          See also git-diff(1) `-b', `-w', and `--ignore-space-at-eol'.

             * If _their_ version only introduces whitespace changes to
               a line, _our_ version is used;

             * If _our_ version introduces whitespace changes but
               _their_ version includes a substantial change, _their_
               version is used;

             * Otherwise, the merge proceeds in the usual way.

    renormalize
          This runs a virtual check-out and check-in of all three stages
          of a file when resolving a three-way merge.  This option is
          meant to be used when merging branches with different clean
          filters or end-of-line normalization rules.  See "Merging
          branches with differing checkin/checkout attributes" in
          gitattributes(5) for details.

    no-renormalize
          Disables the `renormalize' option.  This overrides the
          `merge.renormalize' configuration variable.

    rename-threshold=<n>
          Controls the similarity threshold used for rename detection.
          See also git-diff(1) `-M'.

    subtree[=<path>]
          This option is a more advanced form of _subtree_ strategy,
          where the strategy makes a guess on how two trees must be
          shifted to match with each other when merging.  Instead, the
          specified path is prefixed (or stripped from the beginning)
          to make the shape of two trees to match.

octopus
     This resolves cases with more than two heads, but refuses to do a
     complex merge that needs manual resolution.  It is primarily meant
     to be used for bundling topic branch heads together.  This is the
     default merge strategy when pulling or merging more than one
     branch.

ours
     This resolves any number of heads, but the resulting tree of the
     merge is always that of the current branch head, effectively
     ignoring all changes from all other branches.  It is meant to be
     used to supersede old development history of side branches.  Note
     that this is different from the -Xours option to the _recursive_
     merge strategy.

subtree
     This is a modified recursive strategy. When merging trees A and B,
     if B corresponds to a subtree of A, B is first adjusted to match
     the tree structure of A, instead of reading the trees at the same
     level. This adjustment is also done to the common ancestor tree.


NOTES
*****

You should understand the implications of using _git rebase_ on a
repository that you share.  See also RECOVERING FROM UPSTREAM REBASE
below.

   When the git-rebase command is run, it will first execute a
"pre-rebase" hook if one exists.  You can use this hook to do sanity
checks and reject the rebase if it isn’t appropriate.  Please see the
template pre-rebase hook script for an example.

   Upon completion, <branch> will be the current branch.



INTERACTIVE MODE
****************

Rebasing interactively means that you have a chance to edit the commits
which are rebased.  You can reorder the commits, and you can remove
them (weeding out bad or otherwise unwanted patches).

   The interactive mode is meant for this type of workflow:

  1. have a wonderful idea

  2. hack on the code

  3. prepare a series for submission

  4. submit

   where point 2. consists of several instances of

   a) regular use

  1. finish something worthy of a commit

  2. commit

   b) independent fixup

  1. realize that something does not work

  2. fix that

  3. commit it

   Sometimes the thing fixed in b.2. cannot be amended to the not-quite
perfect commit it fixes, because that commit is buried deeply in a
patch series.  That is exactly what interactive rebase is for: use it
after plenty of "a"s and "b"s, by rearranging and editing commits, and
squashing multiple commits into one.

   Start it with the last commit you want to retain as-is:

     git rebase -i <after-this-commit>

   An editor will be fired up with all the commits in your current
branch (ignoring merge commits), which come after the given commit.
You can reorder the commits in this list to your heart’s content, and
you can remove them.  The list looks more or less like this:

     pick deadbee The oneline of this commit
     pick fa1afe1 The oneline of the next commit
     ...

   The oneline descriptions are purely for your pleasure; _git rebase_
will not look at them but at the commit names ("deadbee" and "fa1afe1"
in this example), so do not delete or edit the names.

   By replacing the command "pick" with the command "edit", you can tell
_git rebase_ to stop after applying that commit, so that you can edit
the files and/or the commit message, amend the commit, and continue
rebasing.

   If you just want to edit the commit message for a commit, replace the
command "pick" with the command "reword".

   If you want to fold two or more commits into one, replace the command
"pick" for the second and subsequent commits with "squash" or "fixup".
If the commits had different authors, the folded commit will be
attributed to the author of the first commit.  The suggested commit
message for the folded commit is the concatenation of the commit
messages of the first commit and of those with the "squash" command,
but omits the commit messages of commits with the "fixup" command.

   _git rebase_ will stop when "pick" has been replaced with "edit" or
when a command fails due to merge errors. When you are done editing
and/or resolving conflicts you can continue with `git rebase
--continue'.

   For example, if you want to reorder the last 5 commits, such that
what was HEAD~4 becomes the new HEAD. To achieve that, you would call
_git rebase_ like this:

     $ git rebase -i HEAD~5

   And move the first patch to the end of the list.

   You might want to preserve merges, if you have a history like this:

                X
                 \
              A---M---B
             /
     ---o---O---P---Q

   Suppose you want to rebase the side branch starting at "A" to "Q".
Make sure that the current HEAD is "B", and call

     $ git rebase -i -p --onto Q O

   Reordering and editing commits usually creates untested intermediate
steps.  You may want to check that your history editing did not break
anything by running a test, or at least recompiling at intermediate
points in history by using the "exec" command (shortcut "x").  You may
do so by creating a todo list like this one:

     pick deadbee Implement feature XXX
     fixup f1a5c00 Fix to feature XXX
     exec make
     pick c0ffeee The oneline of the next commit
     edit deadbab The oneline of the commit after
     exec cd subdir; make test
     ...

   The interactive rebase will stop when a command fails (i.e. exits
with non-0 status) to give you an opportunity to fix the problem. You
can continue with `git rebase --continue'.

   The "exec" command launches the command in a shell (the one specified
in `$SHELL', or the default shell if `$SHELL' is not set), so you can
use shell features (like "cd", ">", ";" …). The command is run from
the root of the working tree.

     $ git rebase -i --exec "make test"

   This command lets you check that intermediate commits are compilable.
The todo list becomes like that:

     pick 5928aea one
     exec make test
     pick 04d0fda two
     exec make test
     pick ba46169 three
     exec make test
     pick f4593f9 four
     exec make test


SPLITTING COMMITS
*****************

In interactive mode, you can mark commits with the action "edit".
However, this does not necessarily mean that _git rebase_ expects the
result of this edit to be exactly one commit.  Indeed, you can undo the
commit, or you can add other commits.  This can be used to split a
commit into two:

   * Start an interactive rebase with `git rebase -i <commit>^', where
     <commit> is the commit you want to split.  In fact, any commit
     range will do, as long as it contains that commit.

   * Mark the commit you want to split with the action "edit".

   * When it comes to editing that commit, execute `git reset HEAD^'.
     The effect is that the HEAD is rewound by one, and the index
     follows suit.  However, the working tree stays the same.

   * Now add the changes to the index that you want to have in the first
     commit.  You can use `git add' (possibly interactively) or _git
     gui_ (or both) to do that.

   * Commit the now-current index with whatever commit message is
     appropriate now.

   * Repeat the last two steps until your working tree is clean.

   * Continue the rebase with `git rebase --continue'.

   If you are not absolutely sure that the intermediate revisions are
consistent (they compile, pass the testsuite, etc.) you should use _git
stash_ to stash away the not-yet-committed changes after each commit,
test, and amend the commit if fixes are necessary.



RECOVERING FROM UPSTREAM REBASE
*******************************

Rebasing (or any other form of rewriting) a branch that others have
based work on is a bad idea: anyone downstream of it is forced to
manually fix their history.  This section explains how to do the fix
from the downstream’s point of view.  The real fix, however, would be
to avoid rebasing the upstream in the first place.

   To illustrate, suppose you are in a situation where someone develops
a _subsystem_ branch, and you are working on a _topic_ that is dependent
on this _subsystem_.  You might end up with a history like the
following:

         o---o---o---o---o---o---o---o---o  master
              \
               o---o---o---o---o  subsystem
                                \
                                 *---*---*  topic

   If _subsystem_ is rebased against _master_, the following happens:

         o---o---o---o---o---o---o---o  master
              \                       \
               o---o---o---o---o       o'--o'--o'--o'--o'  subsystem
                                \
                                 *---*---*  topic

   If you now continue development as usual, and eventually merge
_topic_ to _subsystem_, the commits from _subsystem_ will remain
duplicated forever:

         o---o---o---o---o---o---o---o  master
              \                       \
               o---o---o---o---o       o'--o'--o'--o'--o'--M  subsystem
                                \                         /
                                 *---*---*-..........-*--*  topic

   Such duplicates are generally frowned upon because they clutter up
history, making it harder to follow.  To clean things up, you need to
transplant the commits on _topic_ to the new _subsystem_ tip, i.e.,
rebase _topic_.  This becomes a ripple effect: anyone downstream from
_topic_ is forced to rebase too, and so on!

   There are two kinds of fixes, discussed in the following subsections:

Easy case: The changes are literally the same.
     This happens if the _subsystem_ rebase was a simple rebase and had
     no conflicts.

Hard case: The changes are not the same.
     This happens if the _subsystem_ rebase had conflicts, or used
     `--interactive' to omit, edit, squash, or fixup commits; or if the
     upstream used one of `commit --amend', `reset', or `filter-branch'.


The easy case
=============

Only works if the changes (patch IDs based on the diff contents) on
_subsystem_ are literally the same before and after the rebase
_subsystem_ did.

   In that case, the fix is easy because _git rebase_ knows to skip
changes that are already present in the new upstream.  So if you say
(assuming you’re on _topic_)

         $ git rebase subsystem

   you will end up with the fixed history

         o---o---o---o---o---o---o---o  master
                                      \
                                       o'--o'--o'--o'--o'  subsystem
                                                        \
                                                         *---*---*  topic


The hard case
=============

Things get more complicated if the _subsystem_ changes do not exactly
correspond to the ones before the rebase.

     *Note*

     While an "easy case recovery" sometimes appears to be successful
     even in the hard case, it may have unintended consequences.  For
     example, a commit that was removed via `git rebase --interactive'
     will be *resurrected*!

   The idea is to manually tell _git rebase_ "where the old _subsystem_
ended and your _topic_ began", that is, what the old merge-base between
them was.  You will have to find a way to name the last commit of the
old _subsystem_, for example:

   * With the _subsystem_ reflog: after _git fetch_, the old tip of
     _subsystem_ is at `subsystem@{1}'.  Subsequent fetches will
     increase the number.  (See git-reflog(1).)

   * Relative to the tip of _topic_: knowing that your _topic_ has three
     commits, the old tip of _subsystem_ must be `topic~3'.

   You can then transplant the old `subsystem..topic' to the new tip by
saying (for the reflog case, and assuming you are on _topic_ already):

         $ git rebase --onto subsystem subsystem@{1}

   The ripple effect of a "hard case" recovery is especially bad:
_everyone_ downstream from _topic_ will now have to perform a "hard
case" recovery too!



BUGS
****

The todo list presented by `--preserve-merges --interactive' does not
represent the topology of the revision graph.  Editing commits and
rewording their commit messages should work fine, but attempts to
reorder commits tend to produce counterintuitive results.

   For example, an attempt to rearrange

     1 --- 2 --- 3 --- 4 --- 5

   to

     1 --- 2 --- 4 --- 3 --- 5

   by moving the "pick 4" line will result in the following history:

             3
            /
     1 --- 2 --- 4 --- 5


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-receive-pack,  Up: Top

Name
****

git-receive-pack — Receive what is pushed into the repository



Synopsis
********

     git-receive-pack <directory>


DESCRIPTION
***********

Invoked by _git send-pack_ and updates the repository with the
information fed from the remote end.

   This command is usually not invoked directly by the end user.  The
UI for the protocol is on the _git send-pack_ side, and the program
pair is meant to be used to push updates to remote repository.  For
pull operations, see git-fetch-pack(1).

   The command allows for creation and fast-forwarding of sha1 refs
(heads/tags) on the remote end (strictly speaking, it is the local end
_git-receive-pack_ runs, but to the user who is sitting at the
send-pack end, it is updating the remote.  Confused?)

   There are other real-world examples of using update and post-update
hooks found in the Documentation/howto directory.

   _git-receive-pack_ honours the receive.denyNonFastForwards config
option, which tells it if updates to a ref should be denied if they are
not fast-forwards.



OPTIONS
*******

<directory>
     The repository to sync into.


pre-receive Hook
****************

Before any ref is updated, if $GIT_DIR/hooks/pre-receive file exists
and is executable, it will be invoked once with no parameters.  The
standard input of the hook will be one line per ref to be updated:

     sha1-old SP sha1-new SP refname LF

   The refname value is relative to $GIT_DIR; e.g. for the master head
this is "refs/heads/master".  The two sha1 values before each refname
are the object names for the refname before and after the update.  Refs
to be created will have sha1-old equal to 0{40}, while refs to be
deleted will have sha1-new equal to 0{40}, otherwise sha1-old and
sha1-new should be valid objects in the repository.

   This hook is called before any refname is updated and before any
fast-forward checks are performed.

   If the pre-receive hook exits with a non-zero exit status no updates
will be performed, and the update, post-receive and post-update hooks
will not be invoked either.  This can be useful to quickly bail out if
the update is not to be supported.



update Hook
***********

Before each ref is updated, if $GIT_DIR/hooks/update file exists and is
executable, it is invoked once per ref, with three parameters:

     $GIT_DIR/hooks/update refname sha1-old sha1-new

   The refname parameter is relative to $GIT_DIR; e.g. for the master
head this is "refs/heads/master".  The two sha1 arguments are the
object names for the refname before and after the update.  Note that
the hook is called before the refname is updated, so either sha1-old is
0{40} (meaning there is no such ref yet), or it should match what is
recorded in refname.

   The hook should exit with non-zero status if it wants to disallow
updating the named ref.  Otherwise it should exit with zero.

   Successful execution (a zero exit status) of this hook does not
ensure the ref will actually be updated, it is only a prerequisite.  As
such it is not a good idea to send notices (e.g. email) from this hook.
Consider using the post-receive hook instead.



post-receive Hook
*****************

After all refs were updated (or attempted to be updated), if any ref
update was successful, and if $GIT_DIR/hooks/post-receive file exists
and is executable, it will be invoked once with no parameters.  The
standard input of the hook will be one line for each successfully
updated ref:

     sha1-old SP sha1-new SP refname LF

   The refname value is relative to $GIT_DIR; e.g. for the master head
this is "refs/heads/master".  The two sha1 values before each refname
are the object names for the refname before and after the update.  Refs
that were created will have sha1-old equal to 0{40}, while refs that
were deleted will have sha1-new equal to 0{40}, otherwise sha1-old and
sha1-new should be valid objects in the repository.

   Using this hook, it is easy to generate mails describing the updates
to the repository.  This example script sends one mail message per ref
listing the commits pushed to the repository:

     #!/bin/sh
     # mail out commit update information.
     while read oval nval ref
     do
             if expr "$oval" : '0*$' >/dev/null
             then
                     echo "Created a new ref, with the following commits:"
                     git rev-list --pretty "$nval"
             else
                     echo "New commits:"
                     git rev-list --pretty "$nval" "^$oval"
             fi |
             mail -s "Changes to ref $ref" commit-list@mydomain
     done
     exit 0

   The exit code from this hook invocation is ignored, however a
non-zero exit code will generate an error message.

   Note that it is possible for refname to not have sha1-new when this
hook runs.  This can easily occur if another user modifies the ref
after it was updated by _git-receive-pack_, but before the hook was able
to evaluate it.  It is recommended that hooks rely on sha1-new rather
than the current value of refname.



post-update Hook
****************

After all other processing, if at least one ref was updated, and if
$GIT_DIR/hooks/post-update file exists and is executable, then
post-update will be called with the list of refs that have been updated.
This can be used to implement any repository wide cleanup tasks.

   The exit code from this hook invocation is ignored; the only thing
left for _git-receive-pack_ to do at that point is to exit itself
anyway.

   This hook can be used, for example, to run `git update-server-info'
if the repository is packed and is served via a dumb transport.

     #!/bin/sh
     exec git update-server-info


SEE ALSO
********

git-send-pack(1), gitnamespaces(7)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-reflog,  Up: Top

Name
****

git-reflog — Manage reflog information



Synopsis
********

     git reflog <subcommand> <options>


DESCRIPTION
***********

The command takes various subcommands, and different options depending
on the subcommand:

     git reflog expire [-dry-run] [-stale-fix] [-verbose]
             [-expire=<time>] [-expire-unreachable=<time>] [-all] <refs>…
     git reflog delete ref@{specifier}…
     git reflog [show] [log-options] [<ref>]

   Reflog is a mechanism to record when the tip of branches are
updated.  This command is to manage the information recorded in it.

   The subcommand "expire" is used to prune older reflog entries.
Entries older than `expire' time, or entries older than
`expire-unreachable' time and not reachable from the current tip, are
removed from the reflog.  This is typically not used directly by the
end users — instead, see git-gc(1).

   The subcommand "show" (which is also the default, in the absence of
any subcommands) will take all the normal log options, and show the log
of the reference provided in the command-line (or `HEAD', by default).
The reflog will cover all recent actions (HEAD reflog records branch
switching as well).  It is an alias for `git log -g --abbrev-commit
--pretty=oneline'; see git-log(1).

   The reflog is useful in various git commands, to specify the old
value of a reference. For example, `HEAD@{2}' means "where HEAD used to
be two moves ago", `master@{one.week.ago}' means "where master used to
point to one week ago", and so on. See gitrevisions(7) for more details.

   To delete single entries from the reflog, use the subcommand "delete"
and specify the _exact_ entry (e.g. "`git reflog delete master@{2}'").



OPTIONS
*******

-stale-fix
     This revamps the logic — the definition of "broken commit"
     becomes: a commit that is not reachable from any of the refs and
     there is a missing object among the commit, tree, or blob objects
     reachable from it that is not reachable from any of the refs.

     This computation involves traversing all the reachable objects,
     i.e. it has the same cost as _git prune_.  Fortunately, once this
     is run, we should not have to ever worry about missing objects,
     because the current prune and pack-objects know about reflogs and
     protect objects referred by them.

-expire=<time>
     Entries older than this time are pruned.  Without the option it is
     taken from configuration `gc.reflogExpire', which in turn defaults
     to 90 days.

-expire-unreachable=<time>
     Entries older than this time and not reachable from the current
     tip of the branch are pruned.  Without the option it is taken from
     configuration `gc.reflogExpireUnreachable', which in turn defaults
     to 30 days.

-all
     Instead of listing <refs> explicitly, prune all refs.

-updateref
     Update the ref with the sha1 of the top reflog entry (i.e.
     <ref>@{0}) after expiring or deleting.

-rewrite
     While expiring or deleting, adjust each reflog entry to ensure
     that the `old' sha1 field points to the `new' sha1 field of the
     previous entry.

-verbose
     Print extra information on screen.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-relink,  Up: Top

Name
****

git-relink — Hardlink common objects in local repositories



Synopsis
********

     git relink [-safe] <dir>… <master_dir>


DESCRIPTION
***********

This will scan 1 or more object repositories and look for objects in
common with a master repository. Objects not already hardlinked to the
master repository will be replaced with a hardlink to the master
repository.



OPTIONS
*******

-safe
     Stops if two objects with the same hash exist but have different
     sizes.  Default is to warn and continue.

<dir>
     Directories containing a .git/objects/ subdirectory.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-remote-ext,  Up: Top

Name
****

git-remote-ext — Bridge smart transport to external command.



Synopsis
********

     git remote add <nick> "ext::<command>[ <arguments>…]"


DESCRIPTION
***********

This remote helper uses the specified _<command>_ to connect to a
remote git server.

   Data written to stdin of the specified _<command>_ is assumed to be
sent to a git:// server, git-upload-pack, git-receive-pack or
git-upload-archive (depending on situation), and data read from stdout
of <command> is assumed to be received from the same service.

   Command and arguments are separated by an unescaped space.

   The following sequences have a special meaning:

'% '
     Literal space in command or argument.

_%%_
     Literal percent sign.

_%s_
     Replaced with name (receive-pack, upload-pack, or upload-archive)
     of the service git wants to invoke.

_%S_
     Replaced with long name (git-receive-pack, git-upload-pack, or
     git-upload-archive) of the service git wants to invoke.

_%G_ (must be the first characters in an argument)
     This argument will not be passed to _<command>_. Instead, it will
     cause the helper to start by sending git:// service requests to
     the remote side with the service field set to an appropriate value
     and the repository field set to rest of the argument. Default is
     not to send such a request.

     This is useful if remote side is git:// server accessed over some
     tunnel.

_%V_ (must be first characters in argument)
     This argument will not be passed to _<command>_. Instead it sets
     the vhost field in the git:// service request (to rest of the
     argument).  Default is not to send vhost in such request (if sent).


ENVIRONMENT VARIABLES:
**********************

GIT_TRANSLOOP_DEBUG
     If set, prints debugging information about various reads/writes.


ENVIRONMENT VARIABLES PASSED TO COMMAND:
****************************************

GIT_EXT_SERVICE
     Set to long name (git-upload-pack, etc…) of service helper needs
     to invoke.

GIT_EXT_SERVICE_NOPREFIX
     Set to long name (upload-pack, etc…) of service helper needs to
     invoke.


EXAMPLES:
*********

This remote helper is transparently used by git when you use commands
such as "git fetch <URL>", "git clone <URL>", , "git push <URL>" or
"git remote add <nick> <URL>", where <URL> begins with `ext::'.
Examples:

"ext::ssh -i /home/foo/.ssh/somekey user@host.example %S _foo/repo_"
     Like host.example:foo/repo, but use /home/foo/.ssh/somekey as
     keypair and user as user on remote side. This avoids needing to
     edit .ssh/config.

"ext::socat -t3600 - ABSTRACT-CONNECT:/git-server %G/somerepo"
     Represents repository with path /somerepo accessable over git
     protocol at abstract namespace address /git-server.

"ext::git-server-alias foo %G/repo"
     Represents a repository with path /repo accessed using the helper
     program "git-server-alias foo".  The path to the repository and
     type of request are not passed on the command line but as part of
     the protocol stream, as usual with git:// protocol.

"ext::git-server-alias foo %G/repo %Vfoo"
     Represents a repository with path /repo accessed using the helper
     program "git-server-alias foo".  The hostname for the remote
     server passed in the protocol stream will be "foo" (this allows
     multiple virtual git servers to share a link-level address).

"ext::git-server-alias foo %G/repo% with% spaces %Vfoo"
     Represents a repository with path _/repo with spaces_ accessed
     using the helper program "git-server-alias foo".  The hostname for
     the remote server passed in the protocol stream will be "foo"
     (this allows multiple virtual git servers to share a link-level
     address).

"ext::git-ssl foo.example /bar"
     Represents a repository accessed using the helper program "git-ssl
     foo.example /bar".  The type of request can be determined by the
     helper using environment variables (see above).


Documentation
*************

Documentation by Ilari Liusvaara, Jonathan Nieder and the git list
<git@vger.kernel.org (mailto:git@vger.kernel.org)>



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-remote-fd,  Up: Top

Name
****

git-remote-fd — Reflect smart transport stream back to caller



Synopsis
********

"fd::<infd>[,<outfd>][/<anything>]" (as URL)



DESCRIPTION
***********

This helper uses specified file descriptors to connect to a remote git
server.  This is not meant for end users but for programs and scripts
calling git fetch, push or archive.

   If only <infd> is given, it is assumed to be a bidirectional socket
connected to remote git server (git-upload-pack, git-receive-pack or
git-upload-achive). If both <infd> and <outfd> are given, they are
assumed to be pipes connected to a remote git server (<infd> being the
inbound pipe and <outfd> being the outbound pipe.

   It is assumed that any handshaking procedures have already been
completed (such as sending service request for git://) before this
helper is started.

   <anything> can be any string. It is ignored. It is meant for
providing information to user in the URL in case that URL is displayed
in some context.



ENVIRONMENT VARIABLES
*********************

GIT_TRANSLOOP_DEBUG
     If set, prints debugging information about various reads/writes.


EXAMPLES
********

`git fetch fd::17 master'
     Fetch master, using file descriptor #17 to communicate with
     git-upload-pack.

`git fetch fd::17/foo master'
     Same as above.

`git push fd::7,8 master (as URL)'
     Push master, using file descriptor #7 to read data from
     git-receive-pack and file descriptor #8 to write data to same
     service.

`git push fd::7,8/bar master'
     Same as above.


Documentation
*************

Documentation by Ilari Liusvaara and the git list <git@vger.kernel.org
(mailto:git@vger.kernel.org)>



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-remote-helpers,  Up: Top

Name
****

git-remote-helpers — Helper programs to interact with remote
repositories



Synopsis
********

     git remote-<transport> <repository> [<URL>]


DESCRIPTION
***********

Remote helper programs are normally not used directly by end users, but
they are invoked by git when it needs to interact with remote
repositories git does not support natively.  A given helper will
implement a subset of the capabilities documented here. When git needs
to interact with a repository using a remote helper, it spawns the
helper as an independent process, sends commands to the helper’s
standard input, and expects results from the helper’s standard
output. Because a remote helper runs as an independent process from
git, there is no need to re-link git to add a new helper, nor any need
to link the helper with the implementation of git.

   Every helper must support the "capabilities" command, which git uses
to determine what other commands the helper will accept.  Those other
commands can be used to discover and update remote refs, transport
objects between the object database and the remote repository, and
update the local object store.

   Git comes with a "curl" family of remote helpers, that handle various
transport protocols, such as _git-remote-http_, _git-remote-https_,
_git-remote-ftp_ and _git-remote-ftps_. They implement the capabilities
_fetch_, _option_, and _push_.



INPUT FORMAT
************

Git sends the remote helper a list of commands on standard input, one
per line.  The first command is always the _capabilities_ command, in
response to which the remote helper must print a list of the
capabilities it supports (see below) followed by a blank line.  The
response to the capabilities command determines what commands Git uses
in the remainder of the command stream.

   The command stream is terminated by a blank line.  In some cases
(indicated in the documentation of the relevant commands), this blank
line is followed by a payload in some other protocol (e.g., the pack
protocol), while in others it indicates the end of input.



Capabilities
============

Each remote helper is expected to support only a subset of commands.
The operations a helper supports are declared to git in the response to
the `capabilities' command (see COMMANDS, below).

_option_
     For specifying settings like `verbosity' (how much output to write
     to stderr) and `depth' (how much history is wanted in the case of
     a shallow clone) that affect how other commands are carried out.

_connect_
     For fetching and pushing using git’s native packfile protocol
     that requires a bidirectional, full-duplex connection.

_push_
     For listing remote refs and pushing specified objects from the
     local object store to remote refs.

_fetch_
     For listing remote refs and fetching the associated history to the
     local object store.

_import_
     For listing remote refs and fetching the associated history as a
     fast-import stream.

_refspec_ <refspec>
     This modifies the _import_ capability, allowing the produced
     fast-import stream to modify refs in a private namespace instead
     of writing to refs/heads or refs/remotes directly.  It is
     recommended that all importers providing the _import_ capability
     use this.

     A helper advertising the capability `refspec
     refs/heads/*:refs/svn/origin/branches/*' is saying that, when it
     is asked to `import refs/heads/topic', the stream it outputs will
     update the `refs/svn/origin/branches/topic' ref.

     This capability can be advertised multiple times.  The first
     applicable refspec takes precedence.  The left-hand of refspecs
     advertised with this capability must cover all refs reported by
     the list command.  If no _refspec_ capability is advertised, there
     is an implied `refspec *:*'.


Capabilities for Pushing
========================

_connect_
     Can attempt to connect to _git receive-pack_ (for pushing), _git
     upload-pack_, etc for communication using the packfile protocol.

     Supported commands: _connect_.

_push_
     Can discover remote refs and push local commits and the history
     leading up to them to new or existing remote refs.

     Supported commands: _list for-push_, _push_.

   If a helper advertises both _connect_ and _push_, git will use
_connect_ if possible and fall back to _push_ if the helper requests so
when connecting (see the _connect_ command under COMMANDS).



Capabilities for Fetching
=========================

_connect_
     Can try to connect to _git upload-pack_ (for fetching), _git
     receive-pack_, etc for communication using the packfile protocol.

     Supported commands: _connect_.

_fetch_
     Can discover remote refs and transfer objects reachable from them
     to the local object store.

     Supported commands: _list_, _fetch_.

_import_
     Can discover remote refs and output objects reachable from them as
     a stream in fast-import format.

     Supported commands: _list_, _import_.

   If a helper advertises _connect_, git will use it if possible and
fall back to another capability if the helper requests so when
connecting (see the _connect_ command under COMMANDS).  When choosing
between _fetch_ and _import_, git prefers _fetch_.  Other frontends may
have some other order of preference.

_refspec_ <refspec>
     This modifies the _import_ capability.

     A helper advertising `refspec
     refs/heads/*:refs/svn/origin/branches/*' in its capabilities is
     saying that, when it handles `import refs/heads/topic', the stream
     it outputs will update the `refs/svn/origin/branches/topic' ref.

     This capability can be advertised multiple times.  The first
     applicable refspec takes precedence.  The left-hand of refspecs
     advertised with this capability must cover all refs reported by
     the list command.  If no _refspec_ capability is advertised, there
     is an implied `refspec *:*'.


INVOCATION
**********

Remote helper programs are invoked with one or (optionally) two
arguments. The first argument specifies a remote repository as in git;
it is either the name of a configured remote or a URL. The second
argument specifies a URL; it is usually of the form
_<transport>://<address>_, but any arbitrary string is possible.  The
_GIT_DIR_ environment variable is set up for the remote helper and can
be used to determine where to store additional data or from which
directory to invoke auxiliary git commands.

   When git encounters a URL of the form _<transport>://<address>_,
where _<transport>_ is a protocol that it cannot handle natively, it
automatically invokes _git remote-<transport>_ with the full URL as the
second argument. If such a URL is encountered directly on the command
line, the first argument is the same as the second, and if it is
encountered in a configured remote, the first argument is the name of
that remote.

   A URL of the form _<transport>::<address>_ explicitly instructs git
to invoke _git remote-<transport>_ with _<address>_ as the second
argument. If such a URL is encountered directly on the command line,
the first argument is _<address>_, and if it is encountered in a
configured remote, the first argument is the name of that remote.

   Additionally, when a configured remote has _remote.<name>.vcs_ set to
_<transport>_, git explicitly invokes _git remote-<transport>_ with
_<name>_ as the first argument. If set, the second argument is
_remote.<name>.url_; otherwise, the second argument is omitted.



COMMANDS
********

Commands are given by the caller on the helper’s standard input, one
per line.

_capabilities_
     Lists the capabilities of the helper, one per line, ending with a
     blank line. Each capability may be preceded with _*_, which marks
     them mandatory for git version using the remote helper to
     understand (unknown mandatory capability is fatal error).

_list_
     Lists the refs, one per line, in the format "<value> <name>
     [<attr> …]". The value may be a hex sha1 hash, "@<dest>" for a
     symref, or "?" to indicate that the helper could not get the value
     of the ref. A space-separated list of attributes follows the name;
     unrecognized attributes are ignored. The list ends with a blank
     line.

     If _push_ is supported this may be called as _list for-push_ to
     obtain the current refs prior to sending one or more _push_
     commands to the helper.

_option_ <name> <value>
     Sets the transport helper option <name> to <value>.  Outputs a
     single line containing one of _ok_ (option successfully set),
     _unsupported_ (option not recognized) or _error <msg>_ (option
     <name> is supported but <value> is not valid for it).  Options
     should be set before other commands, and may influence the
     behavior of those commands.

     Supported if the helper has the "option" capability.

_fetch_ <sha1> <name>
     Fetches the given object, writing the necessary objects to the
     database.  Fetch commands are sent in a batch, one per line,
     terminated with a blank line.  Outputs a single blank line when
     all fetch commands in the same batch are complete. Only objects
     which were reported in the ref list with a sha1 may be fetched
     this way.

     Optionally may output a _lock <file>_ line indicating a file under
     GIT_DIR/objects/pack which is keeping a pack until refs can be
     suitably updated.

     Supported if the helper has the "fetch" capability.

_push_ +<src>:<dst>
     Pushes the given local <src> commit or branch to the remote branch
     described by <dst>.  A batch sequence of one or more _push_
     commands is terminated with a blank line (if there is only one
     reference to push, a single _push_ command is followed by a blank
     line). For example, the following would be two batches of _push_,
     the first asking the remote-helper to push the local ref _master_
     to the remote ref _master_ and the local _HEAD_ to the remote
     _branch_, and the second asking to push ref _foo_ to ref _bar_
     (forced update requested by the _+_).

          push refs/heads/master:refs/heads/master
          push HEAD:refs/heads/branch
          \n
          push +refs/heads/foo:refs/heads/bar
          \n

     Zero or more protocol options may be entered after the last _push_
     command, before the batch’s terminating blank line.

     When the push is complete, outputs one or more _ok <dst>_ or
     _error <dst> <why>?_ lines to indicate success or failure of each
     pushed ref.  The status report output is terminated by a blank
     line.  The option field <why> may be quoted in a C style string if
     it contains an LF.

     Supported if the helper has the "push" capability.

_import_ <name>
     Produces a fast-import stream which imports the current value of
     the named ref. It may additionally import other refs as needed to
     construct the history efficiently. The script writes to a
     helper-specific private namespace. The value of the named ref
     should be written to a location in this namespace derived by
     applying the refspecs from the "refspec" capability to the name of
     the ref.

     Especially useful for interoperability with a foreign versioning
     system.

     Just like _push_, a batch sequence of one or more _import_ is
     terminated with a blank line. For each batch of _import_, the
     remote helper should produce a fast-import stream terminated by a
     _done_ command.

     Supported if the helper has the "import" capability.

_connect_ <service>
     Connects to given service. Standard input and standard output of
     helper are connected to specified service (git prefix is included
     in service name so e.g. fetching uses _git-upload-pack_ as
     service) on remote side. Valid replies to this command are empty
     line (connection established), _fallback_ (no smart transport
     support, fall back to dumb transports) and just exiting with error
     message printed (can’t connect, don’t bother trying to fall
     back). After line feed terminating the positive (empty) response,
     the output of service starts. After the connection ends, the
     remote helper exits.

     Supported if the helper has the "connect" capability.

   If a fatal error occurs, the program writes the error message to
stderr and exits. The caller should expect that a suitable error
message has been printed if the child closes the connection without
completing a valid response for the current command.

   Additional commands may be supported, as may be determined from
capabilities reported by the helper.



REF LIST ATTRIBUTES
*******************

_for-push_
     The caller wants to use the ref list to prepare push commands.  A
     helper might chose to acquire the ref list by opening a different
     type of connection to the destination.

_unchanged_
     This ref is unchanged since the last import or fetch, although the
     helper cannot necessarily determine what value that produced.


OPTIONS
*******

_option verbosity_ <n>
     Changes the verbosity of messages displayed by the helper.  A
     value of 0 for <n> means that processes operate quietly, and the
     helper produces only error output.  1 is the default level of
     verbosity, and higher values of <n> correspond to the number of -v
     flags passed on the command line.

_option progress_ {_true_|_false_}
     Enables (or disables) progress messages displayed by the transport
     helper during a command.

_option depth_ <depth>
     Deepens the history of a shallow repository.

_option followtags_ {_true_|_false_}
     If enabled the helper should automatically fetch annotated tag
     objects if the object the tag points at was transferred during the
     fetch command.  If the tag is not fetched by the helper a second
     fetch command will usually be sent to ask for the tag
     specifically.  Some helpers may be able to use this option to
     avoid a second network connection.

   _option dry-run_ {_true_|_false_}: If true, pretend the operation
completed successfully, but don’t actually change any repository
data.  For most helpers this only applies to the _push_, if supported.

_option servpath <c-style-quoted-path>_
     Sets service path (-upload-pack, -receive-pack etc.) for next
     connect. Remote helper may support this option, but must not rely
     on this option being set before connect request occurs.


SEE ALSO
********

git-remote(1)

   git-remote-testgit(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-remote-testgit,  Up: Top

Name
****

git-remote-testgit — Example remote-helper



Synopsis
********

     git clone testgit::<source-repo> [<destination>]


DESCRIPTION
***********

This command is a simple remote-helper, that is used both as a testcase
for the remote-helper functionality, and as an example to show
remote-helper authors one possible implementation.

   The best way to learn more is to read the comments and source code in
_git-remote-testgit.py_.



SEE ALSO
********

git-remote-helpers(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-remote,  Up: Top

Name
****

git-remote — manage set of tracked repositories



Synopsis
********

     git remote [-v | -verbose]
     git remote add [-t <branch>] [-m <master>] [-f] [-tags|-no-tags] [-mirror=<fetch|push>] <name> <url>
     git remote rename <old> <new>
     git remote rm <name>
     git remote set-head <name> (-a | -d | <branch>)
     git remote set-branches [-add] <name> <branch>…
     git remote set-url [-push] <name> <newurl> [<oldurl>]
     git remote set-url -add [-push] <name> <newurl>
     git remote set-url -delete [-push] <name> <url>
     git remote [-v | -verbose] show [-n] <name>
     git remote prune [-n | -dry-run] <name>
     git remote [-v | -verbose] update [-p | -prune] [(<group> | <remote>)…]


DESCRIPTION
***********

Manage the set of repositories ("remotes") whose branches you track.



OPTIONS
*******

-v
-verbose
     Be a little more verbose and show remote url after name.  NOTE:
     This must be placed between `remote' and `subcommand'.


COMMANDS
********

With no arguments, shows a list of existing remotes.  Several
subcommands are available to perform operations on the remotes.

_add_
     Adds a remote named <name> for the repository at <url>.  The
     command `git fetch <name>' can then be used to create and update
     remote-tracking branches <name>/<branch>.

     With `-f' option, `git fetch <name>' is run immediately after the
     remote information is set up.

     With `--tags' option, `git fetch <name>' imports every tag from the
     remote repository.

     With `--no-tags' option, `git fetch <name>' does not import tags
     from the remote repository.

     With `-t <branch>' option, instead of the default glob refspec for
     the remote to track all branches under the `refs/remotes/<name>/'
     namespace, a refspec to track only `<branch>' is created.  You can
     give more than one `-t <branch>' to track multiple branches
     without grabbing all branches.

     With `-m <master>' option, a symbolic-ref
     `refs/remotes/<name>/HEAD' is set up to point at remote’s
     `<master>' branch. See also the set-head command.

     When a fetch mirror is created with `--mirror=fetch', the refs
     will not be stored in the _refs/remotes/_ namespace, but rather
     everything in _refs/_ on the remote will be directly mirrored into
     _refs/_ in the local repository. This option only makes sense in
     bare repositories, because a fetch would overwrite any local
     commits.

     When a push mirror is created with `--mirror=push', then `git push'
     will always behave as if `--mirror' was passed.

_rename_
     Rename the remote named <old> to <new>. All remote-tracking
     branches and configuration settings for the remote are updated.

     In case <old> and <new> are the same, and <old> is a file under
     `$GIT_DIR/remotes' or `$GIT_DIR/branches', the remote is converted
     to the configuration file format.

_rm_
     Remove the remote named <name>. All remote-tracking branches and
     configuration settings for the remote are removed.

_set-head_
     Sets or deletes the default branch (i.e. the target of the
     symbolic-ref `refs/remotes/<name>/HEAD') for the named remote.
     Having a default branch for a remote is not required, but allows
     the name of the remote to be specified in lieu of a specific
     branch. For example, if the default branch for `origin' is set to
     `master', then `origin' may be specified wherever you would
     normally specify `origin/master'.

     With `-d', the symbolic ref `refs/remotes/<name>/HEAD' is deleted.

     With `-a', the remote is queried to determine its `HEAD', then the
     symbolic-ref `refs/remotes/<name>/HEAD' is set to the same branch.
     e.g., if the remote `HEAD' is pointed at `next', "`git remote
     set-head origin -a'" will set the symbolic-ref
     `refs/remotes/origin/HEAD' to `refs/remotes/origin/next'. This will
     only work if `refs/remotes/origin/next' already exists; if not it
     must be fetched first.

     Use `<branch>' to set the symbolic-ref `refs/remotes/<name>/HEAD'
     explicitly. e.g., "git remote set-head origin master" will set the
     symbolic-ref `refs/remotes/origin/HEAD' to
     `refs/remotes/origin/master'. This will only work if
     `refs/remotes/origin/master' already exists; if not it must be
     fetched first.

_set-branches_
     Changes the list of branches tracked by the named remote.  This
     can be used to track a subset of the available remote branches
     after the initial setup for a remote.

     The named branches will be interpreted as if specified with the
     `-t' option on the _git remote add_ command line.

     With `--add', instead of replacing the list of currently tracked
     branches, adds to that list.

_set-url_
     Changes URL remote points to. Sets first URL remote points to
     matching regex <oldurl> (first URL if no <oldurl> is given) to
     <newurl>. If <oldurl> doesn’t match any URL, error occurs and
     nothing is changed.

     With _-push_, push URLs are manipulated instead of fetch URLs.

     With _-add_, instead of changing some URL, new URL is added.

     With _-delete_, instead of changing some URL, all URLs matching
     regex <url> are deleted. Trying to delete all non-push URLs is an
     error.

_show_
     Gives some information about the remote <name>.

     With `-n' option, the remote heads are not queried first with `git
     ls-remote <name>'; cached information is used instead.

_prune_
     Deletes all stale remote-tracking branches under <name>.  These
     stale branches have already been removed from the remote repository
     referenced by <name>, but are still locally available in
     "remotes/<name>".

     With `--dry-run' option, report what branches will be pruned, but
     do not actually prune them.

_update_
     Fetch updates for a named set of remotes in the repository as
     defined by remotes.<group>.  If a named group is not specified on
     the command line, the configuration parameter remotes.default will
     be used; if remotes.default is not defined, all remotes which do
     not have the configuration parameter
     remote.<name>.skipDefaultUpdate set to true will be updated.  (See
     git-config(1)).

     With `--prune' option, prune all the remotes that are updated.


DISCUSSION
**********

The remote configuration is achieved using the `remote.origin.url' and
`remote.origin.fetch' configuration variables.  (See git-config(1)).



Examples
********

   * Add a new remote, fetch, and check out a branch from it

          $ git remote
          origin
          $ git branch -r
          origin/master
          $ git remote add linux-nfs git://linux-nfs.org/pub/linux/nfs-2.6.git
          $ git remote
          linux-nfs
          origin
          $ git fetch
          * refs/remotes/linux-nfs/master: storing branch 'master' ...
            commit: bf81b46
          $ git branch -r
          origin/master
          linux-nfs/master
          $ git checkout -b nfs linux-nfs/master
          ...

   * Imitate _git clone_ but track only selected branches

          $ mkdir project.git
          $ cd project.git
          $ git init
          $ git remote add -f -t master -m master origin git://example.com/git.git/
          $ git merge origin



SEE ALSO
********

git-fetch(1) git-branch(1) git-config(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-repack,  Up: Top

Name
****

git-repack — Pack unpacked objects in a repository



Synopsis
********

     git repack [-a] [-A] [-d] [-f] [-F] [-l] [-n] [-q] [-window=<n>] [-depth=<n>]


DESCRIPTION
***********

This script is used to combine all objects that do not currently reside
in a "pack", into a pack.  It can also be used to re-organize existing
packs into a single, more efficient pack.

   A pack is a collection of objects, individually compressed, with
delta compression applied, stored in a single file, with an associated
index file.

   Packs are used to reduce the load on mirror systems, backup engines,
disk storage, etc.



OPTIONS
*******

-a
     Instead of incrementally packing the unpacked objects, pack
     everything referenced into a single pack.  Especially useful when
     packing a repository that is used for private development. Use
     with _-d_.  This will clean up the objects that `git prune' leaves
     behind, but `git fsck --full --dangling' shows as dangling.

     Note that users fetching over dumb protocols will have to fetch the
     whole new pack in order to get any contained object, no matter how
     many other objects in that pack they already have locally.

-A
     Same as `-a', unless _-d_ is used.  Then any unreachable objects
     in a previous pack become loose, unpacked objects, instead of
     being left in the old pack.  Unreachable objects are never
     intentionally added to a pack, even when repacking.  This option
     prevents unreachable objects from being immediately deleted by way
     of being left in the old pack and then removed.  Instead, the
     loose unreachable objects will be pruned according to normal
     expiry rules with the next _git gc_ invocation. See git-gc(1).

-d
     After packing, if the newly created packs make some existing packs
     redundant, remove the redundant packs.  Also run  _git
     prune-packed_ to remove redundant loose object files.

-l
     Pass the `--local' option to _git pack-objects_. See
     git-pack-objects(1).

-f
     Pass the `--no-reuse-delta' option to `git-pack-objects', see
     git-pack-objects(1).

-F
     Pass the `--no-reuse-object' option to `git-pack-objects', see
     git-pack-objects(1).

-q
     Pass the `-q' option to _git pack-objects_. See
     git-pack-objects(1).

-n
     Do not update the server information with _git
     update-server-info_.  This option skips updating local catalog
     files needed to publish this repository (or a direct copy of it)
     over HTTP or FTP.  See git-update-server-info(1).

-window=<n>
-depth=<n>
     These two options affect how the objects contained in the pack are
     stored using delta compression. The objects are first internally
     sorted by type, size and optionally names and compared against the
     other objects within `--window' to see if using delta compression
     saves space. `--depth' limits the maximum delta depth; making it
     too deep affects the performance on the unpacker side, because
     delta data needs to be applied that many times to get to the
     necessary object.  The default value for -window is 10 and -depth
     is 50.

-window-memory=<n>
     This option provides an additional limit on top of `--window'; the
     window size will dynamically scale down so as to not take up more
     than _<n>_ bytes in memory.  This is useful in repositories with a
     mix of large and small objects to not run out of memory with a
     large window, but still be able to take advantage of the large
     window for the smaller objects.  The size can be suffixed with
     "k", "m", or "g".  `--window-memory=0' makes memory usage
     unlimited, which is the default.

-max-pack-size=<n>
     Maximum size of each output pack file. The size can be suffixed
     with "k", "m", or "g". The minimum size allowed is limited to 1
     MiB.  If specified,  multiple packfiles may be created.  The
     default is unlimited, unless the config variable
     `pack.packSizeLimit' is set.


Configuration
*************

By default, the command passes `--delta-base-offset' option to _git
pack-objects_; this typically results in slightly smaller packs, but
the generated packs are incompatible with versions of Git older than
version 1.4.4. If you need to share your repository with such ancient
Git versions, either directly or via the dumb http or rsync protocol,
then you need to set the configuration variable
`repack.UseDeltaBaseOffset' to "false" and repack. Access from old Git
versions over the native protocol is unaffected by this option as the
conversion is performed on the fly as needed in that case.



SEE ALSO
********

git-pack-objects(1) git-prune-packed(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-replace,  Up: Top

Name
****

git-replace — Create, list, delete refs to replace objects



Synopsis
********

     git replace [-f] <object> <replacement>
     git replace -d <object>…
     git replace -l [<pattern>]


DESCRIPTION
***********

Adds a _replace_ reference in `refs/replace/' namespace.

   The name of the _replace_ reference is the SHA1 of the object that is
replaced. The content of the _replace_ reference is the SHA1 of the
replacement object.

   Unless `-f' is given, the _replace_ reference must not yet exist.

   Replacement references will be used by default by all git commands
except those doing reachability traversal (prune, pack transfer and
fsck).

   It is possible to disable use of replacement references for any
command using the `--no-replace-objects' option just after _git_.

   For example if commit _foo_ has been replaced by commit _bar_:

     $ git --no-replace-objects cat-file commit foo

   shows information about commit _foo_, while:

     $ git cat-file commit foo

   shows information about commit _bar_.

   The _GIT_NO_REPLACE_OBJECTS_ environment variable can be set to
achieve the same effect as the `--no-replace-objects' option.



OPTIONS
*******

-f
     If an existing replace ref for the same object exists, it will be
     overwritten (instead of failing).

-d
     Delete existing replace refs for the given objects.

-l <pattern>
     List replace refs for objects that match the given pattern (or all
     if no pattern is given).  Typing "git replace" without arguments,
     also lists all replace refs.


BUGS
****

Comparing blobs or trees that have been replaced with those that
replace them will not work properly. And using `git reset --hard' to go
back to a replaced commit will move the branch to the replacement
commit instead of the replaced commit.

   There may be other problems when using _git rev-list_ related to
pending objects. And of course things may break if an object of one
type is replaced by an object of another type (for example a blob
replaced by a commit).



SEE ALSO
********

git-tag(1) git-branch(1) git(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-repo-config,  Up: Top

Name
****

git-repo-config — Get and set repository or global options



Synopsis
********

     git repo-config …


DESCRIPTION
***********

This is a synonym for git-config(1).  Please refer to the documentation
of that command.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-request-pull,  Up: Top

Name
****

git-request-pull — Generates a summary of pending changes



Synopsis
********

     git request-pull [-p] <start> <url> [<end>]


DESCRIPTION
***********

Summarizes the changes between two commits to the standard output, and
includes the given URL in the generated summary.



OPTIONS
*******

-p
     Show patch text

<start>
     Commit to start at.

<url>
     URL to include in the summary.

<end>
     Commit to end at; defaults to HEAD.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-rerere,  Up: Top

Name
****

git-rerere — Reuse recorded resolution of conflicted merges



Synopsis
********

     git rerere [clear|forget <pathspec>|diff|remaining|status|gc]


DESCRIPTION
***********

In a workflow employing relatively long lived topic branches, the
developer sometimes needs to resolve the same conflicts over and over
again until the topic branches are done (either merged to the "release"
branch, or sent out and accepted upstream).

   This command assists the developer in this process by recording
conflicted automerge results and corresponding hand resolve results on
the initial manual merge, and applying previously recorded hand
resolutions to their corresponding automerge results.

     *Note*

     You need to set the configuration variable rerere.enabled in order
     to enable this command.


COMMANDS
********

Normally, _git rerere_ is run without arguments or user-intervention.
However, it has several commands that allow it to interact with its
working state.

_clear_
     Reset the metadata used by rerere if a merge resolution is to be
     aborted.  Calling _git am [-skip|-abort]_ or _git rebase
     [-skip|-abort]_ will automatically invoke this command.

_forget_ <pathspec>
     Reset the conflict resolutions which rerere has recorded for the
     current conflict in <pathspec>.

_diff_
     Display diffs for the current state of the resolution.  It is
     useful for tracking what has changed while the user is resolving
     conflicts.  Additional arguments are passed directly to the system
     _diff_ command installed in PATH.

_status_
     Print paths with conflicts whose merge resolution rerere will
     record.

_remaining_
     Print paths with conflicts that have not been autoresolved by
     rerere.  This includes paths whose resolutions cannot be tracked
     by rerere, such as conflicting submodules.

_gc_
     Prune records of conflicted merges that occurred a long time ago.
     By default, unresolved conflicts older than 15 days and resolved
     conflicts older than 60 days are pruned.  These defaults are
     controlled via the `gc.rerereunresolved' and `gc.rerereresolved'
     configuration variables respectively.


DISCUSSION
**********

When your topic branch modifies an overlapping area that your master
branch (or upstream) touched since your topic branch forked from it,
you may want to test it with the latest master, even before your topic
branch is ready to be pushed upstream:

                   o---*---o topic
                  /
         o---o---o---*---o---o master

   For such a test, you need to merge master and topic somehow.  One
way to do it is to pull master into the topic branch:

             $ git checkout topic
             $ git merge master

                   o---*---o---+ topic
                  /           /
         o---o---o---*---o---o master

   The commits marked with `*' touch the same area in the same file;
you need to resolve the conflicts when creating the commit marked with
`+'.  Then you can test the result to make sure your work-in-progress
still works with what is in the latest master.

   After this test merge, there are two ways to continue your work on
the topic.  The easiest is to build on top of the test merge commit
`+', and when your work in the topic branch is finally ready, pull the
topic branch into master, and/or ask the upstream to pull from you.  By
that time, however, the master or the upstream might have been advanced
since the test merge `+', in which case the final commit graph would
look like this:

             $ git checkout topic
             $ git merge master
             $ ... work on both topic and master branches
             $ git checkout master
             $ git merge topic

                   o---*---o---+---o---o topic
                  /           /         \
         o---o---o---*---o---o---o---o---+ master

   When your topic branch is long-lived, however, your topic branch
would end up having many such "Merge from master" commits on it, which
would unnecessarily clutter the development history.  Readers of the
Linux kernel mailing list may remember that Linus complained about such
too frequent test merges when a subsystem maintainer asked to pull from
a branch full of "useless merges".

   As an alternative, to keep the topic branch clean of test merges,
you could blow away the test merge, and keep building on top of the tip
before the test merge:

             $ git checkout topic
             $ git merge master
             $ git reset --hard HEAD^ ;# rewind the test merge
             $ ... work on both topic and master branches
             $ git checkout master
             $ git merge topic

                   o---*---o-------o---o topic
                  /                     \
         o---o---o---*---o---o---o---o---+ master

   This would leave only one merge commit when your topic branch is
finally ready and merged into the master branch.  This merge would
require you to resolve the conflict, introduced by the commits marked
with `*'.  However, this conflict is often the same conflict you
resolved when you created the test merge you blew away.  _git rerere_
helps you resolve this final conflicted merge using the information
from your earlier hand resolve.

   Running the _git rerere_ command immediately after a conflicted
automerge records the conflicted working tree files, with the usual
conflict markers `<<<<<<<', `=======', and `>>>>>>>' in them.  Later,
after you are done resolving the conflicts, running _git rerere_ again
will record the resolved state of these files.  Suppose you did this
when you created the test merge of master into the topic branch.

   Next time, after seeing the same conflicted automerge, running _git
rerere_ will perform a three-way merge between the earlier conflicted
automerge, the earlier manual resolution, and the current conflicted
automerge.  If this three-way merge resolves cleanly, the result is
written out to your working tree file, so you do not have to manually
resolve it.  Note that _git rerere_ leaves the index file alone, so you
still need to do the final sanity checks with `git diff' (or `git diff
-c') and _git add_ when you are satisfied.

   As a convenience measure, _git merge_ automatically invokes _git
rerere_ upon exiting with a failed automerge and _git rerere_ records
the hand resolve when it is a new conflict, or reuses the earlier hand
resolve when it is not.  _git commit_ also invokes _git rerere_ when
committing a merge result.  What this means is that you do not have to
do anything special yourself (besides enabling the rerere.enabled
config variable).

   In our example, when you do the test merge, the manual resolution is
recorded, and it will be reused when you do the actual merge later with
the updated master and topic branch, as long as the recorded resolution
is still applicable.

   The information _git rerere_ records is also used when running _git
rebase_.  After blowing away the test merge and continuing development
on the topic branch:

                   o---*---o-------o---o topic
                  /
         o---o---o---*---o---o---o---o   master

             $ git rebase master topic

                                       o---*---o-------o---o topic
                                      /
         o---o---o---*---o---o---o---o   master

   you could run `git rebase master topic', to bring yourself
up-to-date before your topic is ready to be sent upstream.  This would
result in falling back to a three-way merge, and it would conflict the
same way as the test merge you resolved earlier.  _git rerere_ will be
run by _git rebase_ to help you resolve this conflict.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-reset,  Up: Top

Name
****

git-reset — Reset current HEAD to the specified state



Synopsis
********

     git reset [-q] [<commit>] [-] <paths>…
     git reset (-patch | -p) [<commit>] [-] [<paths>…]
     git reset (-soft | -mixed | -hard | -merge | -keep) [-q] [<commit>]


DESCRIPTION
***********

In the first and second form, copy entries from <commit> to the index.
In the third form, set the current branch head (HEAD) to <commit>,
optionally modifying index and working tree to match.  The <commit>
defaults to HEAD in all forms.

_git reset_ [-q] [<commit>] [-] <paths>…
     This form resets the index entries for all <paths> to their state
     at <commit>.  (It does not affect the working tree, nor the
     current branch.)

     This means that `git reset <paths>' is the opposite of `git add
     <paths>'.

     After running `git reset <paths>' to update the index entry, you
     can use git-checkout(1) to check the contents out of the index to
     the working tree.  Alternatively, using git-checkout(1) and
     specifying a commit, you can copy the contents of a path out of a
     commit to the index and to the working tree in one go.

_git reset_ (-patch | -p) [<commit>] [-] [<paths>…]
     Interactively select hunks in the difference between the index and
     <commit> (defaults to HEAD).  The chosen hunks are applied in
     reverse to the index.

     This means that `git reset -p' is the opposite of `git add -p',
     i.e.  you can use it to selectively reset hunks. See the
     “Interactive Mode” section of git-add(1) to learn how to
     operate the `--patch' mode.

_git reset_ -<mode> [<commit>]
     This form resets the current branch head to <commit> and possibly
     updates the index (resetting it to the tree of <commit>) and the
     working tree depending on <mode>, which must be one of the
     following:

    -soft
          Does not touch the index file nor the working tree at all (but
          resets the head to <commit>, just like all modes do). This
          leaves all your changed files "Changes to be committed", as
          _git status_ would put it.

    -mixed
          Resets the index but not the working tree (i.e., the changed
          files are preserved but not marked for commit) and reports
          what has not been updated. This is the default action.

    -hard
          Resets the index and working tree. Any changes to tracked
          files in the working tree since <commit> are discarded.

    -merge
          Resets the index and updates the files in the working tree
          that are different between <commit> and HEAD, but keeps those
          which are different between the index and working tree (i.e.
          which have changes which have not been added).  If a file
          that is different between <commit> and the index has unstaged
          changes, reset is aborted.

          In other words, -merge does something like a _git read-tree
          -u -m <commit>_, but carries forward unmerged index entries.

    -keep
          Resets index entries and updates files in the working tree
          that are different between <commit> and HEAD.  If a file that
          is different between <commit> and HEAD has local changes,
          reset is aborted.

   If you want to undo a commit other than the latest on a branch,
git-revert(1) is your friend.



OPTIONS
*******

-q
-quiet
     Be quiet, only report errors.


EXAMPLES
********

Undo add
          $ edit                                     (1)
          $ git add frotz.c filfre.c
          $ mailx                                    (2)
          $ git reset                                (3)
          $ git pull git://info.example.com/ nitfol  (4)

    *note (1): CO1-1.
          You are happily working on something, and find the changes in
          these files are in good order.  You do not want to see them
          when you run "git diff", because you plan to work on other
          files and changes with these files are distracting.

    *note (2): CO1-2.
          Somebody asks you to pull, and the changes sounds worthy of
          merging.

    *note (3): CO1-3.
          However, you already dirtied the index (i.e. your index does
          not match the HEAD commit).  But you know the pull you are
          going to make does not affect frotz.c nor filfre.c, so you
          revert the index changes for these two files.  Your changes
          in working tree remain there.

    *note (4): CO1-4.
          Then you can pull and merge, leaving frotz.c and filfre.c
          changes still in the working tree.

Undo a commit and redo
          $ git commit ...
          $ git reset --soft HEAD^      (1)
          $ edit                        (2)
          $ git commit -a -c ORIG_HEAD  (3)

    *note (1): CO2-1.
          This is most often done when you remembered what you just
          committed is incomplete, or you misspelled your commit
          message, or both.  Leaves working tree as it was before
          "reset".

    *note (2): CO2-2.
          Make corrections to working tree files.

    *note (3): CO2-3.
          "reset" copies the old head to .git/ORIG_HEAD; redo the
          commit by starting with its log message.  If you do not need
          to edit the message further, you can give -C option instead.

          See also the -amend option to git-commit(1).

Undo a commit, making it a topic branch
          $ git branch topic/wip     (1)
          $ git reset --hard HEAD~3  (2)
          $ git checkout topic/wip   (3)

    *note (1): CO3-1.
          You have made some commits, but realize they were premature
          to be in the "master" branch.  You want to continue polishing
          them in a topic branch, so create "topic/wip" branch off of
          the current HEAD.

    *note (2): CO3-2.
          Rewind the master branch to get rid of those three commits.

    *note (3): CO3-3.
          Switch to "topic/wip" branch and keep working.

Undo commits permanently
          $ git commit ...
          $ git reset --hard HEAD~3   (1)

    *note (1): CO4-1.
          The last three commits (HEAD, HEAD^, and HEAD~2) were bad and
          you do not want to ever see them again.  Do *not* do this if
          you have already given these commits to somebody else.  (See
          the "RECOVERING FROM UPSTREAM REBASE" section in
          git-rebase(1) for the implications of doing so.)

Undo a merge or pull
          $ git pull                         (1)
          Auto-merging nitfol
          CONFLICT (content): Merge conflict in nitfol
          Automatic merge failed; fix conflicts and then commit the result.
          $ git reset --hard                 (2)
          $ git pull . topic/branch          (3)
          Updating from 41223... to 13134...
          Fast-forward
          $ git reset --hard ORIG_HEAD       (4)

    *note (1): CO5-1.
          Try to update from the upstream resulted in a lot of
          conflicts; you were not ready to spend a lot of time merging
          right now, so you decide to do that later.

    *note (2): CO5-2.
          "pull" has not made merge commit, so "git reset -hard" which
          is a synonym for "git reset -hard HEAD" clears the mess from
          the index file and the working tree.

    *note (3): CO5-3.
          Merge a topic branch into the current branch, which resulted
          in a fast-forward.

    *note (4): CO5-4.
          But you decided that the topic branch is not ready for public
          consumption yet.  "pull" or "merge" always leaves the original
          tip of the current branch in ORIG_HEAD, so resetting hard to
          it brings your index file and the working tree back to that
          state, and resets the tip of the branch to that commit.

Undo a merge or pull inside a dirty working tree
          $ git pull                         (1)
          Auto-merging nitfol
          Merge made by recursive.
           nitfol                |   20 +++++----
           ...
          $ git reset --merge ORIG_HEAD      (2)

    *note (1): CO6-1.
          Even if you may have local modifications in your working
          tree, you can safely say "git pull" when you know that the
          change in the other branch does not overlap with them.

    *note (2): CO6-2.
          After inspecting the result of the merge, you may find that
          the change in the other branch is unsatisfactory.  Running
          "git reset -hard ORIG_HEAD" will let you go back to where you
          were, but it will discard your local changes, which you do not
          want.  "git reset -merge" keeps your local changes.

Interrupted workflow
     Suppose you are interrupted by an urgent fix request while you are
     in the middle of a large change.  The files in your working tree
     are not in any shape to be committed yet, but you need to get to
     the other branch for a quick bugfix.

          $ git checkout feature ;# you were working in "feature" branch and
          $ work work work       ;# got interrupted
          $ git commit -a -m "snapshot WIP"                 (1)
          $ git checkout master
          $ fix fix fix
          $ git commit ;# commit with real log
          $ git checkout feature
          $ git reset --soft HEAD^ ;# go back to WIP state  (2)
          $ git reset                                       (3)

    *note (1): CO7-1.
          This commit will get blown away so a throw-away log message
          is OK.

    *note (2): CO7-2.
          This removes the _WIP_ commit from the commit history, and
          sets your working tree to the state just before you made that
          snapshot.

    *note (3): CO7-3.
          At this point the index file still has all the WIP changes you
          committed as _snapshot WIP_.  This updates the index to show
          your WIP files as uncommitted.

          See also git-stash(1).

Reset a single file in the index
     Suppose you have added a file to your index, but later decide you
     do not want to add it to your commit. You can remove the file from
     the index while keeping your changes with git reset.

          $ git reset -- frotz.c                      (1)
          $ git commit -m "Commit files in index"     (2)
          $ git add frotz.c                           (3)

    *note (1): CO8-1.
          This removes the file from the index while keeping it in the
          working directory.

    *note (2): CO8-2.
          This commits all other changes in the index.

    *note (3): CO8-3.
          Adds the file to the index again.

Keep changes in working tree while discarding some previous commits
     Suppose you are working on something and you commit it, and then
     you continue working a bit more, but now you think that what you
     have in your working tree should be in another branch that has
     nothing to do with what you committed previously. You can start a
     new branch and reset it while keeping the changes in your working
     tree.

          $ git tag start
          $ git checkout -b branch1
          $ edit
          $ git commit ...                            (1)
          $ edit
          $ git checkout -b branch2                   (2)
          $ git reset --keep start                    (3)

    *note (1): CO9-1.
          This commits your first edits in branch1.

    *note (2): CO9-2.
          In the ideal world, you could have realized that the earlier
          commit did not belong to the new topic when you created and
          switched to branch2 (i.e. "git checkout -b branch2 start"),
          but nobody is perfect.

    *note (3): CO9-3.
          But you can use "reset -keep" to remove the unwanted commit
          after you switched to "branch2".


DISCUSSION
**********

The tables below show what happens when running:

     git reset --option target

   to reset the HEAD to another commit (`target') with the different
reset options depending on the state of the files.

   In these tables, A, B, C and D are some different states of a file.
For example, the first line of the first table means that if a file is
in state A in the working tree, in state B in the index, in state C in
HEAD and in state D in the target, then "git reset -soft target" will
leave the file in the working tree in state A and in the index in state
B.  It resets (i.e. moves) the HEAD (i.e. the tip of the current
branch, if you are on one) to "target" (which has the file in state D).

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      A       B     C    D     --soft   A       B     D
                               --mixed  A       D     D
                               --hard   D       D     D
                               --merge (disallowed)
                               --keep  (disallowed)

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      A       B     C    C     --soft   A       B     C
                               --mixed  A       C     C
                               --hard   C       C     C
                               --merge (disallowed)
                               --keep   A       C     C

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      B       B     C    D     --soft   B       B     D
                               --mixed  B       D     D
                               --hard   D       D     D
                               --merge  D       D     D
                               --keep  (disallowed)

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      B       B     C    C     --soft   B       B     C
                               --mixed  B       C     C
                               --hard   C       C     C
                               --merge  C       C     C
                               --keep   B       C     C

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      B       C     C    D     --soft   B       C     D
                               --mixed  B       D     D
                               --hard   D       D     D
                               --merge (disallowed)
                               --keep  (disallowed)

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      B       C     C    C     --soft   B       C     C
                               --mixed  B       C     C
                               --hard   C       C     C
                               --merge  B       C     C
                               --keep   B       C     C

   "reset -merge" is meant to be used when resetting out of a conflicted
merge. Any mergy operation guarantees that the working tree file that is
involved in the merge does not have local change wrt the index before
it starts, and that it writes the result out to the working tree. So if
we see some difference between the index and the target and also
between the index and the working tree, then it means that we are not
resetting out from a state that a mergy operation left after failing
with a conflict. That is why we disallow -merge option in this case.

   "reset -keep" is meant to be used when removing some of the last
commits in the current branch while keeping changes in the working
tree. If there could be conflicts between the changes in the commit we
want to remove and the changes in the working tree we want to keep, the
reset is disallowed. That’s why it is disallowed if there are both
changes between the working tree and HEAD, and between HEAD and the
target. To be safe, it is also disallowed when there are unmerged
entries.

   The following tables show what happens when there are unmerged
entries:

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      X       U     A    B     --soft  (disallowed)
                               --mixed  X       B     B
                               --hard   B       B     B
                               --merge  B       B     B
                               --keep  (disallowed)

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      X       U     A    A     --soft  (disallowed)
                               --mixed  X       A     A
                               --hard   A       A     A
                               --merge  A       A     A
                               --keep  (disallowed)

   X means any state and U means an unmerged index.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-rev-list,  Up: Top

Name
****

git-rev-list — Lists commit objects in reverse chronological order



Synopsis
********

     git rev-list [ -max-count=<number> ]
                  [ -skip=<number> ]
                  [ -max-age=<timestamp> ]
                  [ -min-age=<timestamp> ]
                  [ -sparse ]
                  [ -merges ]
                  [ -no-merges ]
                  [ -min-parents=<number> ]
                  [ -no-min-parents ]
                  [ -max-parents=<number> ]
                  [ -no-max-parents ]
                  [ -first-parent ]
                  [ -remove-empty ]
                  [ -full-history ]
                  [ -not ]
                  [ -all ]
                  [ -branches[=<pattern>] ]
                  [ -tags[=<pattern>] ]
                  [ -remotes[=<pattern>] ]
                  [ -glob=<glob-pattern> ]
                  [ -ignore-missing ]
                  [ -stdin ]
                  [ -quiet ]
                  [ -topo-order ]
                  [ -parents ]
                  [ -timestamp ]
                  [ -left-right ]
                  [ -left-only ]
                  [ -right-only ]
                  [ -cherry-mark ]
                  [ -cherry-pick ]
                  [ -encoding[=<encoding>] ]
                  [ -(author|committer|grep)=<pattern> ]
                  [ -regexp-ignore-case | -i ]
                  [ -extended-regexp | -E ]
                  [ -fixed-strings | -F ]
                  [ -date=(local|relative|default|iso|rfc|short) ]
                  [ [-objects | -objects-edge] [ -unpacked ] ]
                  [ -pretty | -header ]
                  [ -bisect ]
                  [ -bisect-vars ]
                  [ -bisect-all ]
                  [ -merge ]
                  [ -reverse ]
                  [ -walk-reflogs ]
                  [ -no-walk ] [ -do-walk ]
                  <commit>… [ - <paths>… ]


DESCRIPTION
***********

List commits that are reachable by following the `parent' links from the
given commit(s), but exclude commits that are reachable from the one(s)
given with a _^_ in front of them.  The output is given in reverse
chronological order by default.

   You can think of this as a set operation.  Commits given on the
command line form a set of commits that are reachable from any of them,
and then commits reachable from any of the ones given with _^_ in front
are subtracted from that set.  The remaining commits are what comes out
in the command’s output.  Various other options and paths parameters
can be used to further limit the result.

   Thus, the following command:

             $ git rev-list foo bar ^baz

   means "list all the commits which are reachable from _foo_ or _bar_,
but not from _baz_".

   A special notation "_<commit1>_.._<commit2>_" can be used as a
short-hand for "^'<commit1>' _<commit2>_". For example, either of the
following may be used interchangeably:

             $ git rev-list origin..HEAD
             $ git rev-list HEAD ^origin

   Another special notation is "_<commit1>_…_<commit2>_" which is
useful for merges.  The resulting set of commits is the symmetric
difference between the two operands.  The following two commands are
equivalent:

             $ git rev-list A B --not $(git merge-base --all A B)
             $ git rev-list A...B

   _rev-list_ is a very essential git command, since it provides the
ability to build and traverse commit ancestry graphs. For this reason,
it has a lot of different options that enables it to be used by
commands as different as _git bisect_ and _git repack_.



OPTIONS
*******



Commit Limiting
===============

Besides specifying a range of commits that should be listed using the
special notations explained in the description, additional commit
limiting may be applied. Note that they are applied before commit
ordering and formatting options, such as _-reverse_.

-n _number_
-max-count=<number>
     Limit the number of commits to output.

-skip=<number>
     Skip _number_ commits before starting to show the commit output.

-since=<date>
-after=<date>
     Show commits more recent than a specific date.

-until=<date>
-before=<date>
     Show commits older than a specific date.

-max-age=<timestamp>
-min-age=<timestamp>
     Limit the commits output to specified time range.

-author=<pattern>
-committer=<pattern>
     Limit the commits output to ones with author/committer header
     lines that match the specified pattern (regular expression).

-grep=<pattern>
     Limit the commits output to ones with log message that matches the
     specified pattern (regular expression).

-all-match
     Limit the commits output to ones that match all given -grep,
     -author and -committer instead of ones that match at least one.

-i
-regexp-ignore-case
     Match the regexp limiting patterns without regard to letters case.

-E
-extended-regexp
     Consider the limiting patterns to be extended regular expressions
     instead of the default basic regular expressions.

-F
-fixed-strings
     Consider the limiting patterns to be fixed strings (don’t
     interpret pattern as a regular expression).

-remove-empty
     Stop when a given path disappears from the tree.

-merges
     Print only merge commits. This is exactly the same as
     `--min-parents=2'.

-no-merges
     Do not print commits with more than one parent. This is exactly
     the same as `--max-parents=1'.

-min-parents=<number>
-max-parents=<number>
-no-min-parents
-no-max-parents
     Show only commits which have at least (or at most) that many
     commits. In particular, `--max-parents=1' is the same as
     `--no-merges', `--min-parents=2' is the same as `--merges'.
     `--max-parents=0' gives all root commits and `--min-parents=3' all
     octopus merges.

     `--no-min-parents' and `--no-max-parents' reset these limits (to
     no limit) again.  Equivalent forms are `--min-parents=0' (any
     commit has 0 or more parents) and `--max-parents=-1' (negative
     numbers denote no upper limit).

-first-parent
     Follow only the first parent commit upon seeing a merge commit.
     This option can give a better overview when viewing the evolution
     of a particular topic branch, because merges into a topic branch
     tend to be only about adjusting to updated upstream from time to
     time, and this option allows you to ignore the individual commits
     brought in to your history by such a merge.

-not
     Reverses the meaning of the _^_ prefix (or lack thereof) for all
     following revision specifiers, up to the next _-not_.

-all
     Pretend as if all the refs in `refs/' are listed on the command
     line as _<commit>_.

-branches[=<pattern>]
     Pretend as if all the refs in `refs/heads' are listed on the
     command line as _<commit>_. If _<pattern>_ is given, limit
     branches to ones matching given shell glob. If pattern lacks _?_,
     _*_, or _[_, _/*_ at the end is implied.

-tags[=<pattern>]
     Pretend as if all the refs in `refs/tags' are listed on the
     command line as _<commit>_. If _<pattern>_ is given, limit tags to
     ones matching given shell glob. If pattern lacks _?_, _*_, or _[_,
     _/*_ at the end is implied.

-remotes[=<pattern>]
     Pretend as if all the refs in `refs/remotes' are listed on the
     command line as _<commit>_. If _<pattern>_ is given, limit
     remote-tracking branches to ones matching given shell glob.  If
     pattern lacks _?_, _*_, or _[_, _/*_ at the end is implied.

-glob=<glob-pattern>
     Pretend as if all the refs matching shell glob _<glob-pattern>_
     are listed on the command line as _<commit>_. Leading _refs/_, is
     automatically prepended if missing. If pattern lacks _?_, _*_, or
     _[_, _/*_ at the end is implied.

-ignore-missing
     Upon seeing an invalid object name in the input, pretend as if the
     bad input was not given.

-stdin
     In addition to the _<commit>_ listed on the command line, read
     them from the standard input. If a _-_ separator is seen, stop
     reading commits and start reading paths to limit the result.

-quiet
     Don’t print anything to standard output.  This form is primarily
     meant to allow the caller to test the exit status to see if a
     range of objects is fully connected (or not).  It is faster than
     redirecting stdout to /dev/null as the output does not have to be
     formatted.

-cherry-mark
     Like `--cherry-pick' (see below) but mark equivalent commits with
     `=' rather than omitting them, and inequivalent ones with `+'.

-cherry-pick
     Omit any commit that introduces the same change as another commit
     on the "other side" when the set of commits are limited with
     symmetric difference.

     For example, if you have two branches, `A' and `B', a usual way to
     list all commits on only one side of them is with `--left-right'
     (see the example below in the description of the `--left-right'
     option).  It however shows the commits that were cherry-picked
     from the other branch (for example, "3rd on b" may be cherry-picked
     from branch A).  With this option, such pairs of commits are
     excluded from the output.

-left-only
-right-only
     List only commits on the respective side of a symmetric range,
     i.e. only those which would be marked `<' resp. `>' by
     `--left-right'.

     For example, `--cherry-pick --right-only A...B' omits those
     commits from `B' which are in `A' or are patch-equivalent to a
     commit in `A'. In other words, this lists the `+' commits from
     `git cherry A B'.  More precisely, `--cherry-pick --right-only
     --no-merges' gives the exact list.

-cherry
     A synonym for `--right-only --cherry-mark --no-merges'; useful to
     limit the output to the commits on our side and mark those that
     have been applied to the other side of a forked history with `git
     log --cherry upstream...mybranch', similar to `git cherry upstream
     mybranch'.

-g
-walk-reflogs
     Instead of walking the commit ancestry chain, walk reflog entries
     from the most recent one to older ones.  When this option is used
     you cannot specify commits to exclude (that is, _^commit_,
     _commit1..commit2_, nor _commit1...commit2_ notations cannot be
     used).

     With _-pretty_ format other than oneline (for obvious reasons),
     this causes the output to have two extra lines of information
     taken from the reflog.  By default, _commit@{Nth}_ notation is
     used in the output.  When the starting commit is specified as
     _commit@{now}_, output also uses _commit@{timestamp}_ notation
     instead.  Under _-pretty=oneline_, the commit message is prefixed
     with this information on the same line.  This option cannot be
     combined with _-reverse_.  See also git-reflog(1).

-merge
     After a failed merge, show refs that touch files having a conflict
     and don’t exist on all heads to merge.

-boundary
     Output uninteresting commits at the boundary, which are usually
     not shown.


History Simplification
======================

Sometimes you are only interested in parts of the history, for example
the commits modifying a particular <path>. But there are two parts of
_History Simplification_, one part is selecting the commits and the
other is how to do it, as there are various strategies to simplify the
history.

   The following options select the commits to be shown:

<paths>
     Commits modifying the given <paths> are selected.

-simplify-by-decoration
     Commits that are referred by some branch or tag are selected.

   Note that extra commits can be shown to give a meaningful history.

   The following options affect the way the simplification is performed:

Default mode
     Simplifies the history to the simplest history explaining the
     final state of the tree. Simplest because it prunes some side
     branches if the end result is the same (i.e. merging branches with
     the same content)

-full-history
     Same as the default mode, but does not prune some history.

-dense
     Only the selected commits are shown, plus some to have a
     meaningful history.

-sparse
     All commits in the simplified history are shown.

-simplify-merges
     Additional option to _-full-history_ to remove some needless
     merges from the resulting history, as there are no selected
     commits contributing to this merge.

-ancestry-path
     When given a range of commits to display (e.g. _commit1..commit2_
     or _commit2 ^commit1_), only display commits that exist directly
     on the ancestry chain between the _commit1_ and _commit2_, i.e.
     commits that are both descendants of _commit1_, and ancestors of
     _commit2_.

   A more detailed explanation follows.

   Suppose you specified `foo' as the <paths>.  We shall call commits
that modify `foo' !TREESAME, and the rest TREESAME.  (In a diff
filtered for `foo', they look different and equal, respectively.)

   In the following, we will always refer to the same example history to
illustrate the differences between simplification settings.  We assume
that you are filtering for a file `foo' in this commit graph:

               .-A---M---N---O---P
              /     /   /   /   /
             I     B   C   D   E
              \   /   /   /   /
               `-------------'

   The horizontal line of history A--P is taken to be the first parent
of each merge.  The commits are:

   * `I' is the initial commit, in which `foo' exists with contents
     "asdf", and a file `quux' exists with contents "quux".  Initial
     commits are compared to an empty tree, so `I' is !TREESAME.

   * In `A', `foo' contains just "foo".

   * `B' contains the same change as `A'.  Its merge `M' is trivial and
     hence TREESAME to all parents.

   * `C' does not change `foo', but its merge `N' changes it to
     "foobar", so it is not TREESAME to any parent.

   * `D' sets `foo' to "baz".  Its merge `O' combines the strings from
     `N' and `D' to "foobarbaz"; i.e., it is not TREESAME to any parent.

   * `E' changes `quux' to "xyzzy", and its merge `P' combines the
     strings to "quux xyzzy".  Despite appearing interesting, `P' is
     TREESAME to all parents.

   _rev-list_ walks backwards through history, including or excluding
commits based on whether _-full-history_ and/or parent rewriting (via
_-parents_ or _-children_) are used.  The following settings are
available.

Default mode
     Commits are included if they are not TREESAME to any parent
     (though this can be changed, see _-sparse_ below).  If the commit
     was a merge, and it was TREESAME to one parent, follow only that
     parent.  (Even if there are several TREESAME parents, follow only
     one of them.)  Otherwise, follow all parents.

     This results in:

                    .-A---N---O
                   /     /   /
                  I---------D

     Note how the rule to only follow the TREESAME parent, if one is
     available, removed `B' from consideration entirely.  `C' was
     considered via `N', but is TREESAME.  Root commits are compared to
     an empty tree, so `I' is !TREESAME.

     Parent/child relations are only visible with -parents, but that
     does not affect the commits selected in default mode, so we have
     shown the parent lines.

-full-history without parent rewriting
     This mode differs from the default in one point: always follow all
     parents of a merge, even if it is TREESAME to one of them.  Even
     if more than one side of the merge has commits that are included,
     this does not imply that the merge itself is!  In the example, we
     get

                  I  A  B  N  D  O

     `P' and `M' were excluded because they are TREESAME to a parent.
     `E', `C' and `B' were all walked, but only `B' was !TREESAME, so
     the others do not appear.

     Note that without parent rewriting, it is not really possible to
     talk about the parent/child relationships between the commits, so
     we show them disconnected.

-full-history with parent rewriting
     Ordinary commits are only included if they are !TREESAME (though
     this can be changed, see _-sparse_ below).

     Merges are always included.  However, their parent list is
     rewritten: Along each parent, prune away commits that are not
     included themselves.  This results in

                    .-A---M---N---O---P
                   /     /   /   /   /
                  I     B   /   D   /
                   \   /   /   /   /
                    `-------------'

     Compare to _-full-history_ without rewriting above.  Note that `E'
     was pruned away because it is TREESAME, but the parent list of P
     was rewritten to contain `E''s parent `I'.  The same happened for
     `C' and `N'.  Note also that `P' was included despite being
     TREESAME.

   In addition to the above settings, you can change whether TREESAME
affects inclusion:

-dense
     Commits that are walked are included if they are not TREESAME to
     any parent.

-sparse
     All commits that are walked are included.

     Note that without _-full-history_, this still simplifies merges: if
     one of the parents is TREESAME, we follow only that one, so the
     other sides of the merge are never walked.

-simplify-merges
     First, build a history graph in the same way that _-full-history_
     with parent rewriting does (see above).

     Then simplify each commit `C' to its replacement `C'' in the final
     history according to the following rules:

        * Set `C'' to `C'.

        * Replace each parent `P' of `C'' with its simplification `P''.
          In the process, drop parents that are ancestors of other
          parents, and remove duplicates.

        * If after this parent rewriting, `C'' is a root or merge
          commit (has zero or >1 parents), a boundary commit, or
          !TREESAME, it remains.  Otherwise, it is replaced with its
          only parent.

     The effect of this is best shown by way of comparing to
     _-full-history_ with parent rewriting.  The example turns into:

                    .-A---M---N---O
                   /     /       /
                  I     B       D
                   \   /       /
                    `---------'

     Note the major differences in `N' and `P' over _-full-history_:

        * `N''s parent list had `I' removed, because it is an ancestor
          of the other parent `M'.  Still, `N' remained because it is
          !TREESAME.

        * `P''s parent list similarly had `I' removed.  `P' was then
          removed completely, because it had one parent and is TREESAME.

   Finally, there is a fifth simplification mode available:

-ancestry-path
     Limit the displayed commits to those directly on the ancestry
     chain between the "from" and "to" commits in the given commit
     range. I.e. only display commits that are ancestor of the "to"
     commit, and descendants of the "from" commit.

     As an example use case, consider the following commit history:

                      D---E-------F
                     /     \       \
                    B---C---G---H---I---J
                   /                     \
                  A-------K---------------L--M

     A regular _D..M_ computes the set of commits that are ancestors of
     `M', but excludes the ones that are ancestors of `D'. This is
     useful to see what happened to the history leading to `M' since
     `D', in the sense that "what does `M' have that did not exist in
     `D'". The result in this example would be all the commits, except
     `A' and `B' (and `D' itself, of course).

     When we want to find out what commits in `M' are contaminated with
     the bug introduced by `D' and need fixing, however, we might want
     to view only the subset of _D..M_ that are actually descendants of
     `D', i.e.  excluding `C' and `K'. This is exactly what the
     _-ancestry-path_ option does. Applied to the _D..M_ range, it
     results in:

                          E-------F
                           \       \
                            G---H---I---J
                                         \
                                          L--M


   The _-simplify-by-decoration_ option allows you to view only the big
picture of the topology of the history, by omitting commits that are
not referenced by tags.  Commits are marked as !TREESAME (in other
words, kept after history simplification rules described above) if (1)
they are referenced by tags, or (2) they change the contents of the
paths given on the command line.  All other commits are marked as
TREESAME (subject to be simplified away).



Bisection Helpers
=================

-bisect
     Limit output to the one commit object which is roughly halfway
     between included and excluded commits. Note that the bad bisection
     ref `refs/bisect/bad' is added to the included commits (if it
     exists) and the good bisection refs `refs/bisect/good-*' are added
     to the excluded commits (if they exist). Thus, supposing there are
     no refs in `refs/bisect/', if

             $ git rev-list --bisect foo ^bar ^baz

   outputs _midpoint_, the output of the two commands

             $ git rev-list foo ^midpoint
             $ git rev-list midpoint ^bar ^baz

   would be of roughly the same length.  Finding the change which
introduces a regression is thus reduced to a binary search: repeatedly
generate and test new 'midpoint’s until the commit chain is of length
one.

-bisect-vars
     This calculates the same as `--bisect', except that refs in
     `refs/bisect/' are not used, and except that this outputs text
     ready to be eval’ed by the shell. These lines will assign the
     name of the midpoint revision to the variable `bisect_rev', and the
     expected number of commits to be tested after `bisect_rev' is
     tested to `bisect_nr', the expected number of commits to be tested
     if `bisect_rev' turns out to be good to `bisect_good', the expected
     number of commits to be tested if `bisect_rev' turns out to be bad
     to `bisect_bad', and the number of commits we are bisecting right
     now to `bisect_all'.

-bisect-all
     This outputs all the commit objects between the included and
     excluded commits, ordered by their distance to the included and
     excluded commits. Refs in `refs/bisect/' are not used. The farthest
     from them is displayed first. (This is the only one displayed by
     `--bisect'.)

     This is useful because it makes it easy to choose a good commit to
     test when you want to avoid to test some of them for some reason
     (they may not compile for example).

     This option can be used along with `--bisect-vars', in this case,
     after all the sorted commit objects, there will be the same text
     as if `--bisect-vars' had been used alone.


Commit Ordering
===============

By default, the commits are shown in reverse chronological order.

-date-order
     Show no parents before all of its children are shown, but
     otherwise show commits in the commit timestamp order.

-topo-order
     Show no parents before all of its children are shown, and avoid
     showing commits on multiple lines of history intermixed.

     For example, in a commit history like this:

              ---1----2----4----7
                  \              \
                   3----5----6----8---

     where the numbers denote the order of commit timestamps, `git
     rev-list' and friends with `--date-order' show the commits in the
     timestamp order: 8 7 6 5 4 3 2 1.

     With `--topo-order', they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6
     5 3 1); some older commits are shown before newer ones in order to
     avoid showing the commits from two parallel development track mixed
     together.

-reverse
     Output the commits in reverse order.  Cannot be combined with
     _-walk-reflogs_.


Object Traversal
================

These options are mostly targeted for packing of git repositories.

-objects
     Print the object IDs of any object referenced by the listed
     commits.  _-objects foo ^bar_ thus means "send me all object IDs
     which I need to download if I have the commit object _bar_, but
     not _foo_".

-objects-edge
     Similar to _-objects_, but also print the IDs of excluded commits
     prefixed with a "-" character.  This is used by
     git-pack-objects(1) to build "thin" pack, which records objects in
     deltified form based on objects contained in these excluded
     commits to reduce network traffic.

-unpacked
     Only useful with _-objects_; print the object IDs that are not in
     packs.

-no-walk[=(sorted|unsorted)]
     Only show the given commits, but do not traverse their ancestors.
     This has no effect if a range is specified. If the argument
     "unsorted" is given, the commits are show in the order they were
     given on the command line. Otherwise (if "sorted" or no argument
     was given), the commits are show in reverse chronological order by
     commit time.

-do-walk
     Overrides a previous -no-walk.


Commit Formatting
=================

Using these options, git-rev-list(1) will act similar to the more
specialized family of commit log tools: git-log(1), git-show(1), and
git-whatchanged(1)

-pretty[=<format>]
-format=<format>
     Pretty-print the contents of the commit logs in a given format,
     where _<format>_ can be one of _oneline_, _short_, _medium_,
     _full_, _fuller_, _email_, _raw_ and _format:<string>_.  See the
     "PRETTY FORMATS" section for some additional details for each
     format.  When omitted, the format defaults to _medium_.

     Note: you can specify the default pretty format in the repository
     configuration (see git-config(1)).

-abbrev-commit
     Instead of showing the full 40-byte hexadecimal commit object
     name, show only a partial prefix.  Non default number of digits
     can be specified with "-abbrev=<n>" (which also modifies diff
     output, if it is displayed).

     This should make "-pretty=oneline" a whole lot more readable for
     people using 80-column terminals.

-no-abbrev-commit
     Show the full 40-byte hexadecimal commit object name. This negates
     `--abbrev-commit' and those options which imply it such as
     "-oneline". It also overrides the _log.abbrevCommit_ variable.

-oneline
     This is a shorthand for "-pretty=oneline -abbrev-commit" used
     together.

-encoding[=<encoding>]
     The commit objects record the encoding used for the log message in
     their encoding header; this option can be used to tell the command
     to re-code the commit log message in the encoding preferred by the
     user.  For non plumbing commands this defaults to UTF-8.

-notes[=<ref>]
     Show the notes (see git-notes(1)) that annotate the commit, when
     showing the commit log message.  This is the default for `git
     log', `git show' and `git whatchanged' commands when there is no
     `--pretty', `--format' nor `--oneline' option given on the command
     line.

     By default, the notes shown are from the notes refs listed in the
     _core.notesRef_ and _notes.displayRef_ variables (or corresponding
     environment overrides). See git-config(1) for more details.

     With an optional _<ref>_ argument, show this notes ref instead of
     the default notes ref(s). The ref is taken to be in `refs/notes/'
     if it is not qualified.

     Multiple -notes options can be combined to control which notes are
     being displayed. Examples: "-notes=foo" will show only notes from
     "refs/notes/foo"; "-notes=foo -notes" will show both notes from
     "refs/notes/foo" and from the default notes ref(s).

-no-notes
     Do not show notes. This negates the above `--notes' option, by
     resetting the list of notes refs from which notes are shown.
     Options are parsed in the order given on the command line, so e.g.
     "-notes -notes=foo -no-notes -notes=bar" will only show notes from
     "refs/notes/bar".

-show-notes[=<ref>]
-[no-]standard-notes
     These options are deprecated. Use the above -notes/-no-notes
     options instead.

-relative-date
     Synonym for `--date=relative'.

-date=(relative|local|default|iso|rfc|short|raw)
     Only takes effect for dates shown in human-readable format, such
     as when using "-pretty". `log.date' config variable sets a default
     value for log command’s -date option.

     `--date=relative' shows dates relative to the current time, e.g.
     "2 hours ago".

     `--date=local' shows timestamps in user’s local timezone.

     `--date=iso' (or `--date=iso8601') shows timestamps in ISO 8601
     format.

     `--date=rfc' (or `--date=rfc2822') shows timestamps in RFC 2822
     format, often found in E-mail messages.

     `--date=short' shows only date but not time, in `YYYY-MM-DD'
     format.

     `--date=raw' shows the date in the internal raw git format `%s %z'
     format.

     `--date=default' shows timestamps in the original timezone (either
     committer’s or author’s).

-header
     Print the contents of the commit in raw-format; each record is
     separated with a NUL character.

-parents
     Print also the parents of the commit (in the form "commit
     parent…").  Also enables parent rewriting, see _History
     Simplification_ below.

-children
     Print also the children of the commit (in the form "commit
     child…").  Also enables parent rewriting, see _History
     Simplification_ below.

-timestamp
     Print the raw commit timestamp.

-left-right
     Mark which side of a symmetric diff a commit is reachable from.
     Commits from the left side are prefixed with `<' and those from
     the right with `>'.  If combined with `--boundary', those commits
     are prefixed with `-'.

     For example, if you have this topology:

                       y---b---b  branch B
                      / \ /
                     /   .
                    /   / \
                   o---x---a---a  branch A

     you would get an output like this:

                  $ git rev-list --left-right --boundary --pretty=oneline A...B

                  >bbbbbbb... 3rd on b
                  >bbbbbbb... 2nd on b
                  <aaaaaaa... 3rd on a
                  <aaaaaaa... 2nd on a
                  -yyyyyyy... 1st on b
                  -xxxxxxx... 1st on a

-graph
     Draw a text-based graphical representation of the commit history
     on the left hand side of the output.  This may cause extra lines
     to be printed in between commits, in order for the graph history
     to be drawn properly.

     This enables parent rewriting, see _History Simplification_ below.

     This implies the _-topo-order_ option by default, but the
     _-date-order_ option may also be specified.

-count
     Print a number stating how many commits would have been listed,
     and suppress all other output.  When used together with
     _-left-right_, instead print the counts for left and right
     commits, separated by a tab. When used together with
     _-cherry-mark_, omit patch equivalent commits from these counts
     and print the count for equivalent commits separated by a tab.


PRETTY FORMATS
**************

If the commit is a merge, and if the pretty-format is not _oneline_,
_email_ or _raw_, an additional line is inserted before the _Author:_
line.  This line begins with "Merge: " and the sha1s of ancestral
commits are printed, separated by spaces.  Note that the listed commits
may not necessarily be the list of the *direct* parent commits if you
have limited your view of history: for example, if you are only
interested in changes related to a certain directory or file.

   There are several built-in formats, and you can define additional
formats by setting a pretty.<name> config option to either another
format name, or a _format:_ string, as described below (see
git-config(1)). Here are the details of the built-in formats:

   * _oneline_

          <sha1> <title line>

     This is designed to be as compact as possible.

   * _short_

          commit <sha1>
          Author: <author>

          <title line>

   * _medium_

          commit <sha1>
          Author: <author>
          Date:   <author date>

          <title line>

          <full commit message>

   * _full_

          commit <sha1>
          Author: <author>
          Commit: <committer>

          <title line>

          <full commit message>

   * _fuller_

          commit <sha1>
          Author:     <author>
          AuthorDate: <author date>
          Commit:     <committer>
          CommitDate: <committer date>

          <title line>

          <full commit message>

   * _email_

          From <sha1> <date>
          From: <author>
          Date: <author date>
          Subject: [PATCH] <title line>

          <full commit message>

   * _raw_

     The _raw_ format shows the entire commit exactly as stored in the
     commit object.  Notably, the SHA1s are displayed in full,
     regardless of whether -abbrev or -no-abbrev are used, and
     _parents_ information show the true parent commits, without taking
     grafts nor history simplification into account.

   * _format:<string>_

     The _format:<string>_ format allows you to specify which
     information you want to show. It works a little bit like printf
     format, with the notable exception that you get a newline with _%n_
     instead of _\n_.

     E.g, _format:"The author of %h was %an, %ar%nThe title was
     >>%s<<%n"_ would show something like this:

          The author of fe6e0ee was Junio C Hamano, 23 hours ago
          The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

     The placeholders are:

        * _%H_: commit hash

        * _%h_: abbreviated commit hash

        * _%T_: tree hash

        * _%t_: abbreviated tree hash

        * _%P_: parent hashes

        * _%p_: abbreviated parent hashes

        * _%an_: author name

        * _%aN_: author name (respecting .mailmap, see git-shortlog(1)
          or git-blame(1))

        * _%ae_: author email

        * _%aE_: author email (respecting .mailmap, see git-shortlog(1)
          or git-blame(1))

        * _%ad_: author date (format respects -date= option)

        * _%aD_: author date, RFC2822 style

        * _%ar_: author date, relative

        * _%at_: author date, UNIX timestamp

        * _%ai_: author date, ISO 8601 format

        * _%cn_: committer name

        * _%cN_: committer name (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%ce_: committer email

        * _%cE_: committer email (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%cd_: committer date

        * _%cD_: committer date, RFC2822 style

        * _%cr_: committer date, relative

        * _%ct_: committer date, UNIX timestamp

        * _%ci_: committer date, ISO 8601 format

        * _%d_: ref names, like the -decorate option of git-log(1)

        * _%e_: encoding

        * _%s_: subject

        * _%f_: sanitized subject line, suitable for a filename

        * _%b_: body

        * _%B_: raw body (unwrapped subject and body)

        * _%N_: commit notes

        * _%gD_: reflog selector, e.g., `refs/stash@{1}'

        * _%gd_: shortened reflog selector, e.g., `stash@{1}'

        * _%gn_: reflog identity name

        * _%gN_: reflog identity name (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%ge_: reflog identity email

        * _%gE_: reflog identity email (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%gs_: reflog subject

        * _%Cred_: switch color to red

        * _%Cgreen_: switch color to green

        * _%Cblue_: switch color to blue

        * _%Creset_: reset color

        * _%C(…)_: color specification, as described in
          color.branch.* config option

        * _%m_: left, right or boundary mark

        * _%n_: newline

        * _%%_: a raw _%_

        * _%x00_: print a byte from a hex code

        * _%w([<w>[,<i1>[,<i2>]]])_: switch line wrapping, like the -w
          option of git-shortlog(1).

     *Note*

     Some placeholders may depend on other options given to the
     revision traversal engine. For example, the `%g*' reflog options
     will insert an empty string unless we are traversing reflog
     entries (e.g., by `git log -g'). The `%d' placeholder will use the
     "short" decoration format if `--decorate' was not already provided
     on the command line.

   If you add a `+' (plus sign) after _%_ of a placeholder, a line-feed
is inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.

   If you add a `-' (minus sign) after _%_ of a placeholder, line-feeds
that immediately precede the expansion are deleted if and only if the
placeholder expands to an empty string.

   If you add a ` ` (space) after _%_ of a placeholder, a space is
inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.

   * _tformat:_

     The _tformat:_ format works exactly like _format:_, except that it
     provides "terminator" semantics instead of "separator" semantics.
     In other words, each commit has the message terminator character
     (usually a newline) appended, rather than a separator placed
     between entries.  This means that the final entry of a single-line
     format will be properly terminated with a new line, just as the
     "oneline" format does.  For example:

          $ git log -2 --pretty=format:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973 -- NO NEWLINE

          $ git log -2 --pretty=tformat:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973

     In addition, any unrecognized string that has a `%' in it is
     interpreted as if it has `tformat:' in front of it.  For example,
     these two are equivalent:

          $ git log -2 --pretty=tformat:%h 4da45bef
          $ git log -2 --pretty=%h 4da45bef



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-rev-parse,  Up: Top

Name
****

git-rev-parse — Pick out and massage parameters



Synopsis
********

     git rev-parse [ -option ] <args>…


DESCRIPTION
***********

Many git porcelainish commands take mixture of flags (i.e. parameters
that begin with a dash _-_) and parameters meant for the underlying
_git rev-list_ command they use internally and flags and parameters for
the other commands they use downstream of _git rev-list_.  This command
is used to distinguish between them.



OPTIONS
*******

-parseopt
     Use _git rev-parse_ in option parsing mode (see PARSEOPT section
     below).

-keep-dashdash
     Only meaningful in `--parseopt' mode. Tells the option parser to
     echo out the first `--' met instead of skipping it.

-stop-at-non-option
     Only meaningful in `--parseopt' mode.  Lets the option parser stop
     at the first non-option argument.  This can be used to parse
     sub-commands that take options themselves.

-sq-quote
     Use _git rev-parse_ in shell quoting mode (see SQ-QUOTE section
     below). In contrast to the `--sq' option below, this mode does
     only quoting. Nothing else is done to command input.

-revs-only
     Do not output flags and parameters not meant for _git rev-list_
     command.

-no-revs
     Do not output flags and parameters meant for _git rev-list_
     command.

-flags
     Do not output non-flag parameters.

-no-flags
     Do not output flag parameters.

-default <arg>
     If there is no parameter given by the user, use `<arg>' instead.

-verify
     The parameter given must be usable as a single, valid object name.
     Otherwise barf and abort.

-q
-quiet
     Only meaningful in `--verify' mode. Do not output an error message
     if the first argument is not a valid object name; instead exit
     with non-zero status silently.

-sq
     Usually the output is made one line per flag and parameter.  This
     option makes output a single line, properly quoted for consumption
     by shell.  Useful when you expect your parameter to contain
     whitespaces and newlines (e.g. when using pickaxe `-S' with _git
     diff-*_). In contrast to the `--sq-quote' option, the command
     input is still interpreted as usual.

-not
     When showing object names, prefix them with _^_ and strip _^_
     prefix from the object names that already have one.

-symbolic
     Usually the object names are output in SHA1 form (with possible
     _^_ prefix); this option makes them output in a form as close to
     the original input as possible.

-symbolic-full-name
     This is similar to -symbolic, but it omits input that are not refs
     (i.e. branch or tag names; or more explicitly disambiguating
     "heads/master" form, when you want to name the "master" branch
     when there is an unfortunately named tag "master"), and show them
     as full refnames (e.g. "refs/heads/master").

-abbrev-ref[=(strict|loose)]
     A non-ambiguous short name of the objects name.  The option
     core.warnAmbiguousRefs is used to select the strict abbreviation
     mode.

-disambiguate=<prefix>
     Show every object whose name begins with the given prefix.  The
     <prefix> must be at least 4 hexadecimal digits long to avoid
     listing each and every object in the repository by mistake.

-all
     Show all refs found in `refs/'.

-branches[=pattern]
-tags[=pattern]
-remotes[=pattern]
     Show all branches, tags, or remote-tracking branches, respectively
     (i.e., refs found in `refs/heads', `refs/tags', or `refs/remotes',
     respectively).

     If a `pattern' is given, only refs matching the given shell glob
     are shown.  If the pattern does not contain a globbing character
     (`?', `*', or `['), it is turned into a prefix match by appending
     `/*'.

-glob=pattern
     Show all refs matching the shell glob pattern `pattern'. If the
     pattern does not start with `refs/', this is automatically
     prepended.  If the pattern does not contain a globbing character
     (`?', `*', or `['), it is turned into a prefix match by appending
     `/*'.

-show-toplevel
     Show the absolute path of the top-level directory.

-show-prefix
     When the command is invoked from a subdirectory, show the path of
     the current directory relative to the top-level directory.

-show-cdup
     When the command is invoked from a subdirectory, show the path of
     the top-level directory relative to the current directory
     (typically a sequence of "../", or an empty string).

-git-dir
     Show `$GIT_DIR' if defined. Otherwise show the path to the .git
     directory. The path shown, when relative, is relative to the
     current working directory.

     If `$GIT_DIR' is not defined and the current directory is not
     detected to lie in a git repository or work tree print a message
     to stderr and exit with nonzero status.

-is-inside-git-dir
     When the current working directory is below the repository
     directory print "true", otherwise "false".

-is-inside-work-tree
     When the current working directory is inside the work tree of the
     repository print "true", otherwise "false".

-is-bare-repository
     When the repository is bare print "true", otherwise "false".

-local-env-vars
     List the GIT_* environment variables that are local to the
     repository (e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR).
     Only the names of the variables are listed, not their value, even
     if they are set.

-short
-short=number
     Instead of outputting the full SHA1 values of object names try to
     abbreviate them to a shorter unique name. When no length is
     specified 7 is used. The minimum length is 4.

-since=datestring
-after=datestring
     Parse the date string, and output the corresponding -max-age=
     parameter for _git rev-list_.

-until=datestring
-before=datestring
     Parse the date string, and output the corresponding -min-age=
     parameter for _git rev-list_.

<args>…
     Flags and parameters to be parsed.

-resolve-git-dir <path>
     Check if <path> is a valid git-dir or a git-file pointing to a
     valid git-dir. If <path> is a valid git-dir the resolved path to
     git-dir will be printed.


SPECIFYING REVISIONS
********************

A revision parameter _<rev>_ typically, but not necessarily, names a
commit object.  It uses what is called an _extended SHA1_ syntax.  Here
are various ways to spell object names.  The ones listed near the end
of this list name trees and blobs contained in a commit.

_<sha1>_, e.g. _dae86e1950b1277e545cee180551750029cfe735_, _dae86e_
     The full SHA1 object name (40-byte hexadecimal string), or a
     leading substring that is unique within the repository.  E.g.
     dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the
     same commit object if there is no other object in your repository
     whose object name starts with dae86e.

_<describeOutput>_, e.g. _v1.7.4.2-679-g3bee7fb_
     Output from `git describe'; i.e. a closest tag, optionally
     followed by a dash and a number of commits, followed by a dash, a
     _g_, and an abbreviated object name.

_<refname>_, e.g. _master_, _heads/master_, _refs/heads/master_
     A symbolic ref name.  E.g. _master_ typically means the commit
     object referenced by _refs/heads/master_.  If you happen to have
     both _heads/master_ and _tags/master_, you can explicitly say
     _heads/master_ to tell git which one you mean.  When ambiguous, a
     _<refname>_ is disambiguated by taking the first match in the
     following rules:

       1. If _$GIT_DIR/<refname>_ exists, that is what you mean (this
          is usually useful only for _HEAD_, _FETCH_HEAD_, _ORIG_HEAD_,
          _MERGE_HEAD_ and _CHERRY_PICK_HEAD_);

       2. otherwise, _refs/<refname>_ if it exists;

       3. otherwise, _refs/tags/<refname>_ if it exists;

       4. otherwise, _refs/heads/<refname>_ if it exists;

       5. otherwise, _refs/remotes/<refname>_ if it exists;

       6. otherwise, _refs/remotes/<refname>/HEAD_ if it exists.

          _HEAD_ names the commit on which you based the changes in the
          working tree.  _FETCH_HEAD_ records the branch which you
          fetched from a remote repository with your last `git fetch'
          invocation.  _ORIG_HEAD_ is created by commands that move
          your _HEAD_ in a drastic way, to record the position of the
          _HEAD_ before their operation, so that you can easily change
          the tip of the branch back to the state before you ran them.
          _MERGE_HEAD_ records the commit(s) which you are merging into
          your branch when you run `git merge'.  _CHERRY_PICK_HEAD_
          records the commit which you are cherry-picking when you run
          `git cherry-pick'.

          Note that any of the _refs/*_ cases above may come either from
          the _$GIT_DIR/refs_ directory or from the
          _$GIT_DIR/packed-refs_ file.

_<refname>@{<date>}_, e.g. _master@{yesterday}_, _HEAD@{5 minutes ago}_
     A ref followed by the suffix _@_ with a date specification
     enclosed in a brace pair (e.g. _{yesterday}_, _{1 month 2 weeks 3
     days 1 hour 1 second ago}_ or _{1979-02-26 18:30:00}_) specifies
     the value of the ref at a prior point in time.  This suffix may
     only be used immediately following a ref name and the ref must
     have an existing log (_$GIT_DIR/logs/<ref>_). Note that this looks
     up the state of your *local* ref at a given time; e.g., what was
     in your local _master_ branch last week. If you want to look at
     commits made during certain times, see _-since_ and _-until_.

_<refname>@{<n>}_, e.g. _master@{1}_
     A ref followed by the suffix _@_ with an ordinal specification
     enclosed in a brace pair (e.g. _{1}_, _{15}_) specifies the n-th
     prior value of that ref.  For example _master@{1}_ is the
     immediate prior value of _master_ while _master@{5}_ is the 5th
     prior value of _master_. This suffix may only be used immediately
     following a ref name and the ref must have an existing log
     (_$GIT_DIR/logs/<refname>_).

_@{<n>}_, e.g. _@{1}_
     You can use the _@_ construct with an empty ref part to get at a
     reflog entry of the current branch. For example, if you are on
     branch _blabla_ then _@{1}_ means the same as _blabla@{1}_.

_@{-<n>}_, e.g. _@{-1}_
     The construct _@{-<n>}_ means the <n>th branch checked out before
     the current one.

_<refname>@{upstream}_, e.g. _master@{upstream}_, _@{u}_
     The suffix _@{upstream}_ to a ref (short form _<refname>@{u}_)
     refers to the branch the ref is set to build on top of.  A missing
     ref defaults to the current branch.

_<rev>^_, e.g. _HEAD^, v1.5.1^0_
     A suffix _^_ to a revision parameter means the first parent of
     that commit object.  _^<n>_ means the <n>th parent (i.e.  _<rev>^_
     is equivalent to _<rev>^1_).  As a special rule, _<rev>^0_ means
     the commit itself and is used when _<rev>_ is the object name of a
     tag object that refers to a commit object.

_<rev>~<n>_, e.g. _master~3_
     A suffix _~<n>_ to a revision parameter means the commit object
     that is the <n>th generation ancestor of the named commit object,
     following only the first parents.  I.e. _<rev>~3_ is equivalent to
     _<rev>^^^_ which is equivalent to _<rev>^1^1^1_.  See below for an
     illustration of the usage of this form.

_<rev>^{<type>}_, e.g. _v0.99.8^{commit}_
     A suffix _^_ followed by an object type name enclosed in brace
     pair means the object could be a tag, and dereference the tag
     recursively until an object of that type is found or the object
     cannot be dereferenced anymore (in which case, barf).  _<rev>^0_
     is a short-hand for _<rev>^{commit}_.

_<rev>^{}_, e.g. _v0.99.8^{}_
     A suffix _^_ followed by an empty brace pair means the object
     could be a tag, and dereference the tag recursively until a
     non-tag object is found.

_<rev>^{/<text>}_, e.g. _HEAD^{/fix nasty bug}_
     A suffix _^_ to a revision parameter, followed by a brace pair
     that contains a text led by a slash, is the same as the _:/fix
     nasty bug_ syntax below except that it returns the youngest
     matching commit which is reachable from the _<rev>_ before _^_.

_:/<text>_, e.g. _:/fix nasty bug_
     A colon, followed by a slash, followed by a text, names a commit
     whose commit message matches the specified regular expression.
     This name returns the youngest matching commit which is reachable
     from any ref.  If the commit message starts with a _!_ you have to
     repeat that;  the special sequence _:/!_, followed by something
     else than _!_, is reserved for now.  The regular expression can
     match any part of the commit message. To match messages starting
     with a string, one can use e.g. _:/^foo_.

_<rev>:<path>_, e.g. _HEAD:README_, _:README_, _master:./README_
     A suffix _:_ followed by a path names the blob or tree at the
     given path in the tree-ish object named by the part before the
     colon.  _:path_ (with an empty part before the colon) is a special
     case of the syntax described next: content recorded in the index
     at the given path.  A path starting with _./_ or _../_ is relative
     to the current working directory.  The given path will be
     converted to be relative to the working tree’s root directory.
     This is most useful to address a blob or tree from a commit or
     tree that has the same tree structure as the working tree.

_:<n>:<path>_, e.g. _:0:README_, _:README_
     A colon, optionally followed by a stage number (0 to 3) and a
     colon, followed by a path, names a blob object in the index at the
     given path. A missing stage number (and the colon that follows it)
     names a stage 0 entry. During a merge, stage 1 is the common
     ancestor, stage 2 is the target branch’s version (typically the
     current branch), and stage 3 is the version from the branch which
     is being merged.

   Here is an illustration, by Jon Loeliger.  Both commit nodes B and C
are parents of commit node A.  Parent commits are ordered left-to-right.

     G   H   I   J
      \ /     \ /
       D   E   F
        \  |  / \
         \ | /   |
          \|/    |
           B     C
            \   /
             \ /
              A

     A =      = A^0
     B = A^   = A^1     = A~1
     C = A^2  = A^2
     D = A^^  = A^1^1   = A~2
     E = B^2  = A^^2
     F = B^3  = A^^3
     G = A^^^ = A^1^1^1 = A~3
     H = D^2  = B^^2    = A^^^2  = A~2^2
     I = F^   = B^3^    = A^^3^
     J = F^2  = B^3^2   = A^^3^2


SPECIFYING RANGES
*****************

History traversing commands such as `git log' operate on a set of
commits, not just a single commit.  To these commands, specifying a
single revision with the notation described in the previous section
means the set of commits reachable from that commit, following the
commit ancestry chain.

   To exclude commits reachable from a commit, a prefix _^_ notation is
used.  E.g. _^r1 r2_ means commits reachable from _r2_ but exclude the
ones reachable from _r1_.

   This set operation appears so often that there is a shorthand for
it.  When you have two commits _r1_ and _r2_ (named according to the
syntax explained in SPECIFYING REVISIONS above), you can ask for
commits that are reachable from r2 excluding those that are reachable
from r1 by _^r1 r2_ and it can be written as _r1..r2_.

   A similar notation _r1...r2_ is called symmetric difference of _r1_
and _r2_ and is defined as _r1 r2 -not $(git merge-base -all r1 r2)_.
It is the set of commits that are reachable from either one of _r1_ or
_r2_ but not from both.

   In these two shorthands, you can omit one end and let it default to
HEAD.  For example, _origin.._ is a shorthand for _origin..HEAD_ and
asks "What did I do since I forked from the origin branch?"  Similarly,
_..origin_ is a shorthand for _HEAD..origin_ and asks "What did the
origin do since I forked from them?"  Note that _.._ would mean
_HEAD..HEAD_ which is an empty range that is both reachable and
unreachable from HEAD.

   Two other shorthands for naming a set that is formed by a commit and
its parent commits exist.  The _r1^@_ notation means all parents of
_r1_.  _r1^!_ includes commit _r1_ but excludes all of its parents.

   To summarize:

_<rev>_
     Include commits that are reachable from (i.e. ancestors of) <rev>.

_^<rev>_
     Exclude commits that are reachable from (i.e. ancestors of) <rev>.

_<rev1>..<rev2>_
     Include commits that are reachable from <rev2> but exclude those
     that are reachable from <rev1>.

_<rev1>...<rev2>_
     Include commits that are reachable from either <rev1> or <rev2>
     but exclude those that are reachable from both.

_<rev>^@_, e.g. _HEAD^@_
     A suffix _^_ followed by an at sign is the same as listing all
     parents of _<rev>_ (meaning, include anything reachable from its
     parents, but not the commit itself).

_<rev>^!_, e.g. _HEAD^!_
     A suffix _^_ followed by an exclamation mark is the same as giving
     commit _<rev>_ and then all its parents prefixed with _^_ to
     exclude them (and their ancestors).

   Here are a handful of examples:

     D                G H D
     D F              G H I J D F
     ^G D             H D
     ^D B             E I J F B
     B..C             C
     B...C            G H D E B C
     ^D B C           E I J F B C
     C                I J F C
     C^@              I J F
     C^!              C
     F^! D            G H D F


PARSEOPT
********

In `--parseopt' mode, _git rev-parse_ helps massaging options to bring
to shell scripts the same facilities C builtins have. It works as an
option normalizer (e.g. splits single switches aggregate values), a bit
like `getopt(1)' does.

   It takes on the standard input the specification of the options to
parse and understand, and echoes on the standard output a string
suitable for `sh(1)' `eval' to replace the arguments with normalized
ones.  In case of error, it outputs usage on the standard error stream,
and exits with code 129.

   Note: Make sure you quote the result when passing it to `eval'.  See
below for an example.



Input Format
============

_git rev-parse -parseopt_ input format is fully text based. It has two
parts, separated by a line that contains only `--'. The lines before
the separator (should be more than one) are used for the usage.  The
lines after the separator describe the options.

   Each line of options has this format:

     <opt_spec><flags>* SP+ help LF

`<opt_spec>'
     its format is the short option character, then the long option name
     separated by a comma. Both parts are not required, though at least
     one is necessary. `h,help', `dry-run' and `f' are all three correct
     `<opt_spec>'.

`<flags>'
     `<flags>' are of `*', `=', `?' or `!'.

        * Use `=' if the option takes an argument.

        * Use `?' to mean that the option is optional (though its use
          is discouraged).

        * Use `*' to mean that this option should not be listed in the
          usage generated for the `-h' argument. It’s shown for
          `--help-all' as documented in gitcli(7).

        * Use `!' to not make the corresponding negated long option
          available.

   The remainder of the line, after stripping the spaces, is used as
the help associated to the option.

   Blank lines are ignored, and lines that don’t match this
specification are used as option group headers (start the line with a
space to create such lines on purpose).



Example
=======

     OPTS_SPEC="\
     some-command [options] <args>...

     some-command does foo and bar!
     --
     h,help    show the help

     foo       some nifty option --foo
     bar=      some cool option --bar with an argument

       An option group Header
     C?        option C with an optional argument"

     eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"


SQ-QUOTE
********

In `--sq-quote' mode, _git rev-parse_ echoes on the standard output a
single line suitable for `sh(1)' `eval'. This line is made by
normalizing the arguments following `--sq-quote'. Nothing other than
quoting the arguments is done.

   If you want command input to still be interpreted as usual by _git
rev-parse_ before the output is shell quoted, see the `--sq' option.



Example
=======

     $ cat >your-git-script.sh <<\EOF
     #!/bin/sh
     args=$(git rev-parse --sq-quote "$@")   # quote user-supplied arguments
     command="git frotz -n24 $args"          # and use it inside a handcrafted
                                             # command line
     eval "$command"
     EOF

     $ sh your-git-script.sh "a b'c"


EXAMPLES
********

   * Print the object name of the current commit:

          $ git rev-parse --verify HEAD

   * Print the commit object name from the revision in the $REV shell
     variable:

          $ git rev-parse --verify $REV

     This will error out if $REV is empty or not a valid revision.

   * Same as above:

          $ git rev-parse --default master --verify $REV

     but if $REV is empty, the commit object name from master will be
     printed.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-revert,  Up: Top

Name
****

git-revert — Revert some existing commits



Synopsis
********

     git revert [-edit | -no-edit] [-n] [-m parent-number] [-s] <commit>…
     git revert -continue
     git revert -quit
     git revert -abort


DESCRIPTION
***********

Given one or more existing commits, revert the changes that the related
patches introduce, and record some new commits that record them.  This
requires your working tree to be clean (no modifications from the HEAD
commit).

   Note: _git revert_ is used to record some new commits to reverse the
effect of some earlier commits (often only a faulty one).  If you want
to throw away all uncommitted changes in your working directory, you
should see git-reset(1), particularly the _-hard_ option.  If you want
to extract specific files as they were in another commit, you should
see git-checkout(1), specifically the `git checkout <commit> --
<filename>' syntax.  Take care with these alternatives as both will
discard uncommitted changes in your working directory.



OPTIONS
*******

<commit>…
     Commits to revert.  For a more complete list of ways to spell
     commit names, see gitrevisions(7).  Sets of commits can also be
     given but no traversal is done by default, see git-rev-list(1) and
     its _-no-walk_ option.

-e
-edit
     With this option, _git revert_ will let you edit the commit
     message prior to committing the revert. This is the default if you
     run the command from a terminal.

-m parent-number
-mainline parent-number
     Usually you cannot revert a merge because you do not know which
     side of the merge should be considered the mainline.  This option
     specifies the parent number (starting from 1) of the mainline and
     allows revert to reverse the change relative to the specified
     parent.

     Reverting a merge commit declares that you will never want the
     tree changes brought in by the merge.  As a result, later merges
     will only bring in tree changes introduced by commits that are not
     ancestors of the previously reverted merge.  This may or may not
     be what you want.

     See the revert-a-faulty-merge How-To
     (howto/revert-a-faulty-merge.txt) for more details.

-no-edit
     With this option, _git revert_ will not start the commit message
     editor.

-n
-no-commit
     Usually the command automatically creates some commits with commit
     log messages stating which commits were reverted.  This flag
     applies the changes necessary to revert the named commits to your
     working tree and the index, but does not make the commits.  In
     addition, when this option is used, your index does not have to
     match the HEAD commit.  The revert is done against the beginning
     state of your index.

     This is useful when reverting more than one commits' effect to
     your index in a row.

-s
-signoff
     Add Signed-off-by line at the end of the commit message.

-strategy=<strategy>
     Use the given merge strategy.  Should only be used once.  See the
     MERGE STRATEGIES section in git-merge(1) for details.

-X<option>
-strategy-option=<option>
     Pass the merge strategy-specific option through to the merge
     strategy.  See git-merge(1) for details.


SEQUENCER SUBCOMMANDS
*********************

-continue
     Continue the operation in progress using the information in
     _.git/sequencer_.  Can be used to continue after resolving
     conflicts in a failed cherry-pick or revert.

-quit
     Forget about the current operation in progress.  Can be used to
     clear the sequencer state after a failed cherry-pick or revert.

-abort
     Cancel the operation and return to the pre-sequence state.


EXAMPLES
********

`git revert HEAD~3'
     Revert the changes specified by the fourth last commit in HEAD and
     create a new commit with the reverted changes.

`git revert -n master~5..master~2'
     Revert the changes done by commits from the fifth last commit in
     master (included) to the third last commit in master (included),
     but do not create any commit with the reverted changes. The revert
     only modifies the working tree and the index.


SEE ALSO
********

git-cherry-pick(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-rm,  Up: Top

Name
****

git-rm — Remove files from the working tree and from the index



Synopsis
********

     git rm [-f | -force] [-n] [-r] [-cached] [-ignore-unmatch] [-quiet] [-] <file>…


DESCRIPTION
***********

Remove files from the index, or from the working tree and the index.
`git rm' will not remove a file from just your working directory.
(There is no option to remove a file only from the working tree and yet
keep it in the index; use `/bin/rm' if you want to do that.)  The files
being removed have to be identical to the tip of the branch, and no
updates to their contents can be staged in the index, though that
default behavior can be overridden with the `-f' option.  When
`--cached' is given, the staged content has to match either the tip of
the branch or the file on disk, allowing the file to be removed from
just the index.



OPTIONS
*******

<file>…
     Files to remove.  Fileglobs (e.g. `*.c') can be given to remove
     all matching files.  If you want git to expand file glob
     characters, you may need to shell-escape them.  A leading
     directory name (e.g. `dir' to remove `dir/file1' and `dir/file2')
     can be given to remove all files in the directory, and recursively
     all sub-directories, but this requires the `-r' option to be
     explicitly given.

-f
-force
     Override the up-to-date check.

-n
-dry-run
     Don’t actually remove any file(s).  Instead, just show if they
     exist in the index and would otherwise be removed by the command.

-r
     Allow recursive removal when a leading directory name is given.

-
     This option can be used to separate command-line options from the
     list of files, (useful when filenames might be mistaken for
     command-line options).

-cached
     Use this option to unstage and remove paths only from the index.
     Working tree files, whether modified or not, will be left alone.

-ignore-unmatch
     Exit with a zero status even if no files matched.

-q
-quiet
     `git rm' normally outputs one line (in the form of an `rm' command)
     for each file removed. This option suppresses that output.


DISCUSSION
**********

The <file> list given to the command can be exact pathnames, file glob
patterns, or leading directory names.  The command removes only the
paths that are known to git.  Giving the name of a file that you have
not told git about does not remove that file.

   File globbing matches across directory boundaries.  Thus, given two
directories `d' and `d2', there is a difference between using `git rm
'd*'' and `git rm 'd/*'', as the former will also remove all of
directory `d2'.



REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM
********************************************************

There is no option for `git rm' to remove from the index only the paths
that have disappeared from the filesystem. However, depending on the
use case, there are several ways that can be done.



Using “git commit -a”
=========================

If you intend that your next commit should record all modifications of
tracked files in the working tree and record all removals of files that
have been removed from the working tree with `rm' (as opposed to `git
rm'), use `git commit -a', as it will automatically notice and record
all removals.  You can also have a similar effect without committing by
using `git add -u'.



Using “git add -A”
======================

When accepting a new code drop for a vendor branch, you probably want
to record both the removal of paths and additions of new paths as well
as modifications of existing paths.

   Typically you would first remove all tracked files from the working
tree using this command:

     git ls-files -z | xargs -0 rm -f

   and then untar the new code in the working tree. Alternately you
could _rsync_ the changes into the working tree.

   After that, the easiest way to record all removals, additions, and
modifications in the working tree is:

     git add -A

   See git-add(1).



Other ways
==========

If all you really want to do is to remove from the index the files that
are no longer present in the working tree (perhaps because your working
tree is dirty so that you cannot use `git commit -a'), use the
following command:

     git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached


EXAMPLES
********

`git rm Documentation/\*.txt'
     Removes all `*.txt' files from the index that are under the
     `Documentation' directory and any of its subdirectories.

     Note that the asterisk `*' is quoted from the shell in this
     example; this lets git, and not the shell, expand the pathnames of
     files and subdirectories under the `Documentation/' directory.

`git rm -f git-*.sh'
     Because this example lets the shell expand the asterisk (i.e. you
     are listing the files explicitly), it does not remove
     `subdir/git-foo.sh'.


SEE ALSO
********

git-add(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-send-email,  Up: Top

Name
****

git-send-email — Send a collection of patches as emails



Synopsis
********

     git send-email [options] <file|directory|rev-list options>…


DESCRIPTION
***********

Takes the patches given on the command line and emails them out.
Patches can be specified as files, directories (which will send all
files in the directory), or directly as a revision list.  In the last
case, any format accepted by git-format-patch(1) can be passed to git
send-email.

   The header of the email is configurable by command line options.  If
not specified on the command line, the user will be prompted with a
ReadLine enabled interface to provide the necessary information.

   There are two formats accepted for patch files:

  1. mbox format files

     This is what git-format-patch(1) generates.  Most headers and MIME
     formatting are ignored.

  2. The original format used by Greg Kroah-Hartman’s
     _send_lots_of_email.pl_ script

     This format expects the first line of the file to contain the
     "Cc:" value and the "Subject:" of the message as the second line.


OPTIONS
*******



Composing
=========

-annotate
     Review and edit each patch you’re about to send. See the
     CONFIGURATION section for _sendemail.multiedit_.

-bcc=<address>
     Specify a "Bcc:" value for each email. Default is the value of
     _sendemail.bcc_.

     The -bcc option must be repeated for each user you want on the bcc
     list.

-cc=<address>
     Specify a starting "Cc:" value for each email.  Default is the
     value of _sendemail.cc_.

     The -cc option must be repeated for each user you want on the cc
     list.

-compose
     Invoke a text editor (see GIT_EDITOR in git-var(1)) to edit an
     introductory message for the patch series.

     When _-compose_ is used, git send-email will use the From,
     Subject, and In-Reply-To headers specified in the message. If the
     body of the message (what you type after the headers and a blank
     line) only contains blank (or GIT: prefixed) lines the summary
     won’t be sent, but From, Subject, and In-Reply-To headers will
     be used unless they are removed.

     Missing From or In-Reply-To headers will be prompted for.

     See the CONFIGURATION section for _sendemail.multiedit_.

-from=<address>
     Specify the sender of the emails.  If not specified on the command
     line, the value of the _sendemail.from_ configuration option is
     used.  If neither the command line option nor _sendemail.from_ are
     set, then the user will be prompted for the value.  The default
     for the prompt will be the value of GIT_AUTHOR_IDENT, or
     GIT_COMMITTER_IDENT if that is not set, as returned by "git var
     -l".

-in-reply-to=<identifier>
     Make the first mail (or all the mails with `--no-thread') appear
     as a reply to the given Message-Id, which avoids breaking threads
     to provide a new patch series.  The second and subsequent emails
     will be sent as replies according to the `--[no]-chain-reply-to'
     setting.

     So for example when `--thread' and `--no-chain-reply-to' are
     specified, the second and subsequent patches will be replies to
     the first one like in the illustration below where `[PATCH v2
     0/3]' is in reply to `[PATCH 0/2]':

          [PATCH 0/2] Here is what I did...
            [PATCH 1/2] Clean up and tests
            [PATCH 2/2] Implementation
            [PATCH v2 0/3] Here is a reroll
              [PATCH v2 1/3] Clean up
              [PATCH v2 2/3] New tests
              [PATCH v2 3/3] Implementation

     Only necessary if -compose is also set.  If -compose is not set,
     this will be prompted for.

-subject=<string>
     Specify the initial subject of the email thread.  Only necessary
     if -compose is also set.  If -compose is not set, this will be
     prompted for.

-to=<address>
     Specify the primary recipient of the emails generated. Generally,
     this will be the upstream maintainer of the project involved.
     Default is the value of the _sendemail.to_ configuration value; if
     that is unspecified, and -to-cmd is not specified, this will be
     prompted for.

     The -to option must be repeated for each user you want on the to
     list.

-8bit-encoding=<encoding>
     When encountering a non-ASCII message or subject that does not
     declare its encoding, add headers/quoting to indicate it is
     encoded in <encoding>.  Default is the value of the
     _sendemail.assume8bitEncoding_; if that is unspecified, this will
     be prompted for if any non-ASCII files are encountered.

     Note that no attempts whatsoever are made to validate the encoding.


Sending
=======

-envelope-sender=<address>
     Specify the envelope sender used to send the emails.  This is
     useful if your default address is not the address that is
     subscribed to a list. In order to use the _From_ address, set the
     value to "auto". If you use the sendmail binary, you must have
     suitable privileges for the -f parameter.  Default is the value of
     the _sendemail.envelopesender_ configuration variable; if that is
     unspecified, choosing the envelope sender is left to your MTA.

-smtp-encryption=<encryption>
     Specify the encryption to use, either _ssl_ or _tls_.  Any other
     value reverts to plain SMTP.  Default is the value of
     _sendemail.smtpencryption_.

-smtp-domain=<FQDN>
     Specifies the Fully Qualified Domain Name (FQDN) used in the
     HELO/EHLO command to the SMTP server.  Some servers require the
     FQDN to match your IP address.  If not set, git send-email attempts
     to determine your FQDN automatically.  Default is the value of
     _sendemail.smtpdomain_.

-smtp-pass[=<password>]
     Password for SMTP-AUTH. The argument is optional: If no argument
     is specified, then the empty string is used as the password.
     Default is the value of _sendemail.smtppass_, however _-smtp-pass_
     always overrides this value.

     Furthermore, passwords need not be specified in configuration files
     or on the command line. If a username has been specified (with
     _-smtp-user_ or a _sendemail.smtpuser_), but no password has been
     specified (with _-smtp-pass_ or _sendemail.smtppass_), then the
     user is prompted for a password while the input is masked for
     privacy.

-smtp-server=<host>
     If set, specifies the outgoing SMTP server to use (e.g.
     `smtp.example.com' or a raw IP address).  Alternatively it can
     specify a full pathname of a sendmail-like program instead; the
     program must support the `-i' option.  Default value can be
     specified by the _sendemail.smtpserver_ configuration option; the
     built-in default is `/usr/sbin/sendmail' or `/usr/lib/sendmail' if
     such program is available, or `localhost' otherwise.

-smtp-server-port=<port>
     Specifies a port different from the default port (SMTP servers
     typically listen to smtp port 25, but may also listen to
     submission port 587, or the common SSL smtp port 465); symbolic
     port names (e.g. "submission" instead of 587) are also accepted.
     The port can also be set with the _sendemail.smtpserverport_
     configuration variable.

-smtp-server-option=<option>
     If set, specifies the outgoing SMTP server option to use.  Default
     value can be specified by the _sendemail.smtpserveroption_
     configuration option.

     The -smtp-server-option option must be repeated for each option
     you want to pass to the server. Likewise, different lines in the
     configuration files must be used for each option.

-smtp-ssl
     Legacy alias for _-smtp-encryption ssl_.

-smtp-user=<user>
     Username for SMTP-AUTH. Default is the value of
     _sendemail.smtpuser_; if a username is not specified (with
     _-smtp-user_ or _sendemail.smtpuser_), then authentication is not
     attempted.

-smtp-debug=0|1
     Enable (1) or disable (0) debug output. If enabled, SMTP commands
     and replies will be printed. Useful to debug TLS connection and
     authentication problems.


Automating
==========

-to-cmd=<command>
     Specify a command to execute once per patch file which should
     generate patch file specific "To:" entries.  Output of this
     command must be single email address per line.  Default is the
     value of _sendemail.tocmd_ configuration value.

-cc-cmd=<command>
     Specify a command to execute once per patch file which should
     generate patch file specific "Cc:" entries.  Output of this
     command must be single email address per line.  Default is the
     value of _sendemail.cccmd_ configuration value.

-[no-]chain-reply-to
     If this is set, each email will be sent as a reply to the previous
     email sent.  If disabled with "-no-chain-reply-to", all emails
     after the first will be sent as replies to the first email sent.
     When using this, it is recommended that the first file given be an
     overview of the entire patch series. Disabled by default, but the
     _sendemail.chainreplyto_ configuration variable can be used to
     enable it.

-identity=<identity>
     A configuration identity. When given, causes values in the
     _sendemail.<identity>_ subsection to take precedence over values
     in the _sendemail_ section. The default identity is the value of
     _sendemail.identity_.

-[no-]signed-off-by-cc
     If this is set, add emails found in Signed-off-by: or Cc: lines to
     the cc list. Default is the value of _sendemail.signedoffbycc_
     configuration value; if that is unspecified, default to
     -signed-off-by-cc.

-suppress-cc=<category>
     Specify an additional category of recipients to suppress the
     auto-cc of:

        * _author_ will avoid including the patch author

        * _self_ will avoid including the sender

        * _cc_ will avoid including anyone mentioned in Cc lines in the
          patch header except for self (use _self_ for that).

        * _bodycc_ will avoid including anyone mentioned in Cc lines in
          the patch body (commit message) except for self (use _self_
          for that).

        * _sob_ will avoid including anyone mentioned in Signed-off-by
          lines except for self (use _self_ for that).

        * _cccmd_ will avoid running the -cc-cmd.

        * _body_ is equivalent to _sob_ + _bodycc_

        * _all_ will suppress all auto cc values.

     Default is the value of _sendemail.suppresscc_ configuration
     value; if that is unspecified, default to _self_ if -suppress-from
     is specified, as well as _body_ if -no-signed-off-cc is specified.

-[no-]suppress-from
     If this is set, do not add the From: address to the cc: list.
     Default is the value of _sendemail.suppressfrom_ configuration
     value; if that is unspecified, default to -no-suppress-from.

-[no-]thread
     If this is set, the In-Reply-To and References headers will be
     added to each email sent.  Whether each mail refers to the
     previous email (`deep' threading per _git format-patch_ wording)
     or to the first email (`shallow' threading) is governed by
     "-[no-]chain-reply-to".

     If disabled with "-no-thread", those headers will not be added
     (unless specified with -in-reply-to).  Default is the value of the
     _sendemail.thread_ configuration value; if that is unspecified,
     default to -thread.

     It is up to the user to ensure that no In-Reply-To header already
     exists when _git send-email_ is asked to add it (especially note
     that _git format-patch_ can be configured to do the threading
     itself).  Failure to do so may not produce the expected result in
     the recipient’s MUA.


Administering
=============

-confirm=<mode>
     Confirm just before sending:

        * _always_ will always confirm before sending

        * _never_ will never confirm before sending

        * _cc_ will confirm before sending when send-email has
          automatically added addresses from the patch to the Cc list

        * _compose_ will confirm before sending the first message when
          using -compose.

        * _auto_ is equivalent to _cc_ + _compose_

     Default is the value of _sendemail.confirm_ configuration value;
     if that is unspecified, default to _auto_ unless any of the
     suppress options have been specified, in which case default to
     _compose_.

-dry-run
     Do everything except actually send the emails.

-[no-]format-patch
     When an argument may be understood either as a reference or as a
     file name, choose to understand it as a format-patch argument
     (_-format-patch_) or as a file name (_-no-format-patch_). By
     default, when such a conflict occurs, git send-email will fail.

-quiet
     Make git-send-email less verbose.  One line per email should be
     all that is output.

-[no-]validate
     Perform sanity checks on patches.  Currently, validation means the
     following:

        * Warn of patches that contain lines longer than 998
          characters; this is due to SMTP limits as described by
          http://www.ietf.org/rfc/rfc2821.txt
          (http://www.ietf.org/rfc/rfc2821.txt).

     Default is the value of _sendemail.validate_; if this is not set,
     default to _-validate_.

-force
     Send emails even if safety checks would prevent it.


CONFIGURATION
*************

sendemail.aliasesfile
     To avoid typing long email addresses, point this to one or more
     email aliases files.  You must also supply
     _sendemail.aliasfiletype_.

sendemail.aliasfiletype
     Format of the file(s) specified in sendemail.aliasesfile. Must be
     one of _mutt_, _mailrc_, _pine_, _elm_, or _gnus_.

sendemail.multiedit
     If true (default), a single editor instance will be spawned to edit
     files you have to edit (patches when _-annotate_ is used, and the
     summary when _-compose_ is used). If false, files will be edited
     one after the other, spawning a new editor each time.

sendemail.confirm
     Sets the default for whether to confirm before sending. Must be
     one of _always_, _never_, _cc_, _compose_, or _auto_. See
     _-confirm_ in the previous section for the meaning of these values.


EXAMPLE
*******



Use gmail as the smtp server
============================

To use _git send-email_ to send your patches through the GMail SMTP
server, edit ~/.gitconfig to specify your account settings:

     [sendemail]
             smtpencryption = tls
             smtpserver = smtp.gmail.com
             smtpuser = yourname@gmail.com
             smtpserverport = 587

   Once your commits are ready to be sent to the mailing list, run the
following commands:

     $ git format-patch --cover-letter -M origin/master -o outgoing/
     $ edit outgoing/0000-*
     $ git send-email outgoing/*

   Note: the following perl modules are required Net::SMTP::SSL,
MIME::Base64 and Authen::SASL



SEE ALSO
********

git-format-patch(1), git-imap-send(1), mbox(5)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-send-pack,  Up: Top

Name
****

git-send-pack — Push objects over git protocol to another repository



Synopsis
********

     git send-pack [-all] [-dry-run] [-force] [-receive-pack=<git-receive-pack>] [-verbose] [-thin] [<host>:]<directory> [<ref>…]


DESCRIPTION
***********

Usually you would want to use _git push_, which is a higher-level
wrapper of this command, instead. See git-push(1).

   Invokes _git-receive-pack_ on a possibly remote repository, and
updates it from the current repository, sending named refs.



OPTIONS
*******

-receive-pack=<git-receive-pack>
     Path to the _git-receive-pack_ program on the remote end.
     Sometimes useful when pushing to a remote repository over ssh, and
     you do not have the program in a directory on the default $PATH.

-exec=<git-receive-pack>
     Same as -receive-pack=<git-receive-pack>.

-all
     Instead of explicitly specifying which refs to update, update all
     heads that locally exist.

-dry-run
     Do everything except actually send the updates.

-force
     Usually, the command refuses to update a remote ref that is not an
     ancestor of the local ref used to overwrite it.  This flag
     disables the check.  What this means is that the remote repository
     can lose commits; use it with care.

-verbose
     Run verbosely.

-thin
     Send a "thin" pack, which records objects in deltified form based
     on objects not included in the pack to reduce network traffic.

<host>
     A remote host to house the repository.  When this part is
     specified, _git-receive-pack_ is invoked via ssh.

<directory>
     The repository to update.

<ref>…
     The remote refs to update.


Specifying the Refs
*******************

There are three ways to specify which refs to update on the remote end.

   With _-all_ flag, all refs that exist locally are transferred to the
remote side.  You cannot specify any _<ref>_ if you use this flag.

   Without _-all_ and without any _<ref>_, the heads that exist both on
the local side and on the remote side are updated.

   When one or more _<ref>_ are specified explicitly, it can be either a
single pattern, or a pair of such pattern separated by a colon ":"
(this means that a ref name cannot have a colon in it).  A single
pattern _<name>_ is just a shorthand for _<name>:<name>_.

   Each pattern pair consists of the source side (before the colon) and
the destination side (after the colon).  The ref to be pushed is
determined by finding a match that matches the source side, and where
it is pushed is determined by using the destination side. The rules
used to match a ref are the same rules used by _git rev-parse_ to
resolve a symbolic ref name. See git-rev-parse(1).

   * It is an error if <src> does not match exactly one of the local
     refs.

   * It is an error if <dst> matches more than one remote refs.

   * If <dst> does not match any remote ref, either

        * it has to start with "refs/"; <dst> is used as the
          destination literally in this case.

        * <src> == <dst> and the ref that matched the <src> must not
          exist in the set of remote refs; the ref matched <src>
          locally is used as the name of the destination.

   Without _-force_, the <src> ref is stored at the remote only if
<dst> does not exist, or <dst> is a proper subset (i.e. an ancestor) of
<src>.  This check, known as "fast-forward check", is performed in
order to avoid accidentally overwriting the remote ref and lose other
peoples' commits from there.

   With _-force_, the fast-forward check is disabled for all refs.

   Optionally, a <ref> parameter can be prefixed with a plus _+_ sign
to disable the fast-forward check only on that ref.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-sh-i18n--envsubst,  Up: Top

Name
****

git-sh-i18n-envsubst — Git's own envsubst(1) for i18n fallbacks



Synopsis
********

     eval_gettext () {
             printf "%s" "$1" | (
                     export PATH $(git sh-i18n-envsubst -variables "$1");
                     git sh-i18n-envsubst "$1"
             )
     }


DESCRIPTION
***********

This is not a command the end user would want to run.  Ever.  This
documentation is meant for people who are studying the plumbing scripts
and/or are writing new ones.

   _git sh-i18n-envsubst_ is Git’s stripped-down copy of the GNU
`envsubst(1)' program that comes with the GNU gettext package. It’s
used internally by git-sh-i18n(1) to interpolate the variables passed
to the `eval_gettext' function.

   No promises are made about the interface, or that this program
won’t disappear without warning in the next version of Git. Don’t
use it.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-sh-i18n,  Up: Top

Name
****

git-sh-i18n — Git's i18n setup code for shell scripts



Synopsis
********

     . "$(git -exec-path)/git-sh-i18n"


DESCRIPTION
***********

This is not a command the end user would want to run.  Ever.  This
documentation is meant for people who are studying the Porcelain-ish
scripts and/or are writing new ones.

   The 'git sh-i18n scriptlet is designed to be sourced (using `.') by
Git’s porcelain programs implemented in shell script. It provides
wrappers for the GNU `gettext' and `eval_gettext' functions accessible
through the `gettext.sh' script, and provides pass-through fallbacks on
systems without GNU gettext.



FUNCTIONS
*********

gettext
     Currently a dummy fall-through function implemented as a wrapper
     around `printf(1)'. Will be replaced by a real gettext
     implementation in a later version.

eval_gettext
     Currently a dummy fall-through function implemented as a wrapper
     around `printf(1)' with variables expanded by the
     git-sh-i18n-envsubst(1) helper. Will be replaced by a real gettext
     implementation in a later version.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-sh-setup,  Up: Top

Name
****

git-sh-setup — Common git shell script setup code



Synopsis
********

     . "$(git -exec-path)/git-sh-setup"


DESCRIPTION
***********

This is not a command the end user would want to run.  Ever.  This
documentation is meant for people who are studying the Porcelain-ish
scripts and/or are writing new ones.

   The _git sh-setup_ scriptlet is designed to be sourced (using `.')
by other shell scripts to set up some variables pointing at the normal
git directories and a few helper shell functions.

   Before sourcing it, your script should set up a few variables;
`USAGE' (and `LONG_USAGE', if any) is used to define message given by
`usage()' shell function.  `SUBDIRECTORY_OK' can be set if the script
can run from a subdirectory of the working tree (some commands do not).

   The scriptlet sets `GIT_DIR' and `GIT_OBJECT_DIRECTORY' shell
variables, but does *not* export them to the environment.



FUNCTIONS
*********

die
     exit after emitting the supplied error message to the standard
     error stream.

usage
     die with the usage message.

set_reflog_action
     set the message that will be recorded to describe the end-user
     action in the reflog, when the script updates a ref.

git_editor
     runs an editor of user’s choice (GIT_EDITOR, core.editor, VISUAL
     or EDITOR) on a given file, but error out if no editor is specified
     and the terminal is dumb.

is_bare_repository
     outputs `true' or `false' to the standard output stream to
     indicate if the repository is a bare repository (i.e. without an
     associated working tree).

cd_to_toplevel
     runs chdir to the toplevel of the working tree.

require_work_tree
     checks if the current directory is within the working tree of the
     repository, and otherwise dies.

require_work_tree_exists
     checks if the working tree associated with the repository exists,
     and otherwise dies.  Often done before calling cd_to_toplevel,
     which is impossible to do if there is no working tree.

require_clean_work_tree <action> [<hint>]
     checks that the working tree and index associated with the
     repository have no uncommitted changes to tracked files.
     Otherwise it emits an error message of the form `Cannot <action>:
     <reason>. <hint>', and dies.  Example:

          require_clean_work_tree rebase "Please commit or stash them."

get_author_ident_from_commit
     outputs code for use with eval to set the GIT_AUTHOR_NAME,
     GIT_AUTHOR_EMAIL and GIT_AUTHOR_DATE variables for a given commit.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-shell,  Up: Top

Name
****

git-shell — Restricted login shell for Git-only SSH access



Synopsis
********

     git shell [-c <command> <argument>]


DESCRIPTION
***********

A login shell for SSH accounts to provide restricted Git access. When
_-c_ is given, the program executes <command> non-interactively;
<command> can be one of _git receive-pack_, _git upload-pack_, _git
upload-archive_, _cvs server_, or a command in COMMAND_DIR. The shell
is started in interactive mode when no arguments are given; in this
case, COMMAND_DIR must exist, and any of the executables in it can be
invoked.

   _cvs server_ is a special command which executes git-cvsserver.

   COMMAND_DIR is the path "$HOME/git-shell-commands". The user must
have read and execute permissions to the directory in order to execute
the programs in it. The programs are executed with a cwd of $HOME, and
<argument> is parsed as a command-line string.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-shortlog,  Up: Top

Name
****

git-shortlog — Summarize 'git log' output



Synopsis
********

     git log -pretty=short | git shortlog [-h] [-n] [-s] [-e] [-w]
     git shortlog [-n|-numbered] [-s|-summary] [-e|-email] [-w[<width>[,<indent1>[,<indent2>]]]] <commit>…


DESCRIPTION
***********

Summarizes _git log_ output in a format suitable for inclusion in
release announcements. Each commit will be grouped by author and the
first line of the commit message will be shown.

   Additionally, "[PATCH]" will be stripped from the commit description.

   If no revisions are passed on the command line and either standard
input is not a terminal or there is no current branch, _git shortlog_
will output a summary of the log read from standard input, without
reference to the current repository.



OPTIONS
*******

-h
-help
     Print a short usage message and exit.

-n
-numbered
     Sort output according to the number of commits per author instead
     of author alphabetic order.

-s
-summary
     Suppress commit description and provide a commit count summary
     only.

-e
-email
     Show the email address of each author.

-format[=<format>]
     Instead of the commit subject, use some other information to
     describe each commit.  _<format>_ can be any string accepted by
     the `--format' option of _git log_, such as _* [%h] %s_.  (See the
     "PRETTY FORMATS" section of git-log(1).)

          Each pretty-printed commit will be rewrapped before it is shown.

-w[<width>[,<indent1>[,<indent2>]]]
     Linewrap the output by wrapping each line at `width'.  The first
     line of each entry is indented by `indent1' spaces, and the second
     and subsequent lines are indented by `indent2' spaces. `width',
     `indent1', and `indent2' default to 76, 6 and 9 respectively.


MAPPING AUTHORS
***************

The `.mailmap' feature is used to coalesce together commits by the same
person in the shortlog, where their name and/or email address was
spelled differently.

   If the file `.mailmap' exists at the toplevel of the repository, or
at the location pointed to by the mailmap.file configuration option, it
is used to map author and committer names and email addresses to
canonical real names and email addresses.

   In the simple form, each line in the file consists of the canonical
real name of an author, whitespace, and an email address used in the
commit (enclosed by _<_ and _>_) to map to the name. For example:

     Proper Name <commit@email.xx>

   The more complex forms are:

     <proper@email.xx> <commit@email.xx>

   which allows mailmap to replace only the email part of a commit, and:

     Proper Name <proper@email.xx> <commit@email.xx>

   which allows mailmap to replace both the name and the email of a
commit matching the specified commit email address, and:

     Proper Name <proper@email.xx> Commit Name <commit@email.xx>

   which allows mailmap to replace both the name and the email of a
commit matching both the specified commit name and email address.

   Example 1: Your history contains commits by two authors, Jane and
Joe, whose names appear in the repository under several forms:

     Joe Developer <joe@example.com>
     Joe R. Developer <joe@example.com>
     Jane Doe <jane@example.com>
     Jane Doe <jane@laptop.(none)>
     Jane D. <jane@desktop.(none)>

   Now suppose that Joe wants his middle name initial used, and Jane
prefers her family name fully spelled out. A proper `.mailmap' file
would look like:

     Jane Doe         <jane@desktop.(none)>
     Joe R. Developer <joe@example.com>

   Note how there is no need for an entry for <jane@laptop
(mailto:jane@laptop).(none)>, because the real name of that author is
already correct.

   Example 2: Your repository contains commits from the following
authors:

     nick1 <bugs@company.xx>
     nick2 <bugs@company.xx>
     nick2 <nick2@company.xx>
     santa <me@company.xx>
     claus <me@company.xx>
     CTO <cto@coompany.xx>

   Then you might want a `.mailmap' file that looks like:

     <cto@company.xx>                       <cto@coompany.xx>
     Some Dude <some@dude.xx>         nick1 <bugs@company.xx>
     Other Author <other@author.xx>   nick2 <bugs@company.xx>
     Other Author <other@author.xx>         <nick2@company.xx>
     Santa Claus <santa.claus@northpole.xx> <me@company.xx>

   Use hash _#_ for comments that are either on their own line, or after
the email address.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-show-branch,  Up: Top

Name
****

git-show-branch — Show branches and their commits



Synopsis
********

     git show-branch [-a|-all] [-r|-remotes] [-topo-order | -date-order]
                     [-current] [-color[=<when>] | -no-color] [-sparse]
                     [-more=<n> | -list | -independent | -merge-base]
                     [-no-name | -sha1-name] [-topics]
                     [(<rev> | <glob>)…]
     git show-branch (-g|-reflog)[=<n>[,<base>]] [-list] [<ref>]


DESCRIPTION
***********

Shows the commit ancestry graph starting from the commits named with
<rev>s or <globs>s (or all refs under refs/heads and/or refs/tags)
semi-visually.

   It cannot show more than 29 branches and commits at a time.

   It uses `showbranch.default' multi-valued configuration items if no
<rev> nor <glob> is given on the command line.



OPTIONS
*******

<rev>
     Arbitrary extended SHA1 expression (see gitrevisions(7)) that
     typically names a branch head or a tag.

<glob>
     A glob pattern that matches branch or tag names under refs/.  For
     example, if you have many topic branches under refs/heads/topic,
     giving `topic/*' would show all of them.

-r
-remotes
     Show the remote-tracking branches.

-a
-all
     Show both remote-tracking branches and local branches.

-current
     With this option, the command includes the current branch to the
     list of revs to be shown when it is not given on the command line.

-topo-order
     By default, the branches and their commits are shown in reverse
     chronological order.  This option makes them appear in topological
     order (i.e., descendant commits are shown before their parents).

-date-order
     This option is similar to _-topo-order_ in the sense that no
     parent comes before all of its children, but otherwise commits are
     ordered according to their commit date.

-sparse
     By default, the output omits merges that are reachable from only
     one tip being shown.  This option makes them visible.

-more=<n>
     Usually the command stops output upon showing the commit that is
     the common ancestor of all the branches.  This flag tells the
     command to go <n> more common commits beyond that.  When <n> is
     negative, display only the <reference>s given, without showing the
     commit ancestry tree.

-list
     Synonym to `--more=-1'

-merge-base
     Instead of showing the commit list, determine possible merge bases
     for the specified commits. All merge bases will be contained in
     all specified commits. This is different from how
     git-merge-base(1) handles the case of three or more commits.

-independent
     Among the <reference>s given, display only the ones that cannot be
     reached from any other <reference>.

-no-name
     Do not show naming strings for each commit.

-sha1-name
     Instead of naming the commits using the path to reach them from
     heads (e.g. "master~2" to mean the grandparent of "master"), name
     them with the unique prefix of their object names.

-topics
     Shows only commits that are NOT on the first branch given.  This
     helps track topic branches by hiding any commit that is already in
     the main line of development.  When given "git show-branch -topics
     master topic1 topic2", this will show the revisions given by "git
     rev-list ^master topic1 topic2"

-g
-reflog[=<n>[,<base>]] [<ref>]
     Shows <n> most recent ref-log entries for the given ref.  If
     <base> is given, <n> entries going back from that entry.  <base>
     can be specified as count or date.  When no explicit <ref>
     parameter is given, it defaults to the current branch (or `HEAD'
     if it is detached).

-color[=<when>]
     Color the status sign (one of these: `*' `!' `+' `-') of each
     commit corresponding to the branch it’s in.  The value must be
     always (the default), never, or auto.

-no-color
     Turn off colored output, even when the configuration file gives the
     default to color output.  Same as `--color=never'.

   Note that -more, -list, -independent and -merge-base options are
mutually exclusive.



OUTPUT
******

Given N <references>, the first N lines are the one-line description
from their commit message.  The branch head that is pointed at by
$GIT_DIR/HEAD is prefixed with an asterisk `*' character while other
heads are prefixed with a `!' character.

   Following these N lines, one-line log for each commit is displayed,
indented N places.  If a commit is on the I-th branch, the I-th
indentation character shows a `+' sign; otherwise it shows a space.
Merge commits are denoted by a `-' sign.  Each commit shows a short
name that can be used as an extended SHA1 to name that commit.

   The following example shows three branches, "master", "fixes" and
"mhf":

     $ git show-branch master fixes mhf
     * [master] Add 'git show-branch'.
      ! [fixes] Introduce "reset type" flag to "git reset"
       ! [mhf] Allow "+remote:local" refspec to cause --force when fetching.
     ---
       + [mhf] Allow "+remote:local" refspec to cause --force when fetching.
       + [mhf~1] Use git-octopus when pulling more than one heads.
      +  [fixes] Introduce "reset type" flag to "git reset"
       + [mhf~2] "git fetch --force".
       + [mhf~3] Use .git/remote/origin, not .git/branches/origin.
       + [mhf~4] Make "git pull" and "git fetch" default to origin
       + [mhf~5] Infamous 'octopus merge'
       + [mhf~6] Retire git-parse-remote.
       + [mhf~7] Multi-head fetch.
       + [mhf~8] Start adding the $GIT_DIR/remotes/ support.
     *++ [master] Add 'git show-branch'.

   These three branches all forked from a common commit, [master],
whose commit message is "Add 'git show-branch'".  The "fixes" branch
adds one commit "Introduce "reset type" flag to "git reset"". The "mhf"
branch adds many other commits.  The current branch is "master".



EXAMPLE
*******

If you keep your primary branches immediately under `refs/heads', and
topic branches in subdirectories of it, having the following in the
configuration file may help:

     [showbranch]
             default = --topo-order
             default = heads/*

   With this, `git show-branch' without extra parameters would show
only the primary branches.  In addition, if you happen to be on your
topic branch, it is shown as well.

     $ git show-branch --reflog="10,1 hour ago" --list master

   shows 10 reflog entries going back from the tip as of 1 hour ago.
Without `--list', the output also shows how these tips are
topologically related with each other.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-show-index,  Up: Top

Name
****

git-show-index — Show packed archive index



Synopsis
********

     git show-index < idx-file


DESCRIPTION
***********

Reads given idx file for packed git archive created with _git
pack-objects_ command, and dumps its contents.

   The information it outputs is subset of what you can get from _git
verify-pack -v_; this command only shows the packfile offset and SHA1
of each object.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-show-ref,  Up: Top

Name
****

git-show-ref — List references in a local repository



Synopsis
********

     git show-ref [-q|-quiet] [-verify] [-head] [-d|-dereference]
                  [-s|-hash[=<n>]] [-abbrev[=<n>]] [-tags]
                  [-heads] [-] [<pattern>…]
     git show-ref -exclude-existing[=<pattern>] < ref-list


DESCRIPTION
***********

Displays references available in a local repository along with the
associated commit IDs. Results can be filtered using a pattern and tags
can be dereferenced into object IDs. Additionally, it can be used to
test whether a particular ref exists.

   The -exclude-existing form is a filter that does the inverse, it
shows the refs from stdin that don’t exist in the local repository.

   Use of this utility is encouraged in favor of directly accessing
files under the `.git' directory.



OPTIONS
*******

-head
     Show the HEAD reference.

-tags
-heads
     Limit to only "refs/heads" and "refs/tags", respectively.  These
     options are not mutually exclusive; when given both, references
     stored in "refs/heads" and "refs/tags" are displayed.

-d
-dereference
     Dereference tags into object IDs as well. They will be shown with
     "^{}" appended.

-s
-hash[=<n>]
     Only show the SHA1 hash, not the reference name. When combined with
     -dereference the dereferenced tag will still be shown after the
     SHA1.

-verify
     Enable stricter reference checking by requiring an exact ref path.
     Aside from returning an error code of 1, it will also print an
     error message if _-quiet_ was not specified.

-abbrev[=<n>]
     Abbreviate the object name.  When using `--hash', you do not have
     to say `--hash --abbrev'; `--hash=n' would do.

-q
-quiet
     Do not print any results to stdout. When combined with _-verify_
     this can be used to silently check if a reference exists.

-exclude-existing[=<pattern>]
     Make _git show-ref_ act as a filter that reads refs from stdin of
     the form "`^(?:<anything>\s)?<refname>(?:\^{})?$'" and performs
     the following actions on each: (1) strip "^{}" at the end of line
     if any; (2) ignore if pattern is provided and does not head-match
     refname; (3) warn if refname is not a well-formed refname and skip;
     (4) ignore if refname is a ref that exists in the local repository;
     (5) otherwise output the line.

<pattern>…
     Show references matching one or more patterns. Patterns are
     matched from the end of the full name, and only complete parts are
     matched, e.g.  _master_ matches _refs/heads/master_,
     _refs/remotes/origin/master_, _refs/tags/jedi/master_ but not
     _refs/heads/mymaster_ nor _refs/remotes/master/jedi_.


OUTPUT
******

The output is in the format: _<SHA-1 ID>_ _<space>_ _<reference name>_.

     $ git show-ref --head --dereference
     832e76a9899f560a90ffd62ae2ce83bbeff58f54 HEAD
     832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/master
     832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/origin
     3521017556c5de4159da4615a39fa4d5d2c279b5 refs/tags/v0.99.9c
     6ddc0964034342519a87fe013781abf31c6db6ad refs/tags/v0.99.9c^{}
     055e4ae3ae6eb344cbabf2a5256a49ea66040131 refs/tags/v1.0rc4
     423325a2d24638ddcc82ce47be5e40be550f4507 refs/tags/v1.0rc4^{}
     ...

   When using -hash (and not -dereference) the output format is:
_<SHA-1 ID>_

     $ git show-ref --heads --hash
     2e3ba0114a1f52b47df29743d6915d056be13278
     185008ae97960c8d551adcd9e23565194651b5d1
     03adf42c988195b50e1a1935ba5fcbc39b2b029b
     ...


EXAMPLE
*******

To show all references called "master", whether tags or heads or
anything else, and regardless of how deep in the reference naming
hierarchy they are, use:

             git show-ref master

   This will show "refs/heads/master" but also
"refs/remote/other-repo/master", if such references exists.

   When using the _-verify_ flag, the command requires an exact path:

             git show-ref --verify refs/heads/master

   will only match the exact branch called "master".

   If nothing matches, _git show-ref_ will return an error code of 1,
and in the case of verification, it will show an error message.

   For scripting, you can ask it to be quiet with the "-quiet" flag,
which allows you to do things like

             git show-ref --quiet --verify -- "refs/heads/$headname" ||
                     echo "$headname is not a valid branch"

   to check whether a particular branch exists or not (notice how we
don’t actually want to show any results, and we want to use the full
refname for it in order to not trigger the problem with ambiguous
partial matches).

   To show only tags, or only proper branch heads, use "-tags" and/or
"-heads" respectively (using both means that it shows tags and heads,
but not other random references under the refs/ subdirectory).

   To do automatic tag object dereferencing, use the "-d" or
"-dereference" flag, so you can do

             git show-ref --tags --dereference

   to get a listing of all tags together with what they dereference.



FILES
*****

`.git/refs/*', `.git/packed-refs'



SEE ALSO
********

git-ls-remote(1), git-update-ref(1), gitrepository-layout(5)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-show,  Up: Top

Name
****

git-show — Show various types of objects



Synopsis
********

     git show [options] <object>…


DESCRIPTION
***********

Shows one or more objects (blobs, trees, tags and commits).

   For commits it shows the log message and textual diff. It also
presents the merge commit in a special format as produced by _git
diff-tree -cc_.

   For tags, it shows the tag message and the referenced objects.

   For trees, it shows the names (equivalent to _git ls-tree_ with
-name-only).

   For plain blobs, it shows the plain contents.

   The command takes options applicable to the _git diff-tree_ command
to control how the changes the commit introduces are shown.

   This manual page describes only the most frequently used options.



OPTIONS
*******

<object>…
     The names of objects to show.  For a more complete list of ways to
     spell object names, see "SPECIFYING REVISIONS" section in
     gitrevisions(7).

-pretty[=<format>]
-format=<format>
     Pretty-print the contents of the commit logs in a given format,
     where _<format>_ can be one of _oneline_, _short_, _medium_,
     _full_, _fuller_, _email_, _raw_ and _format:<string>_.  See the
     "PRETTY FORMATS" section for some additional details for each
     format.  When omitted, the format defaults to _medium_.

     Note: you can specify the default pretty format in the repository
     configuration (see git-config(1)).

-abbrev-commit
     Instead of showing the full 40-byte hexadecimal commit object
     name, show only a partial prefix.  Non default number of digits
     can be specified with "-abbrev=<n>" (which also modifies diff
     output, if it is displayed).

     This should make "-pretty=oneline" a whole lot more readable for
     people using 80-column terminals.

-no-abbrev-commit
     Show the full 40-byte hexadecimal commit object name. This negates
     `--abbrev-commit' and those options which imply it such as
     "-oneline". It also overrides the _log.abbrevCommit_ variable.

-oneline
     This is a shorthand for "-pretty=oneline -abbrev-commit" used
     together.

-encoding[=<encoding>]
     The commit objects record the encoding used for the log message in
     their encoding header; this option can be used to tell the command
     to re-code the commit log message in the encoding preferred by the
     user.  For non plumbing commands this defaults to UTF-8.

-notes[=<ref>]
     Show the notes (see git-notes(1)) that annotate the commit, when
     showing the commit log message.  This is the default for `git
     log', `git show' and `git whatchanged' commands when there is no
     `--pretty', `--format' nor `--oneline' option given on the command
     line.

     By default, the notes shown are from the notes refs listed in the
     _core.notesRef_ and _notes.displayRef_ variables (or corresponding
     environment overrides). See git-config(1) for more details.

     With an optional _<ref>_ argument, show this notes ref instead of
     the default notes ref(s). The ref is taken to be in `refs/notes/'
     if it is not qualified.

     Multiple -notes options can be combined to control which notes are
     being displayed. Examples: "-notes=foo" will show only notes from
     "refs/notes/foo"; "-notes=foo -notes" will show both notes from
     "refs/notes/foo" and from the default notes ref(s).

-no-notes
     Do not show notes. This negates the above `--notes' option, by
     resetting the list of notes refs from which notes are shown.
     Options are parsed in the order given on the command line, so e.g.
     "-notes -notes=foo -no-notes -notes=bar" will only show notes from
     "refs/notes/bar".

-show-notes[=<ref>]
-[no-]standard-notes
     These options are deprecated. Use the above -notes/-no-notes
     options instead.


PRETTY FORMATS
**************

If the commit is a merge, and if the pretty-format is not _oneline_,
_email_ or _raw_, an additional line is inserted before the _Author:_
line.  This line begins with "Merge: " and the sha1s of ancestral
commits are printed, separated by spaces.  Note that the listed commits
may not necessarily be the list of the *direct* parent commits if you
have limited your view of history: for example, if you are only
interested in changes related to a certain directory or file.

   There are several built-in formats, and you can define additional
formats by setting a pretty.<name> config option to either another
format name, or a _format:_ string, as described below (see
git-config(1)). Here are the details of the built-in formats:

   * _oneline_

          <sha1> <title line>

     This is designed to be as compact as possible.

   * _short_

          commit <sha1>
          Author: <author>

          <title line>

   * _medium_

          commit <sha1>
          Author: <author>
          Date:   <author date>

          <title line>

          <full commit message>

   * _full_

          commit <sha1>
          Author: <author>
          Commit: <committer>

          <title line>

          <full commit message>

   * _fuller_

          commit <sha1>
          Author:     <author>
          AuthorDate: <author date>
          Commit:     <committer>
          CommitDate: <committer date>

          <title line>

          <full commit message>

   * _email_

          From <sha1> <date>
          From: <author>
          Date: <author date>
          Subject: [PATCH] <title line>

          <full commit message>

   * _raw_

     The _raw_ format shows the entire commit exactly as stored in the
     commit object.  Notably, the SHA1s are displayed in full,
     regardless of whether -abbrev or -no-abbrev are used, and
     _parents_ information show the true parent commits, without taking
     grafts nor history simplification into account.

   * _format:<string>_

     The _format:<string>_ format allows you to specify which
     information you want to show. It works a little bit like printf
     format, with the notable exception that you get a newline with _%n_
     instead of _\n_.

     E.g, _format:"The author of %h was %an, %ar%nThe title was
     >>%s<<%n"_ would show something like this:

          The author of fe6e0ee was Junio C Hamano, 23 hours ago
          The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

     The placeholders are:

        * _%H_: commit hash

        * _%h_: abbreviated commit hash

        * _%T_: tree hash

        * _%t_: abbreviated tree hash

        * _%P_: parent hashes

        * _%p_: abbreviated parent hashes

        * _%an_: author name

        * _%aN_: author name (respecting .mailmap, see git-shortlog(1)
          or git-blame(1))

        * _%ae_: author email

        * _%aE_: author email (respecting .mailmap, see git-shortlog(1)
          or git-blame(1))

        * _%ad_: author date (format respects -date= option)

        * _%aD_: author date, RFC2822 style

        * _%ar_: author date, relative

        * _%at_: author date, UNIX timestamp

        * _%ai_: author date, ISO 8601 format

        * _%cn_: committer name

        * _%cN_: committer name (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%ce_: committer email

        * _%cE_: committer email (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%cd_: committer date

        * _%cD_: committer date, RFC2822 style

        * _%cr_: committer date, relative

        * _%ct_: committer date, UNIX timestamp

        * _%ci_: committer date, ISO 8601 format

        * _%d_: ref names, like the -decorate option of git-log(1)

        * _%e_: encoding

        * _%s_: subject

        * _%f_: sanitized subject line, suitable for a filename

        * _%b_: body

        * _%B_: raw body (unwrapped subject and body)

        * _%N_: commit notes

        * _%gD_: reflog selector, e.g., `refs/stash@{1}'

        * _%gd_: shortened reflog selector, e.g., `stash@{1}'

        * _%gn_: reflog identity name

        * _%gN_: reflog identity name (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%ge_: reflog identity email

        * _%gE_: reflog identity email (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%gs_: reflog subject

        * _%Cred_: switch color to red

        * _%Cgreen_: switch color to green

        * _%Cblue_: switch color to blue

        * _%Creset_: reset color

        * _%C(…)_: color specification, as described in
          color.branch.* config option

        * _%m_: left, right or boundary mark

        * _%n_: newline

        * _%%_: a raw _%_

        * _%x00_: print a byte from a hex code

        * _%w([<w>[,<i1>[,<i2>]]])_: switch line wrapping, like the -w
          option of git-shortlog(1).

     *Note*

     Some placeholders may depend on other options given to the
     revision traversal engine. For example, the `%g*' reflog options
     will insert an empty string unless we are traversing reflog
     entries (e.g., by `git log -g'). The `%d' placeholder will use the
     "short" decoration format if `--decorate' was not already provided
     on the command line.

   If you add a `+' (plus sign) after _%_ of a placeholder, a line-feed
is inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.

   If you add a `-' (minus sign) after _%_ of a placeholder, line-feeds
that immediately precede the expansion are deleted if and only if the
placeholder expands to an empty string.

   If you add a ` ` (space) after _%_ of a placeholder, a space is
inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.

   * _tformat:_

     The _tformat:_ format works exactly like _format:_, except that it
     provides "terminator" semantics instead of "separator" semantics.
     In other words, each commit has the message terminator character
     (usually a newline) appended, rather than a separator placed
     between entries.  This means that the final entry of a single-line
     format will be properly terminated with a new line, just as the
     "oneline" format does.  For example:

          $ git log -2 --pretty=format:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973 -- NO NEWLINE

          $ git log -2 --pretty=tformat:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973

     In addition, any unrecognized string that has a `%' in it is
     interpreted as if it has `tformat:' in front of it.  For example,
     these two are equivalent:

          $ git log -2 --pretty=tformat:%h 4da45bef
          $ git log -2 --pretty=%h 4da45bef



EXAMPLES
********

`git show v1.0.0'
     Shows the tag `v1.0.0', along with the object the tags points at.

`git show v1.0.0^{tree}'
     Shows the tree pointed to by the tag `v1.0.0'.

`git show -s --format=%s v1.0.0^{commit}'
     Shows the subject of the commit pointed to by the tag `v1.0.0'.

`git show next~10:Documentation/README'
     Shows the contents of the file `Documentation/README' as they were
     current in the 10th last commit of the branch `next'.

`git show master:Makefile master:t/Makefile'
     Concatenates the contents of said Makefiles in the head of the
     branch `master'.


Discussion
**********

At the core level, git is character encoding agnostic.

   * The pathnames recorded in the index and in the tree objects are
     treated as uninterpreted sequences of non-NUL bytes.  What
     readdir(2) returns are what are recorded and compared with the
     data git keeps track of, which in turn are expected to be what
     lstat(2) and creat(2) accepts.  There is no such thing as pathname
     encoding translation.

   * The contents of the blob objects are uninterpreted sequences of
     bytes.  There is no encoding translation at the core level.

   * The commit log messages are uninterpreted sequences of non-NUL
     bytes.

   Although we encourage that the commit log messages are encoded in
UTF-8, both the core and git Porcelain are designed not to force UTF-8
on projects.  If all participants of a particular project find it more
convenient to use legacy encodings, git does not forbid it.  However,
there are a few things to keep in mind.

  1. _git commit_ and _git commit-tree_ issues a warning if the commit
     log message given to it does not look like a valid UTF-8 string,
     unless you explicitly say your project uses a legacy encoding.
     The way to say this is to have i18n.commitencoding in
     `.git/config' file, like this:

          [i18n]
                  commitencoding = ISO-8859-1

     Commit objects created with the above setting record the value of
     `i18n.commitencoding' in its `encoding' header.  This is to help
     other people who look at them later.  Lack of this header implies
     that the commit log message is encoded in UTF-8.

  2. _git log_, _git show_, _git blame_ and friends look at the
     `encoding' header of a commit object, and try to re-code the log
     message into UTF-8 unless otherwise specified.  You can specify
     the desired output encoding with `i18n.logoutputencoding' in
     `.git/config' file, like this:

          [i18n]
                  logoutputencoding = ISO-8859-1

     If you do not have this configuration variable, the value of
     `i18n.commitencoding' is used instead.

   Note that we deliberately chose not to re-code the commit log
message when a commit is made to force UTF-8 at the commit object
level, because re-coding to UTF-8 is not necessarily a reversible
operation.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-stage,  Up: Top

Name
****

git-stage — Add file contents to the staging area



Synopsis
********

     git stage args…


DESCRIPTION
***********

This is a synonym for git-add(1).  Please refer to the documentation of
that command.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-stash,  Up: Top

Name
****

git-stash — Stash the changes in a dirty working directory away



Synopsis
********

     git stash list [<options>]
     git stash show [<stash>]
     git stash drop [-q|-quiet] [<stash>]
     git stash ( pop | apply ) [-index] [-q|-quiet] [<stash>]
     git stash branch <branchname> [<stash>]
     git stash [save [-patch] [-k|-[no-]keep-index] [-q|-quiet]
                  [-u|-include-untracked] [-a|-all] [<message>]]
     git stash clear
     git stash create


DESCRIPTION
***********

Use `git stash' when you want to record the current state of the
working directory and the index, but want to go back to a clean working
directory.  The command saves your local modifications away and reverts
the working directory to match the `HEAD' commit.

   The modifications stashed away by this command can be listed with
`git stash list', inspected with `git stash show', and restored
(potentially on top of a different commit) with `git stash apply'.
Calling `git stash' without any arguments is equivalent to `git stash
save'.  A stash is by default listed as "WIP on _branchname_ …", but
you can give a more descriptive message on the command line when you
create one.

   The latest stash you created is stored in `refs/stash'; older
stashes are found in the reflog of this reference and can be named using
the usual reflog syntax (e.g. `stash@{0}' is the most recently created
stash, `stash@{1}' is the one before it, `stash@{2.hours.ago}' is also
possible).



OPTIONS
*******

save [-p|-patch] [-[no-]keep-index] [-u|-include-untracked] [-a|-all] [-q|-quiet] [<message>]
     Save your local modifications to a new _stash_, and run `git reset
     --hard' to revert them.  The <message> part is optional and gives
     the description along with the stashed state.  For quickly making
     a snapshot, you can omit _both_ "save" and <message>, but giving
     only <message> does not trigger this action to prevent a misspelled
     subcommand from making an unwanted stash.

     If the `--keep-index' option is used, all changes already added to
     the index are left intact.

     If the `--include-untracked' option is used, all untracked files
     are also stashed and then cleaned up with `git clean', leaving the
     working directory in a very clean state. If the `--all' option is
     used instead then the ignored files are stashed and cleaned in
     addition to the untracked files.

     With `--patch', you can interactively select hunks from the diff
     between HEAD and the working tree to be stashed.  The stash entry
     is constructed such that its index state is the same as the index
     state of your repository, and its worktree contains only the
     changes you selected interactively.  The selected changes are then
     rolled back from your worktree. See the “Interactive Mode”
     section of git-add(1) to learn how to operate the `--patch' mode.

     The `--patch' option implies `--keep-index'.  You can use
     `--no-keep-index' to override this.

list [<options>]
     List the stashes that you currently have.  Each _stash_ is listed
     with its name (e.g. `stash@{0}' is the latest stash, `stash@{1}' is
     the one before, etc.), the name of the branch that was current
     when the stash was made, and a short description of the commit the
     stash was based on.

          stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation
          stash@{1}: On master: 9cc0589... Add git-stash

     The command takes options applicable to the _git log_ command to
     control what is shown and how. See git-log(1).

show [<stash>]
     Show the changes recorded in the stash as a diff between the
     stashed state and its original parent. When no `<stash>' is given,
     shows the latest one. By default, the command shows the diffstat,
     but it will accept any format known to _git diff_ (e.g., `git
     stash show -p stash@{1}' to view the second most recent stash in
     patch form).

pop [-index] [-q|-quiet] [<stash>]
     Remove a single stashed state from the stash list and apply it on
     top of the current working tree state, i.e., do the inverse
     operation of `git stash save'. The working directory must match
     the index.

     Applying the state can fail with conflicts; in this case, it is not
     removed from the stash list. You need to resolve the conflicts by
     hand and call `git stash drop' manually afterwards.

     If the `--index' option is used, then tries to reinstate not only
     the working tree’s changes, but also the index’s ones.
     However, this can fail, when you have conflicts (which are stored
     in the index, where you therefore can no longer apply the changes
     as they were originally).

     When no `<stash>' is given, `stash@{0}' is assumed, otherwise
     `<stash>' must be a reference of the form `stash@{<revision>}'.

apply [-index] [-q|-quiet] [<stash>]
     Like `pop', but do not remove the state from the stash list.
     Unlike `pop', `<stash>' may be any commit that looks like a commit
     created by `stash save' or `stash create'.

branch <branchname> [<stash>]
     Creates and checks out a new branch named `<branchname>' starting
     from the commit at which the `<stash>' was originally created,
     applies the changes recorded in `<stash>' to the new working tree
     and index.  If that succeeds, and `<stash>' is a reference of the
     form `stash@{<revision>}', it then drops the `<stash>'. When no
     `<stash>' is given, applies the latest one.

     This is useful if the branch on which you ran `git stash save' has
     changed enough that `git stash apply' fails due to conflicts. Since
     the stash is applied on top of the commit that was HEAD at the time
     `git stash' was run, it restores the originally stashed state with
     no conflicts.

clear
     Remove all the stashed states. Note that those states will then be
     subject to pruning, and may be impossible to recover (see
     _Examples_ below for a possible strategy).

drop [-q|-quiet] [<stash>]
     Remove a single stashed state from the stash list. When no
     `<stash>' is given, it removes the latest one. i.e. `stash@{0}',
     otherwise `<stash>' must a valid stash log reference of the form
     `stash@{<revision>}'.

create
     Create a stash (which is a regular commit object) and return its
     object name, without storing it anywhere in the ref namespace.


DISCUSSION
**********

A stash is represented as a commit whose tree records the state of the
working directory, and its first parent is the commit at `HEAD' when
the stash was created.  The tree of the second parent records the state
of the index when the stash is made, and it is made a child of the
`HEAD' commit.  The ancestry graph looks like this:

            .----W
           /    /
     -----H----I

   where `H' is the `HEAD' commit, `I' is a commit that records the
state of the index, and `W' is a commit that records the state of the
working tree.



EXAMPLES
********

Pulling into a dirty tree
     When you are in the middle of something, you learn that there are
     upstream changes that are possibly relevant to what you are doing.
     When your local changes do not conflict with the changes in the
     upstream, a simple `git pull' will let you move forward.

     However, there are cases in which your local changes do conflict
     with the upstream changes, and `git pull' refuses to overwrite your
     changes.  In such a case, you can stash your changes away, perform
     a pull, and then unstash, like this:

          $ git pull
           ...
          file foobar not up to date, cannot merge.
          $ git stash
          $ git pull
          $ git stash pop

Interrupted workflow
     When you are in the middle of something, your boss comes in and
     demands that you fix something immediately.  Traditionally, you
     would make a commit to a temporary branch to store your changes
     away, and return to your original branch to make the emergency
     fix, like this:

          # ... hack hack hack ...
          $ git checkout -b my_wip
          $ git commit -a -m "WIP"
          $ git checkout master
          $ edit emergency fix
          $ git commit -a -m "Fix in a hurry"
          $ git checkout my_wip
          $ git reset --soft HEAD^
          # ... continue hacking ...

     You can use _git stash_ to simplify the above, like this:

          # ... hack hack hack ...
          $ git stash
          $ edit emergency fix
          $ git commit -a -m "Fix in a hurry"
          $ git stash pop
          # ... continue hacking ...

Testing partial commits
     You can use `git stash save --keep-index' when you want to make
     two or more commits out of the changes in the work tree, and you
     want to test each change before committing:

          # ... hack hack hack ...
          $ git add --patch foo            # add just first part to the index
          $ git stash save --keep-index    # save all other changes to the stash
          $ edit/build/test first part
          $ git commit -m 'First part'     # commit fully tested change
          $ git stash pop                  # prepare to work on all other changes
          # ... repeat above five steps until one commit remains ...
          $ edit/build/test remaining parts
          $ git commit foo -m 'Remaining parts'

Recovering stashes that were cleared/dropped erroneously
     If you mistakenly drop or clear stashes, they cannot be recovered
     through the normal safety mechanisms.  However, you can try the
     following incantation to get a list of stashes that are still in
     your repository, but not reachable any more:

          git fsck --unreachable |
          grep commit | cut -d\  -f3 |
          xargs git log --merges --no-walk --grep=WIP



SEE ALSO
********

git-checkout(1), git-commit(1), git-reflog(1), git-reset(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-status,  Up: Top

Name
****

git-status — Show the working tree status



Synopsis
********

     git status [<options>…] [-] [<pathspec>…]


DESCRIPTION
***********

Displays paths that have differences between the index file and the
current HEAD commit, paths that have differences between the working
tree and the index file, and paths in the working tree that are not
tracked by git (and are not ignored by gitignore(5)). The first are
what you _would_ commit by running `git commit'; the second and third
are what you _could_ commit by running _git add_ before running `git
commit'.



OPTIONS
*******

-s
-short
     Give the output in the short-format.

-b
-branch
     Show the branch and tracking info even in short-format.

-porcelain
     Give the output in an easy-to-parse format for scripts.  This is
     similar to the short output, but will remain stable across git
     versions and regardless of user configuration. See below for
     details.

-u[<mode>]
-untracked-files[=<mode>]
     Show untracked files.

     The mode parameter is optional (defaults to _all_), and is used to
     specify the handling of untracked files; when -u is not used, the
     default is _normal_, i.e. show untracked files and directories.

     The possible options are:

        * _no_     - Show no untracked files

        * _normal_ - Shows untracked files and directories

        * _all_    - Also shows individual files in untracked
          directories.

          The default can be changed using the status.showUntrackedFiles
          configuration variable documented in git-config(1).

-ignore-submodules[=<when>]
     Ignore changes to submodules when looking for changes. <when> can
     be either "none", "untracked", "dirty" or "all", which is the
     default.  Using "none" will consider the submodule modified when
     it either contains untracked or modified files or its HEAD differs
     from the commit recorded in the superproject and can be used to
     override any settings of the _ignore_ option in git-config(1) or
     gitmodules(5). When "untracked" is used submodules are not
     considered dirty when they only contain untracked content (but
     they are still scanned for modified content). Using "dirty"
     ignores all changes to the work tree of submodules, only changes
     to the commits stored in the superproject are shown (this was the
     behavior before 1.7.0). Using "all" hides all changes to submodules
     (and suppresses the output of submodule summaries when the config
     option `status.submodulesummary' is set).

-ignored
     Show ignored files as well.

-z
     Terminate entries with NUL, instead of LF.  This implies the
     `--porcelain' output format if no other format is given.

-column[=<options>]
-no-column
     Display untracked files in columns. See configuration variable
     column.status for option syntax.`--column' and `--no-column'
     without options are equivalent to _always_ and _never_
     respectively.


OUTPUT
******

The output from this command is designed to be used as a commit
template comment, and all the output lines are prefixed with _#_.  The
default, long format, is designed to be human readable, verbose and
descriptive.  Its contents and format are subject to change at any time.

   The paths mentioned in the output, unlike many other git commands,
are made relative to the current directory if you are working in a
subdirectory (this is on purpose, to help cutting and pasting). See the
status.relativePaths config option below.



Short Format
============

In the short-format, the status of each path is shown as

     XY PATH1 -> PATH2

   where `PATH1' is the path in the `HEAD', and the " `-> PATH2'" part
is shown only when `PATH1' corresponds to a different path in the
index/worktree (i.e. the file is renamed). The _XY_ is a two-letter
status code.

   The fields (including the `->') are separated from each other by a
single space. If a filename contains whitespace or other nonprintable
characters, that field will be quoted in the manner of a C string
literal: surrounded by ASCII double quote (34) characters, and with
interior special characters backslash-escaped.

   For paths with merge conflicts, `X' and _Y_ show the modification
states of each side of the merge. For paths that do not have merge
conflicts, `X' shows the status of the index, and `Y' shows the status
of the work tree.  For untracked paths, `XY' are `??'.  Other status
codes can be interpreted as follows:

   * ' ' = unmodified

   * _M_ = modified

   * _A_ = added

   * _D_ = deleted

   * _R_ = renamed

   * _C_ = copied

   * _U_ = updated but unmerged

   Ignored files are not listed, unless `--ignored' option is in effect,
in which case `XY' are `!!'.

     X          Y     Meaning
     -------------------------------------------------
               [MD]   not updated
     M        [ MD]   updated in index
     A        [ MD]   added to index
     D         [ M]   deleted from index
     R        [ MD]   renamed in index
     C        [ MD]   copied in index
     [MARC]           index and work tree matches
     [ MARC]     M    work tree changed since index
     [ MARC]     D    deleted in work tree
     -------------------------------------------------
     D           D    unmerged, both deleted
     A           U    unmerged, added by us
     U           D    unmerged, deleted by them
     U           A    unmerged, added by them
     D           U    unmerged, deleted by us
     A           A    unmerged, both added
     U           U    unmerged, both modified
     -------------------------------------------------
     ?           ?    untracked
     !           !    ignored
     -------------------------------------------------

   If -b is used the short-format status is preceded by a line

   ## branchname tracking info



Porcelain Format
================

The porcelain format is similar to the short format, but is guaranteed
not to change in a backwards-incompatible way between git versions or
based on user configuration. This makes it ideal for parsing by scripts.
The description of the short format above also describes the porcelain
format, with a few exceptions:

  1. The user’s color.status configuration is not respected; color
     will always be off.

  2. The user’s status.relativePaths configuration is not respected;
     paths shown will always be relative to the repository root.

   There is also an alternate -z format recommended for machine
parsing. In that format, the status field is the same, but some other
things change.  First, the _->_ is omitted from rename entries and the
field order is reversed (e.g _from -> to_ becomes _to from_). Second, a
NUL (ASCII 0) follows each filename, replacing space as a field
separator and the terminating newline (but a space still separates the
status field from the first filename).  Third, filenames containing
special characters are not specially formatted; no quoting or
backslash-escaping is performed.



CONFIGURATION
*************

The command honors `color.status' (or `status.color' — they mean
the same thing and the latter is kept for backward compatibility) and
`color.status.<slot>' configuration variables to colorize its output.

   If the config variable `status.relativePaths' is set to false, then
all paths shown are relative to the repository root, not to the current
directory.

   If `status.submodulesummary' is set to a non zero number or true
(identical to -1 or an unlimited number), the submodule summary will be
enabled for the long format and a summary of commits for modified
submodules will be shown (see -summary-limit option of
git-submodule(1)).



SEE ALSO
********

gitignore(5)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-stripspace,  Up: Top

Name
****

git-stripspace — Remove unnecessary whitespace



Synopsis
********

     git stripspace [-s | -strip-comments] < input


DESCRIPTION
***********

Clean the input in the manner used by _git_ for text such as commit
messages, notes, tags and branch descriptions.

   With no arguments, this will:

   * remove trailing whitespace from all lines

   * collapse multiple consecutive empty lines into one empty line

   * remove empty lines from the beginning and end of the input

   * add a missing _\n_ to the last line if necessary.

   In the case where the input consists entirely of whitespace
characters, no output will be produced.

   *NOTE*: This is intended for cleaning metadata, prefer the
`--whitespace=fix' mode of git-apply(1) for correcting whitespace of
patches or files in the repository.



OPTIONS
*******

-s
-strip-comments
     Skip and remove all lines starting with _#_.


EXAMPLES
********

Given the following noisy input with _$_ indicating the end of a line:

     |A brief introduction   $
     |   $
     |$
     |A new paragraph$
     |# with a commented-out line    $
     |explaining lots of stuff.$
     |$
     |# An old paragraph, also commented-out. $
     |      $
     |The end.$
     |  $

   Use _git stripspace_ with no arguments to obtain:

     |A brief introduction$
     |$
     |A new paragraph$
     |# with a commented-out line$
     |explaining lots of stuff.$
     |$
     |# An old paragraph, also commented-out.$
     |$
     |The end.$

   Use _git stripspace -strip-comments_ to obtain:

     |A brief introduction$
     |$
     |A new paragraph$
     |explaining lots of stuff.$
     |$
     |The end.$


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-submodule,  Up: Top

Name
****

git-submodule — Initialize, update or inspect submodules



Synopsis
********

     git submodule [-quiet] add [-b branch] [-f|-force]
                   [-reference <repository>] [-] <repository> [<path>]
     git submodule [-quiet] status [-cached] [-recursive] [-] [<path>…]
     git submodule [-quiet] init [-] [<path>…]
     git submodule [-quiet] update [-init] [-N|-no-fetch] [-rebase]
                   [-reference <repository>] [-merge] [-recursive] [-] [<path>…]
     git submodule [-quiet] summary [-cached|-files] [(-n|-summary-limit) <n>]
                   [commit] [-] [<path>…]
     git submodule [-quiet] foreach [-recursive] <command>
     git submodule [-quiet] sync [-] [<path>…]


DESCRIPTION
***********

Submodules allow foreign repositories to be embedded within a dedicated
subdirectory of the source tree, always pointed at a particular commit.

   They are not to be confused with remotes, which are meant mainly for
branches of the same project; submodules are meant for different
projects you would like to make part of your source tree, while the
history of the two projects still stays completely independent and you
cannot modify the contents of the submodule from within the main
project.  If you want to merge the project histories and want to treat
the aggregated whole as a single project from then on, you may want to
add a remote for the other project and use the _subtree_ merge strategy,
instead of treating the other project as a submodule. Directories that
come from both projects can be cloned and checked out as a whole if you
choose to go that route.

   Submodules are composed from a so-called `gitlink' tree entry in the
main repository that refers to a particular commit object within the
inner repository that is completely separate.  A record in the
`.gitmodules' (see gitmodules(5)) file at the root of the source tree
assigns a logical name to the submodule and describes the default URL
the submodule shall be cloned from.  The logical name can be used for
overriding this URL within your local repository configuration (see
_submodule init_).

   This command will manage the tree entries and contents of the
gitmodules file for you, as well as inspect the status of your
submodules and update them.  When adding a new submodule to the tree,
the _add_ subcommand is to be used.  However, when pulling a tree
containing submodules, these will not be checked out by default; the
_init_ and _update_ subcommands will maintain submodules checked out
and at appropriate revision in your working tree.  You can briefly
inspect the up-to-date status of your submodules using the _status_
subcommand and get a detailed overview of the difference between the
index and checkouts using the _summary_ subcommand.



COMMANDS
********

add
     Add the given repository as a submodule at the given path to the
     changeset to be committed next to the current project: the current
     project is termed the "superproject".

     This requires at least one argument: <repository>. The optional
     argument <path> is the relative location for the cloned submodule
     to exist in the superproject. If <path> is not given, the
     "humanish" part of the source repository is used ("repo" for
     "/path/to/repo.git" and "foo" for "host.xz:foo/.git").

     <repository> is the URL of the new submodule’s origin repository.
     This may be either an absolute URL, or (if it begins with ./ or
     ../), the location relative to the superproject’s origin
     repository (Please note that to specify a repository _foo.git_
     which is located right next to a superproject _bar.git_, you’ll
     have to use _../foo.git_ instead of _./foo.git_ - as one might
     expect when following the rules for relative URLs - because the
     evaluation of relative URLs in Git is identical to that of
     relative directories).  If the superproject doesn’t have an
     origin configured the superproject is its own authoritative
     upstream and the current working directory is used instead.

     <path> is the relative location for the cloned submodule to exist
     in the superproject. If <path> does not exist, then the submodule
     is created by cloning from the named URL. If <path> does exist and
     is already a valid git repository, then this is added to the
     changeset without cloning. This second form is provided to ease
     creating a new submodule from scratch, and presumes the user will
     later push the submodule to the given URL.

     In either case, the given URL is recorded into .gitmodules for use
     by subsequent users cloning the superproject. If the URL is given
     relative to the superproject’s repository, the presumption is
     the superproject and submodule repositories will be kept together
     in the same relative location, and only the superproject’s URL
     needs to be provided: git-submodule will correctly locate the
     submodule using the relative URL in .gitmodules.

status
     Show the status of the submodules. This will print the SHA-1 of the
     currently checked out commit for each submodule, along with the
     submodule path and the output of _git describe_ for the SHA-1.
     Each SHA-1 will be prefixed with `-' if the submodule is not
     initialized, `+' if the currently checked out submodule commit
     does not match the SHA-1 found in the index of the containing
     repository and `U' if the submodule has merge conflicts.  This
     command is the default command for _git submodule_.

     If `--recursive' is specified, this command will recurse into
     nested submodules, and show their status as well.

     If you are only interested in changes of the currently initialized
     submodules with respect to the commit recorded in the index or the
     HEAD, git-status(1) and git-diff(1) will provide that information
     too (and can also report changes to a submodule’s work tree).

init
     Initialize the submodules, i.e. register each submodule name and
     url found in .gitmodules into .git/config.  It will also copy the
     value of `submodule.$name.update' into .git/config.  The key used
     in .git/config is `submodule.$name.url'.  This command does not
     alter existing information in .git/config.  You can then customize
     the submodule clone URLs in .git/config for your local setup and
     proceed to `git submodule update'; you can also just use `git
     submodule update --init' without the explicit _init_ step if you
     do not intend to customize any submodule locations.

update
     Update the registered submodules, i.e. clone missing submodules and
     checkout the commit specified in the index of the containing
     repository.  This will make the submodules HEAD be detached unless
     `--rebase' or `--merge' is specified or the key
     `submodule.$name.update' is set to `rebase', `merge' or `none'.
     `none' can be overridden by specifying `--checkout'.

     If the submodule is not yet initialized, and you just want to use
     the setting as stored in .gitmodules, you can automatically
     initialize the submodule with the `--init' option.

     If `--recursive' is specified, this command will recurse into the
     registered submodules, and update any nested submodules within.

     If `--force' is specified, the submodule will be checked out (using
     `git checkout --force' if appropriate), even if the commit
     specified in the index of the containing repository already
     matches the commit checked out in the submodule.

summary
     Show commit summary between the given commit (defaults to HEAD) and
     working tree/index. For a submodule in question, a series of
     commits in the submodule between the given super project commit
     and the index or working tree (switched by `--cached') are shown.
     If the option `--files' is given, show the series of commits in
     the submodule between the index of the super project and the
     working tree of the submodule (this option doesn’t allow to use
     the `--cached' option or to provide an explicit commit).

     Using the `--submodule=log' option with git-diff(1) will provide
     that information too.

foreach
     Evaluates an arbitrary shell command in each checked out submodule.
     The command has access to the variables $name, $path, $sha1 and
     $toplevel: $name is the name of the relevant submodule section in
     .gitmodules, $path is the name of the submodule directory relative
     to the superproject, $sha1 is the commit as recorded in the
     superproject, and $toplevel is the absolute path to the top-level
     of the superproject.  Any submodules defined in the superproject
     but not checked out are ignored by this command. Unless given
     `--quiet', foreach prints the name of each submodule before
     evaluating the command.  If `--recursive' is given, submodules are
     traversed recursively (i.e.  the given shell command is evaluated
     in nested submodules as well).  A non-zero return from the command
     in any submodule causes the processing to terminate. This can be
     overridden by adding _|| :_ to the end of the command.

     As an example, `git submodule foreach 'echo $path `git rev-parse
     HEAD`'' will show the path and currently checked out commit for
     each submodule.

sync
     Synchronizes submodules' remote URL configuration setting to the
     value specified in .gitmodules. It will only affect those
     submodules which already have a URL entry in .git/config (that is
     the case when they are initialized or freshly added). This is
     useful when submodule URLs change upstream and you need to update
     your local repositories accordingly.

     "git submodule sync" synchronizes all submodules while "git
     submodule sync - A" synchronizes submodule "A" only.


OPTIONS
*******

-q
-quiet
     Only print error messages.

-b
-branch
     Branch of repository to add as submodule.

-f
-force
     This option is only valid for add and update commands.  When
     running add, allow adding an otherwise ignored submodule path.
     When running update, throw away local changes in submodules when
     switching to a different commit; and always run a checkout
     operation in the submodule, even if the commit listed in the index
     of the containing repository matches the commit checked out in the
     submodule.

-cached
     This option is only valid for status and summary commands.  These
     commands typically use the commit found in the submodule HEAD, but
     with this option, the commit stored in the index is used instead.

-files
     This option is only valid for the summary command. This command
     compares the commit in the index with that in the submodule HEAD
     when this option is used.

-n
-summary-limit
     This option is only valid for the summary command.  Limit the
     summary size (number of commits shown in total).  Giving 0 will
     disable the summary; a negative number means unlimited (the
     default). This limit only applies to modified submodules. The size
     is always limited to 1 for added/deleted/typechanged submodules.

-N
-no-fetch
     This option is only valid for the update command.  Don’t fetch
     new objects from the remote site.

-merge
     This option is only valid for the update command.  Merge the
     commit recorded in the superproject into the current branch of the
     submodule. If this option is given, the submodule’s HEAD will
     not be detached. If a merge failure prevents this process, you will
     have to resolve the resulting conflicts within the submodule with
     the usual conflict resolution tools.  If the key
     `submodule.$name.update' is set to `merge', this option is
     implicit.

-rebase
     This option is only valid for the update command.  Rebase the
     current branch onto the commit recorded in the superproject. If
     this option is given, the submodule’s HEAD will not be detached.
     If a merge failure prevents this process, you will have to resolve
     these failures with git-rebase(1).  If the key
     `submodule.$name.update' is set to `rebase', this option is
     implicit.

-init
     This option is only valid for the update command.  Initialize all
     submodules for which "git submodule init" has not been called so
     far before updating.

-reference <repository>
     This option is only valid for add and update commands.  These
     commands sometimes need to clone a remote repository. In this case,
     this option will be passed to the git-clone(1) command.

     *NOTE*: Do *not* use this option unless you have read the note for
     git-clone(1)'s `--reference' and `--shared' options carefully.

-recursive
     This option is only valid for foreach, update and status commands.
     Traverse submodules recursively. The operation is performed not
     only in the submodules of the current repo, but also in any nested
     submodules inside those submodules (and so on).

<path>…
     Paths to submodule(s). When specified this will restrict the
     command to only operate on the submodules found at the specified
     paths.  (This argument is required with add).


FILES
*****

When initializing submodules, a .gitmodules file in the top-level
directory of the containing repository is used to find the url of each
submodule.  This file should be formatted in the same way as
`$GIT_DIR/config'. The key to each submodule url is
"submodule.$name.url".  See gitmodules(5) for details.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-svn,  Up: Top

Name
****

git-svn — Bidirectional operation between a Subversion repository and
git



Synopsis
********

     git svn <command> [options] [arguments]


DESCRIPTION
***********

_git svn_ is a simple conduit for changesets between Subversion and git.
It provides a bidirectional flow of changes between a Subversion and a
git repository.

   _git svn_ can track a standard Subversion repository, following the
common "trunk/branches/tags" layout, with the -stdlayout option.  It
can also follow branches and tags in any layout with the -T/-t/-b
options (see options to _init_ below, and also the _clone_ command).

   Once tracking a Subversion repository (with any of the above
methods), the git repository can be updated from Subversion by the
_fetch_ command and Subversion updated from git by the _dcommit_
command.



COMMANDS
********

_init_
     Initializes an empty git repository with additional metadata
     directories for _git svn_.  The Subversion URL may be specified as
     a command-line argument, or as full URL arguments to -T/-t/-b.
     Optionally, the target directory to operate on can be specified as
     a second argument.  Normally this command initializes the current
     directory.

    -T<trunk_subdir>
    -trunk=<trunk_subdir>
    -t<tags_subdir>
    -tags=<tags_subdir>
    -b<branches_subdir>
    -branches=<branches_subdir>
    -s
    -stdlayout
          These are optional command-line options for init.  Each of
          these flags can point to a relative repository path
          (-tags=project/tags) or a full url
          (-tags=https://foo.org/project/tags).  You can specify more
          than one -tags and/or -branches options, in case your
          Subversion repository places tags or branches under multiple
          paths.  The option -stdlayout is a shorthand way of setting
          trunk,tags,branches as the relative paths, which is the
          Subversion default. If any of the other options are given as
          well, they take precedence.

    -no-metadata
          Set the _noMetadata_ option in the [svn-remote] config.  This
          option is not recommended, please read the _svn.noMetadata_
          section of this manpage before using this option.

    -use-svm-props
          Set the _useSvmProps_ option in the [svn-remote] config.

    -use-svnsync-props
          Set the _useSvnsyncProps_ option in the [svn-remote] config.

    -rewrite-root=<URL>
          Set the _rewriteRoot_ option in the [svn-remote] config.

    -rewrite-uuid=<UUID>
          Set the _rewriteUUID_ option in the [svn-remote] config.

    -username=<user>
          For transports that SVN handles authentication for (http,
          https, and plain svn), specify the username.  For other
          transports (eg svn+ssh://), you must include the username in
          the URL, eg svn+ssh://foo@svn.bar.com/project

    -prefix=<prefix>
          This allows one to specify a prefix which is prepended to the
          names of remotes if trunk/branches/tags are specified.  The
          prefix does not automatically include a trailing slash, so be
          sure you include one in the argument if that is what you
          want.  If -branches/-b is specified, the prefix must include
          a trailing slash.  Setting a prefix is useful if you wish to
          track multiple projects that share a common repository.

    -ignore-paths=<regex>
          When passed to _init_ or _clone_ this regular expression will
          be preserved as a config key.  See _fetch_ for a description
          of _-ignore-paths_.

    -no-minimize-url
          When tracking multiple directories (using -stdlayout,
          -branches, or -tags options), git svn will attempt to connect
          to the root (or highest allowed level) of the Subversion
          repository.  This default allows better tracking of history if
          entire projects are moved within a repository, but may cause
          issues on repositories where read access restrictions are in
          place.  Passing _-no-minimize-url_ will allow git svn to
          accept URLs as-is without attempting to connect to a higher
          level directory.  This option is off by default when only one
          URL/branch is tracked (it would do little good).

_fetch_
     Fetch unfetched revisions from the Subversion remote we are
     tracking.  The name of the [svn-remote "…"] section in the
     .git/config file may be specified as an optional command-line
     argument.

    -localtime
          Store Git commit times in the local timezone instead of UTC.
          This makes _git log_ (even without -date=local) show the same
          times that `svn log' would in the local timezone.

          This doesn’t interfere with interoperating with the
          Subversion repository you cloned from, but if you wish for
          your local Git repository to be able to interoperate with
          someone else’s local Git repository, either don’t use
          this option or you should both use it in the same local
          timezone.

    -parent
          Fetch only from the SVN parent of the current HEAD.

    -ignore-paths=<regex>
          This allows one to specify a Perl regular expression that will
          cause skipping of all matching paths from checkout from SVN.
          The _-ignore-paths_ option should match for every _fetch_
          (including automatic fetches due to _clone_, _dcommit_,
          _rebase_, etc) on a given repository.

               config key: svn-remote.<name>.ignore-paths

          If the ignore-paths config key is set and the command line
          option is also given, both regular expressions will be used.

          Examples:

         Skip "doc*" directory for every fetch
                    --ignore-paths="^doc"

         Skip "branches" and "tags" of first level directories
                    --ignore-paths="^[^/]+/(?:branches|tags)"


_clone_
     Runs _init_ and _fetch_.  It will automatically create a directory
     based on the basename of the URL passed to it; or if a second
     argument is passed; it will create a directory and work within
     that.  It accepts all arguments that the _init_ and _fetch_
     commands accept; with the exception of _-fetch-all_ and _-parent_.
     After a repository is cloned, the _fetch_ command will be able to
     update revisions without affecting the working tree; and the
     _rebase_ command will be able to update the working tree with the
     latest changes.

    -preserve-empty-dirs
          Create a placeholder file in the local Git repository for each
          empty directory fetched from Subversion.  This includes
          directories that become empty by removing all entries in the
          Subversion repository (but not the directory itself).  The
          placeholder files are also tracked and removed when no longer
          necessary.

    -placeholder-filename=<filename>
          Set the name of placeholder files created by
          -preserve-empty-dirs.  Default: ".gitignore"

_rebase_
     This fetches revisions from the SVN parent of the current HEAD and
     rebases the current (uncommitted to SVN) work against it.

     This works similarly to `svn update' or _git pull_ except that it
     preserves linear history with _git rebase_ instead of _git merge_
     for ease of dcommitting with _git svn_.

     This accepts all options that _git svn fetch_ and _git rebase_
     accept.  However, _-fetch-all_ only fetches from the current
     [svn-remote], and not all [svn-remote] definitions.

     Like _git rebase_; this requires that the working tree be clean
     and have no uncommitted changes.

    -l
    -local
          Do not fetch remotely; only run _git rebase_ against the last
          fetched commit from the upstream SVN.

_dcommit_
     Commit each diff from the current branch directly to the SVN
     repository, and then rebase or reset (depending on whether or not
     there is a diff between SVN and head).  This will create a
     revision in SVN for each commit in git.

     When an optional git branch name (or a git commit object name) is
     specified as an argument, the subcommand works on the specified
     branch, not on the current branch.

     Use of _dcommit_ is preferred to _set-tree_ (below).

    -no-rebase
          After committing, do not rebase or reset.

    -commit-url <URL>
          Commit to this SVN URL (the full path).  This is intended to
          allow existing _git svn_ repositories created with one
          transport method (e.g. `svn://' or `http://' for anonymous
          read) to be reused if a user is later given access to an
          alternate transport method (e.g. `svn+ssh://' or `https://')
          for commit.

               config key: svn-remote.<name>.commiturl
               config key: svn.commiturl (overwrites all svn-remote.<name>.commiturl options)

          Using this option for any other purpose (don’t ask) is very
          strongly discouraged.

    -mergeinfo=<mergeinfo>
          Add the given merge information during the dcommit (e.g.
          `--mergeinfo="/branches/foo:1-10"'). All svn server versions
          can store this information (as a property), and svn clients
          starting from version 1.5 can make use of it. To specify
          merge information from multiple branches, use a single space
          character between the branches
          (`--mergeinfo="/branches/foo:1-10 /branches/bar:3,5-6,8"')

               config key: svn.pushmergeinfo

          This option will cause git-svn to attempt to automatically
          populate the svn:mergeinfo property in the SVN repository
          when possible. Currently, this can only be done when
          dcommitting non-fast-forward merges where all parents but the
          first have already been pushed into SVN.

    -interactive
          Ask the user to confirm that a patch set should actually be
          sent to SVN.  For each patch, one may answer "yes" (accept
          this patch), "no" (discard this patch), "all" (accept all
          patches), or "quit".  _git svn dcommit_ returns immediately
          if answer if "no" or "quit", without commiting anything to
          SVN.

_branch_
     Create a branch in the SVN repository.

    -m
    -message
          Allows to specify the commit message.

    -t
    -tag
          Create a tag by using the tags_subdir instead of the
          branches_subdir specified during git svn init.

    -d
    -destination
          If more than one -branches (or -tags) option was given to the
          _init_ or _clone_ command, you must provide the location of
          the branch (or tag) you wish to create in the SVN repository.
          The value of this option must match one of the paths
          specified by a -branches (or -tags) option.  You can see
          these paths with the commands

               git config --get-all svn-remote.<name>.branches
               git config --get-all svn-remote.<name>.tags

          where <name> is the name of the SVN repository as specified
          by the -R option to _init_ (or "svn" by default).

    -username
          Specify the SVN username to perform the commit as.  This
          option overrides the _username_ configuration property.

    -commit-url
          Use the specified URL to connect to the destination Subversion
          repository.  This is useful in cases where the source SVN
          repository is read-only.  This option overrides configuration
          property _commiturl_.

               git config --get-all svn-remote.<name>.commiturl

_tag_
     Create a tag in the SVN repository. This is a shorthand for
     _branch -t_.

_log_
     This should make it easy to look up svn log messages when svn
     users refer to -r/-revision numbers.

     The following features from ‘svn log’ are supported:

    -r <n>[:<n>]
    -revision=<n>[:<n>]
          is supported, non-numeric args are not: HEAD, NEXT, BASE,
          PREV, etc …

    -v
    -verbose
          it’s not completely compatible with the -verbose output in
          svn log, but reasonably close.

    -limit=<n>
          is NOT the same as -max-count, doesn’t count
          merged/excluded commits

    -incremental
          supported

     New features:

    -show-commit
          shows the git commit sha1, as well

    -oneline
          our version of -pretty=oneline

          *Note*

          SVN itself only stores times in UTC and nothing else. The
          regular svn client converts the UTC time to the local time
          (or based on the TZ= environment). This command has the same
          behaviour.

     Any other arguments are passed directly to _git log_

_blame_
     Show what revision and author last modified each line of a file.
     The output of this mode is format-compatible with the output of
     ‘svn blame’ by default. Like the SVN blame command, local
     uncommitted changes in the working tree are ignored; the version
     of the file in the HEAD revision is annotated. Unknown arguments
     are passed directly to _git blame_.

    -git-format
          Produce output in the same format as _git blame_, but with
          SVN revision numbers instead of git commit hashes. In this
          mode, changes that haven’t been committed to SVN (including
          local working-copy edits) are shown as revision 0.

_find-rev_
     When given an SVN revision number of the form _rN_, returns the
     corresponding git commit hash (this can optionally be followed by a
     tree-ish to specify which branch should be searched).  When given a
     tree-ish, returns the corresponding SVN revision number.

_set-tree_
     You should consider using _dcommit_ instead of this command.
     Commit specified commit or tree objects to SVN.  This relies on
     your imported fetch data being up-to-date.  This makes absolutely
     no attempts to do patching when committing to SVN, it simply
     overwrites files with those specified in the tree or commit.  All
     merging is assumed to have taken place independently of _git svn_
     functions.

_create-ignore_
     Recursively finds the svn:ignore property on directories and
     creates matching .gitignore files. The resulting files are staged
     to be committed, but are not committed. Use -r/-revision to refer
     to a specific revision.

_show-ignore_
     Recursively finds and lists the svn:ignore property on
     directories.  The output is suitable for appending to the
     $GIT_DIR/info/exclude file.

_mkdirs_
     Attempts to recreate empty directories that core git cannot track
     based on information in $GIT_DIR/svn/<refname>/unhandled.log files.
     Empty directories are automatically recreated when using "git svn
     clone" and "git svn rebase", so "mkdirs" is intended for use after
     commands like "git checkout" or "git reset".  (See the
     svn-remote.<name>.automkdirs config file option for more
     information.)

_commit-diff_
     Commits the diff of two tree-ish arguments from the command-line.
     This command does not rely on being inside an `git svn init'-ed
     repository.  This command takes three arguments, (a) the original
     tree to diff against, (b) the new tree result, (c) the URL of the
     target Subversion repository.  The final argument (URL) may be
     omitted if you are working from a _git svn_-aware repository (that
     has been `init'-ed with _git svn_).  The -r<revision> option is
     required for this.

_info_
     Shows information about a file or directory similar to what ‘svn
     info’ provides.  Does not currently support a -r/-revision
     argument.  Use the -url option to output only the value of the
     _URL:_ field.

_proplist_
     Lists the properties stored in the Subversion repository about a
     given file or directory.  Use -r/-revision to refer to a specific
     Subversion revision.

_propget_
     Gets the Subversion property given as the first argument, for a
     file.  A specific revision can be specified with -r/-revision.

_show-externals_
     Shows the Subversion externals.  Use -r/-revision to specify a
     specific revision.

_gc_
     Compress $GIT_DIR/svn/<refname>/unhandled.log files in .git/svn
     and remove $GIT_DIR/svn/<refname>index files in .git/svn.

_reset_
     Undoes the effects of _fetch_ back to the specified revision.
     This allows you to re-_fetch_ an SVN revision.  Normally the
     contents of an SVN revision should never change and _reset_ should
     not be necessary.  However, if SVN permissions change, or if you
     alter your -ignore-paths option, a _fetch_ may fail with "not
     found in commit" (file not previously visible) or "checksum
     mismatch" (missed a modification).  If the problem file cannot be
     ignored forever (with -ignore-paths) the only way to repair the
     repo is to use _reset_.

     Only the rev_map and refs/remotes/git-svn are changed.  Follow
     _reset_ with a _fetch_ and then _git reset_ or _git rebase_ to
     move local branches onto the new tree.

    -r <n>
    -revision=<n>
          Specify the most recent revision to keep.  All later revisions
          are discarded.

    -p
    -parent
          Discard the specified revision as well, keeping the nearest
          parent instead.

    Example:
          Assume you have local changes in "master", but you need to
          refetch "r2".

                   r1---r2---r3 remotes/git-svn
                               \
                                A---B master

          Fix the ignore-paths or SVN permissions problem that caused
          "r2" to be incomplete in the first place.  Then:

               git svn reset -r2 -p
               git svn fetch

                   r1---r2'--r3' remotes/git-svn
                     \
                      r2---r3---A---B master

          Then fixup "master" with _git rebase_.  Do NOT use _git
          merge_ or your history will not be compatible with a future
          _dcommit_!

               git rebase -onto remotes/git-svn A^ master

                   r1---r2'--r3' remotes/git-svn
                               \
                                A'--B' master



OPTIONS
*******

-shared[=(false|true|umask|group|all|world|everybody)]
-template=<template_directory>
     Only used with the _init_ command.  These are passed directly to
     _git init_.

-r <arg>
-revision <arg>
     Used with the _fetch_ command.

     This allows revision ranges for partial/cauterized history to be
     supported.  $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges),
     $NUMBER:HEAD, and BASE:$NUMBER are all supported.

     This can allow you to make partial mirrors when running fetch; but
     is generally not recommended because history will be skipped and
     lost.

-
-stdin
     Only used with the _set-tree_ command.

     Read a list of commits from stdin and commit them in reverse
     order.  Only the leading sha1 is read from each line, so _git
     rev-list -pretty=oneline_ output can be used.

-rmdir
     Only used with the _dcommit_, _set-tree_ and _commit-diff_
     commands.

     Remove directories from the SVN tree if there are no files left
     behind.  SVN can version empty directories, and they are not
     removed by default if there are no files left in them.  git cannot
     version empty directories.  Enabling this flag will make the
     commit to SVN act like git.

          config key: svn.rmdir

-e
-edit
     Only used with the _dcommit_, _set-tree_ and _commit-diff_
     commands.

     Edit the commit message before committing to SVN.  This is off by
     default for objects that are commits, and forced on when committing
     tree objects.

          config key: svn.edit

-l<num>
-find-copies-harder
     Only used with the _dcommit_, _set-tree_ and _commit-diff_
     commands.

     They are both passed directly to _git diff-tree_; see
     git-diff-tree(1) for more information.

          config key: svn.l
          config key: svn.findcopiesharder

-A<filename>
-authors-file=<filename>
     Syntax is compatible with the file used by _git cvsimport_:

                  loginname = Joe User <user@example.com>

     If this option is specified and _git svn_ encounters an SVN
     committer name that does not exist in the authors-file, _git svn_
     will abort operation. The user will then have to add the
     appropriate entry.  Re-running the previous _git svn_ command
     after the authors-file is modified should continue operation.

          config key: svn.authorsfile

-authors-prog=<filename>
     If this option is specified, for each SVN committer name that does
     not exist in the authors file, the given file is executed with the
     committer name as the first argument.  The program is expected to
     return a single line of the form "Name <email>", which will be
     treated as if included in the authors file.

-q
-quiet
     Make _git svn_ less verbose. Specify a second time to make it even
     less verbose.

-repack[=<n>]
-repack-flags=<flags>
     These should help keep disk usage sane for large fetches with many
     revisions.

     -repack takes an optional argument for the number of revisions to
     fetch before repacking.  This defaults to repacking every 1000
     commits fetched if no argument is specified.

     -repack-flags are passed directly to _git repack_.

          config key: svn.repack
          config key: svn.repackflags

-m
-merge
-s<strategy>
-strategy=<strategy>
-p
-preserve-merges
     These are only used with the _dcommit_ and _rebase_ commands.

     Passed directly to _git rebase_ when using _dcommit_ if a _git
     reset_ cannot be used (see _dcommit_).

-n
-dry-run
     This can be used with the _dcommit_, _rebase_, _branch_ and _tag_
     commands.

     For _dcommit_, print out the series of git arguments that would
     show which diffs would be committed to SVN.

     For _rebase_, display the local branch associated with the
     upstream svn repository associated with the current branch and the
     URL of svn repository that will be fetched from.

     For _branch_ and _tag_, display the urls that will be used for
     copying when creating the branch or tag.

-use-log-author
     When retrieving svn commits into git (as part of _fetch_,
     _rebase_, or _dcommit_ operations), look for the first `From:' or
     `Signed-off-by:' line in the log message and use that as the
     author string.

-add-author-from
     When committing to svn from git (as part of _commit-diff_,
     _set-tree_ or _dcommit_ operations), if the existing log message
     doesn’t already have a `From:' or `Signed-off-by:' line, append
     a `From:' line based on the git commit’s author string.  If you
     use this, then `--use-log-author' will retrieve a valid author
     string for all commits.


ADVANCED OPTIONS
****************

-i<GIT_SVN_ID>
-id <GIT_SVN_ID>
     This sets GIT_SVN_ID (instead of using the environment).  This
     allows the user to override the default refname to fetch from when
     tracking a single URL.  The _log_ and _dcommit_ commands no longer
     require this switch as an argument.

-R<remote name>
-svn-remote <remote name>
     Specify the [svn-remote "<remote name>"] section to use, this
     allows SVN multiple repositories to be tracked.  Default: "svn"

-follow-parent
     This is especially helpful when we’re tracking a directory that
     has been moved around within the repository, or if we started
     tracking a branch and never tracked the trunk it was descended
     from. This feature is enabled by default, use -no-follow-parent to
     disable it.

          config key: svn.followparent



CONFIG FILE-ONLY OPTIONS
************************

svn.noMetadata
svn-remote.<name>.noMetadata
     This gets rid of the _git-svn-id:_ lines at the end of every
     commit.

     This option can only be used for one-shot imports as _git svn_
     will not be able to fetch again without metadata. Additionally, if
     you lose your .git/svn/**/.rev_map.* files, _git svn_ will not be
     able to rebuild them.

     The _git svn log_ command will not work on repositories using
     this, either.  Using this conflicts with the _useSvmProps_ option
     for (hopefully) obvious reasons.

     This option is NOT recommended as it makes it difficult to track
     down old references to SVN revision numbers in existing
     documentation, bug reports and archives.  If you plan to
     eventually migrate from SVN to git and are certain about dropping
     SVN history, consider git-filter-branch(1) instead.  filter-branch
     also allows reformatting of metadata for ease-of-reading and
     rewriting authorship info for non-"svn.authorsFile" users.

svn.useSvmProps
svn-remote.<name>.useSvmProps
     This allows _git svn_ to re-map repository URLs and UUIDs from
     mirrors created using SVN::Mirror (or svk) for metadata.

     If an SVN revision has a property, "svm:headrev", it is likely
     that the revision was created by SVN::Mirror (also used by SVK).
     The property contains a repository UUID and a revision.  We want
     to make it look like we are mirroring the original URL, so
     introduce a helper function that returns the original identity URL
     and UUID, and use it when generating metadata in commit messages.

svn.useSvnsyncProps
svn-remote.<name>.useSvnsyncprops
     Similar to the useSvmProps option; this is for users of the
     svnsync(1) command distributed with SVN 1.4.x and later.

svn-remote.<name>.rewriteRoot
     This allows users to create repositories from alternate URLs.  For
     example, an administrator could run _git svn_ on the server
     locally (accessing via file://) but wish to distribute the
     repository with a public http:// or svn:// URL in the metadata so
     users of it will see the public URL.

svn-remote.<name>.rewriteUUID
     Similar to the useSvmProps option; this is for users who need to
     remap the UUID manually. This may be useful in situations where
     the original UUID is not available via either useSvmProps or
     useSvnsyncProps.

svn-remote.<name>.pushurl
     Similar to git’s _remote.<name>.pushurl_, this key is designed
     to be used in cases where _url_ points to an SVN repository via a
     read-only transport, to provide an alternate read/write transport.
     It is assumed that both keys point to the same repository. Unlike
     _commiturl_, _pushurl_ is a base path. If either _commiturl_ or
     _pushurl_ could be used, _commiturl_ takes precedence.

svn.brokenSymlinkWorkaround
     This disables potentially expensive checks to workaround broken
     symlinks checked into SVN by broken clients.  Set this option to
     "false" if you track a SVN repository with many empty blobs that
     are not symlinks.  This option may be changed while _git svn_ is
     running and take effect on the next revision fetched.  If unset,
     _git svn_ assumes this option to be "true".

svn.pathnameencoding
     This instructs git svn to recode pathnames to a given encoding.
     It can be used by windows users and by those who work in non-utf8
     locales to avoid corrupted file names with non-ASCII characters.
     Valid encodings are the ones supported by Perl’s Encode module.

svn-remote.<name>.automkdirs
     Normally, the "git svn clone" and "git svn rebase" commands
     attempt to recreate empty directories that are in the Subversion
     repository.  If this option is set to "false", then empty
     directories will only be created if the "git svn mkdirs" command
     is run explicitly.  If unset, _git svn_ assumes this option to be
     "true".

   Since the noMetadata, rewriteRoot, rewriteUUID, useSvnsyncProps and
useSvmProps options all affect the metadata generated and used by _git
svn_; they *must* be set in the configuration file before any history
is imported and these settings should never be changed once they are
set.

   Additionally, only one of these options can be used per svn-remote
section because they affect the _git-svn-id:_ metadata line, except for
rewriteRoot and rewriteUUID which can be used together.



BASIC EXAMPLES
**************

Tracking and contributing to the trunk of a Subversion-managed project:

     # Clone a repo (like git clone):
             git svn clone http://svn.example.com/project/trunk
     # Enter the newly cloned directory:
             cd trunk
     # You should be on master branch, double-check with 'git branch'
             git branch
     # Do some work and commit locally to git:
             git commit ...
     # Something is committed to SVN, rebase your local changes against the
     # latest changes in SVN:
             git svn rebase
     # Now commit your changes (that were committed previously using git) to SVN,
     # as well as automatically updating your working HEAD:
             git svn dcommit
     # Append svn:ignore settings to the default git exclude file:
             git svn show-ignore >> .git/info/exclude

   Tracking and contributing to an entire Subversion-managed project
(complete with a trunk, tags and branches):

     # Clone a repo (like git clone):
             git svn clone http://svn.example.com/project -T trunk -b branches -t tags
     # View all branches and tags you have cloned:
             git branch -r
     # Create a new branch in SVN
         git svn branch waldo
     # Reset your master to trunk (or any other branch, replacing 'trunk'
     # with the appropriate name):
             git reset --hard remotes/trunk
     # You may only dcommit to one branch/tag/trunk at a time.  The usage
     # of dcommit/rebase/show-ignore should be the same as above.

   The initial _git svn clone_ can be quite time-consuming (especially
for large Subversion repositories). If multiple people (or one person
with multiple machines) want to use _git svn_ to interact with the same
Subversion repository, you can do the initial _git svn clone_ to a
repository on a server and have each person clone that repository with
_git clone_:

     # Do the initial import on a server
             ssh server "cd /pub && git svn clone http://svn.example.com/project
     # Clone locally - make sure the refs/remotes/ space matches the server
             mkdir project
             cd project
             git init
             git remote add origin server:/pub/project
             git config --replace-all remote.origin.fetch '+refs/remotes/*:refs/remotes/*'
             git fetch
     # Prevent fetch/pull from remote git server in the future,
     # we only want to use git svn for future updates
             git config --remove-section remote.origin
     # Create a local branch from one of the branches just fetched
             git checkout -b master FETCH_HEAD
     # Initialize 'git svn' locally (be sure to use the same URL and -T/-b/-t options as were used on server)
             git svn init http://svn.example.com/project
     # Pull the latest changes from Subversion
             git svn rebase


REBASE VS. PULL/MERGE
*********************

Prefer to use _git svn rebase_ or _git rebase_, rather than _git pull_
or _git merge_ to synchronize unintegrated commits with a _git svn_
branch. Doing so will keep the history of unintegrated commits linear
with respect to the upstream SVN repository and allow the use of the
preferred _git svn dcommit_ subcommand to push unintegrated commits
back into SVN.

   Originally, _git svn_ recommended that developers pulled or merged
from the _git svn_ branch.  This was because the author favored `git
svn set-tree B' to commit a single head rather than the `git svn
set-tree A..B' notation to commit multiple commits. Use of _git pull_
or _git merge_ with `git svn set-tree A..B' will cause non-linear
history to be flattened when committing into SVN and this can lead to
merge commits unexpectedly reversing previous commits in SVN.



MERGE TRACKING
**************

While _git svn_ can track copy history (including branches and tags)
for repositories adopting a standard layout, it cannot yet represent
merge history that happened inside git back upstream to SVN users.
Therefore it is advised that users keep history as linear as possible
inside git to ease compatibility with SVN (see the CAVEATS section
below).



CAVEATS
*******

For the sake of simplicity and interoperating with Subversion, it is
recommended that all _git svn_ users clone, fetch and dcommit directly
from the SVN server, and avoid all _git clone_/_pull_/_merge_/_push_
operations between git repositories and branches.  The recommended
method of exchanging code between git branches and users is _git
format-patch_ and _git am_, or just 'dcommit’ing to the SVN
repository.

   Running _git merge_ or _git pull_ is NOT recommended on a branch you
plan to _dcommit_ from because Subversion users cannot see any merges
you’ve made.  Furthermore, if you merge or pull from a git branch
that is a mirror of an SVN branch, _dcommit_ may commit to the wrong
branch.

   If you do merge, note the following rule: _git svn dcommit_ will
attempt to commit on top of the SVN commit named in

     git log --grep=^git-svn-id: --first-parent -1

   You _must_ therefore ensure that the most recent commit of the branch
you want to dcommit to is the _first_ parent of the merge.  Chaos will
ensue otherwise, especially if the first parent is an older commit on
the same SVN branch.

   _git clone_ does not clone branches under the refs/remotes/
hierarchy or any _git svn_ metadata, or config.  So repositories
created and managed with using _git svn_ should use _rsync_ for
cloning, if cloning is to be done at all.

   Since _dcommit_ uses rebase internally, any git branches you _git
push_ to before _dcommit_ on will require forcing an overwrite of the
existing ref on the remote repository.  This is generally considered
bad practice, see the git-push(1) documentation for details.

   Do not use the -amend option of git-commit(1) on a change you’ve
already dcommitted.  It is considered bad practice to -amend commits
you’ve already pushed to a remote repository for other users, and
dcommit with SVN is analogous to that.

   When using multiple -branches or -tags, _git svn_ does not
automatically handle name collisions (for example, if two branches from
different paths have the same name, or if a branch and a tag have the
same name).  In these cases, use _init_ to set up your git repository
then, before your first _fetch_, edit the .git/config file so that the
branches and tags are associated with different name spaces.  For
example:

     branches = stable/*:refs/remotes/svn/stable/*
     branches = debug/*:refs/remotes/svn/debug/*


BUGS
****

We ignore all SVN properties except svn:executable.  Any unhandled
properties are logged to $GIT_DIR/svn/<refname>/unhandled.log

   Renamed and copied directories are not detected by git and hence not
tracked when committing to SVN.  I do not plan on adding support for
this as it’s quite difficult and time-consuming to get working for all
the possible corner cases (git doesn’t do it, either).  Committing
renamed and copied files is fully supported if they’re similar enough
for git to detect them.



CONFIGURATION
*************

_git svn_ stores [svn-remote] configuration information in the
repository .git/config file.  It is similar the core git [remote]
sections except _fetch_ keys do not accept glob arguments; but they are
instead handled by the _branches_ and _tags_ keys.  Since some SVN
repositories are oddly configured with multiple projects glob
expansions such those listed below are allowed:

     [svn-remote "project-a"]
             url = http://server.org/svn
             fetch = trunk/project-a:refs/remotes/project-a/trunk
             branches = branches/*/project-a:refs/remotes/project-a/branches/*
             tags = tags/*/project-a:refs/remotes/project-a/tags/*

   Keep in mind that the _*_ (asterisk) wildcard of the local ref
(right of the _:_) *must* be the farthest right path component; however
the remote wildcard may be anywhere as long as it’s an independent
path component (surrounded by _/_ or EOL).   This type of configuration
is not automatically created by _init_ and should be manually entered
with a text-editor or using _git config_.

   It is also possible to fetch a subset of branches or tags by using a
comma-separated list of names within braces. For example:

     [svn-remote "huge-project"]
             url = http://server.org/svn
             fetch = trunk/src:refs/remotes/trunk
             branches = branches/{red,green}/src:refs/remotes/branches/*
             tags = tags/{1.0,2.0}/src:refs/remotes/tags/*

   Note that git-svn keeps track of the highest revision in which a
branch or tag has appeared. If the subset of branches or tags is
changed after fetching, then .git/svn/.metadata must be manually edited
to remove (or reset) branches-maxRev and/or tags-maxRev as appropriate.



SEE ALSO
********

git-rebase(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-symbolic-ref,  Up: Top

Name
****

git-symbolic-ref — Read and modify symbolic refs



Synopsis
********

     git symbolic-ref [-m <reason>] <name> <ref>
     git symbolic-ref [-q] [-short] <name>


DESCRIPTION
***********

Given one argument, reads which branch head the given symbolic ref
refers to and outputs its path, relative to the `.git/' directory.
Typically you would give `HEAD' as the <name> argument to see which
branch your working tree is on.

   Given two arguments, creates or updates a symbolic ref <name> to
point at the given branch <ref>.

   A symbolic ref is a regular file that stores a string that begins
with `ref: refs/'.  For example, your `.git/HEAD' is a regular file
whose contents is `ref: refs/heads/master'.



OPTIONS
*******

-q
-quiet
     Do not issue an error message if the <name> is not a symbolic ref
     but a detached HEAD; instead exit with non-zero status silently.

-short
     When showing the value of <name> as a symbolic ref, try to shorten
     the value, e.g. from `refs/heads/master' to `master'.

-m
     Update the reflog for <name> with <reason>.  This is valid only
     when creating or updating a symbolic ref.


NOTES
*****

In the past, `.git/HEAD' was a symbolic link pointing at
`refs/heads/master'.  When we wanted to switch to another branch, we
did `ln -sf refs/heads/newbranch .git/HEAD', and when we wanted to find
out which branch we are on, we did `readlink .git/HEAD'.  But symbolic
links are not entirely portable, so they are now deprecated and
symbolic refs (as described above) are used by default.

   _git symbolic-ref_ will exit with status 0 if the contents of the
symbolic ref were printed correctly, with status 1 if the requested
name is not a symbolic ref, or 128 if another error occurs.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-tag,  Up: Top

Name
****

git-tag — Create, list, delete or verify a tag object signed with GPG



Synopsis
********

     git tag [-a | -s | -u <key-id>] [-f] [-m <msg> | -F <file>]
             <tagname> [<commit> | <object>]
     git tag -d <tagname>…
     git tag [-n[<num>]] -l [-contains <commit>] [-points-at <object>]
             [-column[=<options>] | -no-column] [<pattern>…]
             [<pattern>…]
     git tag -v <tagname>…


DESCRIPTION
***********

Add a tag reference in `refs/tags/', unless `-d/-l/-v' is given to
delete, list or verify tags.

   Unless `-f' is given, the named tag must not yet exist.

   If one of `-a', `-s', or `-u <key-id>' is passed, the command
creates a _tag_ object, and requires a tag message.  Unless `-m <msg>'
or `-F <file>' is given, an editor is started for the user to type in
the tag message.

   If `-m <msg>' or `-F <file>' is given and `-a', `-s', and `-u
<key-id>' are absent, `-a' is implied.

   Otherwise just a tag reference for the SHA1 object name of the
commit object is created (i.e. a lightweight tag).

   A GnuPG signed tag object will be created when `-s' or `-u <key-id>'
is used.  When `-u <key-id>' is not used, the committer identity for
the current user is used to find the GnuPG key for signing.  The
configuration variable `gpg.program' is used to specify custom GnuPG
binary.



OPTIONS
*******

-a
-annotate
     Make an unsigned, annotated tag object

-s
-sign
     Make a GPG-signed tag, using the default e-mail address’s key.

-u <key-id>
-local-user=<key-id>
     Make a GPG-signed tag, using the given key.

-f
-force
     Replace an existing tag with the given name (instead of failing)

-d
-delete
     Delete existing tags with the given names.

-v
-verify
     Verify the gpg signature of the given tag names.

-n<num>
     <num> specifies how many lines from the annotation, if any, are
     printed when using -l.  The default is not to print any annotation
     lines.  If no number is given to `-n', only the first line is
     printed.  If the tag is not annotated, the commit message is
     displayed instead.

-l <pattern>
-list <pattern>
     List tags with names that match the given pattern (or all if no
     pattern is given).  Running "git tag" without arguments also lists
     all tags. The pattern is a shell wildcard (i.e., matched using
     fnmatch(3)).  Multiple patterns may be given; if any of them
     matches, the tag is shown.

-column[=<options>]
-no-column
     Display tag listing in columns. See configuration variable
     column.tag for option syntax.`--column' and `--no-column' without
     options are equivalent to _always_ and _never_ respectively.

     This option is only applicable when listing tags without
     annotation lines.

-contains <commit>
     Only list tags which contain the specified commit.

-points-at <object>
     Only list tags of the given object.

-m <msg>
-message=<msg>
     Use the given tag message (instead of prompting).  If multiple
     `-m' options are given, their values are concatenated as separate
     paragraphs.  Implies `-a' if none of `-a', `-s', or `-u <key-id>'
     is given.

-F <file>
-file=<file>
     Take the tag message from the given file.  Use _-_ to read the
     message from the standard input.  Implies `-a' if none of `-a',
     `-s', or `-u <key-id>' is given.

-cleanup=<mode>
     This option sets how the tag message is cleaned up.  The  _<mode>_
     can be one of _verbatim_, _whitespace_ and _strip_.  The _strip_
     mode is default. The _verbatim_ mode does not change message at
     all, _whitespace_ removes just leading/trailing whitespace lines
     and _strip_ removes both whitespace and commentary.

<tagname>
     The name of the tag to create, delete, or describe.  The new tag
     name must pass all checks defined by git-check-ref-format(1).
     Some of these checks may restrict the characters allowed in a tag
     name.


CONFIGURATION
*************

By default, _git tag_ in sign-with-default mode (-s) will use your
committer identity (of the form "Your Name <your@email.address
(mailto:your@email.address)>") to find a key.  If you want to use a
different default key, you can specify it in the repository
configuration as follows:

     [user]
         signingkey = <gpg-key-id>


DISCUSSION
**********



On Re-tagging
=============

What should you do when you tag a wrong commit and you would want to
re-tag?

   If you never pushed anything out, just re-tag it. Use "-f" to
replace the old one. And you’re done.

   But if you have pushed things out (or others could just read your
repository directly), then others will have already seen the old tag.
In that case you can do one of two things:

  1. The sane thing.  Just admit you screwed up, and use a different
     name. Others have already seen one tag-name, and if you keep the
     same name, you may be in the situation that two people both have
     "version X", but they actually have _different_ "X"'s.  So just
     call it "X.1" and be done with it.

  2. The insane thing.  You really want to call the new version "X"
     too, _even though_ others have already seen the old one. So just
     use _git tag -f_ again, as if you hadn’t already published the
     old one.

   However, Git does *not* (and it should not) change tags behind users
back. So if somebody already got the old tag, doing a _git pull_ on
your tree shouldn’t just make them overwrite the old one.

   If somebody got a release tag from you, you cannot just change the
tag for them by updating your own one. This is a big security issue, in
that people MUST be able to trust their tag-names.  If you really want
to do the insane thing, you need to just fess up to it, and tell people
that you messed up. You can do that by making a very public
announcement saying:

     Ok, I messed up, and I pushed out an earlier version tagged as X. I
     then fixed something, and retagged the *fixed* tree as X again.

     If you got the wrong tag, and want the new one, please delete
     the old one and fetch the new one by doing:

             git tag -d X
             git fetch origin tag X

     to get my updated tag.

     You can test which tag you have by doing

             git rev-parse X

     which should return 0123456789abcdef.. if you have the new version.

     Sorry for the inconvenience.

   Does this seem a bit complicated?  It *should* be. There is no way
that it would be correct to just "fix" it automatically.  People need
to know that their tags might have been changed.



On Automatic following
======================

If you are following somebody else’s tree, you are most likely using
remote-tracking branches (`refs/heads/origin' in traditional layout, or
`refs/remotes/origin/master' in the separate-remote layout).  You
usually want the tags from the other end.

   On the other hand, if you are fetching because you would want a
one-shot merge from somebody else, you typically do not want to get
tags from there.  This happens more often for people near the toplevel
but not limited to them.  Mere mortals when pulling from each other do
not necessarily want to automatically get private anchor point tags
from the other person.

   Often, "please pull" messages on the mailing list just provide two
pieces of information: a repo URL and a branch name; this is designed
to be easily cut&pasted at the end of a _git fetch_ command line:

     Linus, please pull from

             git://git..../proj.git master

     to get the following updates...

   becomes:

     $ git pull git://git..../proj.git master

   In such a case, you do not want to automatically follow the other
person’s tags.

   One important aspect of git is its distributed nature, which largely
means there is no inherent "upstream" or "downstream" in the system.
On the face of it, the above example might seem to indicate that the
tag namespace is owned by the upper echelon of people and that tags
only flow downwards, but that is not the case.  It only shows that the
usage pattern determines who are interested in whose tags.

   A one-shot pull is a sign that a commit history is now crossing the
boundary between one circle of people (e.g. "people who are primarily
interested in the networking part of the kernel") who may have their
own set of tags (e.g. "this is the third release candidate from the
networking group to be proposed for general consumption with 2.6.21
release") to another circle of people (e.g. "people who integrate
various subsystem improvements").  The latter are usually not
interested in the detailed tags used internally in the former group
(that is what "internal" means).  That is why it is desirable not to
follow tags automatically in this case.

   It may well be that among networking people, they may want to
exchange the tags internal to their group, but in that workflow they
are most likely tracking each other’s progress by having
remote-tracking branches.  Again, the heuristic to automatically follow
such tags is a good thing.



On Backdating Tags
==================

If you have imported some changes from another VCS and would like to
add tags for major releases of your work, it is useful to be able to
specify the date to embed inside of the tag object; such data in the
tag object affects, for example, the ordering of tags in the gitweb
interface.

   To set the date used in future tag objects, set the environment
variable GIT_COMMITTER_DATE (see the later discussion of possible
values; the most common form is "YYYY-MM-DD HH:MM").

   For example:

     $ GIT_COMMITTER_DATE="2006-10-02 10:31" git tag -s v1.0.1


DATE FORMATS
************

The GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variables support
the following date formats:

Git internal format
     It is `<unix timestamp> <timezone offset>', where `<unix
     timestamp>' is the number of seconds since the UNIX epoch.
     `<timezone offset>' is a positive or negative offset from UTC.
     For example CET (which is 2 hours ahead UTC) is `+0200'.

RFC 2822
     The standard email format as described by RFC 2822, for example
     `Thu, 07 Apr 2005 22:13:13 +0200'.

ISO 8601
     Time and date specified by the ISO 8601 standard, for example
     `2005-04-07T22:13:13'. The parser accepts a space instead of the
     `T' character as well.

          *Note*

          In addition, the date part is accepted in the following
          formats: `YYYY.MM.DD', `MM/DD/YYYY' and `DD.MM.YYYY'.


SEE ALSO
********

git-check-ref-format(1).



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-tar-tree,  Up: Top

Name
****

git-tar-tree — Create a tar archive of the files in the named tree
object



Synopsis
********

     git tar-tree [-remote=<repo>] <tree-ish> [ <base> ]


DESCRIPTION
***********

THIS COMMAND IS DEPRECATED.  Use _git archive_ with `--format=tar'
option instead (and move the <base> argument to `--prefix=base/').

   Creates a tar archive containing the tree structure for the named
tree.  When <base> is specified it is added as a leading path to the
files in the generated tar archive.

   _git tar-tree_ behaves differently when given a tree ID versus when
given a commit ID or tag ID.  In the first case the current time is
used as modification time of each file in the archive.  In the latter
case the commit time as recorded in the referenced commit object is
used instead.  Additionally the commit ID is stored in a global
extended pax header.  It can be extracted using _git get-tar-commit-id_.



OPTIONS
*******

<tree-ish>
     The tree or commit to produce tar archive for.  If it is the
     object name of a commit object.

<base>
     Leading path to the files in the resulting tar archive.

-remote=<repo>
     Instead of making a tar archive from local repository, retrieve a
     tar archive from a remote repository.


CONFIGURATION
*************

tar.umask
     This variable can be used to restrict the permission bits of tar
     archive entries.  The default is 0002, which turns off the world
     write bit.  The special value "user" indicates that the archiving
     user’s umask will be used instead.  See umask(2) for details.


EXAMPLES
********

`git tar-tree HEAD junk | (cd /var/tmp/ && tar xf -)'
     Create a tar archive that contains the contents of the latest
     commit on the current branch, and extracts it in `/var/tmp/junk'
     directory.

`git tar-tree v1.4.0 git-1.4.0 | gzip >git-1.4.0.tar.gz'
     Create a tarball for v1.4.0 release.

`git tar-tree v1.4.0^{tree} git-1.4.0 | gzip >git-1.4.0.tar.gz'
     Create a tarball for v1.4.0 release, but without a global extended
     pax header.

`git tar-tree --remote=example.com:git.git v1.4.0 >git-1.4.0.tar'
     Get a tarball v1.4.0 from example.com.

`git tar-tree HEAD:Documentation/ git-docs > git-1.4.0-docs.tar'
     Put everything in the current head’s Documentation/ directory
     into _git-1.4.0-docs.tar_, with the prefix _git-docs/_.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-unpack-file,  Up: Top

Name
****

git-unpack-file — Creates a temporary file with a blob's contents



Synopsis
********

     git unpack-file <blob>


DESCRIPTION
***********

Creates a file holding the contents of the blob specified by sha1. It
returns the name of the temporary file in the following format:
.merge_file_XXXXX



OPTIONS
*******

<blob>
     Must be a blob id


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-unpack-objects,  Up: Top

Name
****

git-unpack-objects — Unpack objects from a packed archive



Synopsis
********

     git unpack-objects [-n] [-q] [-r] [-strict] <pack-file


DESCRIPTION
***********

Read a packed archive (.pack) from the standard input, expanding the
objects contained within and writing them into the repository in
"loose" (one object per file) format.

   Objects that already exist in the repository will *not* be unpacked
from the pack-file.  Therefore, nothing will be unpacked if you use
this command on a pack-file that exists within the target repository.

   See git-repack(1) for options to generate new packs and replace
existing ones.



OPTIONS
*******

-n
     Dry run.  Check the pack file without actually unpacking the
     objects.

-q
     The command usually shows percentage progress.  This flag
     suppresses it.

-r
     When unpacking a corrupt packfile, the command dies at the first
     corruption.  This flag tells it to keep going and make the best
     effort to recover as many objects as possible.

-strict
     Don’t write objects with broken content or links.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-update-index,  Up: Top

Name
****

git-update-index — Register file contents in the working tree to the
index



Synopsis
********

     git update-index
                  [-add] [-remove | -force-remove] [-replace]
                  [-refresh] [-q] [-unmerged] [-ignore-missing]
                  [(-cacheinfo <mode> <object> <file>)…]
                  [-chmod=(+|-)x]
                  [-assume-unchanged | -no-assume-unchanged]
                  [-skip-worktree | -no-skip-worktree]
                  [-ignore-submodules]
                  [-really-refresh] [-unresolve] [-again | -g]
                  [-info-only] [-index-info]
                  [-z] [-stdin] [-index-version <n>]
                  [-verbose]
                  [-] [<file>…]


DESCRIPTION
***********

Modifies the index or directory cache. Each file mentioned is updated
into the index and any _unmerged_ or _needs updating_ state is cleared.

   See also git-add(1) for a more user-friendly way to do some of the
most common operations on the index.

   The way _git update-index_ handles files it is told about can be
modified using the various options:



OPTIONS
*******

-add
     If a specified file isn’t in the index already then it’s added.
     Default behaviour is to ignore new files.

-remove
     If a specified file is in the index but is missing then it’s
     removed.  Default behavior is to ignore removed file.

-refresh
     Looks at the current index and checks to see if merges or updates
     are needed by checking stat() information.

-q
     Quiet.  If -refresh finds that the index needs an update, the
     default behavior is to error out.  This option makes _git
     update-index_ continue anyway.

-ignore-submodules
     Do not try to update submodules.  This option is only respected
     when passed before -refresh.

-unmerged
     If -refresh finds unmerged changes in the index, the default
     behavior is to error out.  This option makes _git update-index_
     continue anyway.

-ignore-missing
     Ignores missing files during a -refresh

-cacheinfo <mode> <object> <path>
     Directly insert the specified info into the index.

-index-info
     Read index information from stdin.

-chmod=(+|-)x
     Set the execute permissions on the updated files.

-assume-unchanged
-no-assume-unchanged
     When these flags are specified, the object names recorded for the
     paths are not updated.  Instead, these options set and unset the
     "assume unchanged" bit for the paths.  When the "assume unchanged"
     bit is on, git stops checking the working tree files for possible
     modifications, so you need to manually unset the bit to tell git
     when you change the working tree file. This is sometimes helpful
     when working with a big project on a filesystem that has very slow
     lstat(2) system call (e.g. cifs).

     This option can be also used as a coarse file-level mechanism to
     ignore uncommitted changes in tracked files (akin to what
     `.gitignore' does for untracked files).  Git will fail
     (gracefully) in case it needs to modify this file in the index
     e.g. when merging in a commit; thus, in case the assumed-untracked
     file is changed upstream, you will need to handle the situation
     manually.

-really-refresh
     Like _-refresh_, but checks stat information unconditionally,
     without regard to the "assume unchanged" setting.

-skip-worktree
-no-skip-worktree
     When one of these flags is specified, the object name recorded for
     the paths are not updated. Instead, these options set and unset
     the "skip-worktree" bit for the paths. See section "Skip-worktree
     bit" below for more information.

-g
-again
     Runs _git update-index_ itself on the paths whose index entries
     are different from those from the `HEAD' commit.

-unresolve
     Restores the _unmerged_ or _needs updating_ state of a file during
     a merge if it was cleared by accident.

-info-only
     Do not create objects in the object database for all <file>
     arguments that follow this flag; just insert their object IDs into
     the index.

-force-remove
     Remove the file from the index even when the working directory
     still has such a file. (Implies -remove.)

-replace
     By default, when a file `path' exists in the index, _git
     update-index_ refuses an attempt to add `path/file'.  Similarly if
     a file `path/file' exists, a file `path' cannot be added.  With
     -replace flag, existing entries that conflict with the entry being
     added are automatically removed with warning messages.

-stdin
     Instead of taking list of paths from the command line, read list
     of paths from the standard input.  Paths are separated by LF (i.e.
     one path per line) by default.

-verbose
     Report what is being added and removed from index.

-index-version <n>
     Write the resulting index out in the named on-disk format version.
     The current default version is 2.

-z
     Only meaningful with `--stdin' or `--index-info'; paths are
     separated with NUL character instead of LF.

-
     Do not interpret any more arguments as options.

<file>
     Files to act on.  Note that files beginning with _._ are
     discarded. This includes `./file' and `dir/./file'. If you don’t
     want this, then use cleaner names.  The same applies to
     directories ending _/_ and paths with _//_


Using -refresh
**************

_-refresh_ does not calculate a new sha1 file or bring the index
up-to-date for mode/content changes. But what it *does* do is to
"re-match" the stat information of a file with the index, so that you
can refresh the index for a file that hasn’t been changed but where
the stat entry is out of date.

   For example, you’d want to do this after doing a _git read-tree_,
to link up the stat index details with the proper files.



Using -cacheinfo or -info-only
******************************

_-cacheinfo_ is used to register a file that is not in the current
working directory.  This is useful for minimum-checkout merging.

   To pretend you have a file with mode and sha1 at path, say:

     $ git update-index --cacheinfo mode sha1 path

   _-info-only_ is used to register files without placing them in the
object database.  This is useful for status-only repositories.

   Both _-cacheinfo_ and _-info-only_ behave similarly: the index is
updated but the object database isn’t.  _-cacheinfo_ is useful when
the object is in the database but the file isn’t available locally.
_-info-only_ is useful when the file is available, but you do not wish
to update the object database.



Using -index-info
*****************

`--index-info' is a more powerful mechanism that lets you feed multiple
entry definitions from the standard input, and designed specifically
for scripts.  It can take inputs of three formats:

  1. mode         SP sha1          TAB path

     The first format is what "git-apply -index-info" reports, and used
     to reconstruct a partial tree that is used for phony merge base
     tree when falling back on 3-way merge.

  2. mode SP type SP sha1          TAB path

     The second format is to stuff _git ls-tree_ output into the index
     file.

  3. mode         SP sha1 SP stage TAB path

     This format is to put higher order stages into the index file and
     matches _git ls-files -stage_ output.

   To place a higher stage entry to the index, the path should first be
removed by feeding a mode=0 entry for the path, and then feeding
necessary input lines in the third format.

   For example, starting with this index:

     $ git ls-files -s
     100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0       frotz

   you can feed the following input to `--index-info':

     $ git update-index --index-info
     0 0000000000000000000000000000000000000000      frotz
     100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
     100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz

   The first line of the input feeds 0 as the mode to remove the path;
the SHA1 does not matter as long as it is well formatted.  Then the
second and third line feeds stage 1 and stage 2 entries for that path.
After the above, we would end up with this:

     $ git ls-files -s
     100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
     100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz


Using “assume unchanged” bit
********************************

Many operations in git depend on your filesystem to have an efficient
`lstat(2)' implementation, so that `st_mtime' information for working
tree files can be cheaply checked to see if the file contents have
changed from the version recorded in the index file.  Unfortunately,
some filesystems have inefficient `lstat(2)'.  If your filesystem is
one of them, you can set "assume unchanged" bit to paths you have not
changed to cause git not to do this check.  Note that setting this bit
on a path does not mean git will check the contents of the file to see
if it has changed — it makes git to omit any checking and assume
it has *not* changed.  When you make changes to working tree files, you
have to explicitly tell git about it by dropping "assume unchanged"
bit, either before or after you modify them.

   In order to set "assume unchanged" bit, use `--assume-unchanged'
option.  To unset, use `--no-assume-unchanged'. To see which files have
the "assume unchanged" bit set, use `git ls-files -v' (see
git-ls-files(1)).

   The command looks at `core.ignorestat' configuration variable.  When
this is true, paths updated with `git update-index paths...' and paths
updated with other git commands that update both index and working tree
(e.g. _git apply -index_, _git checkout-index -u_, and _git read-tree
-u_) are automatically marked as "assume unchanged".  Note that "assume
unchanged" bit is *not* set if `git update-index --refresh' finds the
working tree file matches the index (use `git update-index
--really-refresh' if you want to mark them as "assume unchanged").



Examples
********

To update and refresh only the files already checked out:

     $ git checkout-index -n -f -a && git update-index --ignore-missing --refresh

On an inefficient filesystem with `core.ignorestat' set
          $ git update-index --really-refresh              (1)
          $ git update-index --no-assume-unchanged foo.c   (2)
          $ git diff --name-only                           (3)
          $ edit foo.c
          $ git diff --name-only                           (4)
          M foo.c
          $ git update-index foo.c                         (5)
          $ git diff --name-only                           (6)
          $ edit foo.c
          $ git diff --name-only                           (7)
          $ git update-index --no-assume-unchanged foo.c   (8)
          $ git diff --name-only                           (9)
          M foo.c

    *note (1): CO1-1.
          forces lstat(2) to set "assume unchanged" bits for paths that
          match index.

    *note (2): CO1-2.
          mark the path to be edited.

    *note (3): CO1-3.
          this does lstat(2) and finds index matches the path.

    *note (4): CO1-4.
          this does lstat(2) and finds index does *not* match the path.

    *note (5): CO1-5.
          registering the new version to index sets "assume unchanged"
          bit.

    *note (6): CO1-6.
          and it is assumed unchanged.

    *note (7): CO1-7.
          even after you edit it.

    *note (8): CO1-8.
          you can tell about the change after the fact.

    *note (9): CO1-9.
          now it checks with lstat(2) and finds it has been changed.


Skip-worktree bit
*****************

Skip-worktree bit can be defined in one (long) sentence: When reading
an entry, if it is marked as skip-worktree, then Git pretends its
working directory version is up to date and read the index version
instead.

   To elaborate, "reading" means checking for file existence, reading
file attributes or file content. The working directory version may be
present or absent. If present, its content may match against the index
version or not. Writing is not affected by this bit, content safety is
still first priority. Note that Git _can_ update working directory
file, that is marked skip-worktree, if it is safe to do so (i.e.
working directory version matches index version)

   Although this bit looks similar to assume-unchanged bit, its goal is
different from assume-unchanged bit’s. Skip-worktree also takes
precedence over assume-unchanged bit when both are set.



Configuration
*************

The command honors `core.filemode' configuration variable.  If your
repository is on a filesystem whose executable bits are unreliable,
this should be set to _false_ (see git-config(1)).  This causes the
command to ignore differences in file modes recorded in the index and
the file mode on the filesystem if they differ only on executable bit.
On such an unfortunate filesystem, you may need to use _git
update-index -chmod=_.

   Quite similarly, if `core.symlinks' configuration variable is set to
_false_ (see git-config(1)), symbolic links are checked out as plain
files, and this command does not modify a recorded file mode from
symbolic link to regular file.

   The command looks at `core.ignorestat' configuration variable.  See
_Using "assume unchanged" bit_ section above.

   The command also looks at `core.trustctime' configuration variable.
It can be useful when the inode change time is regularly modified by
something outside Git (file system crawlers and backup systems use
ctime for marking files processed) (see git-config(1)).



SEE ALSO
********

git-config(1), git-add(1), git-ls-files(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-update-ref,  Up: Top

Name
****

git-update-ref — Update the object name stored in a ref safely



Synopsis
********

     git update-ref [-m <reason>] (-d <ref> [<oldvalue>] | [-no-deref] <ref> <newvalue> [<oldvalue>])


DESCRIPTION
***********

Given two arguments, stores the <newvalue> in the <ref>, possibly
dereferencing the symbolic refs.  E.g. `git update-ref HEAD <newvalue>'
updates the current branch head to the new object.

   Given three arguments, stores the <newvalue> in the <ref>, possibly
dereferencing the symbolic refs, after verifying that the current value
of the <ref> matches <oldvalue>.  E.g. `git update-ref
refs/heads/master <newvalue> <oldvalue>' updates the master branch head
to <newvalue> only if its current value is <oldvalue>.  You can specify
40 "0" or an empty string as <oldvalue> to make sure that the ref you
are creating does not exist.

   It also allows a "ref" file to be a symbolic pointer to another ref
file by starting with the four-byte header sequence of "ref:".

   More importantly, it allows the update of a ref file to follow these
symbolic pointers, whether they are symlinks or these "regular file
symbolic refs".  It follows *real* symlinks only if they start with
"refs/": otherwise it will just try to read them and update them as a
regular file (i.e. it will allow the filesystem to follow them, but
will overwrite such a symlink to somewhere else with a regular
filename).

   If -no-deref is given, <ref> itself is overwritten, rather than the
result of following the symbolic pointers.

   In general, using

     git update-ref HEAD "$head"

   should be a _lot_ safer than doing

     echo "$head" > "$GIT_DIR/HEAD"

   both from a symlink following standpoint *and* an error checking
standpoint.  The "refs/" rule for symlinks means that symlinks that
point to "outside" the tree are safe: they’ll be followed for reading
but not for writing (so we’ll never write through a ref symlink to
some other tree, if you have copied a whole archive by creating a
symlink tree).

   With `-d' flag, it deletes the named <ref> after verifying it still
contains <oldvalue>.



Logging Updates
***************

If config parameter "core.logAllRefUpdates" is true and the ref is one
under "refs/heads/", "refs/remotes/", "refs/notes/", or the symbolic
ref HEAD; or the file "$GIT_DIR/logs/<ref>" exists then `git
update-ref' will append a line to the log file "$GIT_DIR/logs/<ref>"
(dereferencing all symbolic refs before creating the log name)
describing the change in ref value.  Log lines are formatted as:

  1. oldsha1 SP newsha1 SP committer LF

     Where "oldsha1" is the 40 character hexadecimal value previously
     stored in <ref>, "newsha1" is the 40 character hexadecimal value of
     <newvalue> and "committer" is the committer’s name, email address
     and date in the standard GIT committer ident format.

   Optionally with -m:

  1. oldsha1 SP newsha1 SP committer TAB message LF

     Where all fields are as described above and "message" is the value
     supplied to the -m option.

   An update will fail (without changing <ref>) if the current user is
unable to create a new log file, append to the existing log file or
does not have committer information available.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-update-server-info,  Up: Top

Name
****

git-update-server-info — Update auxiliary info file to help dumb
servers



Synopsis
********

     git update-server-info [-force]


DESCRIPTION
***********

A dumb server that does not do on-the-fly pack generations must have
some auxiliary information files in $GIT_DIR/info and
$GIT_OBJECT_DIRECTORY/info directories to help clients discover what
references and packs the server has.  This command generates such
auxiliary files.



OPTIONS
*******

-f
-force
     Update the info files from scratch.


OUTPUT
******

Currently the command updates the following files.  Please see
gitrepository-layout(5) for description of what they are for:

   * objects/info/packs

   * info/refs


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-upload-archive,  Up: Top

Name
****

git-upload-archive — Send archive back to git-archive



Synopsis
********

     git upload-archive <directory>


DESCRIPTION
***********

Invoked by _git archive -remote_ and sends a generated archive to the
other end over the git protocol.

   This command is usually not invoked directly by the end user.  The UI
for the protocol is on the _git archive_ side, and the program pair is
meant to be used to get an archive from a remote repository.



OPTIONS
*******

<directory>
     The repository to get a tar archive from.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-upload-pack,  Up: Top

Name
****

git-upload-pack — Send objects packed back to git-fetch-pack



Synopsis
********

     git-upload-pack [-strict] [-timeout=<n>] <directory>


DESCRIPTION
***********

Invoked by _git fetch-pack_, learns what objects the other side is
missing, and sends them after packing.

   This command is usually not invoked directly by the end user.  The
UI for the protocol is on the _git fetch-pack_ side, and the program
pair is meant to be used to pull updates from a remote repository.  For
push operations, see _git send-pack_.



OPTIONS
*******

-strict
     Do not try <directory>/.git/ if <directory> is no git directory.

-timeout=<n>
     Interrupt transfer after <n> seconds of inactivity.

<directory>
     The repository to sync from.


SEE ALSO
********

gitnamespaces(7)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-var,  Up: Top

Name
****

git-var — Show a git logical variable



Synopsis
********

     git var ( -l | <variable> )


DESCRIPTION
***********

Prints a git logical variable.



OPTIONS
*******

-l
     Cause the logical variables to be listed. In addition, all the
     variables of the git configuration file .git/config are listed as
     well. (However, the configuration variables listing functionality
     is deprecated in favor of `git config -l'.)


EXAMPLE
*******

     $ git var GIT_AUTHOR_IDENT
     Eric W. Biederman <ebiederm@lnxi.com> 1121223278 -0600


VARIABLES
*********

GIT_AUTHOR_IDENT
     The author of a piece of code.

GIT_COMMITTER_IDENT
     The person who put a piece of code into git.

GIT_EDITOR
     Text editor for use by git commands.  The value is meant to be
     interpreted by the shell when it is used.  Examples: `~/bin/vi',
     `$SOME_ENVIRONMENT_VARIABLE', `"C:\Program Files\Vim\gvim.exe"
     --nofork'.  The order of preference is the `$GIT_EDITOR'
     environment variable, then `core.editor' configuration, then
     `$VISUAL', then `$EDITOR', and then the default chosen at compile
     time, which is usually _vi_.

GIT_PAGER
     Text viewer for use by git commands (e.g., _less_).  The value is
     meant to be interpreted by the shell.  The order of preference is
     the `$GIT_PAGER' environment variable, then `core.pager'
     configuration, then `$PAGER', and then the default chosen at
     compile time (usually _less_).


SEE ALSO
********

git-commit-tree(1) git-tag(1) git-config(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-verify-pack,  Up: Top

Name
****

git-verify-pack — Validate packed git archive files



Synopsis
********

     git verify-pack [-v|-verbose] [-s|-stat-only] [-] <pack>.idx …


DESCRIPTION
***********

Reads given idx file for packed git archive created with the _git
pack-objects_ command and verifies idx file and the corresponding pack
file.



OPTIONS
*******

<pack>.idx …
     The idx files to verify.

-v
-verbose
     After verifying the pack, show list of objects contained in the
     pack and a histogram of delta chain length.

-s
-stat-only
     Do not verify the pack contents; only show the histogram of delta
     chain length.  With `--verbose', list of objects is also shown.

-
     Do not interpret any more arguments as options.


OUTPUT FORMAT
*************

When specifying the -v option the format used is:

     SHA1 type size size-in-pack-file offset-in-packfile

   for objects that are not deltified in the pack, and

     SHA1 type size size-in-packfile offset-in-packfile depth base-SHA1

   for objects that are deltified.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-verify-tag,  Up: Top

Name
****

git-verify-tag — Check the GPG signature of tags



Synopsis
********

     git verify-tag <tag>…


DESCRIPTION
***********

Validates the gpg signature created by _git tag_.



OPTIONS
*******

-v
-verbose
     Print the contents of the tag object before validating it.

<tag>…
     SHA1 identifiers of git tag objects.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-web--browse,  Up: Top

Name
****

git-web-browse — git helper script to launch a web browser



Synopsis
********

     git web-browse [OPTIONS] URL/FILE …


DESCRIPTION
***********

This script tries, as much as possible, to display the URLs and FILEs
that are passed as arguments, as HTML pages in new tabs on an already
opened web browser.

   The following browsers (or commands) are currently supported:

   * firefox (this is the default under X Window when not using KDE)

   * iceweasel

   * seamonkey

   * iceape

   * chromium (also supported as chromium-browser)

   * google-chrome (also supported as chrome)

   * konqueror (this is the default under KDE, see _Note about
     konqueror_ below)

   * opera

   * w3m (this is the default outside graphical environments)

   * elinks

   * links

   * lynx

   * dillo

   * open (this is the default under Mac OS X GUI)

   * start (this is the default under MinGW)

   Custom commands may also be specified.



OPTIONS
*******

-b <browser>
-browser=<browser>
     Use the specified browser. It must be in the list of supported
     browsers.

-t <browser>
-tool=<browser>
     Same as above.

-c <conf.var>
-config=<conf.var>
     CONF.VAR is looked up in the git config files. If it’s set, then
     its value specifies the browser that should be used.


CONFIGURATION VARIABLES
***********************



CONF.VAR (from -c option) and web.browser
=========================================

The web browser can be specified using a configuration variable passed
with the -c (or -config) command line option, or the _web.browser_
configuration variable if the former is not used.



browser.<tool>.path
===================

You can explicitly provide a full path to your preferred browser by
setting the configuration variable _browser.<tool>.path_. For example,
you can configure the absolute path to firefox by setting
_browser.firefox.path_. Otherwise, _git web-browse_ assumes the tool is
available in PATH.



browser.<tool>.cmd
==================

When the browser, specified by options or configuration variables, is
not among the supported ones, then the corresponding
_browser.<tool>.cmd_ configuration variable will be looked up. If this
variable exists then _git web-browse_ will treat the specified tool as
a custom command and will use a shell eval to run the command with the
URLs passed as arguments.



Note about konqueror
********************

When _konqueror_ is specified by a command line option or a
configuration variable, we launch _kfmclient_ to try to open the HTML
man page on an already opened konqueror in a new tab if possible.

   For consistency, we also try such a trick if
_browser.konqueror.path_ is set to something like
_A_PATH_TO/konqueror_. That means we will try to launch
_A_PATH_TO/kfmclient_ instead.

   If you really want to use _konqueror_, then you can use something
like the following:

             [web]
                     browser = konq

             [browser "konq"]
                     cmd = A_PATH_TO/konqueror


Note about git-config -global
=============================

Note that these configuration variables should probably be set using
the _-global_ flag, for example like this:

     $ git config --global web.browser firefox

   as they are probably more user specific than repository specific.
See git-config(1) for more information about this.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-whatchanged,  Up: Top

Name
****

git-whatchanged — Show logs with difference each commit introduces



Synopsis
********

     git whatchanged <option>…


DESCRIPTION
***********

Shows commit logs and diff output each commit introduces.  The command
internally invokes _git rev-list_ piped to _git diff-tree_, and takes
command line options for both of these commands.

   This manual page describes only the most frequently used options.



OPTIONS
*******

-p
     Show textual diffs, instead of the git internal diff output format
     that is useful only to tell the changed paths and their nature of
     changes.

-<n>
     Limit output to <n> commits.

<since>..<until>
     Limit output to between the two named commits (bottom exclusive,
     top inclusive).

-r
     Show git internal diff output, but for the whole tree, not just
     the top level.

-m
     By default, differences for merge commits are not shown.  With
     this flag, show differences to that commit from all of its parents.

     However, it is not very useful in general, although it *is* useful
     on a file-by-file basis.

-pretty[=<format>]
-format=<format>
     Pretty-print the contents of the commit logs in a given format,
     where _<format>_ can be one of _oneline_, _short_, _medium_,
     _full_, _fuller_, _email_, _raw_ and _format:<string>_.  See the
     "PRETTY FORMATS" section for some additional details for each
     format.  When omitted, the format defaults to _medium_.

     Note: you can specify the default pretty format in the repository
     configuration (see git-config(1)).

-abbrev-commit
     Instead of showing the full 40-byte hexadecimal commit object
     name, show only a partial prefix.  Non default number of digits
     can be specified with "-abbrev=<n>" (which also modifies diff
     output, if it is displayed).

     This should make "-pretty=oneline" a whole lot more readable for
     people using 80-column terminals.

-no-abbrev-commit
     Show the full 40-byte hexadecimal commit object name. This negates
     `--abbrev-commit' and those options which imply it such as
     "-oneline". It also overrides the _log.abbrevCommit_ variable.

-oneline
     This is a shorthand for "-pretty=oneline -abbrev-commit" used
     together.

-encoding[=<encoding>]
     The commit objects record the encoding used for the log message in
     their encoding header; this option can be used to tell the command
     to re-code the commit log message in the encoding preferred by the
     user.  For non plumbing commands this defaults to UTF-8.

-notes[=<ref>]
     Show the notes (see git-notes(1)) that annotate the commit, when
     showing the commit log message.  This is the default for `git
     log', `git show' and `git whatchanged' commands when there is no
     `--pretty', `--format' nor `--oneline' option given on the command
     line.

     By default, the notes shown are from the notes refs listed in the
     _core.notesRef_ and _notes.displayRef_ variables (or corresponding
     environment overrides). See git-config(1) for more details.

     With an optional _<ref>_ argument, show this notes ref instead of
     the default notes ref(s). The ref is taken to be in `refs/notes/'
     if it is not qualified.

     Multiple -notes options can be combined to control which notes are
     being displayed. Examples: "-notes=foo" will show only notes from
     "refs/notes/foo"; "-notes=foo -notes" will show both notes from
     "refs/notes/foo" and from the default notes ref(s).

-no-notes
     Do not show notes. This negates the above `--notes' option, by
     resetting the list of notes refs from which notes are shown.
     Options are parsed in the order given on the command line, so e.g.
     "-notes -notes=foo -no-notes -notes=bar" will only show notes from
     "refs/notes/bar".

-show-notes[=<ref>]
-[no-]standard-notes
     These options are deprecated. Use the above -notes/-no-notes
     options instead.


PRETTY FORMATS
**************

If the commit is a merge, and if the pretty-format is not _oneline_,
_email_ or _raw_, an additional line is inserted before the _Author:_
line.  This line begins with "Merge: " and the sha1s of ancestral
commits are printed, separated by spaces.  Note that the listed commits
may not necessarily be the list of the *direct* parent commits if you
have limited your view of history: for example, if you are only
interested in changes related to a certain directory or file.

   There are several built-in formats, and you can define additional
formats by setting a pretty.<name> config option to either another
format name, or a _format:_ string, as described below (see
git-config(1)). Here are the details of the built-in formats:

   * _oneline_

          <sha1> <title line>

     This is designed to be as compact as possible.

   * _short_

          commit <sha1>
          Author: <author>

          <title line>

   * _medium_

          commit <sha1>
          Author: <author>
          Date:   <author date>

          <title line>

          <full commit message>

   * _full_

          commit <sha1>
          Author: <author>
          Commit: <committer>

          <title line>

          <full commit message>

   * _fuller_

          commit <sha1>
          Author:     <author>
          AuthorDate: <author date>
          Commit:     <committer>
          CommitDate: <committer date>

          <title line>

          <full commit message>

   * _email_

          From <sha1> <date>
          From: <author>
          Date: <author date>
          Subject: [PATCH] <title line>

          <full commit message>

   * _raw_

     The _raw_ format shows the entire commit exactly as stored in the
     commit object.  Notably, the SHA1s are displayed in full,
     regardless of whether -abbrev or -no-abbrev are used, and
     _parents_ information show the true parent commits, without taking
     grafts nor history simplification into account.

   * _format:<string>_

     The _format:<string>_ format allows you to specify which
     information you want to show. It works a little bit like printf
     format, with the notable exception that you get a newline with _%n_
     instead of _\n_.

     E.g, _format:"The author of %h was %an, %ar%nThe title was
     >>%s<<%n"_ would show something like this:

          The author of fe6e0ee was Junio C Hamano, 23 hours ago
          The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

     The placeholders are:

        * _%H_: commit hash

        * _%h_: abbreviated commit hash

        * _%T_: tree hash

        * _%t_: abbreviated tree hash

        * _%P_: parent hashes

        * _%p_: abbreviated parent hashes

        * _%an_: author name

        * _%aN_: author name (respecting .mailmap, see git-shortlog(1)
          or git-blame(1))

        * _%ae_: author email

        * _%aE_: author email (respecting .mailmap, see git-shortlog(1)
          or git-blame(1))

        * _%ad_: author date (format respects -date= option)

        * _%aD_: author date, RFC2822 style

        * _%ar_: author date, relative

        * _%at_: author date, UNIX timestamp

        * _%ai_: author date, ISO 8601 format

        * _%cn_: committer name

        * _%cN_: committer name (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%ce_: committer email

        * _%cE_: committer email (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%cd_: committer date

        * _%cD_: committer date, RFC2822 style

        * _%cr_: committer date, relative

        * _%ct_: committer date, UNIX timestamp

        * _%ci_: committer date, ISO 8601 format

        * _%d_: ref names, like the -decorate option of git-log(1)

        * _%e_: encoding

        * _%s_: subject

        * _%f_: sanitized subject line, suitable for a filename

        * _%b_: body

        * _%B_: raw body (unwrapped subject and body)

        * _%N_: commit notes

        * _%gD_: reflog selector, e.g., `refs/stash@{1}'

        * _%gd_: shortened reflog selector, e.g., `stash@{1}'

        * _%gn_: reflog identity name

        * _%gN_: reflog identity name (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%ge_: reflog identity email

        * _%gE_: reflog identity email (respecting .mailmap, see
          git-shortlog(1) or git-blame(1))

        * _%gs_: reflog subject

        * _%Cred_: switch color to red

        * _%Cgreen_: switch color to green

        * _%Cblue_: switch color to blue

        * _%Creset_: reset color

        * _%C(…)_: color specification, as described in
          color.branch.* config option

        * _%m_: left, right or boundary mark

        * _%n_: newline

        * _%%_: a raw _%_

        * _%x00_: print a byte from a hex code

        * _%w([<w>[,<i1>[,<i2>]]])_: switch line wrapping, like the -w
          option of git-shortlog(1).

     *Note*

     Some placeholders may depend on other options given to the
     revision traversal engine. For example, the `%g*' reflog options
     will insert an empty string unless we are traversing reflog
     entries (e.g., by `git log -g'). The `%d' placeholder will use the
     "short" decoration format if `--decorate' was not already provided
     on the command line.

   If you add a `+' (plus sign) after _%_ of a placeholder, a line-feed
is inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.

   If you add a `-' (minus sign) after _%_ of a placeholder, line-feeds
that immediately precede the expansion are deleted if and only if the
placeholder expands to an empty string.

   If you add a ` ` (space) after _%_ of a placeholder, a space is
inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.

   * _tformat:_

     The _tformat:_ format works exactly like _format:_, except that it
     provides "terminator" semantics instead of "separator" semantics.
     In other words, each commit has the message terminator character
     (usually a newline) appended, rather than a separator placed
     between entries.  This means that the final entry of a single-line
     format will be properly terminated with a new line, just as the
     "oneline" format does.  For example:

          $ git log -2 --pretty=format:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973 -- NO NEWLINE

          $ git log -2 --pretty=tformat:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973

     In addition, any unrecognized string that has a `%' in it is
     interpreted as if it has `tformat:' in front of it.  For example,
     these two are equivalent:

          $ git log -2 --pretty=tformat:%h 4da45bef
          $ git log -2 --pretty=%h 4da45bef



Examples
********

`git whatchanged -p v2.6.12.. include/scsi drivers/scsi'
     Show as patches the commits since version _v2.6.12_ that changed
     any file in the include/scsi or drivers/scsi subdirectories

`git whatchanged --since="2 weeks ago" -- gitk'
     Show the changes during the last two weeks to the file _gitk_.
     The "-" is necessary to avoid confusion with the *branch* named
     _gitk_


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-write-tree,  Up: Top

Name
****

git-write-tree — Create a tree object from the current index



Synopsis
********

     git write-tree [-missing-ok] [-prefix=<prefix>/]


DESCRIPTION
***********

Creates a tree object using the current index. The name of the new tree
object is printed to standard output.

   The index must be in a fully merged state.

   Conceptually, _git write-tree_ sync()s the current index contents
into a set of tree files.  In order to have that match what is actually
in your directory right now, you need to have done a _git update-index_
phase before you did the _git write-tree_.



OPTIONS
*******

-missing-ok
     Normally _git write-tree_ ensures that the objects referenced by
     the directory exist in the object database.  This option disables
     this check.

-prefix=<prefix>/
     Writes a tree object that represents a subdirectory `<prefix>'.
     This can be used to write the tree object for a subproject that is
     in the named subdirectory.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitk,  Up: Top

Name
****

gitk — The git repository browser



Synopsis
********

     gitk [<option>…] [<revs>] [-] [<path>…]


DESCRIPTION
***********

Displays changes in a repository or a selected set of commits. This
includes visualizing the commit graph, showing information related to
each commit, and the files in the trees of each revision.

   Historically, gitk was the first repository browser. It’s written
in tcl/tk and started off in a separate repository but was later merged
into the main git repository.



OPTIONS
*******

To control which revisions to show, the command takes options
applicable to the _git rev-list_ command (see git-rev-list(1)).  This
manual page describes only the most frequently used options.

-n <number>
-max-count=<number>
     Limits the number of commits to show.

-since=<date>
     Show commits more recent than a specific date.

-until=<date>
     Show commits older than a specific date.

-all
     Show all branches.

-merge
     After an attempt to merge stops with conflicts, show the commits on
     the history between two branches (i.e. the HEAD and the MERGE_HEAD)
     that modify the conflicted files and do not exist on all the heads
     being merged.

-argscmd=<command>
     Command to be run each time gitk has to determine the list of
     <revs> to show.  The command is expected to print on its standard
     output a list of additional revs to be shown, one per line.  Use
     this instead of explicitly specifying <revs> if the set of commits
     to show may vary between refreshes.

-select-commit=<ref>
     Automatically select the specified commit after loading the graph.
     Default behavior is equivalent to specifying _-select-commit=HEAD_.

<revs>
     Limit the revisions to show. This can be either a single revision
     meaning show from the given revision and back, or it can be a
     range in the form "_<from>_.._<to>_" to show all revisions between
     _<from>_ and back to _<to>_. Note, more advanced revision
     selection can be applied.  For a more complete list of ways to
     spell object names, see gitrevisions(7).

<path>…
     Limit commits to the ones touching files in the given paths. Note,
     to avoid ambiguity with respect to revision names use "-" to
     separate the paths from any preceding options.


Examples
********

gitk v2.6.12.. include/scsi drivers/scsi
     Show the changes since version _v2.6.12_ that changed any file in
     the include/scsi or drivers/scsi subdirectories

gitk -since="2 weeks ago" - gitk
     Show the changes during the last two weeks to the file _gitk_.
     The "-" is necessary to avoid confusion with the *branch* named
     _gitk_

gitk -max-count=100 -all - Makefile
     Show at most 100 changes made to the file _Makefile_. Instead of
     only looking for changes in the current branch look in all
     branches.


Files
*****

Gitk creates the .gitk file in your $HOME directory to store preferences
such as display options, font, and colors.



SEE ALSO
********

_qgit(1)_
     A repository browser written in C++ using Qt.

_gitview(1)_
     A repository browser written in Python using Gtk. It’s based on
     _bzrk(1)_ and distributed in the contrib area of the git
     repository.

_tig(1)_
     A minimal repository browser and git tool output highlighter
     written in C using Ncurses.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitweb,  Up: Top

Name
****

gitweb — Git web interface (web frontend to Git repositories)



Synopsis
********

To get started with gitweb, run git-instaweb(1) from a git repository.
This would configure and start your web server, and run web browser
pointing to gitweb.



DESCRIPTION
***********

Gitweb provides a web interface to git repositories.  Its features
include:

   * Viewing multiple Git repositories with common root.

   * Browsing every revision of the repository.

   * Viewing the contents of files in the repository at any revision.

   * Viewing the revision log of branches, history of files and
     directories, see what was changed when, by who.

   * Viewing the blame/annotation details of any file (if enabled).

   * Generating RSS and Atom feeds of commits, for any branch.  The
     feeds are auto-discoverable in modern web browsers.

   * Viewing everything that was changed in a revision, and step through
     revisions one at a time, viewing the history of the repository.

   * Finding commits which commit messages matches given search term.

   See http://git.kernel.org/?p=git/git.git;a=tree;f=gitweb
(http://git.kernel.org/?p=git/git.git;a=tree;f=gitweb) or
http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/
(http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/) for gitweb source code,
browsed using gitweb itself.



CONFIGURATION
*************

Various aspects of gitweb’s behavior can be controlled through the
configuration file _gitweb_config.perl_ or _/etc/gitweb.conf_.  See the
gitweb.conf(5) for details.



Repositories
============

Gitweb can show information from one or more Git repositories.  These
repositories have to be all on local filesystem, and have to share
common repository root, i.e. be all under a single parent repository
(but see also "Advanced web server setup" section, "Webserver
configuration with multiple projects' root" subsection).

     our $projectroot = '/path/to/parent/directory';

   The default value for `$projectroot' is _/pub/git_.  You can change
it during building gitweb via `GITWEB_PROJECTROOT' build configuration
variable.

   By default all git repositories under `$projectroot' are visible and
available to gitweb.  The list of projects is generated by default by
scanning the `$projectroot' directory for git repositories (for object
databases to be more exact; gitweb is not interested in a working area,
and is best suited to showing "bare" repositories).

   The name of the repository in gitweb is the path to its `$GIT_DIR'
(its object database) relative to `$projectroot'.  Therefore the
repository $repo can be found at "$projectroot/$repo".



Projects list file format
=========================

Instead of having gitweb find repositories by scanning filesystem
starting from $projectroot, you can provide a pre-generated list of
visible projects by setting `$projects_list' to point to a plain text
file with a list of projects (with some additional info).

   This file uses the following format:

   * One record (for project / repository) per line; does not support
     line continuation (newline escaping).

   * Leading and trailing whitespace are ignored.

   * Whitespace separated fields; any run of whitespace can be used as
     field separator (rules for Perl’s "`split(" ", $line)'").

   * Fields use modified URI encoding, defined in RFC 3986, section 2.1
     (Percent-Encoding), or rather "Query string encoding" (see
     http://en.wikipedia.org/wiki/Query_string#URL_encoding
     (http://en.wikipedia.org/wiki/Query_string#URL_encoding)), the
     difference being that SP (" ") can be encoded as "+" (and
     therefore "+" has to be also percent-encoded).

     Reserved characters are: "%" (used for encoding), "+" (can be used
     to encode SPACE), all whitespace characters as defined in Perl,
     including SP, TAB and LF, (used to separate fields in a record).

   * Currently recognized fields are:

    <repository path>
          path to repository GIT_DIR, relative to `$projectroot'

    <repository owner>
          displayed as repository owner, preferably full name, or email,
          or both

   You can generate the projects list index file using the
project_index action (the _TXT_ link on projects list page) directly
from gitweb; see also "Generating projects list using gitweb" section
below.

   Example contents:

     foo.git       Joe+R+Hacker+<joe@example.com>
     foo/bar.git   O+W+Ner+<owner@example.org>

   By default this file controls only which projects are *visible* on
projects list page (note that entries that do not point to correctly
recognized git repositories won’t be displayed by gitweb).  Even if a
project is not visible on projects list page, you can view it
nevertheless by hand-crafting a gitweb URL.  By setting
`$strict_export' configuration variable (see gitweb.conf(5)) to true
value you can allow viewing only of repositories also shown on the
overview page (i.e. only projects explicitly listed in projects list
file will be accessible).



Generating projects list using gitweb
=====================================

We assume that GITWEB_CONFIG has its default Makefile value, namely
_gitweb_config.perl_. Put the following in _gitweb_make_index.perl_
file:

     read_config_file("gitweb_config.perl");
     $projects_list = $projectroot;

   Then create the following script to get list of project in the format
suitable for GITWEB_LIST build configuration variable (or
`$projects_list' variable in gitweb config):

     #!/bin/sh

     export GITWEB_CONFIG="gitweb_make_index.perl"
     export GATEWAY_INTERFACE="CGI/1.1"
     export HTTP_ACCEPT="*/*"
     export REQUEST_METHOD="GET"
     export QUERY_STRING="a=project_index"

     perl -- /var/www/cgi-bin/gitweb.cgi

   Run this script and save its output to a file.  This file could then
be used as projects list file, which means that you can set
`$projects_list' to its filename.



Controlling access to git repositories
======================================

By default all git repositories under `$projectroot' are visible and
available to gitweb.  You can however configure how gitweb controls
access to repositories.

   * As described in "Projects list file format" section, you can
     control which projects are *visible* by selectively including
     repositories in projects list file, and setting `$projects_list'
     gitweb configuration variable to point to it.  With
     `$strict_export' set, projects list file can be used to control
     which repositories are *available* as well.

   * You can configure gitweb to only list and allow viewing of the
     explicitly exported repositories, via `$export_ok' variable in
     gitweb config file; see gitweb.conf(5) manpage.  If it evaluates
     to true, gitweb shows repositories only if this file named by
     `$export_ok' exists in its object database (if directory has the
     magic file named `$export_ok').

     For example git-daemon(1) by default (unless `--export-all' option
     is used) allows pulling only for those repositories that have
     _git-daemon-export-ok_ file.  Adding

          our $export_ok = "git-daemon-export-ok";

     makes gitweb show and allow access only to those repositories that
     can be fetched from via `git://' protocol.

   * Finally, it is possible to specify an arbitrary perl subroutine
     that will be called for each repository to determine if it can be
     exported.  The subroutine receives an absolute path to the project
     (repository) as its only parameter (i.e. "$projectroot/$project").

     For example, if you use mod_perl to run the script, and have dumb
     HTTP protocol authentication configured for your repositories, you
     can use the following hook to allow access only if the user is
     authorized to read the files:

          $export_auth_hook = sub {
                  use Apache2::SubRequest ();
                  use Apache2::Const -compile => qw(HTTP_OK);
                  my $path = "$_[0]/HEAD";
                  my $r    = Apache2::RequestUtil->request;
                  my $sub  = $r->lookup_file($path);
                  return $sub->filename eq $path
                      && $sub->status == Apache2::Const::HTTP_OK;
          };



Per-repository gitweb configuration
===================================

You can configure individual repositories shown in gitweb by creating
file in the _GIT_DIR_ of git repository, or by setting some repo
configuration variable (in _GIT_DIR/config_, see git-config(1)).

   You can use the following files in repository:

README.html
     A html file (HTML fragment) which is included on the gitweb project
     "summary" page inside `<div>' block element. You can use it for
     longer description of a project, to provide links (for example to
     project’s homepage), etc. This is recognized only if XSS
     prevention is off (`$prevent_xss' is false, see gitweb.conf(5)); a
     way to include a README safely when XSS prevention is on may be
     worked out in the future.

description (or `gitweb.description')
     Short (shortened to `$projects_list_description_width' in the
     projects list page, which is 25 characters by default; see
     gitweb.conf(5)) single line description of a project (of a
     repository).  Plain text file; HTML will be escaped.  By default
     set to

          Unnamed repository; edit this file to name it for gitweb.

     from the template during repository creation, usually installed in
     _/usr/share/git-core/templates/_.  You can use the
     `gitweb.description' repo configuration variable, but the file
     takes precedence.

category (or `gitweb.category')
     Singe line category of a project, used to group projects if
     `$projects_list_group_categories' is enabled.  By default (file and
     configuration variable absent), uncategorized projects are put in
     the `$project_list_default_category' category.  You can use the
     `gitweb.category' repo configuration variable, but the file takes
     precedence.

     The configuration variables `$projects_list_group_categories' and
     `$project_list_default_category' are described in gitweb.conf(5)

cloneurl (or multiple-valued `gitweb.url')
     File with repository URL (used for clone and fetch), one per line.
     Displayed in the project summary page. You can use multiple-valued
     `gitweb.url' repository configuration variable for that, but the
     file takes precedence.

     This is per-repository enhancement / version of global prefix-based
     `@git_base_url_list' gitweb configuration variable (see
     gitweb.conf(5)).

gitweb.owner
     You can use the `gitweb.owner' repository configuration variable
     to set repository’s owner.  It is displayed in the project list
     and summary page.

     If it’s not set, filesystem directory’s owner is used (via
     GECOS field, i.e. real name field from *getpwuid*(3)) if
     `$projects_list' is unset (gitweb scans `$projectroot' for
     repositories); if `$projects_list' points to file with list of
     repositories, then project owner defaults to value from this file
     for given repository.

various `gitweb.*' config variables (in config)
     Read description of `%feature' hash for detailed list, and
     descriptions.  See also "Configuring gitweb features" section in
     gitweb.conf(5)


ACTIONS, AND URLS
*****************

Gitweb can use path_info (component) based URLs, or it can pass all
necessary information via query parameters.  The typical gitweb URLs
are broken down in to five components:

     .../gitweb.cgi/<repo>/<action>/<revision>:/<path>?<arguments>

repo
     The repository the action will be performed on.

     All actions except for those that list all available projects, in
     whatever form, require this parameter.

action
     The action that will be run.  Defaults to _projects_list_ if repo
     is not set, and to _summary_ otherwise.

revision
     Revision shown.  Defaults to HEAD.

path
     The path within the <repository> that the action is performed on,
     for those actions that require it.

arguments
     Any arguments that control the behaviour of the action.

   Some actions require or allow to specify two revisions, and
sometimes even two pathnames.  In most general form such path_info
(component) based gitweb URL looks like this:

     .../gitweb.cgi/<repo>/<action>/<revision_from>:/<path_from>..<revision_to>:/<path_to>?<arguments>

   Each action is implemented as a subroutine, and must be present in
%actions hash.  Some actions are disabled by default, and must be
turned on via feature mechanism.  For example to enable _blame_ view
add the following to gitweb configuration file:

     $feature{'blame'}{'default'} = [1];


Actions:
========

The standard actions are:

project_list
     Lists the available Git repositories.  This is the default command
     if no repository is specified in the URL.

summary
     Displays summary about given repository.  This is the default
     command if no action is specified in URL, and only repository is
     specified.

heads
remotes
     Lists all local or all remote-tracking branches in given
     repository.

     The latter is not available by default, unless configured.

tags
     List all tags (lightweight and annotated) in given repository.

blob
tree
     Shows the files and directories in a given repository path, at
     given revision.  This is default command if no action is specified
     in the URL, and path is given.

blob_plain
     Returns the raw data for the file in given repository, at given
     path and revision.  Links to this action are marked _raw_.

blobdiff
     Shows the difference between two revisions of the same file.

blame
blame_incremental
     Shows the blame (also called annotation) information for a file.
     On a per line basis it shows the revision in which that line was
     last changed and the user that committed the change.  The
     incremental version (which if configured is used automatically
     when JavaScript is enabled) uses Ajax to incrementally add blame
     info to the contents of given file.

     This action is disabled by default for performance reasons.

commit
commitdiff
     Shows information about a specific commit in a repository.  The
     _commit_ view shows information about commit in more detail, the
     _commitdiff_ action shows changeset for given commit.

patch
     Returns the commit in plain text mail format, suitable for
     applying with git-am(1).

tag
     Display specific annotated tag (tag object).

log
shortlog
     Shows log information (commit message or just commit subject) for a
     given branch (starting from given revision).

     The _shortlog_ view is more compact; it shows one commit per line.

history
     Shows history of the file or directory in a given repository path,
     starting from given revision (defaults to HEAD, i.e. default
     branch).

     This view is similar to _shortlog_ view.

rss
atom
     Generates an RSS (or Atom) feed of changes to repository.


WEBSERVER CONFIGURATION
***********************

This section explains how to configure some common webservers to run
gitweb. In all cases, `/path/to/gitweb' in the examples is the
directory you ran installed gitweb in, and contains
`gitweb_config.perl'.

   If you’ve configured a web server that isn’t listed here for
gitweb, please send in the instructions so they can be included in a
future release.



Apache as CGI
=============

Apache must be configured to support CGI scripts in the directory in
which gitweb is installed.  Let’s assume that it is _/var/www/cgi-bin_
directory.

     ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"

     <Directory "/var/www/cgi-bin">
         Options Indexes FollowSymlinks ExecCGI
         AllowOverride None
         Order allow,deny
         Allow from all
     </Directory>

   With that configuration the full path to browse repositories would
be:

     http://server/cgi-bin/gitweb.cgi


Apache with mod_perl, via ModPerl::Registry
===========================================

You can use mod_perl with gitweb.  You must install Apache::Registry
(for mod_perl 1.x) or ModPerl::Registry (for mod_perl 2.x) to enable
this support.

   Assuming that gitweb is installed to _/var/www/perl_, the following
Apache configuration (for mod_perl 2.x) is suitable.

     Alias /perl "/var/www/perl"

     <Directory "/var/www/perl">
         SetHandler perl-script
         PerlResponseHandler ModPerl::Registry
         PerlOptions +ParseHeaders
         Options Indexes FollowSymlinks +ExecCGI
         AllowOverride None
         Order allow,deny
         Allow from all
     </Directory>

   With that configuration the full path to browse repositories would
be:

     http://server/perl/gitweb.cgi


Apache with FastCGI
===================

Gitweb works with Apache and FastCGI.  First you need to rename, copy
or symlink gitweb.cgi to gitweb.fcgi.  Let’s assume that gitweb is
installed in _/usr/share/gitweb_ directory.  The following Apache
configuration is suitable (UNTESTED!)

     FastCgiServer /usr/share/gitweb/gitweb.cgi
     ScriptAlias /gitweb /usr/share/gitweb/gitweb.cgi

     Alias /gitweb/static /usr/share/gitweb/static
     <Directory /usr/share/gitweb/static>
         SetHandler default-handler
     </Directory>

   With that configuration the full path to browse repositories would
be:

     http://server/gitweb


ADVANCED WEB SERVER SETUP
*************************

All of those examples use request rewriting, and need `mod_rewrite' (or
equivalent; examples below are written for Apache).



Single URL for gitweb and for fetching
======================================

If you want to have one URL for both gitweb and your `http://'
repositories, you can configure Apache like this:

     <VirtualHost *:80>
         ServerName    git.example.org
         DocumentRoot  /pub/git
         SetEnv        GITWEB_CONFIG   /etc/gitweb.conf

         # turning on mod rewrite
         RewriteEngine on

         # make the front page an internal rewrite to the gitweb script
         RewriteRule ^/$  /cgi-bin/gitweb.cgi

         # make access for "dumb clients" work
         RewriteRule ^/(.*\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \
                     /cgi-bin/gitweb.cgi%{REQUEST_URI}  [L,PT]
     </VirtualHost>

   The above configuration expects your public repositories to live
under _/pub/git_ and will serve them as
`http://git.domain.org/dir-under-pub-git', both as cloneable GIT URL
and as browseable gitweb interface.  If you then start your
git-daemon(1) with `--base-path=/pub/git --export-all' then you can
even use the `git://' URL with exactly the same path.

   Setting the environment variable `GITWEB_CONFIG' will tell gitweb to
use the named file (i.e. in this example _/etc/gitweb.conf_) as a
configuration for gitweb.  You don’t really need it in above example;
it is required only if your configuration file is in different place
than built-in (during compiling gitweb) _gitweb_config.perl_ or
_/etc/gitweb.conf_.  See gitweb.conf(5) for details, especially
information about precedence rules.

   If you use the rewrite rules from the example you *might* also need
something like the following in your gitweb configuration file
(_/etc/gitweb.conf_ following example):

     @stylesheets = ("/some/absolute/path/gitweb.css");
     $my_uri    = "/";
     $home_link = "/";
     $per_request_config = 1;

   Nowadays though gitweb should create HTML base tag when needed (to
set base URI for relative links), so it should work automatically.



Webserver configuration with multiple projects' root
====================================================

If you want to use gitweb with several project roots you can edit your
Apache virtual host and gitweb configuration files in the following way.

   The virtual host configuration (in Apache configuration file) should
look like this:

     <VirtualHost *:80>
         ServerName    git.example.org
         DocumentRoot  /pub/git
         SetEnv        GITWEB_CONFIG  /etc/gitweb.conf

         # turning on mod rewrite
         RewriteEngine on

         # make the front page an internal rewrite to the gitweb script
         RewriteRule ^/$  /cgi-bin/gitweb.cgi  [QSA,L,PT]

         # look for a public_git folder in unix users' home
         # http://git.example.org/~<user>/
         RewriteRule ^/\~([^\/]+)(/|/gitweb.cgi)?$   /cgi-bin/gitweb.cgi \
                     [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

         # http://git.example.org/+<user>/
         #RewriteRule ^/\+([^\/]+)(/|/gitweb.cgi)?$  /cgi-bin/gitweb.cgi \
                      [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

         # http://git.example.org/user/<user>/
         #RewriteRule ^/user/([^\/]+)/(gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                      [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

         # defined list of project roots
         RewriteRule ^/scm(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                     [QSA,E=GITWEB_PROJECTROOT:/pub/scm/,L,PT]
         RewriteRule ^/var(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                     [QSA,E=GITWEB_PROJECTROOT:/var/git/,L,PT]

         # make access for "dumb clients" work
         RewriteRule ^/(.*\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \
                     /cgi-bin/gitweb.cgi%{REQUEST_URI}  [L,PT]
     </VirtualHost>

   Here actual project root is passed to gitweb via
`GITWEB_PROJECT_ROOT' environment variable from a web server, so you
need to put the following line in gitweb configuration file
(_/etc/gitweb.conf_ in above example):

     $projectroot = $ENV{'GITWEB_PROJECTROOT'} || "/pub/git";

   *Note* that this requires to be set for each request, so either
`$per_request_config' must be false, or the above must be put in code
referenced by `$per_request_config';

   These configurations enable two things. First, each unix user
(`<user>') of the server will be able to browse through gitweb git
repositories found in _~/public_git/_ with the following url:

     http://git.example.org/~<user>/

   If you do not want this feature on your server just remove the second
rewrite rule.

   If you already use ‘mod_userdir` in your virtual host or you
don’t want to use the '~’ as first character, just comment or
remove the second rewrite rule, and uncomment one of the following
according to what you want.

   Second, repositories found in _/pub/scm/_ and _/var/git/_ will be
accessible through `http://git.example.org/scm/' and
`http://git.example.org/var/'.  You can add as many project roots as
you want by adding rewrite rules like the third and the fourth.



PATH_INFO usage
===============

If you enable PATH_INFO usage in gitweb by putting

     $feature{'pathinfo'}{'default'} = [1];

   in your gitweb configuration file, it is possible to set up your
server so that it consumes and produces URLs in the form

     http://git.example.com/project.git/shortlog/sometag

   i.e. without _gitweb.cgi_ part, by using a configuration such as the
following.  This configuration assumes that _/var/www/gitweb_ is the
DocumentRoot of your webserver, contains the gitweb.cgi script and
complementary static files (stylesheet, favicon, JavaScript):

     <VirtualHost *:80>
             ServerAlias git.example.com

             DocumentRoot /var/www/gitweb

             <Directory /var/www/gitweb>
                     Options ExecCGI
                     AddHandler cgi-script cgi

                     DirectoryIndex gitweb.cgi

                     RewriteEngine On
                     RewriteCond %{REQUEST_FILENAME} !-f
                     RewriteCond %{REQUEST_FILENAME} !-d
                     RewriteRule ^.* /gitweb.cgi/$0 [L,PT]
             </Directory>
     </VirtualHost>

   The rewrite rule guarantees that existing static files will be
properly served, whereas any other URL will be passed to gitweb as
PATH_INFO parameter.

   *Notice* that in this case you don’t need special settings for
`@stylesheets', `$my_uri' and `$home_link', but you lose "dumb client"
access to your project .git dirs (described in "Single URL for gitweb
and for fetching" section).  A possible workaround for the latter is the
following: in your project root dir (e.g. _/pub/git_) have the projects
named *without* a .git extension (e.g. _/pub/git/project_ instead of
_/pub/git/project.git_) and configure Apache as follows:

     <VirtualHost *:80>
             ServerAlias git.example.com

             DocumentRoot /var/www/gitweb

             AliasMatch ^(/.*?)(\.git)(/.*)?$ /pub/git$1$3
             <Directory /var/www/gitweb>
                     Options ExecCGI
                     AddHandler cgi-script cgi

                     DirectoryIndex gitweb.cgi

                     RewriteEngine On
                     RewriteCond %{REQUEST_FILENAME} !-f
                     RewriteCond %{REQUEST_FILENAME} !-d
                     RewriteRule ^.* /gitweb.cgi/$0 [L,PT]
             </Directory>
     </VirtualHost>

   The additional AliasMatch makes it so that

     http://git.example.com/project.git

   will give raw access to the project’s git dir (so that the project
can be cloned), while

     http://git.example.com/project

   will provide human-friendly gitweb access.

   This solution is not 100% bulletproof, in the sense that if some
project has a named ref (branch, tag) starting with _git/_, then paths
such as

     http://git.example.com/project/command/abranch..git/abranch

   will fail with a 404 error.



BUGS
****

Please report any bugs or feature requests to git@vger.kernel.org
(mailto:git@vger.kernel.org), putting "gitweb" in the subject of email.



SEE ALSO
********

gitweb.conf(5), git-instaweb(1)

   _gitweb/README_, _gitweb/INSTALL_



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git,  Up: Top

Name
****

git — the stupid content tracker



Synopsis
********

     git [-version] [-help] [-c <name>=<value>]
         [-exec-path[=<path>]] [-html-path] [-man-path] [-info-path]
         [-p|-paginate|-no-pager] [-no-replace-objects] [-bare]
         [-git-dir=<path>] [-work-tree=<path>] [-namespace=<name>]
         <command> [<args>]


DESCRIPTION
***********

Git is a fast, scalable, distributed revision control system with an
unusually rich command set that provides both high-level operations and
full access to internals.

   See gittutorial(7) to get started, then see Everyday Git
(everyday.html) for a useful minimum set of commands.  The Git User’s
Manual (user-manual.html) has a more in-depth introduction.

   After you mastered the basic concepts, you can come back to this
page to learn what commands git offers.  You can learn more about
individual git commands with "git help command".  gitcli(7) manual page
gives you an overview of the command line command syntax.

   Formatted and hyperlinked version of the latest git documentation
can be viewed at `http://git-htmldocs.googlecode.com/git/git.html'.



OPTIONS
*******

-version
     Prints the git suite version that the _git_ program came from.

-help
     Prints the synopsis and a list of the most commonly used commands.
     If the option _-all_ or _-a_ is given then all available commands
     are printed. If a git command is named this option will bring up
     the manual page for that command.

     Other options are available to control how the manual page is
     displayed. See git-help(1) for more information, because `git
     --help ...' is converted internally into `git help ...'.

-c <name>=<value>
     Pass a configuration parameter to the command. The value given
     will override values from configuration files.  The <name> is
     expected in the same format as listed by _git config_ (subkeys
     separated by dots).

-exec-path[=<path>]
     Path to wherever your core git programs are installed.  This can
     also be controlled by setting the GIT_EXEC_PATH environment
     variable. If no path is given, _git_ will print the current
     setting and then exit.

-html-path
     Print the path, without trailing slash, where git’s HTML
     documentation is installed and exit.

-man-path
     Print the manpath (see `man(1)') for the man pages for this
     version of git and exit.

-info-path
     Print the path where the Info files documenting this version of
     git are installed and exit.

-p
-paginate
     Pipe all output into _less_ (or if set, $PAGER) if standard output
     is a terminal.  This overrides the `pager.<cmd>' configuration
     options (see the "Configuration Mechanism" section below).

-no-pager
     Do not pipe git output into a pager.

-git-dir=<path>
     Set the path to the repository. This can also be controlled by
     setting the GIT_DIR environment variable. It can be an absolute
     path or relative path to current working directory.

-work-tree=<path>
     Set the path to the working tree. It can be an absolute path or a
     path relative to the current working directory.  This can also be
     controlled by setting the GIT_WORK_TREE environment variable and
     the core.worktree configuration variable (see core.worktree in
     git-config(1) for a more detailed discussion).

-namespace=<path>
     Set the git namespace.  See gitnamespaces(7) for more details.
     Equivalent to setting the `GIT_NAMESPACE' environment variable.

-bare
     Treat the repository as a bare repository.  If GIT_DIR environment
     is not set, it is set to the current working directory.

-no-replace-objects
     Do not use replacement refs to replace git objects. See
     git-replace(1) for more information.


GIT COMMANDS
************

We divide git into high level ("porcelain") commands and low level
("plumbing") commands.



High-level commands (porcelain)
*******************************

We separate the porcelain commands into the main commands and some
ancillary user utilities.



Main porcelain commands
=======================

git-add(1)
     Add file contents to the index.

git-am(1)
     Apply a series of patches from a mailbox.

git-archive(1)
     Create an archive of files from a named tree.

git-bisect(1)
     Find by binary search the change that introduced a bug.

git-branch(1)
     List, create, or delete branches.

git-bundle(1)
     Move objects and refs by archive.

git-checkout(1)
     Checkout a branch or paths to the working tree.

git-cherry-pick(1)
     Apply the changes introduced by some existing commits.

git-citool(1)
     Graphical alternative to git-commit.

git-clean(1)
     Remove untracked files from the working tree.

git-clone(1)
     Clone a repository into a new directory.

git-commit(1)
     Record changes to the repository.

git-describe(1)
     Show the most recent tag that is reachable from a commit.

git-diff(1)
     Show changes between commits, commit and working tree, etc.

git-fetch(1)
     Download objects and refs from another repository.

git-format-patch(1)
     Prepare patches for e-mail submission.

git-gc(1)
     Cleanup unnecessary files and optimize the local repository.

git-grep(1)
     Print lines matching a pattern.

git-gui(1)
     A portable graphical interface to Git.

git-init(1)
     Create an empty git repository or reinitialize an existing one.

git-log(1)
     Show commit logs.

git-merge(1)
     Join two or more development histories together.

git-mv(1)
     Move or rename a file, a directory, or a symlink.

git-notes(1)
     Add or inspect object notes.

git-pull(1)
     Fetch from and merge with another repository or a local branch.

git-push(1)
     Update remote refs along with associated objects.

git-rebase(1)
     Forward-port local commits to the updated upstream head.

git-reset(1)
     Reset current HEAD to the specified state.

git-revert(1)
     Revert some existing commits.

git-rm(1)
     Remove files from the working tree and from the index.

git-shortlog(1)
     Summarize _git log_ output.

git-show(1)
     Show various types of objects.

git-stash(1)
     Stash the changes in a dirty working directory away.

git-status(1)
     Show the working tree status.

git-submodule(1)
     Initialize, update or inspect submodules.

git-tag(1)
     Create, list, delete or verify a tag object signed with GPG.

gitk(1)
     The git repository browser.


Ancillary Commands
==================

Manipulators:

git-config(1)
     Get and set repository or global options.

git-fast-export(1)
     Git data exporter.

git-fast-import(1)
     Backend for fast Git data importers.

git-filter-branch(1)
     Rewrite branches.

git-lost-found(1)
     (deprecated) Recover lost refs that luckily have not yet been
     pruned.

git-mergetool(1)
     Run merge conflict resolution tools to resolve merge conflicts.

git-pack-refs(1)
     Pack heads and tags for efficient repository access.

git-prune(1)
     Prune all unreachable objects from the object database.

git-reflog(1)
     Manage reflog information.

git-relink(1)
     Hardlink common objects in local repositories.

git-remote(1)
     manage set of tracked repositories.

git-repack(1)
     Pack unpacked objects in a repository.

git-replace(1)
     Create, list, delete refs to replace objects.

git-repo-config(1)
     (deprecated) Get and set repository or global options.

   Interrogators:

git-annotate(1)
     Annotate file lines with commit information.

git-blame(1)
     Show what revision and author last modified each line of a file.

git-cherry(1)
     Find commits not merged upstream.

git-count-objects(1)
     Count unpacked number of objects and their disk consumption.

git-difftool(1)
     Show changes using common diff tools.

git-fsck(1)
     Verifies the connectivity and validity of the objects in the
     database.

git-get-tar-commit-id(1)
     Extract commit ID from an archive created using git-archive.

git-help(1)
     display help information about git.

git-instaweb(1)
     Instantly browse your working repository in gitweb.

git-merge-tree(1)
     Show three-way merge without touching index.

git-rerere(1)
     Reuse recorded resolution of conflicted merges.

git-rev-parse(1)
     Pick out and massage parameters.

git-show-branch(1)
     Show branches and their commits.

git-verify-tag(1)
     Check the GPG signature of tags.

git-whatchanged(1)
     Show logs with difference each commit introduces.

gitweb(1)
     Git web interface (web frontend to Git repositories).


Interacting with Others
=======================

These commands are to interact with foreign SCM and with other people
via patch over e-mail.

git-archimport(1)
     Import an Arch repository into git.

git-cvsexportcommit(1)
     Export a single commit to a CVS checkout.

git-cvsimport(1)
     Salvage your data out of another SCM people love to hate.

git-cvsserver(1)
     A CVS server emulator for git.

git-imap-send(1)
     Send a collection of patches from stdin to an IMAP folder.

git-p4(1)
     Import from and submit to Perforce repositories.

git-quiltimport(1)
     Applies a quilt patchset onto the current branch.

git-request-pull(1)
     Generates a summary of pending changes.

git-send-email(1)
     Send a collection of patches as emails.

git-svn(1)
     Bidirectional operation between a Subversion repository and git.


Low-level commands (plumbing)
*****************************

Although git includes its own porcelain layer, its low-level commands
are sufficient to support development of alternative porcelains.
Developers of such porcelains might start by reading about
git-update-index(1) and git-read-tree(1).

   The interface (input, output, set of options and the semantics) to
these low-level commands are meant to be a lot more stable than
Porcelain level commands, because these commands are primarily for
scripted use.  The interface to Porcelain commands on the other hand
are subject to change in order to improve the end user experience.

   The following description divides the low-level commands into
commands that manipulate objects (in the repository, index, and working
tree), commands that interrogate and compare objects, and commands that
move objects and references between repositories.



Manipulation commands
=====================

git-apply(1)
     Apply a patch to files and/or to the index.

git-checkout-index(1)
     Copy files from the index to the working tree.

git-commit-tree(1)
     Create a new commit object.

git-hash-object(1)
     Compute object ID and optionally creates a blob from a file.

git-index-pack(1)
     Build pack index file for an existing packed archive.

git-merge-file(1)
     Run a three-way file merge.

git-merge-index(1)
     Run a merge for files needing merging.

git-mktag(1)
     Creates a tag object.

git-mktree(1)
     Build a tree-object from ls-tree formatted text.

git-pack-objects(1)
     Create a packed archive of objects.

git-prune-packed(1)
     Remove extra objects that are already in pack files.

git-read-tree(1)
     Reads tree information into the index.

git-symbolic-ref(1)
     Read and modify symbolic refs.

git-unpack-objects(1)
     Unpack objects from a packed archive.

git-update-index(1)
     Register file contents in the working tree to the index.

git-update-ref(1)
     Update the object name stored in a ref safely.

git-write-tree(1)
     Create a tree object from the current index.


Interrogation commands
======================

git-cat-file(1)
     Provide content or type and size information for repository
     objects.

git-diff-files(1)
     Compares files in the working tree and the index.

git-diff-index(1)
     Compares content and mode of blobs between the index and
     repository.

git-diff-tree(1)
     Compares the content and mode of blobs found via two tree objects.

git-for-each-ref(1)
     Output information on each ref.

git-ls-files(1)
     Show information about files in the index and the working tree.

git-ls-remote(1)
     List references in a remote repository.

git-ls-tree(1)
     List the contents of a tree object.

git-merge-base(1)
     Find as good common ancestors as possible for a merge.

git-name-rev(1)
     Find symbolic names for given revs.

git-pack-redundant(1)
     Find redundant pack files.

git-rev-list(1)
     Lists commit objects in reverse chronological order.

git-show-index(1)
     Show packed archive index.

git-show-ref(1)
     List references in a local repository.

git-tar-tree(1)
     (deprecated) Create a tar archive of the files in the named tree
     object.

git-unpack-file(1)
     Creates a temporary file with a blob’s contents.

git-var(1)
     Show a git logical variable.

git-verify-pack(1)
     Validate packed git archive files.

   In general, the interrogate commands do not touch the files in the
working tree.



Synching repositories
=====================

git-daemon(1)
     A really simple server for git repositories.

git-fetch-pack(1)
     Receive missing objects from another repository.

git-http-backend(1)
     Server side implementation of Git over HTTP.

git-send-pack(1)
     Push objects over git protocol to another repository.

git-update-server-info(1)
     Update auxiliary info file to help dumb servers.

   The following are helper commands used by the above; end users
typically do not use them directly.

git-http-fetch(1)
     Download from a remote git repository via HTTP.

git-http-push(1)
     Push objects over HTTP/DAV to another repository.

git-parse-remote(1)
     Routines to help parsing remote repository access parameters.

git-receive-pack(1)
     Receive what is pushed into the repository.

git-shell(1)
     Restricted login shell for Git-only SSH access.

git-upload-archive(1)
     Send archive back to git-archive.

git-upload-pack(1)
     Send objects packed back to git-fetch-pack.


Internal helper commands
========================

These are internal helper commands used by other commands; end users
typically do not use them directly.

git-check-attr(1)
     Display gitattributes information.

git-check-ref-format(1)
     Ensures that a reference name is well formed.

git-column(1)
     Display data in columns.

git-credential(1)
     Retrieve and store user credentials.

git-credential-cache(1)
     Helper to temporarily store passwords in memory.

git-credential-store(1)
     Helper to store credentials on disk.

git-fmt-merge-msg(1)
     Produce a merge commit message.

git-mailinfo(1)
     Extracts patch and authorship from a single e-mail message.

git-mailsplit(1)
     Simple UNIX mbox splitter program.

git-merge-one-file(1)
     The standard helper program to use with git-merge-index.

git-patch-id(1)
     Compute unique ID for a patch.

git-peek-remote(1)
     (deprecated) List the references in a remote repository.

git-sh-i18n(1)
     Git’s i18n setup code for shell scripts.

git-sh-setup(1)
     Common git shell script setup code.

git-stripspace(1)
     Remove unnecessary whitespace.


Configuration Mechanism
***********************

Starting from 0.99.9 (actually mid 0.99.8.GIT), `.git/config' file is
used to hold per-repository configuration options.  It is a simple text
file modeled after `.ini' format familiar to some people.  Here is an
example:

     #
     # A '#' or ';' character indicates a comment.
     #

     ; core variables
     [core]
             ; Don't trust file modes
             filemode = false

     ; user identity
     [user]
             name = "Junio C Hamano"
             email = "junkio@twinsun.com"

   Various commands read from the configuration file and adjust their
operation accordingly.  See git-config(1) for a list.



Identifier Terminology
**********************

<object>
     Indicates the object name for any type of object.

<blob>
     Indicates a blob object name.

<tree>
     Indicates a tree object name.

<commit>
     Indicates a commit object name.

<tree-ish>
     Indicates a tree, commit or tag object name.  A command that takes
     a <tree-ish> argument ultimately wants to operate on a <tree>
     object but automatically dereferences <commit> and <tag> objects
     that point at a <tree>.

<commit-ish>
     Indicates a commit or tag object name.  A command that takes a
     <commit-ish> argument ultimately wants to operate on a <commit>
     object but automatically dereferences <tag> objects that point at
     a <commit>.

<type>
     Indicates that an object type is required.  Currently one of:
     `blob', `tree', `commit', or `tag'.

<file>
     Indicates a filename - almost always relative to the root of the
     tree structure `GIT_INDEX_FILE' describes.


Symbolic Identifiers
********************

Any git command accepting any <object> can also use the following
symbolic notation:

HEAD
     indicates the head of the current branch.

<tag>
     a valid tag _name_ (i.e. a `refs/tags/<tag>' reference).

<head>
     a valid head _name_ (i.e. a `refs/heads/<head>' reference).

   For a more complete list of ways to spell object names, see
"SPECIFYING REVISIONS" section in gitrevisions(7).



File/Directory Structure
************************

Please see the gitrepository-layout(5) document.

   Read githooks(5) for more details about each hook.

   Higher level SCMs may provide and manage additional information in
the `$GIT_DIR'.



Terminology
***********

Please see gitglossary(7).



Environment Variables
*********************

Various git commands use the following environment variables:



The git Repository
==================

These environment variables apply to _all_ core git commands. Nb: it is
worth noting that they may be used/overridden by SCMS sitting above git
so take care if using Cogito etc.

_GIT_INDEX_FILE_
     This environment allows the specification of an alternate index
     file. If not specified, the default of `$GIT_DIR/index' is used.

_GIT_OBJECT_DIRECTORY_
     If the object storage directory is specified via this environment
     variable then the sha1 directories are created underneath -
     otherwise the default `$GIT_DIR/objects' directory is used.

_GIT_ALTERNATE_OBJECT_DIRECTORIES_
     Due to the immutable nature of git objects, old objects can be
     archived into shared, read-only directories. This variable
     specifies a ":" separated (on Windows ";" separated) list of git
     object directories which can be used to search for git objects.
     New objects will not be written to these directories.

_GIT_DIR_
     If the _GIT_DIR_ environment variable is set then it specifies a
     path to use instead of the default `.git' for the base of the
     repository.

_GIT_WORK_TREE_
     Set the path to the working tree.  The value will not be used in
     combination with repositories found automatically in a .git
     directory (i.e. $GIT_DIR is not set).  This can also be controlled
     by the _-work-tree_ command line option and the core.worktree
     configuration variable.

_GIT_NAMESPACE_
     Set the git namespace; see gitnamespaces(7) for details.  The
     _-namespace_ command-line option also sets this value.

_GIT_CEILING_DIRECTORIES_
     This should be a colon-separated list of absolute paths.  If set,
     it is a list of directories that git should not chdir up into
     while looking for a repository directory.  It will not exclude the
     current working directory or a GIT_DIR set on the command line or
     in the environment.  (Useful for excluding slow-loading network
     directories.)

_GIT_DISCOVERY_ACROSS_FILESYSTEM_
     When run in a directory that does not have ".git" repository
     directory, git tries to find such a directory in the parent
     directories to find the top of the working tree, but by default it
     does not cross filesystem boundaries.  This environment variable
     can be set to true to tell git not to stop at filesystem
     boundaries.  Like _GIT_CEILING_DIRECTORIES_, this will not affect
     an explicit repository directory set via _GIT_DIR_ or on the
     command line.


git Commits
===========

_GIT_AUTHOR_NAME_
_GIT_AUTHOR_EMAIL_
_GIT_AUTHOR_DATE_
_GIT_COMMITTER_NAME_
_GIT_COMMITTER_EMAIL_
_GIT_COMMITTER_DATE_
_EMAIL_
     see git-commit-tree(1)


git Diffs
=========

_GIT_DIFF_OPTS_
     Only valid setting is "-unified=??" or "-u??" to set the number of
     context lines shown when a unified diff is created.  This takes
     precedence over any "-U" or "-unified" option value passed on the
     git diff command line.

_GIT_EXTERNAL_DIFF_
     When the environment variable _GIT_EXTERNAL_DIFF_ is set, the
     program named by it is called, instead of the diff invocation
     described above.  For a path that is added, removed, or modified,
     _GIT_EXTERNAL_DIFF_ is called with 7 parameters:

          path old-file old-hex old-mode new-file new-hex new-mode

     where:

<old|new>-file
     are files GIT_EXTERNAL_DIFF can use to read the contents of
     <old|new>,

<old|new>-hex
     are the 40-hexdigit SHA1 hashes,

<old|new>-mode
     are the octal representation of the file modes.

     The file parameters can point at the user’s working file (e.g.
     `new-file' in "git-diff-files"), `/dev/null' (e.g. `old-file' when
     a new file is added), or a temporary file (e.g. `old-file' in the
     index).  _GIT_EXTERNAL_DIFF_ should not worry about unlinking the
     temporary file -- it is removed when _GIT_EXTERNAL_DIFF_ exits.

     For a path that is unmerged, _GIT_EXTERNAL_DIFF_ is called with 1
     parameter, <path>.


other
=====

_GIT_MERGE_VERBOSITY_
     A number controlling the amount of output shown by the recursive
     merge strategy.  Overrides merge.verbosity.  See git-merge(1)

_GIT_PAGER_
     This environment variable overrides `$PAGER'. If it is set to an
     empty string or to the value "cat", git will not launch a pager.
     See also the `core.pager' option in git-config(1).

_GIT_EDITOR_
     This environment variable overrides `$EDITOR' and `$VISUAL'.  It
     is used by several git commands when, on interactive mode, an
     editor is to be launched. See also git-var(1) and the
     `core.editor' option in git-config(1).

_GIT_SSH_
     If this environment variable is set then _git fetch_ and _git
     push_ will use this command instead of _ssh_ when they need to
     connect to a remote system.  The _$GIT_SSH_ command will be given
     exactly two arguments: the _username@host_ (or just _host_) from
     the URL and the shell command to execute on that remote system.

     To pass options to the program that you want to list in GIT_SSH
     you will need to wrap the program and options into a shell script,
     then set GIT_SSH to refer to the shell script.

     Usually it is easier to configure any desired options through your
     personal `.ssh/config' file.  Please consult your ssh documentation
     for further details.

_GIT_ASKPASS_
     If this environment variable is set, then git commands which need
     to acquire passwords or passphrases (e.g. for HTTP or IMAP
     authentication) will call this program with a suitable prompt as
     command line argument and read the password from its STDOUT. See
     also the _core.askpass_ option in git-config(1).

_GIT_FLUSH_
     If this environment variable is set to "1", then commands such as
     _git blame_ (in incremental mode), _git rev-list_, _git log_, and
     _git whatchanged_ will force a flush of the output stream after
     each commit-oriented record have been flushed.   If this variable
     is set to "0", the output of these commands will be done using
     completely buffered I/O.   If this environment variable is not
     set, git will choose buffered or record-oriented flushing based on
     whether stdout appears to be redirected to a file or not.

_GIT_TRACE_
     If this variable is set to "1", "2" or "true" (comparison is case
     insensitive), git will print `trace:' messages on stderr telling
     about alias expansion, built-in command execution and external
     command execution.  If this variable is set to an integer value
     greater than 1 and lower than 10 (strictly) then git will
     interpret this value as an open file descriptor and will try to
     write the trace messages into this file descriptor.
     Alternatively, if this variable is set to an absolute path
     (starting with a _/_ character), git will interpret this as a file
     path and will try to write the trace messages into it.


Discussion
**********

More detail on the following is available from the git concepts chapter
of the user-manual (user-manual.html#git-concepts) and
gitcore-tutorial(7).

   A git project normally consists of a working directory with a ".git"
subdirectory at the top level.  The .git directory contains, among other
things, a compressed object database representing the complete history
of the project, an "index" file which links that history to the current
contents of the working tree, and named pointers into that history such
as tags and branch heads.

   The object database contains objects of three main types: blobs,
which hold file data; trees, which point to blobs and other trees to
build up directory hierarchies; and commits, which each reference a
single tree and some number of parent commits.

   The commit, equivalent to what other systems call a "changeset" or
"version", represents a step in the project’s history, and each parent
represents an immediately preceding step.  Commits with more than one
parent represent merges of independent lines of development.

   All objects are named by the SHA1 hash of their contents, normally
written as a string of 40 hex digits.  Such names are globally unique.
The entire history leading up to a commit can be vouched for by signing
just that commit.  A fourth object type, the tag, is provided for this
purpose.

   When first created, objects are stored in individual files, but for
efficiency may later be compressed together into "pack files".

   Named pointers called refs mark interesting points in history.  A ref
may contain the SHA1 name of an object or the name of another ref.  Refs
with names beginning `ref/head/' contain the SHA1 name of the most
recent commit (or "head") of a branch under development.  SHA1 names of
tags of interest are stored under `ref/tags/'.  A special ref named
`HEAD' contains the name of the currently checked-out branch.

   The index file is initialized with a list of all paths and, for each
path, a blob object and a set of attributes.  The blob object represents
the contents of the file as of the head of the current branch.  The
attributes (last modified time, size, etc.) are taken from the
corresponding file in the working tree.  Subsequent changes to the
working tree can be found by comparing these attributes.  The index may
be updated with new content, and new commits may be created from the
content stored in the index.

   The index is also capable of storing multiple entries (called
"stages") for a given pathname.  These stages are used to hold the
various unmerged version of a file when a merge is in progress.



FURTHER DOCUMENTATION
*********************

See the references in the "description" section to get started using
git.  The following is probably more detail than necessary for a
first-time user.

   The git concepts chapter of the user-manual
(user-manual.html#git-concepts) and gitcore-tutorial(7) both provide
introductions to the underlying git architecture.

   See gitworkflows(7) for an overview of recommended workflows.

   See also the howto (howto-index.html) documents for some useful
examples.

   The internals are documented in the GIT API documentation
(technical/api-index.html).

   Users migrating from CVS may also want to read gitcvs-migration(7).



Authors
*******

Git was started by Linus Torvalds, and is currently maintained by Junio
C Hamano. Numerous contributions have come from the git mailing list
<git@vger.kernel.org (mailto:git@vger.kernel.org)>. For a more complete
list of contributors, see http://git-scm.com/about
(http://git-scm.com/about). If you have a clone of git.git itself, the
output of git-shortlog(1) and git-blame(1) can show you the authors for
specific parts of the project.



Reporting Bugs
**************

Report bugs to the Git mailing list <git@vger.kernel.org
(mailto:git@vger.kernel.org)> where the development and maintenance is
primarily done.  You do not have to be subscribed to the list to send a
message there.



SEE ALSO
********

gittutorial(7), gittutorial-2(7), Everyday Git (everyday.html),
gitcvs-migration(7), gitglossary(7), gitcore-tutorial(7), gitcli(7),
The Git User’s Manual (user-manual.html), gitworkflows(7)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitattributes,  Up: Top

Name
****

gitattributes — defining attributes per path



Synopsis
********

$GIT_DIR/info/attributes, .gitattributes



DESCRIPTION
***********

A `gitattributes' file is a simple text file that gives `attributes' to
pathnames.

   Each line in `gitattributes' file is of form:

     pattern attr1 attr2 ...

   That is, a pattern followed by an attributes list, separated by
whitespaces.  When the pattern matches the path in question, the
attributes listed on the line are given to the path.

   Each attribute can be in one of these states for a given path:

Set
     The path has the attribute with special value "true"; this is
     specified by listing only the name of the attribute in the
     attribute list.

Unset
     The path has the attribute with special value "false"; this is
     specified by listing the name of the attribute prefixed with a
     dash `-' in the attribute list.

Set to a value
     The path has the attribute with specified string value; this is
     specified by listing the name of the attribute followed by an
     equal sign `=' and its value in the attribute list.

Unspecified
     No pattern matches the path, and nothing says if the path has or
     does not have the attribute, the attribute for the path is said to
     be Unspecified.

   When more than one pattern matches the path, a later line overrides
an earlier line.  This overriding is done per attribute.  The rules how
the pattern matches paths are the same as in `.gitignore' files; see
gitignore(5).

   When deciding what attributes are assigned to a path, git consults
`$GIT_DIR/info/attributes' file (which has the highest precedence),
`.gitattributes' file in the same directory as the path in question,
and its parent directories up to the toplevel of the work tree (the
further the directory that contains `.gitattributes' is from the path
in question, the lower its precedence). Finally global and system-wide
files are considered (they have the lowest precedence).

   If you wish to affect only a single repository (i.e., to assign
attributes to files that are particular to one user’s workflow for
that repository), then attributes should be placed in the
`$GIT_DIR/info/attributes' file.  Attributes which should be
version-controlled and distributed to other repositories (i.e.,
attributes of interest to all users) should go into `.gitattributes'
files. Attributes that should affect all repositories for a single user
should be placed in a file specified by the `core.attributesfile'
configuration option (see git-config(1)).  Its default value is
$XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is either not set
or empty, $HOME/.config/git/attributes is used instead.  Attributes for
all users on a system should be placed in the
`$(prefix)/etc/gitattributes' file.

   Sometimes you would need to override an setting of an attribute for
a path to `Unspecified' state.  This can be done by listing the name of
the attribute prefixed with an exclamation point `!'.



EFFECTS
*******

Certain operations by git can be influenced by assigning particular
attributes to a path.  Currently, the following operations are
attributes-aware.



Checking-out and checking-in
============================

These attributes affect how the contents stored in the repository are
copied to the working tree files when commands such as _git checkout_
and _git merge_ run.  They also affect how git stores the contents you
prepare in the working tree in the repository upon _git add_ and _git
commit_.



text
----

This attribute enables and controls end-of-line normalization.  When a
text file is normalized, its line endings are converted to LF in the
repository.  To control what line ending style is used in the working
directory, use the `eol' attribute for a single file and the `core.eol'
configuration variable for all text files.

Set
     Setting the `text' attribute on a path enables end-of-line
     normalization and marks the path as a text file.  End-of-line
     conversion takes place without guessing the content type.

Unset
     Unsetting the `text' attribute on a path tells git not to attempt
     any end-of-line conversion upon checkin or checkout.

Set to string value "auto"
     When `text' is set to "auto", the path is marked for automatic
     end-of-line normalization.  If git decides that the content is
     text, its line endings are normalized to LF on checkin.

Unspecified
     If the `text' attribute is unspecified, git uses the
     `core.autocrlf' configuration variable to determine if the file
     should be converted.

   Any other value causes git to act as if `text' has been left
unspecified.



eol
---

This attribute sets a specific line-ending style to be used in the
working directory.  It enables end-of-line normalization without any
content checks, effectively setting the `text' attribute.

Set to string value "crlf"
     This setting forces git to normalize line endings for this file on
     checkin and convert them to CRLF when the file is checked out.

Set to string value "lf"
     This setting forces git to normalize line endings to LF on checkin
     and prevents conversion to CRLF when the file is checked out.


Backwards compatibility with crlf attribute
-------------------------------------------

For backwards compatibility, the `crlf' attribute is interpreted as
follows:

     crlf            text
     -crlf           -text
     crlf=input      eol=lf


End-of-line conversion
----------------------

While git normally leaves file contents alone, it can be configured to
normalize line endings to LF in the repository and, optionally, to
convert them to CRLF when files are checked out.

   Here is an example that will make git normalize .txt, .vcproj and .sh
files, ensure that .vcproj files have CRLF and .sh files have LF in the
working directory, and prevent .jpg files from being normalized
regardless of their content.

     *.txt           text
     *.vcproj        eol=crlf
     *.sh            eol=lf
     *.jpg           -text

   Other source code management systems normalize all text files in
their repositories, and there are two ways to enable similar automatic
normalization in git.

   If you simply want to have CRLF line endings in your working
directory regardless of the repository you are working with, you can
set the config variable "core.autocrlf" without changing any attributes.

     [core]
             autocrlf = true

   This does not force normalization of all text files, but does ensure
that text files that you introduce to the repository have their line
endings normalized to LF when they are added, and that files that are
already normalized in the repository stay normalized.

   If you want to interoperate with a source code management system that
enforces end-of-line normalization, or you simply want all text files
in your repository to be normalized, you should instead set the `text'
attribute to "auto" for _all_ files.

     *       text=auto

   This ensures that all files that git considers to be text will have
normalized (LF) line endings in the repository.  The `core.eol'
configuration variable controls which line endings git will use for
normalized files in your working directory; the default is to use the
native line ending for your platform, or CRLF if `core.autocrlf' is set.

     *Note*

     When `text=auto' normalization is enabled in an existing
     repository, any text files containing CRLFs should be normalized.
     If they are not they will be normalized the next time someone
     tries to change them, causing unfortunate misattribution.  From a
     clean working directory:

     $ echo "* text=auto" >>.gitattributes
     $ rm .git/index     # Remove the index to force git to
     $ git reset         # re-scan the working directory
     $ git status        # Show files that will be normalized
     $ git add -u
     $ git add .gitattributes
     $ git commit -m "Introduce end-of-line normalization"

   If any files that should not be normalized show up in _git status_,
unset their `text' attribute before running _git add -u_.

     manual.pdf      -text

   Conversely, text files that git does not detect can have
normalization enabled manually.

     weirdchars.txt  text

   If `core.safecrlf' is set to "true" or "warn", git verifies if the
conversion is reversible for the current setting of `core.autocrlf'.
For "true", git rejects irreversible conversions; for "warn", git only
prints a warning but accepts an irreversible conversion.  The safety
triggers to prevent such a conversion done to the files in the work
tree, but there are a few exceptions.  Even though…

   * _git add_ itself does not touch the files in the work tree, the
     next checkout would, so the safety triggers;

   * _git apply_ to update a text file with a patch does touch the files
     in the work tree, but the operation is about text files and CRLF
     conversion is about fixing the line ending inconsistencies, so the
     safety does not trigger;

   * _git diff_ itself does not touch the files in the work tree, it is
     often run to inspect the changes you intend to next _git add_.  To
     catch potential problems early, safety triggers.


ident
-----

When the attribute `ident' is set for a path, git replaces `$Id$' in
the blob object with `$Id:', followed by the 40-character hexadecimal
blob object name, followed by a dollar sign `$' upon checkout.  Any
byte sequence that begins with `$Id:' and ends with `$' in the worktree
file is replaced with `$Id$' upon check-in.



filter
------

A `filter' attribute can be set to a string value that names a filter
driver specified in the configuration.

   A filter driver consists of a `clean' command and a `smudge'
command, either of which can be left unspecified.  Upon checkout, when
the `smudge' command is specified, the command is fed the blob object
from its standard input, and its standard output is used to update the
worktree file.  Similarly, the `clean' command is used to convert the
contents of worktree file upon checkin.

   One use of the content filtering is to massage the content into a
shape that is more convenient for the platform, filesystem, and the
user to use.  For this mode of operation, the key phrase here is "more
convenient" and not "turning something unusable into usable".  In other
words, the intent is that if someone unsets the filter driver
definition, or does not have the appropriate filter program, the
project should still be usable.

   Another use of the content filtering is to store the content that
cannot be directly used in the repository (e.g. a UUID that refers to
the true content stored outside git, or an encrypted content) and turn
it into a usable form upon checkout (e.g. download the external
content, or decrypt the encrypted content).

   These two filters behave differently, and by default, a filter is
taken as the former, massaging the contents into more convenient shape.
A missing filter driver definition in the config, or a filter driver
that exits with a non-zero status, is not an error but makes the filter
a no-op passthru.

   You can declare that a filter turns a content that by itself is
unusable into a usable content by setting the filter.<driver>.required
configuration variable to `true'.

   For example, in .gitattributes, you would assign the `filter'
attribute for paths.

     *.c     filter=indent

   Then you would define a "filter.indent.clean" and
"filter.indent.smudge" configuration in your .git/config to specify a
pair of commands to modify the contents of C programs when the source
files are checked in ("clean" is run) and checked out (no change is
made because the command is "cat").

     [filter "indent"]
             clean = indent
             smudge = cat

   For best results, `clean' should not alter its output further if it
is run twice ("clean→clean" should be equivalent to "clean"), and
multiple `smudge' commands should not alter `clean''s output
("smudge→smudge→clean" should be equivalent to "clean").  See the
section on merging below.

   The "indent" filter is well-behaved in this regard: it will not
modify input that is already correctly indented.  In this case, the
lack of a smudge filter means that the clean filter _must_ accept its
own output without modifying it.

   If a filter _must_ succeed in order to make the stored contents
usable, you can declare that the filter is `required', in the
configuration:

     [filter "crypt"]
             clean = openssl enc ...
             smudge = openssl enc -d ...
             required

   Sequence "%f" on the filter command line is replaced with the name of
the file the filter is working on.  A filter might use this in keyword
substitution.  For example:

     [filter "p4"]
             clean = git-p4-filter --clean %f
             smudge = git-p4-filter --smudge %f


Interaction between checkin/checkout attributes
-----------------------------------------------

In the check-in codepath, the worktree file is first converted with
`filter' driver (if specified and corresponding driver defined), then
the result is processed with `ident' (if specified), and then finally
with `text' (again, if specified and applicable).

   In the check-out codepath, the blob content is first converted with
`text', and then `ident' and fed to `filter'.



Merging branches with differing checkin/checkout attributes
-----------------------------------------------------------

If you have added attributes to a file that cause the canonical
repository format for that file to change, such as adding a
clean/smudge filter or text/eol/ident attributes, merging anything
where the attribute is not in place would normally cause merge
conflicts.

   To prevent these unnecessary merge conflicts, git can be told to run
a virtual check-out and check-in of all three stages of a file when
resolving a three-way merge by setting the `merge.renormalize'
configuration variable.  This prevents changes caused by check-in
conversion from causing spurious merge conflicts when a converted file
is merged with an unconverted file.

   As long as a "smudge→clean" results in the same output as a "clean"
even on files that are already smudged, this strategy will
automatically resolve all filter-related conflicts.  Filters that do
not act in this way may cause additional merge conflicts that must be
resolved manually.



Generating diff text
====================



diff
----

The attribute `diff' affects how _git_ generates diffs for particular
files. It can tell git whether to generate a textual patch for the path
or to treat the path as a binary file.  It can also affect what line is
shown on the hunk header `@@ -k,l +n,m @@' line, tell git to use an
external command to generate the diff, or ask git to convert binary
files to a text format before generating the diff.

Set
     A path to which the `diff' attribute is set is treated as text,
     even when they contain byte values that normally never appear in
     text files, such as NUL.

Unset
     A path to which the `diff' attribute is unset will generate
     `Binary files differ' (or a binary patch, if binary patches are
     enabled).

Unspecified
     A path to which the `diff' attribute is unspecified first gets its
     contents inspected, and if it looks like text, it is treated as
     text.  Otherwise it would generate `Binary files differ'.

String
     Diff is shown using the specified diff driver.  Each driver may
     specify one or more options, as described in the following
     section. The options for the diff driver "foo" are defined by the
     configuration variables in the "diff.foo" section of the git
     config file.


Defining an external diff driver
--------------------------------

The definition of a diff driver is done in `gitconfig', not
`gitattributes' file, so strictly speaking this manual page is a wrong
place to talk about it.  However…

   To define an external diff driver `jcdiff', add a section to your
`$GIT_DIR/config' file (or `$HOME/.gitconfig' file) like this:

     [diff "jcdiff"]
             command = j-c-diff

   When git needs to show you a diff for the path with `diff' attribute
set to `jcdiff', it calls the command you specified with the above
configuration, i.e. `j-c-diff', with 7 parameters, just like
`GIT_EXTERNAL_DIFF' program is called.  See git(1) for details.



Defining a custom hunk-header
-----------------------------

Each group of changes (called a "hunk") in the textual diff output is
prefixed with a line of the form:

     @@ -k,l +n,m @@ TEXT

   This is called a _hunk header_.  The "TEXT" portion is by default a
line that begins with an alphabet, an underscore or a dollar sign; this
matches what GNU _diff -p_ output uses.  This default selection however
is not suited for some contents, and you can use a customized pattern
to make a selection.

   First, in .gitattributes, you would assign the `diff' attribute for
paths.

     *.tex   diff=tex

   Then, you would define a "diff.tex.xfuncname" configuration to
specify a regular expression that matches a line that you would want to
appear as the hunk header "TEXT". Add a section to your
`$GIT_DIR/config' file (or `$HOME/.gitconfig' file) like this:

     [diff "tex"]
             xfuncname = "^(\\\\(sub)*section\\{.*)$"

   Note.  A single level of backslashes are eaten by the configuration
file parser, so you would need to double the backslashes; the pattern
above picks a line that begins with a backslash, and zero or more
occurrences of `sub' followed by `section' followed by open brace, to
the end of line.

   There are a few built-in patterns to make this easier, and `tex' is
one of them, so you do not have to write the above in your
configuration file (you still need to enable this with the attribute
mechanism, via `.gitattributes').  The following built in patterns are
available:

   * `bibtex' suitable for files with BibTeX coded references.

   * `cpp' suitable for source code in the C and C++ languages.

   * `csharp' suitable for source code in the C# language.

   * `fortran' suitable for source code in the Fortran language.

   * `html' suitable for HTML/XHTML documents.

   * `java' suitable for source code in the Java language.

   * `matlab' suitable for source code in the MATLAB language.

   * `objc' suitable for source code in the Objective-C language.

   * `pascal' suitable for source code in the Pascal/Delphi language.

   * `perl' suitable for source code in the Perl language.

   * `php' suitable for source code in the PHP language.

   * `python' suitable for source code in the Python language.

   * `ruby' suitable for source code in the Ruby language.

   * `tex' suitable for source code for LaTeX documents.


Customizing word diff
---------------------

You can customize the rules that `git diff --word-diff' uses to split
words in a line, by specifying an appropriate regular expression in the
"diff.*.wordRegex" configuration variable.  For example, in TeX a
backslash followed by a sequence of letters forms a command, but
several such commands can be run together without intervening
whitespace.  To separate them, use a regular expression in your
`$GIT_DIR/config' file (or `$HOME/.gitconfig' file) like this:

     [diff "tex"]
             wordRegex = "\\\\[a-zA-Z]+|[{}]|\\\\.|[^\\{}[:space:]]+"

   A built-in pattern is provided for all languages listed in the
previous section.



Performing text diffs of binary files
-------------------------------------

Sometimes it is desirable to see the diff of a text-converted version
of some binary files. For example, a word processor document can be
converted to an ASCII text representation, and the diff of the text
shown. Even though this conversion loses some information, the
resulting diff is useful for human viewing (but cannot be applied
directly).

   The `textconv' config option is used to define a program for
performing such a conversion. The program should take a single
argument, the name of a file to convert, and produce the resulting text
on stdout.

   For example, to show the diff of the exif information of a file
instead of the binary information (assuming you have the exif tool
installed), add the following section to your `$GIT_DIR/config' file
(or `$HOME/.gitconfig' file):

     [diff "jpg"]
             textconv = exif

     *Note*

     The text conversion is generally a one-way conversion; in this
     example, we lose the actual image contents and focus just on the
     text data. This means that diffs generated by textconv are _not_
     suitable for applying. For this reason, only `git diff' and the
     `git log' family of commands (i.e., log, whatchanged, show) will
     perform text conversion. `git format-patch' will never generate
     this output. If you want to send somebody a text-converted diff of
     a binary file (e.g., because it quickly conveys the changes you
     have made), you should generate it separately and send it as a
     comment _in addition to_ the usual binary diff that you might send.

   Because text conversion can be slow, especially when doing a large
number of them with `git log -p', git provides a mechanism to cache the
output and use it in future diffs.  To enable caching, set the
"cachetextconv" variable in your diff driver’s config. For example:

     [diff "jpg"]
             textconv = exif
             cachetextconv = true

   This will cache the result of running "exif" on each blob
indefinitely. If you change the textconv config variable for a diff
driver, git will automatically invalidate the cache entries and re-run
the textconv filter. If you want to invalidate the cache manually
(e.g., because your version of "exif" was updated and now produces
better output), you can remove the cache manually with `git update-ref
-d refs/notes/textconv/jpg' (where "jpg" is the name of the diff
driver, as in the example above).



Choosing textconv versus external diff
--------------------------------------

If you want to show differences between binary or specially-formatted
blobs in your repository, you can choose to use either an external diff
command, or to use textconv to convert them to a diff-able text format.
Which method you choose depends on your exact situation.

   The advantage of using an external diff command is flexibility. You
are not bound to find line-oriented changes, nor is it necessary for the
output to resemble unified diff. You are free to locate and report
changes in the most appropriate way for your data format.

   A textconv, by comparison, is much more limiting. You provide a
transformation of the data into a line-oriented text format, and git
uses its regular diff tools to generate the output. There are several
advantages to choosing this method:

  1. Ease of use. It is often much simpler to write a binary to text
     transformation than it is to perform your own diff. In many cases,
     existing programs can be used as textconv filters (e.g., exif,
     odt2txt).

  2. Git diff features. By performing only the transformation step
     yourself, you can still utilize many of git’s diff features,
     including colorization, word-diff, and combined diffs for merges.

  3. Caching. Textconv caching can speed up repeated diffs, such as
     those you might trigger by running `git log -p'.


Marking files as binary
-----------------------

Git usually guesses correctly whether a blob contains text or binary
data by examining the beginning of the contents. However, sometimes you
may want to override its decision, either because a blob contains binary
data later in the file, or because the content, while technically
composed of text characters, is opaque to a human reader. For example,
many postscript files contain only ascii characters, but produce noisy
and meaningless diffs.

   The simplest way to mark a file as binary is to unset the diff
attribute in the `.gitattributes' file:

     *.ps -diff

   This will cause git to generate `Binary files differ' (or a binary
patch, if binary patches are enabled) instead of a regular diff.

   However, one may also want to specify other diff driver attributes.
For example, you might want to use `textconv' to convert postscript
files to an ascii representation for human viewing, but otherwise treat
them as binary files. You cannot specify both `-diff' and `diff=ps'
attributes.  The solution is to use the `diff.*.binary' config option:

     [diff "ps"]
       textconv = ps2ascii
       binary = true


Performing a three-way merge
============================



merge
-----

The attribute `merge' affects how three versions of a file are merged
when a file-level merge is necessary during `git merge', and other
commands such as `git revert' and `git cherry-pick'.

Set
     Built-in 3-way merge driver is used to merge the contents in a way
     similar to _merge_ command of `RCS' suite.  This is suitable for
     ordinary text files.

Unset
     Take the version from the current branch as the tentative merge
     result, and declare that the merge has conflicts.  This is
     suitable for binary files that do not have a well-defined merge
     semantics.

Unspecified
     By default, this uses the same built-in 3-way merge driver as is
     the case when the `merge' attribute is set.  However, the
     `merge.default' configuration variable can name different merge
     driver to be used with paths for which the `merge' attribute is
     unspecified.

String
     3-way merge is performed using the specified custom merge driver.
     The built-in 3-way merge driver can be explicitly specified by
     asking for "text" driver; the built-in "take the current branch"
     driver can be requested with "binary".


Built-in merge drivers
----------------------

There are a few built-in low-level merge drivers defined that can be
asked for via the `merge' attribute.

text
     Usual 3-way file level merge for text files.  Conflicted regions
     are marked with conflict markers `<<<<<<<', `=======' and
     `>>>>>>>'.  The version from your branch appears before the
     `=======' marker, and the version from the merged branch appears
     after the `=======' marker.

binary
     Keep the version from your branch in the work tree, but leave the
     path in the conflicted state for the user to sort out.

union
     Run 3-way file level merge for text files, but take lines from
     both versions, instead of leaving conflict markers.  This tends to
     leave the added lines in the resulting file in random order and
     the user should verify the result. Do not use this if you do not
     understand the implications.


Defining a custom merge driver
------------------------------

The definition of a merge driver is done in the `.git/config' file, not
in the `gitattributes' file, so strictly speaking this manual page is a
wrong place to talk about it.  However…

   To define a custom merge driver `filfre', add a section to your
`$GIT_DIR/config' file (or `$HOME/.gitconfig' file) like this:

     [merge "filfre"]
             name = feel-free merge driver
             driver = filfre %O %A %B
             recursive = binary

   The `merge.*.name' variable gives the driver a human-readable name.

   The ‘merge.*.driver` variable’s value is used to construct a
command to run to merge ancestor’s version (`%O'), current version
(`%A') and the other branches’ version (`%B').  These three tokens
are replaced with the names of temporary files that hold the contents
of these versions when the command line is built. Additionally, %L will
be replaced with the conflict marker size (see below).

   The merge driver is expected to leave the result of the merge in the
file named with `%A' by overwriting it, and exit with zero status if it
managed to merge them cleanly, or non-zero if there were conflicts.

   The `merge.*.recursive' variable specifies what other merge driver
to use when the merge driver is called for an internal merge between
common ancestors, when there are more than one.  When left unspecified,
the driver itself is used for both internal merge and the final merge.



conflict-marker-size
--------------------

This attribute controls the length of conflict markers left in the work
tree file during a conflicted merge.  Only setting to the value to a
positive integer has any meaningful effect.

   For example, this line in `.gitattributes' can be used to tell the
merge machinery to leave much longer (instead of the usual
7-character-long) conflict markers when merging the file
`Documentation/git-merge.txt' results in a conflict.

     Documentation/git-merge.txt     conflict-marker-size=32


Checking whitespace errors
==========================



whitespace
----------

The `core.whitespace' configuration variable allows you to define what
_diff_ and _apply_ should consider whitespace errors for all paths in
the project (See git-config(1)).  This attribute gives you finer
control per path.

Set
     Notice all types of potential whitespace errors known to git.  The
     tab width is taken from the value of the `core.whitespace'
     configuration variable.

Unset
     Do not notice anything as error.

Unspecified
     Use the value of the `core.whitespace' configuration variable to
     decide what to notice as error.

String
     Specify a comma separate list of common whitespace problems to
     notice in the same format as the `core.whitespace' configuration
     variable.


Creating an archive
===================



export-ignore
-------------

Files and directories with the attribute `export-ignore' won’t be
added to archive files.



export-subst
------------

If the attribute `export-subst' is set for a file then git will expand
several placeholders when adding this file to an archive.  The
expansion depends on the availability of a commit ID, i.e., if
git-archive(1) has been given a tree instead of a commit or a tag then
no replacement will be done.  The placeholders are the same as those
for the option `--pretty=format:' of git-log(1), except that they need
to be wrapped like this: `$Format:PLACEHOLDERS$' in the file.  E.g. the
string `$Format:%H$' will be replaced by the commit hash.



Packing objects
===============



delta
-----

Delta compression will not be attempted for blobs for paths with the
attribute `delta' set to false.



Viewing files in GUI tools
==========================



encoding
--------

The value of this attribute specifies the character encoding that should
be used by GUI tools (e.g. gitk(1) and git-gui(1)) to display the
contents of the relevant file. Note that due to performance
considerations gitk(1) does not use this attribute unless you manually
enable per-file encodings in its options.

   If this attribute is not set or has an invalid value, the value of
the `gui.encoding' configuration variable is used instead (See
git-config(1)).



USING MACRO ATTRIBUTES
**********************

You do not want any end-of-line conversions applied to, nor textual
diffs produced for, any binary file you track.  You would need to
specify e.g.

     *.jpg -text -diff

   but that may become cumbersome, when you have many attributes.  Using
macro attributes, you can define an attribute that, when set, also sets
or unsets a number of other attributes at the same time.  The system
knows a built-in macro attribute, `binary':

     *.jpg binary

   Setting the "binary" attribute also unsets the "text" and "diff"
attributes as above.  Note that macro attributes can only be "Set",
though setting one might have the effect of setting or unsetting other
attributes or even returning other attributes to the "Unspecified"
state.



DEFINING MACRO ATTRIBUTES
*************************

Custom macro attributes can be defined only in the `.gitattributes'
file at the toplevel (i.e. not in any subdirectory).  The built-in
macro attribute "binary" is equivalent to:

     [attr]binary -diff -text


EXAMPLE
*******

If you have these three `gitattributes' file:

     (in $GIT_DIR/info/attributes)

     a*      foo !bar -baz

     (in .gitattributes)
     abc     foo bar baz

     (in t/.gitattributes)
     ab*     merge=filfre
     abc     -foo -bar
     *.c     frotz

   the attributes given to path `t/abc' are computed as follows:

  1. By examining `t/.gitattributes' (which is in the same directory as
     the path in question), git finds that the first line matches.
     `merge' attribute is set.  It also finds that the second line
     matches, and attributes `foo' and `bar' are unset.

  2. Then it examines `.gitattributes' (which is in the parent
     directory), and finds that the first line matches, but
     `t/.gitattributes' file already decided how `merge', `foo' and
     `bar' attributes should be given to this path, so it leaves `foo'
     and `bar' unset.  Attribute `baz' is set.

  3. Finally it examines `$GIT_DIR/info/attributes'.  This file is used
     to override the in-tree settings.  The first line is a match, and
     `foo' is set, `bar' is reverted to unspecified state, and `baz' is
     unset.

   As the result, the attributes assignment to `t/abc' becomes:

     foo     set to true
     bar     unspecified
     baz     set to false
     merge   set to string value "filfre"
     frotz   unspecified


SEE ALSO
********

git-check-attr(1).



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitignore,  Up: Top

Name
****

gitignore — Specifies intentionally untracked files to ignore



Synopsis
********

$GIT_DIR/info/exclude, .gitignore



DESCRIPTION
***********

A `gitignore' file specifies intentionally untracked files that git
should ignore.  Files already tracked by git are not affected; see the
NOTES below for details.

   Each line in a `gitignore' file specifies a pattern.  When deciding
whether to ignore a path, git normally checks `gitignore' patterns from
multiple sources, with the following order of precedence, from highest
to lowest (within one level of precedence, the last matching pattern
decides the outcome):

   * Patterns read from the command line for those commands that support
     them.

   * Patterns read from a `.gitignore' file in the same directory as
     the path, or in any parent directory, with patterns in the higher
     level files (up to the toplevel of the work tree) being overridden
     by those in lower level files down to the directory containing the
     file.  These patterns match relative to the location of the
     `.gitignore' file.  A project normally includes such `.gitignore'
     files in its repository, containing patterns for files generated
     as part of the project build.

   * Patterns read from `$GIT_DIR/info/exclude'.

   * Patterns read from the file specified by the configuration
     variable _core.excludesfile_.

   Which file to place a pattern in depends on how the pattern is meant
to be used. Patterns which should be version-controlled and distributed
to other repositories via clone (i.e., files that all developers will
want to ignore) should go into a `.gitignore' file. Patterns which are
specific to a particular repository but which do not need to be shared
with other related repositories (e.g., auxiliary files that live inside
the repository but are specific to one user’s workflow) should go into
the `$GIT_DIR/info/exclude' file.  Patterns which a user wants git to
ignore in all situations (e.g., backup or temporary files generated by
the user’s editor of choice) generally go into a file specified by
`core.excludesfile' in the user’s `~/.gitconfig'. Its default value is
$XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or
empty, $HOME/.config/git/ignore is used instead.

   The underlying git plumbing tools, such as _git ls-files_ and _git
read-tree_, read `gitignore' patterns specified by command-line
options, or from files specified by command-line options.  Higher-level
git tools, such as _git status_ and _git add_, use patterns from the
sources specified above.



PATTERN FORMAT
**************

   * A blank line matches no files, so it can serve as a separator for
     readability.

   * A line starting with # serves as a comment.

   * An optional prefix _!_ which negates the pattern; any matching
     file excluded by a previous pattern will become included again.
     If a negated pattern matches, this will override lower precedence
     patterns sources.

   * If the pattern ends with a slash, it is removed for the purpose of
     the following description, but it would only find a match with a
     directory.  In other words, `foo/' will match a directory `foo'
     and paths underneath it, but will not match a regular file or a
     symbolic link `foo' (this is consistent with the way how pathspec
     works in general in git).

   * If the pattern does not contain a slash _/_, git treats it as a
     shell glob pattern and checks for a match against the pathname
     relative to the location of the `.gitignore' file (relative to the
     toplevel of the work tree if not from a `.gitignore' file).

   * Otherwise, git treats the pattern as a shell glob suitable for
     consumption by fnmatch(3) with the FNM_PATHNAME flag: wildcards in
     the pattern will not match a / in the pathname.  For example,
     "Documentation/*.html" matches "Documentation/git.html" but not
     "Documentation/ppc/ppc.html" or
     "tools/perf/Documentation/perf.html".

   * A leading slash matches the beginning of the pathname.  For
     example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".


NOTES
*****

The purpose of gitignore files is to ensure that certain files not
tracked by git remain untracked.

   To ignore uncommitted changes in a file that is already tracked, use
_git update-index -assume-unchanged_.

   To stop tracking a file that is currently tracked, use _git rm
-cached_.



EXAMPLES
********

         $ git status
         [...]
         # Untracked files:
         [...]
         #       Documentation/foo.html
         #       Documentation/gitignore.html
         #       file.o
         #       lib.a
         #       src/internal.o
         [...]
         $ cat .git/info/exclude
         # ignore objects and archives, anywhere in the tree.
         *.[oa]
         $ cat Documentation/.gitignore
         # ignore generated html files,
         *.html
         # except foo.html which is maintained by hand
         !foo.html
         $ git status
         [...]
         # Untracked files:
         [...]
         #       Documentation/foo.html
         [...]

   Another example:

         $ cat .gitignore
         vmlinux*
         $ ls arch/foo/kernel/vm*
         arch/foo/kernel/vmlinux.lds.S
         $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore

   The second .gitignore prevents git from ignoring
`arch/foo/kernel/vmlinux.lds.S'.



SEE ALSO
********

git-rm(1), git-update-index(1), gitrepository-layout(5)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitmodules,  Up: Top

Name
****

gitmodules — defining submodule properties



Synopsis
********

$GIT_WORK_DIR/.gitmodules



DESCRIPTION
***********

The `.gitmodules' file, located in the top-level directory of a git
working tree, is a text file with a syntax matching the requirements of
git-config(1).

   The file contains one subsection per submodule, and the subsection
value is the name of the submodule. Each submodule section also
contains the following required keys:

submodule.<name>.path
     Defines the path, relative to the top-level directory of the git
     working tree, where the submodule is expected to be checked out.
     The path name must not end with a `/'. All submodule paths must be
     unique within the .gitmodules file.

submodule.<name>.url
     Defines a URL from which the submodule repository can be cloned.
     This may be either an absolute URL ready to be passed to
     git-clone(1) or (if it begins with ./ or ../) a location relative
     to the superproject’s origin repository.

submodule.<name>.update
     Defines what to do when the submodule is updated by the
     superproject.  If _checkout_ (the default), the new commit
     specified in the superproject will be checked out in the submodule
     on a detached HEAD.  If _rebase_, the current branch of the
     submodule will be rebased onto the commit specified in the
     superproject. If _merge_, the commit specified in the superproject
     will be merged into the current branch in the submodule.  If
     _none_, the submodule with name `$name' will not be updated by
     default.

          This config option is overridden if 'git submodule update' is given
          the '--merge', '--rebase' or '--checkout' options.

submodule.<name>.fetchRecurseSubmodules
     This option can be used to control recursive fetching of this
     submodule. If this option is also present in the submodules entry
     in .git/config of the superproject, the setting there will
     override the one found in .gitmodules.  Both settings can be
     overridden on the command line by using the
     "-[no-]recurse-submodules" option to "git fetch" and "git pull".

submodule.<name>.ignore
     Defines under what circumstances "git status" and the diff family
     show a submodule as modified. When set to "all", it will never be
     considered modified, "dirty" will ignore all changes to the
     submodules work tree and takes only differences between the HEAD
     of the submodule and the commit recorded in the superproject into
     account. "untracked" will additionally let submodules with
     modified tracked files in their work tree show up.  Using "none"
     (the default when this option is not set) also shows submodules
     that have untracked files in their work tree as changed.  If this
     option is also present in the submodules entry in .git/config of
     the superproject, the setting there will override the one found in
     .gitmodules.  Both settings can be overridden on the command line
     by using the "-ignore-submodule" option.


EXAMPLES
********

Consider the following .gitmodules file:

     [submodule "libfoo"]
             path = include/foo
             url = git://foo.com/git/lib.git

     [submodule "libbar"]
             path = include/bar
             url = git://bar.com/git/lib.git

   This defines two submodules, `libfoo' and `libbar'. These are
expected to be checked out in the paths _include/foo_ and
_include/bar_, and for both submodules a URL is specified which can be
used for cloning the submodules.



SEE ALSO
********

git-submodule(1) git-config(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: githooks,  Up: Top

Name
****

githooks — Hooks used by git



Synopsis
********

$GIT_DIR/hooks/*



DESCRIPTION
***********

Hooks are little scripts you can place in `$GIT_DIR/hooks' directory to
trigger action at certain points.  When _git init_ is run, a handful of
example hooks are copied into the `hooks' directory of the new
repository, but by default they are all disabled.  To enable a hook,
rename it by removing its `.sample' suffix.

     *Note*

     It is also a requirement for a given hook to be executable.
     However - in a freshly initialized repository - the `.sample'
     files are executable by default.

   This document describes the currently defined hooks.



HOOKS
*****



applypatch-msg
==============

This hook is invoked by _git am_ script.  It takes a single parameter,
the name of the file that holds the proposed commit log message.
Exiting with non-zero status causes _git am_ to abort before applying
the patch.

   The hook is allowed to edit the message file in place, and can be
used to normalize the message into some project standard format (if the
project has one). It can also be used to refuse the commit after
inspecting the message file.

   The default _applypatch-msg_ hook, when enabled, runs the
_commit-msg_ hook, if the latter is enabled.



pre-applypatch
==============

This hook is invoked by _git am_.  It takes no parameter, and is
invoked after the patch is applied, but before a commit is made.

   If it exits with non-zero status, then the working tree will not be
committed after applying the patch.

   It can be used to inspect the current working tree and refuse to
make a commit if it does not pass certain test.

   The default _pre-applypatch_ hook, when enabled, runs the
_pre-commit_ hook, if the latter is enabled.



post-applypatch
===============

This hook is invoked by _git am_.  It takes no parameter, and is
invoked after the patch is applied and a commit is made.

   This hook is meant primarily for notification, and cannot affect the
outcome of _git am_.



pre-commit
==========

This hook is invoked by _git commit_, and can be bypassed with
`--no-verify' option.  It takes no parameter, and is invoked before
obtaining the proposed commit log message and making a commit.  Exiting
with non-zero status from this script causes the _git commit_ to abort.

   The default _pre-commit_ hook, when enabled, catches introduction of
lines with trailing whitespaces and aborts the commit when such a line
is found.

   All the _git commit_ hooks are invoked with the environment variable
`GIT_EDITOR=:' if the command will not bring up an editor to modify the
commit message.



prepare-commit-msg
==================

This hook is invoked by _git commit_ right after preparing the default
log message, and before the editor is started.

   It takes one to three parameters.  The first is the name of the file
that contains the commit log message.  The second is the source of the
commit message, and can be: `message' (if a `-m' or `-F' option was
given); `template' (if a `-t' option was given or the configuration
option `commit.template' is set); `merge' (if the commit is a merge or
a `.git/MERGE_MSG' file exists); `squash' (if a `.git/SQUASH_MSG' file
exists); or `commit', followed by a commit SHA1 (if a `-c', `-C' or
`--amend' option was given).

   If the exit status is non-zero, _git commit_ will abort.

   The purpose of the hook is to edit the message file in place, and it
is not suppressed by the `--no-verify' option.  A non-zero exit means a
failure of the hook and aborts the commit.  It should not be used as
replacement for pre-commit hook.

   The sample `prepare-commit-msg' hook that comes with git comments
out the `Conflicts:' part of a merge’s commit message.



commit-msg
==========

This hook is invoked by _git commit_, and can be bypassed with
`--no-verify' option.  It takes a single parameter, the name of the
file that holds the proposed commit log message.  Exiting with non-zero
status causes the _git commit_ to abort.

   The hook is allowed to edit the message file in place, and can be
used to normalize the message into some project standard format (if the
project has one). It can also be used to refuse the commit after
inspecting the message file.

   The default _commit-msg_ hook, when enabled, detects duplicate
"Signed-off-by" lines, and aborts the commit if one is found.



post-commit
===========

This hook is invoked by _git commit_.  It takes no parameter, and is
invoked after a commit is made.

   This hook is meant primarily for notification, and cannot affect the
outcome of _git commit_.



pre-rebase
==========

This hook is called by _git rebase_ and can be used to prevent a branch
from getting rebased.



post-checkout
=============

This hook is invoked when a _git checkout_ is run after having updated
the worktree.  The hook is given three parameters: the ref of the
previous HEAD, the ref of the new HEAD (which may or may not have
changed), and a flag indicating whether the checkout was a branch
checkout (changing branches, flag=1) or a file checkout (retrieving a
file from the index, flag=0).  This hook cannot affect the outcome of
_git checkout_.

   It is also run after _git clone_, unless the -no-checkout (-n)
option is used. The first parameter given to the hook is the null-ref,
the second the ref of the new HEAD and the flag is always 1.

   This hook can be used to perform repository validity checks,
auto-display differences from the previous HEAD if different, or set
working dir metadata properties.



post-merge
==========

This hook is invoked by _git merge_, which happens when a _git pull_ is
done on a local repository.  The hook takes a single parameter, a status
flag specifying whether or not the merge being done was a squash merge.
This hook cannot affect the outcome of _git merge_ and is not executed,
if the merge failed due to conflicts.

   This hook can be used in conjunction with a corresponding pre-commit
hook to save and restore any form of metadata associated with the
working tree (eg: permissions/ownership, ACLS, etc).  See
contrib/hooks/setgitperms.perl for an example of how to do this.



pre-receive
===========

This hook is invoked by _git-receive-pack_ on the remote repository,
which happens when a _git push_ is done on a local repository.  Just
before starting to update refs on the remote repository, the
pre-receive hook is invoked.  Its exit status determines the success or
failure of the update.

   This hook executes once for the receive operation. It takes no
arguments, but for each ref to be updated it receives on standard input
a line of the format:

     <old-value> SP <new-value> SP <ref-name> LF

   where `<old-value>' is the old object name stored in the ref,
`<new-value>' is the new object name to be stored in the ref and
`<ref-name>' is the full name of the ref.  When creating a new ref,
`<old-value>' is 40 `0'.

   If the hook exits with non-zero status, none of the refs will be
updated. If the hook exits with zero, updating of individual refs can
still be prevented by the _update_ (*note update::) hook.

   Both standard output and standard error output are forwarded to _git
send-pack_ on the other end, so you can simply `echo' messages for the
user.



update
======

This hook is invoked by _git-receive-pack_ on the remote repository,
which happens when a _git push_ is done on a local repository.  Just
before updating the ref on the remote repository, the update hook is
invoked.  Its exit status determines the success or failure of the ref
update.

   The hook executes once for each ref to be updated, and takes three
parameters:

   * the name of the ref being updated,

   * the old object name stored in the ref,

   * and the new objectname to be stored in the ref.

   A zero exit from the update hook allows the ref to be updated.
Exiting with a non-zero status prevents _git-receive-pack_ from
updating that ref.

   This hook can be used to prevent _forced_ update on certain refs by
making sure that the object name is a commit object that is a
descendant of the commit object named by the old object name.  That is,
to enforce a "fast-forward only" policy.

   It could also be used to log the old..new status.  However, it does
not know the entire set of branches, so it would end up firing one
e-mail per ref when used naively, though.  The _post-receive_ (*note
post-receive::) hook is more suited to that.

   Another use suggested on the mailing list is to use this hook to
implement access control which is finer grained than the one based on
filesystem group.

   Both standard output and standard error output are forwarded to _git
send-pack_ on the other end, so you can simply `echo' messages for the
user.

   The default _update_ hook, when enabled—and with
`hooks.allowunannotated' config option unset or set to false—prevents
unannotated tags to be pushed.



post-receive
============

This hook is invoked by _git-receive-pack_ on the remote repository,
which happens when a _git push_ is done on a local repository.  It
executes on the remote repository once after all the refs have been
updated.

   This hook executes once for the receive operation.  It takes no
arguments, but gets the same information as the _pre-receive_ (*note
pre-receive::) hook does on its standard input.

   This hook does not affect the outcome of _git-receive-pack_, as it
is called after the real work is done.

   This supersedes the _post-update_ (*note post-update::) hook in that
it gets both old and new values of all the refs in addition to their
names.

   Both standard output and standard error output are forwarded to _git
send-pack_ on the other end, so you can simply `echo' messages for the
user.

   The default _post-receive_ hook is empty, but there is a sample
script `post-receive-email' provided in the `contrib/hooks' directory
in git distribution, which implements sending commit emails.



post-update
===========

This hook is invoked by _git-receive-pack_ on the remote repository,
which happens when a _git push_ is done on a local repository.  It
executes on the remote repository once after all the refs have been
updated.

   It takes a variable number of parameters, each of which is the name
of ref that was actually updated.

   This hook is meant primarily for notification, and cannot affect the
outcome of _git-receive-pack_.

   The _post-update_ hook can tell what are the heads that were pushed,
but it does not know what their original and updated values are, so it
is a poor place to do log old..new. The _post-receive_ (*note
post-receive::) hook does get both original and updated values of the
refs. You might consider it instead if you need them.

   When enabled, the default _post-update_ hook runs _git
update-server-info_ to keep the information used by dumb transports
(e.g., HTTP) up-to-date.  If you are publishing a git repository that
is accessible via HTTP, you should probably enable this hook.

   Both standard output and standard error output are forwarded to _git
send-pack_ on the other end, so you can simply `echo' messages for the
user.



pre-auto-gc
===========

This hook is invoked by _git gc -auto_. It takes no parameter, and
exiting with non-zero status from this script causes the _git gc -auto_
to abort.



post-rewrite
============

This hook is invoked by commands that rewrite commits (`git commit
--amend', _git-rebase_; currently _git-filter-branch_ does _not_ call
it!).  Its first argument denotes the command it was invoked by:
currently one of `amend' or `rebase'.  Further command-dependent
arguments may be passed in the future.

   The hook receives a list of the rewritten commits on stdin, in the
format

     <old-sha1> SP <new-sha1> [ SP <extra-info> ] LF

   The _extra-info_ is again command-dependent.  If it is empty, the
preceding SP is also omitted.  Currently, no commands pass any
_extra-info_.

   The hook always runs after the automatic note copying (see
"notes.rewrite.<command>" in linkgit:git-config.txt) has happened, and
thus has access to these notes.

   The following command-specific comments apply:

rebase
     For the _squash_ and _fixup_ operation, all commits that were
     squashed are listed as being rewritten to the squashed commit.
     This means that there will be several lines sharing the same
     _new-sha1_.

     The commits are guaranteed to be listed in the order that they were
     processed by rebase.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitrepository-layout,  Up: Top

Name
****

gitrepository-layout — Git Repository Layout



Synopsis
********

$GIT_DIR/*



DESCRIPTION
***********

You may find these things in your git repository (`.git' directory for
a repository associated with your working tree, or `<project>.git'
directory for a public _bare_ repository. It is also possible to have a
working tree where `.git' is a plain ASCII file containing `gitdir:
<path>', i.e. the path to the real git repository).

objects
     Object store associated with this repository.  Usually an object
     store is self sufficient (i.e. all the objects that are referred
     to by an object found in it are also found in it), but there are a
     few ways to violate it.

       1. You could have an incomplete but locally usable repository by
          creating a shallow clone.  See git-clone(1).

       2. You could be using the `objects/info/alternates' or
          `$GIT_ALTERNATE_OBJECT_DIRECTORIES' mechanisms to _borrow_
          objects from other object stores.  A repository with this kind
          of incomplete object store is not suitable to be published for
          use with dumb transports but otherwise is OK as long as
          `objects/info/alternates' points at the object stores it
          borrows from.

objects/[0-9a-f][0-9a-f]
     A newly created object is stored in its own file.  The objects are
     splayed over 256 subdirectories using the first two characters of
     the sha1 object name to keep the number of directory entries in
     `objects' itself to a manageable number. Objects found here are
     often called _unpacked_ (or _loose_) objects.

objects/pack
     Packs (files that store many object in compressed form, along with
     index files to allow them to be randomly accessed) are found in
     this directory.

objects/info
     Additional information about the object store is recorded in this
     directory.

objects/info/packs
     This file is to help dumb transports discover what packs are
     available in this object store.  Whenever a pack is added or
     removed, `git update-server-info' should be run to keep this file
     up-to-date if the repository is published for dumb transports.
     _git repack_ does this by default.

objects/info/alternates
     This file records paths to alternate object stores that this
     object store borrows objects from, one pathname per line. Note
     that not only native Git tools use it locally, but the HTTP
     fetcher also tries to use it remotely; this will usually work if
     you have relative paths (relative to the object database, not to
     the repository!) in your alternates file, but it will not work if
     you use absolute paths unless the absolute path in filesystem and
     web URL is the same. See also _objects/info/http-alternates_.

objects/info/http-alternates
     This file records URLs to alternate object stores that this object
     store borrows objects from, to be used when the repository is
     fetched over HTTP.

refs
     References are stored in subdirectories of this directory.  The
     _git prune_ command knows to preserve objects reachable from refs
     found in this directory and its subdirectories.

refs/heads/`name'
     records tip-of-the-tree commit objects of branch `name'

refs/tags/`name'
     records any object name (not necessarily a commit object, or a tag
     object that points at a commit object).

refs/remotes/`name'
     records tip-of-the-tree commit objects of branches copied from a
     remote repository.

packed-refs
     records the same information as refs/heads/, refs/tags/, and
     friends record in a more efficient way.  See git-pack-refs(1).

HEAD
     A symref (see glossary) to the `refs/heads/' namespace describing
     the currently active branch.  It does not mean much if the
     repository is not associated with any working tree (i.e. a _bare_
     repository), but a valid git repository *must* have the HEAD file;
     some porcelains may use it to guess the designated "default"
     branch of the repository (usually _master_).  It is legal if the
     named branch _name_ does not (yet) exist.  In some legacy setups,
     it is a symbolic link instead of a symref that points at the
     current branch.

     HEAD can also record a specific commit directly, instead of being
     a symref to point at the current branch.  Such a state is often
     called _detached HEAD._  See git-checkout(1) for details.

branches
     A slightly deprecated way to store shorthands to be used to
     specify a URL to _git fetch_, _git pull_ and _git push_.  A file
     can be stored as `branches/<name>' and then _name_ can be given to
     these commands in place of _repository_ argument.  See the REMOTES
     section in git-fetch(1) for details.  This mechanism is legacy and
     not likely to be found in modern repositories.

hooks
     Hooks are customization scripts used by various git commands.  A
     handful of sample hooks are installed when _git init_ is run, but
     all of them are disabled by default.  To enable, the `.sample'
     suffix has to be removed from the filename by renaming.  Read
     githooks(5) for more details about each hook.

index
     The current index file for the repository.  It is usually not
     found in a bare repository.

info
     Additional information about the repository is recorded in this
     directory.

info/refs
     This file helps dumb transports discover what refs are available
     in this repository.  If the repository is published for dumb
     transports, this file should be regenerated by _git
     update-server-info_ every time a tag or branch is created or
     modified.  This is normally done from the `hooks/update' hook,
     which is run by the _git-receive-pack_ command when you _git push_
     into the repository.

info/grafts
     This file records fake commit ancestry information, to pretend the
     set of parents a commit has is different from how the commit was
     actually created.  One record per line describes a commit and its
     fake parents by listing their 40-byte hexadecimal object names
     separated by a space and terminated by a newline.

info/exclude
     This file, by convention among Porcelains, stores the exclude
     pattern list. `.gitignore' is the per-directory ignore file.  _git
     status_, _git add_, _git rm_ and _git clean_ look at it but the
     core git commands do not look at it.  See also: gitignore(5).

remotes
     Stores shorthands for URL and default refnames for use when
     interacting with remote repositories via _git fetch_, _git pull_
     and _git push_ commands.  See the REMOTES section in git-fetch(1)
     for details.  This mechanism is legacy and not likely to be found
     in modern repositories.

logs
     Records of changes made to refs are stored in this directory.  See
     git-update-ref(1) for more information.

logs/refs/heads/`name'
     Records all changes made to the branch tip named `name'.

logs/refs/tags/`name'
     Records all changes made to the tag named `name'.

shallow
     This is similar to `info/grafts' but is internally used and
     maintained by shallow clone mechanism.  See `--depth' option to
     git-clone(1) and git-fetch(1).


SEE ALSO
********

git-init(1), git-clone(1), git-fetch(1), git-pack-refs(1), git-gc(1),
git-checkout(1), gitglossary(7), The Git User’s Manual
(user-manual.html)



GIT
***

Part of the git(1) suite.


File: gitman.info,  Node: gitweb.conf,  Up: Top

Name
****

gitweb.conf — Gitweb (git web interface) configuration file



Synopsis
********

/etc/gitweb.conf, /etc/gitweb-common.conf, $GITWEBDIR/gitweb_config.perl



DESCRIPTION
***********

The gitweb CGI script for viewing Git repositories over the web uses a
perl script fragment as its configuration file.  You can set variables
using "`our $variable = value'"; text from a "#" character until the
end of a line is ignored.  See *perlsyn*(1) for details.

   An example:

     # gitweb configuration file for http://git.example.org
     #
     our $projectroot = "/srv/git"; # FHS recommendation
     our $site_name = 'Example.org >> Repos';

   The configuration file is used to override the default settings that
were built into gitweb at the time the _gitweb.cgi_ script was
generated.

   While one could just alter the configuration settings in the gitweb
CGI itself, those changes would be lost upon upgrade.  Configuration
settings might also be placed into a file in the same directory as the
CGI script with the default name _gitweb_config.perl_ — allowing
one to have multiple gitweb instances with different configurations by
the use of symlinks.

   Note that some configuration can be controlled on per-repository
rather than gitweb-wide basis: see "Per-repository gitweb
configuration" subsection on gitweb(1) manpage.



DISCUSSION
**********

Gitweb reads configuration data from the following sources in the
following order:

   * built-in values (some set during build stage),

   * common system-wide configuration file (defaults to
     _/etc/gitweb-common.conf_),

   * either per-instance configuration file (defaults to
     _gitweb_config.perl_ in the same directory as the installed
     gitweb), or if it does not exists then fallback system-wide
     configuration file (defaults to _/etc/gitweb.conf_).

   Values obtained in later configuration files override values
obtained earlier in the above sequence.

   Locations of the common system-wide configuration file, the fallback
system-wide configuration file and the per-instance configuration file
are defined at compile time using build-time Makefile configuration
variables, respectively `GITWEB_CONFIG_COMMON', `GITWEB_CONFIG_SYSTEM'
and `GITWEB_CONFIG'.

   You can also override locations of gitweb configuration files during
runtime by setting the following environment variables:
`GITWEB_CONFIG_COMMON', `GITWEB_CONFIG_SYSTEM' and `GITWEB_CONFIG' to a
non-empty value.

   The syntax of the configuration files is that of Perl, since these
files are handled by sourcing them as fragments of Perl code (the
language that gitweb itself is written in). Variables are typically set
using the `our' qualifier (as in "`our $variable = <value>;'") to avoid
syntax errors if a new version of gitweb no longer uses a variable and
therefore stops declaring it.

   You can include other configuration file using read_config_file()
subroutine.  For example, one might want to put gitweb configuration
related to access control for viewing repositories via Gitolite (one of
git repository management tools) in a separate file, e.g. in
_/etc/gitweb-gitolite.conf_.  To include it, put

     read_config_file("/etc/gitweb-gitolite.conf");

   somewhere in gitweb configuration file used, e.g. in per-installation
gitweb configuration file.  Note that read_config_file() checks itself
that the file it reads exists, and does nothing if it is not found.  It
also handles errors in included file.

   The default configuration with no configuration file at all may work
perfectly well for some installations.  Still, a configuration file is
useful for customizing or tweaking the behavior of gitweb in many ways,
and some optional features will not be present unless explicitly
enabled using the configurable `%features' variable (see also
"Configuring gitweb features" section below).



CONFIGURATION VARIABLES
***********************

Some configuration variables have their default values (embedded in the
CGI script) set during building gitweb — if that is the case,
this fact is put in their description.  See gitweb’s _INSTALL_ file
for instructions on building and installing gitweb.



Location of repositories
========================

The configuration variables described below control how gitweb finds
git repositories, and how repositories are displayed and accessed.

   See also "Repositories" and later subsections in gitweb(1) manpage.

$projectroot
     Absolute filesystem path which will be prepended to project path;
     the path to repository is `$projectroot/$project'.  Set to
     `$GITWEB_PROJECTROOT' during installation.  This variable has to be
     set correctly for gitweb to find repositories.

     For example, if `$projectroot' is set to "/srv/git" by putting the
     following in gitweb config file:

          our $projectroot = "/srv/git";

     then

          http://git.example.com/gitweb.cgi?p=foo/bar.git

     and its path_info based equivalent

          http://git.example.com/gitweb.cgi/foo/bar.git

     will map to the path _/srv/git/foo/bar.git_ on the filesystem.

$projects_list
     Name of a plain text file listing projects, or a name of directory
     to be scanned for projects.

     Project list files should list one project per line, with each line
     having the following format

          <URI-encoded filesystem path to repository> SP <URI-encoded repository owner>

     The default value of this variable is determined by the
     `GITWEB_LIST' makefile variable at installation time.  If this
     variable is empty, gitweb will fall back to scanning the
     `$projectroot' directory for repositories.

$project_maxdepth
     If `$projects_list' variable is unset, gitweb will recursively
     scan filesystem for git repositories.  The `$project_maxdepth' is
     used to limit traversing depth, relative to `$projectroot'
     (starting point); it means that directories which are further from
     `$projectroot' than `$project_maxdepth' will be skipped.

     It is purely performance optimization, originally intended for
     MacOS X, where recursive directory traversal is slow.  Gitweb
     follows symbolic links, but it detects cycles, ignoring any
     duplicate files and directories.

     The default value of this variable is determined by the build-time
     configuration variable `GITWEB_PROJECT_MAXDEPTH', which defaults to
     2007.

$export_ok
     Show repository only if this file exists (in repository).  Only
     effective if this variable evaluates to true.  Can be set when
     building gitweb by setting `GITWEB_EXPORT_OK'.  This path is
     relative to `GIT_DIR'.  git-daemon[1] uses _git-daemon-export-ok_,
     unless started with `--export-all'.  By default this variable is
     not set, which means that this feature is turned off.

$export_auth_hook
     Function used to determine which repositories should be shown.
     This subroutine should take one parameter, the full path to a
     project, and if it returns true, that project will be included in
     the projects list and can be accessed through gitweb as long as it
     fulfills the other requirements described by $export_ok,
     $projects_list, and $projects_maxdepth.  Example:

          our $export_auth_hook = sub { return -e "$_[0]/git-daemon-export-ok"; };

     though the above might be done by using `$export_ok' instead

          our $export_ok = "git-daemon-export-ok";

     If not set (default), it means that this feature is disabled.

     See also more involved example in "Controlling access to git
     repositories" subsection on gitweb(1) manpage.

$strict_export
     Only allow viewing of repositories also shown on the overview page.
     This for example makes `$gitweb_export_ok' file decide if
     repository is available and not only if it is shown.  If
     `$gitweb_list' points to file with list of project, only those
     repositories listed would be available for gitweb.  Can be set
     during building gitweb via `GITWEB_STRICT_EXPORT'.  By default
     this variable is not set, which means that you can directly access
     those repositories that are hidden from projects list page (e.g.
     the are not listed in the $projects_list file).


Finding files
=============

The following configuration variables tell gitweb where to find files.
The values of these variables are paths on the filesystem.

$GIT
     Core git executable to use.  By default set to `$GIT_BINDIR/git',
     which in turn is by default set to `$(bindir)/git'.  If you use
     git installed from a binary package, you should usually set this
     to "/usr/bin/git".  This can just be "git" if your web server has
     a sensible PATH; from security point of view it is better to use
     absolute path to git binary.  If you have multiple git versions
     installed it can be used to choose which one to use.  Must be
     (correctly) set for gitweb to be able to work.

$mimetypes_file
     File to use for (filename extension based) guessing of MIME types
     before trying _/etc/mime.types_.  *NOTE* that this path, if
     relative, is taken as relative to the current git repository, not
     to CGI script.  If unset, only _/etc/mime.types_ is used (if
     present on filesystem).  If no mimetypes file is found, mimetype
     guessing based on extension of file is disabled.  Unset by default.

$highlight_bin
     Path to the highlight executable to use (it must be the one from
     http://www.andre-simon.de (http://www.andre-simon.de) due to
     assumptions about parameters and output).  By default set to
     _highlight_; set it to full path to highlight executable if it is
     not installed on your web server’s PATH.  Note that _highlight_
     feature must be set for gitweb to actually use syntax highlighting.

     *NOTE*: if you want to add support for new file type (supported by
     "highlight" but not used by gitweb), you need to modify
     `%highlight_ext' or `%highlight_basename', depending on whether
     you detect type of file based on extension (for example "sh") or
     on its basename (for example "Makefile").  The keys of these
     hashes are extension and basename, respectively, and value for
     given key is name of syntax to be passed via `--syntax <syntax>'
     to highlighter.

     For example if repositories you are hosting use "phtml" extension
     for PHP files, and you want to have correct syntax-highlighting
     for those files, you can add the following to gitweb configuration:

          our %highlight_ext;
          $highlight_ext{'phtml'} = 'php';



Links and their targets
=======================

The configuration variables described below configure some of gitweb
links: their target and their look (text or image), and where to find
page prerequisites (stylesheet, favicon, images, scripts).  Usually
they are left at their default values, with the possible exception of
`@stylesheets' variable.

@stylesheets
     List of URIs of stylesheets (relative to the base URI of a page).
     You might specify more than one stylesheet, for example to use
     "gitweb.css" as base with site specific modifications in a
     separate stylesheet to make it easier to upgrade gitweb.  For
     example, you can add a `site' stylesheet by putting

          push @stylesheets, "gitweb-site.css";

     in the gitweb config file.  Those values that are relative paths
     are relative to base URI of gitweb.

     This list should contain the URI of gitweb’s standard
     stylesheet.  The default URI of gitweb stylesheet can be set at
     build time using the `GITWEB_CSS' makefile variable.  Its default
     value is _static/gitweb.css_ (or _static/gitweb.min.css_ if the
     `CSSMIN' variable is defined, i.e. if CSS minifier is used during
     build).

     *Note*: there is also a legacy `$stylesheet' configuration
     variable, which was used by older gitweb.  If `$stylesheet'
     variable is defined, only CSS stylesheet given by this variable is
     used by gitweb.

$logo
     Points to the location where you put _git-logo.png_ on your web
     server, or to be more the generic URI of logo, 72x27 size).  This
     image is displayed in the top right corner of each gitweb page and
     used as a logo for the Atom feed.  Relative to the base URI of
     gitweb (as a path).  Can be adjusted when building gitweb using
     `GITWEB_LOGO' variable By default set to _static/git-logo.png_.

$favicon
     Points to the location where you put _git-favicon.png_ on your web
     server, or to be more the generic URI of favicon, which will be
     served as "image/png" type.  Web browsers that support favicons
     (website icons) may display them in the browser’s URL bar and
     next to the site name in bookmarks.  Relative to the base URI of
     gitweb.  Can be adjusted at build time using `GITWEB_FAVICON'
     variable.  By default set to _static/git-favicon.png_.

$javascript
     Points to the location where you put _gitweb.js_ on your web
     server, or to be more generic the URI of JavaScript code used by
     gitweb.  Relative to the base URI of gitweb.  Can be set at build
     time using the `GITWEB_JS' build-time configuration variable.

     The default value is either _static/gitweb.js_, or
     _static/gitweb.min.js_ if the `JSMIN' build variable was defined,
     i.e. if JavaScript minifier was used at build time.  *Note* that
     this single file is generated from multiple individual JavaScript
     "modules".

$home_link
     Target of the home link on the top of all pages (the first part of
     view "breadcrumbs").  By default it is set to the absolute URI of
     a current page (to the value of `$my_uri' variable, or to "/" if
     `$my_uri' is undefined or is an empty string).

$home_link_str
     Label for the "home link" at the top of all pages, leading to
     `$home_link' (usually the main gitweb page, which contains the
     projects list).  It is used as the first component of gitweb’s
     "breadcrumb trail": `<home link> / <project> / <action>'.  Can be
     set at build time using the `GITWEB_HOME_LINK_STR' variable.  By
     default it is set to "projects", as this link leads to the list of
     projects.  Other popular choice it to set it to the name of site.

$logo_url
$logo_label
     URI and label (title) for the Git logo link (or your site logo, if
     you chose to use different logo image). By default, these both
     refer to git homepage, http://git-scm.com (http://git-scm.com); in
     the past, they pointed to git documentation at
     http://www.kernel.org (http://www.kernel.org).


Changing gitweb’s look
========================

You can adjust how pages generated by gitweb look using the variables
described below.  You can change the site name, add common headers and
footers for all pages, and add a description of this gitweb
installation on its main page (which is the projects list page), etc.

$site_name
     Name of your site or organization, to appear in page titles.  Set
     it to something descriptive for clearer bookmarks etc.  If this
     variable is not set or is, then gitweb uses the value of the
     `SERVER_NAME' CGI environment variable, setting site name to
     "$SERVER_NAME Git", or "Untitled Git" if this variable is not set
     (e.g. if running gitweb as standalone script).

     Can be set using the `GITWEB_SITENAME' at build time.  Unset by
     default.

$site_html_head_string
     HTML snippet to be included in the <head> section of each page.
     Can be set using `GITWEB_SITE_HTML_HEAD_STRING' at build time.  No
     default value.

$site_header
     Name of a file with HTML to be included at the top of each page.
     Relative to the directory containing the _gitweb.cgi_ script.  Can
     be set using `GITWEB_SITE_HEADER' at build time.  No default value.

$site_footer
     Name of a file with HTML to be included at the bottom of each page.
     Relative to the directory containing the _gitweb.cgi_ script.  Can
     be set using `GITWEB_SITE_FOOTER' at build time.  No default value.

$home_text
     Name of a HTML file which, if it exists, is included on the gitweb
     projects overview page ("projects_list" view).  Relative to the
     directory containing the gitweb.cgi script.  Default value can be
     adjusted during build time using `GITWEB_HOMETEXT' variable.  By
     default set to _indextext.html_.

$projects_list_description_width
     The width (in characters) of the "Description" column of the
     projects list.  Longer descriptions will be truncated (trying to
     cut at word boundary); the full description is available in the
     _title_ attribute (usually shown on mouseover).  The default is
     25, which might be too small if you use long project descriptions.

$default_projects_order
     Default value of ordering of projects on projects list page, which
     means the ordering used if you don’t explicitly sort projects
     list (if there is no "o" CGI query parameter in the URL).  Valid
     values are "none" (unsorted), "project" (projects are by project
     name, i.e. path to repository relative to `$projectroot'), "descr"
     (project description), "owner", and "age" (by date of most current
     commit).

     Default value is "project".  Unknown value means unsorted.


Changing gitweb’s behavior
============================

These configuration variables control _internal_ gitweb behavior.

$default_blob_plain_mimetype
     Default mimetype for the blob_plain (raw) view, if mimetype
     checking doesn’t result in some other type; by default
     "text/plain".  Gitweb guesses mimetype of a file to display based
     on extension of its filename, using `$mimetypes_file' (if set and
     file exists) and _/etc/mime.types_ files (see *mime.types*(5)
     manpage; only filename extension rules are supported by gitweb).

$default_text_plain_charset
     Default charset for text files. If this is not set, the web server
     configuration will be used.  Unset by default.

$fallback_encoding
     Gitweb assumes this charset when a line contains non-UTF-8
     characters.  The fallback decoding is used without error checking,
     so it can be even "utf-8". The value must be a valid encoding; see
     the *Encoding::Supported*(3pm) man page for a list. The default is
     "latin1", aka. "iso-8859-1".

@diff_opts
     Rename detection options for git-diff and git-diff-tree. The
     default is ('-M'); set it to ('-C') or ('-C', '-C') to also detect
     copies, or set it to () i.e. empty list if you don’t want to
     have renames detection.

     *Note* that rename and especially copy detection can be quite
     CPU-intensive.  Note also that non git tools can have problems with
     patches generated with options mentioned above, especially when
     they involve file copies ('-C') or criss-cross renames ('-B').


Some optional features and policies
===================================

Most of features are configured via `%feature' hash; however some of
extra gitweb features can be turned on and configured using variables
described below.  This list beside configuration variables that control
how gitweb looks does contain variables configuring administrative side
of gitweb (e.g. cross-site scripting prevention; admittedly this as
side effect affects how "summary" pages look like, or load limiting).

@git_base_url_list
     List of git base URLs.  These URLs are used to generate URLs
     describing from where to fetch a project, which are shown on
     project summary page.  The full fetch URL is
     "`$git_base_url/$project'", for each element of this list. You can
     set up multiple base URLs (for example one for `git://' protocol,
     and one for `http://' protocol).

     Note that per repository configuration can be set in
     _$GIT_DIR/cloneurl_ file, or as values of multi-value `gitweb.url'
     configuration variable in project config.  Per-repository
     configuration takes precedence over value composed from
     `@git_base_url_list' elements and project name.

     You can setup one single value (single entry/item in this list) at
     build time by setting the `GITWEB_BASE_URL' built-time
     configuration variable.  By default it is set to (), i.e. an empty
     list.  This means that gitweb would not try to create project URL
     (to fetch) from project name.

$projects_list_group_categories
     Whether to enables the grouping of projects by category on the
     project list page. The category of a project is determined by the
     `$GIT_DIR/category' file or the `gitweb.category' variable in each
     repository’s configuration.  Disabled by default (set to 0).

$project_list_default_category
     Default category for projects for which none is specified.  If
     this is set to the empty string, such projects will remain
     uncategorized and listed at the top, above categorized projects.
     Used only if project categories are enabled, which means if
     `$projects_list_group_categories' is true.  By default set to ""
     (empty string).

$prevent_xss
     If true, some gitweb features are disabled to prevent content in
     repositories from launching cross-site scripting (XSS) attacks.
     Set this to true if you don’t trust the content of your
     repositories.  False by default (set to 0).

$maxload
     Used to set the maximum load that we will still respond to gitweb
     queries.  If the server load exceeds this value then gitweb will
     return "503 Service Unavailable" error.  The server load is taken
     to be 0 if gitweb cannot determine its value.  Currently it works
     only on Linux, where it uses _/proc/loadavg_; the load there is
     the number of active tasks on the system — processes that
     are actually running — averaged over the last minute.

     Set `$maxload' to undefined value (`undef') to turn this feature
     off.  The default value is 300.

$omit_age_column
     If true, omit the column with date of the most current commit on
     the projects list page. It can save a bit of I/O and a fork per
     repository.

$omit_owner
     If true prevents displaying information about repository owner.

$per_request_config
     If this is set to code reference, it will be run once for each
     request.  You can set parts of configuration that change per
     session this way.  For example, one might use the following code
     in a gitweb configuration file

          our $per_request_config = sub {
                  $ENV{GL_USER} = $cgi->remote_user || "gitweb";
          };

     If `$per_request_config' is not a code reference, it is
     interpreted as boolean value.  If it is true gitweb will process
     config files once per request, and if it is false gitweb will
     process config files only once, each time it is executed.  True by
     default (set to 1).

     *NOTE*: `$my_url', `$my_uri', and `$base_url' are overwritten with
     their default values before every request, so if you want to
     change them, be sure to set this variable to true or a code
     reference effecting the desired changes.

     This variable matters only when using persistent web environments
     that serve multiple requests using single gitweb instance, like
     mod_perl, FastCGI or Plackup.


Other variables
===============

Usually you should not need to change (adjust) any of configuration
variables described below; they should be automatically set by gitweb to
correct value.

$version
     Gitweb version, set automatically when creating gitweb.cgi from
     gitweb.perl. You might want to modify it if you are running
     modified gitweb, for example

          our $version .= " with caching";

     if you run modified version of gitweb with caching support.  This
     variable is purely informational, used e.g. in the "generator"
     meta header in HTML header.

$my_url
$my_uri
     Full URL and absolute URL of the gitweb script; in earlier
     versions of gitweb you might have need to set those variables, but
     now there should be no need to do it.  See `$per_request_config'
     if you need to set them still.

$base_url
     Base URL for relative URLs in pages generated by gitweb, (e.g.
     `$logo', `$favicon', `@stylesheets' if they are relative URLs),
     needed and used _<base href="$base_url">_ only for URLs with
     nonempty PATH_INFO.  Usually gitweb sets its value correctly, and
     there is no need to set this variable, e.g. to $my_uri or "/".
     See `$per_request_config' if you need to override it anyway.


CONFIGURING GITWEB FEATURES
***************************

Many gitweb features can be enabled (or disabled) and configured using
the `%feature' hash.  Names of gitweb features are keys of this hash.

   Each `%feature' hash element is a hash reference and has the
following structure:

     "<feature_name>" => {
             "sub" => <feature-sub (subroutine)>,
             "override" => <allow-override (boolean)>,
             "default" => [ <options>... ]
     },

   Some features cannot be overridden per project.  For those features
the structure of appropriate `%feature' hash element has a simpler form:

     "<feature_name>" => {
             "override" => 0,
             "default" => [ <options>... ]
     },

   As one can see it lacks the 'sub' element.

   The meaning of each part of feature configuration is described below:

default
     List (array reference) of feature parameters (if there are any),
     used also to toggle (enable or disable) given feature.

     Note that it is currently *always* an array reference, even if
     feature doesn’t accept any configuration parameters, and
     'default' is used only to turn it on or off.  In such case you
     turn feature on by setting this element to `[1]', and torn it off
     by setting it to `[0]'.  See also the passage about the "blame"
     feature in the "Examples" section.

     To disable features that accept parameters (are configurable), you
     need to set this element to empty list i.e. `[]'.

override
     If this field has a true value then the given feature is
     overriddable, which means that it can be configured (or
     enabled/disabled) on a per-repository basis.

     Usually given "<feature>" is configurable via the
     `gitweb.<feature>' config variable in the per-repository git
     configuration file.

     *Note* that no feature is overriddable by default.

sub
     Internal detail of implementation.  What is important is that if
     this field is not present then per-repository override for given
     feature is not supported.

     You wouldn’t need to ever change it in gitweb config file.


Features in %feature
====================

The gitweb features that are configurable via `%feature' hash are listed
below.  This should be a complete list, but ultimately the authoritative
and complete list is in gitweb.cgi source code, with features described
in the comments.

blame
     Enable the "blame" and "blame_incremental" blob views, showing for
     each line the last commit that modified it; see git-blame(1).
     This can be very CPU-intensive and is therefore disabled by
     default.

     This feature can be configured on a per-repository basis via
     repository’s `gitweb.blame' configuration variable (boolean).

snapshot
     Enable and configure the "snapshot" action, which allows user to
     download a compressed archive of any tree or commit, as produced
     by git-archive(1) and possibly additionally compressed.  This can
     potentially generate high traffic if you have large project.

     The value of 'default' is a list of names of snapshot formats,
     defined in `%known_snapshot_formats' hash, that you wish to offer.
     Supported formats include "tgz", "tbz2", "txz" (gzip/bzip2/xz
     compressed tar archive) and "zip"; please consult gitweb sources
     for a definitive list.  By default only "tgz" is offered.

     This feature can be configured on a per-repository basis via
     repository’s `gitweb.blame' configuration variable, which
     contains a comma separated list of formats or "none" to disable
     snapshots.  Unknown values are ignored.

grep
     Enable grep search, which lists the files in currently selected
     tree (directory) containing the given string; see git-grep(1).
     This can be potentially CPU-intensive, of course.  Enabled by
     default.

     This feature can be configured on a per-repository basis via
     repository’s `gitweb.grep' configuration variable (boolean).

pickaxe
     Enable the so called pickaxe search, which will list the commits
     that introduced or removed a given string in a file.  This can be
     practical and quite faster alternative to "blame" action, but it is
     still potentially CPU-intensive.  Enabled by default.

     The pickaxe search is described in git-log(1) (the description of
     `-S<string>' option, which refers to pickaxe entry in
     gitdiffcore(7) for more details).

     This feature can be configured on a per-repository basis by setting
     repository’s `gitweb.pickaxe' configuration variable (boolean).

show-sizes
     Enable showing size of blobs (ordinary files) in a "tree" view, in
     a separate column, similar to what `ls -l' does; see description of
     `-l' option in git-ls-tree(1) manpage.  This costs a bit of I/O.
     Enabled by default.

     This feature can be configured on a per-repository basis via
     repository’s `gitweb.showsizes' configuration variable (boolean).

patches
     Enable and configure "patches" view, which displays list of
     commits in email (plain text) output format; see also
     git-format-patch(1).  The value is the maximum number of patches
     in a patchset generated in "patches" view.  Set the _default_
     field to a list containing single item of or to an empty list to
     disable patch view, or to a list containing a single negative
     number to remove any limit.  Default value is 16.

     This feature can be configured on a per-repository basis via
     repository’s `gitweb.patches' configuration variable (integer).

avatar
     Avatar support.  When this feature is enabled, views such as
     "shortlog" or "commit" will display an avatar associated with the
     email of each committer and author.

     Currently available providers are *"gravatar"* and *"picon"*.
     Only one provider at a time can be selected (_default_ is one
     element list).  If an unknown provider is specified, the feature
     is disabled.  *Note* that some providers might require extra Perl
     packages to be installed; see _gitweb/INSTALL_ for more details.

     This feature can be configured on a per-repository basis via
     repository’s `gitweb.avatar' configuration variable.

     See also `%avatar_size' with pixel sizes for icons and avatars
     ("default" is used for one-line like "log" and "shortlog", "double"
     is used for two-line like "commit", "commitdiff" or "tag").  If the
     default font sizes or lineheights are changed (e.g. via adding
     extra CSS stylesheet in `@stylesheets'), it may be appropriate to
     change these values.

highlight
     Server-side syntax highlight support in "blob" view.  It requires
     `$highlight_bin' program to be available (see the description of
     this variable in the "Configuration variables" section above), and
     therefore is disabled by default.

     This feature can be configured on a per-repository basis via
     repository’s `gitweb.highlight' configuration variable (boolean).

remote_heads
     Enable displaying remote heads (remote-tracking branches) in the
     "heads" list.  In most cases the list of remote-tracking branches
     is an unnecessary internal private detail, and this feature is
     therefore disabled by default.  git-instaweb(1), which is usually
     used to browse local repositories, enables and uses this feature.

     This feature can be configured on a per-repository basis via
     repository’s `gitweb.remote_heads' configuration variable
     (boolean).

   The remaining features cannot be overridden on a per project basis.

search
     Enable text search, which will list the commits which match author,
     committer or commit text to a given string; see the description of
     `--author', `--committer' and `--grep' options in git-log(1)
     manpage.  Enabled by default.

     Project specific override is not supported.

forks
     If this feature is enabled, gitweb considers projects in
     subdirectories of project root (basename) to be forks of existing
     projects.  For each project `$projname.git', projects in the
     `$projname/' directory and its subdirectories will not be shown in
     the main projects list.  Instead, a '+' mark is shown next to
     `$projname', which links to a "forks" view that lists all the
     forks (all projects in `$projname/' subdirectory).  Additionally a
     "forks" view for a project is linked from project summary page.

     If the project list is taken from a file (`$projects_list' points
     to a file), forks are only recognized if they are listed after the
     main project in that file.

     Project specific override is not supported.

actions
     Insert custom links to the action bar of all project pages.  This
     allows you to link to third-party scripts integrating into gitweb.

     The "default" value consists of a list of triplets in the form
     ‘("<label>", "<link>", "<position>")` where "position" is the
     label after which to insert the link, "link" is a format string
     where `%n' expands to the project name, `%f' to the project path
     within the filesystem (i.e. "$projectroot/$project"), `%h' to the
     current hash ('h’ gitweb parameter) and ‘%b` to the current
     hash base ('hb’ gitweb parameter); ‘%%` expands to '%’.

     For example, at the time this page was written, the
     http://repo.or.cz (http://repo.or.cz) git hosting site set it to
     the following to enable graphical log (using the third party tool
     *git-browser*):

          $feature{'actions'}{'default'} =
                  [ ('graphiclog', '/git-browser/by-commit.html?r=%n', 'summary')];

     This adds a link titled "graphiclog" after the "summary" link,
     leading to `git-browser' script, passing `r=<project>' as a query
     parameter.

     Project specific override is not supported.

timed
     Enable displaying how much time and how many git commands it took
     to generate and display each page in the page footer (at the
     bottom of page).  For example the footer might contain: "This page
     took 6.53325 seconds and 13 git commands to generate."  Disabled
     by default.

     Project specific override is not supported.

javascript-timezone
     Enable and configure the ability to change a common timezone for
     dates in gitweb output via JavaScript.  Dates in gitweb output
     include authordate and committerdate in "commit", "commitdiff" and
     "log" views, and taggerdate in "tag" view.  Enabled by default.

     The value is a list of three values: a default timezone (for if
     the client hasn’t selected some other timezone and saved it in a
     cookie), a name of cookie where to store selected timezone, and a
     CSS class used to mark up dates for manipulation.  If you want to
     turn this feature off, set "default" to empty list: `[]'.

     Typical gitweb config files will only change starting (default)
     timezone, and leave other elements at their default values:

          $feature{'javascript-timezone'}{'default'}[0] = "utc";

     The example configuration presented here is guaranteed to be
     backwards and forward compatible.

     Timezone values can be "local" (for local timezone that browser
     uses), "utc" (what gitweb uses when JavaScript or this feature is
     disabled), or numerical timezones in the form of "+/-HHMM", such
     as "+0200".

     Project specific override is not supported.


EXAMPLES
********

To enable blame, pickaxe search, and snapshot support (allowing
"tar.gz" and "zip" snapshots), while allowing individual projects to
turn them off, put the following in your GITWEB_CONFIG file:

     $feature{'blame'}{'default'} = [1];
     $feature{'blame'}{'override'} = 1;

     $feature{'pickaxe'}{'default'} = [1];
     $feature{'pickaxe'}{'override'} = 1;

     $feature{'snapshot'}{'default'} = ['zip', 'tgz'];
     $feature{'snapshot'}{'override'} = 1;

   If you allow overriding for the snapshot feature, you can specify
which snapshot formats are globally disabled. You can also add any
command line options you want (such as setting the compression level).
For instance, you can disable Zip compressed snapshots and set
*gzip*(1) to run at level 6 by adding the following lines to your
gitweb configuration file:

     $known_snapshot_formats{'zip'}{'disabled'} = 1;
     $known_snapshot_formats{'tgz'}{'compressor'} = ['gzip','-6'];


ENVIRONMENT
***********

The location of per-instance and system-wide configuration files can be
overridden using the following environment variables:

GITWEB_CONFIG
     Sets location of per-instance configuration file.

GITWEB_CONFIG_SYSTEM
     Sets location of fallback system-wide configuration file.  This
     file is read only if per-instance one does not exist.

GITWEB_CONFIG_COMMON
     Sets location of common system-wide configuration file.


FILES
*****

gitweb_config.perl
     This is default name of per-instance configuration file.  The
     format of this file is described above.

/etc/gitweb.conf
     This is default name of fallback system-wide configuration file.
     This file is used only if per-instance configuration variable is
     not found.

/etc/gitweb-common.conf
     This is default name of common system-wide configuration file.


SEE ALSO
********

gitweb(1), git-instaweb(1)

   _gitweb/README_, _gitweb/INSTALL_



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitcli,  Up: Top

Name
****

gitcli — git command line interface and conventions



Synopsis
********

gitcli



DESCRIPTION
***********

This manual describes the convention used throughout git CLI.

   Many commands take revisions (most often "commits", but sometimes
"tree-ish", depending on the context and command) and paths as their
arguments.  Here are the rules:

   * Revisions come first and then paths.  E.g. in `git diff v1.0 v2.0
     arch/x86 include/asm-x86', `v1.0' and `v2.0' are revisions and
     `arch/x86' and `include/asm-x86' are paths.

   * When an argument can be misunderstood as either a revision or a
     path, they can be disambiguated by placing `--' between them.
     E.g. `git diff -- HEAD' is, "I have a file called HEAD in my work
     tree.  Please show changes between the version I staged in the
     index and what I have in the work tree for that file". not "show
     difference between the HEAD commit and the work tree as a whole".
     You can say `git diff HEAD --' to ask for the latter.

   * Without disambiguating `--', git makes a reasonable guess, but
     errors out and asking you to disambiguate when ambiguous.  E.g. if
     you have a file called HEAD in your work tree, `git diff HEAD' is
     ambiguous, and you have to say either `git diff HEAD --' or `git
     diff -- HEAD' to disambiguate.

     When writing a script that is expected to handle random
     user-input, it is a good practice to make it explicit which
     arguments are which by placing disambiguating `--' at appropriate
     places.

   * Many commands allow wildcards in paths, but you need to protect
     them from getting globbed by the shell.  These two mean different
     things:

          $ git checkout -- *.c
          $ git checkout -- \*.c

     The former lets your shell expand the fileglob, and you are asking
     the dot-C files in your working tree to be overwritten with the
     version in the index.  The latter passes the `*.c' to Git, and you
     are asking the paths in the index that match the pattern to be
     checked out to your working tree.  After running `git add hello.c;
     rm hello.c', you will _not_ see `hello.c' in your working tree
     with the former, but with the latter you will.

   Here are the rules regarding the "flags" that you should follow when
you are scripting git:

   * it’s preferred to use the non dashed form of git commands, which
     means that you should prefer `git foo' to `git-foo'.

   * splitting short options to separate words (prefer `git foo -a -b'
     to `git foo -ab', the latter may not even work).

   * when a command line option takes an argument, use the _sticked_
     form.  In other words, write `git foo -oArg' instead of `git foo
     -o Arg' for short options, and `git foo --long-opt=Arg' instead of
     `git foo --long-opt Arg' for long options.  An option that takes
     optional option-argument must be written in the _sticked_ form.

   * when you give a revision parameter to a command, make sure the
     parameter is not ambiguous with a name of a file in the work tree.
     E.g. do not write `git log -1 HEAD' but write `git log -1 HEAD
     --'; the former will not work if you happen to have a file called
     `HEAD' in the work tree.

   * many commands allow a long option "-option" to be abbreviated only
     to their unique prefix (e.g. if there is no other option whose
     name begins with "opt", you may be able to spell "-opt" to invoke
     the "-option" flag), but you should fully spell them out when
     writing your scripts; later versions of Git may introduce a new
     option whose name shares the same prefix, e.g. "-optimize", to
     make a short prefix that used to be unique no longer unique.


ENHANCED OPTION PARSER
**********************

From the git 1.5.4 series and further, many git commands (not all of
them at the time of the writing though) come with an enhanced option
parser.

   Here is an exhaustive list of the facilities provided by this option
parser.



Magic Options
=============

Commands which have the enhanced option parser activated all understand
a couple of magic command line options:

-h
     gives a pretty printed usage of the command.

          $ git describe -h
          usage: git describe [options] <committish>*

              --contains            find the tag that comes after the commit
              --debug               debug search strategy on stderr
              --all                 use any ref in .git/refs
              --tags                use any tag in .git/refs/tags
              --abbrev [<n>]        use <n> digits to display SHA-1s
              --candidates <n>      consider <n> most recent tags (default: 10)

-help-all
     Some git commands take options that are only used for plumbing or
     that are deprecated, and such options are hidden from the default
     usage. This option gives the full list of options.


Negating options
================

Options with long option names can be negated by prefixing `--no-'. For
example, `git branch' has the option `--track' which is _on_ by
default. You can use `--no-track' to override that behaviour. The same
goes for `--color' and `--no-color'.



Aggregating short options
=========================

Commands that support the enhanced option parser allow you to aggregate
short options. This means that you can for example use `git rm -rf' or
`git clean -fdx'.



Separating argument from the option
===================================

You can write the mandatory option parameter to an option as a separate
word on the command line.  That means that all the following uses work:

     $ git foo --long-opt=Arg
     $ git foo --long-opt Arg
     $ git foo -oArg
     $ git foo -o Arg

   However, this is *NOT* allowed for switches with an optional value,
where the _sticked_ form must be used:

     $ git describe --abbrev HEAD     # correct
     $ git describe --abbrev=10 HEAD  # correct
     $ git describe --abbrev 10 HEAD  # NOT WHAT YOU MEANT


NOTES ON FREQUENTLY CONFUSED OPTIONS
************************************

Many commands that can work on files in the working tree and/or in the
index can take `--cached' and/or `--index' options.  Sometimes people
incorrectly think that, because the index was originally called cache,
these two are synonyms.  They are *not* — these two options mean
very different things.

   * The `--cached' option is used to ask a command that usually works
     on files in the working tree to *only* work with the index.  For
     example, `git grep', when used without a commit to specify from
     which commit to look for strings in, usually works on files in the
     working tree, but with the `--cached' option, it looks for strings
     in the index.

   * The `--index' option is used to ask a command that usually works
     on files in the working tree to *also* affect the index.  For
     example, `git stash apply' usually merges changes recorded in a
     stash to the working tree, but with the `--index' option, it also
     merges changes to the index as well.

   `git apply' command can be used with `--cached' and `--index' (but
not at the same time).  Usually the command only affects the files in
the working tree, but with `--index', it patches both the files and
their index entries, and with `--cached', it modifies only the index
entries.

   See also http://marc.info/?l=git&m=116563135620359
(http://marc.info/?l=git&m=116563135620359) and
http://marc.info/?l=git&m=119150393620273
(http://marc.info/?l=git&m=119150393620273) for further information.



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gittutorial,  Up: Top

Name
****

gittutorial — A tutorial introduction to git (for version 1.5.1 or
newer)



Synopsis
********

     git *


DESCRIPTION
***********

This tutorial explains how to import a new project into git, make
changes to it, and share changes with other developers.

   If you are instead primarily interested in using git to fetch a
project, for example, to test the latest version, you may prefer to
start with the first two chapters of The Git User’s Manual
(user-manual.html).

   First, note that you can get documentation for a command such as
`git log --graph' with:

     $ man git-log

   or:

     $ git help log

   With the latter, you can use the manual viewer of your choice; see
git-help(1) for more information.

   It is a good idea to introduce yourself to git with your name and
public email address before doing any operation.  The easiest way to do
so is:

     $ git config --global user.name "Your Name Comes Here"
     $ git config --global user.email you@yourdomain.example.com


Importing a new project
***********************

Assume you have a tarball project.tar.gz with your initial work.  You
can place it under git revision control as follows.

     $ tar xzf project.tar.gz
     $ cd project
     $ git init

   Git will reply

     Initialized empty Git repository in .git/

   You’ve now initialized the working directory—you may notice a new
directory created, named ".git".

   Next, tell git to take a snapshot of the contents of all files under
the current directory (note the _._), with _git add_:

     $ git add .

   This snapshot is now stored in a temporary staging area which git
calls the "index".  You can permanently store the contents of the index
in the repository with _git commit_:

     $ git commit

   This will prompt you for a commit message.  You’ve now stored the
first version of your project in git.



Making changes
**************

Modify some files, then add their updated contents to the index:

     $ git add file1 file2 file3

   You are now ready to commit.  You can see what is about to be
committed using _git diff_ with the -cached option:

     $ git diff --cached

   (Without -cached, _git diff_ will show you any changes that you’ve
made but not yet added to the index.)  You can also get a brief summary
of the situation with _git status_:

     $ git status
     # On branch master
     # Changes to be committed:
     #   (use "git reset HEAD <file>..." to unstage)
     #
     #       modified:   file1
     #       modified:   file2
     #       modified:   file3
     #

   If you need to make any further adjustments, do so now, and then add
any newly modified content to the index.  Finally, commit your changes
with:

     $ git commit

   This will again prompt you for a message describing the change, and
then record a new version of the project.

   Alternatively, instead of running _git add_ beforehand, you can use

     $ git commit -a

   which will automatically notice any modified (but not new) files, add
them to the index, and commit, all in one step.

   A note on commit messages: Though not required, it’s a good idea to
begin the commit message with a single short (less than 50 character)
line summarizing the change, followed by a blank line and then a more
thorough description.  Tools that turn commits into email, for example,
use the first line on the Subject: line and the rest of the commit in
the body.



Git tracks content not files
****************************

Many revision control systems provide an `add' command that tells the
system to start tracking changes to a new file.  Git’s `add' command
does something simpler and more powerful: _git add_ is used both for new
and newly modified files, and in both cases it takes a snapshot of the
given files and stages that content in the index, ready for inclusion in
the next commit.



Viewing project history
***********************

At any point you can view the history of your changes using

     $ git log

   If you also want to see complete diffs at each step, use

     $ git log -p

   Often the overview of the change is useful to get a feel of each step

     $ git log --stat --summary


Managing branches
*****************

A single git repository can maintain multiple branches of development.
To create a new branch named "experimental", use

     $ git branch experimental

   If you now run

     $ git branch

   you’ll get a list of all existing branches:

       experimental
     * master

   The "experimental" branch is the one you just created, and the
"master" branch is a default branch that was created for you
automatically.  The asterisk marks the branch you are currently on; type

     $ git checkout experimental

   to switch to the experimental branch.  Now edit a file, commit the
change, and switch back to the master branch:

     (edit file)
     $ git commit -a
     $ git checkout master

   Check that the change you made is no longer visible, since it was
made on the experimental branch and you’re back on the master branch.

   You can make a different change on the master branch:

     (edit file)
     $ git commit -a

   at this point the two branches have diverged, with different changes
made in each.  To merge the changes made in experimental into master,
run

     $ git merge experimental

   If the changes don’t conflict, you’re done.  If there are
conflicts, markers will be left in the problematic files showing the
conflict;

     $ git diff

   will show this.  Once you’ve edited the files to resolve the
conflicts,

     $ git commit -a

   will commit the result of the merge. Finally,

     $ gitk

   will show a nice graphical representation of the resulting history.

   At this point you could delete the experimental branch with

     $ git branch -d experimental

   This command ensures that the changes in the experimental branch are
already in the current branch.

   If you develop on a branch crazy-idea, then regret it, you can always
delete the branch with

     $ git branch -D crazy-idea

   Branches are cheap and easy, so this is a good way to try something
out.



Using git for collaboration
***************************

Suppose that Alice has started a new project with a git repository in
/home/alice/project, and that Bob, who has a home directory on the same
machine, wants to contribute.

   Bob begins with:

     bob$ git clone /home/alice/project myrepo

   This creates a new directory "myrepo" containing a clone of Alice’s
repository.  The clone is on an equal footing with the original
project, possessing its own copy of the original project’s history.

   Bob then makes some changes and commits them:

     (edit files)
     bob$ git commit -a
     (repeat as necessary)

   When he’s ready, he tells Alice to pull changes from the repository
at /home/bob/myrepo.  She does this with:

     alice$ cd /home/alice/project
     alice$ git pull /home/bob/myrepo master

   This merges the changes from Bob’s "master" branch into Alice’s
current branch.  If Alice has made her own changes in the meantime,
then she may need to manually fix any conflicts.

   The "pull" command thus performs two operations: it fetches changes
from a remote branch, then merges them into the current branch.

   Note that in general, Alice would want her local changes committed
before initiating this "pull".  If Bob’s work conflicts with what
Alice did since their histories forked, Alice will use her working tree
and the index to resolve conflicts, and existing local changes will
interfere with the conflict resolution process (git will still perform
the fetch but will refuse to merge -- Alice will have to get rid of her
local changes in some way and pull again when this happens).

   Alice can peek at what Bob did without merging first, using the
"fetch" command; this allows Alice to inspect what Bob did, using a
special symbol "FETCH_HEAD", in order to determine if he has anything
worth pulling, like this:

     alice$ git fetch /home/bob/myrepo master
     alice$ git log -p HEAD..FETCH_HEAD

   This operation is safe even if Alice has uncommitted local changes.
The range notation "HEAD..FETCH_HEAD" means "show everything that is
reachable from the FETCH_HEAD but exclude anything that is reachable
from HEAD".  Alice already knows everything that leads to her current
state (HEAD), and reviews what Bob has in his state (FETCH_HEAD) that
she has not seen with this command.

   If Alice wants to visualize what Bob did since their histories forked
she can issue the following command:

     $ gitk HEAD..FETCH_HEAD

   This uses the same two-dot range notation we saw earlier with _git
log_.

   Alice may want to view what both of them did since they forked.  She
can use three-dot form instead of the two-dot form:

     $ gitk HEAD...FETCH_HEAD

   This means "show everything that is reachable from either one, but
exclude anything that is reachable from both of them".

   Please note that these range notation can be used with both gitk and
"git log".

   After inspecting what Bob did, if there is nothing urgent, Alice may
decide to continue working without pulling from Bob.  If Bob’s history
does have something Alice would immediately need, Alice may choose to
stash her work-in-progress first, do a "pull", and then finally unstash
her work-in-progress on top of the resulting history.

   When you are working in a small closely knit group, it is not
unusual to interact with the same repository over and over again.  By
defining _remote_ repository shorthand, you can make it easier:

     alice$ git remote add bob /home/bob/myrepo

   With this, Alice can perform the first part of the "pull" operation
alone using the _git fetch_ command without merging them with her own
branch, using:

     alice$ git fetch bob

   Unlike the longhand form, when Alice fetches from Bob using a remote
repository shorthand set up with _git remote_, what was fetched is
stored in a remote-tracking branch, in this case `bob/master'.  So
after this:

     alice$ git log -p master..bob/master

   shows a list of all the changes that Bob made since he branched from
Alice’s master branch.

   After examining those changes, Alice could merge the changes into
her master branch:

     alice$ git merge bob/master

   This `merge' can also be done by _pulling from her own
remote-tracking branch_, like this:

     alice$ git pull . remotes/bob/master

   Note that git pull always merges into the current branch, regardless
of what else is given on the command line.

   Later, Bob can update his repo with Alice’s latest changes using

     bob$ git pull

   Note that he doesn’t need to give the path to Alice’s repository;
when Bob cloned Alice’s repository, git stored the location of her
repository in the repository configuration, and that location is used
for pulls:

     bob$ git config --get remote.origin.url
     /home/alice/project

   (The complete configuration created by _git clone_ is visible using
`git config -l', and the git-config(1) man page explains the meaning of
each option.)

   Git also keeps a pristine copy of Alice’s master branch under the
name "origin/master":

     bob$ git branch -r
       origin/master

   If Bob later decides to work from a different host, he can still
perform clones and pulls using the ssh protocol:

     bob$ git clone alice.org:/home/alice/project myrepo

   Alternatively, git has a native protocol, or can use rsync or http;
see git-pull(1) for details.

   Git can also be used in a CVS-like mode, with a central repository
that various users push changes to; see git-push(1) and
gitcvs-migration(7).



Exploring history
*****************

Git history is represented as a series of interrelated commits.  We
have already seen that the _git log_ command can list those commits.
Note that first line of each git log entry also gives a name for the
commit:

     $ git log
     commit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7
     Author: Junio C Hamano <junkio@cox.net>
     Date:   Tue May 16 17:18:22 2006 -0700

         merge-base: Clarify the comments on post processing.

   We can give this name to _git show_ to see the details about this
commit.

     $ git show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7

   But there are other ways to refer to commits.  You can use any
initial part of the name that is long enough to uniquely identify the
commit:

     $ git show c82a22c39c   # the first few characters of the name are
                             # usually enough
     $ git show HEAD         # the tip of the current branch
     $ git show experimental # the tip of the "experimental" branch

   Every commit usually has one "parent" commit which points to the
previous state of the project:

     $ git show HEAD^  # to see the parent of HEAD
     $ git show HEAD^^ # to see the grandparent of HEAD
     $ git show HEAD~4 # to see the great-great grandparent of HEAD

   Note that merge commits may have more than one parent:

     $ git show HEAD^1 # show the first parent of HEAD (same as HEAD^)
     $ git show HEAD^2 # show the second parent of HEAD

   You can also give commits names of your own; after running

     $ git tag v2.5 1b2e1d63ff

   you can refer to 1b2e1d63ff by the name "v2.5".  If you intend to
share this name with other people (for example, to identify a release
version), you should create a "tag" object, and perhaps sign it; see
git-tag(1) for details.

   Any git command that needs to know a commit can take any of these
names.  For example:

     $ git diff v2.5 HEAD     # compare the current HEAD to v2.5
     $ git branch stable v2.5 # start a new branch named "stable" based
                              # at v2.5
     $ git reset --hard HEAD^ # reset your current branch and working
                              # directory to its state at HEAD^

   Be careful with that last command: in addition to losing any changes
in the working directory, it will also remove all later commits from
this branch.  If this branch is the only branch containing those
commits, they will be lost.  Also, don’t use _git reset_ on a
publicly-visible branch that other developers pull from, as it will
force needless merges on other developers to clean up the history.  If
you need to undo changes that you have pushed, use _git revert_ instead.

   The _git grep_ command can search for strings in any version of your
project, so

     $ git grep "hello" v2.5

   searches for all occurrences of "hello" in v2.5.

   If you leave out the commit name, _git grep_ will search any of the
files it manages in your current directory.  So

     $ git grep "hello"

   is a quick way to search just the files that are tracked by git.

   Many git commands also take sets of commits, which can be specified
in a number of ways.  Here are some examples with _git log_:

     $ git log v2.5..v2.6            # commits between v2.5 and v2.6
     $ git log v2.5..                # commits since v2.5
     $ git log --since="2 weeks ago" # commits from the last 2 weeks
     $ git log v2.5.. Makefile       # commits since v2.5 which modify
                                     # Makefile

   You can also give _git log_ a "range" of commits where the first is
not necessarily an ancestor of the second; for example, if the tips of
the branches "stable" and "master" diverged from a common commit some
time ago, then

     $ git log stable..master

   will list commits made in the master branch but not in the stable
branch, while

     $ git log master..stable

   will show the list of commits made on the stable branch but not the
master branch.

   The _git log_ command has a weakness: it must present commits in a
list.  When the history has lines of development that diverged and then
merged back together, the order in which _git log_ presents those
commits is meaningless.

   Most projects with multiple contributors (such as the Linux kernel,
or git itself) have frequent merges, and _gitk_ does a better job of
visualizing their history.  For example,

     $ gitk --since="2 weeks ago" drivers/

   allows you to browse any commits from the last 2 weeks of commits
that modified files under the "drivers" directory.  (Note: you can
adjust gitk’s fonts by holding down the control key while pressing
"-" or "+".)

   Finally, most commands that take filenames will optionally allow you
to precede any filename by a commit, to specify a particular version of
the file:

     $ git diff v2.5:Makefile HEAD:Makefile.in

   You can also use _git show_ to see any such file:

     $ git show v2.5:Makefile


Next Steps
**********

This tutorial should be enough to perform basic distributed revision
control for your projects.  However, to fully understand the depth and
power of git you need to understand two simple ideas on which it is
based:

   * The object database is the rather elegant system used to store the
     history of your project—files, directories, and commits.

   * The index file is a cache of the state of a directory tree, used
     to create commits, check out working directories, and hold the
     various trees involved in a merge.

   Part two of this tutorial explains the object database, the index
file, and a few other odds and ends that you’ll need to make the most
of git. You can find it at gittutorial-2(7).

   If you don’t want to continue with that right away, a few other
digressions that may be interesting at this point are:

   * git-format-patch(1), git-am(1): These convert series of git
     commits into emailed patches, and vice versa, useful for projects
     such as the Linux kernel which rely heavily on emailed patches.

   * git-bisect(1): When there is a regression in your project, one way
     to track down the bug is by searching through the history to find
     the exact commit that’s to blame.  Git bisect can help you
     perform a binary search for that commit.  It is smart enough to
     perform a close-to-optimal search even in the case of complex
     non-linear history with lots of merged branches.

   * gitworkflows(7): Gives an overview of recommended workflows.

   * Everyday GIT with 20 Commands Or So (everyday.html)

   * gitcvs-migration(7): Git for CVS users.


SEE ALSO
********

gittutorial-2(7), gitcvs-migration(7), gitcore-tutorial(7),
gitglossary(7), git-help(1), gitworkflows(7), Everyday git
(everyday.html), The Git User’s Manual (user-manual.html)



GIT
***

Part of the git(1) suite.


File: gitman.info,  Node: gittutorial-2,  Up: Top

Name
****

gittutorial-2 — A tutorial introduction to git: part two



Synopsis
********

     git *


DESCRIPTION
***********

You should work through gittutorial(7) before reading this tutorial.

   The goal of this tutorial is to introduce two fundamental pieces of
git’s architecture—the object database and the index file—and to
provide the reader with everything necessary to understand the rest of
the git documentation.



The git object database
***********************

Let’s start a new project and create a small amount of history:

     $ mkdir test-project
     $ cd test-project
     $ git init
     Initialized empty Git repository in .git/
     $ echo 'hello world' > file.txt
     $ git add .
     $ git commit -a -m "initial commit"
     [master (root-commit) 54196cc] initial commit
      1 file changed, 1 insertion(+)
      create mode 100644 file.txt
     $ echo 'hello world!' >file.txt
     $ git commit -a -m "add emphasis"
     [master c4d59f3] add emphasis
      1 file changed, 1 insertion(+), 1 deletion(-)

   What are the 7 digits of hex that git responded to the commit with?

   We saw in part one of the tutorial that commits have names like this.
It turns out that every object in the git history is stored under a
40-digit hex name.  That name is the SHA1 hash of the object’s
contents; among other things, this ensures that git will never store
the same data twice (since identical data is given an identical SHA1
name), and that the contents of a git object will never change (since
that would change the object’s name as well). The 7 char hex strings
here are simply the abbreviation of such 40 character long strings.
Abbreviations can be used everywhere where the 40 character strings can
be used, so long as they are unambiguous.

   It is expected that the content of the commit object you created
while following the example above generates a different SHA1 hash than
the one shown above because the commit object records the time when it
was created and the name of the person performing the commit.

   We can ask git about this particular object with the `cat-file'
command. Don’t copy the 40 hex digits from this example but use those
from your own version. Note that you can shorten it to only a few
characters to save yourself typing all 40 hex digits:

     $ git cat-file -t 54196cc2
     commit
     $ git cat-file commit 54196cc2
     tree 92b8b694ffb1675e5975148e1121810081dbdffe
     author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500
     committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500

     initial commit

   A tree can refer to one or more "blob" objects, each corresponding to
a file.  In addition, a tree can also refer to other tree objects, thus
creating a directory hierarchy.  You can examine the contents of any
tree using ls-tree (remember that a long enough initial portion of the
SHA1 will also work):

     $ git ls-tree 92b8b694
     100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file.txt

   Thus we see that this tree has one file in it.  The SHA1 hash is a
reference to that file’s data:

     $ git cat-file -t 3b18e512
     blob

   A "blob" is just file data, which we can also examine with cat-file:

     $ git cat-file blob 3b18e512
     hello world

   Note that this is the old file data; so the object that git named in
its response to the initial tree was a tree with a snapshot of the
directory state that was recorded by the first commit.

   All of these objects are stored under their SHA1 names inside the git
directory:

     $ find .git/objects/
     .git/objects/
     .git/objects/pack
     .git/objects/info
     .git/objects/3b
     .git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad
     .git/objects/92
     .git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe
     .git/objects/54
     .git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7
     .git/objects/a0
     .git/objects/a0/423896973644771497bdc03eb99d5281615b51
     .git/objects/d0
     .git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59
     .git/objects/c4
     .git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241

   and the contents of these files is just the compressed data plus a
header identifying their length and their type.  The type is either a
blob, a tree, a commit, or a tag.

   The simplest commit to find is the HEAD commit, which we can find
from .git/HEAD:

     $ cat .git/HEAD
     ref: refs/heads/master

   As you can see, this tells us which branch we’re currently on, and
it tells us this by naming a file under the .git directory, which itself
contains a SHA1 name referring to a commit object, which we can examine
with cat-file:

     $ cat .git/refs/heads/master
     c4d59f390b9cfd4318117afde11d601c1085f241
     $ git cat-file -t c4d59f39
     commit
     $ git cat-file commit c4d59f39
     tree d0492b368b66bdabf2ac1fd8c92b39d3db916e59
     parent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7
     author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500
     committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500

     add emphasis

   The "tree" object here refers to the new state of the tree:

     $ git ls-tree d0492b36
     100644 blob a0423896973644771497bdc03eb99d5281615b51    file.txt
     $ git cat-file blob a0423896
     hello world!

   and the "parent" object refers to the previous commit:

     $ git cat-file commit 54196cc2
     tree 92b8b694ffb1675e5975148e1121810081dbdffe
     author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500
     committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500

     initial commit

   The tree object is the tree we examined first, and this commit is
unusual in that it lacks any parent.

   Most commits have only one parent, but it is also common for a commit
to have multiple parents.   In that case the commit represents a merge,
with the parent references pointing to the heads of the merged branches.

   Besides blobs, trees, and commits, the only remaining type of object
is a "tag", which we won’t discuss here; refer to git-tag(1) for
details.

   So now we know how git uses the object database to represent a
project’s history:

   * "commit" objects refer to "tree" objects representing the snapshot
     of a directory tree at a particular point in the history, and
     refer to "parent" commits to show how they’re connected into the
     project history.

   * "tree" objects represent the state of a single directory,
     associating directory names to "blob" objects containing file data
     and "tree" objects containing subdirectory information.

   * "blob" objects contain file data without any other structure.

   * References to commit objects at the head of each branch are stored
     in files under .git/refs/heads/.

   * The name of the current branch is stored in .git/HEAD.

   Note, by the way, that lots of commands take a tree as an argument.
But as we can see above, a tree can be referred to in many different
ways—by the SHA1 name for that tree, by the name of a commit that
refers to the tree, by the name of a branch whose head refers to that
tree, etc.-and most such commands can accept any of these names.

   In command synopses, the word "tree-ish" is sometimes used to
designate such an argument.



The index file
**************

The primary tool we’ve been using to create commits is `git-commit
-a', which creates a commit including every change you’ve made to
your working tree.  But what if you want to commit changes only to
certain files?  Or only certain changes to certain files?

   If we look at the way commits are created under the cover, we’ll
see that there are more flexible ways creating commits.

   Continuing with our test-project, let’s modify file.txt again:

     $ echo "hello world, again" >>file.txt

   but this time instead of immediately making the commit, let’s take
an intermediate step, and ask for diffs along the way to keep track of
what’s happening:

     $ git diff
     --- a/file.txt
     +++ b/file.txt
     @@ -1 +1,2 @@
      hello world!
     +hello world, again
     $ git add file.txt
     $ git diff

   The last diff is empty, but no new commits have been made, and the
head still doesn’t contain the new line:

     $ git diff HEAD
     diff --git a/file.txt b/file.txt
     index a042389..513feba 100644
     --- a/file.txt
     +++ b/file.txt
     @@ -1 +1,2 @@
      hello world!
     +hello world, again

   So _git diff_ is comparing against something other than the head.
The thing that it’s comparing against is actually the index file,
which is stored in .git/index in a binary format, but whose contents we
can examine with ls-files:

     $ git ls-files --stage
     100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt
     $ git cat-file -t 513feba2
     blob
     $ git cat-file blob 513feba2
     hello world!
     hello world, again

   So what our _git add_ did was store a new blob and then put a
reference to it in the index file.  If we modify the file again,
we’ll see that the new modifications are reflected in the _git diff_
output:

     $ echo 'again?' >>file.txt
     $ git diff
     index 513feba..ba3da7b 100644
     --- a/file.txt
     +++ b/file.txt
     @@ -1,2 +1,3 @@
      hello world!
      hello world, again
     +again?

   With the right arguments, _git diff_ can also show us the difference
between the working directory and the last commit, or between the index
and the last commit:

     $ git diff HEAD
     diff --git a/file.txt b/file.txt
     index a042389..ba3da7b 100644
     --- a/file.txt
     +++ b/file.txt
     @@ -1 +1,3 @@
      hello world!
     +hello world, again
     +again?
     $ git diff --cached
     diff --git a/file.txt b/file.txt
     index a042389..513feba 100644
     --- a/file.txt
     +++ b/file.txt
     @@ -1 +1,2 @@
      hello world!
     +hello world, again

   At any time, we can create a new commit using _git commit_ (without
the "-a" option), and verify that the state committed only includes the
changes stored in the index file, not the additional change that is
still only in our working tree:

     $ git commit -m "repeat"
     $ git diff HEAD
     diff --git a/file.txt b/file.txt
     index 513feba..ba3da7b 100644
     --- a/file.txt
     +++ b/file.txt
     @@ -1,2 +1,3 @@
      hello world!
      hello world, again
     +again?

   So by default _git commit_ uses the index to create the commit, not
the working tree; the "-a" option to commit tells it to first update
the index with all changes in the working tree.

   Finally, it’s worth looking at the effect of _git add_ on the index
file:

     $ echo "goodbye, world" >closing.txt
     $ git add closing.txt

   The effect of the _git add_ was to add one entry to the index file:

     $ git ls-files --stage
     100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0       closing.txt
     100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt

   And, as you can see with cat-file, this new entry refers to the
current contents of the file:

     $ git cat-file blob 8b9743b2
     goodbye, world

   The "status" command is a useful way to get a quick summary of the
situation:

     $ git status
     # On branch master
     # Changes to be committed:
     #   (use "git reset HEAD <file>..." to unstage)
     #
     #       new file: closing.txt
     #
     # Changes not staged for commit:
     #   (use "git add <file>..." to update what will be committed)
     #
     #       modified: file.txt
     #

   Since the current state of closing.txt is cached in the index file,
it is listed as "Changes to be committed".  Since file.txt has changes
in the working directory that aren’t reflected in the index, it is
marked "changed but not updated".  At this point, running "git commit"
would create a commit that added closing.txt (with its new contents),
but that didn’t modify file.txt.

   Also, note that a bare `git diff' shows the changes to file.txt, but
not the addition of closing.txt, because the version of closing.txt in
the index file is identical to the one in the working directory.

   In addition to being the staging area for new commits, the index file
is also populated from the object database when checking out a branch,
and is used to hold the trees involved in a merge operation.  See
gitcore-tutorial(7) and the relevant man pages for details.



What next?
**********

At this point you should know everything necessary to read the man
pages for any of the git commands; one good place to start would be
with the commands mentioned in Everyday git (everyday.html).  You
should be able to find any unknown jargon in gitglossary(7).

   The Git User’s Manual (user-manual.html) provides a more
comprehensive introduction to git.

   gitcvs-migration(7) explains how to import a CVS repository into
git, and shows how to use git in a CVS-like way.

   For some interesting examples of git use, see the howtos
(howto-index.html).

   For git developers, gitcore-tutorial(7) goes into detail on the
lower-level git mechanisms involved in, for example, creating a new
commit.



SEE ALSO
********

gittutorial(7), gitcvs-migration(7), gitcore-tutorial(7),
gitglossary(7), git-help(1), Everyday git (everyday.html), The Git
User’s Manual (user-manual.html)



GIT
***

Part of the git(1) suite.


File: gitman.info,  Node: gitcvs-migration,  Up: Top

Name
****

gitcvs-migration — git for CVS users



Synopsis
********

     git cvsimport *


DESCRIPTION
***********

Git differs from CVS in that every working tree contains a repository
with a full copy of the project history, and no repository is
inherently more important than any other.  However, you can emulate the
CVS model by designating a single shared repository which people can
synchronize with; this document explains how to do that.

   Some basic familiarity with git is required. Having gone through
gittutorial(7) and gitglossary(7) should be sufficient.



Developing against a shared repository
**************************************

Suppose a shared repository is set up in /pub/repo.git on the host
foo.com.  Then as an individual committer you can clone the shared
repository over ssh with:

     $ git clone foo.com:/pub/repo.git/ my-project
     $ cd my-project

   and hack away.  The equivalent of _cvs update_ is

     $ git pull origin

   which merges in any work that others might have done since the clone
operation.  If there are uncommitted changes in your working tree,
commit them first before running git pull.

     *Note*

     The _pull_ command knows where to get updates from because of
     certain configuration variables that were set by the first _git
     clone_ command; see `git config -l' and the git-config(1) man page
     for details.

   You can update the shared repository with your changes by first
committing your changes, and then using the _git push_ command:

     $ git push origin master

   to "push" those commits to the shared repository.  If someone else
has updated the repository more recently, _git push_, like _cvs
commit_, will complain, in which case you must pull any changes before
attempting the push again.

   In the _git push_ command above we specify the name of the remote
branch to update (`master').  If we leave that out, _git push_ tries to
update any branches in the remote repository that have the same name as
a branch in the local repository.  So the last _push_ can be done with
either of:

     $ git push origin
     $ git push foo.com:/pub/project.git/

   as long as the shared repository does not have any branches other
than `master'.



Setting Up a Shared Repository
******************************

We assume you have already created a git repository for your project,
possibly created from scratch or from a tarball (see gittutorial(7)),
or imported from an already existing CVS repository (see the next
section).

   Assume your existing repo is at /home/alice/myproject.  Create a new
"bare" repository (a repository without a working tree) and fetch your
project into it:

     $ mkdir /pub/my-repo.git
     $ cd /pub/my-repo.git
     $ git --bare init --shared
     $ git --bare fetch /home/alice/myproject master:master

   Next, give every team member read/write access to this repository.
One easy way to do this is to give all the team members ssh access to
the machine where the repository is hosted.  If you don’t want to
give them a full shell on the machine, there is a restricted shell
which only allows users to do git pushes and pulls; see git-shell(1).

   Put all the committers in the same group, and make the repository
writable by that group:

     $ chgrp -R $group /pub/my-repo.git

   Make sure committers have a umask of at most 027, so that the
directories they create are writable and searchable by other group
members.



Importing a CVS archive
***********************

First, install version 2.1 or higher of cvsps from
http://www.cobite.com/cvsps/ (http://www.cobite.com/cvsps/) and make
sure it is in your path.  Then cd to a checked out CVS working directory
of the project you are interested in and run git-cvsimport(1):

     $ git cvsimport -C <destination> <module>

   This puts a git archive of the named CVS module in the directory
<destination>, which will be created if necessary.

   The import checks out from CVS every revision of every file.
Reportedly cvsimport can average some twenty revisions per second, so
for a medium-sized project this should not take more than a couple of
minutes.  Larger projects or remote repositories may take longer.

   The main trunk is stored in the git branch named `origin', and
additional CVS branches are stored in git branches with the same names.
The most recent version of the main trunk is also left checked out on
the `master' branch, so you can start adding your own changes right
away.

   The import is incremental, so if you call it again next month it will
fetch any CVS updates that have been made in the meantime.  For this to
work, you must not modify the imported branches; instead, create new
branches for your own changes, and merge in the imported branches as
necessary.

   If you want a shared repository, you will need to make a bare clone
of the imported directory, as described above. Then treat the imported
directory as another development clone for purposes of merging
incremental imports.



Advanced Shared Repository Management
*************************************

Git allows you to specify scripts called "hooks" to be run at certain
points.  You can use these, for example, to send all commits to the
shared repository to a mailing list.  See githooks(5).

   You can enforce finer grained permissions using update hooks.  See
Controlling access to branches using update hooks
(howto/update-hook-example.txt).



Providing CVS Access to a git Repository
****************************************

It is also possible to provide true CVS access to a git repository, so
that developers can still use CVS; see git-cvsserver(1) for details.



Alternative Development Models
******************************

CVS users are accustomed to giving a group of developers commit access
to a common repository.  As we’ve seen, this is also possible with
git.  However, the distributed nature of git allows other development
models, and you may want to first consider whether one of them might be
a better fit for your project.

   For example, you can choose a single person to maintain the
project’s primary public repository.  Other developers then clone
this repository and each work in their own clone.  When they have a
series of changes that they’re happy with, they ask the maintainer to
pull from the branch containing the changes.  The maintainer reviews
their changes and pulls them into the primary repository, which other
developers pull from as necessary to stay coordinated.  The Linux
kernel and other projects use variants of this model.

   With a small group, developers may just pull changes from each
other’s repositories without the need for a central maintainer.



SEE ALSO
********

gittutorial(7), gittutorial-2(7), gitcore-tutorial(7), gitglossary(7),
Everyday Git (everyday.html), The Git User’s Manual (user-manual.html)



GIT
***

Part of the git(1) suite.


File: gitman.info,  Node: gitcore-tutorial,  Up: Top

Name
****

gitcore-tutorial — A git core tutorial for developers



Synopsis
********

git *



DESCRIPTION
***********

This tutorial explains how to use the "core" git commands to set up and
work with a git repository.

   If you just need to use git as a revision control system you may
prefer to start with "A Tutorial Introduction to GIT" (gittutorial(7))
or the GIT User Manual (user-manual.html).

   However, an understanding of these low-level tools can be helpful if
you want to understand git’s internals.

   The core git is often called "plumbing", with the prettier user
interfaces on top of it called "porcelain". You may not want to use the
plumbing directly very often, but it can be good to know what the
plumbing does for when the porcelain isn’t flushing.

   Back when this document was originally written, many porcelain
commands were shell scripts. For simplicity, it still uses them as
examples to illustrate how plumbing is fit together to form the
porcelain commands. The source tree includes some of these scripts in
contrib/examples/ for reference. Although these are not implemented as
shell scripts anymore, the description of what the plumbing layer
commands do is still valid.

     *Note*

     Deeper technical details are often marked as Notes, which you can
     skip on your first reading.


Creating a git repository
*************************

Creating a new git repository couldn’t be easier: all git
repositories start out empty, and the only thing you need to do is find
yourself a subdirectory that you want to use as a working tree - either
an empty one for a totally new project, or an existing working tree
that you want to import into git.

   For our first example, we’re going to start a totally new
repository from scratch, with no pre-existing files, and we’ll call
it _git-tutorial_.  To start up, create a subdirectory for it, change
into that subdirectory, and initialize the git infrastructure with _git
init_:

     $ mkdir git-tutorial
     $ cd git-tutorial
     $ git init

   to which git will reply

     Initialized empty Git repository in .git/

   which is just git’s way of saying that you haven’t been doing
anything strange, and that it will have created a local `.git'
directory setup for your new project. You will now have a `.git'
directory, and you can inspect that with _ls_. For your new empty
project, it should show you three entries, among other things:

   * a file called `HEAD', that has `ref: refs/heads/master' in it.
     This is similar to a symbolic link and points at
     `refs/heads/master' relative to the `HEAD' file.

     Don’t worry about the fact that the file that the `HEAD' link
     points to doesn’t even exist yet — you haven’t created
     the commit that will start your `HEAD' development branch yet.

   * a subdirectory called `objects', which will contain all the
     objects of your project. You should never have any real reason to
     look at the objects directly, but you might want to know that these
     objects are what contains all the real _data_ in your repository.

   * a subdirectory called `refs', which contains references to objects.

   In particular, the `refs' subdirectory will contain two other
subdirectories, named `heads' and `tags' respectively. They do exactly
what their names imply: they contain references to any number of
different _heads_ of development (aka _branches_), and to any _tags_
that you have created to name specific versions in your repository.

   One note: the special `master' head is the default branch, which is
why the `.git/HEAD' file was created points to it even if it doesn’t
yet exist. Basically, the `HEAD' link is supposed to always point to
the branch you are working on right now, and you always start out
expecting to work on the `master' branch.

   However, this is only a convention, and you can name your branches
anything you want, and don’t have to ever even _have_ a `master'
branch. A number of the git tools will assume that `.git/HEAD' is
valid, though.

     *Note*

     An _object_ is identified by its 160-bit SHA1 hash, aka _object
     name_, and a reference to an object is always the 40-byte hex
     representation of that SHA1 name. The files in the `refs'
     subdirectory are expected to contain these hex references (usually
     with a final `\n' at the end), and you should thus expect to see a
     number of 41-byte files containing these references in these
     `refs' subdirectories when you actually start populating your tree.

     *Note*

     An advanced user may want to take a look at gitrepository-layout(5)
     after finishing this tutorial.

   You have now created your first git repository. Of course, since
it’s empty, that’s not very useful, so let’s start populating it
with data.



Populating a git repository
***************************

We’ll keep this simple and stupid, so we’ll start off with
populating a few trivial files just to get a feel for it.

   Start off with just creating any random files that you want to
maintain in your git repository. We’ll start off with a few bad
examples, just to get a feel for how this works:

     $ echo "Hello World" >hello
     $ echo "Silly example" >example

   you have now created two files in your working tree (aka _working
directory_), but to actually check in your hard work, you will have to
go through two steps:

   * fill in the _index_ file (aka _cache_) with the information about
     your working tree state.

   * commit that index file as an object.

   The first step is trivial: when you want to tell git about any
changes to your working tree, you use the _git update-index_ program.
That program normally just takes a list of filenames you want to
update, but to avoid trivial mistakes, it refuses to add new entries to
the index (or remove existing ones) unless you explicitly tell it that
you’re adding a new entry with the `--add' flag (or removing an entry
with the `--remove') flag.

   So to populate the index with the two files you just created, you
can do

     $ git update-index --add hello example

   and you have now told git to track those two files.

   In fact, as you did that, if you now look into your object directory,
you’ll notice that git will have added two new objects to the object
database. If you did exactly the steps above, you should now be able to
do

     $ ls .git/objects/??/*

   and see two files:

     .git/objects/55/7db03de997c86a4a028e1ebd3a1ceb225be238
     .git/objects/f2/4c74a2e500f5ee1332c86b94199f52b1d1d962

   which correspond with the objects with names of `557db...' and
`f24c7...' respectively.

   If you want to, you can use _git cat-file_ to look at those objects,
but you’ll have to use the object name, not the filename of the
object:

     $ git cat-file -t 557db03de997c86a4a028e1ebd3a1ceb225be238

   where the `-t' tells _git cat-file_ to tell you what the "type" of
the object is. git will tell you that you have a "blob" object (i.e.,
just a regular file), and you can see the contents with

     $ git cat-file blob 557db03

   which will print out "Hello World". The object `557db03' is nothing
more than the contents of your file `hello'.

     *Note*

     Don’t confuse that object with the file `hello' itself. The
     object is literally just those specific *contents* of the file, and
     however much you later change the contents in file `hello', the
     object we just looked at will never change. Objects are immutable.

     *Note*

     The second example demonstrates that you can abbreviate the object
     name to only the first several hexadecimal digits in most places.

   Anyway, as we mentioned previously, you normally never actually take
a look at the objects themselves, and typing long 40-character hex
names is not something you’d normally want to do. The above digression
was just to show that _git update-index_ did something magical, and
actually saved away the contents of your files into the git object
database.

   Updating the index did something else too: it created a `.git/index'
file. This is the index that describes your current working tree, and
something you should be very aware of. Again, you normally never worry
about the index file itself, but you should be aware of the fact that
you have not actually really "checked in" your files into git so far,
you’ve only *told* git about them.

   However, since git knows about them, you can now start using some of
the most basic git commands to manipulate the files or look at their
status.

   In particular, let’s not even check in the two files into git yet,
we’ll start off by adding another line to `hello' first:

     $ echo "It's a new day for git" >>hello

   and you can now, since you told git about the previous state of
`hello', ask git what has changed in the tree compared to your old
index, using the _git diff-files_ command:

     $ git diff-files

   Oops. That wasn’t very readable. It just spit out its own internal
version of a _diff_, but that internal version really just tells you
that it has noticed that "hello" has been modified, and that the old
object contents it had have been replaced with something else.

   To make it readable, we can tell _git diff-files_ to output the
differences as a patch, using the `-p' flag:

     $ git diff-files -p
     diff --git a/hello b/hello
     index 557db03..263414f 100644
     --- a/hello
     +++ b/hello
     @@ -1 +1,2 @@
      Hello World
     +It's a new day for git

   i.e. the diff of the change we caused by adding another line to
`hello'.

   In other words, _git diff-files_ always shows us the difference
between what is recorded in the index, and what is currently in the
working tree. That’s very useful.

   A common shorthand for `git diff-files -p' is to just write `git
diff', which will do the same thing.

     $ git diff
     diff --git a/hello b/hello
     index 557db03..263414f 100644
     --- a/hello
     +++ b/hello
     @@ -1 +1,2 @@
      Hello World
     +It's a new day for git


Committing git state
********************

Now, we want to go to the next stage in git, which is to take the files
that git knows about in the index, and commit them as a real tree. We do
that in two phases: creating a _tree_ object, and committing that _tree_
object as a _commit_ object together with an explanation of what the
tree was all about, along with information of how we came to that state.

   Creating a tree object is trivial, and is done with _git write-tree_.
There are no options or other input: `git write-tree' will take the
current index state, and write an object that describes that whole
index. In other words, we’re now tying together all the different
filenames with their contents (and their permissions), and we’re
creating the equivalent of a git "directory" object:

     $ git write-tree

   and this will just output the name of the resulting tree, in this
case (if you have done exactly as I’ve described) it should be

     8988da15d077d4829fc51d8544c097def6644dbb

   which is another incomprehensible object name. Again, if you want to,
you can use `git cat-file -t 8988d...' to see that this time the object
is not a "blob" object, but a "tree" object (you can also use `git
cat-file' to actually output the raw object contents, but you’ll see
mainly a binary mess, so that’s less interesting).

   However — normally you’d never use _git write-tree_ on its
own, because normally you always commit a tree into a commit object
using the _git commit-tree_ command. In fact, it’s easier to not
actually use _git write-tree_ on its own at all, but to just pass its
result in as an argument to _git commit-tree_.

   _git commit-tree_ normally takes several arguments — it wants
to know what the _parent_ of a commit was, but since this is the first
commit ever in this new repository, and it has no parents, we only need
to pass in the object name of the tree. However, _git commit-tree_ also
wants to get a commit message on its standard input, and it will write
out the resulting object name for the commit to its standard output.

   And this is where we create the `.git/refs/heads/master' file which
is pointed at by `HEAD'. This file is supposed to contain the reference
to the top-of-tree of the master branch, and since that’s exactly
what _git commit-tree_ spits out, we can do this all with a sequence of
simple shell commands:

     $ tree=$(git write-tree)
     $ commit=$(echo 'Initial commit' | git commit-tree $tree)
     $ git update-ref HEAD $commit

   In this case this creates a totally new commit that is not related to
anything else. Normally you do this only *once* for a project ever, and
all later commits will be parented on top of an earlier commit.

   Again, normally you’d never actually do this by hand. There is a
helpful script called `git commit' that will do all of this for you. So
you could have just written `git commit' instead, and it would have
done the above magic scripting for you.



Making a change
***************

Remember how we did the _git update-index_ on file `hello' and then we
changed `hello' afterward, and could compare the new state of `hello'
with the state we saved in the index file?

   Further, remember how I said that _git write-tree_ writes the
contents of the *index* file to the tree, and thus what we just
committed was in fact the *original* contents of the file `hello', not
the new ones. We did that on purpose, to show the difference between
the index state, and the state in the working tree, and how they
don’t have to match, even when we commit things.

   As before, if we do `git diff-files -p' in our git-tutorial project,
we’ll still see the same difference we saw last time: the index file
hasn’t changed by the act of committing anything. However, now that we
have committed something, we can also learn to use a new command: _git
diff-index_.

   Unlike _git diff-files_, which showed the difference between the
index file and the working tree, _git diff-index_ shows the differences
between a committed *tree* and either the index file or the working
tree. In other words, _git diff-index_ wants a tree to be diffed
against, and before we did the commit, we couldn’t do that, because we
didn’t have anything to diff against.

   But now we can do

     $ git diff-index -p HEAD

   (where `-p' has the same meaning as it did in _git diff-files_), and
it will show us the same difference, but for a totally different reason.
Now we’re comparing the working tree not against the index file, but
against the tree we just wrote. It just so happens that those two are
obviously the same, so we get the same result.

   Again, because this is a common operation, you can also just
shorthand it with

     $ git diff HEAD

   which ends up doing the above for you.

   In other words, _git diff-index_ normally compares a tree against the
working tree, but when given the `--cached' flag, it is told to instead
compare against just the index cache contents, and ignore the current
working tree state entirely. Since we just wrote the index file to
HEAD, doing `git diff-index --cached -p HEAD' should thus return an
empty set of differences, and that’s exactly what it does.

     *Note*

     _git diff-index_ really always uses the index for its comparisons,
     and saying that it compares a tree against the working tree is
     thus not strictly accurate. In particular, the list of files to
     compare (the "meta-data") *always* comes from the index file,
     regardless of whether the `--cached' flag is used or not. The
     `--cached' flag really only determines whether the file *contents*
     to be compared come from the working tree or not.

     This is not hard to understand, as soon as you realize that git
     simply never knows (or cares) about files that it is not told about
     explicitly. git will never go *looking* for files to compare, it
     expects you to tell it what the files are, and that’s what the
     index is there for.

   However, our next step is to commit the *change* we did, and again,
to understand what’s going on, keep in mind the difference between
"working tree contents", "index file" and "committed tree". We have
changes in the working tree that we want to commit, and we always have
to work through the index file, so the first thing we need to do is to
update the index cache:

     $ git update-index hello

   (note how we didn’t need the `--add' flag this time, since git knew
about the file already).

   Note what happens to the different _git diff-*_ versions here.
After we’ve updated `hello' in the index, `git diff-files -p' now
shows no differences, but `git diff-index -p HEAD' still *does* show
that the current state is different from the state we committed. In
fact, now _git diff-index_ shows the same difference whether we use the
`--cached' flag or not, since now the index is coherent with the
working tree.

   Now, since we’ve updated `hello' in the index, we can commit the
new version. We could do it by writing the tree by hand again, and
committing the tree (this time we’d have to use the `-p HEAD' flag to
tell commit that the HEAD was the *parent* of the new commit, and that
this wasn’t an initial commit any more), but you’ve done that once
already, so let’s just use the helpful script this time:

     $ git commit

   which starts an editor for you to write the commit message and tells
you a bit about what you have done.

   Write whatever message you want, and all the lines that start with
_#_ will be pruned out, and the rest will be used as the commit message
for the change. If you decide you don’t want to commit anything after
all at this point (you can continue to edit things and update the
index), you can just leave an empty message. Otherwise `git commit'
will commit the change for you.

   You’ve now made your first real git commit. And if you’re
interested in looking at what `git commit' really does, feel free to
investigate: it’s a few very simple shell scripts to generate the
helpful (?) commit message headers, and a few one-liners that actually
do the commit itself (_git commit_).



Inspecting Changes
******************

While creating changes is useful, it’s even more useful if you can
tell later what changed. The most useful command for this is another of
the _diff_ family, namely _git diff-tree_.

   _git diff-tree_ can be given two arbitrary trees, and it will tell
you the differences between them. Perhaps even more commonly, though,
you can give it just a single commit object, and it will figure out the
parent of that commit itself, and show the difference directly. Thus,
to get the same diff that we’ve already seen several times, we can
now do

     $ git diff-tree -p HEAD

   (again, `-p' means to show the difference as a human-readable patch),
and it will show what the last commit (in `HEAD') actually changed.

     *Note*

     Here is an ASCII art by Jon Loeliger that illustrates how various
     _diff-*_ commands compare things.

                      diff-tree
                       +----+
                       |    |
                       |    |
                       V    V
                    +-----------+
                    | Object DB |
                    |  Backing  |
                    |   Store   |
                    +-----------+
                      ^    ^
                      |    |
                      |    |  diff-index --cached
                      |    |
          diff-index  |    V
                      |  +-----------+
                      |  |   Index   |
                      |  |  "cache"  |
                      |  +-----------+
                      |    ^
                      |    |
                      |    |  diff-files
                      |    |
                      V    V
                    +-----------+
                    |  Working  |
                    | Directory |
                    +-----------+

   More interestingly, you can also give _git diff-tree_ the `--pretty'
flag, which tells it to also show the commit message and author and
date of the commit, and you can tell it to show a whole series of diffs.
Alternatively, you can tell it to be "silent", and not show the diffs at
all, but just show the actual commit message.

   In fact, together with the _git rev-list_ program (which generates a
list of revisions), _git diff-tree_ ends up being a veritable fount of
changes. A trivial (but very useful) script called _git whatchanged_ is
included with git which does exactly this, and shows a log of recent
activities.

   To see the whole history of our pitiful little git-tutorial project,
you can do

     $ git log

   which shows just the log messages, or if we want to see the log
together with the associated patches use the more complex (and much more
powerful)

     $ git whatchanged -p

   and you will see exactly what has changed in the repository over its
short history.

     *Note*

     When using the above two commands, the initial commit will be
     shown.  If this is a problem because it is huge, you can hide it
     by setting the log.showroot configuration variable to false.
     Having this, you can still show it for each command just adding
     the `--root' option, which is a flag for _git diff-tree_ accepted
     by both commands.

   With that, you should now be having some inkling of what git does,
and can explore on your own.

     *Note*

     Most likely, you are not directly using the core git Plumbing
     commands, but using Porcelain such as _git add_, ‘git-rm’ and
     ‘git-commit’.


Tagging a version
*****************

In git, there are two kinds of tags, a "light" one, and an "annotated
tag".

   A "light" tag is technically nothing more than a branch, except we
put it in the `.git/refs/tags/' subdirectory instead of calling it a
`head'.  So the simplest form of tag involves nothing more than

     $ git tag my-first-tag

   which just writes the current `HEAD' into the
`.git/refs/tags/my-first-tag' file, after which point you can then use
this symbolic name for that particular state. You can, for example, do

     $ git diff my-first-tag

   to diff your current state against that tag which at this point will
obviously be an empty diff, but if you continue to develop and commit
stuff, you can use your tag as an "anchor-point" to see what has changed
since you tagged it.

   An "annotated tag" is actually a real git object, and contains not
only a pointer to the state you want to tag, but also a small tag name
and message, along with optionally a PGP signature that says that yes,
you really did that tag. You create these annotated tags with either
the `-a' or `-s' flag to _git tag_:

     $ git tag -s <tagname>

   which will sign the current `HEAD' (but you can also give it another
argument that specifies the thing to tag, e.g., you could have tagged
the current `mybranch' point by using `git tag <tagname> mybranch').

   You normally only do signed tags for major releases or things like
that, while the light-weight tags are useful for any marking you want
to do — any time you decide that you want to remember a certain
point, just create a private tag for it, and you have a nice symbolic
name for the state at that point.



Copying repositories
********************

git repositories are normally totally self-sufficient and relocatable.
Unlike CVS, for example, there is no separate notion of "repository"
and "working tree". A git repository normally *is* the working tree,
with the local git information hidden in the `.git' subdirectory. There
is nothing else. What you see is what you got.

     *Note*

     You can tell git to split the git internal information from the
     directory that it tracks, but we’ll ignore that for now: it’s
     not how normal projects work, and it’s really only meant for
     special uses.  So the mental model of "the git information is
     always tied directly to the working tree that it describes" may
     not be technically 100% accurate, but it’s a good model for all
     normal use.

   This has two implications:

   * if you grow bored with the tutorial repository you created (or
     you’ve made a mistake and want to start all over), you can just
     do simple

          $ rm -rf git-tutorial

     and it will be gone. There’s no external repository, and
     there’s no history outside the project you created.

   * if you want to move or duplicate a git repository, you can do so.
     There is _git clone_ command, but if all you want to do is just to
     create a copy of your repository (with all the full history that
     went along with it), you can do so with a regular `cp -a
     git-tutorial new-git-tutorial'.

     Note that when you’ve moved or copied a git repository, your git
     index file (which caches various information, notably some of the
     "stat" information for the files involved) will likely need to be
     refreshed.  So after you do a `cp -a' to create a new copy,
     you’ll want to do

          $ git update-index --refresh

     in the new repository to make sure that the index file is
     up-to-date.

   Note that the second point is true even across machines. You can
duplicate a remote git repository with *any* regular copy mechanism, be
it _scp_, _rsync_ or _wget_.

   When copying a remote repository, you’ll want to at a minimum
update the index cache when you do this, and especially with other
peoples' repositories you often want to make sure that the index cache
is in some known state (you don’t know *what* they’ve done and not
yet checked in), so usually you’ll precede the _git update-index_
with a

     $ git read-tree --reset HEAD
     $ git update-index --refresh

   which will force a total index re-build from the tree pointed to by
`HEAD'.  It resets the index contents to `HEAD', and then the _git
update-index_ makes sure to match up all index entries with the
checked-out files.  If the original repository had uncommitted changes
in its working tree, `git update-index --refresh' notices them and
tells you they need to be updated.

   The above can also be written as simply

     $ git reset

   and in fact a lot of the common git command combinations can be
scripted with the `git xyz' interfaces.  You can learn things by just
looking at what the various git scripts do.  For example, `git reset'
used to be the above two lines implemented in _git reset_, but some
things like _git status_ and _git commit_ are slightly more complex
scripts around the basic git commands.

   Many (most?) public remote repositories will not contain any of the
checked out files or even an index file, and will *only* contain the
actual core git files. Such a repository usually doesn’t even have the
`.git' subdirectory, but has all the git files directly in the
repository.

   To create your own local live copy of such a "raw" git repository,
you’d first create your own subdirectory for the project, and then
copy the raw repository contents into the `.git' directory. For
example, to create your own copy of the git repository, you’d do the
following

     $ mkdir my-git
     $ cd my-git
     $ rsync -rL rsync://rsync.kernel.org/pub/scm/git/git.git/ .git

   followed by

     $ git read-tree HEAD

   to populate the index. However, now you have populated the index, and
you have all the git internal files, but you will notice that you
don’t actually have any of the working tree files to work on. To get
those, you’d check them out with

     $ git checkout-index -u -a

   where the `-u' flag means that you want the checkout to keep the
index up-to-date (so that you don’t have to refresh it afterward),
and the `-a' flag means "check out all files" (if you have a stale copy
or an older version of a checked out tree you may also need to add the
`-f' flag first, to tell _git checkout-index_ to *force* overwriting of
any old files).

   Again, this can all be simplified with

     $ git clone rsync://rsync.kernel.org/pub/scm/git/git.git/ my-git
     $ cd my-git
     $ git checkout

   which will end up doing all of the above for you.

   You have now successfully copied somebody else’s (mine) remote
repository, and checked it out.



Creating a new branch
*********************

Branches in git are really nothing more than pointers into the git
object database from within the `.git/refs/' subdirectory, and as we
already discussed, the `HEAD' branch is nothing but a symlink to one of
these object pointers.

   You can at any time create a new branch by just picking an arbitrary
point in the project history, and just writing the SHA1 name of that
object into a file under `.git/refs/heads/'. You can use any filename
you want (and indeed, subdirectories), but the convention is that the
"normal" branch is called `master'. That’s just a convention, though,
and nothing enforces it.

   To show that as an example, let’s go back to the git-tutorial
repository we used earlier, and create a branch in it. You do that by
simply just saying that you want to check out a new branch:

     $ git checkout -b mybranch

   will create a new branch based at the current `HEAD' position, and
switch to it.

     *Note*

     If you make the decision to start your new branch at some other
     point in the history than the current `HEAD', you can do so by
     just telling _git checkout_ what the base of the checkout would be.
     In other words, if you have an earlier tag or branch, you’d just
     do

          $ git checkout -b mybranch earlier-commit

     and it would create the new branch `mybranch' at the earlier
     commit, and check out the state at that time.

   You can always just jump back to your original `master' branch by
doing

     $ git checkout master

   (or any other branch-name, for that matter) and if you forget which
branch you happen to be on, a simple

     $ cat .git/HEAD

   will tell you where it’s pointing.  To get the list of branches
you have, you can say

     $ git branch

   which used to be nothing more than a simple script around `ls
.git/refs/heads'.  There will be an asterisk in front of the branch you
are currently on.

   Sometimes you may wish to create a new branch _without_ actually
checking it out and switching to it. If so, just use the command

     $ git branch <branchname> [startingpoint]

   which will simply _create_ the branch, but will not do anything
further.  You can then later — once you decide that you want to
actually develop on that branch — switch to that branch with a
regular _git checkout_ with the branchname as the argument.



Merging two branches
********************

One of the ideas of having a branch is that you do some (possibly
experimental) work in it, and eventually merge it back to the main
branch. So assuming you created the above `mybranch' that started out
being the same as the original `master' branch, let’s make sure
we’re in that branch, and do some work there.

     $ git checkout mybranch
     $ echo "Work, work, work" >>hello
     $ git commit -m "Some work." -i hello

   Here, we just added another line to `hello', and we used a shorthand
for doing both `git update-index hello' and `git commit' by just giving
the filename directly to `git commit', with an `-i' flag (it tells git
to _include_ that file in addition to what you have done to the index
file so far when making the commit).  The `-m' flag is to give the
commit log message from the command line.

   Now, to make it a bit more interesting, let’s assume that somebody
else does some work in the original branch, and simulate that by going
back to the master branch, and editing the same file differently there:

     $ git checkout master

   Here, take a moment to look at the contents of `hello', and notice
how they don’t contain the work we just did in
`mybranch' — because that work hasn’t happened in the `master'
branch at all. Then do

     $ echo "Play, play, play" >>hello
     $ echo "Lots of fun" >>example
     $ git commit -m "Some fun." -i hello example

   since the master branch is obviously in a much better mood.

   Now, you’ve got two branches, and you decide that you want to
merge the work done. Before we do that, let’s introduce a cool
graphical tool that helps you view what’s going on:

     $ gitk --all

   will show you graphically both of your branches (that’s what the
`--all' means: normally it will just show you your current `HEAD') and
their histories. You can also see exactly how they came to be from a
common source.

   Anyway, let’s exit _gitk_ (`^Q' or the File menu), and decide that
we want to merge the work we did on the `mybranch' branch into the
`master' branch (which is currently our `HEAD' too). To do that,
there’s a nice script called _git merge_, which wants to know which
branches you want to resolve and what the merge is all about:

     $ git merge -m "Merge work in mybranch" mybranch

   where the first argument is going to be used as the commit message if
the merge can be resolved automatically.

   Now, in this case we’ve intentionally created a situation where the
merge will need to be fixed up by hand, though, so git will do as much
of it as it can automatically (which in this case is just merge the
`example' file, which had no differences in the `mybranch' branch), and
say:

             Auto-merging hello
             CONFLICT (content): Merge conflict in hello
             Automatic merge failed; fix conflicts and then commit the result.

   It tells you that it did an "Automatic merge", which failed due to
conflicts in `hello'.

   Not to worry. It left the (trivial) conflict in `hello' in the same
form you should already be well used to if you’ve ever used CVS, so
let’s just open `hello' in our editor (whatever that may be), and fix
it up somehow.  I’d suggest just making it so that `hello' contains
all four lines:

     Hello World
     It's a new day for git
     Play, play, play
     Work, work, work

   and once you’re happy with your manual merge, just do a

     $ git commit -i hello

   which will very loudly warn you that you’re now committing a merge
(which is correct, so never mind), and you can write a small merge
message about your adventures in _git merge_-land.

   After you’re done, start up `gitk --all' to see graphically what
the history looks like. Notice that `mybranch' still exists, and you can
switch to it, and continue to work with it if you want to. The
`mybranch' branch will not contain the merge, but next time you merge it
from the `master' branch, git will know how you merged it, so you’ll
not have to do _that_ merge again.

   Another useful tool, especially if you do not always work in X-Window
environment, is `git show-branch'.

     $ git show-branch --topo-order --more=1 master mybranch
     * [master] Merge work in mybranch
      ! [mybranch] Some work.
     --
     -  [master] Merge work in mybranch
     *+ [mybranch] Some work.
     *  [master^] Some fun.

   The first two lines indicate that it is showing the two branches and
the first line of the commit log message from their top-of-the-tree
commits, you are currently on `master' branch (notice the asterisk `*'
character), and the first column for the later output lines is used to
show commits contained in the `master' branch, and the second column
for the `mybranch' branch. Three commits are shown along with their log
messages.  All of them have non blank characters in the first column
(`*' shows an ordinary commit on the current branch, `-' is a merge
commit), which means they are now part of the `master' branch. Only the
"Some work" commit has the plus `+' character in the second column,
because `mybranch' has not been merged to incorporate these commits
from the master branch.  The string inside brackets before the commit
log message is a short name you can use to name the commit.  In the
above example, _master_ and _mybranch_ are branch heads.  _master^_ is
the first parent of _master_ branch head.  Please see gitrevisions(7)
if you want to see more complex cases.

     *Note*

     Without the _-more=1_ option, _git show-branch_ would not output
     the _[master^]_ commit, as _[mybranch]_ commit is a common
     ancestor of both _master_ and _mybranch_ tips.  Please see
     git-show-branch(1) for details.

     *Note*

     If there were more commits on the _master_ branch after the merge,
     the merge commit itself would not be shown by _git show-branch_ by
     default.  You would need to provide _-sparse_ option to make the
     merge commit visible in this case.

   Now, let’s pretend you are the one who did all the work in
`mybranch', and the fruit of your hard work has finally been merged to
the `master' branch. Let’s go back to `mybranch', and run _git merge_
to get the "upstream changes" back to your branch.

     $ git checkout mybranch
     $ git merge -m "Merge upstream changes." master

   This outputs something like this (the actual commit object names
would be different)

     Updating from ae3a2da... to a80b4aa....
     Fast-forward (no commit created; -m option ignored)
      example | 1 +
      hello   | 1 +
      2 files changed, 2 insertions(+)

   Because your branch did not contain anything more than what had
already been merged into the `master' branch, the merge operation did
not actually do a merge. Instead, it just updated the top of the tree
of your branch to that of the `master' branch. This is often called
_fast-forward_ merge.

   You can run `gitk --all' again to see how the commit ancestry looks
like, or run _show-branch_, which tells you this.

     $ git show-branch master mybranch
     ! [master] Merge work in mybranch
      * [mybranch] Merge work in mybranch
     --
     -- [master] Merge work in mybranch


Merging external work
*********************

It’s usually much more common that you merge with somebody else than
merging with your own branches, so it’s worth pointing out that git
makes that very easy too, and in fact, it’s not that different from
doing a _git merge_. In fact, a remote merge ends up being nothing more
than "fetch the work from a remote repository into a temporary tag"
followed by a _git merge_.

   Fetching from a remote repository is done by, unsurprisingly, _git
fetch_:

     $ git fetch <remote-repository>

   One of the following transports can be used to name the repository
to download from:

Rsync
     `rsync://remote.machine/path/to/repo.git/'

     Rsync transport is usable for both uploading and downloading, but
     is completely unaware of what git does, and can produce unexpected
     results when you download from the public repository while the
     repository owner is uploading into it via `rsync' transport.  Most
     notably, it could update the files under `refs/' which holds the
     object name of the topmost commits before uploading the files in
     `objects/' — the downloader would obtain head commit object
     name while that object itself is still not available in the
     repository.  For this reason, it is considered deprecated.

SSH
     `remote.machine:/path/to/repo.git/' or

     `ssh://remote.machine/path/to/repo.git/'

     This transport can be used for both uploading and downloading, and
     requires you to have a log-in privilege over `ssh' to the remote
     machine.  It finds out the set of objects the other side lacks by
     exchanging the head commits both ends have and transfers (close
     to) minimum set of objects.  It is by far the most efficient way
     to exchange git objects between repositories.

Local directory
     `/path/to/repo.git/'

     This transport is the same as SSH transport but uses _sh_ to run
     both ends on the local machine instead of running other end on the
     remote machine via _ssh_.

git Native
     `git://remote.machine/path/to/repo.git/'

     This transport was designed for anonymous downloading.  Like SSH
     transport, it finds out the set of objects the downstream side
     lacks and transfers (close to) minimum set of objects.

HTTP(S)
     `http://remote.machine/path/to/repo.git/'

     Downloader from http and https URL first obtains the topmost
     commit object name from the remote site by looking at the
     specified refname under `repo.git/refs/' directory, and then tries
     to obtain the commit object by downloading from
     `repo.git/objects/xx/xxx...' using the object name of that commit
     object.  Then it reads the commit object to find out its parent
     commits and the associate tree object; it repeats this process
     until it gets all the necessary objects.  Because of this
     behavior, they are sometimes also called _commit walkers_.

     The _commit walkers_ are sometimes also called _dumb transports_,
     because they do not require any git aware smart server like git
     Native transport does.  Any stock HTTP server that does not even
     support directory index would suffice.  But you must prepare your
     repository with _git update-server-info_ to help dumb transport
     downloaders.

   Once you fetch from the remote repository, you `merge' that with
your current branch.

   However — it’s such a common thing to `fetch' and then
immediately `merge', that it’s called `git pull', and you can simply
do

     $ git pull <remote-repository>

   and optionally give a branch-name for the remote end as a second
argument.

     *Note*

     You could do without using any branches at all, by keeping as many
     local repositories as you would like to have branches, and merging
     between them with _git pull_, just like you merge between
     branches. The advantage of this approach is that it lets you keep
     a set of files for each `branch' checked out and you may find it
     easier to switch back and forth if you juggle multiple lines of
     development simultaneously. Of course, you will pay the price of
     more disk usage to hold multiple working trees, but disk space is
     cheap these days.

   It is likely that you will be pulling from the same remote
repository from time to time. As a short hand, you can store the remote
repository URL in the local repository’s config file like this:

     $ git config remote.linus.url http://www.kernel.org/pub/scm/git/git.git/

   and use the "linus" keyword with _git pull_ instead of the full URL.

   Examples.

  1. `git pull linus'

  2. `git pull linus tag v0.99.1'

   the above are equivalent to:

  1. `git pull http://www.kernel.org/pub/scm/git/git.git/ HEAD'

  2. `git pull http://www.kernel.org/pub/scm/git/git.git/ tag v0.99.1'


How does the merge work?
************************

We said this tutorial shows what plumbing does to help you cope with
the porcelain that isn’t flushing, but we so far did not talk about
how the merge really works.  If you are following this tutorial the
first time, I’d suggest to skip to "Publishing your work" section and
come back here later.

   OK, still with me?  To give us an example to look at, let’s go
back to the earlier repository with "hello" and "example" file, and
bring ourselves back to the pre-merge state:

     $ git show-branch --more=2 master mybranch
     ! [master] Merge work in mybranch
      * [mybranch] Merge work in mybranch
     --
     -- [master] Merge work in mybranch
     +* [master^2] Some work.
     +* [master^] Some fun.

   Remember, before running _git merge_, our `master' head was at "Some
fun." commit, while our `mybranch' head was at "Some work." commit.

     $ git checkout mybranch
     $ git reset --hard master^2
     $ git checkout master
     $ git reset --hard master^

   After rewinding, the commit structure should look like this:

     $ git show-branch
     * [master] Some fun.
      ! [mybranch] Some work.
     --
     *  [master] Some fun.
      + [mybranch] Some work.
     *+ [master^] Initial commit

   Now we are ready to experiment with the merge by hand.

   `git merge' command, when merging two branches, uses 3-way merge
algorithm.  First, it finds the common ancestor between them.  The
command it uses is _git merge-base_:

     $ mb=$(git merge-base HEAD mybranch)

   The command writes the commit object name of the common ancestor to
the standard output, so we captured its output to a variable, because
we will be using it in the next step.  By the way, the common ancestor
commit is the "Initial commit" commit in this case.  You can tell it by:

     $ git name-rev --name-only --tags $mb
     my-first-tag

   After finding out a common ancestor commit, the second step is this:

     $ git read-tree -m -u $mb HEAD mybranch

   This is the same _git read-tree_ command we have already seen, but
it takes three trees, unlike previous examples.  This reads the
contents of each tree into different _stage_ in the index file (the
first tree goes to stage 1, the second to stage 2, etc.).  After
reading three trees into three stages, the paths that are the same in
all three stages are _collapsed_ into stage 0.  Also paths that are the
same in two of three stages are collapsed into stage 0, taking the SHA1
from either stage 2 or stage 3, whichever is different from stage 1
(i.e. only one side changed from the common ancestor).

   After _collapsing_ operation, paths that are different in three
trees are left in non-zero stages.  At this point, you can inspect the
index file with this command:

     $ git ls-files --stage
     100644 7f8b141b65fdcee47321e399a2598a235a032422 0       example
     100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
     100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
     100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello

   In our example of only two files, we did not have unchanged files so
only _example_ resulted in collapsing.  But in real-life large
projects, when only a small number of files change in one commit, this
_collapsing_ tends to trivially merge most of the paths fairly quickly,
leaving only a handful of real changes in non-zero stages.

   To look at only non-zero stages, use `--unmerged' flag:

     $ git ls-files --unmerged
     100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
     100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
     100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello

   The next step of merging is to merge these three versions of the
file, using 3-way merge.  This is done by giving _git merge-one-file_
command as one of the arguments to _git merge-index_ command:

     $ git merge-index git-merge-one-file hello
     Auto-merging hello
     ERROR: Merge conflict in hello
     fatal: merge program failed

   _git merge-one-file_ script is called with parameters to describe
those three versions, and is responsible to leave the merge results in
the working tree.  It is a fairly straightforward shell script, and
eventually calls _merge_ program from RCS suite to perform a file-level
3-way merge.  In this case, _merge_ detects conflicts, and the merge
result with conflict marks is left in the working tree..  This can be
seen if you run `ls-files --stage' again at this point:

     $ git ls-files --stage
     100644 7f8b141b65fdcee47321e399a2598a235a032422 0       example
     100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
     100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
     100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello

   This is the state of the index file and the working file after _git
merge_ returns control back to you, leaving the conflicting merge for
you to resolve.  Notice that the path `hello' is still unmerged, and
what you see with _git diff_ at this point is differences since stage 2
(i.e. your version).



Publishing your work
********************

So, we can use somebody else’s work from a remote repository, but how
can *you* prepare a repository to let other people pull from it?

   You do your real work in your working tree that has your primary
repository hanging under it as its `.git' subdirectory.  You *could*
make that repository accessible remotely and ask people to pull from
it, but in practice that is not the way things are usually done. A
recommended way is to have a public repository, make it reachable by
other people, and when the changes you made in your primary working
tree are in good shape, update the public repository from it. This is
often called _pushing_.

     *Note*

     This public repository could further be mirrored, and that is how
     git repositories at `kernel.org' are managed.

   Publishing the changes from your local (private) repository to your
remote (public) repository requires a write privilege on the remote
machine. You need to have an SSH account there to run a single command,
_git-receive-pack_.

   First, you need to create an empty repository on the remote machine
that will house your public repository. This empty repository will be
populated and be kept up-to-date by pushing into it later. Obviously,
this repository creation needs to be done only once.

     *Note*

     _git push_ uses a pair of commands, _git send-pack_ on your local
     machine, and _git-receive-pack_ on the remote machine. The
     communication between the two over the network internally uses an
     SSH connection.

   Your private repository’s git directory is usually `.git', but
your public repository is often named after the project name, i.e.
`<project>.git'. Let’s create such a public repository for project
`my-git'. After logging into the remote machine, create an empty
directory:

     $ mkdir my-git.git

   Then, make that directory into a git repository by running _git
init_, but this time, since its name is not the usual `.git', we do
things slightly differently:

     $ GIT_DIR=my-git.git git init

   Make sure this directory is available for others you want your
changes to be pulled via the transport of your choice. Also you need to
make sure that you have the _git-receive-pack_ program on the `$PATH'.

     *Note*

     Many installations of sshd do not invoke your shell as the login
     shell when you directly run programs; what this means is that if
     your login shell is _bash_, only `.bashrc' is read and not
     `.bash_profile'. As a workaround, make sure `.bashrc' sets up
     `$PATH' so that you can run _git-receive-pack_ program.

     *Note*

     If you plan to publish this repository to be accessed over http,
     you should do `mv my-git.git/hooks/post-update.sample
     my-git.git/hooks/post-update' at this point.  This makes sure that
     every time you push into this repository, `git update-server-info'
     is run.

   Your "public repository" is now ready to accept your changes.  Come
back to the machine you have your private repository. From there, run
this command:

     $ git push <public-host>:/path/to/my-git.git master

   This synchronizes your public repository to match the named branch
head (i.e. `master' in this case) and objects reachable from them in
your current repository.

   As a real example, this is how I update my public git repository.
Kernel.org mirror network takes care of the propagation to other
publicly visible machines:

     $ git push master.kernel.org:/pub/scm/git/git.git/


Packing your repository
***********************

Earlier, we saw that one file under `.git/objects/??/' directory is
stored for each git object you create. This representation is efficient
to create atomically and safely, but not so convenient to transport
over the network. Since git objects are immutable once they are
created, there is a way to optimize the storage by "packing them
together". The command

     $ git repack

   will do it for you. If you followed the tutorial examples, you would
have accumulated about 17 objects in `.git/objects/??/' directories by
now. _git repack_ tells you how many objects it packed, and stores the
packed file in `.git/objects/pack' directory.

     *Note*

     You will see two files, `pack-*.pack' and `pack-*.idx', in
     `.git/objects/pack' directory. They are closely related to each
     other, and if you ever copy them by hand to a different repository
     for whatever reason, you should make sure you copy them together.
     The former holds all the data from the objects in the pack, and
     the latter holds the index for random access.

   If you are paranoid, running _git verify-pack_ command would detect
if you have a corrupt pack, but do not worry too much.  Our programs
are always perfect ;-).

   Once you have packed objects, you do not need to leave the unpacked
objects that are contained in the pack file anymore.

     $ git prune-packed

   would remove them for you.

   You can try running `find .git/objects -type f' before and after you
run `git prune-packed' if you are curious.  Also `git count-objects'
would tell you how many unpacked objects are in your repository and how
much space they are consuming.

     *Note*

     `git pull' is slightly cumbersome for HTTP transport, as a packed
     repository may contain relatively few objects in a relatively
     large pack. If you expect many HTTP pulls from your public
     repository you might want to repack & prune often, or never.

   If you run `git repack' again at this point, it will say "Nothing
new to pack.". Once you continue your development and accumulate the
changes, running `git repack' again will create a new pack, that
contains objects created since you packed your repository the last
time. We recommend that you pack your project soon after the initial
import (unless you are starting your project from scratch), and then
run `git repack' every once in a while, depending on how active your
project is.

   When a repository is synchronized via `git push' and `git pull'
objects packed in the source repository are usually stored unpacked in
the destination, unless rsync transport is used.  While this allows you
to use different packing strategies on both ends, it also means you may
need to repack both repositories every once in a while.



Working with Others
*******************

Although git is a truly distributed system, it is often convenient to
organize your project with an informal hierarchy of developers. Linux
kernel development is run this way. There is a nice illustration (page
17, "Merges to Mainline") in Randy Dunlap’s presentation
(http://www.xenotime.net/linux/mentor/linux-mentoring-2006.pdf).

   It should be stressed that this hierarchy is purely *informal*.
There is nothing fundamental in git that enforces the "chain of patch
flow" this hierarchy implies. You do not have to pull from only one
remote repository.

   A recommended workflow for a "project lead" goes like this:

  1. Prepare your primary repository on your local machine. Your work
     is done there.

  2. Prepare a public repository accessible to others.

     If other people are pulling from your repository over dumb
     transport protocols (HTTP), you need to keep this repository _dumb
     transport friendly_.  After `git init',
     `$GIT_DIR/hooks/post-update.sample' copied from the standard
     templates would contain a call to _git update-server-info_ but you
     need to manually enable the hook with `mv post-update.sample
     post-update'.  This makes sure _git update-server-info_ keeps the
     necessary files up-to-date.

  3. Push into the public repository from your primary repository.

  4. _git repack_ the public repository. This establishes a big pack
     that contains the initial set of objects as the baseline, and
     possibly _git prune_ if the transport used for pulling from your
     repository supports packed repositories.

  5. Keep working in your primary repository. Your changes include
     modifications of your own, patches you receive via e-mails, and
     merges resulting from pulling the "public" repositories of your
     "subsystem maintainers".

     You can repack this private repository whenever you feel like.

  6. Push your changes to the public repository, and announce it to the
     public.

  7. Every once in a while, _git repack_ the public repository.  Go
     back to step 5. and continue working.

   A recommended work cycle for a "subsystem maintainer" who works on
that project and has an own "public repository" goes like this:

  1. Prepare your work repository, by _git clone_ the public repository
     of the "project lead". The URL used for the initial cloning is
     stored in the remote.origin.url configuration variable.

  2. Prepare a public repository accessible to others, just like the
     "project lead" person does.

  3. Copy over the packed files from "project lead" public repository
     to your public repository, unless the "project lead" repository
     lives on the same machine as yours.  In the latter case, you can
     use `objects/info/alternates' file to point at the repository you
     are borrowing from.

  4. Push into the public repository from your primary repository. Run
     _git repack_, and possibly _git prune_ if the transport used for
     pulling from your repository supports packed repositories.

  5. Keep working in your primary repository. Your changes include
     modifications of your own, patches you receive via e-mails, and
     merges resulting from pulling the "public" repositories of your
     "project lead" and possibly your "sub-subsystem maintainers".

     You can repack this private repository whenever you feel like.

  6. Push your changes to your public repository, and ask your "project
     lead" and possibly your "sub-subsystem maintainers" to pull from
     it.

  7. Every once in a while, _git repack_ the public repository.  Go
     back to step 5. and continue working.

   A recommended work cycle for an "individual developer" who does not
have a "public" repository is somewhat different. It goes like this:

  1. Prepare your work repository, by _git clone_ the public repository
     of the "project lead" (or a "subsystem maintainer", if you work on
     a subsystem). The URL used for the initial cloning is stored in
     the remote.origin.url configuration variable.

  2. Do your work in your repository on _master_ branch.

  3. Run `git fetch origin' from the public repository of your upstream
     every once in a while. This does only the first half of `git pull'
     but does not merge. The head of the public repository is stored in
     `.git/refs/remotes/origin/master'.

  4. Use `git cherry origin' to see which ones of your patches were
     accepted, and/or use `git rebase origin' to port your unmerged
     changes forward to the updated upstream.

  5. Use `git format-patch origin' to prepare patches for e-mail
     submission to your upstream and send it out. Go back to step 2.
     and continue.


Working with Others, Shared Repository Style
********************************************

If you are coming from CVS background, the style of cooperation
suggested in the previous section may be new to you. You do not have to
worry. git supports "shared public repository" style of cooperation you
are probably more familiar with as well.

   See gitcvs-migration(7) for the details.



Bundling your work together
***************************

It is likely that you will be working on more than one thing at a time.
It is easy to manage those more-or-less independent tasks using
branches with git.

   We have already seen how branches work previously, with "fun and
work" example using two branches.  The idea is the same if there are
more than two branches.  Let’s say you started out from "master"
head, and have some new code in the "master" branch, and two
independent fixes in the "commit-fix" and "diff-fix" branches:

     $ git show-branch
     ! [commit-fix] Fix commit message normalization.
      ! [diff-fix] Fix rename detection.
       * [master] Release candidate #1
     ---
      +  [diff-fix] Fix rename detection.
      +  [diff-fix~1] Better common substring algorithm.
     +   [commit-fix] Fix commit message normalization.
       * [master] Release candidate #1
     ++* [diff-fix~2] Pretty-print messages.

   Both fixes are tested well, and at this point, you want to merge in
both of them.  You could merge in _diff-fix_ first and then
_commit-fix_ next, like this:

     $ git merge -m "Merge fix in diff-fix" diff-fix
     $ git merge -m "Merge fix in commit-fix" commit-fix

   Which would result in:

     $ git show-branch
     ! [commit-fix] Fix commit message normalization.
      ! [diff-fix] Fix rename detection.
       * [master] Merge fix in commit-fix
     ---
       - [master] Merge fix in commit-fix
     + * [commit-fix] Fix commit message normalization.
       - [master~1] Merge fix in diff-fix
      +* [diff-fix] Fix rename detection.
      +* [diff-fix~1] Better common substring algorithm.
       * [master~2] Release candidate #1
     ++* [master~3] Pretty-print messages.

   However, there is no particular reason to merge in one branch first
and the other next, when what you have are a set of truly independent
changes (if the order mattered, then they are not independent by
definition).  You could instead merge those two branches into the
current branch at once.  First let’s undo what we just did and start
over.  We would want to get the master branch before these two merges
by resetting it to _master~2_:

     $ git reset --hard master~2

   You can make sure `git show-branch' matches the state before those
two _git merge_ you just did.  Then, instead of running two _git merge_
commands in a row, you would merge these two branch heads (this is
known as _making an Octopus_):

     $ git merge commit-fix diff-fix
     $ git show-branch
     ! [commit-fix] Fix commit message normalization.
      ! [diff-fix] Fix rename detection.
       * [master] Octopus merge of branches 'diff-fix' and 'commit-fix'
     ---
       - [master] Octopus merge of branches 'diff-fix' and 'commit-fix'
     + * [commit-fix] Fix commit message normalization.
      +* [diff-fix] Fix rename detection.
      +* [diff-fix~1] Better common substring algorithm.
       * [master~1] Release candidate #1
     ++* [master~2] Pretty-print messages.

   Note that you should not do Octopus because you can.  An octopus is
a valid thing to do and often makes it easier to view the commit
history if you are merging more than two independent changes at the
same time.  However, if you have merge conflicts with any of the
branches you are merging in and need to hand resolve, that is an
indication that the development happened in those branches were not
independent after all, and you should merge two at a time, documenting
how you resolved the conflicts, and the reason why you preferred
changes made in one side over the other.  Otherwise it would make the
project history harder to follow, not easier.



SEE ALSO
********

gittutorial(7), gittutorial-2(7), gitcvs-migration(7), git-help(1),
Everyday git (everyday.html), The Git User’s Manual (user-manual.html)



GIT
***

Part of the git(1) suite.


File: gitman.info,  Node: gitglossary,  Up: Top

Name
****

gitglossary — A GIT Glossary



Synopsis
********

*



DESCRIPTION
***********

alternate object database
     Via the alternates mechanism, a repository (*note
     [def_repository]::) can inherit part of its object database (*note
     [def_object_database]::) from another object database, which is
     called "alternate".

bare repository
     A bare repository is normally an appropriately named directory
     (*note [def_directory]::) with a `.git' suffix that does not have
     a locally checked-out copy of any of the files under revision
     control. That is, all of the `git' administrative and control
     files that would normally be present in the hidden `.git'
     sub-directory are directly present in the `repository.git'
     directory instead, and no other files are present and checked out.
     Usually publishers of public repositories make bare repositories
     available.

blob object
     Untyped object (*note [def_object]::), e.g. the contents of a file.

branch
     A "branch" is an active line of development.  The most recent
     commit (*note [def_commit]::) on a branch is referred to as the
     tip of that branch.  The tip of the branch is referenced by a
     branch head (*note [def_head]::), which moves forward as
     additional development is done on the branch.  A single git
     repository (*note [def_repository]::) can track an arbitrary
     number of branches, but your working tree (*note
     [def_working_tree]::) is associated with just one of them (the
     "current" or "checked out" branch), and HEAD (*note [def_HEAD]::)
     points to that branch.

cache
     Obsolete for: index (*note [def_index]::).

chain
     A list of objects, where each object (*note [def_object]::) in the
     list contains a reference to its successor (for example, the
     successor of a commit (*note [def_commit]::) could be one of its
     parents (*note [def_parent]::)).

changeset
     BitKeeper/cvsps speak for "commit (*note [def_commit]::)". Since
     git does not store changes, but states, it really does not make
     sense to use the term "changesets" with git.

checkout
     The action of updating all or part of the working tree (*note
     [def_working_tree]::) with a tree object (*note
     [def_tree_object]::) or blob (*note [def_blob_object]::) from the
     object database (*note [def_object_database]::), and updating the
     index (*note [def_index]::) and HEAD (*note [def_HEAD]::) if the
     whole working tree has been pointed at a new branch (*note
     [def_branch]::).

cherry-picking
     In SCM (*note [def_SCM]::) jargon, "cherry pick" means to choose a
     subset of changes out of a series of changes (typically commits)
     and record them as a new series of changes on top of a different
     codebase. In GIT, this is performed by the "git cherry-pick"
     command to extract the change introduced by an existing commit
     (*note [def_commit]::) and to record it based on the tip of the
     current branch (*note [def_branch]::) as a new commit.

clean
     A working tree (*note [def_working_tree]::) is clean, if it
     corresponds to the revision (*note [def_revision]::) referenced by
     the current head (*note [def_head]::). Also see "dirty (*note
     [def_dirty]::)".

commit
     As a noun: A single point in the git history; the entire history
     of a project is represented as a set of interrelated commits.  The
     word "commit" is often used by git in the same places other
     revision control systems use the words "revision" or "version".
     Also used as a short hand for commit object (*note
     [def_commit_object]::).

     As a verb: The action of storing a new snapshot of the project’s
     state in the git history, by creating a new commit representing
     the current state of the index (*note [def_index]::) and advancing
     HEAD (*note [def_HEAD]::) to point at the new commit.

commit object
     An object (*note [def_object]::) which contains the information
     about a particular revision (*note [def_revision]::), such as
     parents (*note [def_parent]::), committer, author, date and the
     tree object (*note [def_tree_object]::) which corresponds to the
     top directory (*note [def_directory]::) of the stored revision.

core git
     Fundamental data structures and utilities of git. Exposes only
     limited source code management tools.

DAG
     Directed acyclic graph. The commit objects (*note
     [def_commit_object]::) form a directed acyclic graph, because they
     have parents (directed), and the graph of commit objects is
     acyclic (there is no chain (*note [def_chain]::) which begins and
     ends with the same object (*note [def_object]::)).

dangling object
     An unreachable object (*note [def_unreachable_object]::) which is
     not reachable (*note [def_reachable]::) even from other
     unreachable objects; a dangling object has no references to it
     from any reference or object (*note [def_object]::) in the
     repository (*note [def_repository]::).

detached HEAD
     Normally the HEAD (*note [def_HEAD]::) stores the name of a branch
     (*note [def_branch]::).  However, git also allows you to check out
     (*note [def_checkout]::) an arbitrary commit (*note
     [def_commit]::) that isn’t necessarily the tip of any particular
     branch.  In this case HEAD is said to be "detached".

dircache
     You are *waaaaay* behind. See index (*note [def_index]::).

directory
     The list you get with "ls" :-)

dirty
     A working tree (*note [def_working_tree]::) is said to be "dirty"
     if it contains modifications which have not been committed (*note
     [def_commit]::) to the current branch (*note [def_branch]::).

ent
     Favorite synonym to "tree-ish (*note [def_tree-ish]::)" by some
     total geeks. See http://en.wikipedia.org/wiki/Ent_(Middle-earth
     (http://en.wikipedia.org/wiki/Ent_(Middle-earth)) for an in-depth
     explanation. Avoid this term, not to confuse people.

evil merge
     An evil merge is a merge (*note [def_merge]::) that introduces
     changes that do not appear in any parent (*note [def_parent]::).

fast-forward
     A fast-forward is a special type of merge (*note [def_merge]::)
     where you have a revision (*note [def_revision]::) and you are
     "merging" another branch (*note [def_branch]::)'s changes that
     happen to be a descendant of what you have. In such these cases,
     you do not make a new merge (*note [def_merge]::) commit (*note
     [def_commit]::) but instead just update to his revision. This will
     happen frequently on a remote-tracking branch (*note
     [def_remote_tracking_branch]::) of a remote repository (*note
     [def_repository]::).

fetch
     Fetching a branch (*note [def_branch]::) means to get the
     branch’s head ref (*note [def_head_ref]::) from a remote
     repository (*note [def_repository]::), to find out which objects
     are missing from the local object database (*note
     [def_object_database]::), and to get them, too.  See also
     git-fetch(1).

file system
     Linus Torvalds originally designed git to be a user space file
     system, i.e. the infrastructure to hold files and directories.
     That ensured the efficiency and speed of git.

git archive
     Synonym for repository (*note [def_repository]::) (for arch
     people).

grafts
     Grafts enables two otherwise different lines of development to be
     joined together by recording fake ancestry information for
     commits. This way you can make git pretend the set of parents
     (*note [def_parent]::) a commit (*note [def_commit]::) has is
     different from what was recorded when the commit was created.
     Configured via the `.git/info/grafts' file.

hash
     In git’s context, synonym to object name (*note
     [def_object_name]::).

head
     A named reference (*note [def_ref]::) to the commit (*note
     [def_commit]::) at the tip of a branch (*note [def_branch]::).
     Heads are stored in a file in `$GIT_DIR/refs/heads/' directory,
     except when using packed refs. (See git-pack-refs(1).)

HEAD
     The current branch (*note [def_branch]::).  In more detail: Your
     working tree (*note [def_working_tree]::) is normally derived from
     the state of the tree referred to by HEAD.  HEAD is a reference to
     one of the heads (*note [def_head]::) in your repository, except
     when using a detached HEAD (*note [def_detached_HEAD]::), in which
     case it directly references an arbitrary commit.

head ref
     A synonym for head (*note [def_head]::).

hook
     During the normal execution of several git commands, call-outs are
     made to optional scripts that allow a developer to add
     functionality or checking. Typically, the hooks allow for a
     command to be pre-verified and potentially aborted, and allow for
     a post-notification after the operation is done. The hook scripts
     are found in the `$GIT_DIR/hooks/' directory, and are enabled by
     simply removing the `.sample' suffix from the filename. In earlier
     versions of git you had to make them executable.

index
     A collection of files with stat information, whose contents are
     stored as objects. The index is a stored version of your working
     tree (*note [def_working_tree]::). Truth be told, it can also
     contain a second, and even a third version of a working tree,
     which are used when merging (*note [def_merge]::).

index entry
     The information regarding a particular file, stored in the index
     (*note [def_index]::). An index entry can be unmerged, if a merge
     (*note [def_merge]::) was started, but not yet finished (i.e. if
     the index contains multiple versions of that file).

master
     The default development branch (*note [def_branch]::). Whenever you
     create a git repository (*note [def_repository]::), a branch named
     "master" is created, and becomes the active branch. In most cases,
     this contains the local development, though that is purely by
     convention and is not required.

merge
     As a verb: To bring the contents of another branch (*note
     [def_branch]::) (possibly from an external repository (*note
     [def_repository]::)) into the current branch.  In the case where
     the merged-in branch is from a different repository, this is done
     by first fetching (*note [def_fetch]::) the remote branch and then
     merging the result into the current branch.  This combination of
     fetch and merge operations is called a pull (*note [def_pull]::).
     Merging is performed by an automatic process that identifies
     changes made since the branches diverged, and then applies all
     those changes together.  In cases where changes conflict, manual
     intervention may be required to complete the merge.

     As a noun: unless it is a fast-forward (*note
     [def_fast_forward]::), a successful merge results in the creation
     of a new commit (*note [def_commit]::) representing the result of
     the merge, and having as parents (*note [def_parent]::) the tips
     of the merged branches (*note [def_branch]::).  This commit is
     referred to as a "merge commit", or sometimes just a "merge".

object
     The unit of storage in git. It is uniquely identified by the SHA1
     (*note [def_SHA1]::) of its contents. Consequently, an object can
     not be changed.

object database
     Stores a set of "objects", and an individual object (*note
     [def_object]::) is identified by its object name (*note
     [def_object_name]::). The objects usually live in
     `$GIT_DIR/objects/'.

object identifier
     Synonym for object name (*note [def_object_name]::).

object name
     The unique identifier of an object (*note [def_object]::). The
     hash (*note [def_hash]::) of the object’s contents using the
     Secure Hash Algorithm 1 and usually represented by the 40
     character hexadecimal encoding of the hash (*note [def_hash]::) of
     the object.

object type
     One of the identifiers "commit (*note [def_commit_object]::)",
     "tree (*note [def_tree_object]::)", "tag (*note
     [def_tag_object]::)" or "blob (*note [def_blob_object]::)"
     describing the type of an object (*note [def_object]::).

octopus
     To merge (*note [def_merge]::) more than two branches (*note
     [def_branch]::). Also denotes an intelligent predator.

origin
     The default upstream repository (*note [def_repository]::). Most
     projects have at least one upstream project which they track. By
     default _origin_ is used for that purpose. New upstream updates
     will be fetched into remote remote-tracking branches (*note
     [def_remote_tracking_branch]::) named
     origin/name-of-upstream-branch, which you can see using `git
     branch -r'.

pack
     A set of objects which have been compressed into one file (to save
     space or to transmit them efficiently).

pack index
     The list of identifiers, and other information, of the objects in a
     pack (*note [def_pack]::), to assist in efficiently accessing the
     contents of a pack.

pathspec
     Pattern used to specify paths.

     Pathspecs are used on the command line of "git ls-files", "git
     ls-tree", "git add", "git grep", "git diff", "git checkout", and
     many other commands to limit the scope of operations to some
     subset of the tree or worktree.  See the documentation of each
     command for whether paths are relative to the current directory or
     toplevel.  The pathspec syntax is as follows:

        * any path matches itself

        * the pathspec up to the last slash represents a directory
          prefix.  The scope of that pathspec is limited to that
          subtree.

        * the rest of the pathspec is a pattern for the remainder of
          the pathname.  Paths relative to the directory prefix will be
          matched against that pattern using fnmatch(3); in particular,
          _*_ and _?_ _can_ match directory separators.

          For example, Documentation/*.jpg will match all .jpg files in
          the Documentation subtree, including
          Documentation/chapter_1/figure_1.jpg.

     A pathspec that begins with a colon `:' has special meaning.  In
     the short form, the leading colon `:' is followed by zero or more
     "magic signature" letters (which optionally is terminated by
     another colon `:'), and the remainder is the pattern to match
     against the path. The optional colon that terminates the "magic
     signature" can be omitted if the pattern begins with a character
     that cannot be a "magic signature" and is not a colon.

     In the long form, the leading colon `:' is followed by a open
     parenthesis `(', a comma-separated list of zero or more "magic
     words", and a close parentheses `)', and the remainder is the
     pattern to match against the path.

     The "magic signature" consists of an ASCII symbol that is not
     alphanumeric.

    top `/'
          The magic word `top' (mnemonic: `/') makes the pattern match
          from the root of the working tree, even when you are running
          the command from inside a subdirectory.

     Currently only the slash `/' is recognized as the "magic
     signature", but it is envisioned that we will support more types
     of magic in later versions of git.

     A pathspec with only a colon means "there is no pathspec". This
     form should not be combined with other pathspec.

parent
     A commit object (*note [def_commit_object]::) contains a (possibly
     empty) list of the logical predecessor(s) in the line of
     development, i.e. its parents.

pickaxe
     The term pickaxe (*note [def_pickaxe]::) refers to an option to
     the diffcore routines that help select changes that add or delete
     a given text string. With the `--pickaxe-all' option, it can be
     used to view the full changeset (*note [def_changeset]::) that
     introduced or removed, say, a particular line of text. See
     git-diff(1).

plumbing
     Cute name for core git (*note [def_core_git]::).

porcelain
     Cute name for programs and program suites depending on core git
     (*note [def_core_git]::), presenting a high level access to core
     git. Porcelains expose more of a SCM (*note [def_SCM]::) interface
     than the plumbing (*note [def_plumbing]::).

pull
     Pulling a branch (*note [def_branch]::) means to fetch (*note
     [def_fetch]::) it and merge (*note [def_merge]::) it.  See also
     git-pull(1).

push
     Pushing a branch (*note [def_branch]::) means to get the branch’s
     head ref (*note [def_head_ref]::) from a remote repository (*note
     [def_repository]::), find out if it is a direct ancestor to the
     branch’s local head ref, and in that case, putting all objects,
     which are reachable (*note [def_reachable]::) from the local head
     ref, and which are missing from the remote repository, into the
     remote object database (*note [def_object_database]::), and
     updating the remote head ref. If the remote head (*note
     [def_head]::) is not an ancestor to the local head, the push fails.

reachable
     All of the ancestors of a given commit (*note [def_commit]::) are
     said to be "reachable" from that commit. More generally, one
     object (*note [def_object]::) is reachable from another if we can
     reach the one from the other by a chain (*note [def_chain]::) that
     follows tags (*note [def_tag]::) to whatever they tag, commits
     (*note [def_commit_object]::) to their parents or trees, and trees
     (*note [def_tree_object]::) to the trees or blobs (*note
     [def_blob_object]::) that they contain.

rebase
     To reapply a series of changes from a branch (*note
     [def_branch]::) to a different base, and reset the head (*note
     [def_head]::) of that branch to the result.

ref
     A 40-byte hex representation of a SHA1 (*note [def_SHA1]::) or a
     name that denotes a particular object (*note [def_object]::). They
     may be stored in a file under `$GIT_DIR/refs/' directory, or in
     the `$GIT_DIR/packed-refs' file.

reflog
     A reflog shows the local "history" of a ref.  In other words, it
     can tell you what the 3rd last revision in _this_ repository was,
     and what was the current state in _this_ repository, yesterday
     9:14pm.  See git-reflog(1) for details.

refspec
     A "refspec" is used by fetch (*note [def_fetch]::) and push (*note
     [def_push]::) to describe the mapping between remote ref (*note
     [def_ref]::) and local ref. They are combined with a colon in the
     format <src>:<dst>, preceded by an optional plus sign, +.  For
     example: `git fetch $URL refs/heads/master:refs/heads/origin'
     means "grab the master branch (*note [def_branch]::) head (*note
     [def_head]::) from the $URL and store it as my origin branch
     head". And `git push $URL
     refs/heads/master:refs/heads/to-upstream' means "publish my master
     branch head as to-upstream branch at $URL". See also git-push(1).

remote-tracking branch
     A regular git branch (*note [def_branch]::) that is used to follow
     changes from another repository (*note [def_repository]::). A
     remote-tracking branch should not contain direct modifications or
     have local commits made to it. A remote-tracking branch can
     usually be identified as the right-hand-side ref (*note
     [def_ref]::) in a Pull: refspec (*note [def_refspec]::).

repository
     A collection of refs (*note [def_ref]::) together with an object
     database (*note [def_object_database]::) containing all objects
     which are reachable (*note [def_reachable]::) from the refs,
     possibly accompanied by meta data from one or more porcelains
     (*note [def_porcelain]::). A repository can share an object
     database with other repositories via alternates mechanism (*note
     [def_alternate_object_database]::).

resolve
     The action of fixing up manually what a failed automatic merge
     (*note [def_merge]::) left behind.

revision
     A particular state of files and directories which was stored in the
     object database (*note [def_object_database]::). It is referenced
     by a commit object (*note [def_commit_object]::).

rewind
     To throw away part of the development, i.e. to assign the head
     (*note [def_head]::) to an earlier revision (*note
     [def_revision]::).

SCM
     Source code management (tool).

SHA1
     Synonym for object name (*note [def_object_name]::).

shallow repository
     A shallow repository (*note [def_repository]::) has an incomplete
     history some of whose commits (*note [def_commit]::) have parents
     (*note [def_parent]::) cauterized away (in other words, git is
     told to pretend that these commits do not have the parents, even
     though they are recorded in the commit         object (*note
     [def_commit_object]::)). This is sometimes useful when you are
     interested only in the recent history of a project even though the
     real history recorded in the upstream is much larger. A shallow
     repository is created by giving the `--depth' option to
     git-clone(1), and its history can be later deepened with
     git-fetch(1).

symref
     Symbolic reference: instead of containing the SHA1 (*note
     [def_SHA1]::) id itself, it is of the format _ref:
     refs/some/thing_ and when referenced, it recursively dereferences
     to this reference.  _HEAD (*note [def_HEAD]::)_ is a prime example
     of a symref. Symbolic references are manipulated with the
     git-symbolic-ref(1) command.

tag
     A ref (*note [def_ref]::) under `refs/tags/' namespace that points
     to an object of an arbitrary type (typically a tag points to
     either a tag (*note [def_tag_object]::) or a commit object (*note
     [def_commit_object]::)).  In contrast to a head (*note
     [def_head]::), a tag is not updated by the `commit' command. A git
     tag has nothing to do with a Lisp tag (which would be called an
     object type (*note [def_object_type]::) in git’s context). A tag
     is most typically used to mark a particular point in the commit
     ancestry chain (*note [def_chain]::).

tag object
     An object (*note [def_object]::) containing a ref (*note
     [def_ref]::) pointing to another object, which can contain a
     message just like a commit object (*note [def_commit_object]::).
     It can also contain a (PGP) signature, in which case it is called
     a "signed tag object".

topic branch
     A regular git branch (*note [def_branch]::) that is used by a
     developer to identify a conceptual line of development. Since
     branches are very easy and inexpensive, it is often desirable to
     have several small branches that each contain very well defined
     concepts or small incremental yet related changes.

tree
     Either a working tree (*note [def_working_tree]::), or a tree
       object (*note [def_tree_object]::) together with the dependent
     blob (*note [def_blob_object]::) and tree objects (i.e. a stored
     representation of a working tree).

tree object
     An object (*note [def_object]::) containing a list of file names
     and modes along with refs to the associated blob and/or tree
     objects. A tree (*note [def_tree]::) is equivalent to a directory
     (*note [def_directory]::).

tree-ish
     A ref (*note [def_ref]::) pointing to either a commit
     object (*note [def_commit_object]::), a tree object (*note
     [def_tree_object]::), or a tag         object (*note
     [def_tag_object]::) pointing to a tag or commit or tree object.

unmerged index
     An index (*note [def_index]::) which contains unmerged index
     entries (*note [def_index_entry]::).

unreachable object
     An object (*note [def_object]::) which is not reachable (*note
     [def_reachable]::) from a branch (*note [def_branch]::), tag
     (*note [def_tag]::), or any other reference.

upstream branch
     The default branch (*note [def_branch]::) that is merged into the
     branch in question (or the branch in question is rebased onto). It
     is configured via branch.<name>.remote and branch.<name>.merge. If
     the upstream branch of _A_ is _origin/B_ sometimes we say "_A_ is
     tracking _origin/B_".

working tree
     The tree of actual checked out files.  The working tree normally
     contains the contents of the HEAD (*note [def_HEAD]::) commit’s
     tree, plus any local changes that you have made but not yet
     committed.


SEE ALSO
********

gittutorial(7), gittutorial-2(7), gitcvs-migration(7), Everyday git
(everyday.html), The Git User’s Manual (user-manual.html)



GIT
***

Part of the git(1) suite.


File: gitman.info,  Node: gitdiffcore,  Up: Top

Name
****

gitdiffcore — Tweaking diff output



Synopsis
********

     git diff *


DESCRIPTION
***********

The diff commands _git diff-index_, _git diff-files_, and _git
diff-tree_ can be told to manipulate differences they find in
unconventional ways before showing _diff_ output.  The manipulation is
collectively called "diffcore transformation".  This short note
describes what they are and how to use them to produce _diff_ output
that is easier to understand than the conventional kind.



The chain of operation
**********************

The _git diff-*_ family works by first comparing two sets of files:

   * _git diff-index_ compares contents of a "tree" object and the
     working directory (when _-cached_ flag is not used) or a "tree"
     object and the index file (when _-cached_ flag is used);

   * _git diff-files_ compares contents of the index file and the
     working directory;

   * _git diff-tree_ compares contents of two "tree" objects;

   In all of these cases, the commands themselves first optionally limit
the two sets of files by any pathspecs given on their command-lines,
and compare corresponding paths in the two resulting sets of files.

   The pathspecs are used to limit the world diff operates in.  They
remove the filepairs outside the specified sets of pathnames.  E.g. If
the input set of filepairs included:

     :100644 100644 bcd1234... 0123456... M junkfile

   but the command invocation was `git diff-files myfile', then the
junkfile entry would be removed from the list because only "myfile" is
under consideration.

   The result of comparison is passed from these commands to what is
internally called "diffcore", in a format similar to what is output
when the -p option is not used.  E.g.

     in-place edit  :100644 100644 bcd1234... 0123456... M file0
     create         :000000 100644 0000000... 1234567... A file4
     delete         :100644 000000 1234567... 0000000... D file5
     unmerged       :000000 000000 0000000... 0000000... U file6

   The diffcore mechanism is fed a list of such comparison results
(each of which is called "filepair", although at this point each of
them talks about a single file), and transforms such a list into
another list.  There are currently 5 such transformations:

   * diffcore-break

   * diffcore-rename

   * diffcore-merge-broken

   * diffcore-pickaxe

   * diffcore-order

   These are applied in sequence.  The set of filepairs _git diff-*_
commands find are used as the input to diffcore-break, and the output
from diffcore-break is used as the input to the next transformation.
The final result is then passed to the output routine and generates
either diff-raw format (see Output format sections of the manual for
_git diff-*_ commands) or diff-patch format.



diffcore-break: For Splitting Up "Complete Rewrites"
****************************************************

The second transformation in the chain is diffcore-break, and is
controlled by the -B option to the _git diff-*_ commands.  This is used
to detect a filepair that represents "complete rewrite" and break such
filepair into two filepairs that represent delete and create.  E.g.  If
the input contained this filepair:

     :100644 100644 bcd1234... 0123456... M file0

   and if it detects that the file "file0" is completely rewritten, it
changes it to:

     :100644 000000 bcd1234... 0000000... D file0
     :000000 100644 0000000... 0123456... A file0

   For the purpose of breaking a filepair, diffcore-break examines the
extent of changes between the contents of the files before and after
modification (i.e. the contents that have "bcd1234…" and "0123456…"
as their SHA1 content ID, in the above example).  The amount of
deletion of original contents and insertion of new material are added
together, and if it exceeds the "break score", the filepair is broken
into two.  The break score defaults to 50% of the size of the smaller
of the original and the result (i.e. if the edit shrinks the file, the
size of the result is used; if the edit lengthens the file, the size of
the original is used), and can be customized by giving a number after
"-B" option (e.g. "-B75" to tell it to use 75%).



diffcore-rename: For Detection Renames and Copies
*************************************************

This transformation is used to detect renames and copies, and is
controlled by the -M option (to detect renames) and the -C option (to
detect copies as well) to the _git diff-*_ commands.  If the input
contained these filepairs:

     :100644 000000 0123456... 0000000... D fileX
     :000000 100644 0000000... 0123456... A file0

   and the contents of the deleted file fileX is similar enough to the
contents of the created file file0, then rename detection merges these
filepairs and creates:

     :100644 100644 0123456... 0123456... R100 fileX file0

   When the "-C" option is used, the original contents of modified
files, and deleted files (and also unmodified files, if the
"-find-copies-harder" option is used) are considered as candidates of
the source files in rename/copy operation.  If the input were like
these filepairs, that talk about a modified file fileY and a newly
created file file0:

     :100644 100644 0123456... 1234567... M fileY
     :000000 100644 0000000... bcd3456... A file0

   the original contents of fileY and the resulting contents of file0
are compared, and if they are similar enough, they are changed to:

     :100644 100644 0123456... 1234567... M fileY
     :100644 100644 0123456... bcd3456... C100 fileY file0

   In both rename and copy detection, the same "extent of changes"
algorithm used in diffcore-break is used to determine if two files are
"similar enough", and can be customized to use a similarity score
different from the default of 50% by giving a number after the "-M" or
"-C" option (e.g. "-M8" to tell it to use 8/10 = 80%).

   Note.  When the "-C" option is used with `--find-copies-harder'
option, _git diff-*_ commands feed unmodified filepairs to diffcore
mechanism as well as modified ones.  This lets the copy detector
consider unmodified files as copy source candidates at the expense of
making it slower.  Without `--find-copies-harder', _git diff-*_
commands can detect copies only if the file that was copied happened to
have been modified in the same changeset.



diffcore-merge-broken: For Putting "Complete Rewrites" Back Together
********************************************************************

This transformation is used to merge filepairs broken by
diffcore-break, and not transformed into rename/copy by
diffcore-rename, back into a single modification.  This always runs
when diffcore-break is used.

   For the purpose of merging broken filepairs back, it uses a
different "extent of changes" computation from the ones used by
diffcore-break and diffcore-rename.  It counts only the deletion from
the original, and does not count insertion.  If you removed only 10
lines from a 100-line document, even if you added 910 new lines to make
a new 1000-line document, you did not do a complete rewrite.
diffcore-break breaks such a case in order to help diffcore-rename to
consider such filepairs as candidate of rename/copy detection, but if
filepairs broken that way were not matched with other filepairs to
create rename/copy, then this transformation merges them back into the
original "modification".

   The "extent of changes" parameter can be tweaked from the default
80% (that is, unless more than 80% of the original material is deleted,
the broken pairs are merged back into a single modification) by giving
a second number to -B option, like these:

   * -B50/60 (give 50% "break score" to diffcore-break, use 60% for
     diffcore-merge-broken).

   * -B/60 (the same as above, since diffcore-break defaults to 50%).

   Note that earlier implementation left a broken pair as a separate
creation and deletion patches.  This was an unnecessary hack and the
latest implementation always merges all the broken pairs back into
modifications, but the resulting patch output is formatted differently
for easier review in case of such a complete rewrite by showing the
entire contents of old version prefixed with _-_, followed by the
entire contents of new version prefixed with _+_.



diffcore-pickaxe: For Detecting Addition/Deletion of Specified String
*********************************************************************

This transformation is used to find filepairs that represent changes
that touch a specified string, and is controlled by the -S option and
the `--pickaxe-all' option to the _git diff-*_ commands.

   When diffcore-pickaxe is in use, it checks if there are filepairs
whose "result" side and whose "origin" side have different number of
specified string.  Such a filepair represents "the string appeared in
this changeset".  It also checks for the opposite case that loses the
specified string.

   When `--pickaxe-all' is not in effect, diffcore-pickaxe leaves only
such filepairs that touch the specified string in its output.  When
`--pickaxe-all' is used, diffcore-pickaxe leaves all filepairs intact
if there is such a filepair, or makes the output empty otherwise.  The
latter behaviour is designed to make reviewing of the changes in the
context of the whole changeset easier.



diffcore-order: For Sorting the Output Based on Filenames
*********************************************************

This is used to reorder the filepairs according to the user’s (or
project’s) taste, and is controlled by the -O option to the _git
diff-*_ commands.

   This takes a text file each of whose lines is a shell glob pattern.
Filepairs that match a glob pattern on an earlier line in the file are
output before ones that match a later line, and filepairs that do not
match any glob pattern are output last.

   As an example, a typical orderfile for the core git probably would
look like this:

     README
     Makefile
     Documentation
     *.h
     *.c
     t


SEE ALSO
********

git-diff(1), git-diff-files(1), git-diff-index(1), git-diff-tree(1),
git-format-patch(1), git-log(1), gitglossary(7), The Git User’s
Manual (user-manual.html)



GIT
***

Part of the git(1) suite.


File: gitman.info,  Node: gitnamespaces,  Up: Top

Name
****

gitnamespaces — Git namespaces



Synopsis
********

     GIT_NAMESPACE=<namespace> git upload-pack
     GIT_NAMESPACE=<namespace> git receive-pack


DESCRIPTION
***********

Git supports dividing the refs of a single repository into multiple
namespaces, each of which has its own branches, tags, and HEAD.  Git can
expose each namespace as an independent repository to pull from and push
to, while sharing the object store, and exposing all the refs to
operations such as git-gc(1).

   Storing multiple repositories as namespaces of a single repository
avoids storing duplicate copies of the same objects, such as when
storing multiple branches of the same source.  The alternates mechanism
provides similar support for avoiding duplicates, but alternates do not
prevent duplication between new objects added to the repositories
without ongoing maintenance, while namespaces do.

   To specify a namespace, set the `GIT_NAMESPACE' environment variable
to the namespace.  For each ref namespace, git stores the corresponding
refs in a directory under `refs/namespaces/'.  For example,
`GIT_NAMESPACE=foo' will store refs under `refs/namespaces/foo/'.  You
can also specify namespaces via the `--namespace' option to git(1).

   Note that namespaces which include a `/' will expand to a hierarchy
of namespaces; for example, `GIT_NAMESPACE=foo/bar' will store refs
under `refs/namespaces/foo/refs/namespaces/bar/'.  This makes paths in
`GIT_NAMESPACE' behave hierarchically, so that cloning with
`GIT_NAMESPACE=foo/bar' produces the same result as cloning with
`GIT_NAMESPACE=foo' and cloning from that repo with
`GIT_NAMESPACE=bar'.  It also avoids ambiguity with strange namespace
paths such as `foo/refs/heads/', which could otherwise generate
directory/file conflicts within the `refs' directory.

   git-upload-pack(1) and git-receive-pack(1) rewrite the names of refs
as specified by `GIT_NAMESPACE'.  git-upload-pack and git-receive-pack
will ignore all references outside the specified namespace.

   The smart HTTP server, git-http-backend(1), will pass GIT_NAMESPACE
through to the backend programs; see git-http-backend(1) for sample
configuration to expose repository namespaces as repositories.

   For a simple local test, you can use git-remote-ext(1):

     git clone ext::'git --namespace=foo %s /tmp/prefixed.git'


SECURITY
********

Anyone with access to any namespace within a repository can potentially
access objects from any other namespace stored in the same repository.
You can’t directly say "give me object ABCD" if you don’t have a
ref to it, but you can do some other sneaky things like:

  1. Claiming to push ABCD, at which point the server will optimize out
     the need for you to actually send it. Now you have a ref to ABCD
     and can fetch it (claiming not to have it, of course).

  2. Requesting other refs, claiming that you have ABCD, at which point
     the server may generate deltas against ABCD.

   None of this causes a problem if you only host public repositories,
or if everyone who may read one namespace may also read everything in
every other namespace (for instance, if everyone in an organization has
read permission to every repository).


File: gitman.info,  Node: gitrevisions,  Up: Top

Name
****

gitrevisions — specifying revisions and ranges for git



Synopsis
********

gitrevisions



DESCRIPTION
***********

Many Git commands take revision parameters as arguments. Depending on
the command, they denote a specific commit or, for commands which walk
the revision graph (such as git-log(1)), all commits which can be
reached from that commit. In the latter case one can also specify a
range of revisions explicitly.

   In addition, some Git commands (such as git-show(1)) also take
revision parameters which denote other objects than commits, e.g. blobs
("files") or trees ("directories of files").



SPECIFYING REVISIONS
********************

A revision parameter _<rev>_ typically, but not necessarily, names a
commit object.  It uses what is called an _extended SHA1_ syntax.  Here
are various ways to spell object names.  The ones listed near the end
of this list name trees and blobs contained in a commit.

_<sha1>_, e.g. _dae86e1950b1277e545cee180551750029cfe735_, _dae86e_
     The full SHA1 object name (40-byte hexadecimal string), or a
     leading substring that is unique within the repository.  E.g.
     dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the
     same commit object if there is no other object in your repository
     whose object name starts with dae86e.

_<describeOutput>_, e.g. _v1.7.4.2-679-g3bee7fb_
     Output from `git describe'; i.e. a closest tag, optionally
     followed by a dash and a number of commits, followed by a dash, a
     _g_, and an abbreviated object name.

_<refname>_, e.g. _master_, _heads/master_, _refs/heads/master_
     A symbolic ref name.  E.g. _master_ typically means the commit
     object referenced by _refs/heads/master_.  If you happen to have
     both _heads/master_ and _tags/master_, you can explicitly say
     _heads/master_ to tell git which one you mean.  When ambiguous, a
     _<refname>_ is disambiguated by taking the first match in the
     following rules:

       1. If _$GIT_DIR/<refname>_ exists, that is what you mean (this
          is usually useful only for _HEAD_, _FETCH_HEAD_, _ORIG_HEAD_,
          _MERGE_HEAD_ and _CHERRY_PICK_HEAD_);

       2. otherwise, _refs/<refname>_ if it exists;

       3. otherwise, _refs/tags/<refname>_ if it exists;

       4. otherwise, _refs/heads/<refname>_ if it exists;

       5. otherwise, _refs/remotes/<refname>_ if it exists;

       6. otherwise, _refs/remotes/<refname>/HEAD_ if it exists.

          _HEAD_ names the commit on which you based the changes in the
          working tree.  _FETCH_HEAD_ records the branch which you
          fetched from a remote repository with your last `git fetch'
          invocation.  _ORIG_HEAD_ is created by commands that move
          your _HEAD_ in a drastic way, to record the position of the
          _HEAD_ before their operation, so that you can easily change
          the tip of the branch back to the state before you ran them.
          _MERGE_HEAD_ records the commit(s) which you are merging into
          your branch when you run `git merge'.  _CHERRY_PICK_HEAD_
          records the commit which you are cherry-picking when you run
          `git cherry-pick'.

          Note that any of the _refs/*_ cases above may come either from
          the _$GIT_DIR/refs_ directory or from the
          _$GIT_DIR/packed-refs_ file.

_<refname>@{<date>}_, e.g. _master@{yesterday}_, _HEAD@{5 minutes ago}_
     A ref followed by the suffix _@_ with a date specification
     enclosed in a brace pair (e.g. _{yesterday}_, _{1 month 2 weeks 3
     days 1 hour 1 second ago}_ or _{1979-02-26 18:30:00}_) specifies
     the value of the ref at a prior point in time.  This suffix may
     only be used immediately following a ref name and the ref must
     have an existing log (_$GIT_DIR/logs/<ref>_). Note that this looks
     up the state of your *local* ref at a given time; e.g., what was
     in your local _master_ branch last week. If you want to look at
     commits made during certain times, see _-since_ and _-until_.

_<refname>@{<n>}_, e.g. _master@{1}_
     A ref followed by the suffix _@_ with an ordinal specification
     enclosed in a brace pair (e.g. _{1}_, _{15}_) specifies the n-th
     prior value of that ref.  For example _master@{1}_ is the
     immediate prior value of _master_ while _master@{5}_ is the 5th
     prior value of _master_. This suffix may only be used immediately
     following a ref name and the ref must have an existing log
     (_$GIT_DIR/logs/<refname>_).

_@{<n>}_, e.g. _@{1}_
     You can use the _@_ construct with an empty ref part to get at a
     reflog entry of the current branch. For example, if you are on
     branch _blabla_ then _@{1}_ means the same as _blabla@{1}_.

_@{-<n>}_, e.g. _@{-1}_
     The construct _@{-<n>}_ means the <n>th branch checked out before
     the current one.

_<refname>@{upstream}_, e.g. _master@{upstream}_, _@{u}_
     The suffix _@{upstream}_ to a ref (short form _<refname>@{u}_)
     refers to the branch the ref is set to build on top of.  A missing
     ref defaults to the current branch.

_<rev>^_, e.g. _HEAD^, v1.5.1^0_
     A suffix _^_ to a revision parameter means the first parent of
     that commit object.  _^<n>_ means the <n>th parent (i.e.  _<rev>^_
     is equivalent to _<rev>^1_).  As a special rule, _<rev>^0_ means
     the commit itself and is used when _<rev>_ is the object name of a
     tag object that refers to a commit object.

_<rev>~<n>_, e.g. _master~3_
     A suffix _~<n>_ to a revision parameter means the commit object
     that is the <n>th generation ancestor of the named commit object,
     following only the first parents.  I.e. _<rev>~3_ is equivalent to
     _<rev>^^^_ which is equivalent to _<rev>^1^1^1_.  See below for an
     illustration of the usage of this form.

_<rev>^{<type>}_, e.g. _v0.99.8^{commit}_
     A suffix _^_ followed by an object type name enclosed in brace
     pair means the object could be a tag, and dereference the tag
     recursively until an object of that type is found or the object
     cannot be dereferenced anymore (in which case, barf).  _<rev>^0_
     is a short-hand for _<rev>^{commit}_.

_<rev>^{}_, e.g. _v0.99.8^{}_
     A suffix _^_ followed by an empty brace pair means the object
     could be a tag, and dereference the tag recursively until a
     non-tag object is found.

_<rev>^{/<text>}_, e.g. _HEAD^{/fix nasty bug}_
     A suffix _^_ to a revision parameter, followed by a brace pair
     that contains a text led by a slash, is the same as the _:/fix
     nasty bug_ syntax below except that it returns the youngest
     matching commit which is reachable from the _<rev>_ before _^_.

_:/<text>_, e.g. _:/fix nasty bug_
     A colon, followed by a slash, followed by a text, names a commit
     whose commit message matches the specified regular expression.
     This name returns the youngest matching commit which is reachable
     from any ref.  If the commit message starts with a _!_ you have to
     repeat that;  the special sequence _:/!_, followed by something
     else than _!_, is reserved for now.  The regular expression can
     match any part of the commit message. To match messages starting
     with a string, one can use e.g. _:/^foo_.

_<rev>:<path>_, e.g. _HEAD:README_, _:README_, _master:./README_
     A suffix _:_ followed by a path names the blob or tree at the
     given path in the tree-ish object named by the part before the
     colon.  _:path_ (with an empty part before the colon) is a special
     case of the syntax described next: content recorded in the index
     at the given path.  A path starting with _./_ or _../_ is relative
     to the current working directory.  The given path will be
     converted to be relative to the working tree’s root directory.
     This is most useful to address a blob or tree from a commit or
     tree that has the same tree structure as the working tree.

_:<n>:<path>_, e.g. _:0:README_, _:README_
     A colon, optionally followed by a stage number (0 to 3) and a
     colon, followed by a path, names a blob object in the index at the
     given path. A missing stage number (and the colon that follows it)
     names a stage 0 entry. During a merge, stage 1 is the common
     ancestor, stage 2 is the target branch’s version (typically the
     current branch), and stage 3 is the version from the branch which
     is being merged.

   Here is an illustration, by Jon Loeliger.  Both commit nodes B and C
are parents of commit node A.  Parent commits are ordered left-to-right.

     G   H   I   J
      \ /     \ /
       D   E   F
        \  |  / \
         \ | /   |
          \|/    |
           B     C
            \   /
             \ /
              A

     A =      = A^0
     B = A^   = A^1     = A~1
     C = A^2  = A^2
     D = A^^  = A^1^1   = A~2
     E = B^2  = A^^2
     F = B^3  = A^^3
     G = A^^^ = A^1^1^1 = A~3
     H = D^2  = B^^2    = A^^^2  = A~2^2
     I = F^   = B^3^    = A^^3^
     J = F^2  = B^3^2   = A^^3^2


SPECIFYING RANGES
*****************

History traversing commands such as `git log' operate on a set of
commits, not just a single commit.  To these commands, specifying a
single revision with the notation described in the previous section
means the set of commits reachable from that commit, following the
commit ancestry chain.

   To exclude commits reachable from a commit, a prefix _^_ notation is
used.  E.g. _^r1 r2_ means commits reachable from _r2_ but exclude the
ones reachable from _r1_.

   This set operation appears so often that there is a shorthand for
it.  When you have two commits _r1_ and _r2_ (named according to the
syntax explained in SPECIFYING REVISIONS above), you can ask for
commits that are reachable from r2 excluding those that are reachable
from r1 by _^r1 r2_ and it can be written as _r1..r2_.

   A similar notation _r1...r2_ is called symmetric difference of _r1_
and _r2_ and is defined as _r1 r2 -not $(git merge-base -all r1 r2)_.
It is the set of commits that are reachable from either one of _r1_ or
_r2_ but not from both.

   In these two shorthands, you can omit one end and let it default to
HEAD.  For example, _origin.._ is a shorthand for _origin..HEAD_ and
asks "What did I do since I forked from the origin branch?"  Similarly,
_..origin_ is a shorthand for _HEAD..origin_ and asks "What did the
origin do since I forked from them?"  Note that _.._ would mean
_HEAD..HEAD_ which is an empty range that is both reachable and
unreachable from HEAD.

   Two other shorthands for naming a set that is formed by a commit and
its parent commits exist.  The _r1^@_ notation means all parents of
_r1_.  _r1^!_ includes commit _r1_ but excludes all of its parents.

   To summarize:

_<rev>_
     Include commits that are reachable from (i.e. ancestors of) <rev>.

_^<rev>_
     Exclude commits that are reachable from (i.e. ancestors of) <rev>.

_<rev1>..<rev2>_
     Include commits that are reachable from <rev2> but exclude those
     that are reachable from <rev1>.

_<rev1>...<rev2>_
     Include commits that are reachable from either <rev1> or <rev2>
     but exclude those that are reachable from both.

_<rev>^@_, e.g. _HEAD^@_
     A suffix _^_ followed by an at sign is the same as listing all
     parents of _<rev>_ (meaning, include anything reachable from its
     parents, but not the commit itself).

_<rev>^!_, e.g. _HEAD^!_
     A suffix _^_ followed by an exclamation mark is the same as giving
     commit _<rev>_ and then all its parents prefixed with _^_ to
     exclude them (and their ancestors).

   Here are a handful of examples:

     D                G H D
     D F              G H I J D F
     ^G D             H D
     ^D B             E I J F B
     B..C             C
     B...C            G H D E B C
     ^D B C           E I J F B C
     C                I J F C
     C^@              I J F
     C^!              C
     F^! D            G H D F


SEE ALSO
********

git-rev-parse(1)



GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitworkflows,  Up: Top

Name
****

gitworkflows — An overview of recommended workflows with git



Synopsis
********

     git *


DESCRIPTION
***********

This document attempts to write down and motivate some of the workflow
elements used for `git.git' itself.  Many ideas apply in general,
though the full workflow is rarely required for smaller projects with
fewer people involved.

   We formulate a set of _rules_ for quick reference, while the prose
tries to motivate each of them.  Do not always take them literally; you
should value good reasons for your actions higher than manpages such as
this one.



SEPARATE CHANGES
****************

As a general rule, you should try to split your changes into small
logical steps, and commit each of them.  They should be consistent,
working independently of any later commits, pass the test suite, etc.
This makes the review process much easier, and the history much more
useful for later inspection and analysis, for example with git-blame(1)
and git-bisect(1).

   To achieve this, try to split your work into small steps from the
very beginning. It is always easier to squash a few commits together
than to split one big commit into several.  Don’t be afraid of making
too small or imperfect steps along the way. You can always go back later
and edit the commits with `git rebase --interactive' before you publish
them.  You can use `git stash save --keep-index' to run the test suite
independent of other uncommitted changes; see the EXAMPLES section of
git-stash(1).



MANAGING BRANCHES
*****************

There are two main tools that can be used to include changes from one
branch on another: git-merge(1) and git-cherry-pick(1).

   Merges have many advantages, so we try to solve as many problems as
possible with merges alone.  Cherry-picking is still occasionally
useful; see "Merging upwards" below for an example.

   Most importantly, merging works at the branch level, while
cherry-picking works at the commit level.  This means that a merge can
carry over the changes from 1, 10, or 1000 commits with equal ease,
which in turn means the workflow scales much better to a large number
of contributors (and contributions).  Merges are also easier to
understand because a merge commit is a "promise" that all changes from
all its parents are now included.

   There is a tradeoff of course: merges require a more careful branch
management.  The following subsections discuss the important points.



Graduation
==========

As a given feature goes from experimental to stable, it also
"graduates" between the corresponding branches of the software.
`git.git' uses the following _integration branches_:

   * _maint_ tracks the commits that should go into the next
     "maintenance release", i.e., update of the last released stable
     version;

   * _master_ tracks the commits that should go into the next release;

   * _next_ is intended as a testing branch for topics being tested for
     stability for master.

   There is a fourth official branch that is used slightly differently:

   * _pu_ (proposed updates) is an integration branch for things that
     are not quite ready for inclusion yet (see "Integration Branches"
     below).

   Each of the four branches is usually a direct descendant of the one
above it.

   Conceptually, the feature enters at an unstable branch (usually
_next_ or _pu_), and "graduates" to _master_ for the next release once
it is considered stable enough.



Merging upwards
===============

The "downwards graduation" discussed above cannot be done by actually
merging downwards, however, since that would merge _all_ changes on the
unstable branch into the stable one.  Hence the following:

   *Merge upwards*

   Always commit your fixes to the oldest supported branch that require
them.  Then (periodically) merge the integration branches upwards into
each other.

   This gives a very controlled flow of fixes.  If you notice that you
have applied a fix to e.g. _master_ that is also required in _maint_,
you will need to cherry-pick it (using git-cherry-pick(1)) downwards.
This will happen a few times and is nothing to worry about unless you
do it very frequently.



Topic branches
==============

Any nontrivial feature will require several patches to implement, and
may get extra bugfixes or improvements during its lifetime.

   Committing everything directly on the integration branches leads to
many problems: Bad commits cannot be undone, so they must be reverted
one by one, which creates confusing histories and further error
potential when you forget to revert part of a group of changes.
Working in parallel mixes up the changes, creating further confusion.

   Use of "topic branches" solves these problems.  The name is pretty
self explanatory, with a caveat that comes from the "merge upwards"
rule above:

   *Topic branches*

   Make a side branch for every topic (feature, bugfix, …). Fork it
off at the oldest integration branch that you will eventually want to
merge it into.

   Many things can then be done very naturally:

   * To get the feature/bugfix into an integration branch, simply merge
     it.  If the topic has evolved further in the meantime, merge again.
     (Note that you do not necessarily have to merge it to the oldest
     integration branch first.  For example, you can first merge a
     bugfix to _next_, give it some testing time, and merge to _maint_
     when you know it is stable.)

   * If you find you need new features from the branch _other_ to
     continue working on your topic, merge _other_ to _topic_.
     (However, do not do this "just habitually", see below.)

   * If you find you forked off the wrong branch and want to move it
     "back in time", use git-rebase(1).

   Note that the last point clashes with the other two: a topic that has
been merged elsewhere should not be rebased.  See the section on
RECOVERING FROM UPSTREAM REBASE in git-rebase(1).

   We should point out that "habitually" (regularly for no real reason)
merging an integration branch into your topics — and by extension,
merging anything upstream into anything downstream on a regular
basis — is frowned upon:

   *Merge to downstream only at well-defined points*

   Do not merge to downstream except with a good reason: upstream API
changes affect your branch; your branch no longer merges to upstream
cleanly; etc.

   Otherwise, the topic that was merged to suddenly contains more than a
single (well-separated) change.  The many resulting small merges will
greatly clutter up history.  Anyone who later investigates the history
of a file will have to find out whether that merge affected the topic
in development.  An upstream might even inadvertently be merged into a
"more stable" branch.  And so on.



Throw-away integration
======================

If you followed the last paragraph, you will now have many small topic
branches, and occasionally wonder how they interact.  Perhaps the
result of merging them does not even work?  But on the other hand, we
want to avoid merging them anywhere "stable" because such merges cannot
easily be undone.

   The solution, of course, is to make a merge that we can undo: merge
into a throw-away branch.

   *Throw-away integration branches*

   To test the interaction of several topics, merge them into a
throw-away branch.  You must never base any work on such a branch!

   If you make it (very) clear that this branch is going to be deleted
right after the testing, you can even publish this branch, for example
to give the testers a chance to work with it, or other developers a
chance to see if their in-progress work will be compatible.  `git.git'
has such an official throw-away integration branch called _pu_.



Branch management for a release
===============================

Assuming you are using the merge approach discussed above, when you are
releasing your project you will need to do some additional branch
management work.

   A feature release is created from the _master_ branch, since _master_
tracks the commits that should go into the next feature release.

   The _master_ branch is supposed to be a superset of _maint_. If this
condition does not hold, then _maint_ contains some commits that are
not included on _master_. The fixes represented by those commits will
therefore not be included in your feature release.

   To verify that _master_ is indeed a superset of _maint_, use git log:

   *Verify master is a superset of maint*

   `git log master..maint'

   This command should not list any commits.  Otherwise, check out
_master_ and merge _maint_ into it.

   Now you can proceed with the creation of the feature release. Apply a
tag to the tip of _master_ indicating the release version:

   *Release tagging*

   `git tag -s -m "GIT X.Y.Z" vX.Y.Z master'

   You need to push the new tag to a public git server (see
"DISTRIBUTED WORKFLOWS" below). This makes the tag available to others
tracking your project. The push could also trigger a post-update hook
to perform release-related items such as building release tarballs and
preformatted documentation pages.

   Similarly, for a maintenance release, _maint_ is tracking the commits
to be released. Therefore, in the steps above simply tag and push
_maint_ rather than _master_.



Maintenance branch management after a feature release
=====================================================

After a feature release, you need to manage your maintenance branches.

   First, if you wish to continue to release maintenance fixes for the
feature release made before the recent one, then you must create
another branch to track commits for that previous release.

   To do this, the current maintenance branch is copied to another
branch named with the previous release version number (e.g.
maint-X.Y.(Z-1) where X.Y.Z is the current release).

   *Copy maint*

   `git branch maint-X.Y.(Z-1) maint'

   The _maint_ branch should now be fast-forwarded to the newly released
code so that maintenance fixes can be tracked for the current release:

   *Update maint to new release*

   * `git checkout maint'

   * `git merge --ff-only master'

   If the merge fails because it is not a fast-forward, then it is
possible some fixes on _maint_ were missed in the feature release.
This will not happen if the content of the branches was verified as
described in the previous section.



Branch management for next and pu after a feature release
=========================================================

After a feature release, the integration branch _next_ may optionally be
rewound and rebuilt from the tip of _master_ using the surviving topics
on _next_:

   *Rewind and rebuild next*

   * `git checkout next'

   * `git reset --hard master'

   * `git merge ai/topic_in_next1'

   * `git merge ai/topic_in_next2'

   * …

   The advantage of doing this is that the history of _next_ will be
clean. For example, some topics merged into _next_ may have initially
looked promising, but were later found to be undesirable or premature.
In such a case, the topic is reverted out of _next_ but the fact
remains in the history that it was once merged and reverted. By
recreating _next_, you give another incarnation of such topics a clean
slate to retry, and a feature release is a good point in history to do
so.

   If you do this, then you should make a public announcement indicating
that _next_ was rewound and rebuilt.

   The same rewind and rebuild process may be followed for _pu_. A
public announcement is not necessary since _pu_ is a throw-away branch,
as described above.



DISTRIBUTED WORKFLOWS
*********************

After the last section, you should know how to manage topics.  In
general, you will not be the only person working on the project, so you
will have to share your work.

   Roughly speaking, there are two important workflows: merge and patch.
The important difference is that the merge workflow can propagate full
history, including merges, while patches cannot.  Both workflows can be
used in parallel: in `git.git', only subsystem maintainers use the
merge workflow, while everyone else sends patches.

   Note that the maintainer(s) may impose restrictions, such as
"Signed-off-by" requirements, that all commits/patches submitted for
inclusion must adhere to.  Consult your project’s documentation for
more information.



Merge workflow
==============

The merge workflow works by copying branches between upstream and
downstream.  Upstream can merge contributions into the official
history; downstream base their work on the official history.

   There are three main tools that can be used for this:

   * git-push(1) copies your branches to a remote repository, usually
     to one that can be read by all involved parties;

   * git-fetch(1) that copies remote branches to your repository; and

   * git-pull(1) that does fetch and merge in one go.

   Note the last point.  Do _not_ use _git pull_ unless you actually
want to merge the remote branch.

   Getting changes out is easy:

   *Push/pull: Publishing branches/topics*

   `git push <remote> <branch>' and tell everyone where they can fetch
from.

   You will still have to tell people by other means, such as mail.
(Git provides the git-request-pull(1) to send preformatted pull
requests to upstream maintainers to simplify this task.)

   If you just want to get the newest copies of the integration
branches, staying up to date is easy too:

   *Push/pull: Staying up to date*

   Use `git fetch <remote>' or `git remote update' to stay up to date.

   Then simply fork your topic branches from the stable remotes as
explained earlier.

   If you are a maintainer and would like to merge other people’s
topic branches to the integration branches, they will typically send a
request to do so by mail.  Such a request looks like

     Please pull from
         <url> <branch>

   In that case, _git pull_ can do the fetch and merge in one go, as
follows.

   *Push/pull: Merging remote topics*

   `git pull <url> <branch>'

   Occasionally, the maintainer may get merge conflicts when he tries to
pull changes from downstream.  In this case, he can ask downstream to
do the merge and resolve the conflicts themselves (perhaps they will
know better how to resolve them).  It is one of the rare cases where
downstream _should_ merge from upstream.



Patch workflow
==============

If you are a contributor that sends changes upstream in the form of
emails, you should use topic branches as usual (see above).  Then use
git-format-patch(1) to generate the corresponding emails (highly
recommended over manually formatting them because it makes the
maintainer’s life easier).

   *format-patch/am: Publishing branches/topics*

   * `git format-patch -M upstream..topic' to turn them into
     preformatted patch files

   * `git send-email --to=<recipient> <patches>'

   See the git-format-patch(1) and git-send-email(1) manpages for
further usage notes.

   If the maintainer tells you that your patch no longer applies to the
current upstream, you will have to rebase your topic (you cannot use a
merge because you cannot format-patch merges):

   *format-patch/am: Keeping topics up to date*

   `git pull --rebase <url> <branch>'

   You can then fix the conflicts during the rebase.  Presumably you
have not published your topic other than by mail, so rebasing it is not
a problem.

   If you receive such a patch series (as maintainer, or perhaps as a
reader of the mailing list it was sent to), save the mails to files,
create a new topic branch and use _git am_ to import the commits:

   *format-patch/am: Importing patches*

   `git am < patch'

   One feature worth pointing out is the three-way merge, which can help
if you get conflicts: `git am -3' will use index information contained
in patches to figure out the merge base.  See git-am(1) for other
options.



SEE ALSO
********

gittutorial(7), git-push(1), git-pull(1), git-merge(1), git-rebase(1),
git-format-patch(1), git-send-email(1), git-am(1)



GIT
***

Part of the git(1) suite.


File: gitman.info,  Node: gitcredentials,  Up: Top

Name
****

gitcredentials — providing usernames and passwords to git



Synopsis
********

     git config credential.https://example.com.username myusername
     git config credential.helper "$helper $options"


DESCRIPTION
***********

Git will sometimes need credentials from the user in order to perform
operations; for example, it may need to ask for a username and password
in order to access a remote repository over HTTP. This manual describes
the mechanisms git uses to request these credentials, as well as some
features to avoid inputting these credentials repeatedly.



REQUESTING CREDENTIALS
**********************

Without any credential helpers defined, git will try the following
strategies to ask the user for usernames and passwords:

  1. If the `GIT_ASKPASS' environment variable is set, the program
     specified by the variable is invoked. A suitable prompt is provided
     to the program on the command line, and the user’s input is read
     from its standard output.

  2. Otherwise, if the `core.askpass' configuration variable is set, its
     value is used as above.

  3. Otherwise, if the `SSH_ASKPASS' environment variable is set, its
     value is used as above.

  4. Otherwise, the user is prompted on the terminal.


AVOIDING REPETITION
*******************

It can be cumbersome to input the same credentials over and over.  Git
provides two methods to reduce this annoyance:

  1. Static configuration of usernames for a given authentication
     context.

  2. Credential helpers to cache or store passwords, or to interact with
     a system password wallet or keychain.

   The first is simple and appropriate if you do not have secure
storage available for a password. It is generally configured by adding
this to your config:

     [credential "https://example.com"]
             username = me

   Credential helpers, on the other hand, are external programs from
which git can request both usernames and passwords; they typically
interface with secure storage provided by the OS or other programs.

   To use a helper, you must first select one to use. Git currently
includes the following helpers:

cache
     Cache credentials in memory for a short period of time. See
     git-credential-cache(1) for details.

store
     Store credentials indefinitely on disk. See
     git-credential-store(1) for details.

   You may also have third-party helpers installed; search for
`credential-*' in the output of `git help -a', and consult the
documentation of individual helpers.  Once you have selected a helper,
you can tell git to use it by putting its name into the
credential.helper variable.

  1. Find a helper.

          $ git help -a | grep credential-
          credential-foo

  2. Read its description.

          $ git help credential-foo

  3. Tell git to use it.

          $ git config --global credential.helper foo


   If there are multiple instances of the `credential.helper'
configuration variable, each helper will be tried in turn, and may
provide a username, password, or nothing. Once git has acquired both a
username and a password, no more helpers will be tried.



CREDENTIAL CONTEXTS
*******************

Git considers each credential to have a context defined by a URL. This
context is used to look up context-specific configuration, and is
passed to any helpers, which may use it as an index into secure storage.

   For instance, imagine we are accessing
`https://example.com/foo.git'. When git looks into a config file to see
if a section matches this context, it will consider the two a match if
the context is a more-specific subset of the pattern in the config
file. For example, if you have this in your config file:

     [credential "https://example.com"]
             username = foo

   then we will match: both protocols are the same, both hosts are the
same, and the "pattern" URL does not care about the path component at
all. However, this context would not match:

     [credential "https://kernel.org"]
             username = foo

   because the hostnames differ. Nor would it match `foo.example.com';
git compares hostnames exactly, without considering whether two hosts
are part of the same domain. Likewise, a config entry for
`http://example.com' would not match: git compares the protocols
exactly.



CONFIGURATION OPTIONS
*********************

Options for a credential context can be configured either in
`credential.*' (which applies to all credentials), or
`credential.<url>.*', where <url> matches the context as described
above.

   The following options are available in either location:

helper
     The name of an external credential helper, and any associated
     options.  If the helper name is not an absolute path, then the
     string `git credential-' is prepended. The resulting string is
     executed by the shell (so, for example, setting this to `foo
     --option=bar' will execute `git credential-foo --option=bar' via
     the shell. See the manual of specific helpers for examples of
     their use.

username
     A default username, if one is not provided in the URL.

useHttpPath
     By default, git does not consider the "path" component of an http
     URL to be worth matching via external helpers. This means that a
     credential stored for `https://example.com/foo.git' will also be
     used for `https://example.com/bar.git'. If you do want to
     distinguish these cases, set this option to `true'.


CUSTOM HELPERS
**************

You can write your own custom helpers to interface with any system in
which you keep credentials. See the documentation for git’s
credentials API (technical/api-credentials.html) for details.



GIT
***

Part of the git(1) suite



Tag Table:
Node: Top216
Node: git-add3248
Ref: _synopsis3350
Ref: DESCRIPTION3616
Ref: OPTIONS5257
Ref: Configuration8816
Ref: EXAMPLES9130
Ref: Interactive mode9719
Ref: EDITING PATCHES14087
Ref: SEE ALSO16972
Ref: GIT17074
Node: git-am17111
Ref: _synopsis17221
Ref: DESCRIPTION17729
Ref: OPTIONS17891
Ref: DISCUSSION21300
Ref: SEE ALSO23390
Ref: GIT23426
Node: git-annotate23463
Ref: _synopsis23588
Ref: DESCRIPTION23654
Ref: OPTIONS24105
Ref: SEE ALSO28436
Ref: GIT28470
Node: git-apply28507
Ref: _synopsis28625
Ref: DESCRIPTION29169
Ref: OPTIONS29697
Ref: Configuration37879
Ref: Submodules38252
Ref: SEE ALSO38873
Ref: GIT38906
Node: git-archimport38943
Ref: _synopsis39063
Ref: DESCRIPTION39215
Ref: MERGES41186
Ref: OPTIONS41771
Ref: GIT42978
Node: git-archive43014
Ref: _synopsis43138
Ref: DESCRIPTION43402
Ref: OPTIONS44126
Ref: BACKEND EXTRA OPTIONS45423
Ref: zip45469
Ref: CONFIGURATION45664
Ref: ATTRIBUTES46929
Ref: EXAMPLES47797
Ref: SEE ALSO49291
Ref: GIT49329
Node: git-bisect49366
Ref: _synopsis49498
Ref: DESCRIPTION49559
Ref: Getting help50218
Ref: Basic bisect commands; start; bad; good50373
Ref: Bisect reset51724
Ref: Bisect visualize52400
Ref: Bisect log and bisect replay52813
Ref: Avoiding testing a commit53312
Ref: Bisect skip54168
Ref: Cutting down bisection by giving more parameters to bisect start55021
Ref: Bisect run55787
Ref: OPTIONS57713
Ref: EXAMPLES58136
Ref: SEE ALSO61507
Ref: GIT61605
Node: git-blame61642
Ref: _synopsis61781
Ref: DESCRIPTION62056
Ref: OPTIONS63051
Ref: THE PORCELAIN FORMAT68619
Ref: SPECIFYING RANGES70226
Ref: INCREMENTAL OUTPUT71827
Ref: MAPPING AUTHORS73510
Ref: SEE ALSO75973
Ref: GIT76011
Node: git-branch76048
Ref: _synopsis76158
Ref: DESCRIPTION76658
Ref: OPTIONS79157
Ref: Examples83826
Ref: CO1-184015
Ref: CO2-184374
Ref: CO2-284444
Ref: Notes84868
Ref: SEE ALSO85659
Ref: GIT85845
Node: git-bundle85882
Ref: _synopsis85992
Ref: DESCRIPTION86190
Ref: OPTIONS86995
Ref: SPECIFYING REFERENCES88853
Ref: EXAMPLE89661
Ref: GIT92831
Node: git-cat-file92867
Ref: _synopsis93016
Ref: DESCRIPTION93169
Ref: OPTIONS93614
Ref: OUTPUT95015
Ref: GIT95837
Node: git-check-attr95873
Ref: _synopsis95992
Ref: DESCRIPTION96144
Ref: OPTIONS96304
Ref: OUTPUT97040
Ref: EXAMPLES97484
Ref: SEE ALSO98557
Ref: GIT98596
Node: git-check-ref-format98633
Ref: _synopsis98775
Ref: DESCRIPTION98969
Ref: OPTIONS101740
Ref: EXAMPLES102605
Ref: GIT102922
Node: git-checkout-index102958
Ref: _synopsis103097
Ref: DESCRIPTION103343
Ref: OPTIONS103471
Ref: Using --temp or --stage=all105715
Ref: EXAMPLES107564
Ref: GIT108455
Node: git-checkout108491
Ref: _synopsis108619
Ref: DESCRIPTION108965
Ref: OPTIONS111193
Ref: DETACHED HEAD117343
Ref: CO1-1120547
Ref: CO1-2120580
Ref: CO1-3120613
Ref: EXAMPLES121383
Ref: CO2-1121625
Ref: CO2-2121673
Ref: CO2-3121747
Ref: GIT123894
Node: git-cherry-pick123930
Ref: _synopsis124071
Ref: DESCRIPTION124260
Ref: OPTIONS125270
Ref: SEQUENCER SUBCOMMANDS129029
Ref: EXAMPLES129482
Ref: CO1-1131518
Ref: CO1-2131564
Ref: CO1-3131610
Ref: CO1-4131656
Ref: SEE ALSO132319
Ref: GIT132354
Node: git-cherry132391
Ref: _synopsis132501
Ref: DESCRIPTION132576
Ref: OPTIONS133847
Ref: SEE ALSO134114
Ref: GIT134151
Node: git-citool134188
Ref: _synopsis134301
Ref: DESCRIPTION134339
Ref: GIT134710
Node: git-clean134747
Ref: _synopsis134867
Ref: DESCRIPTION134963
Ref: OPTIONS135386
Ref: GIT136721
Node: git-clone136757
Ref: _synopsis136872
Ref: DESCRIPTION137288
Ref: OPTIONS138030
Ref: GIT URLS145972
Ref: Examples148732
Ref: GIT149654
Node: git-column149690
Ref: _synopsis149791
Ref: DESCRIPTION149952
Ref: OPTIONS150033
Ref: Author150811
Ref: GIT150907
Node: git-commit-tree150944
Ref: _synopsis151058
Ref: DESCRIPTION151223
Ref: OPTIONS152203
Ref: Commit Information152584
Ref: DATE FORMATS153613
Ref: Discussion154461
Ref: FILES156777
Ref: SEE ALSO156807
Ref: GIT156847
Node: git-commit156884
Ref: _synopsis156994
Ref: DESCRIPTION157418
Ref: OPTIONS159039
Ref: DATE FORMATS167260
Ref: EXAMPLES168131
Ref: DISCUSSION171244
Ref: ENVIRONMENT AND CONFIGURATION VARIABLES173899
Ref: HOOKS174241
Ref: FILES174392
Ref: SEE ALSO174766
Ref: GIT174854
Node: git-config174891
Ref: _synopsis175009
Ref: DESCRIPTION175941
Ref: OPTIONS177962
Ref: FILES182134
Ref: ENVIRONMENT183804
Ref: EXAMPLES184076
Ref: CONFIGURATION FILE186395
Ref: Syntax187285
Ref: Includes190500
Ref: Example191123
Ref: Variables191798
Ref: GIT286890
Node: git-count-objects286926
Ref: _synopsis287077
Ref: DESCRIPTION287127
Ref: OPTIONS287288
Ref: GIT287576
Node: git-credential-cache--daemon287612
Ref: _synopsis287769
Ref: DESCRIPTION287835
Ref: GIT288276
Node: git-credential-cache288313
Ref: _synopsis288458
Ref: DESCRIPTION288532
Ref: OPTIONS289011
Ref: CONTROLLING THE DAEMON289407
Ref: EXAMPLES289620
Ref: GIT290221
Node: git-credential-store290257
Ref: _synopsis290390
Ref: DESCRIPTION290464
Ref: OPTIONS291065
Ref: EXAMPLES291342
Ref: STORAGE FORMAT291752
Ref: GIT292291
Node: git-credential292328
Ref: _synopsis292449
Ref: DESCRIPTION292513
Ref: TYPICAL USE OF GIT CREDENTIAL293980
Ref: INPUT/OUTPUT FORMAT296327
Node: git-cvsexportcommit298401
Ref: _synopsis298537
Ref: DESCRIPTION298710
Ref: OPTIONS299398
Ref: CONFIGURATION300896
Ref: EXAMPLES301019
Ref: GIT301688
Node: git-cvsimport301724
Ref: _synopsis301864
Ref: DESCRIPTION302241
Ref: OPTIONS303336
Ref: OUTPUT307944
Ref: ISSUES308118
Ref: GIT309447
Node: git-cvsserver309483
Ref: _synopsis309596
Ref: OPTIONS309915
Ref: DESCRIPTION310777
Ref: LIMITATIONS311147
Ref: INSTALLATION311408
Ref: configaccessmethod314612
Ref: Database Backend316302
Ref: Configuring database backend318129
Ref: Variable substitution319506
Ref: ENVIRONMENT320048
Ref: Eclipse CVS Client Notes320549
Ref: Clients known to work321780
Ref: Operations supported321986
Ref: CRLF Line Ending Conversions322305
Ref: Dependencies323392
Ref: GIT323462
Node: git-daemon323499
Ref: _synopsis323620
Ref: DESCRIPTION324277
Ref: OPTIONS325180
Ref: SERVICES330513
Ref: EXAMPLES331688
Ref: ENVIRONMENT334348
Ref: GIT334589
Node: git-describe334626
Ref: _synopsis334764
Ref: DESCRIPTION334936
Ref: OPTIONS335430
Ref: EXAMPLES337767
Ref: SEARCH STRATEGY339533
Ref: GIT340453
Node: git-diff-files340490
Ref: _synopsis340624
Ref: DESCRIPTION340728
Ref: OPTIONS340995
Ref: Raw output format358348
Ref: diff format for merges361128
Ref: Generating patches with -p361780
Ref: combined diff format364595
Ref: other diff formats368843
Ref: GIT370732
Node: git-diff-index370769
Ref: _synopsis370922
Ref: DESCRIPTION371026
Ref: OPTIONS371329
Ref: Raw output format388350
Ref: diff format for merges391130
Ref: Generating patches with -p391782
Ref: combined diff format394597
Ref: other diff formats398845
Ref: Operating Modes400734
Ref: Cached Mode401018
Ref: Non-cached Mode402502
Ref: GIT404536
Node: git-diff-tree404572
Ref: _synopsis404721
Ref: DESCRIPTION404939
Ref: OPTIONS405220
Ref: PRETTY FORMATS427945
Ref: Limiting Output434941
Ref: Raw output format436483
Ref: diff format for merges439264
Ref: Generating patches with -p439916
Ref: combined diff format442731
Ref: other diff formats446979
Ref: GIT448868
Node: git-diff448905
Ref: _synopsis449037
Ref: DESCRIPTION449281
Ref: OPTIONS452042
Ref: Raw output format469092
Ref: diff format for merges471872
Ref: Generating patches with -p472524
Ref: combined diff format475339
Ref: other diff formats479587
Ref: EXAMPLES481476
Ref: CO1-1481569
Ref: CO1-2481605
Ref: CO1-3481641
Ref: CO2-1482149
Ref: CO2-2482190
Ref: CO2-3482231
Ref: CO3-1482723
Ref: CO3-2482764
Ref: CO3-3482805
Ref: CO4-1483163
Ref: CO4-2483217
Ref: CO4-3483271
Ref: CO5-1483647
Ref: CO5-2483700
Ref: SEE ALSO483888
Ref: GIT483997
Node: git-difftool484034
Ref: _synopsis484152
Ref: DESCRIPTION484242
Ref: OPTIONS484491
Ref: CONFIG VARIABLES487073
Ref: SEE ALSO487683
Ref: GIT487927
Node: git-fast-export487963
Ref: _synopsis488068
Ref: DESCRIPTION488139
Ref: OPTIONS488391
Ref: EXAMPLES492137
Ref: Limitations492825
Ref: GIT493028
Node: git-fast-import493065
Ref: _synopsis493188
Ref: DESCRIPTION493252
Ref: OPTIONS494126
Ref: Performance497959
Ref: Development Cost498713
Ref: Parallel Operation499136
Ref: Technical Discussion500161
Ref: Input Format501110
Ref: Stream Comments501845
Ref: Date Formats502264
Ref: Commands506004
Ref: commit508152
Ref: author510207
Ref: committer510565
Ref: from511382
Ref: merge513618
Ref: filemodify514337
Ref: filedelete517076
Ref: filecopy517613
Ref: filerename518361
Ref: filedeleteall519613
Ref: notemodify520595
Ref: mark521901
Ref: tag522699
Ref: reset524482
Ref: blob525263
Ref: data525814
Ref: checkpoint528069
Ref: progress529163
Ref: cat-blob530018
Ref: ls530935
Ref: feature532480
Ref: option534308
Ref: done535134
Ref: Responses To Commands535409
Ref: Crash Reports536553
Ref: Tips and Tricks539329
Ref: Use One Mark Per Commit539486
Ref: Freely Skip Around Branches540159
Ref: Handling Renames540659
Ref: Use Tag Fixup Branches540917
Ref: Import Now; Repack Later542196
Ref: Repacking Historical Data543061
Ref: Include Some Progress Messages543479
Ref: Packfile Optimization543892
Ref: Memory Utilization545508
Ref: per object545895
Ref: per mark546638
Ref: per branch546934
Ref: per active tree548198
Ref: per active file entry548468
Ref: Signals549123
Ref: GIT549430
Node: git-fetch-pack549467
Ref: _synopsis549600
Ref: DESCRIPTION549794
Ref: OPTIONS550375
Ref: GIT552794
Node: git-fetch552830
Ref: _synopsis552955
Ref: DESCRIPTION553168
Ref: OPTIONS554124
Ref: GIT URLS561945
Ref: REMOTES564754
Ref: Named remote in configuration file565174
Ref: Named file in $GIT_DIR/remotes565914
Ref: Named file in $GIT_DIR/branches566547
Ref: EXAMPLES567211
Ref: BUGS567961
Ref: SEE ALSO568347
Ref: GIT568381
Node: git-filter-branch568418
Ref: _synopsis568526
Ref: DESCRIPTION568964
Ref: Filters570856
Ref: OPTIONS571855
Ref: Remap to ancestor577673
Ref: Examples578034
Ref: Checklist for Shrinking a Repository582565
Ref: GIT584267
Node: git-fmt-merge-msg584303
Ref: _synopsis584425
Ref: DESCRIPTION584600
Ref: OPTIONS584912
Ref: CONFIGURATION585680
Ref: SEE ALSO586211
Ref: GIT586245
Node: git-for-each-ref586282
Ref: _synopsis586402
Ref: DESCRIPTION586568
Ref: OPTIONS586970
Ref: FIELD NAMES588447
Ref: EXAMPLES590475
Ref: Author592461
Ref: Documentation592552
Ref: GIT592685
Node: git-format-patch592722
Ref: _synopsis592849
Ref: DESCRIPTION593671
Ref: OPTIONS595616
Ref: CONFIGURATION611812
Ref: DISCUSSION612397
Ref: Checking for patch corruption614580
Ref: MUA-SPECIFIC HINTS616312
Ref: GMail616441
Ref: Thunderbird617008
Ref: Approach #1 [add-on]617388
Ref: Approach #2 [configuration]617900
Ref: Approach #3 [external editor]618811
Ref: KMail620362
Ref: EXAMPLES620808
Ref: SEE ALSO621969
Ref: GIT622019
Node: git-fsck-objects622056
Ref: _synopsis622215
Ref: DESCRIPTION622263
Ref: GIT622377
Node: git-fsck622414
Ref: _synopsis622557
Ref: DESCRIPTION622769
Ref: OPTIONS622867
Ref: DISCUSSION625175
Ref: Extracted Diagnostics625790
Ref: Environment Variables626973
Ref: GIT627283
Node: git-gc627319
Ref: _synopsis627448
Ref: DESCRIPTION627541
Ref: OPTIONS628235
Ref: Configuration629853
Ref: Notes632064
Ref: HOOKS632632
Ref: SEE ALSO632747
Ref: GIT632824
Node: git-get-tar-commit-id632861
Ref: _synopsis633020
Ref: DESCRIPTION633081
Ref: GIT633571
Node: git-grep633608
Ref: _synopsis633712
Ref: DESCRIPTION634701
Ref: CONFIGURATION635007
Ref: OPTIONS635194
Ref: Examples640841
Ref: GIT641294
Node: git-gui641330
Ref: _synopsis641439
Ref: DESCRIPTION641498
Ref: COMMANDS642230
Ref: Examples642874
Ref: SEE ALSO644427
Ref: Other644627
Ref: GIT645052
Node: git-hash-object645089
Ref: _synopsis645236
Ref: DESCRIPTION645429
Ref: OPTIONS645860
Ref: GIT646956
Node: git-help646992
Ref: _synopsis647100
Ref: DESCRIPTION647181
Ref: OPTIONS647799
Ref: CONFIGURATION VARIABLES648890
Ref: help_format648940
Ref: help_browser; web_browser and browser_<tool>_path649314
Ref: man_viewer649653
Ref: man_<tool>_path650854
Ref: man_<tool>_cmd651171
Ref: Note about konqueror651568
Ref: Note about git config --global652196
Ref: GIT652587
Node: git-http-backend652624
Ref: _synopsis652757
Ref: DESCRIPTION652801
Ref: SERVICES653721
Ref: URL TRANSLATION654769
Ref: EXAMPLES655180
Ref: ENVIRONMENT658498
Ref: Author659372
Ref: Documentation659469
Ref: GIT659586
Node: git-http-fetch659623
Ref: _synopsis659755
Ref: DESCRIPTION659871
Ref: OPTIONS660063
Ref: GIT660788
Node: git-http-push660824
Ref: _synopsis660956
Ref: DESCRIPTION661058
Ref: OPTIONS661329
Ref: Specifying the Refs662411
Ref: GIT663884
Node: git-imap-send663921
Ref: _synopsis664062
Ref: DESCRIPTION664103
Ref: CONFIGURATION664569
Ref: Variables664701
Ref: Examples666348
Ref: EXAMPLE666884
Ref: CAUTION667637
Ref: SEE ALSO668320
Ref: GIT668390
Node: git-index-pack668427
Ref: _synopsis668565
Ref: DESCRIPTION668748
Ref: OPTIONS668995
Ref: Note671562
Ref: GIT671928
Node: git-init-db671965
Ref: _synopsis672076
Ref: DESCRIPTION672226
Ref: GIT672340
Node: git-init672377
Ref: _synopsis672513
Ref: DESCRIPTION672702
Ref: OPTIONS673588
Ref: TEMPLATE DIRECTORY676388
Ref: EXAMPLES677052
Ref: CO1-1677188
Ref: CO1-2677218
Ref: GIT677368
Node: git-instaweb677404
Ref: _synopsis677536
Ref: DESCRIPTION677704
Ref: OPTIONS677818
Ref: CONFIGURATION679152
Ref: SEE ALSO679590
Ref: GIT679622
Node: git-log679659
Ref: _synopsis679747
Ref: DESCRIPTION679829
Ref: OPTIONS680097
Ref: Commit Limiting682130
Ref: History Simplification689353
Ref: Commit Ordering698984
Ref: Object Traversal700034
Ref: Commit Formatting701221
Ref: Diff Formatting706621
Ref: PRETTY FORMATS707917
Ref: Common diff options714913
Ref: Generating patches with -p731579
Ref: combined diff format734394
Ref: Examples738642
Ref: Discussion740214
Ref: Configuration742530
Ref: GIT744025
Node: git-lost-found744061
Ref: _synopsis744202
Ref: DESCRIPTION744244
Ref: OUTPUT744624
Ref: EXAMPLE744741
Ref: GIT745782
Node: git-ls-files745818
Ref: _synopsis745962
Ref: DESCRIPTION746473
Ref: OPTIONS746722
Ref: Output750243
Ref: Exclude Patterns750999
Ref: SEE ALSO752214
Ref: GIT752267
Node: git-ls-remote752304
Ref: _synopsis752426
Ref: DESCRIPTION752576
Ref: OPTIONS752694
Ref: EXAMPLES753806
Ref: GIT754896
Node: git-ls-tree754932
Ref: _synopsis755046
Ref: DESCRIPTION755237
Ref: OPTIONS756250
Ref: Output Format757360
Ref: GIT758012
Node: git-mailinfo758049
Ref: _synopsis758189
Ref: DESCRIPTION758296
Ref: OPTIONS758669
Ref: GIT761255
Node: git-mailsplit761291
Ref: _synopsis761408
Ref: DESCRIPTION761527
Ref: OPTIONS761818
Ref: GIT762559
Node: git-merge-base762595
Ref: _synopsis762734
Ref: DESCRIPTION762903
Ref: OPERATION MODE763319
Ref: OPTIONS764456
Ref: DISCUSSION764549
Ref: See also766242
Ref: GIT766314
Node: git-merge-file766351
Ref: _synopsis766463
Ref: DESCRIPTION766693
Ref: OPTIONS768179
Ref: EXAMPLES768793
Ref: GIT769189
Node: git-merge-index769225
Ref: _synopsis769350
Ref: DESCRIPTION769438
Ref: OPTIONS769724
Ref: GIT771798
Node: git-merge-one-file771835
Ref: _synopsis771984
Ref: DESCRIPTION772030
Ref: GIT772196
Node: git-merge-tree772233
Ref: _synopsis772362
Ref: DESCRIPTION772436
Ref: GIT772963
Node: git-merge773000
Ref: _synopsis773123
Ref: DESCRIPTION773385
Ref: OPTIONS775086
Ref: PRE-MERGE CHECKS780095
Ref: FAST-FORWARD MERGE780886
Ref: TRUE MERGE781460
Ref: HOW CONFLICTS ARE PRESENTED782925
Ref: HOW TO RESOLVE CONFLICTS785526
Ref: EXAMPLES786724
Ref: MERGE STRATEGIES787475
Ref: CONFIGURATION792306
Ref: SEE ALSO796405
Ref: GIT796563
Node: git-mergetool--lib796600
Ref: _synopsis796731
Ref: DESCRIPTION796821
Ref: FUNCTIONS797347
Ref: GIT797779
Node: git-mergetool797815
Ref: _synopsis797961
Ref: DESCRIPTION798053
Ref: OPTIONS798552
Ref: TEMPORARY FILES800858
Ref: GIT801228
Node: git-mktag801265
Ref: _synopsis801361
Ref: DESCRIPTION801415
Ref: Tag Format801606
Ref: GIT802079
Node: git-mktree802116
Ref: _synopsis802241
Ref: DESCRIPTION802304
Ref: OPTIONS802595
Ref: GIT803206
Node: git-mv803242
Ref: _synopsis803360
Ref: DESCRIPTION803417
Ref: OPTIONS803979
Ref: GIT804428
Node: git-name-rev804464
Ref: _synopsis804580
Ref: DESCRIPTION804702
Ref: OPTIONS804842
Ref: EXAMPLE805593
Ref: GIT806179
Node: git-notes806215
Ref: _synopsis806318
Ref: DESCRIPTION806909
Ref: SUBCOMMANDS807894
Ref: OPTIONS810601
Ref: DISCUSSION813391
Ref: NOTES MERGE STRATEGIES814313
Ref: EXAMPLES815669
Ref: CONFIGURATION816625
Ref: ENVIRONMENT818378
Ref: Author819501
Ref: Documentation819679
Ref: GIT819766
Ref: git-notes-Footnote-1819839
Node: git-p4820039
Ref: _synopsis820156
Ref: DESCRIPTION820385
Ref: EXAMPLE820914
Ref: COMMANDS821337
Ref: Clone821357
Ref: Sync821968
Ref: Rebase822853
Ref: Submit823225
Ref: OPTIONS824187
Ref: General options824206
Ref: Sync options824414
Ref: Clone options826697
Ref: Submit options827101
Ref: Rebase options827839
Ref: DEPOT PATH SYNTAX827973
Ref: CLIENT SPEC829098
Ref: BRANCH DETECTION830644
Ref: PERFORMANCE832418
Ref: CONFIGURATION VARIABLES832717
Ref: General variables832878
Ref: Clone and sync variables833633
Ref: Submit variables835332
Ref: IMPLEMENTATION DETAILS837440
Node: git-pack-objects838076
Ref: _synopsis838200
Ref: DESCRIPTION838540
Ref: OPTIONS839798
Ref: SEE ALSO847426
Ref: GIT847497
Node: git-pack-redundant847534
Ref: _synopsis847653
Ref: DESCRIPTION847755
Ref: OPTIONS848276
Ref: SEE ALSO848582
Ref: GIT848657
Node: git-pack-refs848694
Ref: _synopsis848829
Ref: DESCRIPTION848889
Ref: OPTIONS850090
Ref: BUGS850625
Ref: GIT850819
Node: git-parse-remote850856
Ref: _synopsis851006
Ref: DESCRIPTION851072
Ref: GIT851302
Node: git-patch-id851339
Ref: _synopsis851450
Ref: DESCRIPTION851500
Ref: OPTIONS852210
Ref: GIT852273
Node: git-peek-remote852309
Ref: _synopsis852439
Ref: DESCRIPTION852536
Ref: OPTIONS852620
Ref: GIT853435
Node: git-prune-packed853471
Ref: _synopsis853612
Ref: DESCRIPTION853682
Ref: OPTIONS854136
Ref: SEE ALSO854309
Ref: GIT854364
Node: git-prune854401
Ref: _synopsis854531
Ref: DESCRIPTION854613
Ref: OPTIONS855219
Ref: EXAMPLE855608
Ref: Notes855819
Ref: SEE ALSO856102
Ref: GIT856162
Node: git-pull856199
Ref: _synopsis856335
Ref: DESCRIPTION856411
Ref: OPTIONS858565
Ref: Options related to merging859438
Ref: Options related to fetching863819
Ref: GIT URLS869267
Ref: REMOTES872076
Ref: Named remote in configuration file872496
Ref: Named file in $GIT_DIR/remotes873236
Ref: Named file in $GIT_DIR/branches873869
Ref: MERGE STRATEGIES874533
Ref: DEFAULT BEHAVIOUR879364
Ref: EXAMPLES881420
Ref: BUGS882307
Ref: SEE ALSO882694
Ref: GIT882758
Node: git-push882795
Ref: _synopsis882917
Ref: DESCRIPTION883172
Ref: OPTIONS883458
Ref: GIT URLS889809
Ref: REMOTES892618
Ref: Named remote in configuration file893038
Ref: Named file in $GIT_DIR/remotes893778
Ref: Named file in $GIT_DIR/branches894411
Ref: OUTPUT895075
Ref: Note about fast-forwards897670
Ref: Examples900704
Ref: GIT903863
Node: git-quiltimport903899
Ref: _synopsis904035
Ref: DESCRIPTION904130
Ref: OPTIONS904734
Ref: GIT905333
Node: git-read-tree905369
Ref: _synopsis905490
Ref: DESCRIPTION905797
Ref: OPTIONS906362
Ref: Merging910123
Ref: Single Tree Merge910332
Ref: Two Tree Merge910992
Ref: 3-Way Merge914731
Ref: Sparse checkout920569
Ref: SEE ALSO922380
Ref: GIT922451
Node: git-rebase922488
Ref: _synopsis922621
Ref: DESCRIPTION922909
Ref: CONFIGURATION928345
Ref: OPTIONS928570
Ref: MERGE STRATEGIES935760
Ref: NOTES940591
Ref: INTERACTIVE MODE941059
Ref: SPLITTING COMMITS945577
Ref: RECOVERING FROM UPSTREAM REBASE947017
Ref: The easy case949367
Ref: The hard case950080
Ref: BUGS951390
Ref: GIT951902
Node: git-receive-pack951938
Ref: _synopsis952070
Ref: DESCRIPTION952126
Ref: OPTIONS953040
Ref: pre-receive Hook953106
Ref: update Hook954139
Ref: post-receive Hook955113
Ref: post-update Hook957022
Ref: SEE ALSO957659
Ref: GIT957715
Node: git-reflog957752
Ref: _synopsis957855
Ref: DESCRIPTION957916
Ref: OPTIONS959509
Ref: GIT960976
Node: git-relink961012
Ref: _synopsis961135
Ref: DESCRIPTION961203
Ref: OPTIONS961447
Ref: GIT961654
Node: git-remote-ext961690
Ref: _synopsis961819
Ref: DESCRIPTION961902
Ref: ENVIRONMENT VARIABLES;963438
Ref: ENVIRONMENT VARIABLES PASSED TO COMMAND;963577
Ref: EXAMPLES;963876
Ref: Documentation965724
Ref: GIT965873
Node: git-remote-fd965910
Ref: _synopsis966039
Ref: DESCRIPTION966106
Ref: ENVIRONMENT VARIABLES966947
Ref: EXAMPLES967085
Ref: Documentation967499
Ref: GIT967631
Node: git-remote-helpers967668
Ref: _synopsis967814
Ref: DESCRIPTION967885
Ref: INPUT FORMAT969124
Ref: Capabilities969800
Ref: Capabilities for Pushing971573
Ref: Capabilities for Fetching972196
Ref: INVOCATION973689
Ref: COMMANDS975253
Ref: REF LIST ATTRIBUTES980390
Ref: OPTIONS980783
Ref: SEE ALSO982214
Ref: GIT982275
Node: git-remote-testgit982312
Ref: _synopsis982427
Ref: DESCRIPTION982503
Ref: SEE ALSO982815
Ref: GIT982859
Node: git-remote982896
Ref: _synopsis983008
Ref: DESCRIPTION983675
Ref: OPTIONS983771
Ref: COMMANDS983932
Ref: DISCUSSION989293
Ref: Examples989458
Ref: SEE ALSO990284
Ref: GIT990346
Node: git-repack990383
Ref: _synopsis990498
Ref: DESCRIPTION990603
Ref: OPTIONS991059
Ref: Configuration994439
Ref: SEE ALSO995064
Ref: GIT995126
Node: git-replace995163
Ref: _synopsis995287
Ref: DESCRIPTION995418
Ref: OPTIONS996387
Ref: BUGS996772
Ref: SEE ALSO997253
Ref: GIT997307
Node: git-repo-config997344
Ref: _synopsis997472
Ref: DESCRIPTION997519
Ref: GIT997635
Node: git-request-pull997672
Ref: _synopsis997800
Ref: DESCRIPTION997871
Ref: OPTIONS998018
Ref: GIT998187
Node: git-rerere998223
Ref: _synopsis998347
Ref: DESCRIPTION998436
Ref: COMMANDS999087
Ref: DISCUSSION1000461
Ref: GIT1005970
Node: git-reset1006007
Ref: _synopsis1006124
Ref: DESCRIPTION1006322
Ref: OPTIONS1009427
Ref: EXAMPLES1009492
Ref: CO1-11009574
Ref: CO1-21009668
Ref: CO1-31009725
Ref: CO1-41009782
Ref: CO2-11010763
Ref: CO2-21010807
Ref: CO2-31010851
Ref: CO3-11011534
Ref: CO3-21011575
Ref: CO3-31011616
Ref: CO4-11012147
Ref: CO5-11012573
Ref: CO5-21012783
Ref: CO5-31012832
Ref: CO5-41012949
Ref: CO6-11013968
Ref: CO6-21014147
Ref: CO7-11015210
Ref: CO7-21015410
Ref: CO7-31015474
Ref: CO8-11016304
Ref: CO8-21016362
Ref: CO8-31016420
Ref: CO9-11017256
Ref: CO9-21017331
Ref: CO9-31017389
Ref: DISCUSSION1017872
Ref: GIT1022910
Node: git-rev-list1022947
Ref: _synopsis1023080
Ref: DESCRIPTION1024912
Ref: OPTIONS1026585
Ref: Commit Limiting1026604
Ref: History Simplification1034034
Ref: Bisection Helpers1043665
Ref: Commit Ordering1045864
Ref: Object Traversal1046913
Ref: Commit Formatting1048100
Ref: PRETTY FORMATS1054215
Ref: GIT1061211
Node: git-rev-parse1061247
Ref: _synopsis1061362
Ref: DESCRIPTION1061425
Ref: OPTIONS1061771
Ref: SPECIFYING REVISIONS1067468
Ref: SPECIFYING RANGES1075899
Ref: PARSEOPT1078826
Ref: Input Format1079479
Ref: Example1080858
Ref: SQ-QUOTE1081270
Ref: Example <1>1081663
Ref: EXAMPLES1082020
Ref: GIT1082491
Node: git-revert1082527
Ref: _synopsis1082633
Ref: DESCRIPTION1082802
Ref: OPTIONS1083592
Ref: SEQUENCER SUBCOMMANDS1085804
Ref: EXAMPLES1086257
Ref: SEE ALSO1086721
Ref: GIT1086761
Node: git-rm1086798
Ref: _synopsis1086921
Ref: DESCRIPTION1087030
Ref: OPTIONS1087689
Ref: DISCUSSION1088955
Ref: REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM1089457
Ref: Using “git commit -a”1089767
Ref: Using “git add -A”1090198
Ref: Other ways1090825
Ref: EXAMPLES1091150
Ref: SEE ALSO1091712
Ref: GIT1091744
Node: git-send-email1091781
Ref: _synopsis1091905
Ref: DESCRIPTION1091994
Ref: OPTIONS1092922
Ref: Composing1092940
Ref: Sending1096507
Ref: Automating1099912
Ref: Administering1103522
Ref: CONFIGURATION1105163
Ref: EXAMPLE1106035
Ref: Use gmail as the smtp server1106053
Ref: SEE ALSO1106732
Ref: GIT1106801
Node: git-send-pack1106838
Ref: _synopsis1106974
Ref: DESCRIPTION1107128
Ref: OPTIONS1107400
Ref: Specifying the Refs1108547
Ref: GIT1110581
Node: git-sh-i18n--envsubst1110618
Ref: _synopsis1110757
Ref: DESCRIPTION1110979
Ref: GIT1111559
Node: git-sh-i18n1111596
Ref: _synopsis1111715
Ref: DESCRIPTION1111776
Ref: FUNCTIONS1112288
Ref: GIT1112741
Node: git-sh-setup1112777
Ref: _synopsis1112893
Ref: DESCRIPTION1112955
Ref: FUNCTIONS1113750
Ref: GIT1115367
Node: git-shell1115403
Ref: _synopsis1115525
Ref: DESCRIPTION1115588
Ref: GIT1116362
Node: git-shortlog1116399
Ref: _synopsis1116507
Ref: DESCRIPTION1116705
Ref: OPTIONS1117234
Ref: MAPPING AUTHORS1118235
Ref: GIT1120861
Node: git-show-branch1120898
Ref: _synopsis1121017
Ref: DESCRIPTION1121417
Ref: OPTIONS1121778
Ref: OUTPUT1125050
Ref: EXAMPLE1126821
Ref: GIT1127498
Node: git-show-index1127535
Ref: _synopsis1127646
Ref: DESCRIPTION1127699
Ref: GIT1127992
Node: git-show-ref1128029
Ref: _synopsis1128148
Ref: DESCRIPTION1128400
Ref: OPTIONS1128915
Ref: OUTPUT1130772
Ref: EXAMPLE1131617
Ref: FILES1133130
Ref: SEE ALSO1133180
Ref: GIT1133263
Node: git-show1133300
Ref: _synopsis1133403
Ref: DESCRIPTION1133461
Ref: OPTIONS1134097
Ref: PRETTY FORMATS1137147
Ref: EXAMPLES1144143
Ref: Discussion1144751
Ref: GIT1147067
Node: git-stage1147104
Ref: _synopsis1147217
Ref: DESCRIPTION1147262
Ref: GIT1147375
Node: git-stash1147412
Ref: _synopsis1147539
Ref: DESCRIPTION1147944
Ref: OPTIONS1148945
Ref: DISCUSSION1153913
Ref: EXAMPLES1154477
Ref: SEE ALSO1157324
Ref: GIT1157405
Node: git-status1157442
Ref: _synopsis1157548
Ref: DESCRIPTION1157621
Ref: OPTIONS1158069
Ref: OUTPUT1160479
Ref: Short Format1161024
Ref: Porcelain Format1163347
Ref: CONFIGURATION1164509
Ref: SEE ALSO1165188
Ref: GIT1165223
Node: git-stripspace1165260
Ref: _synopsis1165375
Ref: DESCRIPTION1165448
Ref: OPTIONS1166133
Ref: EXAMPLES1166222
Ref: GIT1166986
Node: git-submodule1167022
Ref: _synopsis1167146
Ref: DESCRIPTION1167800
Ref: COMMANDS1169857
Ref: OPTIONS1176957
Ref: FILES1180332
Ref: GIT1180652
Node: git-svn1180689
Ref: _synopsis1180824
Ref: DESCRIPTION1180891
Ref: COMMANDS1181560
Ref: OPTIONS1199088
Ref: ADVANCED OPTIONS1203755
Ref: CONFIG FILE-ONLY OPTIONS1204608
Ref: BASIC EXAMPLES1209083
Ref: REBASE VS_ PULL/MERGE1211960
Ref: MERGE TRACKING1212841
Ref: CAVEATS1213225
Ref: BUGS1215631
Ref: CONFIGURATION1216153
Ref: SEE ALSO1217905
Ref: GIT1217941
Node: git-symbolic-ref1217978
Ref: _synopsis1218097
Ref: DESCRIPTION1218211
Ref: OPTIONS1218756
Ref: NOTES1219186
Ref: GIT1219788
Node: git-tag1219825
Ref: _synopsis1219956
Ref: DESCRIPTION1220308
Ref: OPTIONS1221222
Ref: CONFIGURATION1223804
Ref: DISCUSSION1224167
Ref: On Re-tagging1224191
Ref: On Automatic following1226427
Ref: On Backdating Tags1228917
Ref: DATE FORMATS1229513
Ref: SEE ALSO1230360
Ref: GIT1230406
Node: git-tar-tree1230443
Ref: _synopsis1230583
Ref: DESCRIPTION1230662
Ref: OPTIONS1231413
Ref: CONFIGURATION1231746
Ref: EXAMPLES1232067
Ref: GIT1232856
Node: git-unpack-file1232892
Ref: _synopsis1233027
Ref: DESCRIPTION1233077
Ref: OPTIONS1233256
Ref: GIT1233306
Node: git-unpack-objects1233342
Ref: _synopsis1233472
Ref: DESCRIPTION1233554
Ref: OPTIONS1234046
Ref: GIT1234497
Node: git-update-index1234533
Ref: _synopsis1234678
Ref: DESCRIPTION1235320
Ref: OPTIONS1235702
Ref: Using --refresh1239975
Ref: Using --cacheinfo or --info-only1240438
Ref: Using --index-info1241198
Ref: Using “assume unchanged” bit1242964
Ref: Examples1244618
Ref: CO1-11244896
Ref: CO1-21244959
Ref: CO1-31245022
Ref: CO1-41245108
Ref: CO1-51245189
Ref: CO1-61245252
Ref: CO1-71245338
Ref: CO1-81245401
Ref: CO1-91245464
Ref: Skip-worktree bit1246246
Ref: Configuration1247156
Ref: SEE ALSO1248237
Ref: GIT1248302
Node: git-update-ref1248339
Ref: _synopsis1248470
Ref: DESCRIPTION1248594
Ref: Logging Updates1250507
Ref: GIT1251626
Node: git-update-server-info1251663
Ref: _synopsis1251812
Ref: DESCRIPTION1251871
Ref: OPTIONS1252173
Ref: OUTPUT1252244
Ref: GIT1252427
Node: git-upload-archive1252463
Ref: _synopsis1252589
Ref: DESCRIPTION1252647
Ref: OPTIONS1252983
Ref: GIT1253062
Node: git-upload-pack1253098
Ref: _synopsis1253228
Ref: DESCRIPTION1253308
Ref: OPTIONS1253691
Ref: SEE ALSO1253907
Ref: GIT1253945
Node: git-var1253982
Ref: _synopsis1254081
Ref: DESCRIPTION1254136
Ref: OPTIONS1254194
Ref: EXAMPLE1254476
Ref: VARIABLES1254587
Ref: SEE ALSO1255502
Ref: GIT1255567
Node: git-verify-pack1255604
Ref: _synopsis1255725
Ref: DESCRIPTION1255817
Ref: OPTIONS1255987
Ref: OUTPUT FORMAT1256394
Ref: GIT1256698
Node: git-verify-tag1256735
Ref: _synopsis1256852
Ref: DESCRIPTION1256903
Ref: OPTIONS1256980
Ref: GIT1257128
Node: git-web--browse1257164
Ref: _synopsis1257292
Ref: DESCRIPTION1257357
Ref: OPTIONS1258175
Ref: CONFIGURATION VARIABLES1258524
Ref: CONF_VAR [from -c option] and web_browser1258574
Ref: browser_<tool>_path1258850
Ref: browser_<tool>_cmd1259182
Ref: Note about konqueror1259586
Ref: Note about git-config --global1260238
Ref: GIT1260582
Node: git-whatchanged1260619
Ref: _synopsis1260755
Ref: DESCRIPTION1260810
Ref: OPTIONS1261097
Ref: PRETTY FORMATS1264628
Ref: Examples1271624
Ref: GIT1272035
Node: git-write-tree1272071
Ref: _synopsis1272200
Ref: DESCRIPTION1272276
Ref: OPTIONS1272717
Ref: GIT1273099
Node: gitk1273135
Ref: _synopsis1273227
Ref: DESCRIPTION1273298
Ref: OPTIONS1273695
Ref: Examples1275491
Ref: Files1276046
Ref: SEE ALSO1276177
Ref: GIT1276533
Node: gitweb1276569
Ref: _synopsis1276691
Ref: DESCRIPTION1276872
Ref: CONFIGURATION1277949
Ref: Repositories1278150
Ref: Projects list file format1279241
Ref: Generating projects list using gitweb1281623
Ref: Controlling access to git repositories1282527
Ref: Per-repository gitweb configuration1284847
Ref: ACTIONS; AND URLS1287966
Ref: Actions;1289364
Ref: WEBSERVER CONFIGURATION1291684
Ref: Apache as CGI1292095
Ref: Apache with mod_perl; via ModPerl;;Registry1292623
Ref: Apache with FastCGI1293429
Ref: ADVANCED WEB SERVER SETUP1294068
Ref: Single URL for gitweb and for fetching1294247
Ref: Webserver configuration with multiple projects' root1296225
Ref: PATH_INFO usage1299321
Ref: BUGS1302198
Ref: SEE ALSO1302350
Ref: GIT1302442
Node: git1302479
Ref: _synopsis1302569
Ref: DESCRIPTION1302867
Ref: OPTIONS1303657
Ref: GIT COMMANDS1306297
Ref: High-level commands [porcelain]1306416
Ref: Main porcelain commands1306577
Ref: Ancillary Commands1308963
Ref: Interacting with Others1311083
Ref: Low-level commands [plumbing]1311927
Ref: Manipulation commands1312824
Ref: Interrogation commands1314001
Ref: Synching repositories1315417
Ref: Internal helper commands1316435
Ref: Configuration Mechanism1317576
Ref: Identifier Terminology1318255
Ref: Symbolic Identifiers1319233
Ref: File/Directory Structure1319673
Ref: Terminology1319918
Ref: Environment Variables1319973
Ref: The git Repository1320083
Ref: git Commits1322602
Ref: git Diffs1322784
Ref: other1324093
Ref: Discussion1327038
Ref: FURTHER DOCUMENTATION1329682
Ref: Authors1330354
Ref: Reporting Bugs1330812
Ref: SEE ALSO1331061
Ref: GIT1331276
Node: gitattributes1331313
Ref: _synopsis1331425
Ref: DESCRIPTION1331488
Ref: EFFECTS1334368
Ref: Checking-out and checking-in1334537
Ref: text1334889
Ref: eol1336032
Ref: Backwards compatibility with crlf attribute1336571
Ref: End-of-line conversion1336821
Ref: ident1340598
Ref: filter1340936
Ref: Interaction between checkin/checkout attributes1344265
Ref: Merging branches with differing checkin/checkout attributes1344740
Ref: Generating diff text1345797
Ref: diff1345842
Ref: Defining an external diff driver1347100
Ref: Defining a custom hunk-header1347788
Ref: Customizing word diff1350165
Ref: Performing text diffs of binary files1350848
Ref: Choosing textconv versus external diff1353341
Ref: Marking files as binary1354762
Ref: Performing a three-way merge1355935
Ref: merge1355995
Ref: Built-in merge drivers1357162
Ref: Defining a custom merge driver1358083
Ref: conflict-marker-size1359573
Ref: Checking whitespace errors1360106
Ref: whitespace1360162
Ref: Creating an archive1360908
Ref: export-ignore1360950
Ref: export-subst1361074
Ref: Packing objects1361642
Ref: delta1361677
Ref: Viewing files in GUI tools1361794
Ref: encoding1361851
Ref: USING MACRO ATTRIBUTES1362335
Ref: DEFINING MACRO ATTRIBUTES1363116
Ref: EXAMPLE1363381
Ref: SEE ALSO1364733
Ref: GIT1364773
Node: gitignore1364810
Ref: _synopsis1364935
Ref: DESCRIPTION1364991
Ref: PATTERN FORMAT1367455
Ref: NOTES1369014
Ref: EXAMPLES1369317
Ref: SEE ALSO1370297
Ref: GIT1370375
Node: gitmodules1370412
Ref: _synopsis1370519
Ref: DESCRIPTION1370567
Ref: EXAMPLES1373517
Ref: SEE ALSO1374015
Ref: GIT1374068
Node: githooks1374105
Ref: _synopsis1374196
Ref: DESCRIPTION1374235
Ref: HOOKS1374824
Ref: applypatch-msg1374839
Ref: pre-applypatch1375433
Ref: post-applypatch1375929
Ref: pre-commit1376181
Ref: prepare-commit-msg1376797
Ref: commit-msg1377911
Ref: post-commit1378546
Ref: pre-rebase1378773
Ref: post-checkout1378893
Ref: post-merge1379716
Ref: pre-receive1380331
Ref: update1381435
Ref: post-receive1383077
Ref: post-update1384113
Ref: pre-auto-gc1385303
Ref: post-rewrite1385480
Ref: GIT1386638
Node: gitrepository-layout1386674
Ref: _synopsis1386793
Ref: DESCRIPTION1386826
Ref: SEE ALSO1393987
Ref: GIT1394154
Node: gitweb.conf1394192
Ref: _synopsis1394317
Ref: DESCRIPTION1394412
Ref: DISCUSSION1395592
Ref: CONFIGURATION VARIABLES1398117
Ref: Location of repositories1398431
Ref: Finding files1402499
Ref: Links and their targets1404858
Ref: Changing gitweb’s look1408895
Ref: Changing gitweb’s behavior1411597
Ref: Some optional features and policies1413172
Ref: Other variables1417601
Ref: CONFIGURING GITWEB FEATURES1418865
Ref: Features in %feature1420988
Ref: EXAMPLES1430336
Ref: ENVIRONMENT1431303
Ref: FILES1431759
Ref: SEE ALSO1432172
Ref: GIT1432258
Node: gitcli1432295
Ref: _synopsis1432407
Ref: DESCRIPTION1432436
Ref: ENHANCED OPTION PARSER1436081
Ref: Magic Options1436357
Ref: Negating options1437269
Ref: Aggregating short options1437550
Ref: Separating argument from the option1437767
Ref: NOTES ON FREQUENTLY CONFUSED OPTIONS1438358
Ref: GIT1439936
Node: gittutorial1439973
Ref: _synopsis1440112
Ref: DESCRIPTION1440145
Ref: Importing a new project1441033
Ref: Making changes1441898
Ref: Git tracks content not files1443456
Ref: Viewing project history1443893
Ref: Managing branches1444208
Ref: Using git for collaboration1446164
Ref: Exploring history1451708
Ref: Next Steps1456647
Ref: SEE ALSO1458292
Ref: GIT1458492
Node: gittutorial-21458530
Ref: _synopsis1458654
Ref: DESCRIPTION1458687
Ref: The git object database1459020
Ref: The index file1465936
Ref: What next?1471055
Ref: SEE ALSO1471784
Ref: GIT1471966
Node: gitcvs-migration1472004
Ref: _synopsis1472111
Ref: DESCRIPTION1472154
Ref: Developing against a shared repository1472636
Ref: Setting Up a Shared Repository1474295
Ref: Importing a CVS archive1475511
Ref: Advanced Shared Repository Management1477063
Ref: Providing CVS Access to a git Repository1477490
Ref: Alternative Development Models1477716
Ref: SEE ALSO1478759
Ref: GIT1478925
Node: gitcore-tutorial1478963
Ref: _synopsis1479087
Ref: DESCRIPTION1479115
Ref: Creating a git repository1480353
Ref: Populating a git repository1483854
Ref: Committing git state1489112
Ref: Making a change1492103
Ref: Inspecting Changes1497295
Ref: Tagging a version1500765
Ref: Copying repositories1502446
Ref: Creating a new branch1507437
Ref: Merging two branches1509837
Ref: Merging external work1517055
Ref: How does the merge work?1521891
Ref: Publishing your work1527037
Ref: Packing your repository1530560
Ref: Working with Others1533363
Ref: Working with Others; Shared Repository Style1538108
Ref: Bundling your work together1538495
Ref: SEE ALSO1542161
Ref: GIT1542324
Node: gitglossary1542362
Ref: _synopsis1542456
Ref: DESCRIPTION1542480
Ref: [def_alternate_object_database]1542507
Ref: [def_bare_repository]1542755
Ref: [def_blob_object]1543330
Ref: [def_branch]1543416
Ref: [def_cache]1544041
Ref: [def_chain]1544096
Ref: [def_changeset]1544349
Ref: [def_checkout]1544549
Ref: [def_cherry-picking]1544977
Ref: [def_clean]1545468
Ref: [def_commit]1545701
Ref: [def_commit_object]1546343
Ref: [def_core_git]1546702
Ref: [def_DAG]1546823
Ref: [def_dangling_object]1547147
Ref: [def_detached_HEAD]1547472
Ref: [def_dircache]1547818
Ref: [def_directory]1547892
Ref: [def_dirty]1547939
Ref: [def_ent]1548155
Ref: [def_evil_merge]1548427
Ref: [def_fast_forward]1548577
Ref: [def_fetch]1549158
Ref: [def_file_system]1549499
Ref: [def_git_archive]1549699
Ref: [def_grafts]1549791
Ref: [def_hash]1550184
Ref: [def_head]1550272
Ref: [def_HEAD]1550539
Ref: [def_head_ref]1550955
Ref: [def_hook]1551011
Ref: [def_index]1551552
Ref: [def_index_entry]1551888
Ref: [def_master]1552169
Ref: [def_merge]1552498
Ref: [def_object]1553648
Ref: [def_object_database]1553819
Ref: [def_object_identifier]1554042
Ref: [def_object_name]1554119
Ref: [def_object_type]1554420
Ref: [def_octopus]1554680
Ref: [def_origin]1554815
Ref: [def_pack]1555223
Ref: [def_pack_index]1555346
Ref: [def_pathspec]1555527
Ref: [def_parent]1557900
Ref: [def_pickaxe]1558078
Ref: [def_plumbing]1558446
Ref: [def_porcelain]1558510
Ref: [def_pull]1558781
Ref: [def_push]1558941
Ref: [def_reachable]1559570
Ref: [def_rebase]1560108
Ref: [def_ref]1560290
Ref: [def_reflog]1560544
Ref: [def_refspec]1560806
Ref: [def_remote_tracking_branch]1561472
Ref: [def_repository]1561894
Ref: [def_resolve]1562354
Ref: [def_revision]1562471
Ref: [def_rewind]1562680
Ref: [def_SCM]1562836
Ref: [def_SHA1]1562877
Ref: [def_shallow_repository]1562941
Ref: [def_symref]1563658
Ref: [def_tag]1564025
Ref: [def_tag_object]1564624
Ref: [def_topic_branch]1564933
Ref: [def_tree]1565276
Ref: [def_tree_object]1565529
Ref: [def_tree-ish]1565781
Ref: [def_unmerged_index]1566041
Ref: [def_unreachable_object]1566165
Ref: [def_upstream_branch]1566369
Ref: [def_working_tree]1566699
Ref: SEE ALSO1566935
Ref: GIT1567084
Node: gitdiffcore1567122
Ref: _synopsis1567222
Ref: DESCRIPTION1567260
Ref: The chain of operation1567673
Ref: diffcore-break; For Splitting Up "Complete Rewrites"1569951
Ref: diffcore-rename; For Detection Renames and Copies1571364
Ref: diffcore-merge-broken; For Putting "Complete Rewrites" Back Together1573505
Ref: diffcore-pickaxe; For Detecting Addition/Deletion of Specified String1575444
Ref: diffcore-order; For Sorting the Output Based on Filenames1576470
Ref: SEE ALSO1577154
Ref: GIT1577336
Node: gitnamespaces1577374
Ref: _synopsis1577472
Ref: DESCRIPTION1577589
Ref: SECURITY1579773
Node: gitrevisions1580641
Ref: _synopsis1580762
Ref: DESCRIPTION1580797
Ref: SPECIFYING REVISIONS1581315
Ref: SPECIFYING RANGES1589747
Ref: SEE ALSO1592674
Ref: GIT1592712
Node: gitworkflows1592749
Ref: _synopsis1592876
Ref: DESCRIPTION1592909
Ref: SEPARATE CHANGES1593391
Ref: MANAGING BRANCHES1594305
Ref: Graduation1595243
Ref: Merging upwards1596245
Ref: Topic branches1596963
Ref: Throw-away integration1599561
Ref: Branch management for a release1600522
Ref: Maintenance branch management after a feature release1602074
Ref: Branch management for next and pu after a feature release1603169
Ref: DISTRIBUTED WORKFLOWS1604372
Ref: Merge workflow1605145
Ref: Patch workflow1607140
Ref: SEE ALSO1608669
Ref: GIT1608812
Node: gitcredentials1608850
Ref: _synopsis1608976
Ref: DESCRIPTION1609118
Ref: REQUESTING CREDENTIALS1609487
Ref: AVOIDING REPETITION1610162
Ref: CREDENTIAL CONTEXTS1612041
Ref: CONFIGURATION OPTIONS1613202
Ref: CUSTOM HELPERS1614343
Ref: GIT1614570

End Tag Table
