:; #-*- mode: nendo; syntax: scheme -*-;;
;;;
;;; util.nnd - Sekkaの汎用文字列処理ライブラリ
;;;  
;;;   Copyright (c) 2010  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: 
;;;
(use util.list)

(define (string-drop str n)
  (or (str.slice n (str.size))
      ""))

;; "string" => (cons "s" "tring")
(define (string-split-first-and-rest str)
  (if (= 0 str.size)
      (cons "" "")
      (cons (str.slice 0 1)
            (str.slice 1 str.size))))

(define (string-downcase-first str)
  (let1 _pair (string-split-first-and-rest str)
    (+ (. (car _pair) downcase)
       (cdr _pair))))

(define (split-dict-line line)
  (if-let1 index (line.index #/[ ]+/)
    (list (car (to-list (line.split #/[ ]+/)))
          (. (line.slice index (line.size)) strip))
    (list line)))


;; ファイルの行数を求める
(define (file-length f)
  (let1 total 0
    (for-each
     (lambda (x)
       (set! total (+ 1 total)))
     f)
    (f.rewind)
    total))
