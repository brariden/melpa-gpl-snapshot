:; #-*- mode: nendo; syntax: scheme -*-;;
;;;
;;; sharp-number.nnd - #0から#9までtypeでアラビア数字を漢数字等に変換する
;;;  
;;;   Copyright (c) 2011  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: 
;;;
(use srfi-1)
(use sekka.alphabet-lib)

(define (sekka-henkan-kansuuji-sen num-str)
  (let ([num-lst       (reverse (map (lambda (x) x.to_i) (to-list (num-str.split ""))))]
        [kurai1-lst    (to-list (. "□十百千" split ""))]
        [kan-vector    (. "〇一二三四五六七八九" split "")])
    (string-join
     (reverse
      (map
       (lambda (num kurai1)
         (case num
           ((0)
            "")
           ((1)
            (+
             (if (equal? "□" kurai1)
                 (vector-ref kan-vector num)
                 kurai1)))
           (else
            (+ 
             (if (equal? "□" kurai1)
                 (vector-ref kan-vector num)
                 (+ (vector-ref kan-vector num)
                    kurai1))))))
       num-lst
       kurai1-lst)))))



(define (sekka-henkan-kansuuji num-str)
  (let ([kurai2-lst    (cons "" (to-list (. "万億兆京" split "")))]
        [sliced        (map
                        (lambda (x) (x.reverse))
                        (to-list (num-str.reverse.scan #/[0-9][0-9]?[0-9]?[0-9]?/)))])
    (string-join
     (reverse
      (map
       (lambda (sen kurai2)
         (if (rxmatch #/^[0]+$/ sen)
             ""
             (+
              (sekka-henkan-kansuuji-sen sen)
              kurai2)))
       sliced
       kurai2-lst)))))

    

;; #0 から #9 の変換
(define (sekka-henkan-sharp-number type-str num-str)
  ;; 平仮名->カタカナ 変換
  (define (kurai-nashi str)
    (str.tr "0123456789" "〇一二三四五六七八九"))
  
  (case type-str
    (("#1")
     (gen-alphabet-han->zen num-str))
    (("#2")
     (kurai-nashi num-str))
    (("#3")
     (sekka-henkan-kansuuji num-str))
    (else
     num-str)))
