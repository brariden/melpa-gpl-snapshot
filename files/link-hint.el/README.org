[[http://melpa.org/#/link-hint][file:http://melpa.org/packages/link-hint-badge.svg]]
* Demonstration
Using this package to install this package:
[[http://noctuid.github.io/link-hint.el/assets/paradox_demonstration.gif][http://noctuid.github.io/link-hint.el/assets/paradox_demonstration.gif]]
* About
=link-hint.el= is inspired by the link hinting functionality in vim-like browsers and browser plugins such as pentadactyl. It provides commands for using avy to open or copy "links."

Currently the following types of links are supported:

- Plain text urls (e.g. =http://www.github.com/=; includes mu4e and irc urls)
- Shr urls (e.g. those in elfeed and html mu4e messages, eww urls, etc.)
- Htmlize/org mode urls
- Mu4e mailto addresses
- Mu4e attachments
- Help mode links
- Info mode links
- Package menu links (further description, install buttons, and keyword buttons)
- Compilation mode links
- Other button links (e.g. WoMan links)

Feel free to request support for any useful link type I may have missed. Also, if you think it would be beneficial to have a more specific link type split from a more generic link type, feel free to make an issue. For example, there may be some specific type of button you want to ignore or use in a custom command without affecting other buttons.

* Similar
There is also [[https://github.com/abo-abo/ace-link][ace-link]] which I didn't know about when writing this package. The main functional differences at the time of writing are as follows:

- =link-hint.el= doesn't have separate commands for different types of links. One command covers all types, but you can make your own command for specific link types if you want to.
- More link types are supported (e.g. plain text urls, file path links, and mu4e links).
- Operating on multiple links at once is supported.
- Alternate actions are supported for some link types (copying or user-defined actions).

* Configuration
** Basic Setup
Basic usage of this package only requires making key bindings for ~link-hint-open-link~ or other commands. Here is an example configuration using [[https://github.com/jwiegley/use-package][use-package]]:
#+begin_src emacs-lisp
(use-package link-hint
  :ensure t
  :bind
  ("C-c l o" . link-hint-open-link)
  ("C-c l c" . link-hint-copy-link))
#+end_src

Here is an example configuration for evil:
#+begin_src emacs-lisp
(use-package link-hint
  :ensure t
  ;; when installed with package.el, link-hint.el will have proper autoloads
  :defer t)

(define-key evil-normal-state-map (kbd "SPC f") 'link-hint-open-link)
#+end_src
** Browser Choice
~browse-url~ is used for opening urls, so in the case that the desired browser is not being used by default, the user can set ~browse-url-browser-function~:

#+begin_src emacs-lisp
;; Use chromium to open urls
(setq browse-url-browser-function 'browse-url-chromium)

;; Use firefox to open urls
(setq browse-url-browser-function 'browse-url-firefox)

;; Use qutebrowser to open urls
(setq browse-url-browser-function 'browse-url-generic)
(setq browse-url-generic-program "qutebrowser")
;; Open urls in a new tab instead of window; can also be set in the config file
(setq browse-url-generic-args '("--target" "tab"))
#+end_src

** Provided Commands
This package provides the following commands for operating on links:
- ~link-hint-open-link-at-point~ - Open the link at point.
- ~link-hint-copy-link-at-point~ - Copy link at point to kill ring (and optionally to the clipboard/primary).
- ~link-hint-open-link~ - Use avy to select and open a single visible link. If only one link is currently visible, it will be automatically opened without the need for selection.
- ~link-hint-open-multiple-links~ - Use avy to select multiple visible links and open them as soon as a key that does not correspond to a link (a key not in the avy overlay) is pressed (like pentadactyl's =g;=).
- ~link-hint-open-all-links~ - Opens all links visible in the buffer.
- ~link-hint-copy-link~ - Use avy to select and copy a single visible link to the kill ring. ~select-enable-clipboard~ and ~select-enable-clipboard~ can each be set to a non-nil value to also use the clipboard and/or primary.

~link-hint-copy-multiple-links~ and ~link-hint-copy-all-links~ also exist, but they may not be useful very often.

This package does not bind any commands by default.

** Overriding Avy Settings
=link-hint.el= supports overriding avy's settings. For example, if you want to use a different avy style just for link hinting, you can set ~link-hint-avy-style~:

#+begin_src emacs-lisp
(setq link-hint-avy-style 'de-bruijn)
#+end_src

These settings will default to the corresponding avy setting (e.g. ~link-hint-avy-style~ defaults to the value of ~avy-style~), so you only need to set these if you want different values from your avy configuration. Currently ~link-hint-avy-style~, ~link-hint-avy-keys~, ~link-hint-avy-all-windows~, ~link-hint-avy-all-windows-alt~, and ~link-hint-avy-background~ can be set. Also, ~link-hint-ignored-modes~ corresponds to ~avy-ignored-modes~.

** Ignoring Link Types
~link-hint-ignore-types~, ~link-hint-act-on-multiple-ignore-types~, and ~link-hint-act-on-all-ignore-types~ can be set by the user to change which link types will be operated on. For example, by default ~link-hint-open-all-links~ will ignore mu4e mailto addresses, mu4e attachments, info links, and help links. This is because it usually doesn't make sense to open more than one of these links types. In some cases, it may be useful to set these variables locally for certain modes. They can also be used to create more specific commands:
#+begin_src emacs-lisp
(defun my/mu4e-open-all-attachments ()
  "Open all visible mu4e attachments."
  (interactive)
  (let ((link-hint-ignore-types
         (remove 'mu4e-attachment link-hint-all-types))
        link-hint-act-on-all-ignore-types)
    (link-hint-open-all-links)))
#+end_src

~link-hint-copy-ignore-types~ can also be set by the user. However, note that by default it contains the types that there is no copy action for. Removing these types will result in some useless avy overlays over links (selecting them will have no effect). If you think some link type could have a useful copy action, feel free to make an issue suggesting one.

** Creating New Commands
The user can create new commands to do something other than copy or open a link using the ~link-hint--link-action~, ~link-hint--multiple-link-action~, and ~link-hint--all-links-action~ functions. Each takes a single function as an argument that will be called with the point at the start of the selected link(s).

Here is an example of a command that downloads a text url, ignoring other link types. As [[https://github.com/zk-phi/download-region][download-region]] does not have functions for downloading a url passed in as a string or the url under the point, the resulting command is somewhat convoluted.
#+begin_src emacs-lisp
(defun link-hint-download-link ()
  "Use avy to select and download a text URL with download.region.el."
  (interactive)
  (let ((link-hint-ignore-types
         (remove 'text-url link-hint-all-types)))
    (link-hint--link-action
     (lambda ()
       (set-mark (cdr (thing-at-point-bounds-of-url-at-point)))
       (download-region-as-url)
       (keyboard-quit)))))
#+end_src

For reference, this is what ~link-hint-open-link~ looks like:
#+begin_src emacs-lisp
(defun link-hint-open-link ()
  "Use avy to select and open a visible link."
  (interactive)
  (link-hint--link-action #'link-hint-open-link-at-point))
#+end_src
