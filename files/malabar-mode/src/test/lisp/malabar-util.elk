;;; -*- emacs-lisp -*-
;; Copyright (c) 2009 Espen Wiborg <espenhw@grumblesmurf.org>
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
;; 02110-1301 USA.
;;

;; Stub
(provide 'semantic)

(require 'malabar-util)

(deftest "start-with empty"
  (assert-nil (string-starts-with "" "foo")))

(deftest "start-with match"
  (assert-nonnil (string-starts-with "foobar" "foo")))

(deftest "start-with no match"
  (assert-nil (string-starts-with "barfoo" "foo")))

(deftest "end-with empty"
  (assert-nil (string-ends-with "" "foo")))

(deftest "end-with match"
  (assert-nonnil (string-ends-with "foobar" "bar")))

(deftest "end-with no match"
  (assert-nil (string-ends-with "barfoo" "bar")))

(deftest "trim empty"
  (assert-equal "" (string-trim "")))

(deftest "trim all-spaces"
  (assert-equal "" (string-trim "             ")))

(deftest "trim funky-whitespace"
  (assert-equal "" (string-trim "     \t\t \n       ")))

(deftest "trim start"
  (assert-equal "foo" (string-trim "     \t\t \n       foo")))

(deftest "trim end"
  (assert-equal "foo" (string-trim "foo     \t\t \n       ")))

(deftest "trim both"
  (assert-equal "foo" (string-trim "     \t\t \n       foo     \t\t \n       ")))

(deftest "delete-whitespace empty"
  (assert-equal "" (string-delete-whitespace "")))

(deftest "delete-whitespace"
  (assert-equal "abcdf" (string-delete-whitespace " \na b c \n\n\t d f")))

(deftest "string-with-newline empty"
  (assert-equal "\n" (string-with-newline "")))

(deftest "string-with-newline nonl"
  (assert-equal "foo\n" (string-with-newline "foo")))

(deftest "string-with-newline"
  (assert-equal "foo\n" (string-with-newline "foo\n")))

(deftest "get-package-of nopackage"
  (assert-equal "" (malabar-get-package-of "foo")))

(deftest "get-package-of with-package"
  (assert-equal "com.example" (malabar-get-package-of "com.example.Foo")))

(deftest "get-classname-of with-package"
  (assert-equal "Foo" (malabar-get-classname "com.example.Foo")))

(deftest "get-classname-of nopackage"
  (assert-equal "foo" (malabar-get-classname "foo")))

(deftest "class-to-filename nopackage"
  (assert-equal "Foo.java" (malabar-class-name-to-filename "Foo")))

(deftest "class-to-filename with-package"
  (assert-equal "com/example/Foo.java" (malabar-class-name-to-filename "com.example.Foo")))

(deftest "parse-maven-command-line simple"
  (assert-equal '(("install") nil nil) (malabar-parse-maven-command-line "install")))

(deftest "parse-maven-command-line two goals"
  (assert-equal '(("clean" "install") nil nil) (malabar-parse-maven-command-line "clean install")))

(deftest "parse-maven-command-line two goals one mojo"
  (assert-equal '(("clean" "install" "help:effective-pom") nil nil) (malabar-parse-maven-command-line "clean install help:effective-pom")))

(deftest "parse-maven-command-line single profile"
  (assert-equal '(("test") nil ("runits")) (malabar-parse-maven-command-line "-Prunits test")))

(deftest "parse-maven-command-line multiple profiles"
  (assert-equal '(("test") nil ("runits" "dev-mode")) (malabar-parse-maven-command-line "-Prunits,dev-mode test")))

(deftest "parse-maven-command-line simple definition"
  (assert-equal '(("foo" . "bar"))
                (second (malabar-parse-maven-command-line "-Dfoo=bar"))))

(deftest "parse-maven-command-line multiple definitions"
  (assert-equal '(("foo" . "bar")
                  ("baz" . "zot"))
                (second (malabar-parse-maven-command-line "-Dfoo=bar -Dbaz=zot"))))

(deftest "parse-maven-command-line all together"
  (let ((parsed-command (malabar-parse-maven-command-line "-Pintegration-test -Dmaven.skip.tests=true install")))
    (assert-equal '("install") (first parsed-command))
    (assert-equal '(("maven.skip.tests" . "true")) (second parsed-command))
    (assert-equal '("integration-test") (third parsed-command))))
