# Test code for the command and shell modules.
# (c) 2014, Richard Isaacson <richard.c.isaacson@gmail.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

- set_fact: output_dir_test={{output_dir}}/test_command_shell

- name: make sure our testing sub-directory does not exist
  file: path="{{ output_dir_test }}" state=absent

- name: create our testing sub-directory
  file: path="{{ output_dir_test }}" state=directory

- name: prep our test script
  copy: src=test.sh dest="{{ output_dir_test }}" mode=0755

- name: prep our test script
  copy: src=create_afile.sh dest="{{ output_dir_test }}" mode=0755

- name: prep our test script
  copy: src=remove_afile.sh dest="{{ output_dir_test }}" mode=0755

##
## command
##

- name: execute the test.sh script via command
  command: "{{output_dir_test | expanduser}}/test.sh"
  register: command_result0

- name: assert that the script executed correctly
  assert:
    that:
      - "command_result0.rc == 0"
      - "command_result0.stderr == ''"
      - "command_result0.stdout == 'win'"

# executable

# FIXME doesn't have the expected stdout.

#- name: execute the test.sh script with executable via command
#  command: "{{output_dir_test | expanduser}}/test.sh executable=/bin/bash"
#  register: command_result1
#
#- name: assert that the script executed correctly with command
#  assert:
#    that:
#      - "command_result1.rc == 0"
#      - "command_result1.stderr == ''"
#      - "command_result1.stdout == 'win'"

# chdir

- name: execute the test.sh script with chdir via command
  command: ./test.sh chdir="{{output_dir_test | expanduser}}"
  register: command_result2

- name: assert that the script executed correctly with chdir
  assert:
    that:
      - "command_result2.rc == 0"
      - "command_result2.stderr == ''"
      - "command_result2.stdout == 'win'"

# creates

- name: verify that afile.txt is absent
  file: path={{output_dir_test}}/afile.txt state=absent

- name: create afile.txt with create_afile.sh via command
  shell: "{{output_dir_test | expanduser}}/create_afile.sh {{output_dir_test | expanduser}}/afile.txt creates={{output_dir_test | expanduser}}/afile.txt"

- name: verify that afile.txt is present
  file: path={{output_dir_test}}/afile.txt state=file

# removes

- name: remove afile.txt with remote_afile.sh via command
  shell: "{{output_dir_test | expanduser}}/remove_afile.sh {{output_dir_test | expanduser}}/afile.txt removes={{output_dir_test | expanduser}}/afile.txt"

- name: verify that afile.txt is absent
  file: path={{output_dir_test}}/afile.txt state=absent
  register: command_result3

- name: assert that the file was removed by the script
  assert:
    that:
      - "command_result3.changed != True"

##
## shell
##

- name: execute the test.sh script
  shell: "{{output_dir_test | expanduser}}/test.sh"
  register: shell_result0

- name: assert that the script executed correctly
  assert:
    that:
      - "shell_result0.rc == 0"
      - "shell_result0.stderr == ''"
      - "shell_result0.stdout == 'win'"
      - "not shell_result0.warnings"

# executable

# FIXME doesn't pass the expected stdout

#- name: execute the test.sh script
#  shell: "{{output_dir_test | expanduser}}/test.sh executable=/bin/bash"
#  register: shell_result1
#
#- name: assert that the shell executed correctly
#  assert:
#    that:
#      - "shell_result1.rc == 0"
#      - "shell_result1.stderr == ''"
#      - "shell_result1.stdout == 'win'"

# chdir

- name: execute the test.sh script with chdir
  shell: ./test.sh chdir="{{output_dir_test | expanduser}}"
  register: shell_result2

- name: assert that the shell executed correctly with chdir
  assert:
    that:
      - "shell_result2.rc == 0"
      - "shell_result2.stderr == ''"
      - "shell_result2.stdout == 'win'"
      - "not shell_result2.warnings"

# creates

- name: verify that afile.txt is absent
  file: path={{output_dir_test}}/afile.txt state=absent

- name: execute the test.sh script with chdir
  shell: "{{output_dir_test | expanduser}}/test.sh > {{output_dir_test | expanduser}}/afile.txt creates={{output_dir_test | expanduser}}/afile.txt"

- name: verify that afile.txt is present
  file: path={{output_dir_test}}/afile.txt state=file

# removes

- name: remove afile.txt using rm
  shell: rm {{output_dir_test | expanduser}}/afile.txt removes={{output_dir_test | expanduser}}/afile.txt
  register: shell_result4

- name: assert that using rm under shell causes a warning
  assert:
    that:
      - "shell_result4.warnings"

- name: verify that afile.txt is absent
  file: path={{output_dir_test}}/afile.txt state=absent
  register: shell_result5

- name: assert that the file was removed by the shell
  assert:
    that:
      - "shell_result5.changed == False"

- name: execute a shell command using a literal multiline block
  args:
    executable: /bin/bash
  shell: |
    echo this is a \
    "multiline echo" \
    "with a new line
    in quotes" \
    | sha1sum \
    | tr -s ' ' \
    | cut -f1 -d ' '
    echo "this is a second line"
  register: shell_result6

- debug: var=shell_result6

- name: assert the multiline shell command ran as expected
  assert:
    that:
      - "shell_result6.changed"
      - "shell_result6.stdout == '5575bb6b71c9558db0b6fbbf2f19909eeb4e3b98\nthis is a second line'"

- name: execute a shell command using a literal multiline block with arguments in it
  shell: |
    executable=/bin/bash
    creates={{output_dir_test | expanduser}}/afile.txt
    echo "test"
  register: shell_result7

- name: assert the multiline shell command with arguments in it run as expected
  assert:
    that:
      - "shell_result7.changed"
      - "shell_result7.stdout == 'test'"

- name: remove the previously created file
  file: path={{output_dir_test}}/afile.txt state=absent
