#*
#* author: Edmund Jorgensen
#* email: tomheon@gmail.com
#* date: 2013-04-05T16:17:27-0400
#*
#- Check for python 2.6+ in emacs mode.
#-
#- And tell the user in more friendly fashion if it's not found.
#-
#- Closes #16.
#-
#-
#- Remove useless utility.
#-
#-
#- Add logging (include debug logging) to gh-export.py.
#-
#- Closes #28.
#-
#-
#**
#** author: Edmund Jorgensen
#** email: tomheon@gmail.com
#** date: 2013-04-05T16:17:58-0400
#**
#-- Testing 2.
#--
diff --git a/.gitignore b/.gitignore
index 4e59ca6..11a78a5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,5 @@
 *~
 *.pyc
 tmp
 env
+gh-export.log
diff --git a/diffscuss-mode/diffscuss-mode.el b/diffscuss-mode/diffscuss-mode.el
index 88ce516..f4ef73a 100644
--- a/diffscuss-mode/diffscuss-mode.el
+++ b/diffscuss-mode/diffscuss-mode.el
@@ -3,40 +3,45 @@
 ;;; Commentary:

 ;;; Config variables

 ;; By default, diffscuss will use your git config user.name for new
 ;; comments.  You can override that here.
 (defvar diffscuss-author nil)

 ;; By default, diffscuss will use your git config user.email for new
 ;; comments.  You can override that here.
 (defvar diffscuss-email nil)

 ;; Where to find git, by default assume it's whatever version is in
 ;; the path.
 (defvar diffscuss-git-exe "git")

 ;; Where to find the python installation of diffscuss (where
 ;; find-local-source.py is for example)
 (defvar diffscuss-dir nil)

+;; Where to find the version of python to use.  Minimum is 2.6.  (If
+;; you're on a mac, you may need to set this, as some macs seems to
+;; have 2.4 as the default version).
+(defvar diffscuss-python-exe "/usr/bin/python")
+
 ;;; Code:

 ;; we need to make sure diff mode is present and loaded so we can get
 ;; the basic diff font-lock rules.

 (require 'diff-mode)

 (defvar diffscuss-mode-map
   (let ((map (make-sparse-keymap)))
     ;; insert comments
     (define-key map "\C-c\C-r" 'diffscuss-reply-to-comment)
     (define-key map "\C-c\C-i" 'diffscuss-insert-comment)
     (define-key map "\C-c\C-f" 'diffscuss-insert-file-comment)
     (define-key map "\C-c\C-c" 'diffscuss-insert-contextual-comment)

     ;; showing source
     (define-key map "\C-cs" 'diffscuss-goto-local-source)
     (define-key map "\C-c+" 'diffscuss-show-new-source)
     (define-key map "\C-c-" 'diffscuss-show-old-source)

@@ -630,54 +635,74 @@ and old or new is 'new'."
         (if (diffscuss-source-line-p old-or-new)
             (setq source-lines (+ 1 source-lines))))
       (if (diffscuss-range-line-p)
           (+ source-lines (diffscuss-parse-orig-line old-or-new))
         nil))))

 (defun diffscuss-parse-orig-line (old-or-new)
   "Parse the original line out of a range header."
   (let ((line-pattern nil)
         (group-num nil))
     (if (string= old-or-new "old")
         (progn (setq line-pattern "^@@ -\\([[:digit:]]+\\)")
                (setq group-num 1))
       (progn (setq line-pattern "^@@ -[[:digit:]]+\\(,[[:digit:]]+\\)? \\+\\([[:digit:]]+\\)")
              (setq group-num 2)))
     (save-excursion
       (beginning-of-line)
       (looking-at line-pattern)
       (string-to-number (buffer-substring (match-beginning group-num) (match-end group-num))))))

+(defun diffscuss-check-python ()
+  (save-excursion
+    (with-temp-buffer
+      (call-process diffscuss-python-exe
+                    nil
+                    t
+                    nil
+                    "-V")
+      (beginning-of-buffer)
+      (if (not (looking-at "Python \\([[:digit:]]+\\)\\.\\([[:digit:]]+\\)"))
+          (error "Python exe %s did not return version when run with -V" diffscuss-python-exe))
+      (if (or (< (string-to-number (buffer-substring (match-beginning 1) (match-end 1)))
+                 2)
+              (< (string-to-number (buffer-substring (match-beginning 2) (match-end 2)))
+                 6))
+          (error "Python version too early, require 2.6+, found: %s"
+                 (trim-string (buffer-string)))))))
+
 (defun diffscuss-goto-local-source ()
   "Attempt to jump to the appropriate source."
   (interactive)
+  (diffscuss-check-python)
   (if (not diffscuss-dir)
       (message "Must set diffscuss-dir before you can jump to local source" "")
     (progn
-      (let ((find-source-exe (concat (file-name-as-directory diffscuss-dir) "find-local-source.py"))
-            (outbuf-name (generate-new-buffer-name "diffscuss-local-source")))
+      (let ((outbuf-name (generate-new-buffer-name "diffscuss-local-source")))
         (if (/= 0 (call-process-region (point-min)
                                        (point-max)
-                                       find-source-exe
+                                       diffscuss-python-exe
                                        nil
                                        outbuf-name
                                        nil
+                                       (concat (file-name-as-directory diffscuss-dir)
+                                               "find-local-source.py")
                                        (number-to-string (line-number-at-pos))))
             (with-current-buffer outbuf-name
               (message "%s" (buffer-string))
               (message "Could not find local source"))
           (progn
             (let ((to-find-fname nil)
                   (to-find-line nil))
               (with-current-buffer outbuf-name
                 (setq to-find-fname (mapconcat
                                      'identity
                                      (butlast (split-string (buffer-string) " ") 1) " "))
                 (setq to-find-line (car (last (split-string (buffer-string) " ") 1))))
               (pop-to-buffer (find-file-noselect to-find-fname))
               (goto-line (string-to-number to-find-line))))
           (with-current-buffer outbuf-name
             (kill-buffer outbuf-name)))))))


 (defun diffscuss-show-source-rev (source-file rev line-num old-or-new)
   "Show the old version of the source from git, and jump to the right line."
@@ -802,71 +827,81 @@ and old or new is 'new'."
               (zerop (forward-line 1))))
   (recenter))

 (defun diffscuss-previous-comment ()
   "Jump to the previous comment."
   (interactive)
   (if (diffscuss-parse-leader)
       (goto-char (diffscuss-find-comment-start)))
   (beginning-of-line)
   (forward-line -1)
   (while (and (not (diffscuss-parse-leader))
               (zerop (forward-line -1))))
   (if (diffscuss-parse-leader)
       (goto-char (diffscuss-find-comment-start)))
   (recenter))

 ;; mailbox

 (defun diffscuss-mb-check ()
   (interactive)
+  (diffscuss-check-python)
   (if (not diffscuss-dir)
       (message "Must set diffscuss-dir before you can check mailboxes" "")
-    (let ((mb-check-exe (concat (file-name-as-directory diffscuss-dir)
-                                (file-name-as-directory "diffscuss-mb")
-                                "dmb-check.py"))
-          (outbuf (get-buffer-create "*diffscuss-mb-check*")))
+    (let ((outbuf (get-buffer-create "*diffscuss-mb-check*")))
       (with-current-buffer outbuf
         (setq buffer-read-only nil)
         (text-mode)
         (erase-buffer))
-      (call-process mb-check-exe nil outbuf nil "-e")
+      (call-process
+       diffscuss-python-exe
+       nil outbuf nil
+       (concat (file-name-as-directory diffscuss-dir)
+               (file-name-as-directory "diffscuss-mb")
+               "dmb-check.py")
+       "-e")
       (with-current-buffer outbuf
         (beginning-of-buffer)
         (compilation-mode))
       (pop-to-buffer outbuf))))

 (defun diffscuss-mb-cmd-impl (recips verb dmb-cmd)
+  (diffscuss-check-python)
   (if (not diffscuss-dir)
       (message "Must set diffscuss-dir before you can %s reviews." verb)
-    (let ((mb-exe (concat (file-name-as-directory diffscuss-dir)
-                               (file-name-as-directory "diffscuss-mb")
-                               dmb-cmd))
-          (orig-file buffer-file-name)
+    (let ((orig-file buffer-file-name)
           (new-file buffer-file-name))
       (with-temp-buffer
         (let ((exe-res nil))
           (if (string= "" recips)
-              (setq exe-res (call-process mb-exe nil t nil
+              (setq exe-res (call-process diffscuss-python-exe
+                                          nil t nil
+                                          (concat (file-name-as-directory diffscuss-dir)
+                                                  (file-name-as-directory "diffscuss-mb")
+                                                  dmb-cmd)
                                           "--print-review-path"
                                           orig-file))
-            (setq exe-res (apply 'call-process mb-exe nil t nil
+            (setq exe-res (apply 'call-process diffscuss-python-exe
+                                 nil t nil
+                                 (concat (file-name-as-directory diffscuss-dir)
+                                         (file-name-as-directory "diffscuss-mb")
+                                         dmb-cmd)
                                  "--print-review-path"
                                  orig-file
                                  (split-string recips " "))))
           (if (= 0 exe-res)
               (progn (setq new-file (trim-string (buffer-string)))
                      (message "%s successful" verb))
             (message "Could not %s, got error: %s" verb (buffer-string)))))
       (if (not (string= buffer-file-name new-file))
           (progn (set-visited-file-name new-file)
                  (message "Visiting new review file." ""))))))

 (defun diffscuss-mb-post (recips)
   (interactive "sEnter post recipients separated by space: ")
   (diffscuss-mb-cmd-impl recips "post" "dmb-post.py"))

 (defun diffscuss-mb-bounce (recips)
   (interactive "sEnter bounce recipients separated by space: ")
   (diffscuss-mb-cmd-impl recips "bounce" "dmb-bounce.py"))

 (defun diffscuss-mb-done ()
diff --git a/diffscuss2diff.py b/diffscuss2diff.py
deleted file mode 100644
index 3771c34..0000000
--- a/diffscuss2diff.py
+++ /dev/null
@@ -1,41 +0,0 @@
-#!/usr/bin/env python
-
-from optparse import OptionParser
-import sys
-from textwrap import dedent
-
-from diffscuss.walker import walk, DIFF
-
-
-def strip_diffscuss(fil, outfil):
-    for (elem_type, elem) in walk(fil):
-        if elem_type == DIFF:
-            outfil.write(elem)
-
-
-if __name__ == '__main__':
-    usage="""\
-          %prog [options] [FILE]
-
-          Strip all diffscuss markers out of FILE and print the results
-          to standard out.
-
-          If FILE is -, or not provided, read from standard in."""
-    parser = OptionParser(usage=dedent(usage))
-    (opts, args) = parser.parse_args()
-    if len(args) > 1:
-        parser.error("Provide at most one FILE argument.")
-
-    if not args or args[0] == '-':
-        fil = sys.stdin
-        using_stdin = True
-    else:
-        fil = open(args[0], 'rU')
-        using_stdin = False
-
-    try:
-        strip_diffscuss(fil, sys.stdout)
-    finally:
-        if not using_stdin:
-            fil.close()
-
diff --git a/gh-export.py b/gh-export.py
index 1bc662a..b76e994 100644
--- a/gh-export.py
+++ b/gh-export.py
@@ -1,24 +1,25 @@
 #!/usr/bin/env python

 import errno
 import itertools
+import logging
 from optparse import OptionParser
 import os
 import shutil
 from StringIO import StringIO
 import sys
 from textwrap import dedent, wrap

 from github import Github, GithubException
 import requests

 from diffscuss.walker import walk, DIFF, DIFF_HEADER, COMMENT_HEADER, \
     COMMENT_BODY


 def _echo(line):
     return lambda: line


 def _compose(line_func_one, line_func_two):
     return lambda: u''.join([line_func_one(), line_func_two()])
@@ -29,114 +30,140 @@ class DiffscussComposer(object):
     Allows us to insert content into the original diff without
     changing the line numbers, so we can sync up positions in the
     diffscuss with positions in the diff even after adding comments.
     """

     def __init__(self, orig_diff):
         self.orig_diff = orig_diff
         self.composed_lines = []
         self.top_matter = _echo('')

         # we want to maintain things like trailing newline or not, so
         # use readline instead of the line iterators
         diff_s = StringIO(orig_diff)
         line = diff_s.readline()

         while line != u'':
             self.composed_lines.append(_echo(line))
             line = diff_s.readline()

     def append_at(self, index, text):
+        logging.debug("Appending at index %s text %s",
+                      index,
+                      text)
         if index == -1:
             self.top_matter = _compose(self.top_matter,
                                        _echo(text))
         elif index >= 0:
             self.composed_lines[index] = _compose(self.composed_lines[index],
                                                   _echo(text))
         else:
             raise Exception("Index must be >= -1.")

     def render(self):
         yield self.top_matter()
         for line_func in self.composed_lines:
             yield line_func()


 def _mkdir_p(path):
     try:
         os.makedirs(path)
     except OSError, e:
         if e.errno != errno.EEXIST or not os.path.isdir(path):
             raise


 def _password(passfile):
     with open(passfile, 'rb') as passfil:
         return passfil.read().rstrip()


 def _pull_requests_from_repo(repo):
+    logging.debug("Finding all pull requests in repo %s",
+                  repo.url)
     for state in ['open', 'closed']:
+        logging.debug("Finding %s pull requests in repo %s",
+                      state,
+                      repo.url)
         for pull_request in repo.get_pulls(state=state):
+            logging.debug("Found pull request %s",
+                          pull_request.url)
             yield pull_request


 def _user_or_org(gh, user_or_org_name):
     # note that gh will not return private users for an org, even if
     # the api user has access, unless you access the organization as
     # an organization, so first try to treat the name as an org, and
     # fall back to user.
+    logging.debug("Finding user or org with name %s", user_or_org_name)
     try:
+        logging.debug("Trying org %s", user_or_org_name)
         user_or_org = gh.get_organization(user_or_org_name)
+        logging.debug("Found org %s", user_or_org_name)
     except GithubException, e:
         if e.status == 404:
+            logging.debug("No org %s, trying user", user_or_org_name)
             user_or_org = gh.get_user(user_or_org_name)
         else:
             raise
     return user_or_org


 def _pull_requests_from_spec(gh, spec):
+    logging.info("Parsing spec %s", spec)
     if ':' in spec:
         repo_name, pr_id = spec.split(':')
         repo = gh.get_repo(repo_name)
         user_or_org = _user_or_org(gh, repo_name.split('/')[0])
+        logging.info("Spec is for pr #%s in repo %s",
+                     pr_id,
+                     repo_name)
         yield user_or_org, repo, repo.get_pull(int(pr_id))
     elif '/' in spec:
         repo = gh.get_repo(spec)
         user_or_org = _user_or_org(gh, spec.split('/')[0])
+        logging.info("Spec is for all prs in repo %s",
+                     repo.url)
         for pull_request in _pull_requests_from_repo(repo):
             yield user_or_org, repo, pull_request
     else:
         user_or_org = _user_or_org(gh, spec)
+        logging.info("Spec is for all prs in all repos for user/org %s",
+                     spec)
         for repo in user_or_org.get_repos():
             for pull_request in _pull_requests_from_repo(repo):
                 yield user_or_org, repo, pull_request


 def _pull_requests_from_specs(gh, args):
     for spec in args:
         for user_or_org, repo, pull_request in _pull_requests_from_spec(gh, spec):
+            logging.info("Found pull request %s",
+                         pull_request.url)
             yield user_or_org, repo, pull_request


 def _get_diff_text(username, password, pull_request):
+    logging.info("Requesting diff from url %s",
+                 pull_request.diff_url)
     resp = requests.get(pull_request.diff_url, auth=(username, password))
     if not resp.ok:
         raise Exception("Error pulling %s: %s" % (pull_request.diff_url,
                                                   resp))
     return resp.text


 def _gh_time_to_diffscuss_time(gh_time):
     # gh times are all zulu, and come in w/out timezones through
     # PyGithub, so we hardcode the offset
     return unicode(gh_time.strftime("%Y-%m-%dT%T-0000"))


 def _make_header_line(depth, header, value):
     if header is None:
         return u"%%%s \n" % (u'*' * depth)
     return u"%%%s %s: %s\n" % (u'*' * depth, header, value)


 def _make_body_line(depth, body):
@@ -155,232 +182,289 @@ def _make_comment(depth, body, headers):
     wrap_body_lines_at = max(wrap_body_lines_at, 40)
     for body_line in body_s:
         body_line = body_line.strip()
         if body_line:
             for wrapped_body_line in wrap(body_line.rstrip(),
                                           width=wrap_body_lines_at):
                 body_lines.append(_make_body_line(depth, wrapped_body_line))
         else:
             body_lines.append(_make_body_line(depth, u''))
     body_lines.append(_make_body_line(depth, u''))
     return u''.join(header_lines + body_lines)


 def _overlay_pr_top_level(composer, gh, pull_request):
     """
     At the top of the diffscuss file, build a thread out of:

     - the title and initial body of the pull request
     - the comments on the associated issue
     """
+    logging.info("Overlaying top-level thread for pr %s",
+                 pull_request.url)
     init_comment = _make_comment(
         depth=1,
         body=(pull_request.title + u"\n\n" + pull_request.body),
         headers=[(u'author', pull_request.user.login),
                  (u'email', pull_request.user.email),
                  (u'date', _gh_time_to_diffscuss_time(pull_request.created_at)),
                  (u'x-github-pull-request-url', pull_request.url),
                  (u'x-github-updated-at',
                   _gh_time_to_diffscuss_time(pull_request.updated_at)),])
     init_thread = init_comment + _make_thread(sorted(list(pull_request.get_issue_comments()),
                                                      key=lambda ic: ic.created_at),
                                               init_offset=1)
+    logging.debug("Init thread is %s", init_thread)
     composer.append_at(-1, init_thread)


 def _overlay_pr_comments(composer, pull_request):
     """
     Get the inline comments into the diffscuss file (github makes
     these contextual comments available as "review comments" as
     opposed to "issue comments."
     """
+    logging.info("Overlaying review comments for pr %s",
+                 pull_request.url)
     _overlay_comments(composer,
                       pull_request.get_review_comments())


 def _overlay_comments(composer, comments):
+    comments = list(comments)
+    logging.info("Overlaying %d total comments", len(comments))
     get_path = lambda rc: rc.path
-    for (path, path_comments) in itertools.groupby(sorted(list(comments),
+    for (path, path_comments) in itertools.groupby(sorted(comments,
                                                           key=get_path),
                                                    get_path):
         if path:
+            logging.info("Found path %s, will write path comments", path)
             _overlay_path_comments(composer, path, path_comments)
         else:
+            logging.info("Could not find path, writing review level comments.")
             # if there's no path, make a new thread at the top of the
             # review.
             _overlay_review_level_comments(composer, path_comments)


 def _overlay_review_level_comments(composer, comments):
-    thread = _make_thread(sorted(list(comments),
+    comments = list(comments)
+    logging.info("Overlaying %d review level comments",
+                 len(comments))
+    thread = _make_thread(sorted(comments,
                                  key=lambda ic: ic.created_at))
     # note that we're assuming here that the pr thread has already
     # been created.
+    logging.debug("Thread is %s", thread)
     composer.append_at(-1, thread)


 def _is_range_line(tagged_line):
     return tagged_line[0] == DIFF_HEADER and tagged_line[1].startswith(u'@@')


 def _path_match(diff_header_line, path):
     return diff_header_line.startswith((u'--- a/%s' % path,
                                         u'+++ b/%s' % path))


 def _is_target_path(tagged_line, path):
     return tagged_line[0] == DIFF_HEADER and _path_match(tagged_line[1],
                                                          path)


 def _find_base_target_idx(orig_diff, path):
+    logging.debug("Finding base target index for %s", path)
     looking_for_range_line = False

     for (i, tagged_line) in enumerate(walk(StringIO(orig_diff))):
+        logging.debug("Checking at index %d tagged line %s",
+                      i, tagged_line)
         assert(tagged_line[0] not in [COMMENT_HEADER, COMMENT_BODY])
         if looking_for_range_line and _is_range_line(tagged_line):
+            logging.debug("Found range line at index %d", i)
             return i
         if _is_target_path(tagged_line, path):
+            logging.debug("Found path %s at index %s, now looking for range line",
+                          path, i)
             looking_for_range_line = True
+    logging.info("Could not find path %s in diff", path)
     return None


 def _make_thread(gh_comments, init_offset=0):
     comments = []
     for (i, gh_comment) in enumerate(gh_comments):
         comment = _make_comment(
             depth=i + 1 + init_offset,
             body=(gh_comment.body),
             headers=[(u'author', gh_comment.user.login),
                      (u'email', gh_comment.user.email),
                      (u'date', _gh_time_to_diffscuss_time(gh_comment.created_at)),
                      (u'x-github-comment-url', gh_comment.url),
                      (u'x-github-updated-at',
                       _gh_time_to_diffscuss_time(gh_comment.updated_at)),])
         comments.append(comment)
     return u''.join(comments)


 def _overlay_path_comments(composer, path, path_comments):
+    logging.info("Overlaying comments for path %s", path)
     base_target_idx = _find_base_target_idx(composer.orig_diff, path)
+    logging.debug("Base target index for path %s is %s", path, base_target_idx)
     if base_target_idx is None:
-        # TODO log better
-        print "Couldn't find target for path %s (likely outdated diff)" % path
+        logging.warn("Couldn't find target for path %s (likely outdated diff)",
+                     path)
         return

     get_position = lambda pc: pc.position
     for (position, position_comments) in itertools.groupby(sorted(list(path_comments),
                                                                   key=get_position),
                                                            get_position):
+        position_comments = list(position_comments)
         if position is None:
-            # TODO: warn that we're skipping outdated information
+            logging.info("Null position in path %s for %d comments (assuming outdated diff)",
+                         path,
+                         len(position_comments))
             continue
+
+        logging.info("Writing %d comments for path %s at position %s.",
+                     len(position_comments),
+                     path, position)
         target_idx = base_target_idx + position
         composer.append_at(target_idx,
-                           _make_thread(sorted(list(position_comments),
+                           _make_thread(sorted(position_comments,
                                                key=lambda pc: pc.created_at)))


 def _overlay_encoding(composer):
     composer.append_at(-1, u"# -*- coding: utf-8 -*-\n")


 def _safe_get_commit(repo, sha):
     try:
         return repo.get_commit(sha)
     except GithubException, e:
         if e.status == 404:
             return None
         else:
             raise


 def _overlay_commit_comments(composer, pull_request):
+    logging.info("Overlaying all commit comments.")
     for commit in pull_request.get_commits():
+        logging.info("Overlaying commit %s", commit.sha)
         # the commit comments seem generally to be in the head, but
         # let's make sure.
         for part in [pull_request.base, pull_request.head]:
             repo = part.repo
+            logging.debug("Checking for commit in repo %s", repo.url)
             repo_commit = _safe_get_commit(repo, commit.sha)
+            logging.debug("Found commit: %s", repo_commit)
             if repo_commit:
+                logging.info("Will overlay commit %s from repo %s",
+                             commit.sha,
+                             repo.url)
                 _overlay_comments(composer, repo_commit.get_comments())


 def _export_to_diffscuss(gh, username, password, user_or_org, repo, pull_request, output_dir):
+    logging.info("Getting diff text for pull request %s", pull_request.url)
     diff_text = _get_diff_text(username, password, pull_request)
     composer = DiffscussComposer(diff_text)
     _overlay_encoding(composer)
     _overlay_pr_top_level(composer, gh, pull_request)
     _overlay_pr_comments(composer, pull_request)
     _overlay_commit_comments(composer, pull_request)

     dest_dir = os.path.join(output_dir, user_or_org.login, repo.name)
+    logging.debug("Destination dir is %s", dest_dir)
     _mkdir_p(dest_dir)
     dest_fname = os.path.join(dest_dir, u"%s.diffscuss" % pull_request.number)
+    logging.debug("Destination filename is %s", dest_fname)
     dest_fname_partial = u"%s.partial" % dest_fname
+    logging.debug("Writing partial results to %s", dest_fname_partial)

     with open(dest_fname_partial, 'wb') as dest_fil:
         for line in composer.render():
             dest_fil.write(line.encode('utf-8'))

+    logging.info("Moving final results to %s", dest_fname)
     shutil.move(dest_fname_partial, dest_fname)


 def main(opts, args):
+    log_level = logging.INFO
+    if opts.debug:
+        log_level = logging.DEBUG
+    logging.basicConfig(filename=opts.logfile, level=log_level,
+                        format='[%(levelname)s %(asctime)s] %(message)s')
+
+    logging.info("Starting run.")
+
     password = _password(opts.passfile)
     gh = Github(opts.username, password)

     for user_or_org, repo, pull_request in _pull_requests_from_specs(gh, args):
-        print >> sys.stderr, "Exporting %s/%s/%s" % (user_or_org.login,
-                                                     repo.name,
-                                                     pull_request.number)
+        logging.info("Exporting %s/%s:%s",
+                     user_or_org.login,
+                     repo.name,
+                     pull_request.number)
         _export_to_diffscuss(gh, opts.username, password, user_or_org, repo, pull_request,
                              opts.output_dir)
     return 0


 if __name__ == '__main__':
     parser = OptionParser(usage=dedent("""\
                                        %prog [options] pr_spec_1 [pr_spec_2 ...]

                                        Specify pull requests as either:

                                        * user_or_org/repo_name:pr_id

                                          to export a single pull request, or

                                        * user_or_org/repo_name

                                          to export all pull requests for a repo.

                                        * user_or_org

                                          to export all pull requests for a user or org.

                                        E.g.:

                                        hut8labs/diffscuss/15
                                        tomheon/git_by_a_bus
                                        mpapi
                                        """))
     parser.add_option("-p", "--passfile",
                       help="File containg github password to use for api",
                       dest="passfile")
     parser.add_option("-u", "--username",
                       help="Github user name to use for api",
                       dest="username")
     parser.add_option("-o", "--output",
                       help="Directory in which to put output (defaults to 'output')",
                       dest="output_dir", default="output")
+    parser.add_option("-l", "--logfile",
+                      help="File to use for logging (defaults to gh-export.log)",
+                      dest="logfile", default="gh-export.log")
+    parser.add_option("-d", "--debug",
+                      help="Turn on debug level logging.",
+                      action="store_true", default=False,
+                      dest="debug")

     (opts, args) = parser.parse_args()

     if not opts.username:
         parser.error("Username is required.")

     if not opts.passfile:
         parser.error("Passfile is required.")

     if not args:
         parser.error("At least one pull request is required.")

     sys.exit(main(opts, args))
