#!/usr/bin/env ruby
# -*- mode: nendo; syntax: scheme ; coding: utf-8 -*-
require 'nendo'
$LOAD_PATH.push( File.dirname(__FILE__) + "/../lib" )
core = Nendo::Core.new()
core.setArgv( ARGV )
core.loadInitFile
core.evalStr( <<";;END-OF-SCRIPT" )
;;;
;;; sekka-benchmark - sekka-serverのベンチマークプログラム
;;;  
;;;   Copyright (c) 2010  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: 
;;;
(require "benchmark")
(define (bench-block title block)
  (print  "----------------------------------------")
  (printf "[%s]\n" title )
  (.puts Benchmark::CAPTION)
  (.puts (Benchmark.measure
          (&block ()
            (block)))))


(define (gen-curl-command-string keyword limit)
  (let ((host "localhost"))
    (sprintf "curl --silent --show-error  --max-time 60  --insecure  --header 'Content-Type: application/x-www-form-urlencoded' http://%s:12929/henkan --data 'format=sexp' --data 'yomi=%s' --data 'limit=%d' --data 'method=normal' --data 'userid=%s' > /dev/null" host keyword limit "benchuser")))


(define (henkan-with-same-keyword limit)
  (let1 cmd (gen-curl-command-string "Kanji" limit)
    (bench-block
     (sprintf "Samekey limit=%d  (all request hits memcached)" limit)
     (lambda ()
       (for-each
        (lambda (x)
          (display ".")
          (.system cmd))
        (range 100))
       (newline)))))

(define (henkan-with-uniq-keyword limit)
  (let1 keylist
      '(
        "Aimai" "Ao" "Aoumigame" "Akakeitou"
        "Bangou" "Bankai" "Banninkyoutuu" "Banouyaku"
        "Chance"
        "Dangai"   "Daiichihousoku" "Daigakuin" "Daidokoro"
        "Enjin"    "Eigyoukatudou"  "Eiseikidou" "Ebisu"
        "Fantaji-"
        "Goukaku"  "Gakkou" "Gaikoku" "Gakki" "Gamenkeishiki" "Gamensaizu" "Garapagosu" "Gankyuu"
        "Hinode" "Hi-ro-" "Hiroshima" "Hinjaku" "Hakari" "Ha-monika" "Haru"
        "Iwanami" "Ikimono" "Inarizushi" "Iso" "Ishi" "Ima" "Imi" "Inu"
        "Jinkoumondai" "Jinkoueisei" "Jiken" "Jiko" "Jirou" "Jakouneko"
        "Kousei" "Kaisen" "Kiso" "Kisokenkyuu" "Kisoshikkan" "Kenkyuukikan" "Kenkyuunaiyou"
        "London" "Lonly" "Load" "Love" "Listen" "List"
        "Manyousyuu"
        "Nouzei" "Namae" "Nakanaka" "Nihongohenkan" "Nihongo" "Nishi"
        "Okinawa" "Oudanhodou"
        "Painappuru" "Pa-sonaru"
        "Quizu"
        "Rokuon" "Rasenkaidan" "Risoku" "Risuku"
        "Sougouhyouka" "Sougou" "Son" "Soro"
        "Tuuka" "Tuika" "Taiyou" "Taiou" "Tamatama"
        "Umi" "Ushiro" "Utagoe" "Uso" "Ukai"
        "World" "Watagashi" "Watarigani"
        "Yamagataken" "Yamai" "Yu-suke-su"
        "Zonbi" "Zou" "Zanshin" "Zannen"
        )

    (bench-block
     (sprintf "Uniqkey limit=%d" limit)
     (lambda ()
       (for-each
        (lambda (x)
          (let1 cmd (gen-curl-command-string x limit)
            (display ".")
            (.system cmd)))
        keylist)
       (newline)))))


(define (display-help)
  (print "Usage : ")
  (print "  sekka-benchmark samekey0  .... henkan 100 times with same keyword  [Kanji]        (get N candidate)")
  (print "  sekka-benchmark samekey1  .... henkan 100 times with same keyword  [Kanji]        (get 1 candidate)")
  (print "  sekka-benchmark uniqkey0  .... henkan 100 times with uniq keywords [Aimai Ao ...] (get N candidate)"))

            
(define (main argv)
  (cond
   ((= 0 (length argv))
    (display-help))
   (else
    (let1 command (string->symbol (first argv))
      (cond
       ((eq? 'samekey0 command)
        (henkan-with-same-keyword 0))
       ((eq? 'samekey1 command)
        (henkan-with-same-keyword 1))
       ((eq? 'uniqkey0 command)
        (henkan-with-uniq-keyword 0))
       (else
        (errorf "Error: no such command [%s] \n" command )))))))

(main *argv*)
;;END-OF-SCRIPT
