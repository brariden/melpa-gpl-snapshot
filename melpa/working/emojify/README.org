* Emojify

  [[https://melpa.org/#/emojify][file:https://melpa.org/packages/emojify-badge.svg]] [[http://stable.melpa.org/#/emojify][file:http://stable.melpa.org/packages/emojify-badge.svg]] [[https://travis-ci.org/iqbalansari/emacs-emojify][https://travis-ci.org/iqbalansari/emacs-emojify.svg?branch=master]]

** Table of contents                                              :TOC_3_gh:
 - [[#emojify][Emojify]]
   - [[#what-is-this][What is this?]]
   - [[#what-does-it-look-like][What does it look like?]]
   - [[#requirements][Requirements]]
   - [[#installation][Installation]]
     - [[#elpa][ELPA]]
   - [[#usage][Usage]]
   - [[#customizations][Customizations]]
     - [[#configuring-the-types-of-emojis-displayed][Configuring the types of emojis displayed]]
     - [[#configuring-how-emojis-are-displayed][Configuring how emojis are displayed]]
     - [[#configuring-the-buffers-where-emojify-mode-is-enabled][Configuring the buffers where emojify mode is enabled]]
     - [[#configuring-the-texts-that-are-displayed-as-emojis][Configuring the texts that are displayed as emojis]]
     - [[#controlling-behaviour-when-point-enters-an-emoji][Controlling behaviour when point enters an emoji]]
     - [[#controlling-behaviour-when-mouse-hovers-over-an-emoji][Controlling behaviour when mouse hovers over an emoji]]
   - [[#known-issues][Known issues]]
   - [[#contributing][Contributing]]
   - [[#thanks][Thanks]]
   - [[#credits][Credits]]
   - [[#licence][Licence]]

** What is this?
   Emojify is an Emacs extension to display emojis. It can display github style
   emojis like ~:smile:~ or plain ascii ones like ~:)~.

** What does it look like?
   Here is how the commit log of this project looks with emojify mode enabled

   [[https://raw.githubusercontent.com/iqbalansari/emacs-emojify/master/screenshots/emojify-in-action.png][screenshots/emojify-in-action.png?raw=true]]

   If you prefer a GIF you can view one [[https://raw.githubusercontent.com/iqbalansari/emacs-emojify/master/screenshots/emojify-in-action.gif][here]].

** Requirements
   This package requires Emacs *v24.3* and above. Emacs should be compiled with
   support for *PNG* images to display emojis as images. It is *recommended*
   that Emacs is compiled with *ImageMagick* support. ~emojify~ will use it to
   resize emojis if needed, additionally imagemagick is used to set background
   color for emojis to workaround the bug described in [[https://github.com/iqbalansari/emacs-emojify/issues/7][issue 7]]. However these
   are *completely optional*.

   PNG support might require some additional steps to on Windows, you might find
   [[http://stackoverflow.com/questions/2650041/emacs-under-windows-and-png-files][this]] stackoverflow answer helpful.

** Installation
*** ELPA
    ~emojify~ is available on [[http://melpa.org/#/emojify][MELPA]] and [[http://stable.melpa.org/#/emojify][MELPA Stable]]. Please follow the instructions on MELPA
    [[http://melpa.org/#/getting-started][website]] to enable it, if you haven't already.

    You can then install ~emojify~ from the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Menu.html][package menu]]. Alternatively install it by doing the following

    Refresh the package index
    #+BEGIN_QUOTE
    M-x package-refresh-contents RET
    #+END_QUOTE

    And then install it by doing
    #+BEGIN_QUOTE
    M-x package-install RET emojify
    #+END_QUOTE

** Usage
   ~emojify-mode~ can be enabled/disabled separately for a buffer by using the
   command ~emojify-mode~, to enable/disable it globally use the command
   ~global-emojify-mode~.

   To enable ~emojify-mode~ globally at startup add something like the following
   to your ~init~ file

   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook #'global-emojify-mode)
   #+END_SRC

   In programming modes only emojis in string and comments are displayed.

** Customizations
*** Configuring the types of emojis displayed
    Emojify by default displays plain text emojis (~:)~), unicode emojis (~ðŸ˜„~)
    and github style emojis ~:smile:~. However this is customizable. You can do
    so by changing the value of ~emojify-emoji-styles~ using the customize
    interface. To change the value of the variable from Lisp using the function
    ~emojify-set-emoji-styles~ (or set it before loading ~emojify~), call it with
    one parameter the list of styles that you want to be displayed. The possible
    styles are

    - ascii   - Display only plain ascii emojis
    - unicode - Display only unicode emojis
    - github  - Display only github style emojis

*** Configuring how emojis are displayed
    By default emojis are displayed using images. However you can instruct emojify
    to display it using unicode characters or ascii characters. To do so customize
    the variable ~emojify-display-style~.

    You can set it one of the following values
    - image   - Display emojis using images, obviously this requires the Emacs
                instance to support image
    - unicode - Display emojis using unicode characters, this might be a good
                option on platforms with good emoji fonts
    - ascii   - This is simplest and does not require any external dependencies
                In this case emojify will display ascii equivalents of github
                style emojis.

*** Configuring the buffers where emojify mode is enabled
    You can control the buffers where emojify is enabled using
    ~emojify-inhibit-major-modes~ and ~emojify-inhibit-in-buffer-functions~.

**** Major modes where emojify-mode should be not be enabled
     As the names suggests ~emojify-inhibit-major-modes~ is a list of major-modes
     where ~emojify~ should not be enabled.

**** Inhibiting emojify-mode using custom functions
     ~emojify-inhibit-in-buffer-functions~ is a list of functions that ~emojify~
     calls before enabling ~emojify-mode~ in a buffer. If any of the functions
     return a non-nil value ~emojify-mode~ is not enabled in the buffer. Users
     can add custom functions to this list if they wish to inhibit ~emojify~ in
     certain buffers. The functions are called with one argument the buffer
     where ~emojify-mode~ is about to be enabled.

*** Configuring the texts that are displayed as emojis
    ~emojify~ offers two variables to inhibit the display of certain emojis.

**** Controlling the display of emojis in programming modes
     If enabled in programming modes ~emojify~ by default will display only emojis
     in string and comments. This behaviour can be customized using the variable
     ~emojify-prog-contexts~. The variable can be set to one of the following values

     - comments - Display emojis only in comments
     - string   - Display emojis only in string
     - both     - Display emojis in comments as well as string
     - none     - Do not display emojis in programming modes

**** Inhibiting display of emojis using custom functions
     ~emojify-inhibit-functions~ is a list of function ~emojify~ calls before
     displaying certain text as emoji, if any of the functions return a non-nil
     value the corresponding text is not displayed as emoji. Users can add
     custom functions to this list, if they inhibit display of emojis in under
     certain conditions. The functions are called with three arguments

     - text - The text that is about to be displayed as an emoji
     - beg  - The beginning point of text in the buffer
     - end  - The ending point of text in the buffer

     These functions are called with the buffer where emoji is being displayed
     selected.

*** Controlling behaviour when point enters an emoji
    The behaviour when point enters an emoji can be customized using the
    variable ~emojify-point-entered-behaviour~. It can have one of the following
    values

    - echo    - Display the emojified text in the minibuffer
    - uncover - Temporary undisplay the emoji while point is in the emojified text

    Additionally it can be set to a custom function, the function is called with
    four parameters

    - buffer - The buffer where the emoji is displayed
    - text   - The text that is displayed as emoji
    - beg    - The beginning position of the text displayed as emoji
    - end    - The ending position of the text displayed as emoji

    The return value of the function is ignored.

    *Note:* The custom function will be called for once for each character in an
    emoji as point moves through them. Avoid manipulating the buffer in these
    functions

*** Controlling behaviour when mouse hovers over an emoji
    When mouse hovers over a emoji, the underlying text is displayed in a help
    popup. This behaviour can be disabled by setting ~emojify-show-help~ to nil.

** Known issues
   - Emojis are not properly updated after customizing ~emojify-display-style~ or
     ~emojify-prog-contexts~. This would be fixed in future. For time being you
     will be fine as long as you set these variables before ~emojify~ has
     loaded.
   - There is currently no support for custom emojis/images. I plan to add this in future.

** Contributing
   Code as well as documentation contributions are welcome. Development on
   Emojify happens only on *develop* branch with stable and well-tested changes
   merged from time to time into ~master~ as such make sure you base your
   changes and pull requests on the *develop* branch.

   [[https://github.com/cask/cask][Cask]] is used to manage project dependencies so make sure you have it
   installed. To run the tests you need to install the dependencies by running
   the following

   #+BEGIN_SRC sh
     cask install
   #+END_SRC

   After the installation completes you can run the tests by running the
   following command

   #+BEGIN_SRC sh
     cask exec ert-runner
   #+END_SRC

** Thanks
   Special thanks to @ryanprior for bug reports and valuable feedback on the
   issue tracker.

** Credits
   Emoji set designed and offered free by [[http://emojione.com][Emoji One]].

** Licence
   The emoji images are distributed under [[http://creativecommons.org/licenses/by-sa/4.0/][Creative Commons License]] (CC-BY-SA).
   The source code itself is distributed under [[http://www.gnu.org/licenses/quick-guide-gplv3.html][GNU General Public License v3]]. See [[LICENSE][LICENSE]].
