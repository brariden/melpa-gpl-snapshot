<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Package.LanguageService.9.0</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Package.AuthoringScope">
      <summary>
                    Encapsulates information about the source as obtained from a parsing operation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.#ctor">
      <summary>
                    Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetDataTipText(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>
                    Returns a string to be used for a tool tip based on the specified location.
                </summary>
      <returns>
                    If successful, returns a string containing the text for the tool tip; otherwise, returns a null value.
                </returns>
      <param name="line">
                    [in] The line in the source to look at for a tool tip.
                </param>
      <param name="col">
                    [in] An offset within the <paramref name="line" /> to look at for a tool tip.
                </param>
      <param name="span">
                    A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> that describes the area over which the cursor can hover before the tool tip is dismissed from view.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetDeclarations(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,Microsoft.VisualStudio.Package.ParseReason)">
      <summary>
                    Returns a list of declarations based on the specified reason for parsing.
                </summary>
      <returns>
                    If successful returns a <see cref="T:Microsoft.VisualStudio.Package.Declarations" /> object; otherwise, returns a null value.
                </returns>
      <param name="view">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that can be used to access the source.
                </param>
      <param name="line">
                    [in] The line number where the parse operation started.
                </param>
      <param name="col">
                    [in] The offset into the line where the parse operation started.
                </param>
      <param name="info">
                    [in] A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> structure containing information about the token at the specified position. 
                </param>
      <param name="reason">
                    [in] The <see cref="T:Microsoft.VisualStudio.Package.ParseReason" /> value describing what kind of parse operation was completed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetMethods(System.Int32,System.Int32,System.String)">
      <summary>
                    Returns a list of overloaded method signatures for a specified method name.
                </summary>
      <returns>
                    If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Methods" /> object; otherwise, returns a null value.
                </returns>
      <param name="line">
                    [in] The line number where the parse for method signatures started.
                </param>
      <param name="col">
                    [in] The offset into the line where the parse for method signatures started.
                </param>
      <param name="name">
                    [in] The name of the method for which to get permutations.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.Goto(Microsoft.VisualStudio.VSConstants.VSStd97CmdID,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>
                    Returns a URI (Universal Resource Identifier) based on the current location in the source and the specified command.
                </summary>
      <returns>
                    If successful, returns a string containing the URI; otherwise, returns a null value.
                </returns>
      <param name="cmd">
                    [in] A value from the <see cref="T:Microsoft.VisualStudio.VSConstants.VSStd97CmdID" /> enumeration that determines what kind of destination URI must be returned. This is the command the user entered, typically from a context menu.
                </param>
      <param name="textView">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object containing the text under the cursor.
                </param>
      <param name="line">
                    [in] The line number containing the text under the cursor.
                </param>
      <param name="col">
                    [in] The offset into the line containing the text under the cursor.
                </param>
      <param name="span">
                    [out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object marking the selected text area for which the URI is determined.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AddHiddenRegion(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.MatchMultiple(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32)"></member>
    <member name="T:Microsoft.VisualStudio.Package.ColorableItem">
      <summary>
                    Provides a default implementation of the VSIP interface <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.#ctor(System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.COLORINDEX,Microsoft.VisualStudio.TextManager.Interop.COLORINDEX,System.Drawing.Color,System.Drawing.Color,Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS)">
      <summary>
                    Initializes the <see cref="T:Microsoft.VisualStudio.Package.ColorableItem" /> class and accepts all the information needed to describe a colorable item.
                </summary>
      <param name="name">
                    [in] The name of the colorable item. This can be used in the properties listing if you support customizing your own custom colors.
                </param>
      <param name="displayName">
                    [in] The name of the colorable item that is displayed in the Fonts and Colors list of colors. This is the localized name.
                </param>
      <param name="foreColor">
                    [in] The text's foreground color as specified by a value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /> enumeration.
                </param>
      <param name="backColor">
                    [in] The text's background color as specified by a value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /> enumeration.
                </param>
      <param name="hiForeColor">
                    [in] A <see cref="T:System.Drawing.Color" /> structure describing the foreground color in terms of red, green, blue components. This value can be Empty if high colors are not used. 
                </param>
      <param name="hiBackColor">
                    [in] A <see cref="T:System.Drawing.Color" /> structure describing the background color in terms of red, green, blue components. This value can be Empty if high colors are not used.
                </param>
      <param name="fontFlags">
                    [in] A set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS" /> enumeration describing how the text is to be rendered.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetCanonicalName(System.String@)">
      <summary>
                    Gets the canonical name of a colorable item.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="name">
                    [out] A string containing the canonical name of this colorable item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetColorData(System.Int32,System.UInt32@)">
      <summary>
                    Get the specified high color foreground or background element.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="cdElement">
                    [in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA" /> enumeration specifying which color element to retrieve.
                </param>
      <param name="crColor">
                    [out] Returns a COLORREF object that contains the RGB values for the specified color element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDefaultColors(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[])">
      <summary>
                    Returns the foreground and background color for this colorable item.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="foreColor">
                    [in, out] If not null, this is where the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /> value for the text's foreground color is returned.
                </param>
      <param name="backColor">
                    [in, out] If not null, this is where the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /> value for the text's background color is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDefaultFontFlags(System.UInt32@)">
      <summary>
                    Returns the font attributes for this colorable item.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="fontFlags">
                    [out] The set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS" /> enumeration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDescription(System.String@)">
      <summary>
                    Returns a description for this colorable item.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="desc">
                    [out] A string containing a description.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDisplayName(System.String@)">
      <summary>
                    Returns the name of this colorable item.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="name">
                    [out] The name of the colorable item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetMergingPriority(System.Int32@)">
      <summary>
                    Returns the priority this colorable item has when compared to other colorable items of the same name.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="priority">
                    [out] A priority value, the higher it is, the more preferred this colorable item.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Colorizer">
      <summary>
                    This class implements the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer" /> interface and is used to support syntax highlighting in an editor.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.Package.IScanner)">
      <summary>
                    Initializes the <see cref="T:Microsoft.VisualStudio.Package.Colorizer" /> class.
                </summary>
      <param name="svc">
                    [in] The language service.
                </param>
      <param name="buffer">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object that serves as the buffer for the colorizer.
                </param>
      <param name="scanner">
                    [in] The <see cref="T:Microsoft.VisualStudio.Package.IScanner" /> object that handles all parsing operations associated with syntax highlighting.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.CloseColorizer">
      <summary>
                    Called when the colorizer is disposed of.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.ColorizeLine(System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32[])">
      <summary>
                    Obtains color and font attribute information for each character in the specified line of text.
                </summary>
      <returns>
                    Returns the updated state value.
                </returns>
      <param name="line">
                    [in] The line number from which the line of text came from.
                </param>
      <param name="length">
                    [in] The number of characters in the given text.
                </param>
      <param name="ptr">
                    [in] An unmarshaled pointer to a line of text.
                </param>
      <param name="state">
                    [in] The current state as maintained by the parser.
                </param>
      <param name="attrs">
                    [in, out] An array that is filled in with indices into the <see cref="M:Microsoft.VisualStudio.Package.LanguageService.GetColorableItem(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem@)" /> list as maintained by the <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> class.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.Dispose">
      <summary>
                    Disposes the object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.Finalize">
      <summary>
                    Called when the object is about to be destroyed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetColorInfo(System.String,System.Int32,System.Int32)">
      <summary>
                    Returns the parsing state at the end of the line without returning any colorization information.
                </summary>
      <returns>
                    Returns the parsing state at the end of the line.
                </returns>
      <param name="line">
                    [in] The text of the line.
                </param>
      <param name="length">
                    [in] The length of the line.
                </param>
      <param name="state">
                    [in] The initial parsing state of the line.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetLineInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState)">
      <summary>
                    Returns color information about the specified line.
                </summary>
      <returns>
                    If successful, returns an array of <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> objects describing each token on the line; otherwise, returns a null value.
                </returns>
      <param name="buffer">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object containing the entire source file.
                </param>
      <param name="line">
                    [in] The index of the line for which to get color information.
                </param>
      <param name="colorState">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState" /> object from which cached state information can be obtained for a line.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStartState(System.Int32@)">
      <summary>
                    Returns the initial parsing state.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="start">
                    [out] Returns the initial parsing state.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStateAtEndOfLine(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>
                    Returns the parsing state at the end of the specified line.
                </summary>
      <returns>
                    Returns the parsing state at the end of the line.
                </returns>
      <param name="line">
                    [in] The line number from where the text came from.
                </param>
      <param name="length">
                    [in] The length of the text to examine.
                </param>
      <param name="ptr">
                    [in] An unmarshaled pointer to the text. The example in <see cref="M:Microsoft.VisualStudio.Package.Colorizer.ColorizeLine(System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32[])" /> shows how to marshal this pointer to a string.
                </param>
      <param name="state">
                    [in] The parsing state at the beginning of the line.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStateMaintenanceFlag(System.Int32@)">
      <summary>
                    Called to determine if the colorizer requires per line state management.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="flag">
                    [out] Returns nonzero if the colorizer requires parsing state to be tracked per line; otherwise, returns zero.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.Resume">
      <summary>
                    Called to resume use of the colorizer.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Colorizer.Scanner">
      <summary>
                    Returns the scanner being used.
                </summary>
      <returns>
                    Returns an <see cref="T:Microsoft.VisualStudio.Package.IScanner" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.Suspend">
      <summary>
                    Called to suspend use of the colorizer.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CompletionSet">
      <summary>
                    Represents an IntelliSense completion list that is displayed in the current text view.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.#ctor(System.Windows.Forms.ImageList,Microsoft.VisualStudio.Package.Source)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompletionSet" /> class.
                </summary>
      <param name="imageList">
                    [in] An <see cref="T:System.Windows.Forms.ImageList" /> object containing the images to be used in the completion list display. This cannot be null. It can however, be an empty list..
                </param>
      <param name="source">
                    [in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object representing the source file to be affected by the completion list. This cannot be null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Close">
      <summary>
                    Closes the completion list display.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.CompareItems(System.String,System.String,System.Int32,System.Int32@)">
      <summary>
                    Compares two strings for the specified number of characters.
                </summary>
      <returns>
                    If the method is successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code (in which case the default comparison is used).
                </returns>
      <param name="bstrSoFar">
                    The first string to compare.
                </param>
      <param name="bstrOther">
                    The second string to compare.
                </param>
      <param name="lCharactersToCompare">
                    The number of characters to compare.
                </param>
      <param name="plResult">
                    [out] The result of the comparison.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CompletionSet.Declarations">
      <summary>
                    Gets or sets the <see cref="T:Microsoft.VisualStudio.Package.Declarations" /> object this completion set uses.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.Declarations" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.DecreaseFilterLevel(System.Int32)">
      <summary>
                    Changes the level of the internal filter list and updates it, showing common items.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="iSelectedItem">
                    The index of the item that is currently selected.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Dismiss">
      <summary>
                    Called when the completion list is no longer needed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Dispose">
      <summary>
                    Deallocates any resources just before the <see cref="T:Microsoft.VisualStudio.Package.CompletionSet" /> object is destroyed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetBestMatch(System.String,System.Int32,System.Int32@,System.UInt32@)">
      <summary>
                    Determines which item in the list is the best match for the text typed so far by the user.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="textSoFar">
                    [in] The text that has been typed by the user.
                </param>
      <param name="length">
                    [in] The length of the text typed by the user.
                </param>
      <param name="index">
                    [out] Returns the index of the item in the <see cref="T:Microsoft.VisualStudio.Package.Declarations" /> object that best matches the typed text.
                </param>
      <param name="flags">
                    [out] Returns a set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" /> enumeration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetCompletionItemColor(System.Int32,System.UInt32@,System.UInt32@)">
      <summary>
                    Gets the foreground and background colors for a selected item. 
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK if there are colors set, S_FALSE if the defaults are used" />. If it fails, it returns an error code.
                </returns>
      <param name="iIndex">
                    The index of the item for which to get the colors.
                </param>
      <param name="dwFGColor">
                    [out] Returns the foreground color.
                </param>
      <param name="dwBGColor">
                    [out] Returns the background color.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetCount">
      <summary>
                    Gets the number of items that can be displayed in the completion list.
                </summary>
      <returns>
                    The number of items to be displayed.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetDescriptionText(System.Int32,System.String@)">
      <summary>
                    Gets a description for the specified item in the completion list.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error.
                </returns>
      <param name="index">
                    [in] The index of the item for which to get a description.
                </param>
      <param name="description">
                    [out] Returns the description, or null if there is no description.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetDisplayText(System.Int32,System.String@,System.Int32[])">
      <summary>
                    Gets the text and image index to display in the completion list for the specified item.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="index">
                    [in] The index of the item for which to get the display text and image.
                </param>
      <param name="text">
                    [out] Returns the display text, or null if there is no display text.
                </param>
      <param name="glyph">
                    [in, out] Returns the index of the image to display, or -1 if no image is to be displayed. This parameter can be null, indicating the caller does not want the image index.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetFilterLevel(System.Int32@)">
      <summary>
                    Gets the current filter level.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If there is no filter, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />; otherwise, returns an error code.
                </returns>
      <param name="iFilterLevel">
                    [out] Returns the filter level.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetFlags">
      <summary>
                    Gets a set of flags specifying the behavior of the completion list.
                </summary>
      <returns>
                    A set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" /> enumeration; specifically, from the CSF_* group.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetImageList(System.IntPtr@)">
      <summary>
                    Returns the image list to use for the glyphs in the completion list.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="phImages">
                    [out] Returns the handle to an image list.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetInitialExtent(System.Int32@,System.Int32@,System.Int32@)">
      <summary>
                    Gets the initial extent of the text to be completed.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="line">
                    [out] Returns the line number the text is on.
                </param>
      <param name="startIdx">
                    [out] Returns the character offset of the first character of the text.
                </param>
      <param name="endIdx">
                    [out] Returns the character offset of the last character of the text.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.IncreaseFilterLevel(System.Int32)">
      <summary>
                    Show in the completion list the members of the specified type. 
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="iSelectedItem">
                    The index of the selected item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Init(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Declarations,System.Boolean)">
      <summary>
                    Initializes the completion set object.
                </summary>
      <param name="textView">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that displays the source file.
                </param>
      <param name="declarations">
                    [in] A <see cref="T:Microsoft.VisualStudio.Package.Declarations" /> object that manages the list of declarations to show in the completion list.
                </param>
      <param name="completeWord">
                    [in] true if part of a word is to be completed, otherwise false (the user selected Complete Word from the IntelliSense menu with the caret not positioned immediately after any text. This displays all possible completions).
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CompletionSet.IsCommitted">
      <summary>
                    Gets whether any text has been committed to the source file.
                </summary>
      <returns>true if text has been committed to the source file, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CompletionSet.IsDisplayed">
      <summary>
                    Gets whether the completion list is currently displayed.
                </summary>
      <returns>
                    Set to true if the completion list is displayed, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.OnAutoComplete">
      <summary>
                    Called after completion text has been committed to the source file.
                </summary>
      <returns>
                    A character to be inserted after the committed text, or 0 if no character is to be inserted.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.OnCommit(System.String,System.Int32,System.Int32,System.UInt16,System.String@)">
      <summary>
                    Gets the text to be inserted into the source file if the specified character is a commit character.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If the <paramref name="commitChar" /> parameter is not a commit character, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> (do not commit the text to the source file); otherwise, returns an error code.
                </returns>
      <param name="textSoFar">
                    [in] A string containing the text that has been typed so far by the user.
                </param>
      <param name="index">
                    [in] The index of the item in the completion list that is currently selected.
                </param>
      <param name="selected">
                    [in] Nonzero if an item is selected in the completion list (the index of the selected item is in the <paramref name="index" /> parameter). If this parameter is zero, the <paramref name="index" /> parameter is to be ignored.
                </param>
      <param name="commitChar">
                    [in] The typed character that triggered the completion list.
                </param>
      <param name="completeWord">
                    [out] Returns the string to insert in the source.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.OnCommitComplete">
      <summary>
                    Called after the text has been committed.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CompletionSet.OnCommitText">
      <summary>
                    Gets the text that is to be committed to the source file.
                </summary>
      <returns>
                    The text if there is anything to commit, otherwise null.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Completor">
      <summary>
                    Wraps and applies multiple changes to a text view as a single operation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.Completor" /> class.
                </summary>
      <param name="langsvc">
                    [in] A <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> object.
                </param>
      <param name="view">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> representing the view currently being edited.
                </param>
      <param name="description">
                    [in] A string used to describe the pending edit operation.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.Apply">
      <summary>
                    Applies all changes made through the <see cref="T:Microsoft.VisualStudio.Package.Completor" /> object.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Completor.AtEndOfLine">
      <summary>
                    Determines if the internal caret position is at the end of the current line.
                </summary>
      <returns>
                    If the internal caret position is at the end of the line, returns true; otherwise, returns false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.Dispose">
      <summary>
                    Cleans up any allocations made just before the object is destroyed.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Completor.IsExpansionActive">
      <summary>
                    Determines if a code snippet is being edited.
                </summary>
      <returns>
                    If a code snippet is being edited, returns true; otherwise, returns false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.RefreshLine">
      <summary>
                    Obtains the current line of text from the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeBackspace(System.Int32)">
      <summary>
                    Performs the specified number of backspaces on the line being edited and updates the internal caret position.
                </summary>
      <param name="len">
                    [in] The number of backspaces to perform.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeChar(System.Char)">
      <summary>
                    Inserts the specified character and updates the internal caret position.
                </summary>
      <param name="ch">
                    [in] The character to insert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeChars(System.String)">
      <summary>
                    Inserts the specified string of characters and updates internal caret position.
                </summary>
      <param name="s">
                    [in] A string containing the characters to insert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeDelete(System.Int32)">
      <summary>
                    Performs the specified number of delete operations on the line being edited.
                </summary>
      <param name="len">
                    [in] The number of delete operations to perform.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeLeft(System.Int32)">
      <summary>
                    Moves the internal caret position the specified number of positions to the left.
                </summary>
      <param name="len">
                    [in] The number of positions to move to the left.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeRight(System.Int32)">
      <summary>
                    Moves the internal caret position the specified number of positions to the right.
                </summary>
      <param name="len">
                    [in] The number of positions to move to the right.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CompoundActionBase">
      <summary>
                    Used to create CompoundAction objects.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompoundActionBase" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.Abort">
      <summary>
                    Terminates the current compound action, throwing away all edits.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.CompoundActionBase.action">
      <summary>
                    Interface for a CompoundAction action.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.Close">
      <summary>
                    Close the compound action and commits all edits to the source file.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.Dispose">
      <summary>
                    Deallocates any resources just before the <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" /> object is destroyed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.FlushEditActions">
      <summary>
                    Flushes any pending edit actions from the current compound action.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.CompoundActionBase.opened">
      <summary>
                    Specifies if a compound action has been opened.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CompoundActionFactory">
      <summary>
                    Creates <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" /> objects based on specific source files and views.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionFactory.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompoundActionFactory" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionFactory.GetCompoundAction(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Source,System.String)">
      <summary>
                    Creates a <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" /> object based on a view or specified source.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" /> object.
                </returns>
      <param name="view">
                    A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> representation of the view.
                </param>
      <param name="src">
                    A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object representing a source file.
                </param>
      <param name="description">
                    A string value describing the <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.IsPerfectMatch(System.String,System.Int32)"></member>
    <member name="T:Microsoft.VisualStudio.Package.DocumentProperties">
      <summary>
                    Provides support for document-specific properties associated with a language service.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.#ctor(Microsoft.VisualStudio.Package.CodeWindowManager)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> class.
                </summary>
      <param name="mgr">
                    [in] The <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object that uses this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Close">
      <summary>
                    Closes down the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object so that its properties are no longer visible in the Properties window.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.CountObjects(System.UInt32,System.UInt32@)">
      <summary>
                    Returns the number of objects managed by this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="flags">
                    [in] This is either <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_ALL" /> to count all objects, or <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED" /> to count only the selected objects.
                </param>
      <param name="pc">
                    [out] Returns the number of objects.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Dispose">
      <summary>
                    Cleans up the object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Dispose(System.Boolean)">
      <summary>
                    Cleans up the object and its resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Finalize">
      <summary>
                    Does final cleanup of the object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetCodeWindowManager">
      <summary>
                    Retrieves the code window manager associated with this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object.
                </summary>
      <returns>
                    Returns a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetObjects(System.UInt32,System.UInt32,System.Object[])">
      <summary>
                    Returns a list of objects managed by this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="flags">
                    [in] This is either <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_ALL" /> to get all objects, or <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED" /> to get only the selected objects.
                </param>
      <param name="count">
                    [in] The maximum number of objects to return.
                </param>
      <param name="ppUnk">
                    [in, out] An array that is filled in with the objects to return.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetSource">
      <summary>
                    Returns a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object associated with this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object.
                </summary>
      <returns>
                    Returns a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object that is obtained from the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> class constructor.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Refresh">
      <summary>
                    Updates the Properties window with the latest property values.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.SelectObjects(System.UInt32,System.Object[],System.UInt32)">
      <summary>
                    Called to manage the selection of multiple objects in the Properties window.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="sel">
                    [in] The number of objects in the <paramref name="selobj" /> array.
                </param>
      <param name="selobj">
                    [in] An array of objects returned from the <see cref="M:Microsoft.VisualStudio.Package.DocumentProperties.GetObjects(System.UInt32,System.UInt32,System.Object[])" /> method.
                </param>
      <param name="flags">
                    [in] This is <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.SELOBJS_ACTIVATE_WINDOW" /> to select the objects in the array; otherwise, the objects are de-selected.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentProperties.Visible">
      <summary>
                    Determines if the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object is visible in the Properties window.
                </summary>
      <returns>
                    If the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object is visible, returns true; otherwise, returns false.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DocumentTask">
      <summary>
                    Represents an item for a language service in the Error List Options window.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.#ctor(System.IServiceProvider,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> for the specified text buffer, text span, and file name.
                </summary>
      <param name="site">
                    The <see cref="T:System.IServiceProvider" />.
                </param>
      <param name="buffer">
                    The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> text buffer.
                </param>
      <param name="markerType">
                    The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" /> of the marker.
                </param>
      <param name="span">
                    The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> of the buffer.
                </param>
      <param name="fileName">
                    The name of the file in which the text is found.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.Dispose">
      <summary>
                    Recovers resources just before the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> object is destroyed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.Dispose(System.Boolean)">
      <summary>
                    Recovers resources just before the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> object is destroyed.
                </summary>
      <param name="disposing">true if disposing the object just before destruction; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32)">
      <summary>
                    Executes a command on a specific marker in the text buffer.
                </summary>
      <returns>
                    When this method is implemented in derived classes, if it succeeds, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="marker">
                    The marker on which to execute the command.
                </param>
      <param name="item">
                    The ID of the command to execute. The values should be taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.Finalize">
      <summary>
                    Recovers resources just before the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> object is destroyed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32,System.String[],System.UInt32[])">
      <summary>
                    Queries the marker for the command information.
                </summary>
      <returns>
                    When this method is implemented by derived classes, if it succeeds, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="marker">
                    The marker to query.
                </param>
      <param name="item">
                    The ID of the command to execute. The values should be taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.
                </param>
      <param name="text">
                    The text of the marker command in the context menu.
                </param>
      <param name="commandFlags">
                    [out] the command flags.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.String[])">
      <summary>
                    Gets the tip text for the text marker that is displayed when the mouse hovers over the marker. 
                </summary>
      <returns>
                    The text of this task.
                </returns>
      <param name="marker">
                    The marker for which to get the text.
                </param>
      <param name="tipText">
                    The text to display.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentTask.IsMarkerValid">
      <summary>
                    Gets whether the marker has been set to invalid.
                </summary>
      <returns>
                    Set to true if the marker has not been set to invalid; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.MarkerInvalidated">
      <summary>
                    Called when the text that is associated with a marker is deleted by a user action. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnAfterMarkerChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
      <summary>
                    Signals that the marker position has changed. 
                </summary>
      <returns>
                    When this method is implemented by derived classes, if it succeeds, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="marker">
                    The marker that has changed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnAfterSpanReload">
      <summary>
                    Signals that the text under the marker has been altered but the marker has not been deleted. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnBeforeBufferClose">
      <summary>
                    Sends notification that the text buffer is about to close. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnBufferSave(System.String)">
      <summary>
                    Called when the buffer has been saved.
                </summary>
      <param name="fileName">
                    The name of the file that was saved.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnNavigate(System.EventArgs)">
      <summary>
                    Loads the document that is associated with the error and jumps to the location of the error.
                </summary>
      <param name="e">
                    [in] An <see cref="T:System.EventArgs" /> object (which in this case does not contain any information and is used only as a placeholder in a delegate object).
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnRemoved(System.EventArgs)">
      <summary>
                    Called when this <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> object is removed from the Error List Options window.
                </summary>
      <param name="e">
                    [in] An <see cref="T:System.EventArgs" /> object (which in this case does not contain any information and is used only as a placeholder in a delegate object).
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentTask.Site">
      <summary>
                    Gets the service provider.
                </summary>
      <returns>
                    The <see cref="T:System.IServiceProvider" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> class constructor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentTask.Span">
      <summary>
                    Gets the span where the error occurred.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> class constructor, if it is non-null. Otherwise, the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> class constructor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentTask.TextLineMarker">
      <summary>
                    Returns the text line marker object that describes the location of the error.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> class constructor.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.EditArray">
      <summary>
                    Merges multiple edit operations to create a single operation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.#ctor(Microsoft.VisualStudio.Package.Source,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Boolean,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> class using a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object and an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object.
                </summary>
      <param name="source">
                    [in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object representing the source to be changed.
                </param>
      <param name="view">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that displays the source.
                </param>
      <param name="merge">
                    [in] true if the edits are to be merged where possible, otherwise false.
                </param>
      <param name="description">
                    [in] The description of the edit operations.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.Add(Microsoft.VisualStudio.Package.EditSpan)">
      <summary>
                    Adds the specified <see cref="T:Microsoft.VisualStudio.Package.EditSpan" /> object to the array of edit operations.
                </summary>
      <param name="editSpan">
                    [in] An <see cref="T:Microsoft.VisualStudio.Package.EditSpan" /> object describing an edit operation.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.ApplyEdits">
      <summary>
                    Applies all edit operations that have been accumulated.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditArray.Count">
      <summary>
                    Gets the number of edit operations represented in the <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object.
                </summary>
      <returns>
                    The number of edit operations that can be applied.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.Dispose">
      <summary>
                    Disposes the <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object and its resources.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.Finalize">
      <summary>
                    Tears down the <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.GetEnumerator">
      <summary>
                    Gets a default enumerator for the edit operations.
                </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditArray.Source">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object associated with this <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditArray.TextView">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object associated with this <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.ToString">
      <summary>
                    Converts the array of edit operations to a formatted string.
                </summary>
      <returns>
                    The formatted string to which the edit operations have been converted.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ExpansionProvider">
      <summary>
                    Provides support for inserting code snippets into source code.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.#ctor(Microsoft.VisualStudio.Package.Source)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class.
                </summary>
      <param name="src">
                    [in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object describing the source that this expansion provider supports.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.BeginTemplateEditing(System.Int32,System.Int32)">
      <summary>
                    Inserts the previously prepared code snippet and starts the snippet editing mode.
                </summary>
      <param name="line">
                    [in] The line number where the insertion is to take place.
                </param>
      <param name="col">
                    [in] The character offset on the line where the insertion is to take place.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.DisplayExpansionBrowser(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String[],System.Boolean,System.String[],System.Boolean)">
      <summary>
                    Displays a list of expansion templates of the specified type and kind.
                </summary>
      <returns>
                    If successful, returns true; otherwise, returns false, the browser box was not displayed.
                </returns>
      <param name="view">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that represents the view the source file is in and the view that is the parent of the browser box.
                </param>
      <param name="prompt">
                    [in] A string containing the prompt in the browser box.
                </param>
      <param name="types">
                    [in] An array of strings containing the types of expansions to show. If this array is empty or a null value, then all types are shown in the browser box.
                </param>
      <param name="includeNullType">
                    [in] This is true to allow "empty" types through the filter even if the <paramref name="types" /> array is specified.
                </param>
      <param name="kinds">
                    [in] An array of strings containing the kinds of expansions to show. If this array is empty or a null value, then all kinds are shown in the browser box.
                </param>
      <param name="includeNullKind">
                    [in] This is true to allow "empty" kinds through the filter even if the <paramref name="kinds" /> array is specified.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.Dispose">
      <summary>
                    Cleans up allocated resource just before the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> object is destroyed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.EndExpansion">
      <summary>
                    Called when an expansion session has ended.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.EndTemplateEditing(System.Boolean)">
      <summary>
                    Ends the current snippet editing mode.
                </summary>
      <param name="leaveCaret">
                    [in] This is true if the caret is to be left where it was before the snippet was inserted; otherwise, this is false if the caret is positioned where the snippet indicates.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.Expansion">
      <summary>
                    Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion" /> object used for inserting snippets into a buffer.
                </summary>
      <returns>
                    Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion" /> object that was obtained from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object in the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class constructor (<see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.#ctor(Microsoft.VisualStudio.Package.Source)" />).
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.ExpansionSession">
      <summary>
                    Returns the expansion session created to manage editing the code snippet.
                </summary>
      <returns>
                    Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession" /> object that was passed to the <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnBeforeInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)" /> method.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.Finalize">
      <summary>
                    Cleans up all resources just before the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> object is destroyed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.FindExpansionByShortcut(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean,System.String@,System.String@)">
      <summary>
                    Obtains the path and title of a code snippet given the snippet's shortcut name.
                </summary>
      <returns>
                    If an expansion template was found, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns  an error code from the <see cref="T:Microsoft.VisualStudio.VSConstants" /> enumeration.
                </returns>
      <param name="view">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view in which the snippet is to be inserted.
                </param>
      <param name="shortcut">
                    [in] A string containing the shortcut name of the snippet.
                </param>
      <param name="span">
                    [in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the position or selection in the current source.
                </param>
      <param name="showDisambiguationUI">
                    [in] This is true if a user interface can be shown to resolve duplicate names; otherwise, false means to select the first expansion found that matches the shortcut name. 
                </param>
      <param name="title">
                    [out] Returns the title of the snippet found.
                </param>
      <param name="path">
                    [out] Returns the path to the snippet template file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.FormatSpan(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>
                    Formats the specified text span.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" /> if the method succeeded, otherwise <see cref="F:Microsoft.VisualStudio.NativeMethods.E_NOTIMPL" />.
                </returns>
      <param name="buffer">
                    The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.
                </param>
      <param name="ts">
                    An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> objects.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionFunction(MSXML.IXMLDOMNode,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction@)">
      <summary>
                    Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction" /> object representing the expansion function described in the given XML template node (COM implementation).
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="xmlFunctionNode">
                    [in] A IXMLDOMNode object representing the expansion function description.
                </param>
      <param name="fieldName">
                    [in] The name of the variable or field this expansion function represents.
                </param>
      <param name="func">
                    [out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction" /> object representing the implementation of the expansion function.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionFunction(System.Xml.XmlElement,System.String)">
      <summary>
                    Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction" /> object representing the expansion function described in the given XML template node. 
                </summary>
      <returns>
                    If successful, returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction" /> object; otherwise, returns a null value indicating no expansion function was found in the specified XML node.
                </returns>
      <param name="xmlFunctionNode">
                    [in] An <see cref="T:System.Xml.XmlElement" /> object representing the expansion function definition.
                </param>
      <param name="fieldName">
                    [in] The name of the variable or field this expansion function represents.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionSpan">
      <summary>
                    Returns the span occupied by the snippet currently being edited.
                </summary>
      <returns>
                    Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object representing the snippet's span in the source file.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetFieldSpan(System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>
                    Gets the field span of the specified field 
                </summary>
      <returns>true if <see cref="P:Microsoft.VisualStudio.Package.ExpansionProvider.ExpansionSession" /> is not null, otherwise false.
                </returns>
      <param name="field">
                    The field for which to get the text span.
                </param>
      <param name="pts">
                    [out] Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />, which may be empty if there is no <see cref="P:Microsoft.VisualStudio.Package.ExpansionProvider.ExpansionSession" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetFieldValue(System.String,System.String@)">
      <summary>
                    Returns the value of the specified field.
                </summary>
      <returns>
                    If there is an expansion session in progress and the specified field exists and contains a value, returns true; otherwise, returns false.
                </returns>
      <param name="field">
                    [in] A string containing the name of the field for which to get a value.
                </param>
      <param name="value">
                    [out] A string containing the value of the field.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandlePostExec(System.Guid@,System.UInt32,System.UInt32,System.Boolean,System.IntPtr,System.IntPtr)">
      <summary>
                    Called after a command has been executed.
                </summary>
      <returns>
                    If the command was handled, returns true; otherwise, returns false to let the caller handle the command.
                </returns>
      <param name="guidCmdGroup">
                    [in] The GUID of the command group.
                </param>
      <param name="nCmdId">
                    [in] The specific ID of the command from the command group. This identifies the command to execute.
                </param>
      <param name="nCmdexecopt">
                    [in] Additional parameters for the command (packed into a 32-bit value).
                </param>
      <param name="commit">
                    [in] This is true if the code snippet has been committed to the source file.
                </param>
      <param name="pvaIn">
                    [in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> holding any parameters required by the command. This can be a null value indicating there are no additional parameters.
                </param>
      <param name="pvaOut">
                    [in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> to hold the result of the command, if any.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandlePreExec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    Called before a command is executed.
                </summary>
      <returns>
                    If the command was handled, returns true; otherwise, returns false to let the caller handle the command.
                </returns>
      <param name="guidCmdGroup">
                    [in] The GUID of the command group.
                </param>
      <param name="nCmdId">
                    [in] The specific ID of the command from the command group. This identifies the command to execute.
                </param>
      <param name="nCmdexecopt">
                    [in] Additional parameters for the command (packed into a 32-bit value).
                </param>
      <param name="pvaIn">
                    [in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> holding any parameters required by the command. This can be a null value indicating there are no additional parameters.
                </param>
      <param name="pvaOut">
                    [in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> to hold the result of the command, if any.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandleQueryStatus(System.Guid@,System.UInt32,System.Int32@)">
      <summary>
                    Determines if the specified command is handled by the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class.
                </summary>
      <returns>
                    If the command is supported by the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class, returns true; otherwise, returns false.
                </returns>
      <param name="guidCmdGroup">
                    [in] The GUID of the command group.
                </param>
      <param name="nCmdId">
                    [in] The specific ID of the command from the command group. This identifies the command to execute.
                </param>
      <param name="hr">
                    [out] Returns a combination of values from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD" /> enumeration indicating support for the specified command.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertNamedExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean)">
      <summary>
                    Inserts the specified snippet into the source at the given position.
                </summary>
      <returns>
                    If a snippet was inserted, returns true; otherwise, returns false.
                </returns>
      <param name="view">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view showing the source.
                </param>
      <param name="title">
                    [in] A string containing the name or title of the snippet.
                </param>
      <param name="path">
                    [in] A string containing the path to the snippet template file.
                </param>
      <param name="pos">
                    [in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying the position where the snippet is to be inserted.
                </param>
      <param name="showDisambiguationUI">
                    [in] This is true if there is more than one snippet with the given title and a dialog box must be shown so the user can select which snippet to insert; otherwise, this is false (accept the first snippet with the given title).
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertSpecificExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Xml.XmlElement,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
      <summary>
                    Inserts the specific snippet into the source at the specified position.
                </summary>
      <returns>
                    If the snippet was inserted, returns true; otherwise, returns false.
                </returns>
      <param name="view">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view showing the source.
                </param>
      <param name="snippet">
                    [in] An <see cref="T:System.Xml.XmlElement" /> object containing the snippet to insert.
                </param>
      <param name="pos">
                    [in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying the position where the snippet is to be inserted.
                </param>
      <param name="relativePath">
                    [in] A relative path to the snippet template file from which this snippet was taken.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.InTemplateEditingMode">
      <summary>
                    Indicates whether the code snippet is currently being edited.
                </summary>
      <returns>
                    Returns true if the code snippet is currently being edited; otherwise, returns false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.IsValidKind(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String,System.Int32@)">
      <summary>
                    Determines whether this is valid text for expansion. This method should be overridden if you want to specify where in the source document the expansion can take place.
                </summary>
      <returns>
                    When overridden in derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="buffer">
                    The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.
                </param>
      <param name="ts">
                    An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> objects.
                </param>
      <param name="bstrKind">
                    The kind of expansion to perform.
                </param>
      <param name="fIsValid">
                    [out] Returns true if it is a valid expansion kind, otherwise false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.IsValidType(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String[],System.Int32,System.Int32@)">
      <summary>
                    Determines whether or not a given type is valid for expansion purposes. This method should be overridden if you want to specify where in the source document the expansion can take place.
                </summary>
      <returns>
                    When overridden in derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="buffer">
                    The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.
                </param>
      <param name="ts">
                    An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> objects.
                </param>
      <param name="rgTypes">
                    An array of expansion types.
                </param>
      <param name="iCountTypes">
                    The number of expansion types in the <paramref name="rgTypes" /> array.
                </param>
      <param name="fIsValid">
                    [out] Returns true if the type is valid, otherwise false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnAfterInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
      <summary>
                    Called after a snippet has been inserted into the source.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="session">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession" /> object representing the expansion session that is currently active.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnBeforeInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
      <summary>
                    Called just before the snippet has been inserted into the source.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="session">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession" /> object representing the expansion session that is currently active.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnItemChosen(System.String,System.String)">
      <summary>
                    Called when an item is chosen in a snippet browser.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="pszTitle">
                    [in] A string containing the name of the snippet that was selected.
                </param>
      <param name="pszPath">
                    [in] A string containing the path to the snippet template file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.PositionCaretForEditing(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>
                    Puts the caret in a position suitable for editing. 
                </summary>
      <returns>
                    When overridden in derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="pBuffer">
                    The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.
                </param>
      <param name="ts">
                    An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> objects.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.PrepareTemplate(System.String,System.String)">
      <summary>
                    Prepares for insertion of the specified snippet.
                </summary>
      <param name="title">
                    [in] A string containing the name of the snippet to insert.
                </param>
      <param name="path">
                    [in] A string containing the path to the snippet template file.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.Source">
      <summary>
                    Returns the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object associated with this expansion provider.
                </summary>
      <returns>
                    Returns the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class constructor (<see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.#ctor(Microsoft.VisualStudio.Package.Source)" />).
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.TextView">
      <summary>
                    Returns the text view containing the source file being manipulated by the expansion provider.
                </summary>
      <returns>
                    Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that was passed to the <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.DisplayExpansionBrowser(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String[],System.Boolean,System.String[],System.Boolean)" />, <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertSpecificExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Xml.XmlElement,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)" />, <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertNamedExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean)" />, and <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.FindExpansionByShortcut(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean,System.String@,System.String@)" /> methods.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.FilePathUtilities">
      <summary>
                    Static utilities for getting and setting file paths.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.FilePathUtilities" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.GetFileExtension(System.String)">
      <summary>
                    Gets the file extension from a given file path.
                </summary>
      <returns>
                    The extension (lower case, preceded by ".").
                </returns>
      <param name="moniker">
                    The file path.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.GetFilePath(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>
                    Gets the file path from an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.
                </summary>
      <returns>
                    The file path.
                </returns>
      <param name="textLines">
                    The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.GetFilePath(System.IntPtr)">
      <summary>
                    Get file path for an object that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" />.
                </summary>
      <returns>
                    The file path.
                </returns>
      <param name="unknown">
                    A pointer to the IUnknown interface of the file path.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IndentingStyle">
      <summary>
                    Represents the different indenting styles supported by language services.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.IndentingStyle.None">
      <summary>
                    Pressing Enter inserts a new line and causes the caret to always move to the beginning of the new line.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.IndentingStyle.Block">
      <summary>
                    Pressing Enter inserts a new line and causes the caret to move to the same position as the first non-whitespace character on the previous line.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.IndentingStyle.Smart">
      <summary>
                    Pressing Enter inserts a new line and causes the caret to either move to the same position as the first non-whitespace character on the previous line or to indent or outdent automatically depending on the character at the end of the previous line. For example, in C#, pressing Enter after a "{" causes a new line to be inserted and cursor to be indented properly. In addition, the "{" may be moved to its own line. If Enter is pressed after a "}", however, a new line is entered and the caret is moved out one level of indentation.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.LanguagePreferences">
      <summary>
                    Provides support for language service-specific preferences.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences" /> class (default initialization only).
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.#ctor(System.IServiceProvider,System.Guid,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences" /> class (this is the preferred method).
                </summary>
      <param name="site">
                    [in] An <see cref="T:System.IServiceProvider" /> object supplying the service provider. This value cannot be null.
                </param>
      <param name="langSvc">
                    [in] The GUID of the language service these preferences are associated with.
                </param>
      <param name="name">
                    [in] The name of the language service.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Apply">
      <summary>
                    Applies all changes made to the preferences.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.AutoListMembers">
      <summary>
                    Gets or sets whether members are automatically listed as part of IntelliSense support.
                </summary>
      <returns>true if a members list should be shown for auto-completion, otherwise false = the list is not to be shown).
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.AutoOutlining">
      <summary>
                    Gets or sets whether or not auto-outlining is supported outlining (this requires parser support for hidden regions).
                </summary>
      <returns>true if auto-outlining is supported, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.CodeSenseDelay">
      <summary>
                    Gets or sets the number of milliseconds the user must hold the cursor over an identifier before initiating any IntelliSense operation.
                </summary>
      <returns>
                    The number of milliseconds of delay.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.CutCopyBlankLines">
      <summary>
                    Gets or sets whether to include spaces on blank lines when cutting and copying.
                </summary>
      <returns>true if blanks are to be preserved while cutting and copying, otherwise false, i.e., all spaces on a blank line are lost when cutting or copying.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Dispose">
      <summary>
                    Cleans up any allocated resources before the object is destroyed.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableAsyncCompletion">
      <summary>
                    Gets or sets if background parsing is supported.
                </summary>
      <returns>true if background parsing is supported, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableCodeSense">
      <summary>
                    Gets or sets whether or not IntelliSense is supported.
                </summary>
      <returns>true if at least one IntelliSense operation is supported, otherwise false = no IntelliSense operation is supported.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableCommenting">
      <summary>
                    Gets or sets whether or not blocks of code can be commented and uncommented.
                </summary>
      <returns>true if blocks of code can be commented and uncommented with a single operation, otherwise false = commenting blocks in a single operation is not supported.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableFormatSelection">
      <summary>
                    Gets or sets whether or not code can be formatted.
                </summary>
      <returns>true if the code can be formatted, otherwise false = no automatic formatting.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableLeftClickForURLs">
      <summary>
                    Gets or sets whether or not URLs in the code can be navigated to by a simple click.
                </summary>
      <returns>true if URLs can be navigated with a single click, otherwise false = either URLs cannot be clicked on or the control key must be held down while clicking.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableMatchBraces">
      <summary>
                    Gets or sets whether or not matching braces are supported.
                </summary>
      <returns>true if matching braces are supported, otherwise false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableMatchBracesAtCaret">
      <summary>
                    Gets or sets whether or not matching braces can be shown while typing a matching brace.
                </summary>
      <returns>true if matching braces can be shown, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableQuickInfo">
      <summary>
                    Gets or sets whether or not the IntelliSense Quick Info operation is supported.
                </summary>
      <returns>true if Quick Info is supported, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableShowMatchingBrace">
      <summary>
                    Gets or sets whether or not the text included in the span of the matching pair is shown in the status bar.
                </summary>
      <returns>true if the text included in the matching pair span can be shown, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetBooleanValue(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
      <summary>
                    Obtains a boolean value from the specified registry entry.
                </summary>
      <returns>rue if the registry entry exists and contains a non-zero value or the word "True" (case-insensitive comparison), false if the registry entry exists and contains a zero value or the word "False" (case-insensitive comparison). Otherwise, returns the default value specified in <paramref name="def" />. Note: if the registry entry is a string, then any string other than "True" or "False" throws a <see cref="T:System.FormatException" />.
                </returns>
      <param name="key">
                    [in] The <see cref="T:Microsoft.Win32.RegistryKey" /> object representing the desired registry subkey.
                </param>
      <param name="name">
                    [in] The name of the registry entry for which to get the value.
                </param>
      <param name="def">
                    [in] The default value to use if the registry entry is not found.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetIntegerValue(Microsoft.Win32.RegistryKey,System.String,System.Int32)">
      <summary>
                    Gets an integer value from the specified registry entry.
                </summary>
      <returns>
                    The integer value stored in the registry entry if the registry entry exists, otherwise <paramref name="def" /> if the registry entry does not exist. If the registry entry is a string, then the string is evaluated as a number.
                </returns>
      <param name="key">
                    [in] The <see cref="T:Microsoft.Win32.RegistryKey" /> object representing the desired registry subkey.
                </param>
      <param name="name">
                    [in] The name of the registry entry for which to get the value.
                </param>
      <param name="def">
                    [in] The default value to use if the registry entry is not found.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetLanguagePreferences">
      <summary>
                    Gets the modifiable user language settings from Visual Studio.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetSite">
      <summary>
                    Gets the service provider.
                </summary>
      <returns>
                    The <see cref="T:System.IServiceProvider" /> object that was passed to the constructor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.HideAdvancedMembers">
      <summary>
                    Gets or sets whether or not advanced members are hidden in the IntelliSense members list.
                </summary>
      <returns>true if advanced members are hidden, otherwise false = show all members.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.HighlightMatchingBraceFlags">
      <summary>
                    Gets or sets the flags for highlighting matching braces.
                </summary>
      <returns>
                    One of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._HighlightMatchingBraceFlags" /> values.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.IndentSize">
      <summary>
                    Gets or sets the number of spaces to indent when formatting source.
                </summary>
      <returns>
                    The number of spaces to use for tab positions while formatting.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.IndentStyle">
      <summary>
                    Gets or sets the style used for formatting sections of text.
                </summary>
      <returns>
                    A value from the <see cref="T:Microsoft.VisualStudio.Package.IndentingStyle" /> enumeration.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Init">
      <summary>
                    Initializes <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.InitMachinePreferences(Microsoft.Win32.RegistryKey,System.String)">
      <summary>
                    Gets language service-specific settings from the registry.
                </summary>
      <param name="key">
                    [in] The <see cref="T:Microsoft.Win32.RegistryKey" /> object representing the desired base registry subkey.
                </param>
      <param name="name">
                    [in] The name of the registry subkey containing the desired registry entries.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.InitUserPreferences(Microsoft.Win32.RegistryKey,System.String)">
      <summary>
                    Gets user-modifiable settings.
                </summary>
      <param name="key">
                    [in] A <see cref="T:Microsoft.Win32.RegistryKey" /> object representing the desired base registry subkey.
                </param>
      <param name="name">
                    [in] The name of the registry subkey containing the user settings.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.InsertTabs">
      <summary>
                    Gets or sets whether or not to insert tabs instead of spaces when formatting sections of text.
                </summary>
      <returns>true if tabs should be inserted, otherwise false = spaces should be inserted.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.LanguageName">
      <summary>
                    Gets or sets the name the language service is registered under.
                </summary>
      <returns>
                    The name of the language or null if the name was not set.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.LineNumbers">
      <summary>
                    Gets or sets whether or not line numbers are to be shown.
                </summary>
      <returns>true if line numbers are to be shown, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.MaxErrorMessages">
      <summary>
                    Gets or sets the maximum number of error messages that can be shown at any one time.
                </summary>
      <returns>
                    The maximum number of error messages that can be shown.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.MaxRegionTime">
      <summary>
                    Gets or sets the maximum region time.
                </summary>
      <returns>
                    The maximum region time.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnRegisterMarkerType(System.Int32)">
      <summary>
                    Called when a new marker type is registered with Visual Studio.
                </summary>
      <param name="iMarkerType">
                    [in] The ID of the marker type.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnRegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>
                    Called when a view is registered.
                </summary>
      <param name="view">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface representing the view that has been registered.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnReplaceAllInFilesBegin">
      <summary>
                    Called when the Replace All in Files operation has begun.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnReplaceAllInFilesEnd">
      <summary>
                    Called when the Replace All In Files operation has ended.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnUnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>
                    Called when a view is closed.
                </summary>
      <param name="view">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface representing the view that has been closed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnUserPreferencesChanged2(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2[])">
      <summary>
                    Called when a user preference has been changed.
                </summary>
      <param name="viewPrefs">
                    [in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2" /> structure describing user view preferences.
                </param>
      <param name="framePrefs">
                    [in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2" /> structure describing user frame-oriented preferences.
                </param>
      <param name="langPrefs">
                    [in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2" /> structure describing user language service-specific preferences.
                </param>
      <param name="fontColorPrefs">
                    [in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2" /> structure describing user font and color preferences.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.ParameterInformation">
      <summary>
                    Gets or sets whether or not the IntelliSense method tip operation is supported.
                </summary>
      <returns>true if the method tip operation is supported, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.ShowNavigationBar">
      <summary>
                    Gets or sets whether or not drop-down bars are to be shown.
                </summary>
      <returns>true if drop-down bars can be shown, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.Site">
      <summary>
                    Gets or sets the service provider.
                </summary>
      <returns>
                    An <see cref="T:System.IServiceProvider" /> object or null if the service provider was not set.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.TabSize">
      <summary>
                    Gets or sets the number of spaces a single tab covers.
                </summary>
      <returns>
                    The number of spaces in a tab character.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.VirtualSpace">
      <summary>
                    Gets or sets whether or not the editor should assume spaces at the end of all lines.
                </summary>
      <returns>true if each line is considered to have virtual spaces at the end, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.WordWrap">
      <summary>
                    Gets or sets whether or not word wrapping is enabled.
                </summary>
      <returns>true if word wrapping is enabled, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.WordWrapGlyphs">
      <summary>
                    Gets or sets whether or not a glyph should be shown for a line that is word-wrapped.
                </summary>
      <returns>true if the glyph should be shown, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CanStopThread(Microsoft.VisualStudio.Package.Source)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.DispatchCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetOrCreateSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetPrimaryViewForSource(Microsoft.VisualStudio.Package.Source)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnParseAborted"></member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.ParseThreadIsAlive"></member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.ParseThreadPaused"></member>
    <member name="T:Microsoft.VisualStudio.Package.ParseReason">
      <summary>
                    Provides reasons for a parsing operation in a language service.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.None">
      <summary>
                    A placeholder value indicating that no parsing should be done.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.MemberSelect">
      <summary>
                    Parse the separator character before the current location to obtain a list of members for the class.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.HighlightBraces">
      <summary>
                    Parse to find the matching language pairs (such as "{" and "}" or "&lt;" and "&gt;") that enclose the given location so they and their contents can be highlighted.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.MemberSelectAndHighlightBraces">
      <summary>
                    Parse the character at the current location to complete a member selection and to highlight the matching pair to the parsed character (such as a ")" after a method name).
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.MatchBraces">
      <summary>
                    Parse the language pair at the given location to finds its match.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.Check">
      <summary>
                    Parse the entire source file, checking for errors. This pass should also create lists of matching language pairs, triplets, members, and methods.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.CompleteWord">
      <summary>
                    Parse to get the partially completed word before the current position in order to show a list of possible completions (members, arguments, methods).
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.DisplayMemberList">
      <summary>
                    Parse the separator and the possible name before it, to obtain a list of members to be shown in a member completion list.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.QuickInfo">
      <summary>
                    Parse the identifier or selection at the given location to obtain type information to be shown in an IntelliSense quick info tool tip.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.MethodTip">
      <summary>
                    Parse the method name before the current position to produce a list of all overloaded method signatures that match the method name.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.Autos">
      <summary>
                    Parse the code block at the given location to obtain any expressions that might be of interest in the Autos debugging window (an expression is the name of variable or parameter that can be evaluated to produce a value).
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.CodeSpan">
      <summary>
                    Parse the section of code containing the specified location to find the extent of the statement. Used in validating breakpoints.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.Goto">
      <summary>
                    Parse the identifier or expression at the specified location to obtain a possible URI of a file where the identifier is defined, declared, or referenced.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ParseRequest">
      <summary>
                    Provides information to execute a parsing operation in a language service.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ParseRequest.#ctor(System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class in order to terminate the thread used for background parsing operations.
                </summary>
      <param name="terminate">
                    [in] Set to true if the parsing operation is to be terminated. For this constructor, this argument is must always true.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ParseRequest.#ctor(System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,System.String,System.String,Microsoft.VisualStudio.Package.ParseReason,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.AuthoringSink,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class.
                </summary>
      <param name="line">
                    The line on which to start the parsing operation.
                </param>
      <param name="col">
                    The character offset on the first line to begin the parsing operation.
                </param>
      <param name="info">
                    The object that is to be filled with the results of the parsing operation.
                </param>
      <param name="src">
                    The text to be parsed.
                </param>
      <param name="fname">
                    The name of the source file to be parsed.
                </param>
      <param name="reason">
                    The reason the parsing operation was started.
                </param>
      <param name="view">
                    The view that contains the source file that is being parsed.
                </param>
      <param name="sink">
                    The object used to contain information from the parsing operation.
                </param>
      <param name="synchronous">true if the request is synchronous, false if it is asynchronous.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Callback">
      <summary>
                    Specifies the callback delegate to be called when the parsing operation has completed.
                </summary>
      <returns>
                    Returns a <see cref="T:Microsoft.VisualStudio.Package.ParseResultHandler" /> delegate.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Col">
      <summary>
                    Specifies the character offset on the first line to begin the parsing operation.
                </summary>
      <returns>
                    Returns a number specifying the character offset that was passed as an argument to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.DirtySpan">
      <summary>
                    Specifies a span of source that has changed.
                </summary>
      <returns>
                    Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying a span of source.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.FileName">
      <summary>
                    Specifies the name of the source file being parsed.
                </summary>
      <returns>
                    Returns the string containing the file name that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.IsSynchronous">
      <summary>
                    Gets or sets whether or not the request is synchronous.
                </summary>
      <returns>true if the request is synchronous; false if it is asynchronous.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Line">
      <summary>
                    Specifies the line on which to start the parsing operation.
                </summary>
      <returns>
                    Returns a number specifying the line number that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Reason">
      <summary>
                    Specifies the reason the parsing operation was started.
                </summary>
      <returns>
                    Returns the <see cref="T:Microsoft.VisualStudio.Package.ParseReason" /> value passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Scope">
      <summary>
                    Specifies the <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope" /> object that is used to return extended information from the parsing operation.
                </summary>
      <returns>
                    Returns an <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Sink">
      <summary>
                    Specifies an <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink" /> object used to contain information from the parsing operation.
                </summary>
      <returns>
                    Returns an <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink" /> object that was created in the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Terminate">
      <summary>
                    Specifies whether the worker thread handling background parsing operations should exit.
                </summary>
      <returns>
                    Returns true if the worker thread should exit.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Text">
      <summary>
                    Specifies the source text to be parsed.
                </summary>
      <returns>
                    Returns a string containing the source to be parsed as passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Timestamp">
      <summary>
                    Specifies a time stamp for the parse request.
                </summary>
      <returns>
                    Returns a number that represents a point in time.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.TokenInfo">
      <summary>
                    Specifies a <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> structure that is filled in with the results of the parsing operation.
                </summary>
      <returns>
                    Returns the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.View">
      <summary>
                    Specifies the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that contains the source that is being parsed.
                </summary>
      <returns>
                    Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Severity">
      <summary>
                    Specifies the severity of a parser error in a language service.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Severity.Hint">
      <summary>
                    Indicates a comment returned by the parser.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Severity.Warning">
      <summary>
                    Indicates a warning returned by the parser. 
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Severity.Error">
      <summary>
                    Indicates an error in parsing, however, parsing may have been able to continue.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Severity.Fatal">
      <summary>
                    Indicates a fatal error in parsing that prevented any further parsing.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.SimpleEditorView">
      <summary>
                    The abstract class that represents a generalized simple editor view.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.#ctor(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.SimpleEditorView" /> for the supplied text buffer.
                </summary>
      <param name="buffer">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTextLines" /> buffer.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.Buffer">
      <summary>
                    Gets or sets the text buffer.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTextLines" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.ClosePane">
      <summary>
                    Closes the window and unregisters the component.
                </summary>
      <returns>true if successful, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.CommitPendingEdit(System.Int32@)">
      <summary>
                    Commits any changes made to the file.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="fCommitFailed">
                    [out] Returns true if the changes could not be committed.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.ComponentId">
      <summary>
                    Gets or sets the component ID of the editor view.
                </summary>
      <returns>
                    The component ID of the editor view.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.ComponentManager">
      <summary>
                    Gets or sets the component manager for this view.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.CreatePaneWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
      <summary>
                    Creates the window.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="hwndParent">
                    A pointer to the parent window.
                </param>
      <param name="x">
                    The absolute x ordinate.
                </param>
      <param name="y">
                    The absolute y ordinate.
                </param>
      <param name="cx">
                    The width of the window.
                </param>
      <param name="cy">
                    The height of the window.
                </param>
      <param name="hwnd">
                     [out] A pointer to the new window pane.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    Executes the specified command.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the command is supported and it succeeded; <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" /> if the command is not supported; or an error code if the command failed.
                </returns>
      <param name="guidCmdGroup">
                    The GUID of the command group. 
                </param>
      <param name="id">
                    The ID of the command.
                </param>
      <param name="options">
                    An <see cref="T:Microsoft.VisualStudio.OLE.Interop. OLECMDEXECOPT" /> enumeration giving command options.
                </param>
      <param name="pvaIn">
                    Pointer to a VARIANTARG structure containing input arguments. Can be null.
                </param>
      <param name="pvaOut">
                    Pointer to a VARIANTARG structure containing command output. Can be null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>
                    Called during each iteration of the message loop. 
                </summary>
      <returns>true if the message loop should continue, false otherwise.
                </returns>
      <param name="uReason">
                    An enumeration of type <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLELOOP" />.
                </param>
      <param name="pvLoopData">
                    A pointer to private data.
                </param>
      <param name="pMsgPeeked">
                    An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> structures. May be null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FDoIdle(System.UInt32)">
      <summary>
                    Called to do idle time tasks.  
                </summary>
      <returns>true if more time is needed to perform the idle time tasks, false otherwise.
                </returns>
      <param name="grfidlef">
                    Flags from the <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLEIDLEF" /> enumeration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>
                    Called to process or modify the message before it is translated and dispatched.
                </summary>
      <returns>true if the message is consumed, false otherwise.
                </returns>
      <param name="msg">
                     An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> structures.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FQueryTerminate(System.Int32)">
      <summary>
                    Called when the component manager wishes to know whether the view is in a state in which it can terminate. 
                </summary>
      <returns>true if the component can terminate, otherwise false.
                </returns>
      <param name="fPromptUser">true if the user should be prompted if it is necessary to terminate, false if the user should not be prompted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FReserved1(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    Reserved method. 
                </summary>
      <returns>
                    Always true.
                </returns>
      <param name="reserved">
                     Reserved. Do not use.
                </param>
      <param name="message">
                     Reserved. Do not use.
                </param>
      <param name="wParam">
                     Reserved. Do not use.
                </param>
      <param name="lParam">
                     Reserved. Do not use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.GetDefaultSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])">
      <summary>
                    Gets the default size of the window.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.
                </returns>
      <param name="size">
                    An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.SIZE" /> structures.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.HwndGetWindow(System.UInt32,System.UInt32)">
      <summary>
                    Gets a window associated with the component.
                </summary>
      <returns>
                    A pointer to the desired window or null if no such window exists.
                </returns>
      <param name="dwWhich">
                    A value from <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLECWINDOW" />.
                </param>
      <param name="dwReserved">
                    Reserved for future use; should be 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.IsSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>
                    Determines whether the toolbox user supports the referenced data object. 
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />, otherwise it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_FALSE" />.
                </returns>
      <param name="data">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.ItemPicked(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>
                    Sends notification that an item in the toolbox has been selected (by clicking the mouse or by pressing ENTER).
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="data">
                    The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> that has been selected.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.LoadViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>
                    When implemented in a derived class, loads the view state of the window pane.
                </summary>
      <returns>
                    When implemented in a derived class, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="stream">
                    The <see cref="T:IStream" /> from which to load the state of the view.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)">
      <summary>
                    Called when a new object is being activated.
                </summary>
      <param name="pic">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponent" /> if it is the view itself that is being activated, otherwise null.
                </param>
      <param name="fSameComponent">true if <paramref name="pic" /> is the same component as the callee of this method, otherwise false.
                </param>
      <param name="pcrinfo">
                    An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECRINFO" /> structures, which represent registry information for <paramref name="pic" />.
                </param>
      <param name="fHostIsActivating">true if it the host that is being activated, otherwise false.
                </param>
      <param name="pchostinfo">
                    An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO" /> structures, which represent host information.
                </param>
      <param name="dwReserved">
                    Reserved for future use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnAppActivate(System.Int32,System.UInt32)">
      <summary>
                    Notifies the component whenever the host application is activated or deactivated.
                </summary>
      <param name="fActive">
                    If true, the host application is being activated, otherwise it is being deactivated.
                </param>
      <param name="dwOtherThreadID">
                    If the host application is being activated, the ID of the thread that owns the window being deactivated. If the host application is being deactivated, the ID of the thread owning the window being activated.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnEnterState(System.UInt32,System.Int32)">
      <summary>
                    Notifies the view when the application enters or exits a given state. 
                </summary>
      <param name="uStateID">
                    The state being entered or exited, specified by the <see cref="T:Microsoft.VisualStudio.OLE.Interop. _OLECSTATE" /> enumeration.
                </param>
      <param name="fEnter">true if the application is entering the specified state, false if it is exiting the state.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnLoseActivation">
      <summary>
                    Notifies the active view that it has lost its active status because the host or another component has become active.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>
                    Gets the status of the specified commands.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if all commands are enabled, or an error code.
                </returns>
      <param name="guidCmdGroup">
                    The GUID of the command group to which the commands belong.
                </param>
      <param name="cmds">
                    The number of commands to query.
                </param>
      <param name="prgCmds">
                    An array of command IDs to query.
                </param>
      <param name="pCmdText">
                    Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTXT" /> structure for command text.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.SaveViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>
                    Saves the loaded view state.
                </summary>
      <returns>
                    When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="stream">
                    The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream" /> to which to save the view state.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.SetInfo">
      <summary>
                    Sets the information in the status bar to reflect this view. 
                </summary>
      <returns>
                    When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>
                    Initializes this view.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.
                </returns>
      <param name="site">
                    The main <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.Site">
      <summary>
                    Gets or sets the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> for this view.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.Terminate">
      <summary>
                    Called by the component manager when it wishes to terminate the view's registration. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>
                    Handles the translation of special navigation keys. 
                </summary>
      <returns>
                    When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="msg">
                    An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> structures holding the keyboard character or character combination to be handled.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.MenuCommandService"></member>
    <member name="M:Microsoft.VisualStudio.Package.Source.BeginParse(System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,Microsoft.VisualStudio.Package.ParseReason,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.ParseResultHandler)">
      <summary>
                    Begins a parsing operation with the given token, text view, and parse request handler.
                </summary>
      <param name="line">
                    The line number.
                </param>
      <param name="idx">
                    The line column.
                </param>
      <param name="info">
                    The <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> that is used to create the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" />. 
                </param>
      <param name="reason">
                    The <see cref="T:Microsoft.VisualStudio.Package.ParseReason" /> that is used to create the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" />.
                </param>
      <param name="view">
                    The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> that is used to create the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" />.
                </param>
      <param name="callback">
                    A special handler that can be called to deal with certain kinds of parsing, such as <see cref="M:Microsoft.VisualStudio.Package.Source.HandleMatchBracesResponse(ParseRequest)" /> or <see cref="M:Microsoft.VisualStudio.Package.Source.HandleCompletionResponse(ParseRequest)" />. 
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TextSpanHelper">
      <summary>
                    A utility class that provides methods for manipulating and comparing instances of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> class, and also for validating positions.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Clear(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>
                    Sets the members of the specified span to an empty state.
                </summary>
      <param name="span">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object to clear.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ContainsExclusive(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
      <summary>
                    Determines whether the given position is contained in the given span, not including the start and end points.
                </summary>
      <returns>
                    Returns true if the given position is greater than the start of the span and less than the end of the span. Returns false if the position is exactly equal to the start or end of the span or the position is outside the span.
                </returns>
      <param name="span">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested against.
                </param>
      <param name="line">
                    [in] The line index of the position to test.
                </param>
      <param name="col">
                    [in] The column index of the position to test.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ContainsInclusive(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
      <summary>
                    Determines whether the given position is in the span, including the start and end points.
                </summary>
      <returns>
                    Returns true if the given position is greater than or equal to the start of the span and less than or equal to the end of the span. Returns false if the given position is entirely outside the span.
                </returns>
      <param name="span">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested against.
                </param>
      <param name="line">
                    [in] The line index of the position to test.
                </param>
      <param name="col">
                    [in] The column index of the position to test.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the first span ends after the end of the second span.
                </summary>
      <returns>
                    Returns true if the end of <paramref name="span1" /> is greater than the end of <paramref name="span2" />; otherwise, returns false.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsAfterStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the first span ends after the start of the second span.
                </summary>
      <returns>
                    Returns true if the end of <paramref name="span1" /> is greater than the start of <paramref name="span2" />; otherwise, returns false.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsBeforeEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the first span ends before the end of the second span.
                </summary>
      <returns>
                    Returns true if the end of <paramref name="span1" /> is less than or equal to the end of <paramref name="span2" />; otherwise, returns false.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the first span ends before the start of the second span.
                </summary>
      <returns>
                    Returns true if the end of <paramref name="span1" /> is less than or equal to the start of <paramref name="span2" />; otherwise, returns false.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Intersects(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the first span intersects the second span.
                </summary>
      <returns>
                    Returns true if the start of <paramref name="span1" /> is less than the end of <paramref name="span2" /> and the end of <paramref name="span1" /> is greater than the start of <paramref name="span2" />; otherwise, returns false. Notice that the spans do not intersect if one span ends exactly where the other begins.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
      <summary>
                    Determines whether the given position occurs after the end of the given span.
                </summary>
      <returns>
                    Returns true if the given position is greater than the end of the given span; otherwise, returns false.
                </returns>
      <param name="span">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested against.
                </param>
      <param name="line">
                    [in] The line index of the position to test.
                </param>
      <param name="col">
                    [in] The column index of the position to test.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
      <summary>
                    Determines whether the given position occurs before the start of the given span.
                </summary>
      <returns>
                    Returns true if the given position is less than the start of the given span; otherwise, returns false.
                </returns>
      <param name="span">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested against.
                </param>
      <param name="line">
                    [in] The line index of the position to test.
                </param>
      <param name="col">
                    [in] The column index of the position to test.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsEmbedded(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the first span is wholly contained in the second span.
                </summary>
      <returns>
                    Returns true if the two spans are different and the start of <paramref name="span1" /> is equal to or greater than the start of <paramref name="span2" /> and the end of <paramref name="span1" /> is less than or equal to the end of <paramref name="span2" />; otherwise, returns false.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsEmpty(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the given span is empty.
                </summary>
      <returns>
                    Returns true if the given span is empty; otherwise, returns false.
                </returns>
      <param name="span">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsPositive(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the start of the given span occurs before the end of the span.
                </summary>
      <returns>
                    Returns true if the start of the span is less than or equal to the end of the span; otherwise, returns false.
                </returns>
      <param name="span">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsSameSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether two spans are the same.
                </summary>
      <returns>
                    Returns true if the start of <paramref name="span1" /> equals the start of <paramref name="span2" /> and the end of <paramref name="span1" /> equals the end of <paramref name="span2" />; otherwise, returns false.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.MakePositive(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>
                    Makes the given span positive.
                </summary>
      <param name="span">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object to be modified.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Merge(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Merges the two given spans to create a new span.
                </summary>
      <returns>
                    Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is the result of merging <paramref name="span1" /> and <paramref name="span2" />.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object to be merged.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object to be merged.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Normalize(Microsoft.VisualStudio.TextManager.Interop.TextSpan@,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>
                    Pins the ends of the given span to the actual line lengths in the given text buffer.
                </summary>
      <param name="span">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object to be modified. This object can be null.
                </param>
      <param name="textLines">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object to normalize against.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the first span starts after the end of the second span.
                </summary>
      <returns>
                    Returns true if the start of <paramref name="span1" /> is greater than or equal to the end of <paramref name="span2" />; otherwise, returns false.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsAfterStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the first span starts after the start of the second span.
                </summary>
      <returns>
                    Returns true if the start of <paramref name="span1" /> is greater than or equal to the start of <paramref name="span2" />; otherwise, returns false.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsBeforeEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the first span starts before the end of the second span.
                </summary>
      <returns>
                    Returns true if the start of <paramref name="span1" /> is less than the end of <paramref name="span2" />; otherwise, returns false.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the first span starts before the start of the second span.
                </summary>
      <returns>
                    Returns true if the start of <paramref name="span1" /> is less than the start of <paramref name="span2" />; otherwise, returns false.
                </returns>
      <param name="span1">
                    [in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
      <param name="span2">
                    [in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ValidCoord(Microsoft.VisualStudio.Package.Source,System.Int32,System.Int32)">
      <summary>
                    Determines whether the given position is valid for the given source buffer.
                </summary>
      <returns>
                    Returns true if the given position lies within the given source buffer; otherwise, returns false.
                </returns>
      <param name="src">
                    [in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object to validate against. This can be a null value. See Remarks.
                </param>
      <param name="line">
                    [in] The line index of the position to test.
                </param>
      <param name="pos">
                    [in] The column index of the position to test.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ValidSpan(Microsoft.VisualStudio.Package.Source,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>
                    Determines whether the given span lies within the given source buffer.
                </summary>
      <returns>
                    Returns true if the span lies entirely within the source buffer and is positive; otherwise, returns false.
                </returns>
      <param name="src">
                    [in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object to validate against.
                </param>
      <param name="span">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object representing the span to test.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TextTipData">
      <summary>
                    Provides a default implementation of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData" /> for use in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow" /> for displaying tool tips.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.#ctor(System.IServiceProvider)">
      <summary>
                    This constructor sets a service provider.
                </summary>
      <param name="site">
                    A service provider.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.CheckCaretPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>
                    Dismisses the tool tip based on mouse proximity to something that has a tool tip.
                </summary>
      <param name="textView">
                    The view the text tip floats over.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.Close(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>
                    Dismisses and releases the tool tip.
                </summary>
      <param name="textView">
                    The view associated with the tool tip.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.GetContextStream(System.Int32@,System.Int32@)">
      <summary>
                    Retrieves the position and length of the tool tip.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.
                </returns>
      <param name="piPos">
                    The position of the tool tip.
                </param>
      <param name="piLen">
                    The length of the tool tip.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.GetTipFontInfo(System.Int32,System.UInt32[])">
      <summary>
                    Returns the font of the tool tip window.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
      <param name="iChars">
                    Number of characters to consider.
                </param>
      <param name="pdwFontInfo">
                    Pointer to a structure that describes font.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.GetTipText(System.String[],System.Int32@)">
      <summary>
                    Populates <paramref name="pbstrText" /> with the tip text.
                </summary>
      <returns>
                    If <paramref name="pbstrText" /> is NULL or has a length of zero, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" />, otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="pbstrText">
                    The populated text tip data.
                </param>
      <param name="pfFontData">
                    Font information about the provided data.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.IsActive">
      <summary>
                    Tests if the tool tip window is currently visible.
                </summary>
      <returns>
                    Returns TRUE if the tool tip window is currently visible.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.OnDismiss">
      <summary>
                    Sets the tool tip window to inactive.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.Update(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>
                    Adds the supplied data to this text tip.
                </summary>
      <param name="textValue">
                    The text of the tool tip.
                </param>
      <param name="pos">
                    The position of the tip.
                </param>
      <param name="len">
                    The length of the tip.
                </param>
      <param name="textView">
                    The <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)" /> that should be updated.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.UpdateView">
      <summary>
                    A virtual method that your subclass of TextTipData can implement to provide extra functionality on update.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars">
      <summary>
                    Provides support for the combo boxes showing type and member information as offered by a language service.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.#ctor(Microsoft.VisualStudio.Package.LanguageService)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars" /> class.
                </summary>
      <param name="languageService">
                    [in] A <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> object representing the language service that uses the combo boxes.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.Done">
      <summary>
                    Cleans up any allocated resources just before the <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars" /> object is destroyed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetComboAttributes(System.Int32,System.UInt32@,System.UInt32@,System.IntPtr@)">
      <summary>
                    Returns information about the specified combo box.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="combo">
                    [in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).
                </param>
      <param name="entries">
                    [out] The number of entries to be shown on the combo box.
                </param>
      <param name="entryType">
                    [out] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE" /> enumeration describing the type of entries to appear on the combo box.
                </param>
      <param name="iList">
                    [out] An unmarshaled handle to an <see cref="T:Microsoft.CLRAdmin.IImageList" /> object used for glyphs.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetComboTipText(System.Int32,System.String@)">
      <summary>
                    Returns text to be shown in a tool tip when the cursor is held over the combo box.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="combo">
                    [in] The ID of the combo box to get the tool tip text for (0 for the types combo box, 1 for the members combo box).
                </param>
      <param name="text">
                    [out] The text to be shown in a tool tip.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryAttributes(System.Int32,System.Int32,System.UInt32@)">
      <summary>
                    Returns the font attributes for the specified entry on the specified combo box.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="combo">
                    [in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).
                </param>
      <param name="entry">
                    [in] The index of the entry for which to get the attributes.
                </param>
      <param name="fontAttrs">
                    [out] Returns the collection of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR" /> enumeration for the requested entry.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryImage(System.Int32,System.Int32,System.Int32@)">
      <summary>
                    Returns the glyph index for the specified entry on the specified combo box.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="combo">
                    [in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).
                </param>
      <param name="entry">
                    [in] The index of the entry for which to get the image index.
                </param>
      <param name="imgIndex">
                    [out] Returns the index in the image list to the glyph for the specified entry. Returns -1 if there is no glyph or the entry does not exist.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryText(System.Int32,System.Int32,System.String@)">
      <summary>
                    Returns the text to be displayed for the specified entry in the specified combo box.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="combo">
                    [in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).
                </param>
      <param name="entry">
                    [in] The index of the entry for which to get the text.
                </param>
      <param name="text">
                    [out] Returns a string containing the text to be displayed in the combo box for the specified entry. Returns null if the entry does not exist.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetMember(System.Int32,System.Int32)">
      <summary>
                    Returns the specified entry for the specified combo box.
                </summary>
      <returns>
                    If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object describing the request entry; otherwise, returns null.
                </returns>
      <param name="combo">
                    [in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).
                </param>
      <param name="entry">
                    [in] The index of the entry to get.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnComboGetFocus(System.Int32)">
      <summary>
                    Called when a combo box gets the focus.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="combo">
                    [in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnItemChosen(System.Int32,System.Int32)">
      <summary>
                    Called when an item is chosen from the specified combo box.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="combo">
                    [in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).
                </param>
      <param name="entry">
                    [in] The index of the entry that was chosen.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnItemSelected(System.Int32,System.Int32)">
      <summary>
                    Called when an entry is highlighted in one of the combo boxes.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="combo">
                    [in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).
                </param>
      <param name="index">
                    [in] The index of the entry that was highlighted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnSynchronizeDropdowns(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,System.Collections.ArrayList,System.Collections.ArrayList,System.Int32@,System.Int32@)">
      <summary>
                    Called to fill and synchronize all combo boxes.
                </summary>
      <returns>
                    If successful, returns true if the combo boxes have been changed; otherwise returns false.
                </returns>
      <param name="languageService">
                    [in] A <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> object representing the language service that uses the combo boxes.
                </param>
      <param name="textView">
                    [in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view the combo boxes are placed in and the view that shows the source file.
                </param>
      <param name="line">
                    [in] The line number the caret is currently on.
                </param>
      <param name="col">
                    [in] The character offset the caret is currently on.
                </param>
      <param name="dropDownTypes">
                    [in, out] An <see cref="T:System.Collections.ArrayList" /> of <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" />s representing the types combo box.
                </param>
      <param name="dropDownMembers">
                    [in, out] An <see cref="T:System.Collections.ArrayList" /> of <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" />s representing the members combo box.
                </param>
      <param name="selectedType">
                    [in, out] The index of the entry to be selected in the types combo box. This can also be set if the current selection is invalid.
                </param>
      <param name="selectedMember">
                    [in, out] The index of the entry to be selected in the members combo box. This can also be set if the current selection is invalid.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.SetDropdownBar(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar)">
      <summary>
                    Called to specify the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar" /> object that controls the two combo boxes.
                </summary>
      <returns>
                    If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="bar">
                    [in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar" /> object that controls the two combo boxes.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Variant">
      <summary>
                    Represents an object that can be interpreted as more than one type.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Variant.ToChar">
      <summary>
                    Interprets the <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object's value as a Unicode character if the variant type is <see cref="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI2" />.
                </summary>
      <returns>
                    If the variant type is <see cref="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI2" />, returns the value interpreted as a character; otherwise, returns 0.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Variant.ToVariant(System.IntPtr)">
      <summary>
                    Converts the given variant object to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> class object.
                </summary>
      <returns>
                    If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object containing the value of the marshaled variant object; otherwise, returns an empty <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object.
                </returns>
      <param name="ptr">
                    [in] An <see cref="T:System.IntPtr" /> to be marshaled as a variant object.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Variant.Value">
      <summary>
                    Determines the value of this <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object.
                </summary>
      <returns>
                    Returns a number that is a literal interpretation of the object's pointer.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Variant.Vt">
      <summary>
                    Determines the type of the <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object.
                </summary>
      <returns>
                    Returns a value from the <see cref="T:Microsoft.VisualStudio.Package.Variant.VariantType" /> enumeration, specifying the type of the variant.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ViewFilter.IsExecutingCommand"></member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,System.Int32,System.Int32)"></member>
  </members>
</doc>