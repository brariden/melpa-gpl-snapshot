<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Modeling.Sdk.Shell</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages">
      <summary>
                    Represents an image list that Class View, Model Explorer, and IntelliSense uses.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.AccessTypeCount">
      <summary>
                    Provides the number of access types that are available. 
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.ConstantIndex">
      <summary>
                    Provides the index for the Constant icon.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.EnumMemberIndex">
      <summary>
                    Provides the index for the EnumMember icon.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.ErrorIndex">
      <summary>
                    Provides the index for the Error icon.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.EventIndex">
      <summary>
                    Provides the index for the Event icon.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.FieldIndex">
      <summary>
                    Provides the index for the Field icon.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.FriendModifier">
      <summary>
                    Provides the index for the Friend access type.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.GetImageList(System.IServiceProvider)">
      <summary>
                    Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages" /> class.
                </summary>
      <returns>
                    The image list that Class View, Model Explorer, and IntelliSense uses.
                </returns>
      <param name="serviceProvider">
                    The Visual Studio service provider that retrieves the image list by using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.GetProperty(System.Int32,System.Object@)" />.
                </param>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.InternalModifier">
      <summary>
                    Provides the index for the Internal access type.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.MethodIndex">
      <summary>
                    Provides the index number for the Method icon.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.PrivateModifier">
      <summary>
                    Provides the index number for the Private access type.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.PropertyIndex">
      <summary>
                    Provides the index number for the Property icon.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.ProtectedModifier">
      <summary>
                    Provides the index number for the Protected access type.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewImages.PublicModifier">
      <summary>
                    Provides the index number for the Public access type.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfo">
      <summary>
                    Represents information about each element that can appear in the diagram. Information about each element is displayed as a node in the Class View window.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfo.ClipFormat">
      <summary>
                    Displays the string, Object Navigation Info Format, if the return value for <see cref="Overload:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfo.IsDataPresent" /> is true. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfo.GetData(System.Windows.Forms.IDataObject)">
      <summary>
                    Gets information about the elements that appear as nodes in a tree view.
                </summary>
      <returns>
                    The information about the elements that appear as nodes in a tree view. 
                </returns>
      <param name="data">
                    The element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfo.IsDataPresent(System.Windows.Forms.IDataObject)">
      <summary>
                    Verifies whether an element contains a project name, reference name, full name, and node type.
                </summary>
      <returns>true if the element contains data; otherwise, false. 
                </returns>
      <param name="data">
                    The element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfo.IsDataPresent(System.Windows.Forms.IDataObject,Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoTypes,System.Boolean,System.Boolean)">
      <summary>
                    Verifies whether an element contains a project name, reference name, full name, and node type. Also verifies whether an element is of a specific format. 
                </summary>
      <returns>true if the element is of the specified format; otherwise, false. 
                </returns>
      <param name="data">
                    The element to check.
                </param>
      <param name="nodeTypes">
                    The types of nodes to check. For more information about the types of nodes that are available, see <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoTypes" />.
                </param>
      <param name="allowMultiples">true to indicate that multiple infoType nodes are allowed; otherwise, false.
                </param>
      <param name="allowOtherTypes">true to allow other types of nodes; otherwise, false. 
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode">
      <summary>
                    Represents an element that appears as a node in a tree view.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode.Compare(Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode,Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode)">
      <summary>
                    Compares two elements.
                </summary>
      <returns>true if the elements are equal; otherwise, false.
                </returns>
      <param name="operand1">
                    The first element to compare.
                </param>
      <param name="operand2">
                    The second element to compare.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode.Equals(System.Object)">
      <summary>
                    Verifies whether the selected element is equal to another element.
                </summary>
      <returns>true if the selected element is equal to the other element; otherwise, false. 
                </returns>
      <param name="obj">
                    The other element to compare to.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode.FullName">
      <summary>
                    Gets the fully qualified dot (.) delimited name of the element.
                </summary>
      <returns>
                    The fully qualified dot (.) delimited name of the element.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode.GetHashCode">
      <summary>
                    Gets the hashcode for the element. 
                </summary>
      <returns>
                    The hashcode for the element.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode.InfoType">
      <summary>
                    Gets the type of node to which the element is assigned.
                </summary>
      <returns>
                    The type of node to which the element is assigned.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode.op_Equality(Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode,Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode)">
      <summary>
                    Verifies whether two elements are equal.
                </summary>
      <returns>true if the elements are equal; otherwise, false. 
                </returns>
      <param name="operand1">
                    The first element to compare.
                </param>
      <param name="operand2">
                    The second element to compare.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode.op_Inequality(Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode,Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode)">
      <summary>
                    Verifies whether two elements are not equal.
                </summary>
      <returns>true if the two elements are not equal; otherwise, false.
                </returns>
      <param name="operand1">
                    The first element to compare.
                </param>
      <param name="operand2">
                    The second element to compare.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode.ProjectName">
      <summary>
                    Gets the name of the project to which the element is assigned.
                </summary>
      <returns>
                    The name of the project to which the element is assigned.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoNode.ReferenceName">
      <summary>
                    Gets the reference name of the element.
                </summary>
      <returns>
                    The reference name of the element.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoTypes">
      <summary>
                    Represents the types of nodes to which you can assign an element in the navigation tree.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoTypes.Unknown">
      <summary>
                    An unknown type of node (0).
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoTypes.Project">
      <summary>
                    A project node (1).
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoTypes.Namespace">
      <summary>
                    A namespace node (2).
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoTypes.Class">
      <summary>
                    A class node (4). 
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ClassViewNavigationInfoTypes.Member">
      <summary>
                    A member node, such as a method node or property node (8).
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.CommandContextBoundMenuCommand">
      <summary>
                    Represents a menu command that is bound to a specific UI context.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandContextBoundMenuCommand.#ctor(System.IServiceProvider,System.EventHandler,System.ComponentModel.Design.CommandID,System.Guid[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.CommandContextBoundMenuCommand" /> class.
                </summary>
      <param name="serviceProvider">
                    The service provider that retrieves Visual Studio services.
                </param>
      <param name="handler">
                    The event handler that executes the command.
                </param>
      <param name="id">
                    The command ID that is assigned to the menu command.
                </param>
      <param name="commandContext">
                    The GUID(s) that indicate the command context to which this command is assigned.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.CommandContextChangedEventArgs"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandContextChangedEventArgs.#ctor(System.UInt32,System.Boolean)">
      <param name="cookie"></param>
      <param name="active"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandContextChangedEventArgs.Cookie"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandContextChangedEventArgs.IsActive"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.CommandSet">
      <summary>
                    Represents the commands that are available in the shortcut menu for the generated designer of a domain-specific language.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.CommandSet" /> class. 
                </summary>
      <param name="serviceProvider">
                    The service provider that retrieves Visual Studio services.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandSet.CurrentDocData">
      <summary>
                    Gets the data in the active document window.
                </summary>
      <returns>
                    The data in the active document window.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandSet.CurrentDocumentSelection">
      <summary>
                    Gets the selected shapes in the active document window.
                </summary>
      <returns>
                    The selected shapes in the active document window.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandSet.CurrentDocView">
      <summary>
                    Gets the view for the active document window.
                </summary>
      <returns>
                    The view for the active document window.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandSet.CurrentSelection">
      <summary>
                    Gets the selected shapes in the active window.
                </summary>
      <returns>
                    The currently selected shapes.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.GetMenuCommands">
      <summary>
                    Displays the commands on the shortcut menu.
                </summary>
      <returns>
                    The list of menu commands.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.Initialize">
      <summary>
                    Initializes the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.CommandSet" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.IsAnyDocumentSelectionCompartment">
      <summary>
                    Verifies whether a compartment is selected in the active document window.
                </summary>
      <returns>true if at least one compartment is selected; otherwise, false. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.IsCurrentDiagramEmpty">
      <summary>
                    Verifies whether the diagram contains any shapes. 
                </summary>
      <returns>true if the diagram contains no shapes; otherwise, false. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.IsDiagramSelected">
      <summary>
                    Verifies whether the diagram is selected.
                </summary>
      <returns>true if the diagram is selected; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.IsExpandableShape">
      <summary>
                    Verifies whether a user can expand the shape to reveal domain properties.
                </summary>
      <returns>true if a user can expand the shape; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.IsSingleDocumentSelection">
      <summary>
                    Verifies whether only one shape is selected in the active document window.
                </summary>
      <returns>true if only one shape is selected; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.IsSingleSelection">
      <summary>
                    Verifies whether only one shape is selected in the active window.
                </summary>
      <returns>true if only one shape is selected; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandSet.MenuService">
      <summary>
                    Gets the command sequence and executes an event when a user clicks a command on the shortcut menu.
                </summary>
      <returns>
                    The menu service that is assigned to the command.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandSet.MonitorSelection">
      <summary>
                    Gets an instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService" /> service, which identifies which window is active.
                </summary>
      <returns>
                    An instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService" /> service.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnMenuDeleteCommand">
      <summary>
                    Deletes the selected shapes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnMenuEditCompartmentItemCommand">
      <summary>
                    Processes edits that a user makes to a compartment in the primary (first) selected shape.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnMenuExpandCollapseCommand">
      <summary>
                    Expands or collapses a list of properties that is assigned to a shape. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnMenuPageSetupCommand">
      <summary>
                    Opens the Page Setup dialog box.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnMenuPrintCommand">
      <summary>
                    Opens the Print dialog box.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnMenuPrintPreviewCommand"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnMenuRerouteLineCommand">
      <summary>
                    Restores the default position of a connector between two shapes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnMenuSelectAllCommand">
      <summary>
                    Selects all shapes in a diagram.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnStatusDeleteCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
                    Verifies whether a user can delete a shape.
                </summary>
      <param name="command">
                    The menu command for Delete.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnStatusEditCompartmentItemCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
                    Verifies whether a user can edit a compartment in a shape.
                </summary>
      <param name="command">
                    The menu command for Edit.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnStatusExpandCollapseCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
                    Verifies whether the property list that is assigned to a shape is expanded or collapsed.
                </summary>
      <param name="command">
                    The menu command for Expand/Collapse.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnStatusPageSetupCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
                    Opens the Page Setup dialog box.
                </summary>
      <param name="command">
                    The menu command.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnStatusPrintCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
                    Opens the Print dialog box.
                </summary>
      <param name="command">
                    The menu command.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnStatusPrintPreviewCommand(System.ComponentModel.Design.MenuCommand)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnStatusRerouteLineCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
                    Verifies whether a user can reroute the connector to its default position between two shapes.
                </summary>
      <param name="command">
                    The menu command for Reroute Line.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ProcessOnStatusSelectAllCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
                    Verifies whether all shapes on a diagram are selected.
                </summary>
      <param name="command">
                    The menu command for Select All.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandSet.ServiceProvider">
      <summary>
                    Gets the service provider that retrieves Visual Studio services.
                </summary>
      <returns>
                    The service provider that retrieves Visual Studio services.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandSet.SingleDocumentSelection">
      <summary>
                    Gets the primary selected shape in the active document window.
                </summary>
      <returns>
                    The primary (first) selected shape in the active document window.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.CommandSet.SingleSelection">
      <summary>
                    Gets the primary selected shape in the active window.
                </summary>
      <returns>
                    The primary (first) selected shape in the active window.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands">
      <summary>
                    Defines the command IDs of the shared commands in the Domain-Specific Language Designer.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.CompartmentItemAdd">
      <summary>
                    Gets the command ID of the Add List Item command for the compartment list.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.CompartmentItemEdit">
      <summary>
                    Gets the command ID of the Edit command for the compartment list. 
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.CompartmentShapeAddItem">
      <summary>
                    Gets the command ID of the Add Item command for the compartment shape.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.CompartmentShapeExpandCollapse">
      <summary>
                    Gets the command ID of the Expand/Collapse command for the compartment shape.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.ModelExplorerAddModelElement">
      <summary>
                    Gets the command ID of the Add Model Element command for Model Explorer.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.ModelExplorerDeleteAll">
      <summary>
                    Gets the command ID of the Delete All command for Model Explorer.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.PageSetup">
      <summary>
                    Gets the command ID of the Page Setup command.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.Print">
      <summary>
                    Gets the command ID of the Print command.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.PrintPreview"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.Properties">
      <summary>
                    Gets the command ID of the Properties command.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.RerouteLine">
      <summary>
                    Gets the command ID of the Reroute command.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.SwimlaneAddAfter">
      <summary>
                    Gets the command ID of the Add After command for the swimlane header.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.SwimlaneAddBefore">
      <summary>
                    Gets the command ID of the Add Before command for the swimlane header.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.Validate">
      <summary>
                    Gets the command ID of the Validate command for an element in a model.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.CommonModelingCommands.ValidateModel">
      <summary>
                    Gets the command ID of the Validate Model command for the model.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ContainerBase">
      <summary>
                    Applies styles to the base tool window and performs common operations, such as setting up borders and watermarks.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ContainerBase.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ContainerBase" /> class.
                </summary>
      <param name="serviceProvider">
                    The service provider that retrieves Visual Studio services.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ContainerBase.BorderRectangle">
      <summary>
                    Gets the border for the tool window.
                </summary>
      <returns>
                    The border for the tool window.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ContainerBase.HasBorder">
      <summary>
                    Gets the tool window and checks to see whether is has a border.
                </summary>
      <returns>true if the border for the tool window should appear; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ContainerBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
                    Passes paint event arguments when the tool window is painted. 
                </summary>
      <param name="e">
                    The paint event arguments.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ContainerBase.Watermark">
      <summary>
                    Gets and sets the watermark for the tool window.
                </summary>
      <returns>
                    The watermark for the tool window.
                </returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ContainerBase.WatermarkBorderOffset"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ContainerBase.WndProc(System.Windows.Forms.Message@)">
      <summary>
                    Displays a message in the tool window.
                </summary>
      <param name="m">
                    The message to display. 
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.DescriptionHandler"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView">
      <summary>
                    Represents a diagram view in the Domain-Specific Language Designer or generated designer. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.#ctor(Microsoft.VisualStudio.Modeling.Shell.ModelingDocData,System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView" /> class. 
                </summary>
      <param name="docData">
                    The model to appear in the diagram view.
                </param>
      <param name="serviceProvider">
                    The service provider that retrieves Visual Studio services.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.CommitPendingEditForCommand(System.ComponentModel.Design.CommandID)">
      <summary>
                    Verifies whether outstanding edits should be committed before a command is executed. 
                </summary>
      <returns>true if there are outstanding edits; otherwise, false.
                </returns>
      <param name="command">
                    The ID that is assigned to the command for which you want to commit edits.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.ContextMenuId">
      <summary>
                    Gets the shortcut menu to display when a user right-clicks the diagram view. 
                </summary>
      <returns>
                    The command ID that is assigned to the shortcut menu.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.ContextMenuMousePosition">
      <summary>
                    Gets the position of the mouse when the shortcut menu is invoked for the diagram view.
                </summary>
      <returns>
                    The position of the mouse.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.CountAllObjects">
      <summary>
                    Counts the number of elements that are in the model.
                </summary>
      <returns>
                    The number of elements that are in the model.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.CreateDiagramView">
      <summary>
                    Creates a diagram view for the document window.
                </summary>
      <returns>
                    The view for the diagram.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.CurrentDesigner">
      <summary>
                    Gets the active diagram view.
                </summary>
      <returns>
                    The active diagram view.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.CurrentDiagram">
      <summary>
                    Gets the currently selected model in the active diagram view. 
                </summary>
      <returns>
                    The currently selected model in the active diagram view.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView" /> and optionally releases the managed resources. 
                </summary>
      <param name="disposing">true if you want to release both managed and unmanaged resources; false if you want to release only unmanaged resources. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.DoSelectObjects(System.UInt32,System.Object[],System.UInt32)">
      <summary>
                    Selects elements in the diagram view.
                </summary>
      <param name="count">
                    The number of elements to select.
                </param>
      <param name="objects">
                    The collection of elements to select.
                </param>
      <param name="flags">
                    The flags that modify the selection. If this parameter is set to SELOBJS_ACTIVATEWINDOW, the window with the selected objects should be activated.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)">
      <summary>
                    Not currently implemented.
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="pszSearch">
                    Not currently implemented.
                </param>
      <param name="grfOptions">
                    Not currently implemented.
                </param>
      <param name="fResetStartPoint">
                    Not currently implemented.
                </param>
      <param name="pHelper">
                    Not currently implemented.
                </param>
      <param name="pResult">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.GetAllObjects(System.UInt32,System.Object[])">
      <summary>
                    Gets all elements in the model.
                </summary>
      <param name="count">
                    The number of elements in the model.
                </param>
      <param name="objects">
                    The collection of elements to retrieve.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.GetCapabilities(System.Boolean[],System.UInt32[])">
      <summary>
                    Specifies which search options to support.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the search option is supported.
                </returns>
      <param name="pfImage">true if <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage" /> is supported; otherwise, false.
                </param>
      <param name="pgrfOptions">
                    The support options. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.GetCurrentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>
                    Not currently implemented.
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="pts">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.GetDiagramFromPhysicalView(System.Guid)">
      <summary>
                    Gets a model from the <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> so that it can appear in the diagram view.
                </summary>
      <returns>
                    The model.
                </returns>
      <param name="diagramDomainClassId">
                    The ID of the model that you want to retrieve.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.GetFindState(System.Object@)">
      <summary>
                    Not currently implemented.  
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="state">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.GetProperty(System.UInt32,System.Object@)">
      <summary>
                    Gets the properties that are assigned to an element in the model.
                </summary>
      <returns>
                    If <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_DocName" /> is selected, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Otherwise, <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
      <param name="propid">
                    The ID that is assigned to the property.
                </param>
      <param name="pvar">
                    The VARIANT that contains the property value. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.GetSearchImage(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet[],Microsoft.VisualStudio.TextManager.Interop.IVsTextImage@)">
      <summary>
                    Not currently implemented.
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="grfOptions">
                    Not currently implemented.
                </param>
      <param name="ppSpans">
                    Not currently implemented.
                </param>
      <param name="ppTextImage">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.GetToolboxItemFilterAttributes">
      <summary>
                    Gets a collection of filter strings and filter types for the Toolbox.
                </summary>
      <returns>
                    The collection of filter strings and filter types for the Toolbox.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.IsContextMenuShowing">
      <summary>
                    Gets the shortcut menu and verifies whether it appears for the diagram view.
                </summary>
      <returns>true if the shortcut menu appears for the diagram view; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.MarkSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>
                    Not currently implemented.
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="pts">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.Microsoft#VisualStudio#TextManager#Interop#IVsFindTarget#GetMatchRect(Microsoft.VisualStudio.OLE.Interop.RECT[])"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.NavigateTo(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>
                    Not currently implemented.
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="pts">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.NotifyFindTarget(System.UInt32)">
      <summary>
                    This member is no longer used.
                </summary>
      <returns>
                    This member is no longer used.
                </returns>
      <param name="notification">
                    This member is no longer used.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.OnContextMenuRequested(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
      <summary>
                    Processes a request for the shortcut menu.
                </summary>
      <param name="mouseArgs">
                    The mouse event arguments for the diagram view.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.OnSelectionChanged(System.EventArgs)">
      <summary>
                    Recalculates which Toolbox filters to use. 
                </summary>
      <param name="e">
                    The event arguments to use to recalculate which Toolbox filters to use. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.Replace(System.String,System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.Int32@)">
      <summary>
                    Not currently implemented.
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="pszSearch">
                    Not currently implemented.
                </param>
      <param name="pszReplace">
                    Not currently implemented.
                </param>
      <param name="grfOptions">
                    Not currently implemented.
                </param>
      <param name="fResetStartPoint">
                    Not currently implemented.
                </param>
      <param name="pHelper">
                    Not currently implemented.
                </param>
      <param name="pfReplaced">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.SetFindState(System.Object)">
      <summary>
                    Not currently implemented.
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="pUnk">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Drawing.Point)">
      <summary>
                    Displays the shortcut menu at a specific location in the diagram view.
                </summary>
      <param name="contextMenuId">
                    The ID that is assigned to the shortcut menu that you want to show.
                </param>
      <param name="pt">
                    The x-coordinate and y-coordinate that determine where the shortcut menu appears on the screen.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.TargetToolboxItemFilterAttributes">
      <summary>
                    Gets a collection of filter attributes for a Toolbox item. 
                </summary>
      <returns>
                    The collection of filter attributes for a Toolbox item.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.UpdateToolboxFilters(Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.ToolboxItemFilterType,System.Boolean)">
      <summary>
                    Updates the collection of Toolbox filters to use with the active diagram view. 
                </summary>
      <returns>true if the collection of Toolbox filters was updated; otherwise, false.
                </returns>
      <param name="filterToUpdate">
                    The collections of filters to update.
                </param>
      <param name="calculateChanges">true to check the filter collections have changed; false to assume that the filter collections have changed. 
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.ToolboxItemFilterType"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.ToolboxItemFilterType.None"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.ToolboxItemFilterType.Selection"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.ToolboxItemFilterType.Diagram"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.DiagramDocView.ToolboxItemFilterType.All"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.DiagramExporter">
      <summary>
                    Exports diagrams from the Domain-Specific Language Designer as images.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramExporter.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DiagramExporter" /> class.
                </summary>
      <param name="serviceProvider">
                    The service provider that retrieves Visual Studio services.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramExporter.ExportDiagram(System.String,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean)">
      <summary>
                    Exports a single diagram as an image in the specified format.
                </summary>
      <param name="diagramFileName">
                    The name of the diagram file.
                </param>
      <param name="exportPath">
                    The path of the location where the image should be exported.
                </param>
      <param name="imageFormat">
                    The format of the image.
                </param>
      <param name="overwriteExistingFiles">true if you want to overwrite a file that is already in the location; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramExporter.ExportDiagrams(System.Collections.Generic.IList{System.String},System.String,System.Boolean)">
      <summary>
                    Exports multiple diagrams as .png images. 
                </summary>
      <param name="diagramFiles">
                    The list of diagram files to export.
                </param>
      <param name="exportPath">
                    The path of the location to which the images should be exported.
                </param>
      <param name="overwriteExistingFiles">true to overwrite files that are already in the location; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DiagramExporter.ExportDiagrams(System.Collections.Generic.IList{System.String},System.String,System.Drawing.Imaging.ImageFormat,System.Boolean)">
      <summary>
                    Exports multiple diagrams as images in the specified format.
                </summary>
      <param name="diagramFiles">
                    The list of diagram files to export.
                </param>
      <param name="exportPath">
                    The path of the location to which the images should be exported.
                </param>
      <param name="format">
                    The format of the exported images.
                </param>
      <param name="overwriteExistingFiles">true if you want to overwrite files that are already in the location; otherwise, false.
                </param>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DiagramExporter.ExportErrorEvent">
      <summary>
                    Occurs when an error is encountered as a diagram is being exported. 
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DiagramExporter.ExportQueryUserActionEvent">
      <summary>
                    Occurs when the user must provide a response.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.DialogBase">
      <summary>
                    Represents the base class for a dialog box that is hosted in the shell.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DialogBase" /> class. 
                </summary>
      <param name="serviceProvider">
                    The service provider that retrieves Visual Studio services.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.CreateParams">
      <summary>
                    Gets the parameters that are used when a dialog box is created. 
                </summary>
      <returns>
                    The creation parameters.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.DialogFont">
      <summary>
                    Gets the font to use for the dialog box.
                </summary>
      <returns>
                    The font.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.DisableSafeWindowTargetHardeningCheck">
      <summary>
                    Gets the dialog box and verifies whether the <see cref="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.DisableSafeWindowTargetHardeningCheck" /> option should be disabled in the debug build.
                </summary>
      <returns>true if the hardening check for safe window targets should be enabled; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.EnableModeless">
      <summary>
                    Verifies whether a dialog box for a form is modeless.
                </summary>
      <returns>true if the dialog box is modeless; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.F1Keyword">
      <summary>
                    Gets the F1 keyword for the dialog box.
                </summary>
      <returns>
                    An empty string.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.FormBorderStyle">
      <summary>
                    Gets or sets the border style for the dialog box.
                </summary>
      <returns>
                    The border style for the dialog box. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.OnClosed(System.EventArgs)">
      <summary>
                    Cleans up resources that were used for the dialog box.
                </summary>
      <param name="e">
                    The event arguments.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
      <summary>
                    Shows the dialog box for Visual Studio Help. 
                </summary>
      <param name="hevent">
                    The <see cref="E:System.Windows.Forms.Control.HelpRequested" /> event.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.OnLoad(System.EventArgs)">
      <summary>
                    Sets up preferences for the dialog box when it opens.
                </summary>
      <param name="e">
                    The event arguments.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.OnUserPreferenceChanged(System.Object,Microsoft.Win32.UserPreferenceChangedEventArgs)">
      <summary>
                    Alerts listeners when a user changes the preferences for the operating system.
                </summary>
      <param name="sender">
                    The sending object. This value is always  null.
                </param>
      <param name="e">
                    The preference that changed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.ProcessDialogChar(System.Char)">
      <summary>
                    Verifies whether a character (such as A, B, or C) should be processed for the dialog box.
                </summary>
      <returns>true if the character should be processed; otherwise, false.
                </returns>
      <param name="charCode">
                    The character to process.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.ProcessDialogKey(System.Windows.Forms.Keys)">
      <summary>
                    Verifies whether keys (such as TAB, ESCAPE, and RETURN) should be processed for the dialog box.
                </summary>
      <returns>true if the key should be processed; otherwise, false.
                </returns>
      <param name="keyData">
                    The <see cref="T:System.Windows.Forms.Keys" /> to process.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.ServiceProvider">
      <summary>
                    Gets the service provider that obtains shell services.
                </summary>
      <returns>
                    The service provider that obtains shell services.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.WndProc(System.Windows.Forms.Message@)">
      <summary>
                    Processes Windows messages for the dialog box. 
                </summary>
      <param name="m">
                    The Windows <see cref="T:System.Windows.Forms.Message" /> to process.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.DocData">
      <summary>
                    When overridden in a derived class, represents a document in memory. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.#ctor(System.IServiceProvider,System.Guid)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DocData" /> class.
                </summary>
      <param name="serviceProvider">
                    The service provider that is local to this class. This service provider retrieves Visual Studio selection services.
                </param>
      <param name="editorId">
                    The ID of the editor factory to use. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.BackupFile(System.String)">
      <param name="backupFileName"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.CanSave(System.Boolean)">
      <summary>
                    Verifies whether the user can cancel the save operation. 
                </summary>
      <returns>true if the user can cancel the save operation; otherwise, false. 
                </returns>
      <param name="allowUserInterface">true to let the user decide whether to save the document or cancel; false to automatically save the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.Close">
      <summary>
                    Closes the document.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.Cookie">
      <summary>
                    Gets the cookie that identifies the document in the Running Documents table.
                </summary>
      <returns>
                    The cookie that identifies the document in the Running Documents table.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.DirectoryChanged(System.String)">
      <summary>
                    Not currently implemented.
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="directory">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DocData" /> and optionally releases the managed resources. 
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.DocumentClosed">
      <summary>
                    Occurs after the document is closed.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.DocumentClosing">
      <summary>
                    Occurs before the document is closed.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.DocumentLoaded">
      <summary>
                    Occurs after the document has been loaded in the modeling window.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.DocumentLoading">
      <summary>
                    Occurs before the document is loaded in the modeling window.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.DocumentReadOnlyChanged">
      <summary>
                    Occurs when the read-only flag for the document changes.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.DocumentReloaded">
      <summary>
                    Occurs after the document is reloaded.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.DocumentReloading">
      <summary>
                    Occurs before the document is reloaded.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.DocumentSaved">
      <summary>
                    Occurs after the document is saved.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.DocumentSaving">
      <summary>
                    Occurs before the document is saved.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.DocViews">
      <summary>
                    Gets the collection of document views that are open for the document.
                </summary>
      <returns>
                    The collection of document views that are open for the document. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.Encoding">
      <summary>
                    Gets or sets the encoding that persists the document.
                </summary>
      <returns>
                    The encoding that persists the document.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.FileName">
      <summary>
                    Gets the file name of the document.
                </summary>
      <returns>
                    The file name of the document.
                </returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.FileNameChanged">
      <summary>
                    Occurs when the document's file name changes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.FilesChanged(System.UInt32,System.String[],System.UInt32[])">
      <summary>
                    Notifies clients that one or more documents changed.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="count">
                    The number of documents that changed.
                </param>
      <param name="files">
                    The list of documents that changed.
                </param>
      <param name="changes">
                    The list of changes for each document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.FlushUndoManager">
      <summary>
                    Clears the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" />.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.FormatList">
      <summary>
                    Gets a list of formats.
                </summary>
      <returns>
                    The list of formats.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.GetClassID(System.Guid@)">
      <summary>
                    Gets the GUID of the editor factory that created the document.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="classId">
                    The GUID of the editor factory that created the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.GetCurFile(System.String@,System.UInt32@)">
      <summary>
                    Gets the file name of the document.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="fileName">
                    The file name of the document. 
                </param>
      <param name="formatIndex">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.GetData(System.Guid@,System.Object@)">
      <summary>
                    Gets the document data from a buffer.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the document is retrieved from a buffer; otherwise, <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />.
                </returns>
      <param name="riidKey">
                    The ID that is assigned to the document data.
                </param>
      <param name="pvtData">
                    The VARIANT that contains the document data.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.GetFormatList(System.String@)">
      <summary>
                    Gets the list of supported document formats.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="formatList">
                    The list of supported document formats.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.GetGuidEditorType(System.Guid@)">
      <summary>
                    Gets the GUID of the editor factory that created the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData" /> object.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="editor">
                    The GUID of the editor factory that created the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.HandleLoadDocDataException(System.String,System.Exception,System.Boolean)">
      <summary>
                    Manages any exceptions that were thrown when the document was loading.
                </summary>
      <param name="fileName">
                    The name of the document that was loading.
                </param>
      <param name="exception">
                    The exception that was thrown.
                </param>
      <param name="isReload">true to reload the document; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.HandleSaveDocDataException(System.String,System.Exception)">
      <summary>
                    Manages any exceptions that were thrown when the document was saving.
                </summary>
      <param name="fileName">
                    The name of the document that was saving. 
                </param>
      <param name="exception">
                    The exception that was thrown. 
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.Hierarchy">
      <summary>
                    Gets the project hierarchy to which the document belongs.
                </summary>
      <returns>
                    The project hierarchy to which the document belongs. 
                </returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.DocData.HierarchyChanged">
      <summary>
                    Occurs when the document's hierarchy or Item ID changes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.IgnoreFileChanges(System.Int32)">
      <summary>
                    Determines whether changes to the document should be ignored. 
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="ignore">true to ignore changes to the document; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.InitNew(System.UInt32)">
      <summary>
                    Initializes the document.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="formatIndex">
                    The index of the format that represents the document.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.IsBackupFileObsolete"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.IsDirty(System.Int32@)">
      <summary>
                    Verifies whether the document changed after the most recent save operation.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="dirty">true to indicate that the document changed; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.IsDocDataDirty(System.Int32@)">
      <summary>
                    Verifies whether the document changed after the most recent save operation.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="isDirty">0 if the document did not change; otherwise, 1.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.IsDocDataReadOnly(System.Int32@)">
      <summary>
                    Verifies whether the document is read-only.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="isReadOnly">1 if the document is read-only; otherwise, 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.IsDocDataReloadable(System.Int32@)">
      <summary>
                    Verifies whether the document can be reloaded.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="isReloadable">1 if the document can be reloaded; otherwise, 0. By default, this value is 1.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.IsLoaded">
      <summary>
                    Gets the document and verifies whether it is loaded.
                </summary>
      <returns>true if the document is loaded; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.ItemId">
      <summary>
                    Gets the Item ID that is assigned to the document.
                </summary>
      <returns>
                    The Item ID that is assigned to the document.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.Load(System.String,System.Boolean)">
      <summary>
                    Loads the document into memory.
                </summary>
      <param name="fileName">
                    The file name of the document. 
                </param>
      <param name="isReload">true to reload a document; false to load a different document. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.Load(System.String,System.UInt32,System.Int32)">
      <summary>
                    Loads the document into memory.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="fileName">
                    The file name of the document.
                </param>
      <param name="mode">
                    Not currently implemented. 
                </param>
      <param name="isReadOnly">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.LoadDocData(System.String)">
      <summary>
                    Loads the document by using its file name.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="fileName">
                    The file name of the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.LoadDocData(System.String,System.Boolean)">
      <summary>
                    Loads the document by using its file name.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="fileName">
                    The file name of the document.
                </param>
      <param name="isReload">true to reload a document; false to load a new document. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.MarkDocumentChangedForBackup"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.Microsoft#VisualStudio#Shell#Interop#IPersistFileFormat#GetClassID(System.Guid@)">
      <param name="classId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.Microsoft#VisualStudio#TextManager#Interop#IVsFileBackup#BackupFile(System.String)">
      <param name="pszBackupFileName"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.Microsoft#VisualStudio#TextManager#Interop#IVsFileBackup#IsBackupFileObsolete(System.Int32@)">
      <param name="pbObsolete"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnDocumentClosed(System.EventArgs)">
      <summary>
                    Alerts listeners that the document was closed.
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnDocumentClosing(System.EventArgs)">
      <summary>
                    Alerts listeners that the document will be closed. 
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnDocumentLoaded(System.EventArgs)">
      <summary>
                    Alerts listeners that the document is loaded.
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnDocumentLoading(System.EventArgs)">
      <summary>
                    Alerts listeners that the document will be loaded.
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnDocumentReadOnlyChanged(System.EventArgs)">
      <summary>
                    Alerts listeners that the read-only state of the document has changed.
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnDocumentReloaded(System.EventArgs)">
      <summary>
                    Alerts listeners that the document has been reloaded.
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnDocumentReloading(System.EventArgs)">
      <summary>
                    Alerts listeners that the document will be reloaded.
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnDocumentSaved(System.EventArgs)">
      <summary>
                    Alerts listeners that the document has been saved.
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnDocumentSaving(System.EventArgs)">
      <summary>
                    Alerts listeners that the document will be saved.
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnFileNameChanged(System.EventArgs)">
      <summary>
                    Alerts listeners that the file name of the document has changed.
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnHierarchyChanged(System.EventArgs)">
      <summary>
                    Alerts listeners that the Item ID that is assigned to the document has changed.
                </summary>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OnRegisterDocData(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>
                    Assigns the document to a cookie and project hierarchy.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="cookie">
                    The handle that represents the document in the hierarchy.
                </param>
      <param name="hierarchy">
                    The hierarchy.
                </param>
      <param name="itemId">
                    The Item ID that is assigned to the document in the hierarchy. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.OpenView(System.Guid,System.Object)">
      <summary>
                    Opens a specific view for the document.
                </summary>
      <param name="logicalView">
                    The GUID that specifies the view to open. This GUID must match the value that is specified in the registry for the editor that supports this view.
                </param>
      <param name="viewContext">
                    The object that gives additional context about the view to open. The editor factory that supports the logical view must be able to interpret this object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.QueryEditFile">
      <summary>
                    Alerts listeners that a document is about to be edited.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.QueryEditFile(System.String,Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags)">
      <summary>
                    Alerts listeners that a document is about to be edited.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult" /> object.
                </returns>
      <param name="fileName">
                    The file name of the document.
                </param>
      <param name="vsQueryEditFlags">
                    The flags that control how files are to be edited in memory. The default value is 0. For a list of flags, see the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags" /> enumeration. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.QuerySaveFile">
      <summary>
                    Alerts listeners that a file is about to be saved.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.QuerySaveFile(System.String,Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveFlags)">
      <summary>
                    Alerts listeners that a file is about to be saved.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult" /> object.
                </returns>
      <param name="fileName">
                    The file name of the document.
                </param>
      <param name="querySaveFlags">
                    The flags that control how  the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2" /> interface manages file attributes. The default value is 0. For a list of flags, see the  <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags" /> enumeration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.ReloadDocData(System.UInt32)">
      <summary>
                    Reloads the document. 
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="flags">
                    Indicates whether to ignore the next file change when the document is reloaded. For a list of flags, see <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRELOADDOCDATA" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.ReloadDocDataWorker(System.UInt32)">
      <summary>
                    Reloads the document.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="flags">
                    Indicates whether to ignore the next file change when the document is reloaded. For a list of flags, see <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRELOADDOCDATA" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.RenameDocData(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <summary>
                    Renames a document and resets its position in the hierarchy.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="attributes">
                    The new file attributes of the document. For a list of flags, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" />.
                </param>
      <param name="hierarchy">
                    The new <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document.
                </param>
      <param name="itemId">
                    The new Item ID for the document.
                </param>
      <param name="fileName">
                    The new file name for the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.ResumeFileChangeNotification(System.String)">
      <summary>
                    Resumes the distribution of document-change notifications for the document.
                </summary>
      <param name="fileName">
                    The file name of the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.Save(System.String)">
      <summary>
                    Saves the document.
                </summary>
      <param name="fileName">
                    The file name of the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.Save(System.String,System.Int32,System.UInt32)">
      <summary>
                    Saves the document.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, <see cref="F:Microsoft.VisualStudio.VSConstants.E_ABORT" />.
                </returns>
      <param name="fileName">
                    The file name of the document. 
                </param>
      <param name="remember">1 to retain the file name as the name of the document; otherwise, 0.
                </param>
      <param name="formatIndex">
                    Currently not implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.SaveCompleted(System.String)">
      <summary>
                    Alerts listeners that the document has been saved. 
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="fileName">
                    The name of the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.SaveDocData(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String@,System.Int32@)">
      <summary>
                    Saves the document to a specific location.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="flags">
                    Flags that describe how to save the document. For a list of flags, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" />.
                </param>
      <param name="fileName">
                    The file name of the document. 
                </param>
      <param name="saveCanceled">1 if the save was canceled; otherwise, 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.SaveSubordinateFile(Microsoft.VisualStudio.Modeling.Shell.DocData,System.String)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.ServiceProvider">
      <summary>
                    Gets the service provider from the shell.
                </summary>
      <returns>
                    The service provider. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.SetData(System.Guid@,System.Object)">
      <summary>
                    Sets the document to a buffer.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />.
                </returns>
      <param name="riidKey">
                    The ID for the document type. 
                </param>
      <param name="vtData">
                    The document to set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.SetDocDataDirty(System.Int32)">
      <summary>
                    Sets the document's <see cref="M:Microsoft.VisualStudio.Modeling.Shell.DocData.IsDirty(System.Int32@)" /> flag.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="isDirty">1 if the document data has changed since the most recent save operation; otherwise, 0. By default, this value is 1.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.SetDocDataReadOnly(System.Int32)">
      <summary>
                    Sets the document's read-only flag.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="newValue">1 if the document is read-only; otherwise, 0. By default, this value is 1.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.SetFileName(System.String)">
      <summary>
                    Initializes or changes the file name for the document.
                </summary>
      <param name="fileName">
                    The new file name for the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.SetHierarchyInfo(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>
                    Initializes or changes the project hierarchy for the document.
                </summary>
      <param name="hierarchy">
                    The new project hierarchy.
                </param>
      <param name="itemId">
                    The Item ID that is assigned to the document in the project hierarchy. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.SetUntitledDocPath(System.String)">
      <summary>
                    Currently not implemented.
                </summary>
      <returns>
                    Currently not implemented.
                </returns>
      <param name="fileName">
                    Currently not implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.ShowSaveOptionsDlg(System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    Shows a dialog box from which the user can specify additional options for save formats.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, it returns an error code.
                </returns>
      <param name="dwReserved">
                    Reserved for future use.
                </param>
      <param name="hwndDlgParent">
                    The parent of the Save As dialog box.
                </param>
      <param name="pszFilename">
                    The file name of the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.SuspendFileChangeNotification(System.String)">
      <summary>
                    Suspends the distribution of document-change notifications for the document.
                </summary>
      <param name="fileName">
                    The file name of the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocData.System#IDisposable#Dispose">
      <summary>
                    Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DocData" /> class.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.UndoManager">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> interface for the document.
                </summary>
      <returns>
        <see cref="The T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> interface for the document.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.UndoManagerIsShared">
      <summary>
                    Gets the document and verifies whether more than one document is sharing the same <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> interface. 
                </summary>
      <returns>true if more than one document is sharing the same <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> interface; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocData.VSUndoManager">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> interface. 
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> interface.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.DocumentSavedEventArgs"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DocumentSavedEventArgs.#ctor(System.String,System.String)">
      <param name="oldFileName"></param>
      <param name="newFileName"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocumentSavedEventArgs.NewFileName"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.DocumentSavedEventArgs.OldFileName"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.DslModelExplorerFilter"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DslModelExplorerFilter.ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,Microsoft.VisualStudio.Modeling.ElementLink)">
      <param name="walker"></param>
      <param name="sourceElement"></param>
      <param name="sourceRoleInfo"></param>
      <param name="domainRelationshipInfo"></param>
      <param name="targetRelationship"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.DynamicStatusMenuCommand">
      <summary>
                    Reduces merge conflicts during server integrations when you invoke a menu command.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.DynamicStatusMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DynamicStatusMenuCommand" /> class. 
                </summary>
      <param name="statusHandler">
                    The event handler that is called when the menu command status must be updated.
                </param>
      <param name="invokeHandler">
                    The event handler that is called when the menu command is invoked.
                </param>
      <param name="id">
                    The command ID for the menu command.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver.#ctor(System.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver.Dispose">
      <summary>
                    Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver.Finalize"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver.OnValidationBeginning(Microsoft.VisualStudio.Modeling.Validation.ValidationContext)">
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver.OnValidationEnded(Microsoft.VisualStudio.Modeling.Validation.ValidationContext)">
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver.OnValidationMessageAdded(Microsoft.VisualStudio.Modeling.Validation.ValidationMessage)">
      <param name="addedMessage"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver.OnValidationMessageRemoved(Microsoft.VisualStudio.Modeling.Validation.ValidationMessage)">
      <param name="removedMessage"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver.OnValidationMessagesChanging(System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Modeling.Validation.ValidationMessage},System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Modeling.Validation.ValidationMessage},System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Modeling.Validation.ValidationMessage},System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Modeling.Validation.ValidationMessage})">
      <param name="messagesBeforeUpdate"></param>
      <param name="messagesRemoved"></param>
      <param name="messagesAdded"></param>
      <param name="messagesAfterUpdate"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ErrorListObserver.TaskProvider"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ExplorerElementVisitor">
      <summary>
                    Represents a visiting function, also known as an element visitor, which traverses the in-memory store (IMS) model and adds nodes to the navigation tree for Model Explorer.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ExplorerElementVisitor.#ctor(Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ExplorerElementVisitor" /> class. 
                </summary>
      <param name="treeContainer">
                    The navigation tree in Model Explorer for the element visitor to traverse.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ExplorerElementVisitor.EndTraverse(Microsoft.VisualStudio.Modeling.ElementWalker)">
      <summary>
                    Ends the element visitor's traversal of the navigation tree for Model Explorer.
                </summary>
      <param name="walker">
                    The element visitor that is traversing the navigation tree for Model Explorer.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ExplorerElementVisitor.PruneTree">
      <summary>
                    Removes obsolete nodes from the navigation tree for Model Explorer.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ExplorerElementVisitor.StartTraverse(Microsoft.VisualStudio.Modeling.ElementWalker)">
      <summary>
                    Begins the element visitor's traversal of the navigation tree for Model Explorer.
                </summary>
      <param name="walker">
                    The element visitor that is traversing the navigation tree.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ExplorerElementVisitor.TreeContainer">
      <summary>
                    Gets the navigation tree to traverse in Model Explorer.
                </summary>
      <returns>
                    The navigation tree to traverse in Model Explorer.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ExplorerElementVisitor.TreeNodeHash">
      <summary>
                    Gets the table of nodes that appears in the navigation tree for Model Explorer.
                </summary>
      <returns>
                    The table of nodes that appears in the navigation tree for Model Explorer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ExplorerElementVisitor.Visit(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Verifies whether an element visitor is traversing the navigation tree for Model Explorer.
                </summary>
      <returns>true if an element visitor is traversing the navigation tree for Model Explorer; otherwise, false.
                </returns>
      <param name="walker">
                    The element visitor that is traversing the navigation tree.
                </param>
      <param name="modelElement">
                    The model element that is being visited.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ExplorerTreeNode">
      <summary>
                    Represents a node in the Model Explorer tree view. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ExplorerTreeNode.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ExplorerTreeNode" /> class.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ExplorerTreeNode.KeepNode">
      <summary>
                    Gets or sets the node to keep when you update (prune) the navigation tree.
                </summary>
      <returns>
                    The node to keep.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ExplorerTreeNode.ProvideNodeText">
      <summary>
                    Provides the text for the node. 
                </summary>
      <returns>
                    The text for the node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ExplorerTreeNode.UpdateNodeText">
      <summary>
                    Updates the text for the node.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs">
      <summary>
                    Represents the arguments for the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs.#ctor(System.Int32,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs" /> class.
                </summary>
      <param name="exportedDiagramsCount">
                    The number of diagrams that have been exported in the current operation.
                </param>
      <param name="projectItem">
                    The file name of the diagram that is being exported.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs.#ctor(System.Int32,System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs" /> class.
                </summary>
      <param name="exportedDiagramsCount">
                    The number of diagrams that have been exported in the current operation.
                </param>
      <param name="projectFile">
                    The file name of the diagram that is being exported.
                </param>
      <param name="exception">
                    The exception that relates to the current error, if any.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs.Continue">
      <summary>
                    Gets and sets continueExporting, which determines whether the current operation should continue to export diagrams if an error occurs. 
                </summary>
      <returns>true if the current operation should continue if an error occurs; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs.ErrorMessage">
      <summary>
                    Gets the error message for the error.
                </summary>
      <returns>
                    The error message for the error.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs.Exception">
      <summary>
                    Gets the error that occurred when the current diagram was being exported.
                </summary>
      <returns>
                    The error that occurred when the current diagram was being exported.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs.ExportedDiagramsCount">
      <summary>
                    Gets the number of diagrams that were exported before the error occurred. 
                </summary>
      <returns>
                    The number of diagrams that were exported before the error occurred.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ExportErrorEventArgs.ProjectFile">
      <summary>
                    Gets the file name of the diagram that was being exported when the error occurred. 
                </summary>
      <returns>
                    The file name of the diagram that was being exported when the error occurred.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ExportUserAction"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ExportUserAction.FileAlreadyExist"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.FileCancelException">
      <summary>
                    Represents the exception that is thrown if a problem occurs when a user cancels a save operation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.FileCancelException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.FileCancelException" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.FileCancelException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.FileCancelException" /> class.
                </summary>
      <param name="message">
                    The error message that explains why the exception was thrown..
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.FileCancelException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.FileCancelException" /> class.
                </summary>
      <param name="message">
                    The error message that explains why the exception was thrown.
                </param>
      <param name="innerException">
                    The exception that caused the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block for the inner exception.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.GetModelElementDisplayNameEventHandler"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService">
      <summary>
                    Monitors the current selection state in the shell.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.CommandContextChanged">
      <summary>
                    Occurs when the command UI context is activated or deactivated. 
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.CurrentDocument">
      <summary>
                    Gets the active document.  
                </summary>
      <returns>
                    The active document.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.CurrentDocumentView">
      <summary>
                    Gets the active document view.
                </summary>
      <returns>
                    The active document view.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.CurrentSelectionContainer">
      <summary>
                    Gets the active selection container.
                </summary>
      <returns>
                    The active selection container.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.CurrentUndoManager">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> that is assigned to the document window that is active.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> that is assigned to the document window that is active.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.CurrentWindow">
      <summary>
                    Gets the document pane or tool window pane that is active.
                </summary>
      <returns>
                    The document pane or tool window pane that is active.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.CurrentWindowFrame">
      <summary>
                    Gets the document frame or tool window frame that is active.
                </summary>
      <returns>
                    The document frame or tool window frame that is active.
                </returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.DocumentChanged">
      <summary>
                    Occurs when the document changes.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.DocumentWindowChanged">
      <summary>
                    Occurs when the document window changes. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.GetCommandContextCookie(System.Guid)">
      <summary>
                    Gets the cookie that is assigned to the specified command UI context.
                </summary>
      <returns>
                    The cookie that is assigned to the specified command UI context.
                </returns>
      <param name="commandContext">
                    The GUID of the command UI context. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.IsCommandContextActive(System.Guid)">
      <summary>
                    Verifies whether the specified command UI context is active.
                </summary>
      <returns>true if the command UI context is active; otherwise, false.
                </returns>
      <param name="commandContext">
                    The GUID for the command UI context that you want to verify.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.IsCommandContextActive(System.UInt32)">
      <summary>
                    Verifies whether the command UI context for the specified cookie is active.
                </summary>
      <returns>true if the command UI context for the specified cookie is active; otherwise, false.
                </returns>
      <param name="cookie">
                    The cookie that is assigned to the command UI context.
                </param>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.SelectionChanged">
      <summary>
                    Occurs when the current selection changes.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.UndoManagerChanged">
      <summary>
                    Occurs when the current <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> changes. 
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.IMonitorSelectionService.WindowChanged">
      <summary>
                    Occurs when the window frame changes.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.IncludeInResultsCallback"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.IncludeResults"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.IncludeResults.Exclude"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.IncludeResults.Include"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.IncludeResults.StopCurrentHierarchySearch"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.IncludeResults.StopSearch"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.IncludeResults.StopDescendingHierarchy"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction">
      <summary>
                    Manages the opening and closing of a globally linked transaction and any in-memory store (IMS) transactions that are in the linked transaction.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction.#ctor(System.String,System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction" /> class.
                </summary>
      <param name="description">
                    The description that appears in the Undo/Redo list.
                </param>
      <param name="serviceProvider">
                    The service provider that is used to obtain the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager" /> interface.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction.#ctor(System.String,System.IServiceProvider,Microsoft.VisualStudio.Modeling.Shell.ModelingDocData)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction" /> class.
                </summary>
      <param name="description">
                    The description that appears in the Undo/Redo list.
                </param>
      <param name="serviceProvider">
                    The service provider that is used to obtain the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager" /> interface.
                </param>
      <param name="docData">
                    The document that initiated the linked transaction.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction.Commit">
      <summary>
                    Commits the IMS transaction and the linked undo transaction.  
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction.Dispose">
      <summary>
                    Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction.Finalize">
      <summary>
                    Finalizes the transaction but does not dispose the transaction. 
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction.GlobalUndoContext">
      <summary>
                    Gets the global undo context for the transaction. 
                </summary>
      <returns>
                    The global undo context for the transaction.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction.HasPendingChanges">
      <summary>
                    Gets the IMS transaction and verifies whether it contains changes that have not completed.
                </summary>
      <returns>true if the IMS transaction contains changes that have not completed; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction.IsActive">
      <summary>
                    Gets the IMS transaction and verifies whether it is currently active. 
                </summary>
      <returns>true if the IMS transaction is active; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction.Rollback">
      <summary>
                    Undoes the IMS transaction and the linked undo transaction.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.LinkedTransaction.Transaction">
      <summary>
                    Gets the IMS transaction. 
                </summary>
      <returns>
                    The IMS transaction.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator.#ctor(System.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator.FindAndOpenDocView(System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
      <param name="logicalView"></param>
      <param name="diagram"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator.FindDocView(System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
      <param name="logicalView"></param>
      <param name="diagram"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator.MonitorSelection"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator.NavigateTo(System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
      <param name="logicalView"></param>
      <param name="targetDiagram"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator.NavigateTo(System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem})">
      <param name="logicalView"></param>
      <param name="targetDiagram"></param>
      <param name="targetSelection"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator.NavigateTo(System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem})">
      <param name="logicalView"></param>
      <param name="diagramItem"></param>
      <param name="extendedSelection"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator.NavigateTo(System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem},System.Boolean)">
      <param name="logicalView"></param>
      <param name="targetDiagramItem"></param>
      <param name="extendedSelection"></param>
      <param name="changeSelection"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator.NavigateTo(System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
      <param name="logicalView"></param>
      <param name="targetShape"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator.ServiceProvider"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelElementTreeNode">
      <summary>
                    Represents a node for an element in the navigation tree for Model Explorer.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelElementTreeNode.#ctor(Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelElementTreeNode" /> class.
                </summary>
      <param name="container">
                    The container for the Model Explorer navigation tree.
                </param>
      <param name="modelElement">
                    The element to appear as the node in the navigation tree for Model Explorer.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelElementTreeNode.ModelElement">
      <summary>
                    Gets the element to appear as a node in the navigation tree.
                </summary>
      <returns>
                    The element to appear as a node in the navigation tree.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelElementTreeNode.ProvideNodeText">
      <summary>
                    Provides the text for the node in the navigation tree for Model Explorer.
                </summary>
      <returns>
                    The text for the node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelElementTreeNode.ShowDomainClass">
      <summary>
                    Gets or sets the domain class name and verifies whether it should appear next to the element name in the node.
                </summary>
      <returns>true if the domain class name should appear next to the element name in the node; otherwise, false.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow">
      <summary>
                    Represents the tool window, which hosts Model Explorer.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow" /> class.
                </summary>
      <param name="serviceProvider">
                    The Visual Studio service provider that retrieves shell services.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow.CreateTreeContainer">
      <summary>
                    Creates the container for the navigation tree in Model Explorer.
                </summary>
      <returns>
                    The container for the navigation tree in Model Explorer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow" /> and optionally releases the managed resources. 
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow.EnableUndo">
      <summary>
                    Gets the undo operation and verifies whether it is enabled for the tool window.
                </summary>
      <returns>true if the undo operation is enabled; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow.OnDocumentWindowChanged(Microsoft.VisualStudio.Modeling.Shell.ModelingDocView,Microsoft.VisualStudio.Modeling.Shell.ModelingDocView)">
      <summary>
                    Notifies derived classes if a change is made in the document window.
                </summary>
      <param name="oldView">
                    The view for the document window in the previous frame.
                </param>
      <param name="newView">
                    The view for the document window in the current frame.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow.OnToolWindowCreate">
      <summary>
                    Listens for frame changes in a document window.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow.TreeContainer">
      <summary>
                    Gets the container for the navigation tree in Model Explorer.
                </summary>
      <returns>
                    The container for the navigation tree in Model Explorer.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow.Window">
      <summary>
                    Gets the Model Explorer window.
                </summary>
      <returns>
                    The Model Explorer window.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow.WindowTitle">
      <summary>
                    Gets the title of the Model Explorer window.
                </summary>
      <returns>
                    The title of the Model Explorer window.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer">
      <summary>
                    Represents Model Explorer, which contains a tree view in alphabetical order of all elements in a model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer" /> class. 
                </summary>
      <param name="serviceProvider">
                    The service provider that retrieves shell services.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.AddCommandHandlers(System.ComponentModel.Design.IMenuCommandService)">
      <summary>
                    Provides methods to find, invoke, and remove menu commands from the shortcut menu.
                </summary>
      <param name="menuCommandService">
                    The <see cref="T:System.ComponentModel.Design.IMenuCommandService" /> interface to use with the commands.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.AddExplorerNodeCustomSetting(System.Guid,System.Drawing.Image,System.Boolean)">
      <summary>
                    Associates an image with an element type in Model Explorer.
                </summary>
      <param name="domainClassId">
                    The GUID that is assigned to the model to which the element belongs.
                </param>
      <param name="treeNodeImage">
                    The image to use with the element.
                </param>
      <param name="showDomainClassName">true if you want to show the name of the element in Model Explorer; otherwise, false if you want to show only the image.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.AddHiddenPath(System.Collections.Generic.ICollection{System.Guid})">
      <summary>
                    Gets the paths of the elements that you want to hide in Model Explorer.
                </summary>
      <param name="path">
                    The path (in GUID form) of the element that you want to hide from Model Explorer. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.AddRootElement(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Adds an element to the root of the tree view in Model Explorer.
                </summary>
      <param name="rootElement">
                    The element to add to the root of the tree view in Model Explorer.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ContextMenuCommandId">
      <summary>
                    Gets the shortcut menu to display for Model Explorer.
                </summary>
      <returns>
                    The command ID that is assigned to the shortcut menu.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.CreateElementVisitor">
      <summary>
                    Creates an <see cref="T:Microsoft.VisualStudio.Modeling.IElementVisitor" /> interface.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.IElementVisitor" /> interface. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.CreateElementVisitorFilter">
      <summary>
                    Creates an <see cref="T:Microsoft.VisualStudio.Modeling.IElementVisitorFilter" /> interface.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.IElementVisitorFilter" /> interface. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.CreateModelElementTreeNode(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Creates a node in the tree view.
                </summary>
      <returns>
                    The node.
                </returns>
      <param name="modelElement">
                    The element in the tree view that represents the node.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.CreateRoleGroupTreeNode(Microsoft.VisualStudio.Modeling.DomainRoleInfo)">
      <summary>
                    Creates a tree node that contains a group of subnodes for each element that is in the relationship as a target role.
                </summary>
      <returns>
                    The node.
                </returns>
      <param name="targetRoleInfo">
                    Information about the element that is in the relationship as a target role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.CreateRoleTreeNode(Microsoft.VisualStudio.Modeling.DomainRoleInfo)">
      <summary>
                    Creates a tree node that contains a group of subnodes for the element that is in the relationship as the target role.
                </summary>
      <returns>
                    The node.
                </returns>
      <param name="targetRoleInfo">
                    Information about the element that is in the relationship as the target role.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.CurrentParentElement">
      <summary>
                    Gets the parent element of the element that is selected in Model Explorer.
                </summary>
      <returns>
                    The parent element of the element that is selected in Model Explorer; if the element has no parent, null.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.Dispose(System.Boolean)">
      <param name="disposing"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ElementOperations"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ElementVisitor">
      <summary>
                    Gets the element visitor, which traverses the in-memory store and adds nodes to the Model Explorer tree as needed.
                </summary>
      <returns>
                    The element visitor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ElementVisitorFilter">
      <summary>
                    Gets the element visitor filter, which determines the nodes that the element visitor adds to the Model Explorer tree.
                </summary>
      <returns>
                    The element visitor filter. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.FindNodeForElement(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Finds the node to which the element is assigned in Model Explorer.
                </summary>
      <returns>
                    The node that is assigned to the element; if the element is not assigned to a node, null.
                </returns>
      <param name="element">
                    The element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.FindRootElements(Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Finds all orphaned elements in Model Explorer.
                </summary>
      <returns>
                    A list of orphaned elements in Model Explorer.
                </returns>
      <param name="store">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> in which the orphaned elements are located.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.GetModelElementDisplayNameEventHandler">
      <summary>
                    Gets the event handler that lets a derived class supply a display name for an element in Model Explorer.
                </summary>
      <returns>
                    The event handler that lets a derived class supply a display name for an element in Model Explorer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.InsertTreeNode(System.Windows.Forms.TreeNodeCollection,Microsoft.VisualStudio.Modeling.Shell.ExplorerTreeNode)">
      <summary>
                    Puts a node in the tree view.
                </summary>
      <param name="siblingNodes">
                    The previous node and the next node in the tree view.
                </param>
      <param name="node">
                    The node to put in the tree view.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.IsValidDocData">
      <summary>
                    Gets the document and verifies whether it is in a format that the generated designer for a domain-specific language can read.
                </summary>
      <returns>true if the document has a valid format; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ModelingDocData">
      <summary>
                    Gets or sets a document in memory.
                </summary>
      <returns>
                    The document in memory.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ObjectModelBrowser">
      <summary>
                    Gets the tree view that appears in Model Explorer.
                </summary>
      <returns>
                    The tree view that appears in Model Explorer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.OnGotFocus(System.EventArgs)">
      <summary>
                    Performs an event on the selected element.
                </summary>
      <param name="e">
                    The event data that is the event arguments process.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ProcessOnMenuDeleteAllCommand">
      <summary>
                    Deletes a node and all the elements in it.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ProcessOnMenuDeleteCommand">
      <summary>
                    Deletes an element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ProcessOnMenuPropertiesCommand">
      <summary>
                    Opens the Properties tab.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ProcessOnStatusDeleteAllCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
                    Processes the Delete All command.
                </summary>
      <param name="cmd">
                    The Delete All command on the shortcut menu.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ProcessOnStatusDeleteCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
                    Processes the Delete command.
                </summary>
      <param name="cmd">
                    The Delete command on the shortcut menu.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ProcessOnStatusPropertiesCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
                    Processes the Properties command.
                </summary>
      <param name="cmd">
                    The menu command to process.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.RefreshBrowserView">
      <summary>
                    Refreshes Model Explorer.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.RemoveRootElement(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Removes an element from the root node in Model Explorer.
                </summary>
      <param name="rootElement">
                    The element to remove from the root node in Model Explorer.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.RootElementDomainClassId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.RootElements">
      <summary>
                    Gets the root elements in Model Explorer.
                </summary>
      <returns>
                    The root elements in Model Explorer.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.SelectedElement">
      <summary>
                    Gets the element that is selected in Model Explorer.
                </summary>
      <returns>
                    The element that is selected in Model Explorer; if no element is selected, null.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.SelectedRole">
      <summary>
                    Gets the role that is selected in Model Explorer.
                </summary>
      <returns>
                    The role that is selected in Model Explorer; if no role is selected, null.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.SelectionService">
      <summary>
                    Gets the interface through which users can select elements in Model Explorer.
                </summary>
      <returns>
                    The <see cref="T:System.ComponentModel.Design.ISelectionService" /> interface.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.ServiceProvider">
      <summary>
                    Gets the service provider that retrieves shell services.
                </summary>
      <returns>
                    The service provider that retrieves shell services.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.SubscribeToImsEvent(Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Subscribes to in-memory store events.
                </summary>
      <param name="newStore">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> to use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.TreeNodeTextChanged(Microsoft.VisualStudio.Modeling.Shell.ExplorerTreeNode)">
      <summary>
                    Alerts Model Explorer when the name of an element changes.
                </summary>
      <param name="node">
                    The node in which the text has changed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.UnsubscribeToImsEvent(Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Unsubscribes to in-memory store events.
                </summary>
      <param name="oldStore">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> that was used.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.VisitRelationships">
      <summary>
                    Gets relationships (links between domain elements) and verifies whether the relationships should be included as part of the element traversal.  
                </summary>
      <returns>true if relationships should be included as part of the element traversal; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelExplorerTreeContainer.WndProc(System.Windows.Forms.Message@)">
      <summary>
                    Processes window messages.  
                </summary>
      <param name="m">
                    The message to process.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData">
      <summary>
                    Represents a document in memory that is backed by an in-memory store (IMS).
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.#ctor(System.IServiceProvider,System.Guid)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData" /> class. 
                </summary>
      <param name="serviceProvider">
                    The service provider that retrieves Visual Studio services.
                </param>
      <param name="editorId">
                    The GUID of the editor factory that created the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.AddErrorListItem(Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListItem)">
      <summary>
                    Adds an error or warning message that you can use with the document.
                </summary>
      <param name="task">
                    The error or warning message.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.CleanupStores">
      <summary>
                    Clears the modeling designer stores before a document is reloaded into memory.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.ClearErrorListItems">
      <summary>
                    Clears the error and warning messages from the Error List window.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.CreateModelingDocStore(Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Creates a document for the modeling designer store.
                </summary>
      <returns>
                    The document for the modeling store. 
                </returns>
      <param name="store">
                    The modeling store that is associated with the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.CreateObject(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry,System.Guid,System.Guid)">
      <param name="localRegistry"></param>
      <param name="clsid"></param>
      <param name="typeId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.CreateStore">
      <summary>
                    Creates a modeling store. 
                </summary>
      <returns>
                    The modeling store. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData" /> and optionally releases the managed resources. 
                </summary>
      <param name="disposing">true if you want to release both managed and unmanaged resources; false if you want to release only unmanaged resources. 
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.ErrorListProvider">
      <summary>
                    Gets the error list provider for the document.
                </summary>
      <returns>
                    The error list provider.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.FlushUndoManager">
      <summary>
                    Clears the <see cref="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.UndoManager" /> class for the store.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.GetDomainModels">
      <summary>
                    Gets a collection of types to be loaded into the store.
                </summary>
      <returns>
                    A collection types to be loaded into the store.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.GetTextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <param name="ppTextBuffer"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.HasErrorListItems">
      <summary>
                    Gets the error list and verifies whether errors and warnings for the document appear in the Error List window.
                </summary>
      <returns>true if errors and warnings for the document appear in the Error List window; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.HideErrorListItems">
      <summary>
                    Hides all error and warning messages that are in the Error List window.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.Initialize">
      <summary>
                    Initializes the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.Initialize(Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Initializes the modeling designer store for the document.
                </summary>
      <param name="sharedStore">
                    The store for the model.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.InLoad">
      <summary>
                    Gets the document and verifies whether it is being loaded into the modeling window. 
                </summary>
      <returns>true if the document is being loaded into the modeling window; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.InReload">
      <summary>
                    Gets the document and verifies whether it is being reloaded into the modeling window.
                </summary>
      <returns>true if the document is being reloaded into the modeling window; otherwise, false. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.LoadDocData(System.String,System.Boolean)">
      <summary>
                    Loads a document that has a specific file name.
                </summary>
      <returns>
                    The document.
                </returns>
      <param name="fileName">
                    The name of the document.
                </param>
      <param name="isReload">true to reload the document; otherwise, false. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.LockTextBuffer(System.Int32)">
      <param name="fLock"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.ModelingDocStore">
      <summary>
                    Gets the modeling designer store that is assigned to the document.
                </summary>
      <returns>
                    The modeling designer store that is assigned to the document.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.OnDocumentClosed(System.EventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.OnHierarchyChanged(System.EventArgs)">
      <summary>
                    Notifies the base class when a document is added or renamed.
                </summary>
      <param name="e">
                    The event arguments.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.OpenView(System.Guid,System.Object)">
      <summary>
                    Opens a specific view for the document.
                </summary>
      <param name="logicalView">
                    The view to open.
                </param>
      <param name="viewContext">
                    The GUID that specifies the view to open.  This GUID must match the value that is specified in the registry for the editor that supports this view.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.ResumeErrorListRefresh">
      <summary>
                    Refreshes the Error List window every time that an error or warning message is added for the document.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.RootElement">
      <summary>
                    Gets the root element in the document. 
                </summary>
      <returns>
                    The root element or, if the document represents the modeling designer store, null.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.SerializedModel"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.SetRootElement(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Sets the root element.
                </summary>
      <param name="rootElement">
                    The element to set as the root element. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.SetTextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <param name="pTextBuffer"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.ShowErrorListItems">
      <summary>
                    Shows all error and warning messages in the Error List window.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.Store">
      <summary>
                    Gets the modeling designer store to which this document is assigned.
                </summary>
      <returns>
                    The name of the modeling designer store to which this document is assigned. Or, if the modeling store has already been disposed, null.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.SupportsLogicalView(System.Guid)">
      <summary>
                    Verifies whether the document supports the specified view.
                </summary>
      <returns>true if the document supports the specified view; otherwise, false.
                </returns>
      <param name="logicalView">
                    The GUID that is assigned to the view that you want to display for the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.SuspendErrorListRefresh">
      <summary>
                    Prevents the Error List window from refreshing.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.UndoManager">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> class, which you can use to undo and redo operations in the modeling designer store.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> class. Or, if the store has been disposed, null.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocData.UndoManagerIsShared">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> class and verifies whether it is shared among documents.
                </summary>
      <returns>true if the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> class is shared among documents; otherwise, false.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore">
      <summary>
                    Represents a model's in-memory elements and links.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore" /> class.
                </summary>
      <param name="serviceProvider">
                    The service provider that retrieves Visual Studio services.
                </param>
      <param name="store">
                    The store for the model.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.CanCommit(Microsoft.VisualStudio.Modeling.Transaction)">
      <summary>
                    Gets the modeling document store and verifies whether the top-level transaction can be committed.
                </summary>
      <returns>true if the top-level transaction can be committed; otherwise, false. 
                </returns>
      <param name="transaction">
                    The transaction.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.CanRefreshPropertyBrowser">
      <summary>
                    Gets the modeling document store and verifies whether the property window should automatically refresh. 
                </summary>
      <returns>true if the property window should be refreshed automatically; otherwise false. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.CanUndoRedo(System.Boolean,Microsoft.VisualStudio.Modeling.TransactionItem)">
      <summary>
                    Gets the modeling document store and verifies whether a transaction can be undone or redone.
                </summary>
      <returns>true if a user can undo or redo a transaction; otherwise, false.
                </returns>
      <param name="isUndo">true to indicate that this action is an Undo action; false to indicate that this action is a Redo action.
                </param>
      <param name="transaction">
                    The transaction to undo or redo.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.ConnectDocData(Microsoft.VisualStudio.Modeling.Shell.ModelingDocData)">
      <summary>
                    Creates a connection between the store and the model.
                </summary>
      <param name="docData">
                    The model to connect to the store.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.Context">
      <summary>
                    Gets the context for the store.
                </summary>
      <returns>
                    The context for the store.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.CreateUndoUnit(Microsoft.VisualStudio.Modeling.TransactionItem)">
      <summary>
                    Creates an instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoUnit" /> class, which enables transactions to be undone in the store.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoUnit" /> for the store.
                </returns>
      <param name="undoableTransaction">
                    The transaction to be undone.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.Dispose">
      <summary>
                    Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources that the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore" /> used and optionally releases the managed resources. 
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.FlushUndoManager">
      <summary>
                    Clears the transactions that the store maintained.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.Initialize">
      <summary>
                    Initializes the store for the model.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.ModelingDocStoreKey">
      <summary>
                    Key that indexes the store in the store's property bag.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.ModelingDocuments">
      <summary>
                    Gets the collection of models that are sharing the store.
                </summary>
      <returns>
                    The collection of models that are sharing the store.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.RemoveDocData(Microsoft.VisualStudio.Modeling.Shell.ModelingDocData)">
      <summary>
                    Removes the connection between the store and the model.
                </summary>
      <param name="docData">
                    The model to disconnect from the store.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.ServiceProvider">
      <summary>
                    Gets the service provider that retrieves Visual Studio shell services.
                </summary>
      <returns>
                    The service provider that retrieves Visual Studio shell services.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.ShareCount">
      <summary>
                    Gets the flag that indicates whether multiple models share the store.
                </summary>
      <returns>
                    The flag that indicates whether multiple models share the store.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.ShouldDisposeStore">
      <summary>
                    Gets the modeling document store and verifies whether the store should be disposed.
                </summary>
      <returns>true if the store should be disposed; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.Store">
      <summary>
                    Gets the store for the model.
                </summary>
      <returns>
                    The store for the model.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocStore.UndoManager">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> for the store.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> for the store.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView">
      <summary>
                    Represents a document window in the Domain-Specific Language Designer or generated designer.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.#ctor(Microsoft.VisualStudio.Modeling.Shell.ModelingDocData,System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView" /> class. 
                </summary>
      <param name="docData">
                    The document to appear in the document window.
                </param>
      <param name="serviceProvider">
                    The service provider that retrieves Visual Studio services.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.BaseLoadView"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.DefaultToolboxTabName">
      <summary>
                    Gets the name of the Toolbox tab that the user clicked.
                </summary>
      <returns>
                    An empty string.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.DefaultToolboxTabToolboxItemsCount"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView" /> and optionally releases the managed resources. 
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.DocData">
      <summary>
                    Gets a document for the document window.
                </summary>
      <returns>
                    The document.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.HasSelectableObjects">
      <summary>
                    Gets the document window and if the document window is open, enables the Select Objects option.
                </summary>
      <returns>true if the Select Objects option is enabled; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.Initialize">
      <summary>
                    Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.IsDataObjectSupported(System.Windows.Forms.IDataObject)">
      <summary>
                    Verifies whether an item in the Toolbox can be used with the document window.
                </summary>
      <returns>
                    The item and its attributes.
                </returns>
      <param name="data">
                    The item to check.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.IsPrimaryView">
      <summary>
                    Gets the document window and verifies whether this window is the primary document window.
                </summary>
      <returns>true if this window is the primary document window; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.IsSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>
                    Verifies whether the document window supports an item in the Toolbox.
                </summary>
      <returns>S_OK if the item is supported in the document window; otherwise, E_FAIL.
                </returns>
      <param name="data">
                    The item in the Toolbox.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.ItemPicked(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>
                    Notifies clients that a user clicked an item in the Toolbox or pressed ENTER to select the item.
                </summary>
      <returns>S_OK if the user clicked the item or pressed ENTER to select the item; otherwise, E_FAIL.
                </returns>
      <param name="data">
                    The item that the user clicked in the Toolbox.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.LoadView">
      <summary>
                    Verifies whether the document has loaded in a document window.
                </summary>
      <returns>true if the document loaded; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.Microsoft#VisualStudio#Shell#Interop#IVsStatusbarUser#SetInfo"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.OnCreate">
      <summary>
                    When the document is loaded, creates a view for the document window.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.OnToolboxItemSelected(System.Windows.Forms.IDataObject)">
      <summary>
                    When a user clicks an item in the Toolbox, calls <see cref="E:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.ToolboxItemSelected" />.
                </summary>
      <param name="data">
                    The item in the Toolbox.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.ProvideViewHelper">
      <summary>
                    Gets the document window and verifies whether a view helper should be created for the document window.
                </summary>
      <returns>true if the view helper should be created; otherwise, false. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.SetInfo">
      <summary>
                    Updates the status bar for the document window.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.TargetToolboxItemFilterAttributes">
      <summary>
                    Gets a collection of filter attributes for the document window.
                </summary>
      <returns>
                    The filter attributes.   
                </returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.ToolboxItemSelected">
      <summary>
                    Occurs when the user drags the selected item from the Toolbox to the document window.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingDocView.ToolboxService">
      <summary>
                    Gets the Toolbox service.
                </summary>
      <returns>
                    The Toolbox service.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory">
      <summary>
                    Provides support for the modeling editor factory, which enables the Visual Studio shell to obtain an editor for a specific file type. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory" /> class. 
                </summary>
      <param name="serviceProvider">
                    The service provider that retrieves Visual Studio services.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.CancelEditorCreate">
      <summary>
                    Gets the value of the cancelEditorCreate flag. If this value is larger than 0, this property prevents the modeling editor from being created and sets this flag to 0.
                </summary>
      <returns>
                    If the value of the cancelEditorCreate flag is larger than 0, the flag is set to 0.  
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.Close">
      <summary>
                    Releases all cached interface pointers and unregisters any event synchronizations.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.CreateDocData">
      <summary>
                    Creates a document in memory.
                </summary>
      <returns>
                    The document in memory.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.CreateDocData(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>
                    Creates a document in memory.
                </summary>
      <returns>
                    The document in memory.
                </returns>
      <param name="fileName">
                    The name of the document.
                </param>
      <param name="hierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />  that is assigned to the document.
                </param>
      <param name="itemId">
                    The ID that is assigned to the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.CreateDocView(Microsoft.VisualStudio.Modeling.Shell.ModelingDocData,System.String,System.String@)">
      <summary>
                    Creates a document in memory.
                </summary>
      <returns>
                    The document in memory.
                </returns>
      <param name="docData">
                    The document for which the view is being created.
                </param>
      <param name="physicalView">
                    The information that is particular to this view.
                </param>
      <param name="editorCaption">
                    The text that appears next to the document name on the document's tab.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)">
      <summary>
                    Creates a modeling editor.
                </summary>
      <returns>
                    The modeling editor.
                </returns>
      <param name="createFlags">
                    The flags that define how the modeling editor is created.
                </param>
      <param name="fileName">
                    The name of the document to open for editing.
                </param>
      <param name="physicalView">
                    The name of the modeling editor view.
                </param>
      <param name="hierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> for the project that contains the document.
                </param>
      <param name="itemId">
                    The ID of the document.
                </param>
      <param name="existingDocData">
                    If the document is already open in Visual Studio, the document.
                </param>
      <param name="docView">
                    The view for the document.
                </param>
      <param name="docData">
                    The document.
                </param>
      <param name="editorCaption">
                    The caption for the modeling editor.
                </param>
      <param name="cmdUI">
                    The GUID that is assigned to the modeling editor.
                </param>
      <param name="createDocWinFlags">
                    The flags to pass to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.Flags">
      <summary>
                    Gets a list of flags, which define how the modeling editor is created.
                </summary>
      <returns>
                    The list of flags.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.GetDocData(System.Object)">
      <summary>
                    Gets a document.
                </summary>
      <returns>
                    The document.
                </returns>
      <param name="existingDocData">
                    The document to obtain.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.HandleEditorCreationException(System.String,System.Exception)">
      <summary>
                    Handles an exception if one occurs when an additional modeling editor is created.
                </summary>
      <param name="fileName">
                    The name of the document.
                </param>
      <param name="exception">
                    The exception that was thrown.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.IsDocDataSupported(Microsoft.VisualStudio.Modeling.Shell.ModelingDocData)">
      <summary>
                    Verifies whether a document of a specific format can be used in the modeling editor.
                </summary>
      <returns>true if the document of a specific format can be used in the modeling editor; otherwise, false.
                </returns>
      <param name="data">
                    The document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.MapLogicalView(System.Guid,System.Object)">
      <summary>
                    Maps a logical view's GUID to a physical view.
                </summary>
      <returns>
                    The ID that is assigned to the diagram.
                </returns>
      <param name="logicalView">
                    The GUID that is assigned to the logical view.
                </param>
      <param name="viewContext">
                    The view's context object, which provides information about the view.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.MapLogicalView(System.Guid@,System.String@)">
      <summary>
                    Maps a logical view's GUID to a physical view.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="logicalView">
                    The GUID that is assigned to the logical view.
                </param>
      <param name="viewName">
                    The name of the logical view.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.OnAfterCloseSolution(System.Object)">
      <summary>
                    Notifies listening clients that the modeling editor has closed.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="pUnkReserved">
                    Reserved for future use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Notifies listening clients that the project has loaded.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="pStubHierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />  interface of the placeholder hierarchy for the unloaded project.
                </param>
      <param name="pRealHierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that was loaded.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>
                    Notifies listening clients that the project has opened.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="pHierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />  interface of the project that is being loaded.
                </param>
      <param name="fAdded">true if the project is added to the modeling editor after the modeling editor is opened; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.OnAfterOpenSolution(System.Object,System.Int32)">
      <summary>
                    Notifies listening clients that the modeling editor has opened.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="pUnkReserved">
                    Reserved for future use.
                </param>
      <param name="fNewSolution">true to notify clients that the modeling editor is being created; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>
                    Notifies listening clients that the project is about to be closed.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="pHierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />  interface of the project that is being closed.
                </param>
      <param name="fRemoved">true to notify clients that the project was removed from the modeling editor before the modeling editor was closed; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.OnBeforeCloseSolution(System.Object)">
      <summary>
                    Notifies listening clients that the modeling editor is about to be closed.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="pUnkReserved">
                    Reserved for future use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Notifies listening clients that the project is about to be unloaded.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="pRealHierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />  interface of the project that will be unloaded.
                </param>
      <param name="pStubHierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />  interface of the placeholder hierarchy for the project that is being unloaded.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)">
      <summary>
                    Queries listening clients as to whether the project can be closed.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="pHierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />  interface of the project that is being loaded.
                </param>
      <param name="fRemoving">true to query clients if the project is being removed from the modeling editor before the modeling editor is closed; otherwise, false.
                </param>
      <param name="pfCancel">true to query clients if a client prevented the project from closing; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.OnQueryCloseSolution(System.Object,System.Int32@)">
      <summary>
                    Notifies listening clients that the modeling editor has closed.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="pUnkReserved">
                    Reserved for future use.
                </param>
      <param name="pfCancel">true to notify clients that the modeling editor has closed without client approval; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>
                    Queries listening clients as to whether the project can be unloaded. 
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="pRealHierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />  interface of the project that was loaded.
                </param>
      <param name="pfCancel">true to query clients if the client did not approve the unloading of the project; otherwise, false.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.ServiceProvider">
      <summary>
                    Gets the service provider that retrieves Visual Studio services.
                </summary>
      <returns>
                    The service provider that retrieves Visual Studio services. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingEditorFactory.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>
                    Sets the service provider from which to access shell services.
                </summary>
      <returns>
                    If the method succeeds, it returns S_OK. If it fails, it returns an error code.
                </returns>
      <param name="site">
                    The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />  interface of the service provider to be set.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListItem"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListItem.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListItem.ErrorListProvider"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.AddItem(Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListItem)">
      <param name="newItem"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.Clear"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.Count"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.Dispose">
      <summary>
                    Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.HideItems"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <param name="docCookie"></param>
      <param name="grfAttribs"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <param name="docCookie"></param>
      <param name="pFrame"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <param name="docCookie"></param>
      <param name="dwRDTLockType"></param>
      <param name="dwReadLocksRemaining"></param>
      <param name="dwEditLocksRemaining"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterSave(System.UInt32)">
      <param name="docCookie"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <param name="docCookie"></param>
      <param name="fFirstShow"></param>
      <param name="pFrame"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <param name="docCookie"></param>
      <param name="dwRDTLockType"></param>
      <param name="dwReadLocksRemaining"></param>
      <param name="dwEditLocksRemaining"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.ResumeRefresh"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.ShowItems"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingErrorListProvider.SuspendRefresh"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage">
      <summary>
                    When overridden in a derived class, represents the VSPackage for the Domain-Specific Language Designer. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.AddOrReplaceToolboxItem(System.Drawing.Design.IToolboxService,Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem)">
      <summary>
                    Adds an item to the Toolbox or replaces an item in the Toolbox.
                </summary>
      <param name="toolbox">
                    The Toolbox service.
                </param>
      <param name="toolboxItem">
                    The Toolbox item to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.AddToolWindow(System.Type)">
      <summary>
                    Adds a tool window to the generated designer for a domain-specific language.
                </summary>
      <param name="toolWindowType">
                    The type of tool window to add. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.CreateLocator">
      <summary>
                    Creates a model element locator for the package.
                </summary>
      <returns>
                    The model element locator.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.CreateToolboxItems">
      <summary>
                    Creates the items in the Toolbox.
                </summary>
      <returns>
                    List of Toolbox items that are available in the Domain-Specific Language Designer package.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.CreateToolWindow(System.Guid@,System.UInt32)">
      <summary>
                    Creates a tool window.
                </summary>
      <returns>
                    The status of a method. If no errors are found, it returns success. Otherwise, an exception is returned.
                </returns>
      <param name="rguidPersistenceSlot">
                    The GUID that is assigned to the tool window.
                </param>
      <param name="dwToolWindowId">
                    The ID that is assigned to the tool window.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.DesignTimeRunMode">
      <summary>
                    Gets the modeling package and verifies whether the generated designer for the domain-specific language is running in debug mode.
                </summary>
      <returns>true if the generated designer is in debug mode; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.GetToolWindow(System.Type)">
      <summary>
                    Gets a tool window.
                </summary>
      <returns>
                    The tool window or null if no tool window is returned.
                </returns>
      <param name="toolWindowType">
                    The type of tool window to retrieve.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.GetToolWindow(System.Type,System.Boolean)">
      <summary>
                    Gets a tool window.
                </summary>
      <returns>
                    The tool window or null if no tool window is returned.
                </returns>
      <param name="toolWindowType">
                    The type of tool window to retrieve.
                </param>
      <param name="forceCreate">true to return only tool windows that belong to the Domain-Specific Language Designer package; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.Initialize">
      <summary>
                    Initializes the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage" /> class.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.Locator">
      <summary>
                    Gets the model element locator, which locates modeling elements in the package.
                </summary>
      <returns>
                    The model element locator, which locates modeling elements in the package.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.SetupDynamicToolbox">
      <summary>
                    Refreshes the items in the Toolbox.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingPackage.SetupMode">
      <summary>
                    Gets the modeling package and verifies whether the Domain-Specific Language Designer is being set up.
                </summary>
      <returns>true if the designer is in setup mode; otherwise, false.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelingSchemaResolver"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingSchemaResolver.#ctor(System.IServiceProvider)">
      <param name="sp"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingSchemaResolver.ResolveSchema(System.String)">
      <param name="targetNamespace"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane">
      <summary>
                    Provides selection service and selection event notification for both tool windows and document views. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane" /> class with the specified <see cref="T:System.IServiceProvider" />. 
                </summary>
      <param name="serviceProvider">
                    The service provider that is local to this window frame. This service provider retrieves Visual Studio selection services.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.ActiveInPlaceEditWindow">
      <summary>
                    Gets and sets the active window for in-place editing.
                </summary>
      <returns>
                    The active window for in-place editing. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.CommitPendingEditForCommand(System.ComponentModel.Design.CommandID)">
      <summary>
                    When implemented in a derived class, specifies whether pending edits should be committed before a command is executed.
                </summary>
      <returns>true if there are pending edits, otherwise false.
                </returns>
      <param name="command">
                    The ID that is assigned to the command before which pending edits should be committed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.CountAllObjects">
      <summary>
                    Gets the number of elements in the window pane.
                </summary>
      <returns>
                    The number of elements in the window pane.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.CountObjects(System.UInt32,System.UInt32@)">
      <summary>
                    Counts the number of elements in the window pane or in the current selection. 
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="flags">1 to count all elements in the window pane (calls <see cref="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.CountAllObjects" />); 2 to count only the elements that are selected in the window pane (calls <see cref="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.CountSelectedObjects" />).
                </param>
      <param name="count">
                    [out] The number of elements to count.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.CountSelectedObjects">
      <summary>
                    Gets the number of elements in the current selection.
                </summary>
      <returns>
                    The number of elements in the current selection. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane" /> and optionally releases the managed resources. 
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.DoSelectObjects(System.UInt32,System.Object[],System.UInt32)">
      <summary>
                    When implemented in a derived class, selects elements in the window pane.
                </summary>
      <param name="count">
                    The number of elements to select.
                </param>
      <param name="objects">
                    The collection of elements to select.
                </param>
      <param name="flags">
                    Flag that modifies the selection. If set to SELOBJS_ACTIVATEWINDOW, this parameter activates the window that contains the selected objects.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.Frame">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> that corresponds to this window..
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.GetAllObjects(System.UInt32,System.Object[])">
      <summary>
                    Gets all elements in the window pane.
                </summary>
      <param name="count">
                    The number of elements in the window pane.
                </param>
      <param name="objects">
                    The elements to obtain.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.GetComponentSelected(System.Object)">
      <summary>
                    Specifies whether the given component is selected.
                </summary>
      <returns>true if the component is selected, otherwise false.
                </returns>
      <param name="obj">
                    The element to verify.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.GetContainerSelected(System.Object)">
      <summary>
                    Specifies whether the given container is selected.
                </summary>
      <returns>true if the container is selected, otherwise false.
                </returns>
      <param name="value">
                    The container to verify.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.GetObjects(System.UInt32,System.UInt32,System.Object[])">
      <summary>
                    Gets either the elements that are currently selected or the elements that can be selected in the window pane. 
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="flags">
                    The type of objects to return. If set to 1, this method returns all objects that can be selected. If set to 2, the method returns only the objects that are selected.
                </param>
      <param name="count">
                    The requested number of objects to return.
                </param>
      <param name="objects">
                    The set of objects to be returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.GetSelectedComponents">
      <summary>
                    Gets the components that are selected in the window pane.
                </summary>
      <returns>
                    By default, this method returns a read-only array list based on <see cref="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SelectedElements" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.GetSelectedObjects(System.UInt32,System.Object[])">
      <summary>
                    Gets the elements that are selected in the window pane.
                </summary>
      <param name="count">
                    The number of objects to be returned.
                </param>
      <param name="objects">
                    The selected elements.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.GetService(System.Type)">
      <summary>
                    Gets the service of the specified type. Override this method to return the custom menu command service
                </summary>
      <returns>
                    The service of the specified type. By default, this method returns the following services:
                <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />, <see cref="T:System.ComponentModel.Design.IMenuCommandService" />, <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite" />, 
                <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx" />, and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />. If the type specified is <see cref="T:System.ComponentModel.Design.ISelectionService" />, it returns this window pane. If the type is <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />, it delegates to the local service provider.
                </returns>
      <param name="serviceType">
                    The type of menu command service to obtain. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.GetSite(System.Guid@,System.IntPtr@)">
      <summary>
                    Gets the site that was set with <see cref="M:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite(System.Object)" />. 
                </summary>
      <param name="id">
                    The interface ID to return.
                </param>
      <param name="site">
                    The site. 
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.HasSelectableObjects">
      <summary>
                    Returns whether this window pane has objects that can be selected.
                </summary>
      <returns>true if the window pane contains objects that can be selected; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.HelpService">
      <summary>
                    Gets the help service.
                </summary>
      <returns>
                    The <see cref="T:System.ComponentModel.Design.IHelpService" /> interface.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.Hide">
      <summary>
                    Hides the window pane.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.MenuService">
      <summary>
                    Gets the menu command service.
                </summary>
      <returns>
                    By default, the <see cref="T:System.ComponentModel.Design.IMenuCommandService" /> interface for the window pane.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.OnClose">
      <summary>
                    Removes window pane objects from the shortcut menu selection when the window pane is closed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.OnSelectionChanged(System.EventArgs)">
      <summary>
                    Notifies event listeners after the selection changes.
                </summary>
      <param name="e">
                    The event arguments.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.OnSelectionChanging(System.EventArgs)">
      <summary>
                    Notifies event listeners before the selection changes.
                </summary>
      <param name="e">
                    The event arguments.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.PreProcessMessage(System.Windows.Forms.Message@)">
      <summary>
                    Handles window messages.
                </summary>
      <returns>true if it was possible to handle the message, otherwise false. 
                </returns>
      <param name="m">
                    The window message.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.PrimarySelection">
      <summary>
                    Gets the primary selected element in the window pane. 
                </summary>
      <returns>
                    If the window contains no primary element, the first element in the <see cref="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SelectedElements" /> collection is returned.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SelectedElements">
      <summary>
                    Gets the elements that are selected in the window pane.
                </summary>
      <returns>
                    The elements that are selected in the window pane. 
                </returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SelectionChanged">
      <summary>
                    Fired after the selection in the window pane has changed.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SelectionChanging">
      <summary>
                    Fired before the selection in the window pane changes.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SelectionCount">
      <summary>
                    Gets the number of elements that are selected in the window pane. 
                </summary>
      <returns>
                    The number of elements that are selected in the window pane.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SelectionHelpService">
      <summary>
                    Gets the selection help service. 
                </summary>
      <returns>
                    The <see cref="T:System.ComponentModel.Design.IHelpService" /> interface for the local context.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SelectObjects(System.UInt32,System.Object[],System.UInt32)">
      <summary>
                    Selects elements in the window pane.
                </summary>
      <returns>
                    If elements that can be selected are found, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, <see cref="F:Microsoft.VisualStudio.VSConstants.E_UNEXPECTED" />.
                </returns>
      <param name="count">
                    The number of elements to select.
                </param>
      <param name="objects">
                    The collection of elements to select.
                </param>
      <param name="flags">
                    The flag to use to modify the selection. If set to SELOBJS_ACTIVATEWINDOW, this parameter activates the window with the selected objects.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.ServiceProvider">
      <summary>
                    Gets the service provider that is local to this window pane.
                </summary>
      <returns>
                    The service provider that is local to this window pane.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SetSelectedComponents(System.Collections.ICollection)">
      <summary>
                    Adds the specified components into the selection container and notifies the shell of the selection change.  
                </summary>
      <param name="components">
                    The collection of components to select.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>
                    Not currently implemented. 
                </summary>
      <param name="components">
                    Not currently implemented. 
                </param>
      <param name="selectionType">
                    Not currently implemented. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.SetSite(System.Object)">
      <summary>
                    Initializes the window pane in the environment.
                </summary>
      <param name="sp">
                    The <see cref="T:System.IServiceProvider" /> interface, which can obtain other interfaces.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.Show">
      <summary>
                    Displays the window pane, brings it to the front, and makes it the active window.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ModelingWindowPane.ShowNoActivate">
      <summary>
                    Displays the window pane, brings it to the front, but does not make it the active window.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.MonitorSelectionEventArgs">
      <summary>
                     Represents arguments for the monitor selection service.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.MonitorSelectionEventArgs.#ctor(System.Object,System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.MonitorSelectionEventArgs" /> class.
                </summary>
      <param name="oldValue">
                    The original <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> object.
                </param>
      <param name="newValue">
                    The new <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> object.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.MonitorSelectionEventArgs.NewValue">
      <summary>
                    Gets the new <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> object.
                </summary>
      <returns>
                    The new <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.MonitorSelectionEventArgs.OldValue">
      <summary>
                    Gets the original <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> object.
                </summary>
      <returns>
                    The original <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.NavigateToModelExplorerTreeNodeCommand"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.NavigateToModelExplorerTreeNodeCommand.#ctor(Microsoft.VisualStudio.Modeling.Shell.ModelExplorerToolWindow,Microsoft.VisualStudio.Modeling.Shell.ExplorerTreeNode,System.Int32)">
      <param name="modelExplorerToolWindow"></param>
      <param name="modelElementTreeNode"></param>
      <param name="priority"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.NavigateToModelExplorerTreeNodeCommand.DoCommand"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.NavigateToModelExplorerTreeNodeCommand.MenuText"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.NavigateToShapesOnDiagramCommand"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.NavigateToShapesOnDiagramCommand.#ctor(Microsoft.VisualStudio.Modeling.Shell.ModelElementLocator,Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem},System.Int32)">
      <param name="locator"></param>
      <param name="targetDiagram"></param>
      <param name="targetSelection"></param>
      <param name="priority"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.NavigateToShapesOnDiagramCommand.DoCommand"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.NavigateToShapesOnDiagramCommand.MenuText"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.PackageUtility"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.PackageUtility.ShowError(System.IServiceProvider,System.String)">
      <param name="serviceProvider"></param>
      <param name="errorText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.PackageUtility.ShowError(System.IServiceProvider,System.String,System.String)">
      <param name="serviceProvider"></param>
      <param name="errorText"></param>
      <param name="f1Keyword"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.PackageUtility.ShowMessageBox(System.IServiceProvider,System.String)">
      <param name="serviceProvider"></param>
      <param name="messageText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.PackageUtility.ShowMessageBox(System.IServiceProvider,System.String,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON)">
      <param name="serviceProvider"></param>
      <param name="messageText"></param>
      <param name="messageButtons"></param>
      <param name="defaultButton"></param>
      <param name="messageIcon"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.PackageUtility.ShowMessageBox(System.IServiceProvider,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON)">
      <param name="serviceProvider"></param>
      <param name="messageText"></param>
      <param name="f1Keyword"></param>
      <param name="messageButtons"></param>
      <param name="defaultButton"></param>
      <param name="messageIcon"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ProvideCommandLineSwitchAttribute">
      <summary>
                    Provides registry entries for a command-line switch.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ProvideCommandLineSwitchAttribute.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ProvideCommandLineSwitchAttribute" /> class.
                </summary>
      <param name="name">
                    The name of the command-line switch.
                </param>
      <param name="helpText">
                    The help text for the command-line switch.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ProvideCommandLineSwitchAttribute.Arguments">
      <summary>
                    Gets or sets the number of arguments for the command-line switch.
                </summary>
      <returns>
                    The number of arguments for the command-line switch.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ProvideCommandLineSwitchAttribute.DemandLoad">
      <summary>
                    Gets or sets the demand load, which determines whether demand loading should be enabled or disabled for the command-line switch.
                </summary>
      <returns>true if demand loading should be enabled for the command-line switch; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ProvideCommandLineSwitchAttribute.HelpText">
      <summary>
                    Gets the help text for the command-line switch.
                </summary>
      <returns>
                    The help text for the command-line switch.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ProvideCommandLineSwitchAttribute.Name">
      <summary>
                    Gets the name of the command-line switch.
                </summary>
      <returns>
                    The name of the command-line switch.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ProvideCommandLineSwitchAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>
                    Registers a command-line switch.
                </summary>
      <param name="context">
                    The context for the command-line switch. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ProvideCommandLineSwitchAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>
                    Unregisters a command-line switch.
                </summary>
      <param name="context">
                    The context for the command-line switch. 
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ProvideRelatedFileAttribute"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ProvideRelatedFileAttribute.#ctor(System.String,System.String)">
      <param name="parentExtension"></param>
      <param name="childExtension"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ProvideRelatedFileAttribute.ChildExtension"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ProvideRelatedFileAttribute.CSharpProjectGuid"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ProvideRelatedFileAttribute.FileOptions"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ProvideRelatedFileAttribute.ParentExtension"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ProvideRelatedFileAttribute.ProjectSystem"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ProvideRelatedFileAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ProvideRelatedFileAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <param name="context"></param>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ProvideRelatedFileAttribute.VisualBasicProjectGuid"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult">
      <summary>
                    Manages the results when there is a request to modify the document, and encapsulates the results of a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult.#ctor(Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult,Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult" /> structure. 
                </summary>
      <param name="result">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> flag, which determines whether the document can be edited. This flag is returned when there is a request to modify the document.
                </param>
      <param name="moreInfo">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags" /> flags, which describe editing attributes for the document. These flags are returned when there is a request to modify the document. 
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult.CanEditFile">
      <summary>
                    Gets the document and verifies whether it can be edited.
                </summary>
      <returns>true if the <paramref name="result" /> flag is <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_EditOK" />; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult.Equals(System.Object)">
      <summary>
                    Compares the object to another object and verifies whether they are equal.
                </summary>
      <returns>true if the object is equal to the other object; otherwise, false.
                </returns>
      <param name="obj">
                    The other object.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult.FileReloaded">
      <summary>
                    Gets the document and verifies whether it has been reloaded because of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" /> call.
                </summary>
      <returns>true if the <see cref="P:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult.MoreInfo" /> flag is <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_MaybeChanged" />; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult.GetHashCode">
      <summary>
                    Gets the hash code for the object.
                </summary>
      <returns>
                    The hash code for the object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult.MoreInfo">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags" /> flags, which describe editing attributes for the document.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags" /> flags, which describe editing attributes for the document.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult.op_Equality(Microsoft.VisualStudio.Modeling.Shell.QueryEditResult,Microsoft.VisualStudio.Modeling.Shell.QueryEditResult)">
      <summary>
                    Verifies whether two arguments are equal. 
                </summary>
      <returns>true if the arguments are equal; otherwise, false.
                </returns>
      <param name="arg1">
                    The first argument to compare.
                </param>
      <param name="arg2">
                    The second argument to compare.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult.op_Inequality(Microsoft.VisualStudio.Modeling.Shell.QueryEditResult,Microsoft.VisualStudio.Modeling.Shell.QueryEditResult)">
      <summary>
                    Verifies whether two arguments are unequal. 
                </summary>
      <returns>true if the arguments are not equal; otherwise, false.
                </returns>
      <param name="arg1">
                    The first argument to compare.
                </param>
      <param name="arg2">
                    The second argument to compare.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.QueryEditResult.Result">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> flag, which determines whether the document can be edited. 
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> flag, which determines whether a document can be edited.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult">
      <summary>
                    Manages the results when there is a request to save the document, and encapsulates the results of a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QuerySaveFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@)" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult.#ctor(Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult" /> structure. 
                </summary>
      <param name="result">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult" /> flag, which determines whether the document can be saved. The flag is returned when there is a request to save the document.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult.CanSaveFile">
      <summary>
                    Gets the document and verifies whether it can be saved.
                </summary>
      <returns>true if the <paramref name="result" /> flag is <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_SaveOK" />; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult.Equals(System.Object)">
      <summary>
                    Compares the object to another object and verifies whether they are equal.
                </summary>
      <returns>true if the object is equal to the other object; otherwise, false.
                </returns>
      <param name="obj">
                    The other object.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult.ForceSaveAs">
      <summary>
                    Gets the document and converts the Save operation to the Save As operation.
                </summary>
      <returns>true if the result flag is <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_ForceSaveAs" />; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult.GetHashCode">
      <summary>
                    Gets the hash code for the object.
                </summary>
      <returns>
                    The hash code for the object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult.op_Equality(Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult,Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult)">
      <summary>
                    Verifies whether two arguments are equal.
                </summary>
      <returns>true if the arguments are equal; otherwise, false.
                </returns>
      <param name="arg1">
                    The first argument to compare.
                </param>
      <param name="arg2">
                    The second argument to compare.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult.op_Inequality(Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult,Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult)">
      <summary>
                    Verifies whether two arguments are unequal.
                </summary>
      <returns>true if the arguments are not equal; otherwise, false.
                </returns>
      <param name="arg1">
                    The first argument to compare.
                </param>
      <param name="arg2">
                    The second argument to compare.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.QuerySaveResult.Result">
      <summary>
                    Gets the <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult" /> flag, which determines whether the document can be saved.
                </summary>
      <returns>
                    The <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult" /> flag, which determines whether a document can be saved.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.RegisterAdditionalEditorExtensionAttribute"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.RegisterAdditionalEditorExtensionAttribute.#ctor(System.Object,System.String,System.Int32)">
      <param name="factoryType"></param>
      <param name="extension"></param>
      <param name="priority"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.RegisterAdditionalEditorExtensionAttribute.Extension"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.RegisterAdditionalEditorExtensionAttribute.Factory"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.RegisterAdditionalEditorExtensionAttribute.Priority"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.RegisterAdditionalEditorExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.RegisterAdditionalEditorExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <param name="context"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.RegisterAsDslToolsEditorAttribute"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.RegisterAsDslToolsEditorAttribute.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.RegisterAsDslToolsEditorAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.RegisterAsDslToolsEditorAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <param name="context"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.RelatedFileType"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.RelatedFileType.None"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.RelatedFileType.Simple"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.RelatedFileType.FileName"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.RelatedFileType.CultureInfo"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.RelatedFileType.ChildIsNeverHidden"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.RelatedFileType.AllowSccOperationsOnChild"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.RelatedFileType.RemoveOnReplacingParent"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.RoleGroupTreeNode">
      <summary>
                    Represents the node that contains the child roles for a parent role in the navigation tree for Model Explorer. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.RoleGroupTreeNode.#ctor(Microsoft.VisualStudio.Modeling.DomainRoleInfo)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.RoleGroupTreeNode" /> class. 
                </summary>
      <param name="metaRole">
                    The name of the node.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.RoleGroupTreeNode.ProvideNodeText">
      <summary>
                    Supplies the text for the node.
                </summary>
      <returns>
                    The text for the node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.RoleGroupTreeNode.RoleInfo">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> object for the node.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> object for the node.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.RoleTreeNode"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.RoleTreeNode.#ctor(Microsoft.VisualStudio.Modeling.DomainRoleInfo)">
      <param name="metaRole"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.RoleTreeNode.ProvideNodeText"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.RoleTreeNode.RoleInfo"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.RoleTreeNode.RolePlayer"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.RoleTreeNode.ShowDomainClass"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.SerializationErrorListItem"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SerializationErrorListItem.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.SerializationMessage)">
      <param name="serviceProvider"></param>
      <param name="serializationMessage"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SerializationErrorListItem.#ctor(System.IServiceProvider,System.Guid,System.Guid,Microsoft.VisualStudio.Modeling.SerializationMessage)">
      <param name="serviceProvider"></param>
      <param name="navigationLogicalView"></param>
      <param name="navigationEditorFactoryId"></param>
      <param name="serializationMessage"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.SerializationErrorListItem.ErrorListProvider"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ShellUtility"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ShellUtility.FindFilesInSolution(Microsoft.VisualStudio.Modeling.Shell.IncludeInResultsCallback,System.IServiceProvider,System.Boolean)">
      <param name="callback"></param>
      <param name="serviceProvider"></param>
      <param name="includeInvisibleNodes"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ShellUtility.FindFilesInSolution(System.Collections.Generic.IList{System.String},System.IServiceProvider,System.Boolean)">
      <param name="fileExtensions"></param>
      <param name="serviceProvider"></param>
      <param name="includeInvisibleNodes"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ShellUtility.FindFilesInSolution(System.String,System.IServiceProvider,System.Boolean)">
      <param name="fileExtension"></param>
      <param name="serviceProvider"></param>
      <param name="includeInvisibleNodes"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ShellUtility.FindOpenedFiles(Microsoft.VisualStudio.Modeling.Shell.IncludeInResultsCallback,System.IServiceProvider)">
      <param name="callback"></param>
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ShellUtility.FindOpenedFiles(System.Collections.Generic.IList{System.String},System.IServiceProvider)">
      <param name="fileExtensions"></param>
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ShellUtility.FindOpenedFiles(System.String,System.IServiceProvider)">
      <param name="fileExtension"></param>
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ShellUtility.FindProjectsInSolution(Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
      <param name="solution"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ShellUtility.GetAvailableTypeFullNames(Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean)">
      <param name="rootElement"></param>
      <param name="includeTypesInReferenceAssemblies"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ShellUtility.IsVirtualFolder(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <param name="vsHierarchy"></param>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ShellUtility.VirtualFolderItemType"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.SingleDiagramDocView">
      <summary>
                    When overridden in a derived class, displays a single diagram in a document view.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SingleDiagramDocView.#ctor(Microsoft.VisualStudio.Modeling.Shell.ModelingDocData,System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.SingleDiagramDocView" /> class. 
                </summary>
      <param name="docData">
                    The diagram to display in the window view.
                </param>
      <param name="serviceProvider">
                    The service provider that creates windows in the graphical designer.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.SingleDiagramDocView.CurrentDesigner">
      <summary>
                    Gets the view for the diagram.
                </summary>
      <returns>
                    The view.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.SingleDiagramDocView.CurrentDiagram">
      <summary>
                    Gets the diagram.
                </summary>
      <returns>
                    The diagram.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.SingleDiagramDocView.Diagram">
      <summary>
                    Gets a diagram.
                </summary>
      <returns>
                    The diagram.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SingleDiagramDocView.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources that <see cref="T:Microsoft.VisualStudio.Modeling.Shell.SingleDiagramDocView" /> uses and optionally releases the managed resources. 
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.SingleDiagramDocView.Window">
      <summary>
                    Gets a window for the view.
                </summary>
      <returns>
                    The window.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocData"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocData.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Shell.DocData)">
      <param name="serviceProvider"></param>
      <param name="parentDocData"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocData.FormatList"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocData.IsDocDataDirty(System.Int32@)">
      <param name="isDirty"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocData.Load(System.String,System.Boolean)">
      <param name="fileName"></param>
      <param name="isReload"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocData.ParentDocData"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocData.Save(System.String)">
      <param name="fileName"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocumentLockHolder"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocumentLockHolder.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Shell.DocData,System.String,System.UInt32)">
      <param name="serviceProvider"></param>
      <param name="parentDocument"></param>
      <param name="fileName"></param>
      <param name="childItemId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocumentLockHolder.CloseDocumentHolder(System.UInt32)">
      <param name="dwSaveOptions"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocumentLockHolder.Dispose">
      <summary>
                    Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocumentLockHolder" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocumentLockHolder.ShowDocumentHolder"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocumentLockHolder.SubordinateDocData"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateDocumentLockHolder.UnregisterSubordinateDocument"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.SubordinateFileHelper"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateFileHelper.GetChildProjectItemFileNames(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <param name="parentHierarchy"></param>
      <param name="parentItemId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateFileHelper.GetChildProjectItemId(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <param name="parentHierarchy"></param>
      <param name="parentItemId"></param>
      <param name="extension"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateFileHelper.GetChildProjectItemIds(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <param name="parentHierarchy"></param>
      <param name="parentItemId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateFileHelper.LockSubordinateDocument(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Shell.DocData,System.String,System.UInt32)">
      <param name="serviceProvider"></param>
      <param name="parentDocData"></param>
      <param name="childFileName"></param>
      <param name="childItemId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.SubordinateFileHelper.LockSubordinateDocument(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Shell.DocData,System.UInt32)">
      <param name="serviceProvider"></param>
      <param name="parentDocData"></param>
      <param name="childItemId"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.TaskMenuCommand"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.TaskMenuCommand.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.TaskMenuCommand.#ctor(System.Int32)">
      <param name="priority"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.TaskMenuCommand.DoCommand"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.TaskMenuCommand.MenuText"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.TaskMenuCommand.Priority"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.TaskValidationMessage"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.TaskValidationMessage.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationContext,System.String,Microsoft.VisualStudio.Shell.TaskCategory,System.String,Microsoft.VisualStudio.Modeling.Validation.ViolationType,System.String)">
      <param name="context"></param>
      <param name="description"></param>
      <param name="category"></param>
      <param name="code"></param>
      <param name="violationType"></param>
      <param name="helpKeyword"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.TaskValidationMessage.Category"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.TaskValidationMessage.Configure(Microsoft.VisualStudio.Modeling.Shell.ValidationTask)">
      <param name="task"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.TaskValidationMessage.File"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.TaskValidationMessage.IsMatch(EnvDTE.TaskItem)">
      <param name="taskItem"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.TaskValidationMessage.IsMatch(Microsoft.VisualStudio.Shell.Interop.IVsTaskItem)">
      <param name="taskItem"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ToolWindow">
      <summary>
                    When overridden by a derived class, represents a tool window in the generated designer for a domain-specific language.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ToolWindow" /> class. 
                </summary>
      <param name="serviceProvider">
                    The service provider that retrieves shell services.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.BitmapIndex">
      <summary>
                    When overriden in a derived class, gets the index of the bitmap that appears next to the name of the tool window. 
                </summary>
      <returns>
                    The index of the bitmap.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.BitmapResource">
      <summary>
                    When overriden in a derived class, gets the resource ID of the bitmap that appears next to the name of the tool window.
                </summary>
      <returns>
                    The resource ID of the bitmap.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ToolWindow" /> and optionally releases the managed resources. 
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.DocData">
      <summary>
                    Gets a document in memory. 
                </summary>
      <returns>
                    The document in memory.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.EnableUndo">
      <summary>
                    Gets the tool window and enables the Undo command.
                </summary>
      <returns>true if the Undo command should be enabled; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.HasSelectableObjects">
      <summary>
                    Gets the tool window disables the Select Objects command if a document is not loaded.
                </summary>
      <returns>true if the Select Objects command should be enabled; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.HasToolBar">
      <summary>
                    Gets the tool window and verifies whether it should have a toolbar.
                </summary>
      <returns>true if the tool window should have a toolbar; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.Initialize">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.ToolWindow" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.OnCreate">
      <summary>
                    Creates a tool window.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.OnDocumentWindowChanged(Microsoft.VisualStudio.Modeling.Shell.ModelingDocView,Microsoft.VisualStudio.Modeling.Shell.ModelingDocView)">
      <summary>
                    Notifies derived classes if a user makes a change in the document window.
                </summary>
      <param name="oldView">
                    The view for the document window in the previous frame.
                </param>
      <param name="newView">
                    The view for the document window in the current frame.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.OnToolWindowCreate">
      <summary>
                    Listens for frame changes in a document window 
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.ToolBarHost">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost" /> interface, which determines how toolbars appear in the tool window.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.ToolWindowFont">
      <summary>
                    Gets the font to use for the tool window.
                </summary>
      <returns>
                    The font that is used by the Visual Studio shell for tool windows.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ToolWindow.WindowTitle">
      <summary>
                    Gets the title of the tool window.
                </summary>
      <returns>
                    The title of the tool window.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.TransactionCommitHandler"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoManager.#ctor(System.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoManager.#ctor(System.IServiceProvider,Microsoft.VisualStudio.OLE.Interop.IOleUndoManager)">
      <param name="serviceProvider"></param>
      <param name="oleUndoManager"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoManager.Add(Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit)">
      <param name="undoUnit"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoManager.DiscardUndoStacks(System.Boolean)">
      <param name="markAsClean"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoManager.Dispose">
      <summary>
                    Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoManager.Dispose(System.Boolean)">
      <param name="disposing"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoManager.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <param name="cmdGroup"></param>
      <param name="cmdId"></param>
      <param name="cmdExecOptions"></param>
      <param name="inValue"></param>
      <param name="outValue"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoManager.Finalize"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.UndoManager.IsDirty"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoManager.OnInterveningUnitBlockingLinkedUndo"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoManager.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <param name="cmdGroup"></param>
      <param name="commandCount"></param>
      <param name="commands"></param>
      <param name="cmdText"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.UndoManager.VSUndoManager"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.UndoUnit"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoUnit.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Context,Microsoft.VisualStudio.Modeling.Shell.TransactionCommitHandler)">
      <param name="serviceProvider"></param>
      <param name="context"></param>
      <param name="commitHandler"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoUnit.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Context,Microsoft.VisualStudio.Modeling.Shell.TransactionCommitHandler,Microsoft.VisualStudio.Modeling.Shell.DescriptionHandler)">
      <param name="serviceProvider"></param>
      <param name="context"></param>
      <param name="commitHandler"></param>
      <param name="descriptionHandler"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoUnit.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Context,Microsoft.VisualStudio.Modeling.TransactionItem)">
      <param name="serviceProvider"></param>
      <param name="context"></param>
      <param name="transactionItem"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoUnit.Do(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager)">
      <param name="undoManager"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoUnit.GetDescription(System.String@)">
      <param name="description"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoUnit.GetUnitType(System.Guid@,System.Int32@)">
      <param name="unitGuid"></param>
      <param name="unitId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UndoUnit.OnNextAdd"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.UserActionEventArgs"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.UserActionEventArgs.#ctor(System.String,Microsoft.VisualStudio.Modeling.Shell.ExportUserAction)">
      <param name="fileName"></param>
      <param name="cause"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.UserActionEventArgs.Cause"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.UserActionEventArgs.Continue"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.UserActionEventArgs.FileName"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ValidationMessageCommandIds"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ValidationMessageCommandIds.TaskListNavigate"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.Shell.ValidationMessageCommandIds.TaskListNavigateMenu"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ValidationTask"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ValidationTask.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationMessage)">
      <param name="message"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ValidationTask.IsMatch(Microsoft.VisualStudio.Modeling.Shell.ValidationTask)">
      <param name="task"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.ValidationTask.Message"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.ValidationTaskProvider"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ValidationTaskProvider.#ctor(System.IServiceProvider)">
      <param name="provider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.ValidationTaskProvider.ShowValidationErrors"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView">
      <summary>
                    Represents the diagram view that Visual Studio hosts.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView.Dispose(System.Boolean)">
      <param name="disposing"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView.DocData">
      <summary>
                    Gets the document for the diagram view.
                </summary>
      <returns>
                    The document for the diagram view.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView.DocView">
      <summary>
                    Gets or sets the document view for the diagram.
                </summary>
      <returns>
                    The document view for the diagram.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView.MouseUpEvent">
      <summary>
                    Gets or sets an event handler when the user releases the mouse button.
                </summary>
      <returns>
                    The event handler.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
                    Passes an event argument when the user presses the mouse button.
                </summary>
      <param name="e">
                    The event argument.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
                    Passes an event argument when the user releases the mouse button.
                </summary>
      <param name="e">
                    The event argument.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView.OnWatermarkCreated">
      <summary>
                    Uses the Visual Studio watermark font for the diagram view watermark.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VSDiagramView.SelectionService">
      <summary>
                    Gets the selection service for the diagram view.
                </summary>
      <returns>
                    The selection service.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.VSDiagramViewSite"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VSDiagramViewSite.Component"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VSDiagramViewSite.Container"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VSDiagramViewSite.DesignMode"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VSDiagramViewSite.GetService(System.Type)">
      <param name="serviceType"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VSDiagramViewSite.Name"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationCategories,Microsoft.VisualStudio.Modeling.ModelElement,System.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationCategories,Microsoft.VisualStudio.Modeling.ModelElement,System.IServiceProvider,System.Type)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationCategories,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},System.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationCategories,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},System.IServiceProvider,System.Type)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.#ctor(System.String[],Microsoft.VisualStudio.Modeling.ModelElement,System.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.#ctor(System.String[],Microsoft.VisualStudio.Modeling.ModelElement,System.IServiceProvider,System.Type)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.#ctor(System.String[],System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},System.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.#ctor(System.String[],System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},System.IServiceProvider,System.Type)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.ConstructValidationMessage(System.String,System.String,Microsoft.VisualStudio.Modeling.Validation.ViolationType,Microsoft.VisualStudio.Modeling.ModelElement[])"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.GetDiagramNavigationCommands(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.ModelElement})"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.GetDiagramNavigationTargets(Microsoft.VisualStudio.Modeling.ModelElement)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.GetDiagramNavigationTargetSubstitutes(Microsoft.VisualStudio.Modeling.ModelElement)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.GetExplorerNavigationCommand(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.ModelElement})"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.GetNavigationCommands(Microsoft.VisualStudio.Modeling.Validation.ValidationMessage)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.GetNavigationProxyModelElements(Microsoft.VisualStudio.Modeling.ModelElement)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.ModelExplorerToolWindow"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.OnDeleteTask(Microsoft.VisualStudio.Modeling.Shell.ValidationTask)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.OnNavigateToTask(Microsoft.VisualStudio.Modeling.Shell.ValidationTask)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VsValidationContext.ServiceProvider"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.VsValidationController"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationController.#ctor(System.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationController.#ctor(System.IServiceProvider,System.Type)">
      <param name="serviceProvider"></param>
      <param name="modelExplorerToolWindowType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationController.ClearMessages"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationController.CreateValidationContext(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.Validation.ValidationCategories)">
      <param name="subjects"></param>
      <param name="categories"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationController.CreateValidationContext(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},System.String[])">
      <param name="subjects"></param>
      <param name="customCategories"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Shell.VsValidationController.ServiceProvider"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationController.Validate(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.Validation.ValidationCategories)">
      <param name="subjects"></param>
      <param name="categories"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.VsValidationController.ValidateCustom(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},System.String[])">
      <param name="subjects"></param>
      <param name="customCategories"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Shell.WaitCursor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.WaitCursor.#ctor(System.Windows.Forms.Control)">
      <param name="control"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.WaitCursor.Clear"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Shell.WaitCursor.Dispose">
      <summary>
                    Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.WaitCursor" /> class.
                </summary>
    </member>
  </members>
</doc>