<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>MPF.Project.NonShipping</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Package.ActiveConfigurationChangedEventArgs">
      <summary>
                    Event arguments for the event raised when the active configuration has been changed.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.AfterProjectFileOpenedEventArgs">
      <summary>
                    Event raised just after a project file opens.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode">
      <summary>
                    A node in the project hierarchy that represents a managed assembly reference. It represents one of the assembly nodes under the References node of a project in Solution Explorer.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode" /> class for a given project root (for example, the root node of a project in Solution Explorer) and a given project element that represents the build item for the assembly.
                </summary>
      <param name="root">
                    The project node that is the root of the project hierarchy.
                </param>
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,System.String)">
      <summary>
                    Creates a new instance of an <see cref="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode" /> by passing in the root node and the path of the assembly that is being referenced.
                </summary>
      <param name="root">
                    The <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" /> that is the root of the hierarchy.
                </param>
      <param name="assemblyPath">
                    The path of the referenced assembly. The <paramref name="assemblyPath" /> variable can be an actual path on disk or a generic assembly name.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AssemblyReferenceNode.BindReferenceData">
      <summary>
                    Links an assembly reference node to the project hierarchy by constructing a new project element node, if necessary, and setting the name and path of the project element node.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AssemblyReferenceNode.CanShowDefaultIcon">
      <summary>
                    Checks whether an <see cref="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode" /> is valid so that it can be shown with the default reference icon.
                </summary>
      <returns>true if the assembly path is not null or empty and the assembly exists in that location; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AssemblyReferenceNode.Caption">
      <summary>
                    Gets a value for the caption of the assembly reference node.
                </summary>
      <returns>
                    The caption of the assembly reference node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AssemblyReferenceNode.Close"></member>
    <member name="M:Microsoft.VisualStudio.Package.AssemblyReferenceNode.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Package.AssemblyReferenceNode.IsAlreadyAdded">
      <summary>
                    Checks whether an <see cref="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode" /> has already been added.
                </summary>
      <returns>true if an already-added assembly has the same full name or path; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AssemblyReferenceNode.ResolveReference">
      <summary>
                    Sets the <see cref="P:Microsoft.VisualStudio.Package.AssemblyReferenceNode.Url" /> and <see cref="P:Microsoft.VisualStudio.Package.AssemblyReferenceNode.ResolvedAssembly" /> properties if either the strong or the weak assembly name can be resolved.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AssemblyReferenceNode.Url">
      <summary>
                    Gets the path of the assembly reference node.
                </summary>
      <returns>
                    The path of the assembly reference node.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.AutomationBrowsableAttribute">
      <summary>
                    Represents whether or not properties are visible to automation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AutomationBrowsableAttribute.#ctor(System.Boolean)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.AutomationBrowsableAttribute" />.
                </summary>
      <param name="browsable">true if the property should be automation-browsable, otherwise false.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AutomationBrowsableAttribute.Browsable">
      <summary>
                    Gets whether or now the property should be automation-browsable
                </summary>
      <returns>true if the property should be automation-browsable, otherwise false.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.BeforeProjectFileClosedEventArgs">
      <summary>
                    Event arguments for the event raised before a project file opens.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.BuildableProjectConfig">
      <summary>
                    Manages a project configuration's build operation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.#ctor(Microsoft.VisualStudio.Package.ProjectConfig)">
      <summary>
                    Initializes a <see cref="T:Microsoft.VisualStudio.Package.BuildableProjectConfig" /> class.
                </summary>
      <param name="config">
                    A <see cref="T:Microsoft.VisualStudio.Package.ProjectConfig" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.AdviseBuildStatusCallback(Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback,System.UInt32@)">
      <summary>
                    Registers the Visual Studio environment to receive notifications of build status events.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="callback">
                    Reference to the Visual Studio environment's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback" /> interface.
                </param>
      <param name="cookie">
                    A cookie that represents the completed registration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.get_ProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)">
      <summary>
                    Returns the project's configuration object.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="p">
                    The project's configuration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.QueryStartBuild(System.UInt32,System.Int32[],System.Int32[])">
      <summary>
                    Determines whether or not a project is able to start a build operation.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="options">
                    Options governing the build process. Currently, there are no defined options and <paramref name="options" /> is always 0.
                </param>
      <param name="supported">
                    An int that is set to 1 if the project supports the build process.
                </param>
      <param name="ready">
                    An int that is set to 1 if the project is ready to start the build process.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.QueryStartClean(System.UInt32,System.Int32[],System.Int32[])">
      <summary>
                    Determines whether or not a project is able to delete all outputs from the previous build, a process known as a clean operation.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="options">
                    Options governing the clean operation. Currently, there are no defined options and <paramref name="options" /> is always 0.
                </param>
      <param name="supported">
                    An int that is set to 1 if the project supports the clean operation.
                </param>
      <param name="ready">
                    An int that is set to 1 if the project is ready to start the clean operation.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.QueryStartUpToDateCheck(System.UInt32,System.Int32[],System.Int32[])">
      <summary>
                    Determines whether or not a project is able to check if the current build is up to date.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="options">
                    Options governing the up-to-date check. Currently, there are no defined options and <paramref name="options" /> is always 0.
                </param>
      <param name="supported">
                    An int that is set to 1 if the project supports checking if the current build is up to date. Currently unsupported and always set to 0.
                </param>
      <param name="ready">
                    An int that is set to 1 if the project is ready to start the up-to-date check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.QueryStatus(System.Int32@)">
      <summary>
                    Determines whether or not a build operation has completed successfully.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="done">
                    An int that is set to 1 if the build operation was successful and 0 if it was unsuccessful
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.StartBuild(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)">
      <summary>
                    Requests that a project begins the build process.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="pane">
                    An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> object that can be used to display status during the build operation.
                </param>
      <param name="options">
                    Options governing the build operation. The values are taken from <see cref="T:Microsoft.VisualStudio.Shell.Interop.BuildableProjectCfgOpts" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.StartClean(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)">
      <summary>
                    Requests that a project begin a clean operation, which is the process of deleting all of the outputs from the previous build.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="pane">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> object that can be used to display status during the clean operation.
                </param>
      <param name="options">
                    Options governing the clean operation.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.StartUpToDateCheck(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)">
      <summary>
                    Requests that a project begin an up-to-date check to determine if the current build is up to date or not. 
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="pane">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> object that can be used to display status during the up-to-date check.
                </param>
      <param name="options">
                    Options governing the up-to-date check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.Stop(System.Int32)">
      <summary>
                    Requests that a project stop building.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="fsync">
                    An int. Not used at this time.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.UnadviseBuildStatusCallback(System.UInt32)">
      <summary>
                    Cancels the environment's registration to receive notifications of build status events.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise it returns an error code.
                </returns>
      <param name="cookie">
                    A handle that represents the representation to be cancelled.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildableProjectConfig.Wait(System.UInt32,System.Int32)">
      <summary>
                    Method information is not provided. Do not use this method.
                </summary>
      <returns>
                    This method returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" /> at this time.
                </returns>
      <param name="ms">
                    Parameter information is not provided.
                </param>
      <param name="fTickWhenMessageQNotEmpty">
                    Parameter information is not provided.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.BuildAction">
      <summary>
                    An enumeration that describes the type of action to be taken by the build.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.BuildAction.None">
      <summary>
                    Nothing should be done.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.BuildAction.Compile">
      <summary>
                    Compile the element.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.BuildAction.Content">
      <summary>
                    Treat the element as content.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.BuildAction.EmbeddedResource">
      <summary>
                    Treat the element as a resource.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.BuildActionConverter">
      <summary>
                    Converts <see cref="T:Microsoft.VisualStudio.Package.BuildAction" /> values to and from enumeration types and strings.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildActionConverter.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.BuildActionConverter" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildActionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Determines whether this converter can convert an object of one type to a <see cref="T:Microsoft.VisualStudio.Package.BuildAction" /> enumeration value.
                </summary>
      <returns>true if the type can be converted to a <see cref="T:Microsoft.VisualStudio.Package.BuildAction" /> enumeration value, otherwise false.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a formatting context.
                </param>
      <param name="sourceType">
                    The type from which to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildActionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts from the specified object to a <see cref="T:Microsoft.VisualStudio.Package.BuildAction" /> enumeration value.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Package.BuildAction" /> value.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a formatting context.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that describes the locale and other culture-specific information. Can be null, in which case the current culture is assumed.
                </param>
      <param name="value">
                    The value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildActionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts a <see cref="T:Microsoft.VisualStudio.Package.BuildAction" /> value to the specified type.
                </summary>
      <returns>
                    A string value if <paramref name="destinationType" /> is a string type, otherwise calls the base.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a formatting context.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that describes the locale and other culture-specific information. Can be null, in which case the current culture is assumed.
                </param>
      <param name="value">
                    The value to convert.
                </param>
      <param name="destinationType">
                    The type to which to convert the value.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildActionConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Gets the standard values for the <see cref="T:Microsoft.VisualStudio.Package.BuildAction" />  enumeration.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> of <see cref="T:Microsoft.VisualStudio.Package.BuildAction" /> values.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a formatting context.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildActionConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Determines whether or not this object supports a set of standard values that can be picked from a list.
                </summary>
      <returns>
                    Always returns true.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a formatting context.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.BuildDependency">
      <summary>
                    Represents a build project which is a dependency of another project. It implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency" /> interface.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildDependency.#ctor(Microsoft.VisualStudio.Package.ProjectNode,System.Guid)">
      <summary>
                    Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Package.BuildDependency" /> for the given root project and the GUID of the dependent build project.
                </summary>
      <param name="projectMgr">
                    The root project node in the hierarchy.
                </param>
      <param name="projectReference">
                    The GUID of the referenced project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildDependency.get_CanonicalName(System.String@)">
      <summary>
                    Gets the canonical name of the project, that is, the project's unique name. It is not necessary for build dependencies to have non-null names; anonymous projects have null names. In this implementation, the name is always null.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="canonicalName">
                    [out] The canonical name of the project. Always returns null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildDependency.get_Description(System.String@)">
      <summary>
                    Gets the description of the build project. Always returns null.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="description">
                    [out] The description of the project. Always returns null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildDependency.get_HelpContext(System.UInt32@)">
      <summary>
                    Gets the help context of the project, in other words the ID of the help page associated with this project. Not implemented in this class.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
      <param name="helpContext">
                    [out] The help context of the project. Returns 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildDependency.get_HelpFile(System.String@)">
      <summary>
                    Gets the help file for the referenced project. Not implemented in this class.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
      <param name="helpFile">
                    [out] The help file. Returns a null string.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildDependency.get_MustUpdateBefore(System.Int32@)">
      <summary>
                    Gets whether or not the dependency should be updated. 
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="mustUpdateBefore">
                    [out] Whether or not this dependency should be updated. Always returns true. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildDependency.get_ReferredProject(System.Object@)">
      <summary>
                    Gets the project referred to by this build dependency.
                </summary>
      <returns>
                    If <paramref name="unknownProject" /> is null, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />, otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="unknownProject">
                    [out] the project referred to by the build dependency.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildDependency.get_Type(System.Guid@)">
      <summary>
                    Gets the type of the build dependency. Always a project.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="guidType">
                    [out] The GUID of the type. Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VS_DEPTYPE_BUILD_PROJECT" />.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.BuildPropertyPage">
      <summary>
                    Defines the properties on the build property page and handles loading and saving the properties.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildPropertyPage.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.BuildPropertyPage" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildPropertyPage.ApplyChanges">
      <summary>
                    Sets the output path as a configuration property.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildPropertyPage.BindProperties">
      <summary>
                    Sets the output path from the configuration.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.BuildPropertyPage.GetClassName">
      <summary>
                    Gets the class name of <see cref="T:Microsoft.VisualStudio.Package.BuildPropertyPage" />.
                </summary>
      <returns>
                    The type name of <see cref="T:Microsoft.VisualStudio.Package.BuildPropertyPage" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.BuildPropertyPage.OutputPath">
      <summary>
                    Gets or sets the directory to which the build's output should be sent.
                </summary>
      <returns>
                    The directory to which the build's output should be sent.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CommandOrigin">
      <summary>
                    Defines the component from which a command was issued.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.CommandOrigin.UiHierarchy">
      <summary>
                    A command from the user interface (UI) hierarchy (not an OLE command).
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.CommandOrigin.OleCommandTarget">
      <summary>
                    A command from <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ComReferenceNode">
      <summary>
                    A node in the project hierarchy that represents a COM component reference. It represents one of the nodes under a project's References in Solution Explorer. A COM component may be a type library, a dynamic link library, an ActiveX component, or an executable.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ComReferenceNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ComReferenceNode" /> for a given project root (for example, the root node of a project in Solution Explorer) and a given project element, which represents the build item for the COM component.
                </summary>
      <param name="root">
                    The project node that is the root of the project hierarchy.
                </param>
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ComReferenceNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
      <summary>
                    Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Package.ComReferenceNode" /> for a given root project node and a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA" /> structure that refers to a COM component, initializing properties of the reference node.
                </summary>
      <param name="root">
                    The root project node.
                </param>
      <param name="selectorData">
                    The selector data that refers to the component.
                </param>
      <exception cref="System.NotSupportedException">
        <paramref name="selectorData" /> is not of type <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE.VSCOMPONENTTYPE_Project" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE.VSCOMPONENTTYPE_ComPlus" /> (that is, a COM project).
                </exception>
      <exception cref="System.ArgumentException">
                    The registry path for the COM component is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ComReferenceNode.BindReferenceData">
      <summary>
                    Links a COM reference node to the project hierarchy by constructing a new build item, if required, and setting its properties. If there is already a corresponding interop assembly, this method identifies it; if not, it builds one.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ComReferenceNode.CanShowDefaultIcon">
      <summary>
                    Checks whether a <see cref="T:Microsoft.VisualStudio.Package.ComReferenceNode" /> is valid and can be shown with the default reference icon.
                </summary>
      <returns>true if the path is not null or empty and the component exists in that location; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ComReferenceNode.Caption">
      <summary>
                    Gets a value for the caption of the COM reference node.
                </summary>
      <returns>
                    The caption, or display name, of the COM reference node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ComReferenceNode.InstalledFilePath">
      <summary>
                    Gets the path where the COM component is installed.
                </summary>
      <returns>
                    The path where the COM component is installed.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ComReferenceNode.IsAlreadyAdded">
      <summary>
                    Checks whether a <see cref="T:Microsoft.VisualStudio.Package.ComReferenceNode" /> has already been added.
                </summary>
      <returns>true if an already-added component has the same GUID or caption; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ComReferenceNode.LCID">
      <summary>
                    Gets the locale identifier of the COM component.
                </summary>
      <returns>
                    The locale identifier of the COM component.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ComReferenceNode.MajorVersionNumber">
      <summary>
                    Gets the major version number of the COM component.
                </summary>
      <returns>
                    The major version number of the COM component.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ComReferenceNode.MinorVersionNumber">
      <summary>
                    Gets the minor version number of the COM component.
                </summary>
      <returns>
                    The minor version number of the COM component.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ComReferenceNode.TypeGuid">
      <summary>
                    Gets the GUID of the COM component.
                </summary>
      <returns>
                    The GUID of the COM component.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ComReferenceNode.Url">
      <summary>
                    Gets the path of the COM component.
                </summary>
      <returns>
                    The path of the COM component.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ConfigProvider">
      <summary>
                    Implements the functionality of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider" />, which is used for managing configuration information for the project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.#ctor(Microsoft.VisualStudio.Package.ProjectNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ConfigProvider" />, for the specified project.
                </summary>
      <param name="manager">
                    The project to which the configuration applies.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.AddCfgsOfCfgName(System.String,System.String,System.Int32)">
      <summary>
                    Copies an existing configuration or creates a new one.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="name">
                    The name of the new configuration.
                </param>
      <param name="cloneName">
                    The name of the configuration to copy. Creates a new configuration if null is specified.
                </param>
      <param name="fPrivate">
                    Flag that indicates whether the new configuration is private. If set to 1, the configuration is private. If set to 0, the configuration is public. This flag is not currently used.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.AddCfgsOfPlatformName(System.String,System.String)">
      <summary>
                    Copies an existing configuration for a given platform or creates a new one.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="platformName">
                    The name of the platform for which to add a configuration.
                </param>
      <param name="clonePlatformName">
                    The name of the platform for which to copy the configuration. Creates a new configuration if null is specified.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)">
      <summary>
                    Registers the caller for configuration event notification.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="sink">
                    Reference that provides notifications of configuration events.
                </param>
      <param name="cookie">
                    A token that represents the completed registration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.CreateProjectConfiguration(System.String)">
      <summary>
                    Creates a new project configuration of this name if one does not already exist
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.ProjectConfig" /> which was created or located in the list of configurations.
                </returns>
      <param name="configName">
                    The name of the configuration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.DeleteCfgsOfCfgName(System.String)">
      <summary>
                    Deletes a specified configuration.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="name">
                    The name of the configuration to be deleted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.DeleteCfgsOfPlatformName(System.String)">
      <summary>
                    Deletes a configuration for the specified platform.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="platName">
                    The name of the platform for which the configuration is to be deleted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.get_UsesIndependentConfigurations(System.Int32@)">
      <summary>
                    Checks whether this configuration provider uses independent configurations.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="usesIndependentConfigurations">
                    [out] true if independent configurations are used, false if they are not used. By default, returns true.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.GetAutomationObject(System.String,System.Object@)">
      <summary>
                    Gets the automation object for a configuration provider, which is the IDispatch interface of a list of configuration properties.
                </summary>
      <returns>
                    If the method is successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.
                </returns>
      <param name="configurationName">
                    The combined name and platform for the configuration requested.
                </param>
      <param name="configurationProperties">
                    [out] The object that represents the IDispatch interface of the list of properties.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.GetCfgNames(System.UInt32,System.String[],System.UInt32[])">
      <summary>
                    Returns one or more configuration names.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="celt">
                    Specifies the requested number of property names. If this number is unknown, <paramref name="celt" /> can be zero.
                </param>
      <param name="names">
                    As input, an array that is pre-allocated to hold the number of configuration property names that are specified by <paramref name="celt" />. This parameter can also be null if the <paramref name="celt" /> parameter is zero. On returning, <paramref name="names" /> contains configuration property names.
                </param>
      <param name="actual">
                    A count of the actual number of names returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.GetCfgOfName(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsCfg@)">
      <summary>
                    Returns the configuration that is associated with a specified configuration or platform name.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="name">
                    The name of the configuration to be returned.
                </param>
      <param name="platName">
                    The name of the platform for the configuration to be returned.
                </param>
      <param name="cfg">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfg" /> interface for the configuration. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.GetCfgProviderProperty(System.Int32,System.Object@)">
      <summary>
                    Returns a specified configuration property.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="propid">
                    Specifies the property identifier for the property to return. For valid <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID2" />.
                </param>
      <param name="var">
                    The returned property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])">
      <summary>
                    Returns one or more configurations.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="celt">
                    Number of configurations to be returned; or 0, which indicates a request for an unknown number of objects.
                </param>
      <param name="a"></param>
      <param name="actual">
                    The number of configuration objects that are actually returned; or null, if this information is not necessary.
                </param>
      <param name="flags">
                    Flags that specify settings for project configurations, or null. For valid <paramref name="flags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.GetPlatformNames(System.UInt32,System.String[],System.UInt32[])">
      <summary>
                    Returns one or more platform names.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="celt">
                    Specifies the requested number of platform names. If this number is unknown, <paramref name="celt" /> can be 0.
                </param>
      <param name="names">
                    As input, a pre-allocated array to hold the number of platform names that are specified by <paramref name="celt" />. This parameter can also be null if the <paramref name="celt" /> parameter is zero. On returning, <paramref name="names" /> contains platform names.
                </param>
      <param name="actual">
                    A count of the actual number of platform names that are returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.GetProjectConfiguration(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.GetSupportedPlatformNames(System.UInt32,System.String[],System.UInt32[])">
      <summary>
                    Returns the set of platforms that are installed on the user computer.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="celt">
                    Specifies the requested number of supported platform names. If this number is unknown, <paramref name="celt" /> can be 0.
                </param>
      <param name="names">
                    As input, a pre-allocated array to hold the number of names that are specified by <paramref name="celt" />. This parameter can also be null if the <paramref name="celt" /> parameter is 0. On returning, <paramref name="names" /> contains the names of supported platforms.
                </param>
      <param name="actual">
                    A count of the actual number of platform names returned.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ConfigProvider.NewConfigProperties">
      <summary>
                    Gets and sets custom properties to the property group.
                </summary>
      <returns>
                    Gets/sets a <see cref="System.Collections.Generic.List" /> of type <see cref="System.Collections.Generic.KeyValuePair" />, which is itself of type <see cref="System.Collections.Generic.KeyValuePair" />. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.OpenProjectCfg(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)">
      <summary>
                    Gets the project configuration that is specified by the name.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the project configuration was located; otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />. If the name is null or cannot otherwise be located, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" />.
                </returns>
      <param name="projectCfgCanonicalName">
                    The name of the project configuration to get.
                </param>
      <param name="projectCfg">
                    [out] The project configuration.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ConfigProvider.ProjectMgr">
      <summary>
                    Gets the project to which this configuration applies.
                </summary>
      <returns>
                    The project to which this configuration applies.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.RenameCfgsOfCfgName(System.String,System.String)">
      <summary>
                    Assigns a new name to a configuration.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="old">
                    The old name of the target configuration.
                </param>
      <param name="newname">
                    The new name of the target configuration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConfigProvider.UnadviseCfgProviderEvents(System.UInt32)">
      <summary>
                    Cancels registration for configuration event notification.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="cookie">
                    Token that represents the registration to be cancelled.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ConnectionPointContainer">
      <summary>
                    Contains the set of event handlers that deal with events of type <see cref="T:Microsoft.VisualStudio.Package.SinkType" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConnectionPointContainer.Microsoft#VisualStudio#OLE#Interop#IConnectionPointContainer#EnumConnectionPoints(Microsoft.VisualStudio.OLE.Interop.IEnumConnectionPoints@)">
      <summary>
                    Enumerates the connection points in the container.
                </summary>
      <param name="ppEnum">
                    [out] An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumConnectionPoints" /> collection of connection points.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ConnectionPointContainer.Microsoft#VisualStudio#OLE#Interop#IConnectionPointContainer#FindConnectionPoint(System.Guid@,Microsoft.VisualStudio.OLE.Interop.IConnectionPoint@)">
      <summary>
                    Returns the connection point associated with the specified interface ID.
                </summary>
      <param name="riid">
                    [ref] The interface ID of the connection point.
                </param>
      <param name="ppCP">
                    [out] Returns the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPoint" />.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DebugMode">
      <summary>
                    Debug values used by <see cref="T:Microsoft.VisualStudio.Package.DebugModeConverter" />.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.DebugMode.Project">
      <summary>
                    Project debug mode.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.DebugMode.Program">
      <summary>
                    Program debug mode.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.DebugMode.URL">
      <summary>
                    URL debug mode. 
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DebugModeConverter">
      <summary>
                    Converts <see cref="T:Microsoft.VisualStudio.Package.DebugMode" /> values to and from enumeration types and strings.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DebugModeConverter.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.DebugModeConverter" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DebugModeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Determines whether this converter can convert an object of one type to a <see cref="T:Microsoft.VisualStudio.Package.DebugMode" /> enumeration value.
                </summary>
      <returns>true if the type can be converted to a <see cref="T:Microsoft.VisualStudio.Package.DebugMode" /> enumeration value, otherwise false.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a formatting context.
                </param>
      <param name="sourceType">
                    The type from which to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DebugModeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts from the specified object to a <see cref="T:Microsoft.VisualStudio.Package.DebugMode" /> enumeration value.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Package.DebugMode" /> value.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a formatting context.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that describes the locale and other culture-specific information. Can be null, in which case the current culture is assumed.
                </param>
      <param name="value">
                    The value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DebugModeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts a <see cref="T:Microsoft.VisualStudio.Package.DebugMode" /> value to the specified type.
                </summary>
      <returns>
                    A string value if <paramref name="destinationType" /> is a string type, otherwise calls the base.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a formatting context.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that describes the locale and other culture-specific information. Can be null, in which case the current culture is assumed.
                </param>
      <param name="value">
                    The value to convert.
                </param>
      <param name="destinationType">
                    The type to which to convert the value.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DebugModeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Gets the standard values for the <see cref="T:Microsoft.VisualStudio.Package.DebugMode" />  enumeration.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> of <see cref="T:Microsoft.VisualStudio.Package.DebugMode" /> values.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a formatting context.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DebugModeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Determines whether or not this object supports a set of standard values that can be picked from a list.
                </summary>
      <returns>true.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a formatting context.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DefaultSortOrderNode">
      <summary>
                    A set of constants that specify the default sort order for different types of hierarchy node.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.DefaultSortOrderNode.FolderNode">
      <summary>
                    The default sort order for a <see cref="T:Microsoft.VisualStudio.Package.FolderNode" />.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.DefaultSortOrderNode.HierarchyNode">
      <summary>
                    The default sort order for a <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.DefaultSortOrderNode.NestedProjectNode">
      <summary>
                    The default sort order for a <see cref="T:Microsoft.VisualStudio.Package.NestedProjectNode" />.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.DefaultSortOrderNode.ReferenceContainerNode">
      <summary>
                    The default sort order for a <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" />.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DeleteToken">
      <summary>
                    Stores the token to be deleted.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DeleteToken.#ctor(System.String)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.DeleteToken" /> with the string to be deleted.
                </summary>
      <param name="token"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DeleteToken.StringToDelete">
      <summary>
                    Gets the string to be deleted.
                </summary>
      <returns>
                    The string to be deleted.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DependentFileNode">
      <summary>
                    Defines logic for dependent file nodes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DependentFileNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Initializes a new instance of a <see cref="M:Microsoft.VisualStudio.Package.DependentFileNode" />.
                </summary>
      <param name="root">
                    The <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" /> root of the hierarchy.
                </param>
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DependentFileNode.CreatePropertiesObject"></member>
    <member name="M:Microsoft.VisualStudio.Package.DependentFileNode.GetEditLabel">
      <summary>
                    Override to disable renaming.
                </summary>
      <returns>
                    Returns E_NOTIMPLE to notify the caller than renaming is not supported.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DependentFileNode.GetIconHandle(System.Boolean)">
      <summary>
                    Gets a handle to the icon that should be set for this node.
                </summary>
      <returns>
                    The handle to the icon for the node.
                </returns>
      <param name="open">
                    Boolean value specifying whether the folder is open. This parameter is ignored.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DependentFileNode.ImageIndex">
      <summary>
                    Gets the index of the <see cref="T:System.Windows.Forms.ImageList" /> that corresponds to the dependent file node.
                </summary>
      <returns>
                    The index of the image associated with the file node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DependentFileNode.PrepareSelectedNodesForClipBoard">
      <summary>
                    Prepares selected nodes to be copied to the clipboard.
                </summary>
      <returns>
                    Returns null.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DependentFileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Package.QueryStatusResult@)">
      <summary>
                    Gets the status of different commands for the folder node.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the command is supported, or <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLEConstants.OLECMDERR_E_NOTSUPPORTED" /> if the command is not supported.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The value of the command.
                </param>
      <param name="pCmdText">
                    Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT" /> structure in which to return the name and/or status information of the command. Can be null to indicate that the caller does not require this information
                </param>
      <param name="result">
                    [out] The <see cref="T:Microsoft.VisualStudio.Package.QueryStatusResult" /> of the command.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DependentFileNode.UpdateSccStateIcons"></member>
    <member name="T:Microsoft.VisualStudio.Package.DependentFileNodeProperties"></member>
    <member name="M:Microsoft.VisualStudio.Package.DependentFileNodeProperties.#ctor(Microsoft.VisualStudio.Package.HierarchyNode)"></member>
    <member name="P:Microsoft.VisualStudio.Package.DependentFileNodeProperties.BuildAction"></member>
    <member name="P:Microsoft.VisualStudio.Package.DependentFileNodeProperties.FileName"></member>
    <member name="P:Microsoft.VisualStudio.Package.DependentFileNodeProperties.FullPath"></member>
    <member name="M:Microsoft.VisualStudio.Package.DependentFileNodeProperties.GetClassName"></member>
    <member name="T:Microsoft.VisualStudio.Package.DesignPropertyDescriptor">
      <summary>
                    A specialization of <see cref="T:System.ComponentModel.PropertyDescriptor" /> that allows customization of the display name of the property in the property grid.  
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor" /> for the specified property descriptor.
                </summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
                    Determines whether or not resetting the object changes its value.
                </summary>
      <returns>true if resetting the component changes its value, otherwise false.
                </returns>
      <param name="component">
                    The component that owns the property.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.ComponentType">
      <summary>
                    Gets the component type.
                </summary>
      <returns>
                    The type of the component.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.Converter">
      <summary>
                    Gets the type converter for the property.
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.DisplayName">
      <summary>
                    Gets the display name for this property.
                </summary>
      <returns>
                    The display name.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.GetEditor(System.Type)">
      <summary>
                    Gets an editor of the specified type.
                </summary>
      <returns>
                    The editor, or null if it cannot be found.
                </returns>
      <param name="editorBaseType">
                    The type of the editor.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)">
      <summary>
                    Converts the name to a <see cref="T:System.Type" />.
                </summary>
      <returns>
        <see cref="T:System.Type" />.
                </returns>
      <param name="typeName">
                    The name of the type.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.GetValue(System.Object)">
      <summary>
                    Gets the value of the property.
                </summary>
      <returns>
                    The value of the property.
                </returns>
      <param name="component">
                     The component that owns the property.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.IsReadOnly">
      <summary>
                    Gets whether or not the property is read-only.
                </summary>
      <returns>true if the property is read-only, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.PropertyType">
      <summary>
                    Gets the type of the property.
                </summary>
      <returns>
                    The type of the property.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.ResetValue(System.Object)">
      <summary>
                    Resets the value to the default value.
                </summary>
      <param name="component">
                     The component that owns the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
                    Sets the value of the property to the specified value.
                </summary>
      <param name="component">
                    The component that owns the property.
                </param>
      <param name="value">
                    The value to set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
                    Determines whether or not the property's value should be persisted.
                </summary>
      <returns>true if the property should be persisted, otherwise false.
                </returns>
      <param name="component">
                    The component that owns the property.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DocumentManager">
      <summary>
                    Abstract class that handles the opening and saving of items.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentManager.#ctor(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Package.DocumentManager" /> for the given node.
                </summary>
      <param name="node">
                    The project root.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentManager.Close(Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE)">
      <summary>
                    Closes an open document window.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" /> if the project node is null, or if the project node project manager (a <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />, which handles the persistent state of the project) is null or closed. Returns another error code if it fails to close the window. If all is well, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="closeFlag">
                    Flag that represents different close options.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentManager.CloseWindowFrame(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>
                    Closes the window frame.
                </summary>
      <param name="windowFrame">
                    The window frame to close.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentManager.GetFullPathForDocument">
      <summary>
                    Gets the full path of the document.
                </summary>
      <returns>
                    The full path of the document.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentManager.GetOwnerCaption">
      <summary>
                    Gets the caption that belongs to the root node.
                </summary>
      <returns>
                    The caption that belongs to the root node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentManager.Node">
      <summary>
                    Gets the node that is used to create the manager.
                </summary>
      <returns>
                    Returns the node that is used to construct the <see cref="T:Microsoft.VisualStudio.Package.DocumentManager" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Package.WindowFrameShowAction)">
      <summary>
                    When overridden in a derived class, opens a document by using the standard editor.
                </summary>
      <returns>
                    The HRESULT that corresponds to the success or failure of the action.
                </returns>
      <param name="logicalView">
                    The GUID of the view to be opened.
                </param>
      <param name="docDataExisting">
                    Pointer to the existing document data object.
                </param>
      <param name="windowFrame">
                    The window frame that corresponds to the file.
                </param>
      <param name="windowFrameAction">
        <see cref="T:Microsoft.VisualStudio.Package.WindowFrameShowAction" /> that should be taken on the document window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Package.WindowFrameShowAction)">
      <summary>
                    When overridden in a derived class, opens a document by using the given editor.
                </summary>
      <returns>
                    The HRESULT that corresponds to the success or failure of the action.
                </returns>
      <param name="editorFlags">
                    Flags that specify which action to take when the editor is opened.
                </param>
      <param name="editorType">
                    GUID of the editor type.
                </param>
      <param name="physicalView">
                    Name of the physical view. If null, the correct physical view will be decided by the editor factory.
                </param>
      <param name="logicalView">
                    GUID of the view to be opened.
                </param>
      <param name="docDataExisting">
                    Pointer to the existing document data object.
                </param>
      <param name="frame">
                    The window frame that corresponds to the document.
                </param>
      <param name="windowFrameAction">
                    Flag that specifies which action should be taken when the view is opened.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentManager.RenameDocument(System.IServiceProvider,System.String,System.String,System.UInt32)">
      <summary>
                    Renames a document in the running document table.
                </summary>
      <param name="site">
                    The service provider.
                </param>
      <param name="oldName">
                    The original name.
                </param>
      <param name="newName">
                    The new name.
                </param>
      <param name="newItemId">
                    The new item ID of the document.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentManager.Save(System.Boolean)">
      <summary>
                    Silently saves an open document.
                </summary>
      <param name="saveIfDirty">
                    Save only if this argument is true and the document is dirty.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentManager.UpdateCaption(System.IServiceProvider,System.String,System.IntPtr)">
      <summary>
                    Updates the captions of all windows that are associated with the document.
                </summary>
      <param name="site">
                    The service provider.
                </param>
      <param name="caption">
                    The new caption.
                </param>
      <param name="docData">
                    Pointer to a document data object that is associated with the file.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.EnumDependencies">
      <summary>
                    An enumerator for build dependencies. This class implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EnumDependencies.#ctor(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency})">
      <summary>
                    Instantiates a new instance of <see cref="T:Microsoft.VisualStudio.Package.EnumDependencies" /> for the specified list of dependencies.
                </summary>
      <param name="dependencyList">
                    A list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency" /> interfaces for the dependencies.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EnumDependencies.#ctor(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.IVsDependency})">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.EnumDependencies" /> for the specified list of dependencies.
                </summary>
      <param name="dependencyList">
                    A list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDependency" /> interfaces for the dependencies.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EnumDependencies.Clone(Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies@)">
      <summary>
                    Copies this enumerator to another one that has the same state as the original.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="enumDependencies">
                    [out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies" /> interface of the copied enumerator.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EnumDependencies.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDependency[],System.UInt32@)">
      <summary>
                    Gets the specified number of dependencies.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the number of dependencies fetched equals the number of requested dependencies, otherwise <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.
                </returns>
      <param name="elements">
                    The number of dependencies to fetch.
                </param>
      <param name="dependencies">
                    The dependencies to be fetched.
                </param>
      <param name="elementsFetched">
                    [out] The actual number of dependencies fetched.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EnumDependencies.Reset">
      <summary>
                    Sets the index of the enumerator back to 0.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EnumDependencies.Skip(System.UInt32)">
      <summary>
                    Skips over the specified number of dependencies.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if it was possible to skip the requested number of dependencies, <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the number to skip exceeds the number of dependencies in the collection.
                </returns>
      <param name="elements">
                    The number of dependencies to skip.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.FileDocumentManager">
      <summary>
                    Handles opening and saving files in the project hierarchy. It is a file-specific implementation of <see cref="T:Microsoft.VisualStudio.Package.DocumentManager" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileDocumentManager.#ctor(Microsoft.VisualStudio.Package.FileNode)">
      <summary>
                    Initializes a new instance of <see cref="FileDocumentManager" /> for a given file node.
                </summary>
      <param name="node">
                    The file node that this <see cref="FileDocumentManager" /> should handle.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileDocumentManager.Open(System.Boolean,System.Boolean,Microsoft.VisualStudio.Package.WindowFrameShowAction)">
      <summary>
                    Opens the file, and specifies whether to open it as a new file, whether to show the Open File dialog box, and which user interface (UI) action should be taken on the window frame.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the file was opened; otherwise, returns a failure code.
                </returns>
      <param name="newFile">
                    If true, open the file as a new file; otherwise, do not open the file if it is already open.
                </param>
      <param name="openWith">
                    If true, open the Open File dialog box; otherwise, do not open the dialog box.
                </param>
      <param name="windowFrameAction">
                    The UI action on the document window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Package.WindowFrameShowAction)">
      <summary>
                    Opens the file, and specifies whether to open it as a new file, whether to show the Open File dialog box, the logical view to open it in, and which user interface (UI) action should be taken on the window frame.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the file was opened; otherwise, returns a failure code.
                </returns>
      <param name="newFile">
                    If true, open the file as a new file; otherwise, do not try to open the file if it is already open.
                </param>
      <param name="openWith">
                    If true, open the Open File dialog box; otherwise, do not open the dialog box.
                </param>
      <param name="logicalView">
                    The GUID of the logical view.
                </param>
      <param name="frame">
                    [out] The window frame that is opened.
                </param>
      <param name="windowFrameAction">
                    The UI action on the document window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Package.WindowFrameShowAction)">
      <summary>
                    Opens the file, and specifies whether to open it as a new file, whether to show the Open File dialog box, the logical view to open it in, the existing document data, and which user interface (UI) action should be taken on the window frame.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the file was opened; otherwise, returns a failure code.
                </returns>
      <param name="newFile">
                    If true, open the file as a new file; otherwise, do not try to open the file if it is already open.
                </param>
      <param name="openWith">
                    If true, open the Open File dialog box; otherwise, do not open the dialog box.
                </param>
      <param name="logicalView">
                    The GUID of the logical view.
                </param>
      <param name="docDataExisting">
                    Pointer to the existing document data object.
                </param>
      <param name="windowFrame">
                    [out] The window frame that is opened.
                </param>
      <param name="windowFrameAction">
                    The UI action on the document window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileDocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Package.WindowFrameShowAction)">
      <summary>
                    Opens a file, and specifies the window in which to open it and the user interface (UI) action to take on the window.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the file was opened; otherwise, returns a failure code.
                </returns>
      <param name="logicalView">
                    The GUID of the logical view.
                </param>
      <param name="docDataExisting">
                    Pointer to an existing document data object.
                </param>
      <param name="windowFrame">
                    [out] The window frame that is opened.
                </param>
      <param name="windowFrameAction">
                    The UI action on the document window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileDocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Package.WindowFrameShowAction)">
      <summary>
                    Opens a file by using a specific editor, and specifies how it is to be opened, the physical and logical views to open it in, the existing document data, and which user interface (UI) action should be taken on the window frame.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the file was opened; otherwise, returns a failure code.
                </returns>
      <param name="editorFlags">
                    Flags that describe how to open the file.
                </param>
      <param name="editorType">
                    The GUID of the editor type to use.
                </param>
      <param name="physicalView">
                    Name of the physical view. If null, the correct physical view will be decided by the editor factory.
                </param>
      <param name="logicalView">
                    The GUID of the logical view.
                </param>
      <param name="docDataExisting">
                    Pointer to the existing document data object.
                </param>
      <param name="windowFrame">
                    [out] The window frame that is opened.
                </param>
      <param name="windowFrameAction">
                    The UI action on the document window.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.FileNode">
      <summary>
                    A node in the project hierarchy that represents a file.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.FileNode" /> class for a given project root (for example, the root node of a project in the Solution Explorer) and a given project element, which represents the build item for the file.
                </summary>
      <param name="root">
                    The <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" /> that is the root of the project hierarchy.
                </param>
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.AfterSaveItemAs(System.IntPtr,System.String)">
      <summary>
                    Performs the SaveAs operation. Saves a file after the running document table has been updated, creating new folders if necessary.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="docData">
                    Pointer to the running document table.
                </param>
      <param name="newFilePath">
                    The new name and path.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)">
      <summary>
                    Checks whether the file can be deleted from storage or removed from the project.
                </summary>
      <returns>
                    Set to true if <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION" /> is <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION.DELITEMOP_DeleteFromStorage" />; otherwise false.
                </returns>
      <param name="deleteOperation">
                    The operation to be performed (delete from storage or remove from project).
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.CanShowDefaultIcon">
      <summary>
                    Checks whether the default item icon can be displayed for the given node.
                </summary>
      <returns>true if the path is not empty or null and the file exists; otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FileNode.Caption">
      <summary>
                    Gets the caption of the file node. The caption is the UI display value of the file name.
                </summary>
      <returns>
                    The caption of the file node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.CreatePropertiesObject">
      <summary>
                    Creates an object to expose properties specific for this object to the property browser.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Package.NodeProperties" /> object representing the property.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.CreateSingleFileGenerator">
      <summary>
                    Factory method for creating a single file generator.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Package.ISingleFileGenerator" /> interface to the generator.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.DeleteFromStorage(System.String)">
      <summary>
                    Deletes a file from the specified path.
                </summary>
      <param name="path">
                    The path of the file to be deleted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.DoDefaultAction">
      <summary>
                    Opens the file in a document window with a standard editor.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    Executes the given command on the file node.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> or an HRESULT if an exception was thrown during execution.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="nCmdexecopt">
                    The exec options of the command.
                </param>
      <param name="pvaIn">
                    Pointer to a structure containing the command arguments. Can be null.
                </param>
      <param name="pvaOut">
                    Pointer to a structure containing the command output. Can be null.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FileNode.FileName">
      <summary>
                    Gets or sets the file name.
                </summary>
      <returns>
                    The file name.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.GetAutomationObject">
      <summary>
                    Gets the automation object corresponding to this file node.
                </summary>
      <returns>
                    Returns an instance of type <see cref="T:Microsoft.VisualStudio.Package.Automation.OAFileItem" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.GetDocumentManager">
      <summary>
                    Gets a file document manager that handles opening, saving of file items in the hierarchy.
                </summary>
      <returns>
                    Returns a <see cref="T:Microsoft.VisualStudio.Package.FileDocumentManager" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.GetDragTargetHandlerNode">
      <summary>
                    Returns a target node that processes a drop action after the user has dragged and dropped this node.
                </summary>
      <returns>
                    Parent node or the root project node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.GetIconHandle(System.Boolean)">
      <summary>
                    Gets the handle of the icon that represents the file node.
                </summary>
      <returns>
                    The handle of the icon that represents the file node.
                </returns>
      <param name="open">
                    Not used, user may pass in 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.GetMkDocument">
      <summary>
                    Gets the absolute path of the file.
                </summary>
      <returns>
                    The absolute path of the file.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})"></member>
    <member name="P:Microsoft.VisualStudio.Package.FileNode.ImageIndex">
      <summary>
                    Gets the index of the associated image.
                </summary>
      <returns>
                    The index of the image.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.IsFileOnDisk(System.Boolean)">
      <summary>
                    Checks whether the file specified by this node exists on disk and shows a message box if it is not found. The message box is not displayed if the call is made via automation.
                </summary>
      <returns>true if the file exists on disk; otherwise false.
                </returns>
      <param name="showMessage">true to show the message box; otherwise false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.IsFileOnDisk(System.String)">
      <summary>
                    Checks whether a file is at the specified location.
                </summary>
      <returns>
                    Returns true if the file exists at that location; otherwise false.
                </returns>
      <param name="path">
                    The path of the file.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FileNode.ItemTypeGuid">
      <summary>
                    Gets the GUID of a file node's item type.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_PhysicalFile" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FileNode.MenuCommandId">
      <summary>
                    Gets the menu command ID for a file node.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.Package.VSMenus.IDM_VS_CTXT_ITEMNODE" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Package.QueryStatusResult@)">
      <summary>
                    Checks whether a given command is supported and enabled on the file node.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.OLE.Interop OleConstants.OLECMDERR_E_UNKNOWNGROUP" /> if the command group is anything other than <see cref="F:Microsoft.VisualStudio.VsMenus.guidStandardCommandSet97" /> or <see cref="F:Microsoft.VisualStudio.VsMenus.guidStandardCommandSet2K" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the command was found, regardless of the status of the command. 
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="pCmdText">
                    Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT" /> structure that indicates the name and status information for a given command. Can be null.
                </param>
      <param name="result">
                    The <see cref="T:Microsoft.VisualStudio.Package.QueryStatusResult" /> of the command
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.RecoverFromRenameFailure(System.String,System.String)">
      <summary>
                    Attempts to recover from a renaming failure.
                </summary>
      <param name="fileThatFailed">
                    Name of the file that failed.
                </param>
      <param name="originalFileName">
                    Original file name.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.RenameChildNodes(Microsoft.VisualStudio.Package.FileNode)">
      <summary>
                    Renames child nodes
                </summary>
      <param name="parentNode">
                    A <see cref="T:Microsoft.VisualStudio.Package.FileNode" /> representing the parent node.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.RenameFileNode(System.String,System.String,System.UInt32)">
      <summary>
                    Renames the file and updates it in the hierarchy.
                </summary>
      <returns>
                    The newly-created <see cref="FileNode" />.
                </returns>
      <param name="oldFileName">
                    Original file name.
                </param>
      <param name="newFileName">
                    New file name.
                </param>
      <param name="newParentId">
                    ID of the new parent element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.RenameInStorage(System.String,System.String)">
      <summary>
                    Renames the file on disk. Should be overridden for files that are not saved to disk.
                </summary>
      <param name="oldName">
                    The original file name.
                </param>
      <param name="newName">
                    The new name.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.SetEditLabel(System.String)">
      <summary>
                    Sets the editable name of the file with the given name.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the new name is the same as the old one; otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="label">
                     The file name.
                </param>
      <exception cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL">
                    The project is null or closed.
                </exception>
      <exception cref="System.InvalidOperationException">
                    The file name string is null, empty, or invalid.
                
                    -or-
                
                    A file already exists on disk at the same location.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNode.SetEditLabel(System.String,System.String)">
      <summary>
                    Renames the file with the given name and relative path.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the new file name is the same as the old one, or if the file's ID has changed. Returns the corresponding HRESULT for any exception that has occurred.
                </returns>
      <param name="label">
                     The name of the file.
                </param>
      <param name="relativePath"></param>
      <exception cref="System.InvalidOperationException">
                    The file already exists.
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FileNode.Url">
      <summary>
                    Gets the absolute path of the file.
                </summary>
      <returns>
                    The absolute path of the file.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.FileNodeProperties">
      <summary>
                    A set of custom properties for file nodes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNodeProperties.#ctor(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Initializes an instance of he <see cref="T:Microsoft.VisualStudio.Package.FileNodeProperties" /> class with the supplied project root node.
                </summary>
      <param name="node">
                    The root project node.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FileNodeProperties.BuildAction">
      <summary>
                    Gets and sets the build action for the file node.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Package.BuildAction" /> enumeration derived from the <see cref="M:Microsoft.VisualStudio.Package.ProjectElement.ItemName" /> property of the project element associated with the file node
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FileNodeProperties.Extension">
      <summary>
                    Gets the extension of the file node.
                </summary>
      <returns>
                    Returns the extension of the file node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FileNodeProperties.FileName">
      <summary>
                    Gets and sets the name of the file.          
                </summary>
      <returns>
                    Gets the <see cref="M:Microsoft.VisualStudio.Package.FileNode.Caption" /> property. Sets the edit label of <see cref="T:Microsoft.VisualStudio.Package.FileNode" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FileNodeProperties.FullPath">
      <summary>
                    Gets the full path of the file.
                </summary>
      <returns>
                    The <see cref="M:Microsoft.VisualStudio.Package.FileNode.Url" /> property.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FileNodeProperties.GetClassName">
      <summary>
                    Gets the localized name of the class.
                </summary>
      <returns>
                    Returns the localized value for the <see cref="T:Microsoft.VisualStudio.Package.SR.FileProperties" /> constant.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.FolderNode">
      <summary>
                    A node in the project hierarchy that represents a folder.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,System.String,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.FolderNode" /> for the specified project root, the folder path, and the associated project element.
                </summary>
      <param name="root">
                    The root of the project.
                </param>
      <param name="relativePath"></param>
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)">
      <summary>
                    Checks whether this folder can be deleted.
                </summary>
      <returns>
                    Returns true if <paramref name="deleteOperation" /> is <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION.DELITEMOP_DeleteFromStorage" />; otherwise, false.
                </returns>
      <param name="deleteOperation">
                    The kind of delete operation.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FolderNode.Caption">
      <summary>
                    Gets the caption (the display name) of the folder node.
                </summary>
      <returns>
                    The display name of the folder node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.CreateDirectory">
      <summary>
                    Creates the directory that is associated with this folder node.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.CreateDirectory(System.String)">
      <summary>
                    Creates a directory that has the specified name.
                </summary>
      <param name="newName"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.CreatePropertiesObject"></member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.DeleteFolder(System.String)">
      <summary>
                    Deletes the directory at the specified location.
                </summary>
      <param name="path"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.DeleteFromStorage(System.String)">
      <summary>
                    Deletes the folder at the specified path from disk.
                </summary>
      <param name="path">
                    The path of the folder to delete.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.GetAutomationObject">
      <summary>
                    Gets the automation object for the folder node.
                </summary>
      <returns>
                    Returns a <see cref="T:Microsoft.VisualStudio.Package.Automation.OAFolderItem" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.GetIconHandle(System.Boolean)">
      <summary>
                    Gets a pointer to an icon for the folder.
                </summary>
      <returns>
                    If <paramref name="open" /> is true, returns a pointer to the icon for <see cref="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.OpenFolder" />; otherwise, returns <see cref="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Folder" />.
                </returns>
      <param name="open">
                     If true, return a pointer to the icon for an open folder; otherwise, return a pointer to the icon for a folder.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.GetMkDocument">
      <summary>
                    Gets the path of the folder.
                </summary>
      <returns>
        <see cref="P:Microsoft.VisualStudio.Package.FolderNode.Url" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
      <summary>
                    When overridden in a derived class, adds the node to the list of files in source code control. 
                </summary>
      <param name="files">
                    The list of files in source code control.
                </param>
      <param name="flags">
                    The list of source code control flags.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})"></member>
    <member name="P:Microsoft.VisualStudio.Package.FolderNode.ItemTypeGuid">
      <summary>
                    Gets the GUID of the item type of the folder node.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_PhysicalFolder" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FolderNode.MenuCommandId">
      <summary>
                    Gets the shortcut menu command ID of the folder node.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VsMenus.IDM_VS_CTXT_FOLDERNODE" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Package.QueryStatusResult@)">
      <summary>
                    Gets the status of different commands for the folder node.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the command is supported, or <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLEConstants.OLECMDERR_E_NOTSUPPORTED" /> if the command is not supported.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The value of the command.
                </param>
      <param name="pCmdText">
                    Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT" /> structure in which to return the name and/or status information of the command. Can be null to indicate that the caller does not require this information.
                </param>
      <param name="result">
                    [out] The <see cref="T:Microsoft.VisualStudio.Package.QueryStatusResult" /> of the command.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.RenameDirectory(System.String)">
      <summary>
                    Renames the directory on disk for this node.
                </summary>
      <param name="newPath">
                    The new name of the directory.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.SetEditLabel(System.String)">
      <summary>
                    Sets the editable name of the folder to the specified name.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If there are errors, an exception is thrown.
                </returns>
      <param name="label">
                     The name to set.
                </param>
      <exception cref="System.InvalidOperationException">
                    A folder of the same name already exists on disk, or an exception was thrown during the renaming process.
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FolderNode.SortPriority">
      <summary>
                    Gets the default sort order of a folder node.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.Package.DefaultSortOrderNode.FolderNode" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FolderNode.StateIconIndex">
      <summary>
                    Gets the appropriate source code control icon.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_NOSTATEICON" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNode.UpdateSccStateIcons">
      <summary>
                    Recursively walks the nodes under the folder and redraws the <see cref="T:Microsoft.VisualStudio.Package.UIHierarchyElement.SccState" />.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FolderNode.Url">
      <summary>
                    Gets the path of the folder.
                </summary>
      <returns>
                    The fully qualified path of the folder.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.FolderNodeProperties">
      <summary>
                    Provides a simple collection to use to store a set of properties for a folder hierarchy item.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNodeProperties.#ctor(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.FolderNodeProperties" /> class for the specified hierarchy node.
                </summary>
      <param name="node">
                    The node associated with the folder node properties.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FolderNodeProperties.FileName">
      <summary>
                    Gets and sets the name of the folder.
                </summary>
      <returns>
                    Gets the caption of the folder node and sets the caption.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FolderNodeProperties.FolderName">
      <summary>
                    Gets and sets the name of the folder.
                </summary>
      <returns>
                    Gets the caption of the folder node and sets the (editable) caption.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.FolderNodeProperties.FullPath">
      <summary>
                    Gets the absolute path of the folder node, ending with the directory separator character.
                </summary>
      <returns>
                    Returns the same value as the <see cref="P:Microsoft.VisualStudio.Package.FolderNode.Url" /> property, that is, the absolute path of the folder node. The string ends with the directory separator character.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FolderNodeProperties.GetClassName">
      <summary>
                    Gets the localized name of the derived FolderNodeProperties class.
                </summary>
      <returns>
                    Returns the localized value for the <see cref="T:Microsoft.VisualStudio.Package.SR.FolderProperties" /> constant.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.GlobalProperty"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.BuildingInsideVisualStudio"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.DevEnvDir"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.SolutionName"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.SolutionFileName"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.SolutionPath"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.SolutionDir"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.SolutionExt"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.FxCopDir"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.VSIDEResolvedNonMSBuildProjectOutputs"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.Configuration"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.Platform"></member>
    <member name="F:Microsoft.VisualStudio.Package.GlobalProperty.RunCodeAnalysisOnce"></member>
    <member name="T:Microsoft.VisualStudio.Package.HierarchyAddType">
      <summary>
                    Enumeration for the type of item to be added to the hierarchy.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.HierarchyAddType.AddNewItem">
      <summary>
                    Adds a new item.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.HierarchyAddType.AddExistingItem">
      <summary>
                    Adds an existing item.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.HierarchyNode">
      <summary>
                    A parent node that has zero or more child nodes, each of which may itself be a hierarchy. This is the base class for hierarchy elements such as <see cref="T:Microsoft.VisualStudio.Package.FileNode" /> and <see cref="T:Microsoft.VisualStudio.Package.FolderNode" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.#ctor">
      <summary>
                    Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> for the specified project.
                </summary>
      <param name="root">
        <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> for the specified project and project item.
                </summary>
      <param name="root">
        <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </param>
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.AddChild(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Adds a hierarchy node as a child node.
                </summary>
      <param name="node">
                    The node to be added.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.AddItemToHierarchy(Microsoft.VisualStudio.Package.HierarchyAddType)">
      <summary>
                    Adds a new item to the hierarchy.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="addType">
                    The <see cref="T:Microsoft.VisualStudio.Package.HierarchyAddType" />, which determines whether the item to be added is new or existing.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.AddNewFolder">
      <summary>
                    Adds a new folder to the project hierarchy.
                </summary>
      <returns>
                    If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK;" /> otherwise, an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
      <summary>
                    Establishes client notification of hierarchy events.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="sink">
                    A client-side event sink that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents" />.
                </param>
      <param name="cookie">
                    A unique identifier for the referenced event sink, which is used later to stop notification.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.AfterSaveItemAs(System.IntPtr,System.String)">
      <summary>
                    Saves an item after the SaveAs dialog box has been processed.
                </summary>
      <returns>
                    Implementations should return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the save was successful; otherwise, they should return an error code.
                </returns>
      <param name="docData">
                    Pointer to the running document table.
                </param>
      <param name="newName">
                    The name to which the item should be saved.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.AllowPasteCommand">
      <summary>
                    Specifies whether a node can be pasted.
                </summary>
      <returns>
                    Returns true if the node can be pasted.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)">
      <summary>
                    Checks whether the file can be deleted from storage or removed from the project.
                </summary>
      <returns>
                    Returns <see cref="M:Microsoft.VisualStudio.Package.ProjectNode.CanProjectDeleteItems" />.
                </returns>
      <param name="deleteOperation">
                    The operation to be performed (delete from storage or remove from project).
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.CanExecuteCommand">
      <summary>
                    Checks whether a node can execute a command if it is in a selection.
                </summary>
      <returns>
                    Returns true. Implementations should override this for other values.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.CanShowDefaultIcon">
      <summary>
                    Checks whether this node can be displayed with the default item icon.
                </summary>
      <returns>
                    By default, returns false. Implementations should return true if the default icon should be shown; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.Caption">
      <summary>
                    Gets the caption of the hierarchy node.
                </summary>
      <returns>
                    When implemented by derived classes, the caption, or display value, of the node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Close">
      <summary>
                    Closes and cleans up a hierarchy after the environment determines that it is no longer used.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.CloseDocumentWindow(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Closes an open document window for a specific node.
                </summary>
      <param name="node">
                    The node for which the document window should be closed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.CopyToClipboard">
      <summary>
                    Copies a node to the clipboard.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.CreatePropertiesObject">
      <summary>
                    Defines the properties attached to this node.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.NodeProperties" /> attached to the node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.CutToClipboard">
      <summary>
                    Cuts a node and puts it on the clipboard.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.DeleteFromStorage(System.String)">
      <summary>
                    Deletes the file at the specified path from storage.
                </summary>
      <param name="path">
                    The path of the file to delete.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.DeleteItem(System.UInt32,System.UInt32)">
      <summary>
                    Handles the deletion or removal of a hierarchy item.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="delItemOp">
                    Determines whether the hierarchy or hierarchy item is deleted from storage or removed from the project. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION" /> enumeration.
                </param>
      <param name="itemId">
                    Item identifier of an item in the hierarchy.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.DisableCmdInCurrentMode(System.Guid,System.UInt32)">
      <summary>
                    Disables commands when Visual Studio is in run or break mode.
                </summary>
      <returns>
                    Returns true if it was possible to disable a command; returns false if the project manager is null or closed, or if the command is not supported.
                </returns>
      <param name="commandGroup"></param>
      <param name="command"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.DisableCommandOnNodesThatDoNotSupportMultiSelection(System.Guid,System.UInt32,System.Collections.Generic.IList{Microsoft.VisualStudio.Package.HierarchyNode},System.Boolean@)">
      <summary>
                    Specifies commands for which multi-select does not work and should be disabled.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.Package.QueryStatusResult.NOTSUPPORTED" /> if there are fewer than 2 selected nodes or if the command is not supported. If the command is supported, returns <see cref="F:Microsoft.VisualStudio.Package.QueryStatusResult.SUPPORTED" /> combined by using bitwise OR with <see cref="F:Microsoft.VisualStudio.Package.QueryStatusResult.INVISIBLE" />.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command to disable.
                </param>
      <param name="selectedNodes">
                    The list of selected nodes.
                </param>
      <param name="handled">
                    Whether the menu was handled. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.DisplayContextMenu(System.Collections.Generic.IList{Microsoft.VisualStudio.Package.HierarchyNode},System.IntPtr)">
      <summary>
                    Shows the shortcut menu for the specified nodes.
                </summary>
      <returns>
                    If no nodes are selected or <paramref name="pointerToVariant" /> is <see cref="System.IntPtr.Zero" />, returns <see cref="F:Microsoft.VisualStudio.NativeMethods.OLECMDERR_E_NOTSUPPORTED" />. Otherwise, it returns the error status of <see cref="M:Microsoft.VisualStudio.Package.HierarchyNode.ShowContextMenu(int menuID, Guid groupGuid, POINTS points)" /> for the appropriate shortcut menu. 
                </returns>
      <param name="selectedNodes">
                    The list of selected nodes.
                </param>
      <param name="pointerToVariant">
                    Pointer to a <see cref="VARIANTARG" /> structure that contains the position of the shortcut menu.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Dispose"></member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Dispose(System.Boolean)"></member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.DocCookie">
      <summary>
                    Gets or sets the ID of the associated file.
                </summary>
      <returns>
                    By default, returns <see cref="F:Microsoft.VisualStudio.Shell.Interop.ShellConstants.VSDOCCOOKIE_NIL" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.DoDefaultAction">
      <summary>
                    Performs the default event in the hierarchy. This is typically called when a user either presses ENTER or double-clicks the item.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>
                    Called when the mouse drags an item over a new hierarchy or hierarchy window.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="pDataObject">
                    Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> interface on the item that is dragged. This data object contains the data that is transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated into the hierarchy window.
                </param>
      <param name="grfKeyState">
                    Current state of the keyboard and the mouse modifier keys. Valid values are shown in the table in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)" />. These values can be combined by using a bitwise OR operator.
                </param>
      <param name="itemid">
                    Item identifier of the item that is being dragged.
                </param>
      <param name="pdwEffect">
                    Returns a member of the <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode.DropEffect" /> enumeration. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.DragLeave">
      <summary>
                    Called when one or more items are dragged out of the hierarchy or hierarchy window, or when the drag-and-drop operation is canceled or completed.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)">
      <summary>
                    Called when one or more items are dragged over the target hierarchy or hierarchy window.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="grfKeyState">
                    Current state of the keyboard keys and the mouse modifier keys. Valid values are shown in the table in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.DragOver(System.UInt32,System.UInt32,System.UInt32@)" />. These values can be combined by using a bitwise OR operator.
                </param>
      <param name="itemid">
                    Item identifier of the drop-data target over which the item is being dragged.
                </param>
      <param name="pdwEffect">
                    On entry, pointer to the value of the <paramref name="pdwEffect" /> parameter of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object. Identifies all effects that the hierarchy supports. On return, must contain one of the effect flags that indicate the result of the drop operation. For a list of <paramref name="pdwEffect" /> values, see <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>
                    Called when one or more items are dropped into the target hierarchy or hierarchy window when the mouse button is released.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="pDataObject">
                    Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> interface on the item that is being dragged. This data object contains the data that is being transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.
                </param>
      <param name="grfKeyState">
                    Current state of the keyboard keys and the mouse modifier keys. Valid values are shown in the table in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)" />. These values can be combined by using a bitwise OR operator.
                </param>
      <param name="itemid">
                    Item identifier of the drop-data target over which the item is being dragged.
                </param>
      <param name="pdwEffect">
                    Returns a member of the <see cref="T:Microsoft.VisualStudio.HierarchyNode.DropEffect" /> enumeration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ExcludeFromProject">
      <summary>
                    Removes this item from the project, but does not delete it from disk.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.ExcludeNodeFromScc">
      <summary>
                    Gets or sets whether a node should be excluded from source code control.
                </summary>
      <returns>true if a node should be excluded, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    Executes the specified non-UI command or displays help for a command.
                </summary>
      <returns>
                    This method supports the standard return values <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" /> and <see cref="F:Microsoft.VisualStudio.VSConstants.E_UNEXPECTED" />, and also the following values: 
                <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />
                    The command was executed successfully.
                <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP" />
                    The <paramref name="guidCmdGroup" /> parameter is not null, but does not specify a recognized command group.
                <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED" />
                    The <paramref name="nCmdId" /> parameter is not a valid command in the group identified by <paramref name="guidCmdGroup" />.
                <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_DISABLED" />
                    The command identified by <paramref name="nCmdId" /> is currently disabled and cannot be executed.
                <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOHELP" />
                    The caller has asked for help on the command identified by <paramref name="nCmdId" />, but no help is available.
                <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_CANCELED" />
                    The user canceled the execution of the command.
                </returns>
      <param name="guidCmdGroup">
                    Unique identifier of the command group.
                </param>
      <param name="nCmdId">
                    The command to be executed. This command must belong to the group specified under <paramref name="guidCmdGroup" />.
                </param>
      <param name="nCmdExecOpt">
                    Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, which describe how the object should execute the command.
                </param>
      <param name="pvaIn">
                    Pointer to a VARIANTARG structure that contains input arguments. Can be null.
                </param>
      <param name="pvaOut">
                    Pointer to a VARIANTARG structure to receive command output. Can be null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    Executes the specified command on the specified item in a UI hierarchy window, or on the hierarchy itself.
                </summary>
      <returns>
                    This method supports the standard return values <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" /> and <see cref="F:Microsoft.VisualStudio.VSConstants.E_UNEXPECTED" />, and also the following values.
                <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />
                    The command was executed successfully.
                <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP" />
                    The <paramref name="guidCmdGroup" /> parameter is not null, but does not specify a recognized command group.
                <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED" />
                    The <paramref name="nCmdId" /> parameter is not a valid command in the group that is identified by <paramref name="guidCmdGroup" />.
                <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_DISABLED" />
                    The command identified by <paramref name="nCmdId" /> is currently disabled and cannot be executed.
                <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOHELP" />
                    The caller has asked for help on the command identified by <paramref name="nCmdId" />, but no help is available.
                <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_CANCELED" />
                    The user canceled the execution of the command.
                </returns>
      <param name="itemId">
                    Identifier of the item that is affected by the command passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" />. Valid values are <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, and <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />. For single selection, this value is the actual item ID. For multiple selections, set <paramref name="itemid" /> equal to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.
                </param>
      <param name="guidCmdGroup">
                    Unique identifier of the command group.
                </param>
      <param name="nCmdId">
                    The command to be executed. This command must belong to the group specified with <paramref name="guidCmdGroup" />.
                </param>
      <param name="nCmdExecOpt">
                    Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration. The values describe how the object should execute the command.
                </param>
      <param name="pvain">
                    Pointer to a <see cref="VARIANTARG" /> structure that contains input arguments. Can be null.
                </param>
      <param name="p">
                    Pointer to a <see cref="VARIANTARG" /> structure to receive command output. Can be null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ExecCommandIndependentOfSelection(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Package.CommandOrigin,System.Boolean@)">
      <summary>
                    Executes commands that do not depend on what is selected.
                </summary>
      <returns>
                    If a command is not supported without a selection, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />. Otherwise, returns the error status of the commands called by this method.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmdId">
                    The ID of the command.
                </param>
      <param name="cmdExecOpt">
                    Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, which describe how the object should execute the command.
                </param>
      <param name="vaIn">
                    Pointer to a VARIANTARG structure that contains input arguments. Can be null.
                </param>
      <param name="vaOut">
                    Pointer to a VARIANTARG structure that contains command output. Can be null.
                </param>
      <param name="commandOrigin">
                    The <see cref="T:Microsoft.VisualStudio.Package.CommandOrigin" /> value. Can be either <see cref="F:Microsoft.VisualStudio.Package.CommandOrigin.UiHierarchy" /> or <see cref="F:Microsoft.VisualStudio.Package.CommandOrigin.OleCommandTarget" />.
                </param>
      <param name="handled">
                    Indicates whether the command was handled.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    Handles execution of a given command on this node.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" /> if the project manager is closed, or if the command is not supported. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, or an error code if one of the executed commands returned an error code.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command. 
                </param>
      <param name="nCmdexecopt">
                    Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration. The values describe how the object should execute the command.
                </param>
      <param name="pvaIn">
                    Pointer to a VARIANTARG structure that contains input arguments. Can be null.
                </param>
      <param name="pvaOut">
                    Pointer to a VARIANTARG structure that contains command output. Can be null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ExecCommandThatDependsOnSelectedNodes(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Package.CommandOrigin,System.Collections.Generic.IList{Microsoft.VisualStudio.Package.HierarchyNode},System.Boolean@)">
      <summary>
                    Handles execution of a command that is executed on a set of nodes.
                </summary>
      <returns>
                    If the command is not supported in this context, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, or the error code that is returned by one of the commands called by this method.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmdId">
                    The ID of the command.
                </param>
      <param name="cmdExecOpt">
                    Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration. The values describe how the object should execute the command.
                </param>
      <param name="vaIn">
                    Pointer to a VARIANTARG structure that contains input arguments. Can be null.
                </param>
      <param name="vaOut">
                    Pointer to a VARIANTARG structure that contains command output. Can be null.
                </param>
      <param name="commandOrigin">
                    The <see cref="T:Microsoft.VisualStudio.Package.CommandOrigin" /> value. Can be either <see cref="F:Microsoft.VisualStudio.Package.CommandOrigin.UiHierarchy" /> or <see cref="F:Microsoft.VisualStudio.Package.CommandOrigin.OleCommandTarget" />.
                </param>
      <param name="selectedNodes">
                    The list of selected nodes.
                </param>
      <param name="handled">
                    Indicates whether the command was handled.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.FindChildByProjectElement(Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Finds a non-virtual hierarchy element (a node with a build item) by its project element.
                </summary>
      <returns>
                    The node if found; otherwise, null.
                </returns>
      <param name="node">
                    The project element to find.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.FirstChild">
      <summary>
                    Gets or sets the first child hierarchy node.
                </summary>
      <returns>
                    The first child hierarchy node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetAddFileFlags(System.String[])">
      <summary>
                    Gets flags that specify how files are added to a project.
                </summary>
      <returns>
                    An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS" /> flags for the specified files.
                </returns>
      <param name="files">
                    The files for which flags must be specified.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetAutomationObject">
      <summary>
                    Gets an automation object for the current node.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProjectItem&lt;HierarchyNode&gt;" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetCanonicalName">
      <summary>
                    Gets the canonical name for the current node.
                </summary>
      <returns>
                    The document moniker, which is typically the fully-qualified name of the document.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetCanonicalName(System.UInt32,System.String@)">
      <summary>
                    Gets the canonical name for the node that is specified by the item ID.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    Item identifier of an item in the hierarchy.
                </param>
      <param name="name">
                    [out]The canonical name (typically the fully-qualified path), if found.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetDocumentManager">
      <summary>
                    Gets the document manager for this node.
                </summary>
      <returns>
                    By default, returns null. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetDragTargetHandlerNode">
      <summary>
                    Gets the node that should handle drag-and-drop operations.
                </summary>
      <returns>
                    The node that should handle drag-and-drop operations.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)">
      <summary>
                    Returns information about one or more of the items being dragged.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="pdwOKEffects">
                    Value that describes the effects displayed while the item is being dragged, such as pointers that change during the drag-and-drop operation. For example, if the item is dragged over an invalid target point, such as the original location of the item, the pointer changes to a circle with a line through it; if the item is dragged over a valid target point, the pointer changes to a file or folder.
                </param>
      <param name="ppDataObject">
                    Contains the data being transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.
                </param>
      <param name="ppDropSource">
                    Item being dragged.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetEditLabel">
      <summary>
                    Gets a caption value for the editable node.
                </summary>
      <returns>
                    A caption value. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetGuidProperty(System.Int32,System.Guid@)">
      <summary>
                    Gets the GUID value of the supplied property.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise, <see cref="F:Microsoft.VisualStudio.VSConstants.DISP_E_MEMBERNOTFOUND" />.
                </returns>
      <param name="propid">
                    Identifier of the property. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.
                </param>
      <param name="guid">
                    GUID of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>
                    Gets the GUID value of the property, given the item ID.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, <see cref="F:Microsoft.VisualStudio.VSConstants.DISP_E_MEMBERNOTFOUND" />.
                </returns>
      <param name="itemId">
                    Item ID.
                </param>
      <param name="propid">
                    Identifier of the property. For a list of <paramref name="propId" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.
                </param>
      <param name="guid">
                    GUID of the property that is identified by the <paramref name="itemId" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetIconHandle(System.Boolean)">
      <summary>
                    Gets the icon handle.
                </summary>
      <returns>
                    The icon handle; otherwise, null.
                </returns>
      <param name="open">
                    Indicates whether the folder is open 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetMkDocument">
      <summary>
                    Gets the name of the node.
                </summary>
      <returns>
                    By default, returns the empty string. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <summary>
                    When overridden in a derived class, gets the nested hierarchy element that is specified by the item ID.
                </summary>
      <returns>
                    When overridden in a derived class, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds; otherwise, an error code.
                </returns>
      <param name="itemId">
                    Item identifier of an item in the hierarchy. Valid values are <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, and <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.
                </param>
      <param name="iidHierarchyNested">
                    Identifier of the interface to be returned in <paramref name="ppHierarchyNested" />.
                </param>
      <param name="ppHierarchyNested">
                    [out] Returns a pointer to the interface whose identifier was passed in <paramref name="iidHierarchyNested" />.
                </param>
      <param name="pItemId">
                    [out] Returns a pointer to an item identifier of the root node of the nested hierarchy.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetProperty(System.Int32)">
      <summary>
                    Gets properties of a given node or hierarchy.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, <see cref="F:Microsoft.VisualStudio.VSConstants.DISP_E_MEMBERNOTFOUND" />.
                </returns>
      <param name="propId">
                    The identifier of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetProperty(System.UInt32,System.Int32,System.Object@)">
      <summary>
                    Gets properties of a given node or hierarchy.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, <see cref="F:Microsoft.VisualStudio.VSConstants.DISP_E_MEMBERNOTFOUND" />.
                </returns>
      <param name="itemId">
                    Item identifier of an item in the hierarchy.
                </param>
      <param name="propId">
                    Identifier of the property. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.
                </param>
      <param name="propVal">
                    Property value.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetQueryAddFileFlags(System.String[])">
      <summary>
                    Sets the flags to be used to add the specified set of files.
                </summary>
      <returns>
                    If there are 0 or 1 filenames in the array, returns an array of 1 <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS.VSQUERYADDFILEFLAGS_NoFlags" />. Otherwise, returns an array of <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS.VSQUERYADDFILEFLAGS_NoFlags" /> that is the same size as the array.
                </returns>
      <param name="files">
                    The names of the files to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetQueryRemoveFileFlags(System.String[])">
      <summary>
                    Sets the flags to be used to removed the specified files.
                </summary>
      <returns>
                    By default, returns an array of <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYROMEOVEFILEFLAGS.VSQUERYREMOVEFILEFLAGS_NoFlags" /> of the same size as the array of files.
                </returns>
      <param name="files">
                    The names of the files to remove.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetRelationalName">
      <summary>
                    Gets the relational name.
                </summary>
      <returns>
                    The relational name.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetRelationNameExtension">
      <summary>
                    Gets the extension that is associated with a relational name.
                </summary>
      <returns>
                    The extension.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetRemoveFileFlags(System.String[])">
      <summary>
                    Gets flags that specify how files are added to a project.
                </summary>
      <returns>
                    An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS" /> flags for the specified files.
                </returns>
      <param name="files">
                    Gets flags that specify how files are added to a project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
      <summary>
                    Provides a list of files and their associated flags for source code control.
                </summary>
      <param name="files">
                    A list of files.
                </param>
      <param name="flags">
                    A list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags" /> flags.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
      <summary>
                    Provides a list of special files and their associated flags for source code control.
                </summary>
      <param name="sccFile">
                    One of the files that is associated with the node.
                </param>
      <param name="files">
                    The list of files.
                </param>
      <param name="flags">
                    The list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags" /> flags.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetService(System.Type)">
      <summary>
                    Gets the service of the specified type, if it is available.
                </summary>
      <returns>
                    An object that implements the requested service, or null if the service cannot be resolved.
                </returns>
      <param name="type">
                    The Type of the service to retrieve.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>
                    Gets the service provider from which to access the services.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="site">
                    Service provider.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.HasDesigner">
      <summary>
                    Gets or sets whether the hierarchy node has a designer associated with it.
                </summary>
      <returns>true if the hierarchy node has a designer associated with it; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.HasParentNodeNameRelation">
      <summary>
                    Defines whether a node has a name relation to its parent node.
                </summary>
      <returns>
                    Returns true if the node has a name relation.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.ID">
      <summary>
                    Gets the hierarchy node ID.
                </summary>
      <returns>
                    The hierarchy node ID.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.IgnoreItemFileChanges(System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.IgnoreItemFileChanges(System.UInt32,System.Int32)">
      <summary>
                    Flag that indicates that changes to a file can be ignored when the item is saved or reloaded.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId"></param>
      <param name="ignoreFlag"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.ImageIndex">
      <summary>
                    Gets the index of the associated image.
                </summary>
      <returns>
                    By default, returns <see cref="F:Microsoft.VisualStudio.Package.HierarchyNode.NoImage" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.InternalExecCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Package.CommandOrigin)">
      <summary>
                    The main entry point for command execution. It is called from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleCommandTarget" /> execution methods.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" /> if the project manager is unavailable or if the command is not supported; otherwise, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the command succeeded or if it was aborted or canceled; otherwise, returns the error code that is returned by the command.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmdId">
                    The ID of the command.
                </param>
      <param name="cmdExecOpt">
                    Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration. The values describe how the object should execute the command.
                </param>
      <param name="vaIn">
                    Pointer to a VARIANTARG structure that contains input arguments. Can be null.
                </param>
      <param name="vaOut">
                    Pointer to a VARIANTARG structure that contains command output. Can be null.
                </param>
      <param name="commandOrigin">
                    The <see cref="T:Microsoft.VisualStudio.Package.CommandOrigin" /> value. Can be either <see cref="F:Microsoft.VisualStudio.Package.CommandOrigin.UiHierarchy" /> or <see cref="F:Microsoft.VisualStudio.Package.CommandOrigin.OleCommandTarget" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.IsExpanded">
      <summary>
                    Gets or sets whether the hierarchy node is in the expanded state.
                </summary>
      <returns>true if the hierarchy node is in the expanded state; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)">
      <summary>
                    Determines whether the supplied item has changed.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    Item identifier of an item in the hierarchy.
                </param>
      <param name="docData">
                    A pointer to the document data of the item.
                </param>
      <param name="isDirty">
                    [out] true if the item has changed; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.IsItemReloadable"></member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.IsItemReloadable(System.UInt32,System.Int32@)">
      <summary>
                    Called to determine whether a project item is reloadable before <see cref="M:Microsoft.VisualStudio.Package.HierarchyNode.ReloadItem(System.UInt32,System.UInt32)" /> is called.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId"></param>
      <param name="isReloadable"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.ItemNode">
      <summary>
                    Gets or sets the associated project element node, which represents the build item.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.ItemsDraggedOrCutOrCopied">
      <summary>
                    Gets the list of nodes that are selected for a drag, cut, or copy operation.
                </summary>
      <returns>
                    Returns a list of the nodes that are selected.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.ItemTypeGuid">
      <summary>
                    Gets the GUID of the item type of the node.
                </summary>
      <returns>
                    By default, returns <see cref="System.Guid.Empty" />. Implementations should return an item type GUID from the values listed in <see cref="T:Microsoft.VisualStudio.VSConstants" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.LastChild">
      <summary>
                    Gets and sets the last child node.
                </summary>
      <returns>
                    The last child node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.MenuCommandId">
      <summary>
                    Gets the menu command ID that is associated with the node.
                </summary>
      <returns>
                    By default, returns <see cref="T:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_NOCOMMANDS" />. Implementations should return the ID of the shortcut menu that is associated with the node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.NameRelationSeparator">
      <summary>
                    Gets the name relation separator.
                </summary>
      <returns>
                    The name relation separator.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.NextSibling">
      <summary>
                    Gets or sets the next sibling node.
                </summary>
      <returns>
                    The next sibling node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.NodeProperties">
      <summary>
                    Gets and sets the node properties of this node.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.NodeProperties" /> of this node.
                </returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.HierarchyNode.NoImage">
      <summary>
                    The constant for a missing image.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.OleServiceProvider">
      <summary>
                    Gets the OLE service provider for this node.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.OleServiceProvider" /> for this node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)">
      <summary>
                    Notifies the source hierarchy that information dragged from it is about to be dropped on a target. This method is called immediately after the mouse button is released on a drop.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="pDataObject">
                    Object being dragged. This data object contains the data that is being transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated into the hierarchy window of the new hierarchy.
                </param>
      <param name="dwEffect">
                    A value of <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode.DropEffect" />.
                </param>
      <param name="fCancelDrop">
                    If 1, then the drop is canceled by the source hierarchy. If 0, then the drop can continue.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.OnDropNotify(System.Int32,System.UInt32)">
      <summary>
                    Notifies clients that the dragged item was dropped.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="fDropped">
                    If 1, then the dragged item was dropped on the target. If 0, then the drop did not occur.
                </param>
      <param name="dwEffects">
                    A value of <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode.DropEffect" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.OnInvalidateItems(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Notifies clients when changes are made to the item inventory of a hierarchy.
                </summary>
      <param name="parent">
                    Parent item identifier, or root, of the hierarchy whose item inventory has changed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.OnItemAdded(Microsoft.VisualStudio.Package.HierarchyNode,Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Notifies clients when an item is added to the hierarchy.
                </summary>
      <param name="parent">
                    Identifier of the parent, or root node of the hierarchy in which the item is added.
                </param>
      <param name="child">
                    Identifier that indicates where the item is added in relation to other items (siblings) in the parent hierarchy.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.OnItemDeleted">
      <summary>
                    Notifies clients when an item is deleted from the hierarchy.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.OnItemsAppended(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Notifies clients when items are appended to the end of the hierarchy.
                </summary>
      <param name="parent">
                    Identifier of the parent or root node of the hierarchy to which the item is appended.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.OnPropertyChanged(Microsoft.VisualStudio.Package.HierarchyNode,System.Int32,System.UInt32)">
      <summary>
                    Notifies clients when one or more properties of an item have changed.
                </summary>
      <param name="node">
                    Identifier of the item whose property has changed.
                </param>
      <param name="propid">
                    Identifier of the property of <paramref name="node" />. For a list of property ID values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.
                </param>
      <param name="flags">
                    Not used, pass in 0.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.Parent">
      <summary>
                    Gets or sets the parent node of this element.
                </summary>
      <returns>
                    The parent node of the hierarchy node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ParseCanonicalName(System.String,System.UInt32@)">
      <summary>
                    Returns the identifier of the hierarchy item, given its canonical name.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="name">
                    Canonical name of the hierarchy item.
                </param>
      <param name="itemId">
                    Item identifier for the hierarchy item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.PasteFromClipboard(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Pastes an item from the clipboard.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
      <param name="targetNode">
                    The node into which the item is to be pasted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.PrepareSelectedNodesForClipBoard">
      <summary>
                    Prepares selected nodes for the clipboard.
                </summary>
      <returns>
                    A <see cref="T:System.Text.StringBuilder" /> that is composed of the project reference of the current node, followed by the null character.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.PreviousSibling">
      <summary>
                    Gets or sets the node that immediately precedes this hierarchy node element.
                </summary>
      <returns>
                    The previous sibling in the child list of the parent node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.ProjectMgr">
      <summary>
                    Gets or sets the root element for this hierarchy node.
                </summary>
      <returns>
                    The root element for this node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.QueryClose(System.Int32@)">
      <summary>
                    Determines whether the given hierarchy can be closed.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="fCanClose">
                    If 1, then the hierarchy can be closed. If not 1, then the hierarchy cannot be closed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.QueryDeleteItem(System.UInt32,System.UInt32,System.Int32@)">
      <summary>
                    Called by the environment to determine whether the hierarchy supports item deletion, item removal, or both.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="delItemOp">
                    Determines whether the hierarchy or hierarchy item is deleted from storage or removed from the project. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION" /> enumeration.
                </param>
      <param name="itemId">
                    Item identifier of an item in the hierarchy. Valid values are <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, and <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />. Use <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> to delete all in the hierarchy. <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" /> is not supported.
                </param>
      <param name="candelete">
                    If 1, then the hierarchy supports either item deletion or item removal, depending on the value specified for the <paramref name="delItemOp" /> parameter. If 0, then the hierarchy or hierarchy item cannot be deleted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>
                    Queries the object for the status of one or more commands that are generated by user interface events.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="guidCmdGroup">
                    Unique identifier of the command group. All the commands that are passed in the <paramref name="prgCmds" /> array must belong to the group that is specified by <paramref name="guidCmdGroup" />.
                </param>
      <param name="cCmds">
                    The number of commands in the <paramref name="prgCmds" /> array.
                </param>
      <param name="prgCmds">
                    A caller-allocated array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD" /> structures that indicate the commands for which the caller needs status information. This method fills the cmdf member of each structure with values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> enumeration.
                </param>
      <param name="pCmdText">
                    Pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXTF" /> structure to return a name and/or status information of a single command. Can be null to indicate that the caller does not need this information.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>
                    Queries the object for the command status.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    Item identifier of an item in the hierarchy.
                </param>
      <param name="guidCmdGroup">
                    Unique identifier of the command group. All the commands that are passed in the <paramref name="prgCmds" /> array must belong to the group that is specified by <paramref name="guidCmdGroup" />.
                </param>
      <param name="cCmds">
                    The number of commands in the <paramref name="prgCmds" /> array.
                </param>
      <param name="cmds">
                    A caller-allocated array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD" /> structures that indicate the commands for which the caller needs status information. This method fills the cmdf member of each structure with values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> enumeration.
                </param>
      <param name="pCmdText">
                    Pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT" /> structure in which to return the name and/or status information of a single command. Can be null to indicate that the caller does not need this information.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.QueryStatusCommandFromOleCommandTarget(System.Guid,System.UInt32,System.Boolean@)">
      <summary>
                    Handles menus that originate from <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />.
                </summary>
      <returns>
                    If the command is not supported, returns <see cref="F:Microsoft.VisualStudio.Package.QueryStatusResult.NOTSUPPORTED" />. If the command is supported, returns <see cref="F:Microsoft.VisualStudio.Package.QueryStatusResult.SUPPORTED" /> combined by using bitwise OR with <see cref="F:Microsoft.VisualStudio.Package.QueryStatusResult.ENABLED" />.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="handled">
                    Indicates whether the command was handled.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Package.QueryStatusResult@)">
      <summary>
                    Handles command status on a node. 
                </summary>
      <returns>
                    If the command is supported, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; if it is not supported, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="pCmdText">
                    A pointer to a structure to return name and/or status information.
                </param>
      <param name="result">
                    The result of the command.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.QueryStatusSelection(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr,Microsoft.VisualStudio.Package.CommandOrigin)">
      <summary>
                    Queries for the command status on the selected nodes.
                </summary>
      <returns>
                    If the program manager is null or closed, or the command is not supported, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />. If the GUID of the command group is empty, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_UNKNOWNGROUP" />. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. 
                </returns>
      <param name="cmdGroup"></param>
      <param name="cCmds">
                    The number of commands in the command array.
                </param>
      <param name="prgCmds">
                    The array of commands to apply.
                </param>
      <param name="pCmdText">
                    Pointer to a structure that contains name and/or status information.
                </param>
      <param name="commandOrigin">
                    The <see cref="T:Microsoft.VisualStudio.Package.CommandOrigin" /> value. Can be either <see cref="F:Microsoft.VisualStudio.Package.CommandOrigin.UiHierarchy" /> or <see cref="F:Microsoft.VisualStudio.Package.CommandOrigin.OleCommandTarget" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.QueryStatusSelectionOnNodes(System.Collections.Generic.IList{Microsoft.VisualStudio.Package.HierarchyNode},System.Guid,System.UInt32,System.IntPtr)">
      <summary>
                    Queries the selected nodes for the command status.
                </summary>
      <returns>
                    If any of the selected nodes supports the command, returns <see cref="F:Microsoft.VisualStudio.Package.QueryStatusResult.SUPPORTED" />. If any of the selected nodes has the command set to invisible, returns <see cref="F:Microsoft.VisualStudio.Package.QueryStatusResult.INVISIBLE" />. If all the selected nodes have the command enabled, returns <see cref="F:Microsoft.VisualStudio.Package. QueryStatusResult.ENABLED" />. If all the selected nodes have the command latched (toggled on), returns <see cref="F:Microsoft.VisualStudio.Package. QueryStatusResult.LATCHED" />. Combinations are made by using bitwise OR.
                </returns>
      <param name="selectedNodes">
                    The list of nodes.
                </param>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="pCmdText">
                    Pointer to a structure that contains the name or status information.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ReDraw(Microsoft.VisualStudio.Package.UIHierarchyElement)">
      <summary>
                    Redraws the node.
                </summary>
      <param name="element">
                    The element to redraw.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.RegisterClipboardNotifications(System.Boolean)">
      <summary>
                    Registers and un-registers clipboard events for the Solution Explorer.
                </summary>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ReloadItem(System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ReloadItem(System.UInt32,System.UInt32)">
      <summary>
                    Called to reload the project item.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId"></param>
      <param name="reserved"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Remove(System.Boolean)">
      <summary>
                    Removes items from the hierarchy.
                </summary>
      <param name="removeFromStorage">true indicates that removal from storage is requested.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.RemoveChild(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Removes a child node.
                </summary>
      <param name="node">
                    The <see cref="HierarchyNode" /> to be removed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)">
      <summary>
                    Saves the hierarchy item to disk.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="saveFlag">
                    Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" /> enumeration.
                </param>
      <param name="silentSaveAsName">
                    The file name to be applied when <paramref name="dwSave" /> is set to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS.VSSAVE_SilentSave" />.
                </param>
      <param name="itemid">
                    The item identifier of an item in the hierarchy.
                </param>
      <param name="docData">
                    A pointer to the <see cref="T:IUnknown" /> interface of the hierarchy item saved.
                </param>
      <param name="cancelled">true if the save action was canceled.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.SetEditLabel(System.String)">
      <summary>
                    Sets a caption value for the editable node.
                </summary>
      <returns>
                    If the method succeeds, it returns 0.
                </returns>
      <param name="label">
                    A caption value.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The method failed to set a caption value for the editable node.
                </exception>
      <exception cref="T:System.NotImplementedException">
                    The root node was specified.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.SetEditLabel(System.String,System.String)">
      <summary>
                    Sets a caption value for the editable node.
                </summary>
      <returns>
                    Implementations should return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the rename succeeded, or the appropriate error code if it did not.
                </returns>
      <param name="label">
                    A caption value.
                </param>
      <param name="relativePath"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.SetGuidProperty(System.Int32,System.Guid@)">
      <summary>
                    Sets properties whose values are GUIDs.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="propid">
                    Identifier of the hierarchy property. For a list of <paramref name="propId" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.
                </param>
      <param name="guid">
                    The GUID to set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>
                    Sets properties whose values are GUIDs.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    Item identifier of an item in the hierarchy.
                </param>
      <param name="propid">
                    Identifier of the hierarchy property. For a list of <paramref name="propId" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.
                </param>
      <param name="guid">
                    The GUID to set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.SetProperty(System.Int32,System.Object)">
      <summary>
                    Sets properties of a specific node, or of the hierarchy.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="propid">
                    Identifier of the hierarchy property. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.
                </param>
      <param name="value">
                    Property information.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.SetProperty(System.UInt32,System.Int32,System.Object)">
      <summary>
                    Sets properties of a specific node, or of the hierarchy.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    Item identifier of an item in the hierarchy.
                </param>
      <param name="propid">
                    Identifier of the hierarchy property. For a list of <paramref name="propId" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.
                </param>
      <param name="value">
                    Property information.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>
                    Sets the service provider from which to access the services.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="site">
                    Service provider to be set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.Shell.Interop.POINTS)">
      <summary>
                    Shows the specified shortcut menu at the specified location.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, the error code returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.ShowContextMenu(uint dwCompRole, ref System.Guid rclsidActive, int nMenuId, T:Microsoft.VisualStudio.Shell.Interop.POINTS[] pos, T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget pCmdTrgtActive)" />.
                </returns>
      <param name="menuId"></param>
      <param name="menuGroup"></param>
      <param name="points">
                    The location at which to show the menu.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.ShowInDesigner(System.Collections.Generic.IList{Microsoft.VisualStudio.Package.HierarchyNode})">
      <summary>
                    Handles the Show in Designer command.
                </summary>
      <returns>
                    By default, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />.Implementations that want to support the command should implement this method.
                </returns>
      <param name="selectedNodes">
                    The list of selected nodes.
                </param>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.HierarchyNode.SolutionExplorer">
      <summary>
                    The GUID of the Solution Explorer.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.SortPriority">
      <summary>
                    Gets the default sort priority of this node.
                </summary>
      <returns>
                    By default, returns <see cref="F:Microsoft.VisualStudio.Package.DefaultSortOrderNode.HierarchyNode" />. Implementations should return the appropriate value.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.SourceDraggedOrCutOrCopied">
      <summary>
                    Gets and sets whether there are items to be dragged, cut, or copied.
                </summary>
      <returns>
                    Returns true if there are items selected; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.StateIconIndex">
      <summary>
                    Gets the source code control state icon for a file.
                </summary>
      <returns>
                    If the file is not in source code control, returns <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_NOSTATEICON" />; otherwise, gets the icon from the source code control manager.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.UnadviseHierarchyEvents(System.UInt32)">
      <summary>
                    Disables client notification of hierarchy events.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="cookie">
                    The identifier of the client to be disabled from receiving notifications of hierarchy events.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Unused0">
      <summary>
                    Adds new methods without recompiling or breaking binary compatibility.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Unused1">
      <summary>
                    Adds new methods without recompiling or breaking binary compatibility.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Unused2">
      <summary>
                    Adds new methods without recompiling or breaking binary compatibility.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Unused3">
      <summary>
                    Adds new methods without recompiling or breaking binary compatibility.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.Unused4">
      <summary>
                    Adds new methods without recompiling or breaking binary compatibility.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.HierarchyNode.UpdateSccStateIcons">
      <summary>
                    Redraws the source code control state icons of the node.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.Url">
      <summary>
                    Gets the absolute path for this node.
                </summary>
      <returns>
                    The absolute path for this node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.HierarchyNode.VirtualNodeName">
      <summary>
                    The name of a virtual node.
                </summary>
      <returns>
                    By default returns the empty string. This should be implemented by virtual nodes only.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IBuildDependencyOnProjectContainer">
      <summary>
                    Defines how to handle a build dependency on a project container.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.IBuildDependencyOnProjectContainer.BuildNestedProjectsOnBuild">
      <summary>
                    Gets or sets whether or not nested projects should be built together with the parent project.
                </summary>
      <returns>true if nested projects should be built together with the parent project, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.IBuildDependencyOnProjectContainer.EnumNestedHierachiesForBuildDependency">
      <summary>
                    Enumerates the nested hierarchies for the build dependency.
                </summary>
      <returns>
                    An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interfaces for the nested project nodes.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IBuildDependencyUpdate">
      <summary>
                    Stores and manipulates build dependencies.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.IBuildDependencyUpdate.AddBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)">
      <summary>
                    Adds a build dependency.
                </summary>
      <param name="dependency">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency" /> to add.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.IBuildDependencyUpdate.BuildDependencies">
      <summary>
                    Gets build dependencies.
                </summary>
      <returns>
                    An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency" /> interfaces for the build dependencies.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.IBuildDependencyUpdate.RemoveBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)">
      <summary>
                    Removes a build dependency.
                </summary>
      <param name="dependency">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency" /> to remove.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ImageHandler"></member>
    <member name="M:Microsoft.VisualStudio.Package.ImageHandler.#ctor">
      <summary>
                    Initializes an empty new instance of <see cref="T:Microsoft.VisualStudio.Package.ImageHandler" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ImageHandler.#ctor(System.IO.Stream)">
      <summary>
                    Initializes an empty new instance of <see cref="T:Microsoft.VisualStudio.Package.ImageHandler" /> from a <see cref="T:System.IO.Stream." /></summary>
      <param name="resourceStream">
                    The <see cref="T:System.IO.Stream" /> from which to initialize the <see cref="T:Microsoft.VisualStudio.Package.ImageHandler" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ImageHandler.#ctor(System.Windows.Forms.ImageList)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ImageHandler" /> from an <see cref="T:System.Windows.Forms.ImageList" />.
                </summary>
      <param name="list">
                    The <see cref="T:System.Windows.Forms.ImageList" /> to populate the <see cref="T:Microsoft.VisualStudio.Package.ImageHandler" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ImageHandler.AddImage(System.Drawing.Image)">
      <summary>
                    Adds an image.
                </summary>
      <param name="image"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ImageHandler.Close">
      <summary>
                    Closes the <see cref="T:Microsoft.VisualStudio.Package.ImageHandler" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ImageHandler.GetIconHandle(System.Int32)">
      <summary>
                    Gets the handle to an icon.
                </summary>
      <returns>
                    A handle to the specified icon.
                </returns>
      <param name="iconIndex">
                    The position of the icon in the <see cref="T:Microsoft.VisualStudio.Package.ImageHandler" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ImageHandler.ImageList">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Forms.ImageList" />.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Forms.ImageList" /> contained by the <see cref="T:Microsoft.VisualStudio.Package.ImageHandler" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IProjectConfigProperties">
      <summary>
                    Defines the configuration-dependent project properties.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.IProjectConfigProperties.OutputPath">
      <summary>
                    Gets or sets the output path of the project.
                </summary>
      <returns>
                    The output path of the project.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IProjectEvents">
      <summary>
                    Specifies events associated with projects.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Package.IProjectEvents.AfterProjectFileOpened">
      <summary>
                    Fired after a project file is opened.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Package.IProjectEvents.BeforeProjectFileClosed">
      <summary>
                    Fired before a project file is closed.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IProjectEventsListener">
      <summary>
                    Specifies whether an object receives project events.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.IProjectEventsListener.IsProjectEventsListener">
      <summary>
                    Specifies whether an object receives project events.
                </summary>
      <returns>
                    Returns true if the object is a project event listener.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IProjectEventsProvider">
      <summary>
                    Specifies events for a project events provider.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.IProjectEventsProvider.ProjectEventsProvider">
      <summary>
                    Gets events defined by a provider.
                </summary>
      <returns>
                    Project events defined by <see cref="T:Microsoft.VisualStudio.Package.IProjectEvents" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IReferenceContainer">
      <summary>
                    Defines a container for project references.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.IReferenceContainer.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
      <summary>
                    Adds a reference from a selection.
                </summary>
      <returns>
                    The added <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" />.
                </returns>
      <param name="selectorData">
                    A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA" /> structure that defines the selection.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.IReferenceContainer.EnumReferences">
      <summary>
                    Enumerates the references in the container.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IList" /> of type <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" /> of the references in the container.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.IReferenceContainer.LoadReferencesFromBuildProject(Microsoft.Build.BuildEngine.Project)">
      <summary>
                    Loads references into the container from the build project.
                </summary>
      <param name="buildProject">
        <see cref="T:Microsoft.Build.BuildEngine.Project" />.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IReferenceContainerProvider">
      <summary>
                    Defines the handling of the project reference container.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.IReferenceContainerProvider.GetReferenceContainer">
      <summary>
                    Gets the reference container interface of the project.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.IReferenceContainer" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ISingleFileGenerator">
      <summary>
                    Runs a generator on the current project item.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ISingleFileGenerator.RunGenerator(System.String)">
      <summary>
                    Runs a generator on a project item.
                </summary>
      <param name="document">
                    The document on which to run the generator.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.LocalizableProperties">
      <summary>
                    Defines the dynamic properties of the project. This class is an implementation of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.LocalizableProperties" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.CreateDesignPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
      <summary>
                    Creates a new <see cref="T:Microsoft.VisualStudio.Package.DesignPropertyDescriptor" /> from the specified <see cref="T:System.ComponentModel.PropertyDescriptor" />.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.DesignPropertyDescriptor" />.
                </returns>
      <param name="propertyDescriptor"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetAttributes">
      <summary>
                    Gets an attribute collection.
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetClassName">
      <summary>
                    Gets the class name of this class.
                </summary>
      <returns>
                    The full name of the type of this class.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetComponentName">
      <summary>
                    Gets the component name.
                </summary>
      <returns>
                    The name of the component.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetConverter">
      <summary>
                    Gets the type converter.
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetDefaultEvent">
      <summary>
                    Gets the default event.
                </summary>
      <returns>
                    The default <see cref="T:System.ComponentModel.EventDescriptor" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetDefaultProperty">
      <summary>
                    Gets the default property.
                </summary>
      <returns>
                    The default <see cref="T:System.ComponentModel.PropertyDescriptor" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetEditor(System.Type)">
      <summary>
                    Gets an editor of the specified base type.
                </summary>
      <returns>
                    The editor of the specified base type.
                </returns>
      <param name="editorBaseType">
                    The type of editor.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetEvents">
      <summary>
                    Gets the events collection.
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetEvents(System.Attribute[])">
      <summary>
                    Gets a collection of the events that satisfy the attribute filter.
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />.
                </returns>
      <param name="attributes">
                    An array of attributes to be used a filter.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetProperties">
      <summary>
                    Gets the collection of properties.
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetProperties(System.Attribute[])">
      <summary>
                    Gets a collection of properties using the specified parameters as a filter.
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.
                </returns>
      <param name="attributes">
                    An array of <see cref="T:System.Attribute" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LocalizableProperties.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>
                    Gets the owner of the specified property.
                </summary>
      <returns>
                    The current instance of <see cref="T:Microsoft.VisualStudio.Package.LocalizableProperties" />.
                </returns>
      <param name="pd">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ModuleKindFlags">
      <summary>
                    Defines the type of the module.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ModuleKindFlags.ConsoleApplication">
      <summary>
                    The module is a console application.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ModuleKindFlags.WindowsApplication">
      <summary>
                    The module is a Windows application.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ModuleKindFlags.DynamicallyLinkedLibrary">
      <summary>
                    The module is a managed assembly library.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ModuleKindFlags.ManifestResourceFile">
      <summary>
                    The module is a manifest resource file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ModuleKindFlags.UnmanagedDynamicallyLinkedLibrary">
      <summary>
                    The module is an unmanaged COM component library.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.MsBuildGeneratedItemType">
      <summary>
                    Defines the constant strings that are used with the build item types that are returned from MSBuild.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MsBuildGeneratedItemType.ComReferenceWrappers">
      <summary>
                    The assemblies that are generated from COM libraries.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MsBuildGeneratedItemType.ReferenceCopyLocalPaths">
      <summary>
                    Local private assemblies.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.MSBuildResult">
      <summary>
                    Defines the current status of the build process.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MSBuildResult.Suspended">
      <summary>
                    The build is suspended.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MSBuildResult.Resumed">
      <summary>
                    The build has been restarted.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed">
      <summary>
                    The build failed.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MSBuildResult.Successful"></member>
    <member name="T:Microsoft.VisualStudio.Package.MsBuildTarget">
      <summary>
                    Defines the constant strings that are used with the MSBuild target for the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MsBuildTarget.Build">
      <summary>
                    Builds the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MsBuildTarget.Clean">
      <summary>
                    Cleans the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MsBuildTarget.Rebuild">
      <summary>
                    Rebuilds the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MsBuildTarget.ResolveAssemblyReferences">
      <summary>
                    Resolves the assembly references of the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MsBuildTarget.ResolveComReferences">
      <summary>
                    Resolves the COM component references of the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.MsBuildTarget.ResolveProjectReferences">
      <summary>
                    Resolves the subproject references of the project.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.NestedProjectBuildDependency">
      <summary>
                    Describes a build dependency to a nested project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectBuildDependency.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.NestedProjectBuildDependency" />.
                </summary>
      <param name="dependentHierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the associated nested project node.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectBuildDependency.get_CanonicalName(System.String@)">
      <summary>
                    When implemented by derived classes, gets the canonical name of the build project.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="canonicalName">
                    [out] The canonical name of the build project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectBuildDependency.get_Description(System.String@)">
      <summary>
                    When implemented in derived classes, gets the build dependency description.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="description">
                    [out] The description of the build dependency.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectBuildDependency.get_HelpContext(System.UInt32@)">
      <summary>
                    When implemented in derived classes, gets the help context.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="helpContext">
                    [out] The help context.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectBuildDependency.get_HelpFile(System.String@)">
      <summary>
                    When implemented in derived classes, gets the help file.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="helpFile">
                    [out] The help file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectBuildDependency.get_MustUpdateBefore(System.Int32@)">
      <summary>
                    Gets whether or not this build dependency must be updated.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="mustUpdateBefore">
                    [out] Returns true; build dependencies must always be updated.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectBuildDependency.get_ReferredProject(System.Object@)">
      <summary>
                    Gets the project for which this is a build dependency.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, or E_FAIL if the project is null.
                </returns>
      <param name="unknownProject">
                    [out] The project for which this is a build dependency.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectBuildDependency.get_Type(System.Guid@)">
      <summary>
                    Gets the GUID type of the build dependency.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="guidType">
                    [out] Returns <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VS_DEPTYPE_BUILD_PROJECT" />.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.NestedProjectNode">
      <summary>
                    Represents a project node that is nested under another project node in the hierarchy.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.NestedProjectNode" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.NestedProjectNode" /> for the specified root project and the project element associated with the nested project.
                </summary>
      <param name="root">
        <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </param>
      <param name="element">
        <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.AddVirtualProject"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)">
      <summary>
                    Determines whether or not the item can be deleted.
                </summary>
      <returns>
                    Always returns false.
                </returns>
      <param name="deleteOperation">
                    Flags from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION" /> enumeration.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.NestedProjectNode.CanExecuteCommand">
      <summary>
                    Gets whether or not this node can execute commands if it is selected.
                </summary>
      <returns>
                    Always returns false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.NestedProjectNode.Caption">
      <summary>
                    Gets the caption, or display name, of the node.
                </summary>
      <returns>
                    The non-editable display name of the node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.Close">
      <summary>
                    Closes a nested project. This method is not implemented.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.CreateProjectDirectory">
      <summary>
                    Creates a project directory for the nested project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.Dispose(System.Boolean)">
      <summary>
                    Disposes the object and its resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.GetAddFileFlags(System.String[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.GetAutomationObject">
      <summary>
                    Gets the automation-compliant object that represents a subproject node.
                </summary>
      <returns>
                    The automation-compliant object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.GetEditLabel"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.GetGuidProperty(System.Int32,System.Guid@)">
      <summary>
                    Gets the GUID value for the specified property.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="propid">
                    The ID of the property.
                </param>
      <param name="guid">
                    [out] Returns the GUID value.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.GetIconHandle(System.Boolean)">
      <summary>
                    Gets the handle of the icon that represents the nested project node. 
                </summary>
      <returns>
                    The handle of the icon that represents the nested project node. 
                </returns>
      <param name="open">
                    Not used, users may pass in 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.GetMkDocument">
      <summary>
                    Gets the project's absolute path.
                </summary>
      <returns>
                    The project's absolute path.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.GetProperty(System.Int32)">
      <summary>
                    Gets the property specified by the property ID.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="propId">
                    A member of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" /> enumeration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.GetQueryAddFileFlags(System.String[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.GetQueryRemoveFileFlags(System.String[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.GetRemoveFileFlags(System.String[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.IgnoreItemFileChanges(System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.Init(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)">
      <summary>
                    Initializes the nested project node. This method should be called just after the node is created.
                </summary>
      <param name="fileName">
                    The nested project file.
                </param>
      <param name="destination">
                    The location on disk of the project file.
                </param>
      <param name="projectName">
                    The name of the project.
                </param>
      <param name="createFlags">
                    Flags from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> enumeration.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.NestedProjectNode.IsDisposed">
      <summary>
                    Gets or sets whether or not this node has already been disposed.
                </summary>
      <returns>true if this node has already been disposed, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)">
      <summary>
                    Determines whether or not the hierarchy node has changed.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    The item ID of the node.
                </param>
      <param name="punkDocData">
                    A pointer to the IUnknown interface of the hierarchy node.
                </param>
      <param name="pfDirty">
                    [out] Returns true if the node is dirty, false otherwise.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.NestedProjectNode.ItemTypeGuid">
      <summary>
                    Gets the type GUID of a nested project node.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.GUID_ItemType_SubProject" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.LockRDTEntry">
      <summary>
                    Locks the Running Document Table entry for the nested project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.OnChanged(System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.OnRequestEdit(System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.ReloadItem(System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.RenameNestedProjectInParentProject(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)">
      <summary>
                    Saves to disk the file backing the specified hierarchy node.
                </summary>
      <returns>
                    If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.
                </returns>
      <param name="dwSave">
                    Flags from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" /> enumeration.
                </param>
      <param name="silentSaveAsName">
                    The file name to save to if <paramref name="dwSave" /> includes <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS.VSSAVE_SilentSave" />.
                </param>
      <param name="itemid">
                    The item ID of the hierarchy item to be saved.
                </param>
      <param name="punkDocData">
                    A pointer to the IUnknown interface of the hierarchy item to be saved.
                </param>
      <param name="pfCancelled">
                    [out] Returns true if the save was canceled, otherwise false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.SaveNestedProjectItemInProjectFile(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.SetEditLabel(System.String)"></member>
    <member name="P:Microsoft.VisualStudio.Package.NestedProjectNode.SortPriority">
      <summary>
                    Gets the sort priority of a nested project node.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.DefaultSortOrderNode.NestedProjectNode" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NestedProjectNode.UnlockRDTEntry">
      <summary>
                    Unlocks the Running Document Table entry for this nested project.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.NestedProjectNode.Url">
      <summary>
                    Gets the absolute path of the subproject.
                </summary>
      <returns>
                    The absolute path of the subproject.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.NestedProjectNode.VirtualProjectFlags">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" /> that will be passed in when calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.AddVirtualProjectEx(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Guid@)" />.
                </summary>
      <returns>
                    Always returns 0.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.NodeProperties">
      <summary>
                    To create your own localizable node properties, inherit from <see cref="T:Microsoft.VisualStudio.Package.NodeProperties" /> and add public properties decorated with your own localized display name, category and description attributes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.#ctor(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.NodeProperties" /> class.
                </summary>
      <param name="node">
                    A <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.EnvDTE80#IInternalExtenderProvider#CanExtend(System.String,System.String,System.Object)">
      <summary>
                    Determines whether the specified extender can extend the specified object.
                </summary>
      <returns>true if the extender can extend the object, otherwise false.
                </returns>
      <param name="extenderCATID">
                    The CATID of the extender.
                </param>
      <param name="extenderName">
                    The name of the extender.
                </param>
      <param name="extendeeObject">
                    The object which should be extended.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.EnvDTE80#IInternalExtenderProvider#GetExtender(System.String,System.String,System.Object,EnvDTE.IExtenderSite,System.Int32)">
      <summary>
                    Gets the specified extender.
                </summary>
      <returns>
                    An object that represents the extender.
                </returns>
      <param name="extenderCATID">
                    The CATID of the extender.
                </param>
      <param name="extenderName">
                    The name of the extender.
                </param>
      <param name="extendeeObject">
                    The object that should be extended.
                </param>
      <param name="extenderSite">
        <see cref="T:EnvDTE.IExtenderSite" />.
                </param>
      <param name="cookie">
                    The cookie.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.EnvDTE80#IInternalExtenderProvider#GetExtenderNames(System.String,System.Object)">
      <summary>
                    Gets the names of the extenders.
                </summary>
      <returns>
                    The names of the extenders.
                </returns>
      <param name="extenderCATID">
                    The CATID of the extender.
                </param>
      <param name="extendeeObject">
                    The object that is to be extended.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.Extender(System.String)">
      <summary>
                    Gets the extender of the specified name.
                </summary>
      <returns>
                    The object that represents the extender.
                </returns>
      <param name="extenderName">
                    The name of the extender.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.NodeProperties.ExtenderCATID"></member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.ExtenderNames">
      <summary>
                    Gets the names of the extenders.
                </summary>
      <returns>
                    An object representing the names of the extenders.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider@)">
      <summary>
                    Returns the configuration provider for the associated hierarchy node.
                </summary>
      <returns>
                    When implemented by derived classes, if the method succeeds it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code..
                </returns>
      <param name="p">
                    [out] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.GetComponentName">
      <summary>
                    Gets the name of the associated hierarchy node.
                </summary>
      <returns>
                    The display name of the associated hierarchy node. If it is null or empty the call is delegated to the base <see cref="T:Microsoft.VisualStudio.Package.LocalizableProperties" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.GetPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
      <summary>
                    Fills in an array of class identifiers (CLSID) of property pages that can be displayed for this object.
                </summary>
      <param name="pages">
                    A caller-allocated CAUUID structure that must be initialized and filled before returning.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
      <summary>
                    Gets the property pages that are associated with the project designer.
                </summary>
      <returns>
                    By default returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.
                </returns>
      <param name="pages">
                    An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.CAUUID" /> structures representing the property pages.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)">
      <summary>
                    Gets the hierarchy or project item object corresponding to the browse object.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="hier">
                    [out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy node's <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </param>
      <param name="itemid">
                    [out] Returns the item ID.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.GetProperty(System.String,System.String)">
      <summary>
                    Returns the value for a specific property of the node.
                </summary>
      <returns>
                    The value of the property if found, otherwise <paramref name="def" />.
                </returns>
      <param name="name">
                    Name of the property.
                </param>
      <param name="def">
                    The default value of the property.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.NodeProperties.Name">
      <summary>
                    Gets the name of the properties page.
                </summary>
      <returns>
                    The display name of the associated hierarchy node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.NodeProperties.Node">
      <summary>
                    Gets or sets the hierarchy node with which these properties are associated.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.NodeProperties.SetProperty(System.String,System.String)">
      <summary>
                    Sets the property on the project hierarchy node.
                </summary>
      <param name="name">
                    Name of the attribute to be set.
                </param>
      <param name="value">
                    Value to be assigned to the attribute.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.OleServiceProvider">
      <summary>
                    Manages the different services needed by the package. It maintains an internal collection of services that can be added, removed, and queried.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OleServiceProvider.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.OleServiceProvider" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OleServiceProvider.AddService(System.Type,Microsoft.VisualStudio.Package.OleServiceProvider.ServiceCreatorCallback,System.Boolean)">
      <summary>
                    Adds a service of the specified type to the internal collection.
                </summary>
      <param name="serviceType">
                    The type of the service.
                </param>
      <param name="callback">
        <see cref="M:Microsoft.VisualStudio.Package.OleServiceProvider.AddService(System.Type,Microsoft.VisualStudio.Package.OleServiceProvider.ServiceCreatorCallback,System.Boolean)" /> specifying the service callback.
                </param>
      <param name="shouldDisposeServiceInstance">
                    True if the service implements <see cref="T:System.IDisposable" /> and should be disposed on removal.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)">
      <summary>
                    Adds a service of the specified type to the internal collection.
                </summary>
      <param name="serviceType">
                    The type of the service.
                </param>
      <param name="serviceInstance">
                    An instance of the service.
                </param>
      <param name="shouldDisposeServiceInstance">
                    True if the service implements <see cref="T:System.IDisposable" /> and should be disposed on removal.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OleServiceProvider.Dispose">
      <summary>
                    Releases this object and its resources.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OleServiceProvider.Dispose(System.Boolean)">
      <summary>
                    Releases this object and its resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OleServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
      <summary>
                    Gets a pointer to an interface of the specified type.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="guidService">
                    The GUID of the service.
                </param>
      <param name="riid">
                    The interface ID. 
                </param>
      <param name="ppvObject">
                    [out] The pointer to the interface.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OleServiceProvider.RemoveService(System.Type)">
      <summary>
                    Removes a service from the internal collection.
                </summary>
      <param name="serviceType">
                    The type of the service.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.OleServiceProvider.ServiceCreatorCallback">
      <summary>
                    Specifies a service creator callback delegate.
                </summary>
      <returns>
                    A delegate for the callback.
                </returns>
      <param name="serviceType">
                    The service type.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.OutputGroup">
      <summary>
                    Defines a project's build output group. Implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup2" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.#ctor(System.String,System.String,Microsoft.VisualStudio.Package.ProjectNode,Microsoft.VisualStudio.Package.ProjectConfig)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.OutputGroup" /> for the specified name, MSBuild target name, project, and configuration.
                </summary>
      <param name="outputName">
                    The name of the output group. This must be one of the values in <paramref name="VS_OUTPUTGROUP_CNAME_x" /> to facilitate communication between projects.
                </param>
      <param name="msBuildTargetName">
                    The name of the MSBuild target.
                </param>
      <param name="projectManager">
                    The <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" /> that produces this output.
                </param>
      <param name="configuration">
                    The <see cref="T:Microsoft.VisualStudio.Package.ProjectConfig" /> that produces this output group.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.get_CanonicalName(System.String@)">
      <summary>
                    Gets the name of the output group.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="pbstrCanonicalName">
                    [out] Returns the name of the output group.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.get_DeployDependencies(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency[],System.UInt32[])">
      <summary>
                    Gets one or more output dependencies.
                </summary>
      <returns>
                    When implemented in derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="celt">
                    The number of dependencies to get.
                </param>
      <param name="rgpdpd">
                    An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency" /> objects.
                </param>
      <param name="pcActual">
        <paramref name="pcActual[0]" /> is the actual number of dependencies returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.get_Description(System.String@)">
      <summary>
                    Gets the description of this output group.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="pbstrDescription">
                    [out] Returns the description of this output group.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.get_DisplayName(System.String@)">
      <summary>
                    Gets the display name of the output group.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="pbstrDisplayName">
                    [out] Returns the display name of the output group.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.get_KeyOutput(System.String@)">
      <summary>
                    Gets the name of the key output group.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="pbstrCanonicalName">
                    [out] Returns the canonical name of the key output group.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.get_KeyOutputObject(Microsoft.VisualStudio.Shell.Interop.IVsOutput2@)">
      <summary>
                    Gets the actual object that represents the key output.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="ppKeyOutput">
                    [out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutput2" /> interface of the key output object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.get_Outputs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutput2[],System.UInt32[])">
      <summary>
                    Gets any number of outputs in this group.
                </summary>
      <returns>
                    If the method returns the number of outputs requested, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Otherwise it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.
                </returns>
      <param name="celt">
                    The number of outputs requested.
                </param>
      <param name="rgpcfg">
                    An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutput2" /> interfaces to the outputs.
                </param>
      <param name="pcActual">
        <paramref name="pcActual[0]" /> will return as the number of outputs returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.get_ProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2@)">
      <summary>
                    Gets the project configuration.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="ppIVsProjectCfg2">
                    [out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2" /> interface for the project configuration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.get_Property(System.String,System.Object@)">
      <summary>
                    Gets the value for the specified property.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="pszProperty">
                    The name of the property to get.
                </param>
      <param name="pvar">
                    [out] Returns the value of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.InvalidateGroup">
      <summary>
                    Invalidates a group.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.OutputGroup.Project">
      <summary>
                    Gets the project that produces this output group.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.OutputGroup.ProjectCfg">
      <summary>
                    Gets the configuration that produces this output.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectConfig" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputGroup.Refresh">
      <summary>
                    Rebuilds the target and resets the list of outputs and the key output.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.OutputGroup.TargetName">
      <summary>
                    Gets the MSBuild target name.
                </summary>
      <returns>
                    The name of the MSBuild target.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.OutputType">
      <summary>
                    Defines the type of output the build should make.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.OutputType.Library">
      <summary>
                     Make a class library.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.OutputType.WinExe">
      <summary>
                     Make a Windows executable.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.OutputType.Exe">
      <summary>
                     Make an executable.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.OutputTypeConverter">
      <summary>
                    Converts <see cref="T:Microsoft.VisualStudio.Package.OutputType" /> values to and from strings.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputTypeConverter.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.OutputTypeConverter" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Determines whether this type converter can convert from the given string or type.
                </summary>
      <returns>true if the type can be converted, otherwise false.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> describing the type.
                </param>
      <param name="sourceType">
                    The type from which to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts from the string value to an <see cref="T:Microsoft.VisualStudio.Package.OutputType" />.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Package.OutputType" /> value, or a value that can be converted by the base <see cref="T:System.ComponentModel.EnumConverter" /> class.
                </returns>
      <param name="context">
                    The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> describing the type.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that describes the locale and culture information of the string.
                </param>
      <param name="value">
                    The value to be converted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts an <see cref="T:Microsoft.VisualStudio.Package.OutputType" /> to a string.
                </summary>
      <returns>
                    The value to which the type was converted.
                </returns>
      <param name="context">
                    The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> describing the type.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that describes the locale and culture information of the string.
                </param>
      <param name="value">
                    The type to be converted.
                </param>
      <param name="destinationType">
                    The type to which to convert <paramref name="value" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Gets the standard values of <see cref="T:Microsoft.VisualStudio.Package.OutputGroup" />.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> of the standard values of <see cref="T:Microsoft.VisualStudio.Package.OutputGroup" />.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object describing the type.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.OutputTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Gets whether or not the standard values of this type are supported.
                </summary>
      <returns>
                    Always returns true.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object describing the type.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.PlatformType">
      <summary>
                    Defines the version of the CLR that is appropriate to the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.PlatformType.notSpecified">
      <summary>
                    Not specified.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.PlatformType.v1">
      <summary>
                    Version 1.0.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.PlatformType.v11">
      <summary>
                    Version 1.1.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.PlatformType.v2">
      <summary>
                    Version 2.0.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.PlatformType.cli1">
      <summary>
                    CLI1.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.PlatformTypeConverter">
      <summary>
                    Converts <see cref="T:Microsoft.VisualStudio.Package.PlatformType" /> values to and from strings.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.PlatformTypeConverter.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.PlatformTypeConverter" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.PlatformTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Determines whether or not the specified type can be converted to a <see cref="T:Microsoft.VisualStudio.Package.PlatformType" />.
                </summary>
      <returns>true if <paramref name="sourceType" /> is a string, otherwise false.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> further specifying the type.
                </param>
      <param name="sourceType">
                    The type from which to convert to a <see cref="T:Microsoft.VisualStudio.Package.PlatformType" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.PlatformTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts from the string to a <see cref="T:Microsoft.VisualStudio.Package.PlatformType" />.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.PlatformType" />.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> further specifying the type.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object specifying the language and culture of the string.
                </param>
      <param name="value">
                    The string from which to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.PlatformTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts from a <see cref="T:Microsoft.VisualStudio.Package.PlatformType" /> to a string.
                </summary>
      <returns>
                    If <paramref name="destinationType" /> is a string, returns a <see cref="T:Microsoft.VisualStudio.Package.PlatformType" />, otherwise calls the base method.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> further specifying the type.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object specifying the language and culture of the string.
                </param>
      <param name="value">
                    The <see cref="T:Microsoft.VisualStudio.Package.PlatformType" />.
                </param>
      <param name="destinationType">
                    The type to which to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.PlatformTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Gets a collection of the standard values of <see cref="T:Microsoft.VisualStudio.Package.PlatformType" />.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> of <see cref="T:Microsoft.VisualStudio.Package.PlatformType" /> values.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> describing the type.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.PlatformTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Determines whether or not the standard values are supported by this converter.
                </summary>
      <returns>
                    Always returns true.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> describing the type.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectConfig">
      <summary>
                    Holds project-specific configuration data. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.#ctor(Microsoft.VisualStudio.Package.ProjectNode,System.String)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ProjectConfig" /> for the supplied project and configuration name. Additionally populates the output group array.
                </summary>
      <param name="project">
                    The project to which this configuration belongs.
                </param>
      <param name="configuration">
                     The name of the configuration.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectConfig.ConfigName">
      <summary>
                    Returns the configuration name for the ProjectConfig object.
                </summary>
      <returns>
                    The name of the configuration.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectConfig.ConfigurationProperties">
      <summary>
                    Gets the set of configuration properties.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.IProjectConfigProperties" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.CreateOutputGroup(Microsoft.VisualStudio.Package.ProjectNode,System.Collections.Generic.KeyValuePair{System.String,System.String})">
      <summary>
                    Creates a new output group. Called from the constructor.
                </summary>
      <returns>
                    The new <see cref="T:Microsoft.VisualStudio.Package.OutputGroup" />.
                </returns>
      <param name="project">
                    The project to which the configuration belongs.
                </param>
      <param name="group">
                    A <see cref="T:System.Collections.Generic.KeyValuePair" /> consisting of the name of the output group and the name of the MSBuild.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.DebugLaunch(System.UInt32)">
      <summary>
                    Starts the debugger.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="grfLaunch"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.EnumOutputs(Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs@)">
      <summary>
                    Enumerates the outputs.
                </summary>
      <returns>
                    When implemented by derived classes, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="eo">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_BuildableProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg@)">
      <summary>
                    Returns the buildable project configuration object.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" />.
                </returns>
      <param name="pb">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_CanonicalName(System.String@)">
      <summary>
                    Returns the configuration's canonical name.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="name">
                    [out] The canonical name of the configuration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_CfgType(System.Guid@,System.IntPtr@)">
      <summary>
                    Gets the type of the configuration. Provides access to a configuration interface such as <see cref="T:Microsoft.VisualStudio.Shell.Interop." /><see cref="IVsBuildableProjectCfg" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop." /><see cref="IVsDebuggableProjectCfg" />. 
                </summary>
      <returns>
                    If <paramref name="iidCfg" /> represents a supported interface, that is, either <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" />, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE" />.
                </returns>
      <param name="iidCfg">
                    [ref] The interface identifier of the configuration interface to access.
                </param>
      <param name="ppCfg">
                    [out] Pointer to the configuration interface identified by <paramref name="iidCfg" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_DisplayName(System.String@)">
      <summary>
                    Returns the configuration's display name.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="name">
                    [out] The display name of the configuration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_IsDebugOnly(System.Int32@)">
      <summary>
                    This method is now obsolete.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
      <param name="fDebug">
                    [out] Do not use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_IsPackaged(System.Int32@)">
      <summary>
                    This method is now obsolete.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
      <param name="pkgd">
                    [out] Do not use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_IsPrivate(System.Int32@)">
      <summary>
                    Gets whether a project is private or is shared.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="pfPrivate">
                    [out] Returns 0 if the project is shared, 1 if it is private.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_IsReleaseOnly(System.Int32@)">
      <summary>
                    Gets whether or not the configuration is release.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="fRelease">
                    [out] 1 if this is a release configuration, otherwise 0. By default returns 1 if the name of the configuration is "Release".
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_IsSpecifyingOutputSupported(System.Int32@)">
      <summary>
                    Determines if the ability to specify output is supported.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise it returns an error code.
                </returns>
      <param name="f">
                    [out] 1 if specifying output is supported, otherwise 0. By default returns 1.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_OutputGroups(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup[],System.UInt32[])">
      <summary>
                    Gets an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup" /> pointers to the output groups of the configuration. 
                </summary>
      <returns>
                    If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.
                </returns>
      <param name="celt">
                    The number of output groups, or 0 to ask for the number.
                </param>
      <param name="rgpcfg">
                    A pre-allocated array of output groups.
                </param>
      <param name="pcActual">
                    The first member of the array is the returned number of output groups.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_Platform(System.Guid@)">
      <summary>
                    This method is obsolete.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
      <param name="platform">
                    [out] Platform GUID.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_ProjectCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider@)">
      <summary>
                    Returns the project configuration provider.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise it returns an error code.
                </returns>
      <param name="p">
                    [out] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_RootURL(System.String@)">
      <summary>
                    Returns a configuration's root URL for its output items.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="root">
                    [out] The root URL for the configuration's output items.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_TargetCodePage(System.UInt32@)">
      <summary>
                    Returns the code page target.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="target">
                    [out] Code page identifier for this encoding.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_UpdateSequenceNumber(Microsoft.VisualStudio.OLE.Interop.ULARGE_INTEGER[])">
      <summary>
                    Returns the update sequence number.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise it returns an error code.
                </returns>
      <param name="li">
                    [out] An array of ULARGE_INTEGERs that holds the sequence number.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.get_VirtualRoot(System.String@)">
      <summary>
                    This method is required for debugging Web projects. 
                </summary>
      <returns>
                    When implemented by derived classes, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, or an error code.
                </returns>
      <param name="pbstrVRoot">
                    [out] Pointer to the virtual root.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.GetCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg@)">
      <summary>
                    Gets the configuration corresponding to the browse object.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="cfg">
                    [out] The browse object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.GetConfigurationProperty(System.String,System.Boolean)">
      <summary>
                    Gets the value of the supplied property.
                </summary>
      <returns>
                    The value of the configuration property.
                </returns>
      <param name="propertyName">
                    Name of the property to get.
                </param>
      <param name="resetCache">
                    If true, forces the cache to be invalidated; otherwise, the cached value is acceptable.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.GetPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
      <summary>
                    Retrieves the configuration-dependent property pages. 
                </summary>
      <param name="pages">
                    A pre-allocated array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.CAUUID" /> structures pointing to the CLSIDs of the property pages. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
      <summary>
                    Gets the property pages for the project designer.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="pages">
                    A pre-allocated array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.CAUUID" /> structures pointing to the CLSIDs of the property pages.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)">
      <summary>
                    Gets the hierarchy node or project item corresponding to the browse object.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:VisualStudio.VSConstants.S_OK." /> If it fails, it returns an error code.
                </returns>
      <param name="hier">
                    [out] The hierarchy node.
                </param>
      <param name="itemid">
                    [out] The ID of the project item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#Close">
      <summary>
                    When implemented, closes the project configuration.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#get_CfgType(System.Guid@,System.IntPtr@)">
      <summary>
                    Gets the type of configuration represented by the specified interface ID.
                </summary>
      <returns>
                    If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If no interface was found, <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE" />, otherwise, an error code.
                </returns>
      <param name="iidCfg">
                    A GUID representing the interface ID of the configuration.
                </param>
      <param name="ppCfg">
                    [out] Returns a pointer to the requested configuration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.OpenOutput(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutput@)">
      <summary>
                    Implements <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.OpenOutput(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutput@)" />, which is obsolete. Do not implement.
                </summary>
      <returns>
                    The base method returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
      <param name="name">
                     Do not use.
                </param>
      <param name="output">
                     Do not use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.OpenOutputGroup(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup@)">
      <summary>
                    Opens the output group with the supplied name.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:VisualStudio.VSConstants.S_OK." /> If it fails, it returns <see cref="F:VisualStudio.VSConstants.E_FAIL" />.
                </returns>
      <param name="szCanonicalName">
                    The canonical name of the configuration (for example, Debug or Release).
                </param>
      <param name="ppIVsOutputGroup">
                    [out] The output group.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectConfig.OutputGroups"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.OutputsRequireAppRoot(System.Int32@)">
      <summary>
                    Specifies whether or not this configuration requires an application root path.
                </summary>
      <returns>
                    When implemented by derived classes, if the method succeeds, it returns <see cref="F:VisualStudio.VSConstants.S_OK." /> If it fails, it returns an error code.
                </returns>
      <param name="pfRequiresAppRoot">
                    [out] Returns 0 if an application root path is not required, otherwise 1.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.PrepareBuild(System.Boolean)">
      <summary>
                    Creates folders and ensures assembly paths are correct.
                </summary>
      <param name="clean">
                    If true, the build needs to be cleaned; otherwise, it does not.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectConfig.ProjectMgr">
      <summary>
                    Returns the project manager for the project.
                </summary>
      <returns>
                    Returns the <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" /> object to which the project configuration belongs.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.QueryDebugLaunch(System.UInt32,System.Int32@)">
      <summary>
                    Determines whether the debugger can be launched, given the state of the launch flags.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.
                </returns>
      <param name="flags">
                    Flags that determine the conditions under which to launch the debugger. For valid <paramref name="grfLaunch" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS2" />.
                </param>
      <param name="fCanLaunch">
                    [out] true if the debugger can be launched, otherwise false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfig.SetConfigurationProperty(System.String,System.String)">
      <summary>
                    Sets the value of the property of the sukpplied name.
                </summary>
      <param name="propertyName">
                    Name of the configuration property.
                </param>
      <param name="propertyValue">
                    Value of the configuration property.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectConfigProperties">
      <summary>
                    Represents the configuration-dependent project properties.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectConfigProperties.#ctor(Microsoft.VisualStudio.Package.ProjectConfig)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ProjectConfigProperties" /> with the supplied project configuration.
                </summary>
      <param name="projectConfig">
                    The project configuration to use.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectConfigProperties.OutputPath">
      <summary>
                    Gets or sets the project configuration's output path.
                </summary>
      <returns>
                    The project configuaration's output path.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectContainerNode">
      <summary>
                    An abstract class that represents the solution node (the top node in a hierarchy with nested projects). It handles adding and removing the subprojects. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ProjectContainerNode" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.AddExistingNestedProject(Microsoft.VisualStudio.Package.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)">
      <summary>
                    Adds an existing project as a nested node of the hierarchy. It is used while loading the project or to add an existing project to the hierarchy.
                </summary>
      <returns>
                    The created <see cref="T:Microsoft.VisualStudio.Package.NestedProjectNode" />.
                </returns>
      <param name="element">
                     The project to add.
                </param>
      <param name="creationFlags">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> describing the action(s) to be taken.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.AddNestedProjectFromTemplate(Microsoft.VisualStudio.Package.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)">
      <summary>
                    Clones a template project file and adds it as a sub-project to the hierarchy using the supplied project element and creation flags.
                </summary>
      <returns>
                    The new <see cref="T:Microsoft.VisualStudio.Package.NestedProjectNode" />.
                </returns>
      <param name="element">
                    The project element. 
                </param>
      <param name="creationFlags">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> describing the action(s) to be taken.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.AddNestedProjectFromTemplate(System.String,System.String,System.String,Microsoft.VisualStudio.Package.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)">
      <summary>
                    Clones a template project file and adds it as a sub-project to the hierarchy for the supplied file, destination directory, and project name, using the supplied project element and creation flags.
                </summary>
      <returns>
                    The new <see cref="T:Microsoft.VisualStudio.Package.NestedProjectNode" />.
                </returns>
      <param name="fileName">
                     The name of the project file.
                </param>
      <param name="destination">
                    The destination directory.
                </param>
      <param name="projectName">
                    The name of the project.
                </param>
      <param name="element">
                     The project element.
                </param>
      <param name="creationFlags">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> describing the action(s) to be taken.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.AddVirtualProjects"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectContainerNode.BuildNestedProjectsOnBuild">
      <summary>
                    Gets or sets whether nested projects should be built along with the parent project.
                </summary>
      <returns>true if nested projects should be built; otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.CloseChildren">
      <summary>
                    Closes all subprojects.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.CreateNestedProjectNode(Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Creates a new nested project node using the supplied project element.
                </summary>
      <returns>
                    The new <see cref="T:Microsoft.VisualStudio.Package.NestedProjectNode" />.
                </returns>
      <param name="element">
                     The project element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.CreateNestedProjectNodes">
      <summary>
                    Upon loading the solution, loops through all the subprojects known to MSBuild and for each one creates the project and the project node in the hierarchy.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.EnumNestedHierachiesForBuildDependency">
      <summary>
                    Enumerates the nested hierarchies that should be added to the build dependency list.
                </summary>
      <returns>
                    An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interfaces representing the solution's nested projects.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.FilterItemTypeToBeAddedToHierarchy(System.String)">
      <summary>
                    Filters out item types that should not be added to the hierarchy, for example folders, references, and subprojects..
                </summary>
      <returns>true if the item should be filtered out, otherwise false.
                </returns>
      <param name="itemType">
                    The name of the type of item in question.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <summary>
                    Gets the nested hierarchy node with the supplied item ID and the supplied interface ID of the nested hierarchy node.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. If the returned item ID is not a nested hierarchy node, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />.
                </returns>
      <param name="itemId">
                     The item ID of the hierarchy node.
                </param>
      <param name="iidHierarchyNested">
                    The interface ID of the hierarchy node.
                </param>
      <param name="ppHierarchyNested">
                    [out] Pointer to the interface corresponding to i<paramref name="idHierarchyNested" />.
                </param>
      <param name="pItemId">
                     [out] Pointer to the item ID of the nested hierarchy node.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.GetProjectTemplatePath(Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Generates the full template path based on the template and type GUID.
                </summary>
      <returns>
                    The absolute path of the template.
                </returns>
      <param name="element">
                    The project element from which to get the project information.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)">
      <summary>
                    Determines whether the specified project item is dirty.
                </summary>
      <returns>
                    If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.
                </returns>
      <param name="itemId">
                    The item ID of the hierarchy item.
                </param>
      <param name="punkDocData">
                    A pointer to the IUnknown interface of the hierarchy item.
                </param>
      <param name="pfDirty">
                    [out] Returns true if the item is dirty, otherwise false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.OpenChildren">
      <summary>
                    Opens nested project nodes and adds them to the project.
                </summary>
      <returns>
                    If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.Reload"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.ReloadItem(System.UInt32,System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.ReloadNestedProjectNode(Microsoft.VisualStudio.Package.NestedProjectNode)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.RemoveNestedProjectNodes"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.RunVsTemplateWizard(Microsoft.VisualStudio.Package.ProjectElement,System.Boolean)">
      <summary>
                    Runs the Template Wizard to create a new subproject.
                </summary>
      <param name="element">
                    The project item to use as the base of the nested project.
                </param>
      <param name="silent">true if the wizard should run silently, otherwise false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectContainerNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)">
      <summary>
                    Saves the file related to the supplied item.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants." /><see cref="S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="dwSave">
                    Flags from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" /> enumeration, describing how to save the item.
                </param>
      <param name="silentSaveAsName">
                    File name to be applied when <paramref name="dwSave" /> is set to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS." /><see cref="VSSAVE_SilentSave" />.
                </param>
      <param name="itemid">
                     The item ID of the hierarchy item saved.
                </param>
      <param name="punkDocData">
                     Pointer to the IUnknown interface of the hierarchy item saved.
                </param>
      <param name="pfCancelled">
                     [out] true if the save action was cancelled.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectDocumentsListener"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.#ctor(Microsoft.VisualStudio.Shell.ServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.Dispose"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.Dispose(System.Boolean)"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectDocumentsListener.EventsCookie"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.Init"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnAfterAddDirectoriesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnAfterAddFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnAfterRemoveDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnAfterRemoveFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnAfterRenameDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnAfterRenameFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnAfterSccStatusChanged(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectDocumentsListener.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectDocumentsListener.ProjectDocumentTracker2"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectDocumentsListener.ServiceProvider"></member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectElement">
      <summary>
                    Represents a project item (usually a file) and allows getting and setting attributes on it.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.Equals(System.Object)">
      <summary>
                    Determines if two <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> objects are equal.
                </summary>
      <returns>
                    Returns true if the two <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> objects are equal, otherwise returns false.
                </returns>
      <param name="obj">
                    A <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.GetEvaluatedMetadata(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.GetFullPathForElement">
      <summary>
                    Gets the absolute path of the element.
                </summary>
      <returns>
                    The absolute path of the element.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.GetHashCode">
      <summary>
                    Serves as a hash function for a <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" />, suitable for use in hashing algorithms and data structures like a hash table.
                </summary>
      <returns>
                    A hash code for the current object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.GetMetadata(System.String)">
      <summary>
                    Gets the value of an attribute on a project element.
                </summary>
      <returns>
                    If the attribute to get is <see cref="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Include" />, returns the element's <see cref="FinalItemSpec" />; if the attribute is <see cref="F:Microsoft.VisualStudio.Package.ProjectFileConstants.BuildAction" />, returns the build item's name. Otherwise calls <see cref="M:Microsoft.Build.BuildEngine.BuildItem.GetMetadata(attributeName)" />.
                </returns>
      <param name="attributeName">
                    The name of the attribute to get.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.GetMetadataAndThrow(System.String,System.Exception)">
      <summary>
                    Gets the attribute and throws the exception if the attribute is empty or null.
                </summary>
      <returns>
                    Returns the value of the attribute.
                </returns>
      <param name="attributeName">
                    The name of the attribute.
                </param>
      <param name="exception">
                    The exception to be thrown if the attribure is not found or empty.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectElement.ItemName">
      <summary>
                    Gets and sets the item name.
                </summary>
      <returns>
                    If the item has been deleted, returns an empty string; otherwise returns the name of the build item. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.op_Equality(Microsoft.VisualStudio.Package.ProjectElement,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                     Determines if two <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> objects are equal.
                </summary>
      <returns>
                    Returns a BOOLEAN that is true if the <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" />s are equal, and false if they are not.
                </returns>
      <param name="element1">
        <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> 1.
                </param>
      <param name="element2">
        <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> 2.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.op_Inequality(Microsoft.VisualStudio.Package.ProjectElement,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Determines if two <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> objects are not equal.
                </summary>
      <returns>
                    Returns a BOOLEAN that is true if the <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" />s are not equal, and false if they are not.
                </returns>
      <param name="element1">
        <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> 1.
                </param>
      <param name="element2">
        <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> 2.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.RefreshProperties">
      <summary>
                    Refreshes the properties for the current project item.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.RemoveFromProjectFile">
      <summary>
                    Removes this item from the project file.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.Rename(System.String)">
      <summary>
                    Renames the ProjectElement object.
                </summary>
      <param name="newPath">
                    String containing the path for the item to be renamed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectElement.SetMetadata(System.String,System.String)">
      <summary>
                    Sets an attribute on the project element.
                </summary>
      <param name="attributeName">
                    The name of the attribute.
                </param>
      <param name="attributeValue">
                    The value of the attribute.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectFactory">
      <summary>
                    Creates projects in the solution.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectFactory.#ctor(Microsoft.VisualStudio.Shell.Package)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ProjectFactory" /> by using the supplied package.
                </summary>
      <param name="package">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Package" /> to use.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectFactory.BuildEngine">
      <summary>
                    Gets the MSBuild build engine for this project factory.
                </summary>
      <returns>
                    The MSBuild build engine for this project factory.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectFactory.BuildProject">
      <summary>
                    Gets the MSBuild project for the temporary project file.
                </summary>
      <returns>
                    The MSBuild project for the temporary project file.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectFactory.CreateProject">
      <summary>
                    When implemented in a derived class, creates a new project.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
      <summary>
                    Creates a project from the supplied project file, with the supplied creation flags.
                </summary>
      <param name="fileName">
                    The name of the project file.
                </param>
      <param name="location">
                    The location of the project file.
                </param>
      <param name="name">
                    The name of the project.
                </param>
      <param name="flags">
                    Creation flags, taken from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS2" />.
                </param>
      <param name="projectGuid">
                    [ref] The GUID of the project
                </param>
      <param name="project">
                    [out] Returns an <see cref="T:System.IntPtr" /> to the project that was created.
                </param>
      <param name="canceled">
                    [out] Returns true if the process was canceled; otherwise, false.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectFactory.Package">
      <summary>
                    Gets the associated <see cref="T:Microsoft.VisualStudio.Shell.Package" />.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Package" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectFactory.PreCreateForOuter(System.IntPtr)">
      <summary>
                    Instantiates a new instance of the project, but does no initialization.
                </summary>
      <returns>
                    The created <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </returns>
      <param name="outerProjectIUnknown">
                    The IUnknown interface of the outer project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectFactory.ProjectTypeGuids(System.String)">
      <summary>
                    Gets a semicolon-delimited list of project GUIDs from the project file.
                </summary>
      <returns>
                    A semicolon-delimited list of project GUIDs.
                </returns>
      <param name="file">
                    The project file.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectFactory.Site">
      <summary>
                    Gets the <see cref="T:System.IServiceProvider" /> interface of the package.
                </summary>
      <returns>
                    The <see cref="T:System.IServiceProvider" /> that is represented by the package.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectFileAttributeValue">
      <summary>
                    Defines the item type literals for items added to the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileAttributeValue.Code">
      <summary>
                    A code file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileAttributeValue.Component">
      <summary>
                    A component.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileAttributeValue.Designer">
      <summary>
                    A form designer.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileAttributeValue.Form">
      <summary>
                    A Windows form.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileAttributeValue.UserControl">
      <summary>
                    A user control.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectFileConstants">
      <summary>
                    Defines the constant strings used with project files.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.AssemblyName">
      <summary>
                    The assembly name.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.AvailablePlatforms"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.BuildAction">
      <summary>
                    The type of action to be taken when the project is built.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.BuildingInsideVisualStudio">
      <summary>
                    Defines whether the project is built within Visual Studio. 
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.BuildVerbosity">
      <summary>
                    The level of logging of errors and warnings
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Compile">
      <summary>
                    The name of the target to be compiled.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.COMReference"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Configuration"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Content"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.CustomToolNamespace"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.DependentUpon"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.EmbeddedResource"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.FinalOutputPath"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.FlavorProperties"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Folder">
      <summary>
                    The path to the folder containing the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Generator"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Guid">
      <summary>
                    The GUID of the project type.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.HintPath"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Include"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.InstanceGuid">
      <summary>
                    A GUID identifying an instance of a project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Isolated"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Lcid">
      <summary>
                    The locale ID of the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.LinkedIntoProjectAt"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Name">
      <summary>
                    The name of the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.OutputType"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Platform"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Private"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Project"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.ProjectGuid"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.ProjectReference"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.ProjectTypeGuids"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Reference"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.ReferencePath"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.ResolvedProjectReferencePaths"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.RootNamespace"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.SccAuxPath"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.SccLocalPath"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.SccProjectName"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.SccProvider"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.SubProject"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.SubType"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.Template"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.TypeGuid"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.User"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.VersionMajor"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.VersionMinor"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.VisualStudio"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.WebReference"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.WebReferenceFolder"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileConstants.WrapperTool"></member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck.NotChecked"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck.Import"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck.ImportInUserFile"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck.Property"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck.Target"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck.Item"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck.UsingTask"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck.UsingTaskInUserFile"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck.ItemLocation"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectFileSecurityCheck.External"></member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectLoadOption"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectLoadOption.LoadNormally"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectLoadOption.LoadOnlyForBrowsing"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectLoadOption.DonNotLoad"></member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectNode">
      <summary>
                    Manages the persistent state of a Visual Studio project, including references, options, and files. Has a graphical user interface in the form of a hierarchy.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)">
      <summary>
                    Adds a build dependency to the project.
                </summary>
      <param name="dependency">
                    The dependency to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddCATIDMapping(System.Type,System.Guid)">
      <summary>
                    Adds a category ID GUID to the mapping.
                </summary>
      <param name="type">
                    The type of the category being mapped.
                </param>
      <param name="catid">
                    The GUID of the category.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])">
      <summary>
                    Notifies the project that a component reference has been added to the project.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" /> if there is no reference container, meaning that the project does not support references; otherwise <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. 
                </returns>
      <param name="dwAddCompOperation">
                    Always <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION.VSADDCOMPOP_ADD" />.
                </param>
      <param name="cComponents">
                    The number of components in the <paramref name="rgpcsdComponents" /> array.
                </param>
      <param name="rgpcsdComponents">
                    An array of pointers to <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA" /> structures representing the selected components.
                </param>
      <param name="hwndDialog">
                    A pointer to the dialog box. Not used, pass in null.
                </param>
      <param name="pResult">
                    An array of results. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddDependentFileNode(System.Collections.Generic.IDictionary{System.String,Microsoft.Build.BuildEngine.BuildItem},System.String)">
      <summary>
                    Adds an item, and any dependent items, to the project.
                </summary>
      <returns>
                    The newly added <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.
                </returns>
      <param name="subitems">
                    The <see cref="T:Microsoft.Build.BuildEngine.BuildItem" /> to add.
                </param>
      <param name="key">
                    Key to retrieve the target item from the subitems list.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddFileFromTemplate(System.String,System.String)">
      <summary>
                    Adds a file to the project from a template.
                </summary>
      <param name="source">
                    Full path of template file.
                </param>
      <param name="target">
                    Full path of file once it is added to the project. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddFileToMsBuild(System.String)">
      <summary>
                    Adds an item to the MSBuild project, wrapped in a <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" />.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> that wraps the build item.
                </returns>
      <param name="file">
                     The path of the file to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddFolderFromOtherProject(System.String,Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Adds folders and project items from another project.
                </summary>
      <param name="folderToAdd">
                    A project reference of the following format: {Guid}|project|folderPath.
                </param>
      <param name="targetNode">
                    The <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> under which to add the folder.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddFolderToMsBuild(System.String)">
      <summary>
                    Adds a folder to the MSBuild project.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" /> representing the new build item.
                </returns>
      <param name="folder">
                    The relative path of the folder.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])">
      <summary>
                    Adds an item to the project.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemIdLoc">
                    Identifier of the container folder for the item being added. Should be VSITEMID_ROOT or other valid item identifier. Note that this parameter is currently ignored because only adding items as children of a project node is supported. Projects that support folders will want to add the items relative to <paramref name="itemidLoc" />.
                </param>
      <param name="op">
                    Operation applied to the newly created item. Can be <paramref name="VSADDITEMOP_OPENDIRECTORY" /> only if <paramref name="VSADDITEM_ShowAddFolderButton" /> is passed to the method <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlg(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String@,System.String@,System.Int32@)" />. See the enumeration <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" />.
                </param>
      <param name="itemName">
                    Name of the item to be added.
                </param>
      <param name="filesToOpen">
                    Number of items in files to open. Can be zero. This must be 1 if <paramref name="op" /> is VSADDITEMOP_CLONEFILE or VSADDITEMOP_OPENDIRECTORY. If VSADDITEMOP_RUNWIZARD, it must be 1 or 2. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" />.
                </param>
      <param name="files">
                    Array of file name strings. If <paramref name="op" /> is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_CLONEFILE" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_OPENFILE" />, the first item (<paramref name="files" />[0]) in the array is the name of the file to clone or the directory to open. If it is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_RUNWIZARD" />, the first item (<paramref name="files" /> [0]) is the name of the wizard to run, and the second item (<paramref name="files" /> [1]) is the file name the user supplied (same as <paramref name="itemName" />). See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" />.
                </param>
      <param name="dlgOwner">
                    Handle to the Add Item dialog box.
                </param>
      <param name="result">
                    Array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" /> enumerations indicating whether the item was successfully added to the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])">
      <summary>
                    Adds an item to a project using a specific editor.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemIdLoc">
                    Identifier of the container folder for the item being added. Should be VSITEMID_ROOT or other valid item identifier.
                </param>
      <param name="op">
                    Operation applied to the newly created item. Can be <paramref name="VSADDITEMOP_OPENDIRECTORY" /> only if <paramref name="VSADDITEM_ShowAddFolderButton" /> is passed to the method <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlg(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String@,System.String@,System.Int32@)" />. See the enumeration <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" /></param>
      <param name="itemName">
                    Name of the item to be added 
                </param>
      <param name="filesToOpen">
                    Number of items in files to open. Can be zero. This must be 1 if <paramref name="op" /> is VSADDITEMOP_CLONEFILE or VSADDITEMOP_OPENDIRECTORY. If VSADDITEMOP_RUNWIZARD, it must be 1 or 2. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" /></param>
      <param name="files">
                    Array of file name strings. If <paramref name="op" /> is VSADDITEMOP_CLONEFILE or VSADDITEMOP_OPENDIRECTORY, the first item (<paramref name="files" />[0]) in the array is the name of the file to clone or the directory to open. If it is VSADDITEMOP_RUNWIZARD, the first item (<paramref name="files" /> [0]) is the name of the wizard to run, and the second item (<paramref name="files" /> [1]) is the file name the user supplied (same as <paramref name="itemName" />). See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" /></param>
      <param name="dlgOwner">
                    Handle to the Add Item dialog box 
                </param>
      <param name="editorFlags">
                    Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS" /> enumeration. 
                </param>
      <param name="editorType">
                    Unique identifier of the editor type. 
                </param>
      <param name="physicalView">
                    Name of physical view. 
                </param>
      <param name="logicalView">
                    Name of the logical view. 
                </param>
      <param name="result">
                    Array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" /> enumerations indicating whether the item was successfully added to the project. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddNewFileNodeToHierarchy(Microsoft.VisualStudio.Package.HierarchyNode,System.String)">
      <summary>
                    Adds a new file node to the project hierarchy.
                </summary>
      <param name="parentNode">
                    The node under which to add the node.
                </param>
      <param name="fileName">
                    The relative path of the file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddNodeIfTargetExistInStorage(Microsoft.VisualStudio.Package.HierarchyNode,System.String,System.String)">
      <summary>
                    Adds an item (file or folder) to the project if it already exists on disk.
                </summary>
      <returns>
                    The newly-created <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.
                </returns>
      <param name="parentNode">
                    The <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> under which to add the items.
                </param>
      <param name="name">
                    The name of the item.
                </param>
      <param name="targetPath">
                    The path of the item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddProjectReference">
      <summary>
                    Displays the Add Reference dialog.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, or an error code returned by the dialog.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AddWebReference">
      <summary>
                    Adds a web reference.
                </summary>
      <returns>
                    When overridden by derived classes, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, or an error code if there was an error.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.AllowPasteCommand">
      <summary>
                    Determines whether the paste command is available.
                </summary>
      <returns>false if there is nothing on the clipboard or if an exception was thrown in accessing the items on the clipboard, true if the items can be pasted.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.BaseURI">
      <summary>
                    Gets the Base Uniform Resource Identifier (URI).
                </summary>
      <returns>
                    Returns the base URI of the MSBuild project file.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Build(System.String)">
      <summary>
                    Invokes MSBuild on the supplied target with the default configuration and without logging to the output window.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Sucessful" /> if the build succeeded, <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed" /> if it failed.
                </returns>
      <param name="target">
                    The target to build.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
      <summary>
                    Invokes MSBuild on the supplied target with the default configuration and logs to the output window.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Sucessful" /> if the build succeeded, <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed" /> if it failed.
                </returns>
      <param name="target">
                    The target to build.
                </param>
      <param name="output">
                    The output window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)">
      <summary>
                    Invokes MSBuild on the supplied target with the supplied configuration and logs to the output window.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Sucessful" /> if the build succeeded, <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed" /> if it failed.
                </returns>
      <param name="config">
                    The build configuration to use. 
                </param>
      <param name="output">
                    The output window.
                </param>
      <param name="target">
                    The target to build.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Build(System.String,System.String)">
      <summary>
                    Invokes MSBuild on the supplied target with the supplied configuration without logging to the output window.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Sucessful" /> if the build succeeded, <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed" /> if it failed.
                </returns>
      <param name="config">
                    The build configuration to use.
                </param>
      <param name="target">
                    The target to build.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Build(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)">
      <summary>
                    Invokes the MSBuild process with the supplied configuration.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Sucessful" /> if the call to <see cref="M:Microsoft.Build.BuildEngine.Project.Build (string targetName)" /> succeeds, <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed" /> if it failed.
                </returns>
      <param name="vsopts">
                     Not used, pass in 0.
                </param>
      <param name="config">
                     The name of the configuration to use.
                </param>
      <param name="output">
                     The output window.
                </param>
      <param name="target">
                     The name of the target to build.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.BuildDependencies">
      <summary>
                    Gets the project's build dependencies.
                </summary>
      <returns>
                    An array of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.BuildInProgress">
      <summary>
                    Gets whether or not the project is being built.
                </summary>
      <returns>true if the project is being built; otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.BuildLogger">
      <summary>
                    Gets or sets a custom build logger.
                </summary>
      <returns>
                    Returns a non-MSBuild build logger. A build logger writes build related information to the Output window.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.BuildProject">
      <summary>
                    Gets the project's MSBuild project.
                </summary>
      <returns>
        <see cref="T:Microsoft.Build.BuildEngine.Project" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.BuildTarget(System.String,System.Boolean@)">
      <summary>
                    Builds the supplied target.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="targetName">
                     The name of the target.
                </param>
      <param name="success">
                    [out] When the method returns, true if the build was successful, otherwise false. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CallMSBuild(System.String)">
      <summary>
                    Invokes MSBuild for the supplied target. If the build is suspended, waits until it is resumed to invoke it.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Sucessful" /> if the build succeeded, <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed" /> if it failed.
                </returns>
      <param name="target">
                    The target to build.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
      <summary>
                    Invokes MSBuild for the supplied target and logs build errors to the output window. If the build is suspended, waits until it is resumed to invoke it.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Sucessful" /> if the build succeeded, <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed" /> if it failed.
                </returns>
      <param name="target">
                    The target to build.
                </param>
      <param name="output">
                    The output window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)">
      <summary>
                    Invokes MSBuild for the supplied target with the supplied configuration, and logs build errors to the output window. If the build is suspended, waits until it is resumed to invoke it.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Sucessful" /> if the build succeeded, <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed" /> if it failed.
                </returns>
      <param name="config">
                    The build configuration to use.
                </param>
      <param name="output">
                    The output window.
                </param>
      <param name="target">
                    The target to build.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CallMSBuild(System.String,System.String)">
      <summary>
                    Invokes MSBuild for the supplied target with the supplied configuration. If the build is suspended, waits until it is resumed to invoke it.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Sucessful" /> if the build succeeded, <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed" /> if it failed.
                </returns>
      <param name="config">
                    The build configuration to use.
                </param>
      <param name="target">
                    The target to build.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CancelBatchEdit">
      <summary>
                    Cancels a batch edit task.
                </summary>
      <returns>
                    When overridden in a derived class, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the cancellation was successful, an error code if it was not.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)">
      <summary>
                    Determines whether or not it is possible to perform the specified deletion.
                </summary>
      <returns>true to remove from the project, false to delete from storage. 
                </returns>
      <param name="deleteOperation">
        <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION.DELITEMOP_RemoveFromProject" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION.DELITEMOP_DeleteFromStorage" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.CanFileNodesHaveChilds">
      <summary>
                    Gets or sets whether or not file nodes may have sub-nodes in this project. For example, Visual Basic and C# files can have .resx and designer files as sub-nodes.
                </summary>
      <returns>true if file nodes can have sub-nodes; otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CanOverwriteExistingItem(System.String,System.String)">
      <summary>
                    Determines whether or not a file can be overwritten.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.E_ABORT" /> if the document is open; <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_CANCELED" /> if the confirmation message box was canceled; otherwise <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="originalFileName">
                    The name of the file to overwrite.
                </param>
      <param name="computedNewFileName">
                    The new name of the file.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.CanProjectDeleteItems">
      <summary>
                    Gets or sets whether or not this project can delete build items.
                </summary>
      <returns>true if the project can delete build items; otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CanTargetNodeAcceptDrop(System.UInt32)"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.Caption">
      <summary>
                    Gets the caption (display name) of this node.
                </summary>
      <returns>
                    The file name if there is one, otherwise the build project name or include file name.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CheckProjectForSecurity(Microsoft.VisualStudio.Package.ProjectSecurityChecker,Microsoft.VisualStudio.Package.ProjectSecurityChecker)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CleanProject">
      <summary>
                    Handles the Clean Project command.
                </summary>
      <returns>
                    When overridden by derived classes, cleans the build project and returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> or an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Close">
      <summary>
                    Closes the project and clears reference libraries.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />
      </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CompareNodes(Microsoft.VisualStudio.Package.HierarchyNode,Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Compares nodes for sorting purposes.
                </summary>
      <returns>
                    By default first compares the <see cref="T:Microsoft.VisualStudio.PackageDefaultSortOrderNode" /> values and returns a positive integer if the first node's <see cref="P:Microsoft.VisualStudio.Package.HierarchyNode.SortPriority" /> is greater than that of the second node, a negative integer if it is less. If the nodes have the same <see cref="P:Microsoft.VisualStudio.Package.HierarchyNode.SortPriority" />, then their captions are compared with <see cref="M:System.String.Compare(string strA, string strB, bool ignoreCase, T:System.Globalization.CultureInfo culture)" />.
                </returns>
      <param name="node1">
                    The first node to compare.
                </param>
      <param name="node2">
                    The second node to compare.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ConfigProvider">
      <summary>
                    Gets the configuration provider for this project.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ConfigProvider" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CopyToClipboard">
      <summary>
                    Copies the project to the clipboard.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the copy was successful; otherwise an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateConfigProvider">
      <summary>
                    Creates a new configuration provider.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ConfigProvider" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateDependentFileNode(Microsoft.VisualStudio.Package.ProjectElement)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateDependentFileNode(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateFileNode(Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Creates a file node with the supplied project element.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.FileNode" />.
                </returns>
      <param name="item">
                    The project element that contains the build item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateFileNode(System.String)">
      <summary>
                    Creates a file node (and its associated build item) with the supplied path.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.FileNode" />.
                </returns>
      <param name="file">
                    The path of the file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateFolderNode(System.String)">
      <summary>
                    Creates a folder node with the supplied path.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.FolderNode" />.
                </returns>
      <param name="path">
                    The path of the folder.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateFolderNode(System.String,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Creates a folder node with the supplied path and build item.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.FolderNode" />.
                </returns>
      <param name="path">
                    The path of the folder.
                </param>
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateFolderNodes(System.String)">
      <summary>
                    Creates a project folder node.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.
                </returns>
      <param name="path"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateMsBuildFileItem(System.String,System.String)">
      <summary>
                    Creates a new project element (which contains the build item), based on the supplied file and item type.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" />.
                </returns>
      <param name="file">
                    The path of the file to include.
                </param>
      <param name="itemType">
                    The value for the <see cref="P:Microsoft.Build.BuildEngine.BuildItem.Include" /> property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateProjectOptions">
      <summary>
                    Creates compiler-specific project options. 
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectOptions" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateProjectSecurityChecker(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreatePropertiesObject">
      <summary>
                    Creates a properties object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateReferenceContainerNode">
      <summary>
                    Creates a reference container node.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CreateUserProjectSecurityChecker(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.CutToClipboard">
      <summary>
                    Handles the cut operation on a project node.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.DisableQueryEdit">
      <summary>
                    Gets or sets whether or not it is possible to perform <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2. QueryEditFiles(uint rgfQueryEdit, int cFiles, string[] rgpszMkDocuments, uint[] rgrgf, T:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[] rgFileInfo, out uint pfEditVerdict, out uint prgfMoreInfo)" />, which determines whether or not the project file can be edited.
                </summary>
      <returns>false if it is possible to perform the edit query; otherwise true.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)">
      <param name="pDataObject"></param>
      <param name="grfKeyState"></param>
      <param name="itemid"></param>
      <param name="pdwEffect"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.DragLeave"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)">
      <param name="grfKeyState"></param>
      <param name="itemid"></param>
      <param name="pdwEffect"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)">
      <param name="pDataObject"></param>
      <param name="grfKeyState"></param>
      <param name="itemid"></param>
      <param name="pdwEffect"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.EndBatchEdit">
      <summary>
                    Ends a batch edit on the project.
                </summary>
      <returns>
                    When overridden in a derived class, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the end of the batch edit was successful, an error code if it was not.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.EnumDependencies(Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies@)">
      <summary>
                    Gets a dependency enumerator.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="enumDependencies">
                    [out] When the method returns, contains the dependency enumerator.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ErrorString">
      <summary>
                    Gets the project's error string.
                </summary>
      <returns>
                    When overridden, returns the error string. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    Handles execution of a given command on this node.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" /> if the project manager is closed, or if the command is not supported. Otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> or an error code if one of the executed commands returned an error code.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="nCmdexecopt">
                    Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, which describe how the object should execute the command.
                </param>
      <param name="pvaIn">
                    Pointer to a VARIANTARG structure containing input arguments. Can be null.
                </param>
      <param name="pvaOut">
                    Pointer to a VARIANTARG structure containing command output. Can be null.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.FileName">
      <summary>
                    Gets the absolute path of the project.
                </summary>
      <returns>
                    The absolute path of the project.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.FileTemplateProcessor">
      <summary>
                    Gets or sets the token processor for the file template.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.TokenProcessor" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.FilterItemTypeToBeAddedToHierarchy(System.String)">
      <summary>
                    Filters out items that should not be processed as files, for example folders and references.
                </summary>
      <returns>true if the item type should be filtered out, false if it should be included.
                </returns>
      <param name="itemType">
                    The item type to be filtered.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)">
      <summary>
                    Generates a unique document name for a given project item.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemIdLoc">
                    Containing folder for the unique item name being generated. Should be a valid item identifier, such an <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />. 
                </param>
      <param name="ext">
                    File extension of the new document name 
                </param>
      <param name="suggestedRoot">
                    If not null or empty, this value is used as the base name for the item, and numbers should be appended to make the name unique. If supplied, the project makes up its own root name based on the ext file extension. 
                </param>
      <param name="itemName">
                    Specifies the new item name, which contains the name only, not the item's file path.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetAggregateProjectTypeGuids(System.String@)">
      <summary>
                    Gets the semicolon-delimited list of GUIDs for the projects that have been aggregated together for this project.
                </summary>
      <returns>
                    If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.
                </returns>
      <param name="projectTypeGuids">
                    [out] Returns the semicolon-delimited list of GUIDs.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetAssemblyName(System.String)">
      <summary>
                    Gets the assembly name.
                </summary>
      <returns>
                    The assembly name.
                </returns>
      <param name="config">
                    The configuration property in the MSBuild project file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetAutomationObject">
      <summary>
                    Gets an automation object for this node.
                </summary>
      <returns>
                    An instance of a <see cref="T:EnvDTE.Project" /> implementation object representing the automation object for the project.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetBoolAttr(System.String,System.String)">
      <summary>
                    Gets a boolean MSBuild property.
                </summary>
      <returns>true if the MSBuild property attribute exists and false if it does not.
                </returns>
      <param name="config">
                    Specifies MSBuild configuration properties.
                </param>
      <param name="name">
                    Name of a project property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetBuildSystemKind(System.UInt32@)">
      <summary>
                    Gets the kind of build system used by the project.
                </summary>
      <returns>
                    Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK." /></returns>
      <param name="kind">
                    [out] The kind of system. By default returns <see cref="F:Microsoft.VisualStudio.Shell.Interop_BuildSystemKindFlags.BSK_MSBUILD" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetCATIDForType(System.Type)">
      <summary>
                    Gets the CATID corresponding to the specified type.
                </summary>
      <returns>
                    The CATID.
                </returns>
      <param name="type">
                    Type of the object for which to get the CATID.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider@)">
      <summary>
                    Returns an IVsCfgProvider2 object so that the VSPackage can retrieve information relating to the project's configuration.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="p">
                    Specifies an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetClassID(System.Guid@)">
      <summary>
                    Gets the GUID of the project.
                </summary>
      <returns>
                    If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.
                </returns>
      <param name="clsid">
                    [out] The GUID of the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetCompiler">
      <summary>
                    Provides access to the CodeDom.
                </summary>
      <returns>
                    When overridden in a derived class, returns the compiler to use.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetConfigurationDependentPropertyPages">
      <summary>
                    Gets the GUIDs of the configuration-dependent property pages.
                </summary>
      <returns>
                    When overridden by derived classes, an array of GUIDs representing the property pages that are configuration-dependent.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetConfigurationIndependentPropertyPages">
      <summary>
                    Gets the GUIDs of the configuration-independent property pages.
                </summary>
      <returns>
                    When overridden by derived classes, an array of GUIDs representing the property pages that are not dependent on the configuration.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetCurFile(System.String@,System.UInt32@)">
      <summary>
                    Gets the current active file.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="name">
                    Name of the file.
                </param>
      <param name="formatIndex">
                    Indicates the on-disk format, such as UTF-8, Unicode or MBCS
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetDocumentManager">
      <summary>
                    Gets a specific document manager to handle opening and closing the Project Designer, if it is supported.
                </summary>
      <returns>
                    If the project designer is supported, a new <see cref="T:Microsoft.VisualStudio.Package.ProjectDesignerDocumentManager" />, otherwise null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)">
      <param name="pdwOKEffects"></param>
      <param name="ppDataObject"></param>
      <param name="ppDropSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)">
      <summary>
                    Queries for special files and optionally creates them.
                </summary>
      <returns>
                    When overridden by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> or an error code.
                </returns>
      <param name="fileId">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID" /> of the file.
                </param>
      <param name="flags">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.__PSFFLAGS" /> of the file.
                </param>
      <param name="itemid">
                    [out] The ID of the node in the hierarchy, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> if the file does not exist.
                </param>
      <param name="fileName">
                    [out] The name of the file, or the empty string if the file does not exist.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetFormatList(System.String@)">
      <summary>
                    Gets the text format.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="formatlist">
                    A string that contains pairs of format filter strings
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetGuidProperty(System.Int32,System.Guid@)">
      <summary>
                    Gets a GUID value for the supplied property.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="propid">
                    Identifier of the hierarchy property. For a list of <paramref name="propId" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.
                </param>
      <param name="guid">
                    [out] The GUID value of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetInner">
      <summary>
                    Gets the inner object of an aggregated hierarchy.
                </summary>
      <returns>
                    When overridden in derived classes, returns the inner object of an aggregated hierarchy.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetItemContext(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>
                    Gets the context of a project item.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    Identifier of the context item whose value is taken from the VSITEMID.
                </param>
      <param name="psp">
                    Reference to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetMkDocument">
      <summary>
                    Gets the moniker for the project node, which is the full path of the project file.
                </summary>
      <returns>
                    The absolute path of the project file. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetMkDocument(System.UInt32,System.String@)">
      <summary>
                    Gets a document moniker.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    Item identifier corresponding to a node in this project's hierarchy. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier.
                </param>
      <param name="mkDoc">
                    Specifies a document moniker as fully qualified text uniquely describing the document represented by the <paramref name="itemId" /> parameter.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetOutputAssembly(System.String)">
      <summary>
                    Returns the output assembly.
                </summary>
      <returns>
                    The name of the output assembly in the project properties.
                </returns>
      <param name="config">
                    A string containing the name of the configuration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetOutputGroupDescription(System.String)">
      <summary>
                    Gets the description of the specified output group.
                </summary>
      <returns>
                    A localized version of the description if it exists, otherwise <paramref name="outputgroupCanonicalName" />.
                </returns>
      <param name="canonicalName"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetOutputGroupDisplayName(System.String)">
      <summary>
                    Gets the display name of the specified output group.
                </summary>
      <returns>
                    A localized version of the display name if it exists, otherwise <paramref name="outputgroupCanonicalName" />.
                </returns>
      <param name="canonicalName"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetOutputGroupNames">
      <summary>
                    Gets the list of output groups and their associated targets.
                </summary>
      <returns>
                    When overridden by derived classes, a list of type <see cref="T:System.Collections.Generic.KeyValuePair" />, which consists of the name of the output group and its associated target.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetOutputPath(System.String)">
      <summary>
                    Gets the project output path.
                </summary>
      <returns>
                    The output path.
                </returns>
      <param name="config">
                    Name of the project configuration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetPriorityProjectDesignerPages">
      <summary>
                    Gets the set of GUIDs of the preferred property pages. 
                </summary>
      <returns>
                    When overridden in derived classes, an array of the GUIDs of the preferred property pages.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetProjectElement(Microsoft.Build.BuildEngine.BuildItem)">
      <summary>
                    Gets a new project element based on the supplied build item. This project element is not associated to a node in the existing hierarchy.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectElement" />.
                </returns>
      <param name="item">
                    The MSBuild item to back the new project element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetProjectOptions(System.String)">
      <summary>
                    Gets the project options.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectOptions" />.
                </returns>
      <param name="config">
                    Name of the configuration passed to the MSBuild project file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetProjectProperty(System.String)">
      <summary>
                    Gets the project property value for the supplied property name.
                </summary>
      <returns>
                    The property value, or null if the property does not exist.
                </returns>
      <param name="propertyName">
                    The name of the property to get.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetProjectProperty(System.String,System.Boolean)">
      <summary>
                    Gets the project property value for the supplied property name.
                </summary>
      <returns>
                    The property value or null if the property does not exist.
                </returns>
      <param name="propertyName">
                    Name of the property to get.
                </param>
      <param name="resetCache">
                    A Boolean indicating whether the cache is used (false) or not (true). This is usually set to true.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetProperty(System.Int32)">
      <summary>
                    Returns the project property value for the supplied property ID.
                </summary>
      <returns>
                    The property value for the property ID.
                </returns>
      <param name="propId">
                    Property ID values are taken from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" /> enumeration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetReferenceContainer">
      <summary>
                    Gets the reference container node.
                </summary>
      <returns>
                    The node in the hierarchy that is an <see cref="T:Microsoft.VisualStudio.Package.IReferenceContainer" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])">
      <summary>
                    Gets the files that should be placed under source code control for a given item ID.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemid">
                    The ID of the item.
                </param>
      <param name="stringsOut">
                    The set of files associated with the item ID.
                </param>
      <param name="flagsOut">
                    The flags associated with each file indicating whether or not the file is a special file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])">
      <summary>
                    Gets the files that should be placed under source code control for a given item ID.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemid">
                    The item ID.
                </param>
      <param name="sccFile">
                    One of the files associated with the node.
                </param>
      <param name="stringsOut">
                    The names of the special files.
                </param>
      <param name="flagsOut">
                    The flags associated with the files.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.GetSelectedNodes">
      <summary>
                    Gets a list of the nodes that have been selected.
                </summary>
      <returns>
                    A list of type <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> of the selected nodes.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.HasProjectOpened">
      <summary>
                    Determines whether the project has completed opening.
                </summary>
      <returns>true if the project is (completely) open, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ImageHandler">
      <summary>
                    Gets an <see cref="T:Microsoft.VisualStudio.Package.ImageHandler" /> for the project node..
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.ImageHandler" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ImageIndex">
      <summary>
                    Gets the index of the <see cref="P:Microsoft.VisualStudio.Package.ProjectNode.ImageList" /> that corresponds to the project.
                </summary>
      <returns>
                    The index corresponding to <see cref="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Project" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
      <summary>
                    Initializes the project.
                </summary>
      <returns>
                    If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code. 
                </returns>
      <param name="filename">
                    The name of the project file.
                </param>
      <param name="location">
                    The location of the project file.
                </param>
      <param name="name">
                    The name of the project.
                </param>
      <param name="flags">
                    Flags from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> enumeration.
                </param>
      <param name="iid">
                    The interface ID of the requested interface. 
                </param>
      <param name="projectPointer">
                    [out] Returns a pointer to the project's IUnknown interface.
                </param>
      <param name="canceled">
                    [out] Returns true if the creation was canceled, otherwise false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.InitializeProjectProperties">
      <summary>
                    Sets common project properties with the default value if they are empty.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.InitNew(System.UInt32)">
      <summary>
                    Instructs the object to initialize itself in the untitled state.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="formatIndex">
                    Index value that indicates the current format of the file. The <paramref name="formatIndex" /> parameter controls the beginning format of the file. The caller should pass DEF_FORMAT_INDEX if the object is to choose its default format. If this parameter is non-zero, then it is interpreted as the index into the list of formats, as returned by a call to <see cref="M:Microsoft.VisualStudio.Package.ProjectNode.GetFormatList(System.String@)" />. An index value of 0 indicates the first format, 1 the second format, and so on.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.InvokeMsBuild(System.String)">
      <summary>
                    Runs MSBuild against the supplied target.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Sucessful" /> if the build succeeded, <see cref="F:Microsoft.VisualStudio.Package.MSBuildResult.Failed" /> if it failed.
                </returns>
      <param name="target">
                    The target to build.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.IsClosed">
      <summary>
                    Gets whether or not the project is closed.
                </summary>
      <returns>true if the project is closed; otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.IsCodeFile(System.String)">
      <summary>
                    Determines whether the item with the supplied filename is a code file.
                </summary>
      <returns>
                    When overridden in a derived class, returns true if the file is a code file, otherwise false.
                </returns>
      <param name="fileName"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.IsCurrentStateASuppressCommandsMode">
      <summary>
                    Determines whether or not the current state of the project suppresses the execution of commands.
                </summary>
      <returns>true if the project is being built or is in debug run/break mode, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.IsDirty(System.Int32@)">
      <summary>
                    Determines whether an object has changed since being saved to its current file.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="isDirty">
                    [out] true if the file has changed, otherwise false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.IsDocumentInProject(System.String,System.Int32@,Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY[],System.UInt32@)">
      <summary>
                    Determines whether a document is in the project.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="mkDoc">
                    Specifies the document moniker for which to search.
                </param>
      <param name="found">true if the document is found in the project, false if not or an error occurs. 
                </param>
      <param name="pri">
                    Priority level whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY" /> enumeration if the document is found; 0 if not or an error occurs.
                </param>
      <param name="itemId">
                    The item identifier of the document within the project. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. If the document is found, set contents to a value; if not found or an error occurs, set contents to 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.IsEmbeddedResource(System.String)">
      <summary>
                    Determines whether the given file is an embedded resource.
                </summary>
      <returns>true if the file's extension is ".resx", otherwise false.
                </returns>
      <param name="fileName"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.IsFlavorDirty">
      <summary>
                    Determines whether the project as a whole is dirty.
                </summary>
      <returns>true if the project is dirty, false if it is not dirty.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.IsItemTypeFileType(System.String)">
      <summary>
                    Determines if an item is a project file or an MSBuild file.
                </summary>
      <returns>
                    Returns true if items of this type should be included in the project, returns false if the item type is unknown.
                </returns>
      <param name="type">
                    Specifies the file type, such as "Compile", "Content", or "EmbeddedResource".
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.IsNewProject">
      <summary>
                    Gets whether or not the project being loaded is a new one.
                </summary>
      <returns>true if the project is new, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.IsProjectEventsListener">
      <summary>
                    Gets or sets whether this project listens to project events.
                </summary>
      <returns>true if the project listens to project events, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.IsProjectFileDirty">
      <summary>
                    Gets whether or not the project file is dirty.
                </summary>
      <returns>
                    When overridden in derived classes, returns true when the project file is dirty, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.IsProjectSecure"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.IsSccDisabled">
      <summary>
                    Gets or sets whether or not source code control is disabled for this project.
                </summary>
      <returns>true if source code control is disabled for the project, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ItemTypeGuid">
      <summary>
                    Gets the item type GUID for the project.
                </summary>
      <returns>
                    When overridden in a derived class, returns the appropriate item type GUID for the project.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.LastModifiedTime">
      <summary>
                    Gets the timestamp of the last modification to the project file.
                </summary>
      <returns>
                    The timestamp of the last modification to the project file.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Load(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Int32@)">
      <summary>
                    Loads or reloads a project.
                </summary>
      <param name="fileName"></param>
      <param name="location">
                    File path to the project.
                </param>
      <param name="name">
                    Name of the project.
                </param>
      <param name="flags">
                    Flags that indicate whether this method reloads/loads a project, or creates a new one. Values are taken from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> enumeration.
                </param>
      <param name="iidProject">
                    Unique identifier of the project. Specified for a project that is to be reloaded. Can be null if creating a new project.
                </param>
      <param name="canceled">
                    [out] returns 0 if a new project is created.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Load(System.String,System.UInt32,System.Int32)">
      <summary>
                    Loads or reloads a project.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="fileName"></param>
      <param name="mode">
                    Not used, pass in 0.
                </param>
      <param name="readOnly">
                    Not used, pass in 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.LoadNonBuildInformation">
      <summary>
                    Loads build information for flavored projects which implement <see cref="T:Microsoft.VisualStudio.Shell.Interop.IPersistXMLFragment" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.LoadXmlFragment(Microsoft.VisualStudio.Shell.Interop.IPersistXMLFragment,System.String)">
      <summary>
                    Initializes an object with an XML fragment.
                </summary>
      <param name="persistXmlFragment"></param>
      <param name="configName">
                    Name of the configuration being initialized. null if it is the project.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.MenuCommandId">
      <summary>
                    Gets the associated context menu command ID.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_PROJNODE" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.Microsoft#VisualStudio#Package#IProjectEventsProvider#ProjectEventsProvider">
      <summary>
                    Gets or sets the project events provider associated with this project.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.IProjectEvents" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IPersistFileFormat#GetClassID(System.Guid@)">
      <summary>
                    Gets the CLSID of this project.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
      <param name="clsid">
                    [out] Returns the CLSID of this project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetItemAttribute(System.UInt32,System.String,System.String@)">
      <summary>
                    Gets the value for the specified property.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
      <param name="item">
                    The item ID of the item.
                </param>
      <param name="attributeName">
                    The name of the property.
                </param>
      <param name="attributeValue">
                    [out] Returns the value of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetPropertyValue(System.String,System.String,System.UInt32,System.String@)">
      <summary>
                    Gets the value of the property in the project file.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
      <param name="propertyName">
                    The name of the property.
                </param>
      <param name="configName">
                    The name of the project configuration.
                </param>
      <param name="storage">
                    The kind of file, a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._PersistStorageType" /> enumeration.
                </param>
      <param name="propertyValue">
                    [out] Returns the value of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#RemoveProperty(System.String,System.String,System.UInt32)">
      <summary>
                    Deletes a property value.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
      <param name="propertyName">
                    The name of the property.
                </param>
      <param name="configName">
                    The name of the project configuration.
                </param>
      <param name="storage">
                    The kind of file, a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._PersistStorageType" /> enumeration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetItemAttribute(System.UInt32,System.String,System.String)">
      <summary>
                    Sets the specified property on an item.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
      <param name="item">
                    The item ID.
                </param>
      <param name="attributeName">
                    The name of the property.
                </param>
      <param name="attributeValue">
                    The value to set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetPropertyValue(System.String,System.String,System.UInt32,System.String)">
      <summary>
                    Sets a property value in a project file.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
      <param name="propertyName">
                    The name of the property.
                </param>
      <param name="configName">
                    The name of the project configuration.
                </param>
      <param name="storage">
                    The kind of file, a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._PersistStorageType" /> enumeration.
                </param>
      <param name="propertyValue">
                    The value to set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfgProvider#CreateProjectFlavorCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorCfg@)">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorCfg" /> interface for the object with the specified <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfg" /> interface.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
      <param name="pBaseProjectCfg">
                    The object with the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfg" /> interface.
                </param>
      <param name="ppFlavorCfg">
                    [out] Returns the corresponding <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorCfg" /> interface.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.NodeFromItemId(System.UInt32)">
      <summary>
                    Returns the node specified by the item ID.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.
                </returns>
      <param name="itemId">
                    ID of the project item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.NodeHasDesigner(System.String)">
      <summary>
                    Determines whether a project node includes a designer.
                </summary>
      <returns>
                    When overridden in a derived class, true if the node has a designer, otherwise false.
                </returns>
      <param name="itemPath">
                    Path of the project item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OnAggregationComplete">
      <summary>
                    Called when all the steps of project aggregation are completed.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)">
      <param name="o"></param>
      <param name="dwEffect"></param>
      <param name="fCancelDrop"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OnClear(System.Int32)">
      <summary>
                    Clears the clipboard when the cut or copy operation is canceled.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if there was nothing on the clipboard, otherwise <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="wasCut">true if it was a cut operation, false if it was a copy operation.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OnDropNotify(System.Int32,System.UInt32)">
      <param name="fDropped"></param>
      <param name="dwEffects"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OnHandleConfigurationRelatedGlobalProperties(System.Object,Microsoft.VisualStudio.Package.ActiveConfigurationChangedEventArgs)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OnOpenItem(System.String)">
      <summary>
                    Called when the project opens an editor window for the given file.
                </summary>
      <param name="fullPathToSourceFile">
                    Path of the file to be opened.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OnPaste(System.Int32,System.UInt32)">
      <summary>
                    Clears the clipboard after a paste operation.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if there was nothing on the clipboard, otherwise <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="wasCut">true if it was a cut operation, false if it was a copy operation.
                </param>
      <param name="dropEffect">
                     One of the values of <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode.DropEffect" />.
                </param>
    </member>
    <member name="E:Microsoft.VisualStudio.Package.ProjectNode.OnProjectPropertyChanged">
      <summary>
                    Notifies that a project property has changed.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OpenDependency(System.String,Microsoft.VisualStudio.Shell.Interop.IVsDependency@)">
      <summary>
                    Provides access to a dependency.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="szDependencyCanonicalName">
                    The name of the dependency.
                </param>
      <param name="dependency">
                    [out] The dependency to open; always returns as null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OpenItem(System.UInt32,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>
                    Opens an item in the project.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    Identifier of the item to open. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier.
                </param>
      <param name="logicalView">
                    Unique identifier of the logical view. If not GUID_NULL, indicates a specific type of view to create. For valid values, see <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Code" />, <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" />, <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Designer" />, <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Primary" />, <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_UserChooseView" />.
                </param>
      <param name="punkDocDataExisting">
                    Specifies the document data object of the item to open.
                </param>
      <param name="frame">
                    Specifies <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OpenItemWithSpecific(System.UInt32,System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>
                    Opens an item using a specific editor.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    Item identifier of the item to open. Values need to be valid identifiers, such as <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.
                </param>
      <param name="editorFlags">
                    Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS" /> enumeration.
                </param>
      <param name="editorType">
                    Unique identifier of the editor type.
                </param>
      <param name="physicalView">
                    Name of the physical view.
                </param>
      <param name="logicalView">
                    Name of the logical view.
                </param>
      <param name="docDataExisting">
                    Specifies the existing document data object on the document to open.
                </param>
      <param name="frame">
                    Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.OutputBaseRelativePath">
      <summary>
                    Gets or sets the relative path of the output subfolder.
                </summary>
      <returns>
                    The path relative to the project folder of the output subfolder.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.OverwriteExistingItem(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    When overridden in derived classes, handles overwriting of an existing item in the project hierarchy.
                </summary>
      <param name="existingNode">
                    The node to overwrite.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.PasteFromClipboard(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Handles the paste operation on a project node.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.E_UNEXPECTED" /> if no data could be gotten from the clipboard, <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" /> if the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper" /> could not be obtained, otherwise <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> or an error code that was returned from the paste operation.
                </returns>
      <param name="targetNode">
                    The node under which this node should be pasted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.PersistXMLFragments">
      <summary>
                    Retrieves all the XML fragments that need to be saved from the flavored projects and stores the information in MSBuild.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.PrepareBuild(System.String,System.Boolean)">
      <summary>
                    Creates folders and ensures assembly paths are correct.
                </summary>
      <param name="config">
                    Name of the project configuration.
                </param>
      <param name="cleanBuild"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ProcessDependentFileNodes(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,Microsoft.Build.BuildEngine.BuildItem})">
      <summary>
                    Processes dependent filenodes from a list of subitems.
                </summary>
      <param name="subitemsKeys">
                    Key to retrieve the target item from the subitems list.
                </param>
      <param name="subitems">
                    The <see cref="T:Microsoft.Build.BuildEngine.BuildItem" /> to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ProcessFiles">
      <summary>
                    Loads files from the project file into the hierarchy.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ProcessFolders">
      <summary>
                    Loads folders from the project file into the hierarchy.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ProcessReferences">
      <summary>
                    Loads references from the project file into the hierarchy.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ProjectDesignerEditor">
      <summary>
                    Gets the GUID of the Project Designer Editor.
                </summary>
      <returns>
                    When overridden by derived classes, the GUID of the specific Project Designer Editor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ProjectFile">
      <summary>
                    Gets or sets the editable node project filename. 
                </summary>
      <returns>
                    Returns the name of the editable project file node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ProjectFolder">
      <summary>
                    Gets the path to the folder containing the project.
                </summary>
      <returns>
                    The path to the project folder.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ProjectGuid">
      <summary>
                    Gets the GUID of the project type.
                </summary>
      <returns>
                    The GUID registered under HKLM\Software\Microsoft\Visual Studio\&lt;version&gt;\Projects for this project type.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ProjectIDGuid">
      <summary>
                    Gets or sets the GUID associated with the project.
                </summary>
      <returns>
                    The project GUID.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ProjectObject">
      <summary>
                    When overridden in a derived class, gets the object that is returned by <see cref="P:EnvDTE.Project.Object" /> for this project.
                </summary>
      <returns>
                    The project object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ProjectType">
      <summary>
                    Gets the name of the project type.
                </summary>
      <returns>
                    When overridden by derived classes, a caption for the type of project being defined.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Package.QueryStatusResult@)">
      <summary>
                    Handles command status on a node. 
                </summary>
      <returns>
                    If the command is supported, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; if it is not supported, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" /></returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="pCmdText">
                    A pointer to a structure to return name and/or status information.
                </param>
      <param name="result">
                    The result of the command.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.RaiseProjectPropertyChanged(System.String,System.String,System.String)">
      <summary>
                    Raises an <see cref="E:Microsoft.VisualStudio.Package.ProjectNode.OnProjectPropertyChanged" /> event.
                </summary>
      <param name="propertyName">
                    The name of the property that changed.
                </param>
      <param name="oldValue">
                    The old value of the property.
                </param>
      <param name="newValue">
                    The new value of the property.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ReEvaluateProjectFileTargetName">
      <summary>
                    When overridden in derived class, gets the target name used to trigger a build.
                </summary>
      <returns>
                    The target name used to trigger a build.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.RegisterClipboardNotifications(System.Boolean)">
      <summary>
                    Registers/unregisters for clipboard events with the Solution Explorer.
                </summary>
      <param name="register">true to register, false to unregister.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.RegisterSccProject">
      <summary>
                    Registers the project with the source code control manager.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Reload">
      <summary>
                    Reloads a project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Remove(System.Boolean)">
      <summary>
                    Removes items from the hierarchy.
                </summary>
      <param name="removeFromStorage">
                    If true, the project is removed from the higher-level project, not deleted from disk. If false, the project is both removed from the project and deleted from disk.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.RemoveBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)">
      <summary>
                    Removes the supplied build dependency from the list.
                </summary>
      <param name="dependency">
                    The build dependency to remove.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.RemoveItem(System.UInt32,System.UInt32,System.Int32@)">
      <summary>
                    Removes an item from the project.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="reserved">
                    Reserved for future use.
                </param>
      <param name="itemId">
                    Identifier of the item to be removed.
                </param>
      <param name="result">
                    [out] 1 if the item was successfully removed from the project, otherwise 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.RenameProjectFile(System.String)">
      <summary>
                    Renames the project file.
                </summary>
      <param name="newFile">
                    The absolute path of the new project file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ReopenItem(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>
                    Reopens the project item in the specified editor.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="itemId">
                    Identifier of the item to be opened.
                </param>
      <param name="editorType">
                    Unique identifier of the editor type.
                </param>
      <param name="physicalView">
                    Name of the physical view.
                </param>
      <param name="logicalView">
                    Unique identifier of the logical view.
                </param>
      <param name="docDataExisting">
                    Pointer to the existing document data object.
                </param>
      <param name="frame">
                    Specifies the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ResumeMSBuild(System.String)">
      <summary>
                    Resumes the MSBuild process on the supplied target with the default configuration and without logging to the output window.
                </summary>
      <param name="target">
                    The target to build.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ResumeMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)">
      <summary>
                    Resumes the MSBuild process on the supplied target with the default configuration, logging to the output window.
                </summary>
      <param name="config">
                    The configuration to use.
                </param>
      <param name="output">
                    The output window.
                </param>
      <param name="target">
                    The target to build.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ResumeMSBuild(System.String,System.String)">
      <summary>
                    Resumes the MSBuild process on the supplied target with the supplied configuration and without logging to the output window.
                </summary>
      <param name="config">
                    The configuration to use.
                </param>
      <param name="target">
                    The target to build.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.RunWizard(Microsoft.VisualStudio.Package.HierarchyNode,System.String,System.String,System.IntPtr)">
      <summary>
                    Executes the supplied wizard against the supplied node.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Shell.Interop.ADDRESULT_Success" /> if the wizard was successful, <see cref="F:Microsoft.VisualStudio.Shell.Interop.ADDRESULT_Failure" /> if it failed, <see cref="F:Microsoft.VisualStudio.Shell.Interop.ADDRESULT_Cancel" /> if it was canceled.
                </returns>
      <param name="parentNode">
                    The node against which to run the wizard.
                </param>
      <param name="itemName">
                    The name of the file supplied by the user.
                </param>
      <param name="wizardToRun">
                    The name of the wizard to run.
                </param>
      <param name="dlgOwner">
                    The owner of the dialog box.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.Save(System.String,System.Int32,System.UInt32)">
      <summary>
                    Saves a copy of the object into the specified file.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="fileToBeSaved">
                    Name of the file that the object is to be saved in.
                </param>
      <param name="remember">
                    Indicates whether the filename parameter is to be used as the current working file.
                </param>
      <param name="formatIndex">
                    Value that indicates the format in which the file is saved. The caller passes DEF_FORMAT_INDEX if the object is to choose its default (current) format.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SaveAs(System.String)">
      <summary>
                    Saves the project file to a different name.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the rename succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.OLE_E_PROMPTSAVECANCELLED" /> if the rename is not possible.
                </returns>
      <param name="newFileName">
                    The new name.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SaveCompleted(System.String)">
      <summary>
                    Notifies the object that it has concluded the Save transaction and that the object can write to its file.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="filename">
                    Specifies the file name.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SaveMSBuildProjectFileAs(System.String)">
      <summary>
                    Saves the MSBuild project to the supplied file name.
                </summary>
      <param name="newFileName">
                    The absolute path of the project file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])">
      <summary>
                    Informs the project of changes to the source code control glyph for the supplied nodes.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="affectedNodes">
                    The number of affected nodes.
                </param>
      <param name="itemidAffectedNodes">
                    An array of item IDs of the affected nodes.
                </param>
      <param name="newGlyphs">
                    An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> glyphs.
                </param>
      <param name="newSccStatus">
                    An array of status nodes associated with the nodes.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetAggregateProjectTypeGuids(System.String)">
      <summary>
                    Sets the semicolon-delimited list of project GUIDs.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
      <param name="projectTypeGuids">
                    The semicolon-delimited list of project GUIDs.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetBuildConfigurationProperties(System.String)">
      <summary>
                    Sets the build configuration properties on the project.
                </summary>
      <param name="config">
                    The configuration to use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetConfiguration(System.String)">
      <summary>
                    Sets the configuration property in MSBuild.
                </summary>
      <param name="config">
                    The name of the configuration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetCurrentConfiguration">
      <summary>
                    Sets the configuration in MSBuild.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetEditLabel(System.String)">
      <summary>
                    Sets a caption value for the editable node.
                </summary>
      <returns>
                    If the method succeeds, it returns 0.
                </returns>
      <param name="label">
                    A caption value.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetGuidProperty(System.Int32,System.Guid@)">
      <summary>
                    Sets properties whose values are GUIDs.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="propid">
                    Identifier of the hierarchy property. These values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID2" /> enumeration.
                </param>
      <param name="guid">
                    Unique identifier for the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetHostObject(System.String,System.String,System.Object)">
      <summary>
                    Sets the host object for a given build target and build task.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" /> if <paramref name="targetName " />or <paramref name="taskName" /> is null or if there is no build project or build targets; <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" /> if it was not possible to set the host object; if it was possible to set the host object, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. 
                </returns>
      <param name="targetName">
                    The name of the build target.
                </param>
      <param name="taskName">
                    The name of the task.
                </param>
      <param name="hostObject">
                    The host object to be set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetInnerProject(System.Object)">
      <summary>
                    Sets the innermost project. This project is always the innermost one, so nothing is done.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.
                </returns>
      <param name="innerProject">
                    The innermost project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetOutputLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
      <summary>
                    Creates a build logger and sets its output window to the supplied window.
                </summary>
      <param name="output">
                    The window to which the logger will direct its output.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetProjectFileDirty(System.Boolean)">
      <summary>
                    Sets the project file's state to dirty or clean.
                </summary>
      <param name="value">
                    If true, set the file's state to dirty, otherwise to clean.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetProjectProperty(System.String,System.String)">
      <summary>
                    Sets the user-defined MSBuild property name to the property value.
                </summary>
      <param name="propertyName">
                    The name of the property.
                </param>
      <param name="propertyValue">
                    The name of the property value.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetProperty(System.Int32,System.Object)">
      <summary>
                    Sets the value for the supplied property.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method was successful, or an error code if it failed.
                </returns>
      <param name="propid">
                    The <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" /> property to set.
                </param>
      <param name="value">
                    The value to set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetSccLocation(System.String,System.String,System.String,System.String)">
      <summary>
                    Sets the source code control location when a project is initially added to source control, or when some of the project's settings are changed.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="sccProjectName">
                    The name of the source code control project. This should be persisted in the project file.
                </param>
      <param name="sccAuxPath">
                    The path to the server. This should be persisted in the project file.
                </param>
      <param name="sccLocalPath">
                    The local path to the project. This should be persisted in the project file.
                </param>
      <param name="sccProvider">
                    The source code control package. This should be persisted in the project file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>
                    Sets the primary service provider.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="site">
                    The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />, which can be used by the project to obtain other interfaces.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SetTargetPlatform(Microsoft.VisualStudio.Package.ProjectOptions)">
      <summary>
                    Sets the target platform for <see cref="T:Microsoft.VisualStudio.Package.ProjectOptions" />.
                </summary>
      <param name="options">
                    A <see cref="T:Microsoft.VisualStudio.Package.ProjectOptions" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ShowAllFiles">
      <summary>
                    Handles the Show All Files menu command.
                </summary>
      <returns>
                    When overridden by derived classes, handles the menu command Show All Files and returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful, otherwise an error code.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.ShowProjectInSolutionPage">
      <summary>
                    Gets or sets whether or not the project should be filtered out of the component picker.
                </summary>
      <returns>
                    When overridden in derived classes, true if the project should appear in the component picker, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.ShowSecurityDialogBox(System.String)"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.Site">
      <summary>
                    Gets the service provider for the project.
                </summary>
      <returns>
                    The <see cref="T:System.IServiceProvider" /> supplied by the Visual Studio shell for the project.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.StartBatchEdit">
      <summary>
                    Starts a batch edit.
                </summary>
      <returns>
                    When overridden in a derived class, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the start of the batch edit was successful, an error code if it was not.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.SupportsProjectDesigner">
      <summary>
                    Gets or sets whether the project uses the Project Designer Editor or the property page frame to edit project properties.
                </summary>
      <returns>
                    When overridden by derived classes, true if the project uses the Project Designer Editor, false if it uses the property page.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.SuspendMSBuild">
      <summary>
                    Increments the MSBuild suspension counter, which is checked when MSBuild is called.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.TaskProvider">
      <summary>
                    Gets the task provider for the project.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.TransferItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>
                    Transfers an item from one project to another.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.
                </returns>
      <param name="oldMkDoc">
                    Path to the old document.
                </param>
      <param name="newMkDoc">
                    Path to the new document.
                </param>
      <param name="frame">
                    Optional. Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.UnloadProject">
      <summary>
                    Unloads the project.
                </summary>
      <returns>
                    When overridden in a derived class, handles the unloading of the project.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.UnRegisterProject">
      <summary>
                    Unregisters the project from the source code control manager.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.UpdateSccStateIcons">
      <summary>
                    Redraws the source code control state icons for all nodes in the hierarchy.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.Url">
      <summary>
                    Gets the URL for the project/hierarchy node.
                </summary>
      <returns>
                    The URL for a specific node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.VerifySubFolderExists(System.String,Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Verifies that there is a child node of the same name as the supplied path, and creates one if none exists.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.FolderNode" /> corresponding to the path.
                </returns>
      <param name="path"></param>
      <param name="parent">
                    The parent of the node to find.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNode.WalkSourceProjectAndAdd(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Package.HierarchyNode,System.Boolean)">
      <summary>
                    Walks the project and adds all the items to this project. This is a helper method for copy/paste and drag/drop functionality.
                </summary>
      <param name="sourceHierarchy">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the root of the hierarchy.
                </param>
      <param name="itemId"></param>
      <param name="targetNode">
                    The <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> that is the root at which to start adding items.
                </param>
      <param name="addSiblings"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNode.WarningString">
      <summary>
                    Gets the warning string.
                </summary>
      <returns>
                    When overridden by derived classes, the warning string for the project.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectNode.ImageName">
      <summary>
                    Defines images for the different types that live under the project.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.OfflineWebApp">
      <summary>
                    An offline web application.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.WebReferencesFolder">
      <summary>
                    A Web References folder.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.OpenReferenceFolder">
      <summary>
                    An open References folder.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.ReferenceFolder">
      <summary>
                    The References folder.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Reference">
      <summary>
                    A reference.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.SDLWebReference">
      <summary>
                    A SDL (Service Description Language) Web reference.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.DISCOWebReference">
      <summary>
                    A .disco Web reference.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Folder">
      <summary>
                    A folder.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.OpenFolder">
      <summary>
                    An open folder.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.ExcludedFolder">
      <summary>
                    An excluded folder.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.OpenExcludedFolder">
      <summary>
                    An open excluded folder.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.ExcludedFile">
      <summary>
                    An excluded file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.DependentFile">
      <summary>
                    A dependent file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.MissingFile">
      <summary>
                    A missing file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.WindowsForm">
      <summary>
                    A Windows form.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.WindowsUserControl">
      <summary>
                    A Windows user control.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.WindowsComponent">
      <summary>
                    A Windows component.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.XMLSchema">
      <summary>
                    An XML Schema (.xsd) file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.XMLFile">
      <summary>
                    An XML file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.WebForm">
      <summary>
                    A WebForm.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.WebService">
      <summary>
                    A Web service.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.WebUserControl">
      <summary>
                    A Web user control.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.WebCustomUserControl">
      <summary>
                    A custom Web user control.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.ASPPage">
      <summary>
                    An ASP page.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.GlobalApplicationClass">
      <summary>
                    A global application class.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.WebConfig">
      <summary>
                    A Web config file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.HTMLPage">
      <summary>
                    An HTML page.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.StyleSheet">
      <summary>
                    A stylesheet.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.ScriptFile">
      <summary>
                    A script file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.TextFile">
      <summary>
                    A text file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.SettingsFile">
      <summary>
                    A settings file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Resources">
      <summary>
                    Resources.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Bitmap">
      <summary>
                    A bitmap.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Icon">
      <summary>
                    An icon.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Image">
      <summary>
                    An image file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.ImageMap">
      <summary>
                    An image map.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.XWorld">
      <summary>
                    An xWorld mesh file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Audio">
      <summary>
                    An audio file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Video">
      <summary>
                    A video file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.CAB">
      <summary>
                    A .cab file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.JAR">
      <summary>
                    A .jar archive file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.DataEnvironment">
      <summary>
                    A data environment description.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.PreviewFile">
      <summary>
                    A preview file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.DanglingReference">
      <summary>
                    A reference that cannot be resolved.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.XSLTFile">
      <summary>
                    An .xsl transform file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Cursor">
      <summary>
                    A cursor.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.AppDesignerFolder">
      <summary>
                    An Application Designer folder.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Data">
      <summary>
                    A data provider.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.Application">
      <summary>
                    An application.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.DataSet">
      <summary>
                    A dataset.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.PFX">
      <summary>
                    A .pfx (Personal Information Exchange) file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.SNK">
      <summary>
                    A .snk (Strong Name Keys) file.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectNode.ImageName.ImageLast">
      <summary>
                    The last image name.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectNodeProperties">
      <summary>
                    Defines the properties of the project node. To create localizable node properties for a given project, subclass this class and add public properties decorated with your own localized display name, category and description attributes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNodeProperties.#ctor(Microsoft.VisualStudio.Package.ProjectNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ProjectNodeProperties" /> for the specified project node.
                </summary>
      <param name="node">
        <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNodeProperties.FileName">
      <summary>
                    Gets or sets the project file name.
                </summary>
      <returns>
                    The name of the project's project file.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNodeProperties.FullPath">
      <summary>
                    Gets or sets the project folder's absolute path.
                </summary>
      <returns>
                    The absolute path (suffixed with the directory separator character) of the project folder.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNodeProperties.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider@)">
      <summary>
                    Gets the configuration provider.
                </summary>
      <returns>
                    If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.
                </returns>
      <param name="p">
                    [out] If the associated hierarchy node belongs to a project, returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider" /> of the associated node's project node. Otherwise returns null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNodeProperties.GetClassName">
      <summary>
                    Gets the class name of <see cref="T:Microsoft.VisualStudio.Package.ProjectNodeProperties" />.
                </summary>
      <returns>
                    A localized version of the "ProjectProperties" string.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectNodeProperties.GetEditor(System.Type)">
      <summary>
                    Gets the editor of the specified type.
                </summary>
      <param name="editorBaseType">
                    The type of the editor.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNodeProperties.ProjectFile">
      <summary>
                    Gets or sets the project file.
                </summary>
      <returns>
                    The project file of the associated hierarchy node's project node.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectNodeProperties.ProjectFolder">
      <summary>
                    Gets the project folder.
                </summary>
      <returns>
                    The project folder of the associated hierarchy node's project node.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectOptions">
      <summary>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectOptions" /> are used to pass parameters to the invoked a compiler.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectOptions.#ctor">
      <summary>
                    Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Package.ProjectOptions" /> class.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.AdditionalSearchPaths">
      <summary>
                    A <see cref="T:System.Collections.Specialized.StringCollection" /> of additional file paths for A reference library.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.AllowUnsafeCode">
      <summary>
                    A BOOELAN indicating if unsafe code is allowed, or not.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.BaseAddress">
      <summary>
                    Specifies the preferred address at which to load a .dll file at run time.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.BugReportFileName">
      <summary>
                    Specifies the file name for the bug report.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.CheckedArithmetic">
      <summary>
                    This parameter enables the arithmetic to be checked for buffer overflow/underflow.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.CodePage"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.CompileAndExecute"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.DefinedPreProcessorSymbols"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.DisplayCommandLineHelp"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.EmitManifest"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.EncodeOutputInUTF8"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.FileAlignment"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.FullyQualifiyPaths"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectOptions.GetOptionHelp">
      <summary>
                    Gets a help string for the option.
                </summary>
      <returns>
                    Returns a string containing the option help information. At this time NULL is returned.
                </returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.HeuristicReferenceResolution"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.IncrementalCompile"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.ModuleKind"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.NoStandardLibrary"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.Optimize"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.PDBOnly"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.RecursiveWildcard"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.ReferencedModules"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.RootNamespace"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.SuppressedWarnings"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.SuppressLogo"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.TargetPlatform"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.TargetPlatformLocation"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.UserLocaleId"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.Win32Icon"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectOptions.XMLDocFileName"></member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectPackage">
      <summary>
                    The base class for project packages. Handles solution listeners.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectPackage.#ctor">
      <summary>
                    Initializes a new instance of the derived class when overridden in a derived class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectPackage.Dispose(System.Boolean)">
      <summary>
                    Calls <see cref="M:Microsoft.VisualStudio.Package.SolutionListener.Dispose()" /> on each of the solution listeners in the <see cref="P:Microsoft.VisualStudio.Package.ProjectPackage.SolutionListeners" /> list.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectPackage.GetProjectTrustLevel(System.Guid)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectPackage.Initialize">
      <summary>
                    Adds the solution listeners to the <see cref="P:Microsoft.VisualStudio.Package.ProjectPackage.SolutionListeners" /> list.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectPackage.OnLoadOptions(System.String,System.IO.Stream)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectPackage.OnSaveOptions(System.String,System.IO.Stream)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectPackage.SetProjectTrustLevel(System.Guid,Microsoft.VisualStudio.Package.ProjectTrustLevel)"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectPackage.SolutionListeners">
      <summary>
                    Gets a list of solution listeners for this project.
                </summary>
      <returns>
                    The list of <see cref="T:Microsoft.VisualStudio.Package.SolutionListener" /> objects for this project.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectPropertyChangedArgs">
      <summary>
                    Represents arguments for the <see cref="E:Microsoft.VisualStudio.Package.ProjectNode.OnProjectPropertyChanged" /> event.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectPropertyChangedArgs.NewValue">
      <summary>
                    Gets the new value for the changed property.
                </summary>
      <returns>
                    The new value for the property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectPropertyChangedArgs.OldValue">
      <summary>
                    Gets the old value for the changed property.
                </summary>
      <returns>
                    The old value for the changed property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectPropertyChangedArgs.PropertyName">
      <summary>
                    Gets the name of the property that changed.
                </summary>
      <returns>
                    The name of the property that changed.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectReferenceNode">
      <summary>
                    A reference node in the project hierarchy that represents a referenced project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Initializes a new instance of T<see cref=":Microsoft.VisualStudio.Package.ProjectReferenceNode" /> with the supplied project root and the associated project element.
                </summary>
      <param name="root">
                     The project root.
                </param>
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,System.String,System.String,System.String)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ProjectReferenceNode" /> with the supplied project root and information from a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA" /> structure.
                </summary>
      <param name="root">
                    The project root.
                </param>
      <param name="referencedProjectName">
                    The title of the project.
                </param>
      <param name="projectPath">
                    The path of the project.
                </param>
      <param name="projectReference">
                    The project reference.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectReferenceNode.AddReference">
      <summary>
                    Adds the reference node and an associated build dependency to the project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectReferenceNode.BindReferenceData">
      <summary>
                    Creates a build item for the project and adds the node's information to the project metadata.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectReferenceNode.CanAddReference(Microsoft.VisualStudio.Package.ReferenceNode.CannotAddReferenceErrorMessage@)">
      <summary>
                    Determines whether or not the reference can be added.
                </summary>
      <returns>
                    Returns true if there is no reference with the same path and if the reference is not circular; that is, <see cref="M:Microsoft.VisualStudio.Package.ProjectReferenceNode.IsReferenceInCycle(Guid projectGuid)" /> returns false. Otherwise returns false.
                </returns>
      <param name="errorHandler">
                    The delegate that handles the error message.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectReferenceNode.CanShowDefaultIcon">
      <summary>
                    Determines whether or not the node is a valid reference and the default icon can be shown.
                </summary>
      <returns>
                    Returns true if the node is in an open project and the file in its path exists on disk; otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectReferenceNode.Caption">
      <summary>
                    Gets the caption (the display name) of the node.
                </summary>
      <returns>
                    The display name.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectReferenceNode.CreatePropertiesObject"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectReferenceNode.IsNodeValid">
      <summary>
                    Gets and sets whether or not the reference is resolved.
                </summary>
      <returns>
                    Returns true if the reference can be resolved; otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectReferenceNode.Remove(System.Boolean)">
      <summary>
                    Removes the node from the project and optionally deletes it from disk.
                </summary>
      <param name="removeFromStorage">
                    If true, deletes the project from disk as well as removing it from the project; if false, merely removes it from the project.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectReferenceNode.Url">
      <summary>
                    Gets the absolute path of the node.
                </summary>
      <returns>
                    The absolute path of the node.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectReferencesProperties">
      <summary>
                    Defines the properties specific to project reference nodes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectReferencesProperties.#ctor(Microsoft.VisualStudio.Package.ProjectReferenceNode)">
      <summary>
                    Initializes a new instance of <see cref="M:Microsoft.VisualStudio.Package.ProjectReferencesProperties" /> for a specified <see cref="T:Microsoft.VisualStudio.Package.ProjectReferenceNode" />.
                </summary>
      <param name="node">
                    The <see cref="T:Microsoft.VisualStudio.Package.ProjectReferenceNode" /> containing the project reference.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectReferencesProperties.FullPath">
      <summary>
                    Gets the full path for a project reference.
                </summary>
      <returns>
                    The path to the property.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectSecurityChecker"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectSecurityChecker.#ctor(System.IServiceProvider,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectSecurityChecker.CheckItemsLocation(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectSecurityChecker.Dispose"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectSecurityChecker.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectSecurityChecker.IsProjectSafeAtLoadTime(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectSecurityChecker.IsProjectSafeWithImports(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectSecurityChecker.IsProjectSafeWithItems(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectSecurityChecker.IsProjectSafeWithProperties(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectSecurityChecker.IsProjectSafeWithTargets(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ProjectSecurityChecker.IsProjectSafeWithUsingTasks(System.String@)"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectSecurityChecker.ProjectShim"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectSecurityChecker.SecurityCheckHelper"></member>
    <member name="P:Microsoft.VisualStudio.Package.ProjectSecurityChecker.ServiceProvider"></member>
    <member name="T:Microsoft.VisualStudio.Package.ProjectTrustLevel"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectTrustLevel.Unknown"></member>
    <member name="F:Microsoft.VisualStudio.Package.ProjectTrustLevel.Trusted"></member>
    <member name="T:Microsoft.VisualStudio.Package.PropertiesEditorLauncher">
      <summary>
                    Launches the Project Properties Editor.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.PropertiesEditorLauncher.#ctor(Microsoft.VisualStudio.Shell.ServiceProvider)">
      <summary>
                    Initializes a new instance of a M:Microsoft.VisualStudio.Package.PropertiesEditorLauncher using a specified service provider.
                </summary>
      <param name="serviceProvider">
                    The <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider" /> to use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.PropertiesEditorLauncher.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
                    Edits the component and returns a value indicating whether the component was modified.
                </summary>
      <returns>true if the component was modified; otherwise, false.
                </returns>
      <param name="context">
                    A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> context object that can be used to obtain further information about the edit.
                </param>
      <param name="component">
                    The component to be edited.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.PropertyPageTypeConverterAttribute">
      <summary>
                    A type converter attribute that holds the type with which it was constructed. Obsolete. Use <see cref="T:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute" /> instead.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.PropertyPageTypeConverterAttribute.#ctor(System.Type)">
      <summary>
                    Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Package.PropertyPageTypeConverterAttribute" /> of the supplied type. Obsolete. Use <see cref="T:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute" /> instead.
                </summary>
      <param name="type"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.PropertyPageTypeConverterAttribute.ConverterType">
      <summary>
                    Gets the type of the type converter. Obsolete. Use <see cref="T:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute" /> instead.
                </summary>
      <returns>
        <see cref="T:System.Type" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.PropPageStatus">
      <summary>
                    Defines the current status of the property page.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.PropPageStatus.Dirty">
      <summary>
                     The page is dirty (has unsaved modifications).
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.PropPageStatus.Validate">
      <summary>
                     The page should be validated.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.PropPageStatus.Clean">
      <summary>
                     The page is clean.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.QueryStatusResult">
      <summary>
                    Defines the possible results returned for various status calls such as <see cref="M:Microsoft.VisualStudio.Package.FileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Package.QueryStatusResult@)" />.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.QueryStatusResult.NOTSUPPORTED">
      <summary>
                    The command is not supported.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.QueryStatusResult.SUPPORTED">
      <summary>
                    The command is supported.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.QueryStatusResult.ENABLED">
      <summary>
                    The command is enabled.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.QueryStatusResult.LATCHED">
      <summary>
                    The command is toggled on.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.QueryStatusResult.NINCHED">
      <summary>
                    The command is toggled off (the opposite of <see cref="F:Microsoft.VisualStudio.Package.QueryStatusResult.LATCHED" />).
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.QueryStatusResult.INVISIBLE">
      <summary>
                    The command is invisible.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ReferenceContainerNode">
      <summary>
                    This class is the container for all reference nodes in the project. It corresponds to the References node of a project in Solution Explorer.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" /> with the supplied project root.
                </summary>
      <param name="root">
                    The root of the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
      <summary>
                    Adds a reference of the appropriate type by using information from the supplied selector data structure.
                </summary>
      <returns>
                    A new instance of a <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" /> of the correct type. If the node could not be instantiated for any reason, returns null.
                </returns>
      <param name="selectorData">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)">
      <summary>
                    Determines whether this node can be deleted.
                </summary>
      <returns>false. 
                </returns>
      <param name="deleteOperation">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION" />, which represents the kind of deletion operation (removing from the project or deleting from disk).
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CanShowDefaultIcon">
      <summary>
                    Determines whether the default icon of a node may be shown.
                </summary>
      <returns>true if the <see cref="P:Microsoft.VisualStudio.Package.ReferenceContainerNode.VirtualNodeName" /> of a node is not null or empty; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceContainerNode.Caption">
      <summary>
                    Gets the caption (the display name) of this node.
                </summary>
      <returns>
                    The localized name that corresponds to <see cref="T:Microsoft.VisualStudio.Package.SR.ReferencesNodeName" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CreateAssemblyReferenceNode(Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Creates an instance of a <see cref="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode" /> for the supplied project element.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode" />.
                </returns>
      <param name="element">
                    The project element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CreateAssemblyReferenceNode(System.String)">
      <summary>
                    Creates an instance of a <see cref="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode" /> for the supplied file name.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode" />.
                </returns>
      <param name="fileName">
                    The path of the file to use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Creates an instance of a <see cref="T:Microsoft.VisualStudio.Package.ComReferenceNode" /> that has the supplied project element.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ComReferenceNode" />.
                </returns>
      <param name="reference">
                    The project element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
      <summary>
                    Creates a new instance of a <see cref="T:Microsoft.VisualStudio.Package.ComReferenceNode" /> by using the supplied selector data structure.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ComReferenceNode" />.
                </returns>
      <param name="selectorData">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CreateFileComponent(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
      <summary>
                    Creates a new instance of a <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" /> of the appropriate type, based on the supplied selector data.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode" />, or a <see cref="T:Microsoft.VisualStudio.Package.ComReferenceNode" />, or null, if the file does not exist or the node could not be created.
                </returns>
      <param name="selectorData">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Creates a new instance of a <see cref="T:Microsoft.VisualStudio.Package.ProjectReferenceNode" /> that has the supplied project element.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectReferenceNode" /> if one was constructed; otherwise, null.
                </returns>
      <param name="element">
                    The project element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
      <summary>
                    Creates a new instance of a <see cref="T:Microsoft.VisualStudio.Package.ProjectReferenceNode" /> by using the supplied selector data structure.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectReferenceNode" /> if one was created by using the selector data; otherwise, null. 
                </returns>
      <param name="selectorData">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CreateReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.CreateReferenceNode(System.String,Microsoft.VisualStudio.Package.ProjectElement)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.EnumReferences">
      <summary>
                    Constructs a list of all the reference nodes contained in this node.
                </summary>
      <returns>
                    A list of type <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" /> of all the contained reference nodes.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.ExcludeFromProject">
      <summary>
                    Always returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    This method handles the supplied commands for this node.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" /> if the project manager is closed, or if the command is not supported. Otherwise, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> or an error code if one of the executed commands returned an error code.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="nCmdexecopt">
                    Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, which describe how the object should execute the command.
                </param>
      <param name="pvaIn">
                    Pointer to a VARIANTARG structure that contains input arguments. Can be null.
                </param>
      <param name="pvaOut">
                    Pointer to a VARIANTARG structure that contains command output. Can be null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.GetAutomationObject">
      <summary>
                    Gets the automation object that is associated with this node.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.Automation.OAReferenceFolderItem" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.GetEditLabel">
      <summary>
                    Returns null in all cases.
                </summary>
      <returns>null. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.GetIconHandle(System.Boolean)">
      <summary>
                    Gets a handle to the icon that corresponds to this node.
                </summary>
      <returns>
                    If <paramref name="open" /> is true, the icon that corresponds to <see cref="T:Microsoft.VisualStudio.Package.ProjectNode.ImageName.OpenReferenceFolder" />; otherwise, the icon that corresponds to <see cref="T:Microsoft.VisualStudio.Package.ProjectNode.ImageName.ReferenceFolder" />.
                </returns>
      <param name="open">
                     If true, the node is open.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceContainerNode.ItemTypeGuid">
      <summary>
                    Gets the item type of this node.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.VSConstants.GUID_ItemType_VirtualFolder" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.LoadReferencesFromBuildProject(Microsoft.Build.BuildEngine.Project)">
      <summary>
                    Adds references to this node from the supplied <see cref="T:Microsoft.Build.BuildEngine.Project" />.
                </summary>
      <param name="buildProject">
                    The build project in which to find the references.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceContainerNode.MenuCommandId">
      <summary>
                    Gets the menu command ID for this node.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_REFERENCEROOT" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.PrepareSelectedNodesForClipBoard">
      <summary>
                    Returns null in all cases.
                </summary>
      <returns>null in all cases.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceContainerNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Package.QueryStatusResult@)">
      <summary>
                    Handles the execution of the given command on this node.
                </summary>
      <returns>
                    If the command is supported, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; if it is not supported, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" /></returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="pCmdText">
                    A pointer to a structure to return name and/or status information.
                </param>
      <param name="result">
                    The result of the command.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceContainerNode.SortPriority">
      <summary>
                    Gets the default sort order of this node.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.DefaultSortOrderNode.ReferenceContainerNode" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceContainerNode.SupportedReferenceTypes">
      <summary>
                    Gets the types of reference that are supported by this node.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectFileConstants.ProjectReference" />, <see cref="T:Microsoft.VisualStudio.Package.ProjectFileConstants.Reference" />, and <see cref="T:Microsoft.VisualStudio.Package.ProjectFileConstants.COMReference" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceContainerNode.Url">
      <summary>
                    Gets the name of this node.
                </summary>
      <returns>
        <see cref="P:Microsoft.VisualStudio.Package.ReferenceContainerNode.VirtualNodeName" />, which is always "References".
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ReferenceNode">
      <summary>
                    Represents the project references (assemblies, COM components, referenced projects) in the project hierarchy. <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" /> is responsible for creating all kinds of reference nodes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" /> for the supplied project root.
                </summary>
      <param name="root">
                     The root of the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.#ctor(Microsoft.VisualStudio.Package.ProjectNode,Microsoft.VisualStudio.Package.ProjectElement)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" /> for the supplied project root and the supplied project element, which represents the build element for the file.
                </summary>
      <param name="root">
                    The project root.
                </param>
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.AddReference">
      <summary>
                    Adds a reference to the project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.BindReferenceData">
      <summary>
                    Links the reference node to the project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.CanAddReference(Microsoft.VisualStudio.Package.ReferenceNode.CannotAddReferenceErrorMessage@)">
      <summary>
                    Determines whether a reference can be added.
                </summary>
      <returns>
                    By default, returns false if the reference has already been added; otherwise, true. 
                </returns>
      <param name="errorHandler">
                    The delegate that handles the error message.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)">
      <summary>
                    Determines whether a node can be deleted in the supplied manner.
                </summary>
      <returns>
                    By default, returns true if the option is <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION.DELITEMOP_RemoveFromProject" />, false if it is <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION.DELITEMOP_DeleteFromStorage" />.
                </returns>
      <param name="deleteOperation">
                    The way in which the node can be deleted (delete from disk/remove from project).
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceNode.Caption">
      <summary>
                    Gets the caption (the display name) of the node.
                </summary>
      <returns>
                    By default, returns an empty string. Implementations should return the name of the associated document.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.CreatePropertiesObject"></member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.ExcludeFromProject">
      <summary>
                    Excludes a node from the project.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />, because references cannot be excluded from projects.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
                    Executes the supplied command on this node.
                </summary>
      <returns>
                    If the command is not supported, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the command succeeded; otherwise, returns the error code that is returned by the command.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="nCmdexecopt">
                    Values are taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration and describe how the object should execute the command.
                </param>
      <param name="pvaIn">
                    Pointer to a VARIANTARG structure that contains input arguments. Can be null.
                </param>
      <param name="pvaOut">
                    Pointer to a VARIANTARG structure to receive command output. Can be null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.GetAutomationObject">
      <summary>
                    Gets the automation object that is associated with the node.
                </summary>
      <returns>
                    Returns <see cref="T:Microsoft.VisualStudio.Package.Automation.OARreferenceItem" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.GetEditLabel">
      <summary>
                    Gets the (editable) name of the node.
                </summary>
      <returns>
                    Returns null, because the names of reference nodes cannot be edited.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.GetIconHandle(System.Boolean)">
      <summary>
                    Gets the appropriate icon handle for this node.
                </summary>
      <returns>
                    A <see cref="T:System.IntPtr" /> to the appropriate icon.
                </returns>
      <param name="open">true if the reference is open; false if it is closed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.GetMkDocument">
      <summary>
                    Gets the absolute path of the node.
                </summary>
      <returns>
                    Returns the absolute path of the node.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.IsAlreadyAdded">
      <summary>
                    Determines whether the reference has already been added.
                </summary>
      <returns>
                    Returns true if there is a reference in the reference container of the project that has the same path; otherwise, returns false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceNode.ItemTypeGuid">
      <summary>
                    Gets the GUID of the item type for a reference node.
                </summary>
      <returns>
                    By default, returns <see cref="M:System.Guid.Empty" />. Implementations should supply the item type GUID from <see cref="T:Microsoft.VisualStudio.VSConstants" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceNode.MenuCommandId">
      <summary>
                    Gets the context menu command ID that is associated with this node.
                </summary>
      <returns>
                    By default, returns <see cref="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_REFERENCE" />. Implementations should supply the appropriate value.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.PrepareSelectedNodesForClipBoard">
      <summary>
                    By converting a selection to a string, prepares it for cutting, copying, or dragging.
                </summary>
      <returns>
                    Always returns null; reference nodes may not be cut, copied, or dragged.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Package.QueryStatusResult@)">
      <summary>
                    Gets the status of the supplied command for this node.
                </summary>
      <returns>
                    If the command group is not supported, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_UNKNOWNGROUP" />. If the command is not supported, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />. If the command is supported, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="cmdGroup"></param>
      <param name="cmd">
                    The ID of the command.
                </param>
      <param name="pCmdText">
                    Pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXTF" /> structure to return the name and/or status information of a single command. Can be null to indicate that the caller does not require this information.
                </param>
      <param name="result">
                    The result of the command.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.ResolveReference">
      <summary>
                    When overridden by a derived class, finds the full path and other information that pertains to the reference.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNode.ShowObjectBrowser">
      <summary>
                    Displays the Object Browser and navigates to the current node.
                </summary>
      <returns>
                    If the absolute path of this node is null or an empty string, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />. If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns the error code that is returned by one of the methods called.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceNode.Url">
      <summary>
                    The absolute path of the node.
                </summary>
      <returns>
                    By default, returns the empty string. Implementations should return the appropriate path.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ReferenceNode.CannotAddReferenceErrorMessage">
      <summary>
                    Handles the error message when the reference cannot be added.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ReferenceNodeProperties">
      <summary>
                    Defines the properties specific to reference nodes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNodeProperties.#ctor(Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ReferenceNodeProperties" /> for the specified hierarchy node.
                </summary>
      <param name="node">
                    The associated <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceNodeProperties.CopyToLocal">
      <summary>
                    Gets or sets whether or not the reference's file should be copied to a local directory.
                </summary>
      <returns>true if the file's Private property is set to true or is not set, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceNodeProperties.FullPath"></member>
    <member name="M:Microsoft.VisualStudio.Package.ReferenceNodeProperties.GetClassName">
      <summary>
                    Gets the class name of <see cref="T:Microsoft.VisualStudio.Package.ReferenceNodeProperties" />.
                </summary>
      <returns>
                    The localized version of the string "ReferenceProperties".
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReferenceNodeProperties.Name">
      <summary>
                    Gets the name of the properties.
                </summary>
      <returns>
                    The display name of the associated hierarchy node.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ReplaceBetweenPairToken">
      <summary>
                    Represents the token that is to be replaced between a pair of markers.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReplaceBetweenPairToken.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ReplaceBetweenPairToken" /> for the specified replacement string and markers.
                </summary>
      <param name="tokenid">
                    The ID of this token.
                </param>
      <param name="blockStart">
                    The start of the token.
                </param>
      <param name="blockEnd">
                    The end of the token.
                </param>
      <param name="replacement"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReplaceBetweenPairToken.TokenEnd">
      <summary>
                    Gets the end token.
                </summary>
      <returns>
                    The end token.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReplaceBetweenPairToken.TokenIdentifier">
      <summary>
                    Gets the token ID.
                </summary>
      <returns>
                    The token ID.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReplaceBetweenPairToken.TokenReplacement">
      <summary>
                    Gets the replacement string.
                </summary>
      <returns>
                    The replacement string.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReplaceBetweenPairToken.TokenStart">
      <summary>
                    Gets the start token.
                </summary>
      <returns>
                    The start token.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ReplacePairToken">
      <summary>
                    Represents a token that is to be replaced.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ReplacePairToken.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.ReplacePairToken" /> for the specified token string and replacement string.
                </summary>
      <param name="token"></param>
      <param name="replacement"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReplacePairToken.Replacement">
      <summary>
                    Gets the replacement string.
                </summary>
      <returns>
                    The replacement string.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ReplacePairToken.Token">
      <summary>
                    Gets the token string.
                </summary>
      <returns>
                    The token string.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.SelectionListener"></member>
    <member name="M:Microsoft.VisualStudio.Package.SelectionListener.#ctor(Microsoft.VisualStudio.Shell.ServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SelectionListener.Dispose">
      <summary>
                    Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Package.SelectionListener" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SelectionListener.Dispose(System.Boolean)">
      <param name="disposing"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SelectionListener.EventsCookie"></member>
    <member name="M:Microsoft.VisualStudio.Package.SelectionListener.Init"></member>
    <member name="M:Microsoft.VisualStudio.Package.SelectionListener.OnCmdUIContextChanged(System.UInt32,System.Int32)">
      <param name="dwCmdUICookie"></param>
      <param name="fActive"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SelectionListener.OnElementValueChanged(System.UInt32,System.Object,System.Object)">
      <param name="elementid"></param>
      <param name="varValueOld"></param>
      <param name="varValueNew"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SelectionListener.OnSelectionChanged(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)">
      <param name="pHierOld"></param>
      <param name="itemidOld"></param>
      <param name="pMISOld"></param>
      <param name="pSCOld"></param>
      <param name="pHierNew"></param>
      <param name="itemidNew"></param>
      <param name="pMISNew"></param>
      <param name="pSCNew"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SelectionListener.SelectionMonitor"></member>
    <member name="P:Microsoft.VisualStudio.Package.SelectionListener.ServiceProvider"></member>
    <member name="T:Microsoft.VisualStudio.Package.SettingsPage">
      <summary>
                    Base class for property pages.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.SettingsPage" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.Activate(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)">
      <summary>
                    Creates the dialog box for the property page (without a frame, caption, or system menu/controls) with the supplied parent window and positioning rectangle. 
                </summary>
      <param name="parent"></param>
      <param name="pRect">
                    A <see cref="T:Microsoft.VisualStudio.OLE.Interop.RECT" /> structure containing the positioning information for the dialog box.
                </param>
      <param name="bModal">
                    If true, the dialog box frame is modal, otherwise it is modeless.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.Apply">
      <summary>
                    Applies the changes made to the page if it is dirty.
                </summary>
      <returns>
                    If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.ApplyChanges">
      <summary>
                    Applies to the project the changes set in this property page.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.BindProperties">
      <summary>
                    Populates the property page with known values.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.Deactivate">
      <summary>
                    Destroys the window created with <see cref="M:Microsoft.VisualStudio.Package.SettingsPage.Activate(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.GetConfigProperty(System.String)">
      <summary>
                    Gets the supplied property from the active configuration.
                </summary>
      <returns>
                    The value of the specified property.
                </returns>
      <param name="propertyName">
                     The name of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.GetPageInfo(Microsoft.VisualStudio.OLE.Interop.PROPPAGEINFO[])">
      <summary>
                    Gets information about the property page.
                </summary>
      <param name="arrInfo">
                    An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.PROPPAGEINFO" /> structures.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.GetProjectConfigurations">
      <summary>
                    Gets the project configurations associated with the property page.
                </summary>
      <returns>
                    An array of <see cref="T:Microsoft.VisualStudio.Package.ProjectConfig" /> objects.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.GetProperty(System.String)">
      <summary>
                    Gets the value of a global property.
                </summary>
      <returns>
                    The value of the specified property.
                </returns>
      <param name="propertyName">
                     The name of the property to get.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.GetTypedConfigProperty(System.String,System.Type)">
      <summary>
                    Gets the value of a property of the supplied type from the active configuration.
                </summary>
      <returns>
                    An object representing a property value of the supplied type.
                </returns>
      <param name="name">
                    The name of the property.
                </param>
      <param name="type">
                    The type of the property value.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.GetTypedProperty(System.String,System.Type)">
      <summary>
                    Gets the value of a global property of the supplied type.
                </summary>
      <returns>
                    An object representing a property value of the supplied type.
                </returns>
      <param name="name">
                    The name of the property.
                </param>
      <param name="type">
                    The type of the property value.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SettingsPage.Grid">
      <summary>
                    Gets the property grid associated with the property page.
                </summary>
      <returns>
                    Returns <see cref="T:Microsoft.VisualStudio.Designer.Interfaces.IVSMDPropertyGrid" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.Help(System.String)">
      <summary>
                    Shows the property pages Help page in response to a user request.
                </summary>
      <param name="helpDir">
                     The path to the Help page.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SettingsPage.IsDirty">
      <summary>
                    Gets or sets whether the page has been modified but not saved.
                </summary>
      <returns>
                    Set to true if the page is dirty.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.IsPageDirty">
      <summary>
                    Gets whether or not the page has been modified but not saved.
                </summary>
      <returns>
                    Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the page is dirty, otherwise <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.Move(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>
                    Repositions and resizes the property page dialog box according to the contents of the RECT structure.
                </summary>
      <param name="arrRect">
                     An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.RECT" /> structures with the position information.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SettingsPage.Name">
      <summary>
                    Gets or sets the name of the property page.
                </summary>
      <returns>
                    The name of the property page.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SettingsPage.ProjectMgr">
      <summary>
                    Gets the project associated with this page.
                </summary>
      <returns>
                    Returns <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.SetConfigProperty(System.String,System.String)">
      <summary>
                    Sets the configuration property of the supplied name to the supplied value.
                </summary>
      <param name="name"></param>
      <param name="value">
                    The value to set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.SetObjects(System.UInt32,System.Object[])">
      <summary>
                    Sets the supplied nodes with the appropriate values from the property page.
                </summary>
      <param name="count">
                    The number of nodes in the array.
                </param>
      <param name="punk">
                    An array of objects representing the nodes to be updated.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.SetPageSite(Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite)">
      <summary>
                    Initializes a property page and provides the property page object with the Initializes a property page and provides the property page object with the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite" /> interface through which the property page communicates with the property frame.
                </summary>
      <param name="theSite">
                    The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite" /> to use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.Show(System.UInt32)">
      <summary>
                    Makes the property page visible or invisible, according to the supplied command parameter.
                </summary>
      <param name="cmd">
                    The value that indicates whether or not to show the page. Possible values are SW_SHOW or SW_SHOWNORMAL to show and SW_HIDE to hide.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SettingsPage.ThePanel">
      <summary>
                    Gets the panel associated with the property page.
                </summary>
      <returns>
                    Returns <see cref="T:Windows.Forms.Panel" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>
                    Instructs the property page to process the keystroke described in <paramref name="pMsg" />.
                </summary>
      <returns>
                    Returns true if the property page can handle the keystroke, otherwise false.
                </returns>
      <param name="arrMsg">
                    An array of T:Microsoft.VisualStudio.OLE.Interop.MSG structures containing the keystroke.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SettingsPage.UpdateObjects">
      <summary>
                    Updates the objects known to the property page from the values set in the page.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.SingleFileGeneratorFactory"></member>
    <member name="M:Microsoft.VisualStudio.Package.SingleFileGeneratorFactory.#ctor(System.Guid,System.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Package.SingleFileGeneratorFactory.CreateGeneratorInstance(System.String,System.Int32@,System.Int32@,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.SingleFileGeneratorFactory.GetDefaultGenerator(System.String,System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.SingleFileGeneratorFactory.GetGeneratorInformation(System.String,System.Int32@,System.Int32@,System.Int32@,System.Guid@)"></member>
    <member name="P:Microsoft.VisualStudio.Package.SingleFileGeneratorFactory.ProjectGuid"></member>
    <member name="P:Microsoft.VisualStudio.Package.SingleFileGeneratorFactory.ServiceProvider"></member>
    <member name="T:Microsoft.VisualStudio.Package.SingleFileGeneratorNodeProperties"></member>
    <member name="M:Microsoft.VisualStudio.Package.SingleFileGeneratorNodeProperties.#ctor(Microsoft.VisualStudio.Package.HierarchyNode)"></member>
    <member name="F:Microsoft.VisualStudio.Package.SingleFileGeneratorNodeProperties._customTool"></member>
    <member name="F:Microsoft.VisualStudio.Package.SingleFileGeneratorNodeProperties._customToolNamespace"></member>
    <member name="P:Microsoft.VisualStudio.Package.SingleFileGeneratorNodeProperties.CustomTool"></member>
    <member name="P:Microsoft.VisualStudio.Package.SingleFileGeneratorNodeProperties.CustomToolNamespace"></member>
    <member name="T:Microsoft.VisualStudio.Package.SolutionListener">
      <summary>
                    The abstract class that listens to different modifications to the solution. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.SolutionListener" /> for the solution. 
                </summary>
      <param name="serviceProvider">
                    The <see cref="T:System.IServiceProvider" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.Dispose">
      <summary>
                    Disposes the resources of this solution listener.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.Dispose(System.Boolean)">
      <summary>
                    Disposes the resources of this solution listener.
                </summary>
      <param name="disposing">
                    If true, release all the resources.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SolutionListener.EventsCookie">
      <summary>
                    Gets the unique identifier used to unregister for events.
                </summary>
      <returns>
                    The identifier.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.Init">
      <summary>
                    Initializes the solution listener.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnAfterAsynchOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>
                    Raised after a project has been opened asynchronously.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The node that represents the project that was opened.
                </param>
      <param name="added">true if the project was added.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnAfterChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised after a project has been moved.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The node representing the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnAfterCloseSolution(System.Object)">
      <summary>
                    Raised after the solution has been closed.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="reserved">
                    Reserved for future use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnAfterClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised after closing all the nested projects owned by a parent hierarchy.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The parent project node.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised after the project is loaded.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="stubHierarchy">
                    The project node in the placeholder hierarchy for the unloaded project.
                </param>
      <param name="realHierarchy">
                    The project node in the actual hierarchy.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnAfterMergeSolution(System.Object)">
      <summary>
                    Raised after all projects have been merged into the open solution.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="pUnkReserved">
                    Reserved for future use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnAfterOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised after opening all nested projects.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The parent project node.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>
                    Raised after the project has been opened.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The hierarchy node of the project being opened.
                </param>
      <param name="added">true if the project has been added.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnAfterOpenSolution(System.Object,System.Int32)">
      <summary>
                    Raised after the solution has been opened.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="pUnkReserved">
                    Reserved for future use.
                </param>
      <param name="fNewSolution">true if the solution is being created, false if the solution was created previously or is being loaded.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnAfterRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised after the project has been renamed.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The hierarchy node of the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>
                    Raised before the project is closed.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The project node being closed.
                </param>
      <param name="removed">true if the project has been removed from the solution before it was closed, false if the project was removed from solution during solution close.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnBeforeCloseSolution(System.Object)">
      <summary>
                    Raised before the solution is closed.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="pUnkReserved">
                    Reserved for future use.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnBeforeClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised before the solution's subprojects are closed.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The parent project node.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnBeforeOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised before the solution's subprojects are opened.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The parent project node.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised before the project is unloaded.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="realHierarchy">
                    The open project node.
                </param>
      <param name="rtubHierarchy">
                    The project node in the placeholder hierarchy.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnQueryChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>
                    Raised to ask listening clients whether a project can be moved from one parent to another in the solution explorer.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The project node.
                </param>
      <param name="newParentHier">
                    The new parent node.
                </param>
      <param name="cancel">true if the client vetoed the reparentng of the project, false if the client approved the reparenting of the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)">
      <summary>
                    Raised to ask listening clients whether the project can be closed.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The project node.
                </param>
      <param name="removing">true if the project is being removed from the solution before the solution is closed, false if the project is being removed from the solution while the solution is being closed.
                </param>
      <param name="cancel">true if the client vetoed the closing of the project, false if the client approved the closing of the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnQueryCloseSolution(System.Object,System.Int32@)">
      <summary>
                    Raised to ask listening clients whether the solution can be closed.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="pUnkReserved">
                    Reserved for future use.
                </param>
      <param name="cancel">true if the client vetoed the closing of the project, false if the client approved the closing of the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListener.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>
                    Raised to ask listening clients whether the project can be unloaded.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="pRealHierarchy">
                    The current project node.
                </param>
      <param name="cancel">true if the client vetoed the closing of the project, false if the client approved the closing of the project.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SolutionListener.ServiceProvider">
      <summary>
                    Gets the service provider associated with the solution.
                </summary>
      <returns>
        <see cref="T:System.IServiceProvider." />
      </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SolutionListener.Solution">
      <summary>
                    Gets the solution.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.SolutionListenerForProjectOpen">
      <summary>
                    Monitors open project events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListenerForProjectOpen.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.SolutionListenerForProjectOpen" />.
                </summary>
      <param name="serviceProvider">
                    The package's <see cref="T:System.IServiceProvider" /> interface.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListenerForProjectOpen.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>
                    Fired after the project has been opened.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.
                </returns>
      <param name="hierarchy">
                    The project node.
                </param>
      <param name="added">
                    1 if the project is a new one, otherwise 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListenerForProjectOpen.OnAfterOpenSolution(System.Object,System.Int32)"></member>
    <member name="T:Microsoft.VisualStudio.Package.SolutionListenerForProjectReferenceUpdate">
      <summary>
                    Monitors the project for modifications to project references.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListenerForProjectReferenceUpdate.#ctor(System.IServiceProvider)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.SolutionListenerForProjectReferenceUpdate" /> for the supplied service provider.
                </summary>
      <param name="serviceProvider">
                    The <see cref="T:System.IServiceProvider" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListenerForProjectReferenceUpdate.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised to update the dangling reference on projects that contain this hierarchy as a project reference.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="stubHierarchy">
                    The project node in the placeholder hierarchy for the project before it is loaded.
                </param>
      <param name="realHierarchy">
                    The project node in the actual hierarchy.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListenerForProjectReferenceUpdate.OnAfterRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised to drop and re-add the renamed project.
                </summary>
      <returns>
                    If the hierarchy node is null, <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" />. If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, or an error code.
                </returns>
      <param name="hierarchy">
                    The project node to rename.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListenerForProjectReferenceUpdate.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>
                    Raised before the project is closed. It deletes the supplied project from the references of other projects in the solution, if it is found.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="hierarchy">
                    The project being closed.
                </param>
      <param name="removed">
                    If 0, do not remove this project from project references; otherwise, remove it.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SolutionListenerForProjectReferenceUpdate.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Raised to redraw the project references when a project is unloaded from the solution.
                </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.
                </returns>
      <param name="realHierarchy">
                    The open project node.
                </param>
      <param name="stubHierarchy">
                    The project node in the placeholder hierarchy.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TokenProcessor">
      <summary>
                    Manages tokens and handles token processing.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.#ctor">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.TokenProcessor" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.AddDelete(System.String)">
      <summary>
                    Adds a <see cref="T:Microsoft.VisualStudio.Package.DeleteToken" /> to the token list owned by this token processor.
                </summary>
      <param name="tokenToDelete">
                    The text to be deleted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.AddReplace(System.String,System.String)">
      <summary>
                    Adds a <see cref="T:Microsoft.VisualStudio.Package.ReplacePairToken" /> to the token list owned by this token processor.
                </summary>
      <param name="token">
                    The text that should be replaced.
                </param>
      <param name="replacement">
                    The replacement text.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.AddReplaceBetween(System.String,System.String,System.String,System.String)">
      <summary>
                    Adds a <see cref="T:Microsoft.VisualStudio.Package.ReplaceBetweenPairToken" /> to the token list owned by this token processor.
                </summary>
      <param name="tokenid">
                    The ID of the token to add.
                </param>
      <param name="tokenStart">
                    The start token.
                </param>
      <param name="tokenEnd">
                    The end token.
                </param>
      <param name="replacement">
                    The replacement text.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.DeleteTokens(System.String@,Microsoft.VisualStudio.Package.DeleteToken)">
      <summary>
                    Deletes the token from the text buffer.
                </summary>
      <param name="buffer">
                    The text buffer from which to delete the token.
                </param>
      <param name="tokenToDelete">
                    The <see cref="T:Microsoft.VisualStudio.Package.DeleteToken" /> to be deleted.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.GetFileNamespace(System.String,Microsoft.VisualStudio.Package.ProjectNode)">
      <summary>
                    Generates the namespace of the file.
                </summary>
      <returns>
                    The namespace of the file.
                </returns>
      <param name="fileFullPath">
                    The absolute path of the file.
                </param>
      <param name="node">
                    The <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" /> representing the project to which this file belongs.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.GuidToForm1(System.Guid)">
      <summary>
                    Convert a GUID to a string with the format (0x01020304, 0x0506, 0x0708, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10).
                </summary>
      <returns>
                    The string of format (0x01020304, 0x0506, 0x0708, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10) that is produced from the GUID.
                </returns>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.IsValidIdentifierChar(System.Char)">
      <summary>
                    Determines whether or not a given character can be used in an identifier.
                </summary>
      <returns>true if the character is valid, otherwise false.
                </returns>
      <param name="c">
                    The character to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.IsValidIdentifierStartChar(System.Char)">
      <summary>
                    Determines whether the character is a valid start character.
                </summary>
      <returns>true if the character is valid and non-numeric, otherwise false.
                </returns>
      <param name="c">
                    The character to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.ReplaceBetweenTokens(System.String@,Microsoft.VisualStudio.Package.ReplaceBetweenPairToken)">
      <summary>
                    Replaces the text in the buffer with the text supplied in the replacement token.
                </summary>
      <param name="buffer">
                    The text buffer.
                </param>
      <param name="rpBetweenToken">
                    The <see cref="T:Microsoft.VisualStudio.Package.ReplaceBetweenPairToken" /> to replace.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.ReplaceTokens(System.String@,Microsoft.VisualStudio.Package.ReplacePairToken)">
      <summary>
                    Replaces the text in the buffer with the text supplied in the replacement token.
                </summary>
      <param name="buffer">
                    The text buffer.
                </param>
      <param name="tokenToReplace">
                    The <see cref="T:Microsoft.VisualStudio.Package.ReplacePairToke" />n to replace.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.Reset"></member>
    <member name="M:Microsoft.VisualStudio.Package.TokenProcessor.UntokenFile(System.String,System.String)">
      <summary>
                    Replaces all the text in the supplied source file with the tokens in the token list owned by this token processor and writes out the resulting text to the destination file.
                </summary>
      <param name="source">
                    The absolute path of the source file.
                </param>
      <param name="destination">
                    The absolute path of the destination file.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TokenReplaceType">
      <summary>
                    Defines the kind of token to be replaced.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenReplaceType.ReplaceString">
      <summary>
                    The token replaces a string.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenReplaceType.ReplaceNumber">
      <summary>
                    The token replaces a number of some type.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenReplaceType.ReplaceCode">
      <summary>
                    The token replaces code.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.UIHierarchyElement">
      <summary>
                    Defines the user interface (UI) type of the element.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.UIHierarchyElement.None">
      <summary>
                    The element is not a caption and not an icon.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.UIHierarchyElement.Icon">
      <summary>
                    The element is an icon. Represents <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IconIndex" />.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.UIHierarchyElement.SccState">
      <summary>
                    The element is a source code control state icon. Represents <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_StateIconIndex" />.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.UIHierarchyElement.Caption">
      <summary>
                    The element is a caption. Represents <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Caption" />.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.UIHierarchyUtilities"></member>
    <member name="M:Microsoft.VisualStudio.Package.UIHierarchyUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)"></member>
    <member name="T:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.#ctor(System.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.Dispose"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.OnAfterActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.OnBeforeActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)"></member>
    <member name="P:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.ServiceProvider"></member>
    <member name="P:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.SolutionBuildManager2"></member>
    <member name="P:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.SolutionBuildManager3"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.UpdateSolution_Begin(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.UpdateSolution_Cancel"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UpdateSolutionEventsListener.UpdateSolution_StartUpdate(System.Int32@)"></member>
    <member name="T:Microsoft.VisualStudio.Package.UserProjectSecurityChecker"></member>
    <member name="M:Microsoft.VisualStudio.Package.UserProjectSecurityChecker.#ctor(System.IServiceProvider,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UserProjectSecurityChecker.IsProjectSafeWithImports(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UserProjectSecurityChecker.IsProjectSafeWithItems(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UserProjectSecurityChecker.IsProjectSafeWithProperties(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.UserProjectSecurityChecker.IsProjectSafeWithTargets(System.String@)"></member>
    <member name="P:Microsoft.VisualStudio.Package.UserProjectSecurityChecker.MainProjectShim"></member>
    <member name="T:Microsoft.VisualStudio.Package.Utilities">
      <summary>
                    A collection of static utility and helper methods.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.ContainsInvalidFileNameChars(System.String)">
      <summary>
                    Determines whether a file name or path contains illegal characters.
                </summary>
      <returns>true if the name or path contains illegal characters; if it is valid, returns false.
                </returns>
      <param name="name">
                    The file name or path.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)">
      <summary>
                    Converts a string to an enumeration using a converter.
                </summary>
      <returns>
        <see cref="T:System.Nullable&lt;T&gt;" /> where <paramref name="T" /> is an enumeration.
                </returns>
      <param name="value">
                    The string to convert.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> of the string.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)">
      <summary>
                    Calls a converter to convert an enumeration to a specific type.
                </summary>
      <returns>
                    The converted type.
                </returns>
      <param name="value">
                    The enumeration to convert.
                </param>
      <param name="typeToConvert">
                    The type to which the enumeration should be converted.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> of the string.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.CreateCADWORD(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
      <summary>
                    Creates a <see cref="T:Microsoft.VisualStudio.OLE.Interop.CADWORD" /> from a list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags" />. Memory is allocated for the element. 
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.CADWORD" />.
                </returns>
      <param name="flags">
                    A list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.CreateCALPOLESTR(System.Collections.Generic.IList{System.String})">
      <summary>
                    Creates a <see cref="T:Microsoft.VisualStudio.OLE.Interop.CALPOLESTR" /> from a list of strings.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.CALPOLESTR" />.
                </returns>
      <param name="strings">
                    The list of strings.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.CreateSemicolonDelimitedListOfStringFromGuids(System.Guid[])">
      <summary>
                    Creates a semicolon-delimited list of strings. This can be used to provide the properties for <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSHPROPID_CfgPropertyPagesCLSIDList" />, <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSHPROPID_PropertyPagesCLSIDList" />, or <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSHPROPID_PriorityPropertyPagesCLSIDList" />.
                </summary>
      <returns>
                    A semicolon-delimited string.
                </returns>
      <param name="guids">
                    An array of GUIDs.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.GetImageList(System.IO.Stream)">
      <summary>
                    Creates an <see cref="T:System.Windows.Forms.ImageList" /> of 16x16 images with a background color of magenta by splitting the supplied <see cref="T:System.IO.Stream" />.
                </summary>
      <returns>
        <see cref="T:System.Windows.Forms.ImageList" />.
                </returns>
      <param name="imageStream">
                    The <see cref="T:System.IO.Stream" /> to split into images.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.GetImageList(System.Object)">
      <summary>
                    Creates an <see cref="T:System.Windows.Forms.ImageList" /> of 16x16 images by splitting the supplied bitmap or stream.
                </summary>
      <returns>
        <see cref="T:System.Windows.Forms.ImageList" />.
                </returns>
      <param name="imageListAsPointer">
                    Pointer to the bitmap.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.GetMsBuildPath(System.IServiceProvider)">
      <summary>
                    Gets the path of MSBuild from the current hive of registry.
                </summary>
      <returns>
                    The path of MSBuild.
                </returns>
      <param name="serviceProvider">
                    The <see cref="T:System.IServiceProvider" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.GetMsBuildPath(System.IServiceProvider,System.String)">
      <summary>
                    Gets the path for MSBuild from the registry under the current hive.
                </summary>
      <param name="serviceProvider">
                    The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> associated with the current hive.
                </param>
      <param name="version"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.GuidsArrayFromSemicolonDelimitedStringOfGuids(System.String)">
      <summary>
                    Gets an array of GUIDs from a semicolon-delimited string.
                </summary>
      <returns>
                    An array of GUIDs.
                </returns>
      <param name="guidList">
                    The semicolon-delimited string of GUIDs.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.IsFileNameInvalid(System.String)">
      <summary>
                    Determines whether the specified file name is invalid.
                </summary>
      <returns>true if the file name is invalid, false if it is valid.
                </returns>
      <param name="fileName">
                    The filename to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.IsInAutomationFunction(System.IServiceProvider)">
      <summary>
                    Determines whether an extensibility object is currently executing automation code.
                </summary>
      <returns>true if the extensibility object is executing automation code, otherwise false.
                </returns>
      <param name="serviceProvider">
                    The <see cref="T:System.IServiceProvider" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.IsSameComObject(System.Object,System.Object)">
      <summary>
                    Determines whether two objects represent the same COM object.
                </summary>
      <returns>true if the objects are the same COM object, otherwise false.
                </returns>
      <param name="obj1"></param>
      <param name="obj2"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.IsVisualStudioInDesignMode(System.IServiceProvider)">
      <summary>
                    Determines whether the design mode context is active.
                </summary>
      <returns>true if the design mode context is active, otherwise false.
                </returns>
      <param name="site">
                    The <see cref="T:System.IServiceProvider" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.RecursivelyCopyDirectory(System.String,System.String)">
      <summary>
                    Copies recursively from the source directory to the target (nonexistent) directory.
                </summary>
      <param name="source">
                    The path of the source directory.
                </param>
      <param name="target">
                    The target directory.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)">
      <summary>
                    Sets a string value from an enumeration.
                </summary>
      <returns>
                    The converted string.
                </returns>
      <param name="enumValue">
                    The enumeration value to convert.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> that the string should use.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Utilities.ValidateFileName(System.IServiceProvider,System.String)">
      <summary>
                    Validates a file path by validating all the parts of the path. If the file name is invalid, it throws an exception if the project is in automation; otherwise it shows a dialog box with the error message.
                </summary>
      <param name="serviceProvider">
                    The <see cref="T:System.IServiceProvider" />.
                </param>
      <param name="filePath">
                    The path to validate.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.VsMenus">
      <summary>
                    Makes menu commands and command sets available to managed package code.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.VsMenus.#ctor">
      <summary>
                    Initializes a new instance of this class.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.guidSHLMainMenu">
      <summary>
                    A commonly referenced command set.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.guidStandardCommandSet2K">
      <summary>
                    A commonly referenced command set.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.guidStandardCommandSet97">
      <summary>
                    A commonly referenced command set.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.guidVsUIHierarchyWindowCmds">
      <summary>
                    A commonly referenced command set.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.guidVSUISet">
      <summary>
                    A command set.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.guidVsVbaPkg">
      <summary>
                    An alias for CLSID_VsVbaPackage.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_CODEWIN">
      <summary>
                    A constant that defines the context menu of the Code Window.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_FOLDERNODE">
      <summary>
                    A constant that defines a Folder Node context menu.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_ITEMNODE">
      <summary>
                    A constant that defines a common Item Node context menu.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_NOCOMMANDS">
      <summary>
                    A constant that defines a context menu for no available commands.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_PROJNODE">
      <summary>
                    A constant that defines the context menu for the project node.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_REFERENCE">
      <summary>
                    A constant that defines the reference item context menu.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_REFERENCEROOT">
      <summary>
                    A constant that defines the reference root node context menu.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_XPROJ_MULTIITEM">
      <summary>
                    A constant that defines the context menu for multiple selections of different types.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.IDM_VS_CTXT_XPROJ_PROJITEM">
      <summary>
                    A constant that defines the context menu for multiple selections including the project node. 
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.VsMenus.VSCmdOptQueryParameterList">
      <summary>
                    The high order word value for the <paramref name="nCmdexecopt" /> parameter when querying parameter lists, for example <see cref="M:Microsoft.VisualStudio.Package.ViewFilter.QueryParameterList(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)" />.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.WindowFrameShowAction">
      <summary>
                    Defines the type of action to be taken in showing the window frame.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.WindowFrameShowAction.DontShow">
      <summary>
                    The frame should not be shown by the calling method (used to delegate showing the window to the called method).
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.WindowFrameShowAction.Show">
      <summary>
                    The frame should be displayed on top and activated.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.WindowFrameShowAction.ShowNoActivate">
      <summary>
                    The frame should be shown but not made the active window.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.WindowFrameShowAction.Hide">
      <summary>
                    The frame should be hidden.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.WrapperToolAttributeValue">
      <summary>
                    Specifies whether a COM interop assembly is a primary assembly or a local one.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.WrapperToolAttributeValue.Primary">
      <summary>
                    The assembly is a primary one.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.WrapperToolAttributeValue.TlbImp">
      <summary>
                    The assembly is a local one that needs to be generated.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference">
      <summary>
                    Represents an assembly reference.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.#ctor(Microsoft.VisualStudio.Package.AssemblyReferenceNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference" /> for the specified node.
                </summary>
      <param name="assemblyReference">
                    The associated <see cref="T:Microsoft.VisualStudio.Package.AssemblyReferenceNode" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.BuildNumber">
      <summary>
                    Gets the build number of the assembly.
                </summary>
      <returns>
                    The build number of the assembly.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.Culture">
      <summary>
                    Gets the language supported by the assembly.
                </summary>
      <returns>
                    The name of the <see cref="T:System.Globalization.CultureInfo" /> object associated with the assembly.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.Identity">
      <summary>
                    Gets the ID of the assembly.
                </summary>
      <returns>
                    The <see cref="P:System.Reflection.AssemblyName.FullName" /> of the assembly.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.MajorVersion">
      <summary>
                    Gets the major version of the assembly.
                </summary>
      <returns>
                    The major version number of the assembly.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.MinorVersion">
      <summary>
                    Gets the minor version of the assembly.
                </summary>
      <returns>
                    The minor version number of the assembly.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.Name">
      <summary>
                    Gets the name of the assembly.
                </summary>
      <returns>
                    The name of the assembly.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.PublicKeyToken"></member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.RevisionNumber">
      <summary>
                    Gets the revision number of the assembly.
                </summary>
      <returns>
                    The revision number of the assembly.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.StrongName">
      <summary>
                    Gets whether or not the assembly has a strong name.
                </summary>
      <returns>true if the assembly has a public key, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.Type">
      <summary>
                    Gets the type of the assembly.
                </summary>
      <returns>
        <see cref="T:VSLangProj.prjReferenceType" /> (assembly or COM component).
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAAssemblyReference.Version">
      <summary>
                    Gets the version number of the assembly.
                </summary>
      <returns>
                    The version number of the assembly.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OABuildManager"></member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OABuildManager.#ctor(Microsoft.VisualStudio.Package.ProjectNode)"></member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OABuildManager.BuildDesignTimeOutput(System.String)"></member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OABuildManager.ContainingProject"></member>
    <member name="E:Microsoft.VisualStudio.Package.Automation.OABuildManager.DesignTimeOutputDeleted"></member>
    <member name="E:Microsoft.VisualStudio.Package.Automation.OABuildManager.DesignTimeOutputDirty"></member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OABuildManager.DesignTimeOutputMonikers"></member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OABuildManager.DTE"></member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OABuildManager.Parent"></member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAComReference">
      <summary>
                    Represents a reference to a COM component.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAComReference.#ctor(Microsoft.VisualStudio.Package.ComReferenceNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAComReference" /> for the specified node.
                </summary>
      <param name="comReference">
                    The associated <see cref="T:Microsoft.VisualStudio.Package.ComReferenceNode" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAComReference.Culture">
      <summary>
                    Gets the language and culture supported by this COM component.
                </summary>
      <returns>
                    The name of the component's locale ID.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAComReference.Identity">
      <summary>
                    Gets the ID of the COM component.
                </summary>
      <returns>
                    The GUID of the component plus its version number.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAComReference.MajorVersion">
      <summary>
                    Gets the major version number of the COM component.
                </summary>
      <returns>
                    The major version number of the component.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAComReference.MinorVersion">
      <summary>
                    Gets the minor version number of the COM component.
                </summary>
      <returns>
                    The minor version number of the COM component.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAComReference.Name">
      <summary>
                    Gets the name of the COM component.
                </summary>
      <returns>
                    Gets the display name of the component.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAComReference.Type">
      <summary>
                    Gets the type of reference this is.
                </summary>
      <returns>
        <see cref="F:VSLangProj.prjReferenceType.prjReferenceTypeActiveX" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAComReference.Version">
      <summary>
                    Gets the version number of the COM component.
                </summary>
      <returns>
                    The version number of the COM component.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAFileItem">
      <summary>
                    Represents a file in the project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAFileItem.#ctor(Microsoft.VisualStudio.Package.Automation.OAProject,Microsoft.VisualStudio.Package.FileNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAFileItem" /> for the specified project and node.
                </summary>
      <param name="project"></param>
      <param name="node">
                    The <see cref="T:Microsoft.VisualStudio.Package.FileNode" /> that the item represents.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAFileItem.Document">
      <summary>
                    Gets the document that this file item represents.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Document" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAFileItem.get_IsOpen(System.String)">
      <summary>
                    Gets whether or not the file is open in the specified view.
                </summary>
      <returns>true if the file is displayed in the given view, otherwise false.
                </returns>
      <param name="viewKind">
                    The kind of view specified by a <paramref name="vsViewKindx" /> value from <see cref="T:Microsoft.VisualStudio.VSConstants" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAFileItem.IsDirty">
      <summary>
                    Gets whether or not the item is dirty.
                </summary>
      <returns>true if the item is dirty, otherwise false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAFileItem.Open(System.String)">
      <summary>
                    Opens this file item in the specified view.
                </summary>
      <returns>
                    The opened <see cref="T:EnvDTE.Window" />.
                </returns>
      <param name="viewKind"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAFileItem.ProjectItems">
      <summary>
                    Gets the project items associated with this file node.
                </summary>
      <returns>
                    If the file can have child items, returns the owned <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProjectItems" />, otherwise returns null.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAFileItem.Save(System.String)">
      <summary>
                    Saves the item with the specified file name.
                </summary>
      <param name="fileName">
                    The name of the file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAFileItem.SaveAs(System.String)">
      <summary>
                    Saves the file with the specified file name.
                </summary>
      <returns>true if the save operation succeeded, otherwise false.
                </returns>
      <param name="fileName">
                    The name of the file.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAFolderItem">
      <summary>
                    Represents a folder in the project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAFolderItem.#ctor(Microsoft.VisualStudio.Package.Automation.OAProject,Microsoft.VisualStudio.Package.FolderNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAFolderItem" /> for the specified project and hierarchy node.
                </summary>
      <param name="project"></param>
      <param name="node">
                    The <see cref="T:Microsoft.VisualStudio.Package.FolderNode" /> this item represents.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAFolderItem.Collection">
      <summary>
                    Gets the project items associated with this folder.
                </summary>
      <returns>
        <see cref="T:EnvDTE.ProjectItems" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAFolderItem.ProjectItems">
      <summary>
                    Gets the project items associated with this folder.
                </summary>
      <returns>
        <see cref="T:EnvDTE.ProjectItems" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems">
      <summary>
                    Represents a collection of project items that can be enumerated. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.Package.Automation.OAProject,Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems" /> for the specified project and node.
                </summary>
      <param name="project"></param>
      <param name="nodeWithItems">
                    The <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> that owns the items.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.Package.Automation.OAProject,System.Collections.Generic.IList{EnvDTE.ProjectItem},Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems" /> for the specified project, list of project items, and node.
                </summary>
      <param name="project"></param>
      <param name="items">
                    A list of project items.
                </param>
      <param name="nodeWithItems">
                    The <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> that owns the items.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.AddFolder(System.String,System.String)">
      <summary>
                    Creates a new folder in the Solution Explorer.
                </summary>
      <returns>
                    When implemented by derived classes, the newly-created <see cref="T:EnvDTE.ProjectItem" />. 
                </returns>
      <param name="name">
                    The name of the folder.
                </param>
      <param name="kind">
                    The kind of folder. The available values are based on the <see cref="T:EnvDTE.Constants" /><paramref name="vsProjectItemsKindx" /> and <paramref name="vsProjectItemKindx" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.AddFromDirectory(System.String)">
      <summary>
                    Adds one or more <see cref="T:EnvDTE.ProjectItem" /> objects from a directory to the <see cref="T:EnvDTE.ProjectItems" /> collection.
                </summary>
      <returns>
                    The newly-created <see cref="T:EnvDTE.ProjectItem" />.
                </returns>
      <param name="directory">
                    The path of the directory containing the project items.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.AddFromFile(System.String)">
      <summary>
                    Adds a project item from a file that exists in a project directory structure.
                </summary>
      <returns>
                    When implemented by derived classes, the newly-created <see cref="T:EnvDTE.ProjectItem" />.
                </returns>
      <param name="fileName">
                    The absolute path of the file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.AddFromFileCopy(System.String)">
      <summary>
                    Copies a source file and adds it to the project.
                </summary>
      <returns>
                    When implemented by derived classes, the newly-created <see cref="T:EnvDTE.ProjectItem" />.
                </returns>
      <param name="filePath">
                    The absolute path of the file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.AddFromTemplate(System.String,System.String)">
      <summary>
                    Creates a new project item from an existing item template file and adds it to the project.
                </summary>
      <returns>
                    When implemented by derived classes, the newly-created <see cref="T:EnvDTE.ProjectItem" />.
                </returns>
      <param name="fileName">
                    The absolute path of the template file.
                </param>
      <param name="name">
                    The name of the project item.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.ContainingProject">
      <summary>
                    Gets the project that owns these project items.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Project" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.Count">
      <summary>
                    Gets the number of project items in the collection.
                </summary>
      <returns>
                    The number of items in the collection.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.DTE">
      <summary>
                    Gets the top-level automation object.
                </summary>
      <returns>
        <see cref="T:EnvDTE.DTE" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.GetEnumerator">
      <summary>
                    Gets an enumerator for this project item collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object if there are items in the collection, otherwise null.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.GetListOfProjectItems">
      <summary>
                    Gets a list of items associated with the current node.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IList&lt;T&gt;" /> of project items.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.Item(System.Object)">
      <summary>
                    Gets the project item with the specified index.
                </summary>
      <returns>
        <see cref="T:EnvDTE.ProjectItem" />.
                </returns>
      <param name="index">
                    The index at which to get the project item.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.Kind">
      <summary>
                    Gets the kind of project items.
                </summary>
      <returns>
                    When implemented by derived classes, returns a member of the <see cref="T:EnvDTE.vsCMElement" /> enumeration.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANavigableProjectItems.Parent">
      <summary>
                    Gets the parent of this collection.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> that owns the items.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OANestedProjectItem">
      <summary>
                    Represents a nested project in the solution.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANestedProjectItem.#ctor(Microsoft.VisualStudio.Package.Automation.OAProject,Microsoft.VisualStudio.Package.NestedProjectNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OANestedProjectItem" /> for the specified project and node.
                </summary>
      <param name="project"></param>
      <param name="node">
                    The <see cref="T:Microsoft.VisualStudio.Package.NestedProjectNode" /> which this item represents.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANestedProjectItem.ProjectItems">
      <summary>
                    Gets the collection of project items in the nested project.
                </summary>
      <returns>
        <see cref="T:EnvDTE.ProjectItems" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANestedProjectItem.SubProject">
      <summary>
                    Gets the nested project.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Project" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OANullProperty">
      <summary>
                    Defines a null object that is returned instead of null. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANullProperty.#ctor(Microsoft.VisualStudio.Package.Automation.OAProperties)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OANullProperty" /> for the specified instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperties" />.
                </summary>
      <param name="parent">
                    The parent <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperties" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANullProperty.Application">
      <summary>
                    Gets the application object.
                </summary>
      <returns>
                    When implemented by derived classes, the automation object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANullProperty.Collection">
      <summary>
                    Gets the collection to which this property belongs.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Properties" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANullProperty.DTE">
      <summary>
                    Gets the top-level automation object.
                </summary>
      <returns>
                    When implemented by derived classes, <see cref="T:EnvDTE.DTE" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANullProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)">
      <summary>
                    Returns one element of a list.
                </summary>
      <returns>
                    An object that represents the value.
                </returns>
      <param name="index1">
                    The index of the item to display.
                </param>
      <param name="index2">
                    The index of the item to display.
                </param>
      <param name="index3">
                    The index of the item to display.
                </param>
      <param name="index4">
                    The index of the item to display.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANullProperty.let_Value(System.Object)">
      <summary>
                    Sets a property value.
                </summary>
      <param name="value">
                    The value to set.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANullProperty.Name">
      <summary>
                    Gets the name of the property.
                </summary>
      <returns>
                    When implemented by derived classes, the name of the property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANullProperty.NumIndices">
      <summary>
                    Returns the number of indices required to access the value.
                </summary>
      <returns>
                    When implemented by derived classes, the number of indices required to access the value.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANullProperty.Object">
      <summary>
                    Gets or sets the automation object of this property.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.NodeProperties" /> of the associated <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperties" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANullProperty.Parent">
      <summary>
                    Gets the parent properties object.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Properties" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OANullProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)">
      <summary>
                    Sets indexed values in a list.
                </summary>
      <param name="index1">
                    Index of the item in the list to set.
                </param>
      <param name="index2">
                    Index of the item in the list to set.
                </param>
      <param name="index3">
                    Index of the item in the list to set.
                </param>
      <param name="index4">
                    Index of the item in the list to set.
                </param>
      <param name="value">
                    Index of the item in the list to set.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OANullProperty.Value">
      <summary>
                    Gets or sets the value of this property.
                </summary>
      <returns>
                    When implemented by derived classes, the value of the property.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAProject">
      <summary>
                    Represents the automation-friendly version of a Visual Studio project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProject.#ctor(Microsoft.VisualStudio.Package.ProjectNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProject" /> for the specified project node.
                </summary>
      <param name="project">
        <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.CodeModel">
      <summary>
                    When implemented in a derived class, gets the <see cref="T:EnvDTE.CodeModel" /> object for the project.
                </summary>
      <returns>
                    The <see cref="T:EnvDTE.CodeModel" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.Collection">
      <summary>
                    When implemented in a derived class, gets the <see cref="T:EnvDTE.Projects" /> collection containing the <see cref="T:EnvDTE.Project" /> object supporting this property.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Projects" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.ConfigurationManager">
      <summary>
                    Gets the project's <see cref="T:EnvDTE.ConfigurationManager" />.
                </summary>
      <returns>
        <see cref="T:EnvDTE.ConfigurationManager" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProject.Delete">
      <summary>
                    Removes the project from the current solution.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.DTE">
      <summary>
                    Gets the top-level extensibility object.
                </summary>
      <returns>
        <see cref="T:EnvDTE.DTE" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.ExtenderCATID">
      <summary>
                    When implemented in a derived class, gets the extender category ID (CATID) for the object.
                </summary>
      <returns>
                    The extender CATID.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.ExtenderNames">
      <summary>
                    When implemented in a derived class, gets a list of available extenders for the object.
                </summary>
      <returns>
                    A list of available extenders for the object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.FileName">
      <summary>
                    Gets the project file name. Microsoft Internal Use Only.
                </summary>
      <returns>
                    The project file name.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.FullName">
      <summary>
                    Returns the full path and name of the project file.
                </summary>
      <returns>
                    The project file path and name.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProject.get_Extender(System.String)">
      <summary>
                    When overridden in a derived class, gets the automation extender object.
                </summary>
      <returns>
                    The extender object.
                </returns>
      <param name="name">
                    The name of the automation extender.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.Globals">
      <summary>
                    When implemented in a derived class, gets the globals object, which contains add-in values that may be saved in the solution file, the project file, or the user's profile data.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Globals" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.IsDirty">
      <summary>
                    Gets or sets whether the project is dirty. Microsoft Internal Use Only.
                </summary>
      <returns>true if the project is dirty, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.Kind">
      <summary>
                    Gets the GUID for the type of object.
                </summary>
      <returns>
                    The project GUID string.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.Name">
      <summary>
                    Gets or sets the name of the project.
                </summary>
      <returns>
                    The name of the project.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProject.NotifyPropertiesDelete">
      <summary>
                    Microsoft Internal Use Only.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.Object">
      <summary>
                    Gets an interface or object that can be accessed by name at runtime.
                </summary>
      <returns>
        <see cref="P:EnvDTE.Project.Object" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.ParentProjectItem">
      <summary>
                    When implemented in a derived class, gets the project item for the nested project.
                </summary>
      <returns>
        <see cref="T:EnvDTE.ProjectItem" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.Project">
      <summary>
                    Gets the associated project.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.ProjectItems">
      <summary>
                    Gets the collection of project items for this project.
                </summary>
      <returns>
        <see cref="T:EnvDTE.ProjectItems" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.Properties">
      <summary>
                    Gets a collection of all the properties that pertain the project.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Properties" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProject.Save(System.String)">
      <summary>
                    Saves the project.
                </summary>
      <param name="fileName"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProject.SaveAs(System.String)">
      <summary>
                    Saves the project item to a given file name.
                </summary>
      <param name="fileName"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.Saved">
      <summary>
                    Gets or sets whether the project has been modified since it was last saved or opened.
                </summary>
      <returns>true if the object has not been modified since it was last saved or opened, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProject.UniqueName">
      <summary>
                    Gets the name of the project as a relative path from the solution directory to the project file.
                </summary>
      <returns>
                    The relative path from the solution directory to the project file if the project is open, otherwise null.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1">
      <summary>
                    Represents an item in the project (file, folder, or reference). 
                </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.#ctor(Microsoft.VisualStudio.Package.Automation.OAProject,`0)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1" /> for the supplied project and hierarchy node.
                </summary>
      <param name="project"></param>
      <param name="node">
                    A <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> or a class derived from it.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Collection">
      <summary>
                    Gets the collection of project items to which this item belongs.
                </summary>
      <returns>
        <see cref="T:EnvDTE.ProjectItems" /> if the parent node is a folder or a file that has sub-files; otherwise throws <see cref="T:System.NotImplementedException" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.ConfigurationManager">
      <summary>
                    Not implemented. Configuration on project items is not supported.
                </summary>
      <returns>null.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.ContainingProject">
      <summary>
                    Gets the automation object representing the project.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Project" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Delete">
      <summary>
                    Removes the item from the project and deletes it from storage.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Document">
      <summary>
                    Gets the document associated with the item, if one exists.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Document" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.DTE">
      <summary>
                    Gets the top-level extensibility object.
                </summary>
      <returns>
        <see cref="T:EnvDTE.DTE" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.ExpandView">
      <summary>
                    Expands the Solution Explorer to show the item.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.ExtenderCATID">
      <summary>
                    Gets the extender category ID (CATID) for the object.
                </summary>
      <returns>
                    When implemented in derived classes, the ID of the extender category. By default returns null.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.ExtenderNames">
      <summary>
                    Gets a list of available extenders for the item.
                </summary>
      <returns>
                    When implemented in derived classes, a list of the names of available extenders. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.FileCodeModel">
      <summary>
                    Gets the file code model for the item, if one exists.
                </summary>
      <returns>
                    When implemented in derived classes, the <see cref="T:EnvDTE.FileCodeModel" /> representing the root of the code model for this item.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.FileCount">
      <summary>
                    Gets the number of files associated with this item.
                </summary>
      <returns>
                    When implemented by derived classes, the number of files associated with the item.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.get_Extender(System.String)">
      <summary>
                    Gets the requested extender if it is available for this item.
                </summary>
      <returns>
                    When implemented in a derived class, the extender of the supplied name.
                </returns>
      <param name="extenderName">
                    The name of the Extender.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.get_FileNames(System.Int16)">
      <summary>
                    Gets the full path and names of the files associated with an item.
                </summary>
      <returns>
                    The full path of the associated item.
                </returns>
      <param name="index">
                    The index of the file name requested.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.get_IsOpen(System.String)">
      <summary>
                    Gets a value indicating whether the project item is open in a particular type of view.
                </summary>
      <returns>
                    When implemented in derived classes, true if the item is open.
                </returns>
      <param name="viewKind">
                    The name of the type of view.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.IsDirty">
      <summary>
                    Microsoft Internal Use Only. Checks if the document associated to this item is dirty.
                </summary>
      <returns>
                    Microsoft Internal Use Only.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Kind">
      <summary>
                    Gets a GUID string indicating the type of the object.
                </summary>
      <returns>
                    The GUID string corresponding to the property <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_TypeGuid" /> for the item.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Name">
      <summary>
                    Gets or sets the name of the item.
                </summary>
      <returns>
                    The name of the item (gets the caption, sets the (editable) edit label).
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Node">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> or derived class corresponding to this item.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> or derived class corresponding to this item.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Object">
      <summary>
                    Gets an object that can be accessed by name at runtime.
                </summary>
      <returns>
                    The <see cref="P:Microsoft.VisualStudio.Package.HierarchyNode.Object" /> property.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Open(System.String)">
      <summary>
                    Opens the project item in the specified view. 
                </summary>
      <returns>
                    When implemented in a derived class, the <see cref="T:EnvDTE.Window" /> in which the item was opened.
                </returns>
      <param name="ViewKind">
                    The name of the type of view in which to open the item.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Project">
      <summary>
                    Gets the automation object for the project.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProject" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.ProjectItems">
      <summary>
                    Gets the collection of project items owned by the item.
                </summary>
      <returns>
                    When implemented in derived classes, the <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProjectItems" /> owned by the item.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Properties">
      <summary>
                    Gets a collection of all properties that pertain to the item.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Properties" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Remove">
      <summary>
                    Removes the project item from hierarchy, but does not delete it from disk.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Save(System.String)">
      <summary>
                    Saves the project item with the supplied name.
                </summary>
      <param name="fileName">
                    The name to give the item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.SaveAs(System.String)">
      <summary>
                    Saves the project item with the supplied name. If the file exists, it is overwritten.
                </summary>
      <returns>
                    When implemented in a derived class, true if the save was successful.
                </returns>
      <param name="newFileName">
                    The name to give the item.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.Saved">
      <summary>
                    Gets or sets a value indicating whether or not the object has been modified since last being saved or opened.
                </summary>
      <returns>true if the item is not dirty, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectItem`1.SubProject">
      <summary>
                    Gets the project if the tem is the root of a subproject.
                </summary>
      <returns>
                    When implemented in derived classes, <see cref="T:EnvDTE.Project" /> if the item is the root of a subproject.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAProjectItems">
      <summary>
                    Contains <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProjectItems" /> objects, each representing items in the project.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItems.#ctor(Microsoft.VisualStudio.Package.Automation.OAProject,Microsoft.VisualStudio.Package.HierarchyNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProjectItems" /> for the specified project and node.
                </summary>
      <param name="project"></param>
      <param name="nodeWithItems">
        <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItems.AddFolder(System.String,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItems.AddFromFile(System.String)">
      <summary>
                    Adds a project item from a file that is installed in a project directory structure.
                </summary>
      <returns>
                    Returns a <see cref="T:EnvDTE.ProjectItem" /> object.
                </returns>
      <param name="fileName"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItems.AddFromFileCopy(System.String)">
      <summary>
                    Copies a source file and adds it to the project.
                </summary>
      <returns>
                    Returns a <see cref="T:EnvDTE.ProjectItem" /> object.
                </returns>
      <param name="filePath"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItems.AddFromTemplate(System.String,System.String)">
      <summary>
                    Creates a new project item from an existing item template file and adds it to the project.
                </summary>
      <returns>
                    Returns null.
                </returns>
      <param name="fileName"></param>
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItems.AddItem(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION)">
      <summary>
                    Adds an item to the project.
                </summary>
      <returns>
                    The added <see cref="T:EnvDTE.ProjectItem" />.
                </returns>
      <param name="path">
                    The absolute path of the item.
                </param>
      <param name="op">
                    A value describing how to add the item, from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" /> enumeration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectItems.EvaluateAddResult(Microsoft.VisualStudio.Shell.Interop.VSADDRESULT,System.String)">
      <summary>
                    Evaluates the result of an add operation.
                </summary>
      <returns>
                    The added <see cref="T:EnvDTE.ProjectItem" />.
                </returns>
      <param name="result">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" /> returned by the add operation.
                </param>
      <param name="path">
                    The absolute path of the item that was added.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAProjectReference">
      <summary>
                    Represents a project reference of the solution.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProjectReference.#ctor(Microsoft.VisualStudio.Package.ProjectReferenceNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProjectReference" /> for the specified hierarchy node.
                </summary>
      <param name="projectReference">
                    The associated <see cref="T:Microsoft.VisualStudio.Package.ProjectReferenceNode" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectReference.Culture">
      <summary>
                    Gets the language or culture supported by the reference.
                </summary>
      <returns>
                    An empty string. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectReference.Identity">
      <summary>
                    The ID of the project reference.
                </summary>
      <returns>
                    The display name of the project.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectReference.Name">
      <summary>
                    Gets the name of the project reference.
                </summary>
      <returns>
                    The name of the project.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectReference.Path"></member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectReference.SourceProject">
      <summary>
                    Gets the project associated with this project reference.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Project" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectReference.Type">
      <summary>
                    Gets the type of the project reference.
                </summary>
      <returns>
        <see cref="F:VSLangProj.prjReferenceType.prjReferenceTypeAssembly" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProjectReference.Version">
      <summary>
                    Gets the version of the project reference.
                </summary>
      <returns>
                    An empty string.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAProperties">
      <summary>
                    Contains all of the properties of a given object that are contained in a generic collection of properties.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProperties.#ctor(Microsoft.VisualStudio.Package.NodeProperties)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperties" /> based on the specified node properties.
                </summary>
      <param name="target">
                    The <see cref="T:Microsoft.VisualStudio.Package.NodeProperties" /> on which to base this property collection.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProperties.AddPropertiesFromType(System.Type)">
      <summary>
                    Adds properties of the specified type. 
                </summary>
      <param name="targetType">
                    The type of properties to be added.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProperties.AddProperty(System.Reflection.PropertyInfo)">
      <summary>
                    Creates a new <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperty" /> object and adds it to the current list of properties 
                </summary>
      <param name="propertyInfo">
                    The <see cref="T:System.Reflection.PropertyInfo" /> for the property to be created.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperties.Application">
      <summary>
                    Gets the application object. For Microsoft Internal Use Only.
                </summary>
      <returns>
                    Returns null.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperties.Count">
      <summary>
                    Gets the number of objects in the collection.
                </summary>
      <returns>
                    The number of objects in the collection.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperties.DTE">
      <summary>
                    Gets the top-level automation object.
                </summary>
      <returns>
                    When overridden by derived classes, the <see cref="T:EnvDTE.DTE" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProperties.GetEnumerator">
      <summary>
                    Gets an enumeration for the properties.
                </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProperties.Item(System.Object)">
      <summary>
                    Returns an indexed member of a <see cref="T:EnvDTE.Properties" /> collection.
                </summary>
      <returns>
                    A <see cref="T:EnvDTE.Property" /> object.
                </returns>
      <param name="index">
                    The index of the item to return.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperties.Node">
      <summary>
                    The node in the project hierarchy that is represented by these properties. 
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperties.Parent">
      <summary>
                    Gets the immediate parent of the properties collection.
                </summary>
      <returns>
                    When overridden by derived classes, the parent object of the properties collection.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperties.Properties">
      <summary>
                    Gets a dictionary of the properties.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary" /> of the properties.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperties.Target">
      <summary>
                    Gets the node properties on which these properties are based.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.NodeProperties" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAProperty">
      <summary>
                    Represents one property in a generic collection of properties for a given object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProperty.#ctor(Microsoft.VisualStudio.Package.Automation.OAProperties,System.Reflection.PropertyInfo)">
      <summary>
                    Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperty" /> class.
                </summary>
      <param name="parent">
                    Specifies the parent <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperties" /> object.
                </param>
      <param name="pi">
                    Specifies property meta data.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperty.Application">
      <summary>
                    Gets the Application object.
                </summary>
      <returns>
                    Returns an Application object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperty.Collection">
      <summary>
                    Returns the <see cref="P:EnvDTE.Property.Collection" /> containing the <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperty" /> object supporting this property.
                </summary>
      <returns>
                    Returns null.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperty.DTE">
      <summary>
                    Returns the top-level extensibility object.
                </summary>
      <returns>
                    Returns null.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)">
      <summary>
                    Returns one element of a list.
                </summary>
      <returns>
                    Returns an object.
                </returns>
      <param name="index1">
                    The index of the item to display.
                </param>
      <param name="index2">
                    The index of the item to display.
                </param>
      <param name="index3">
                    The index of the item to display.
                </param>
      <param name="index4">
                    The index of the item to display.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProperty.let_Value(System.Object)">
      <summary>
                    A function to set properties values.
                </summary>
      <param name="value">
                    Object to contain to fill in a properties value.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperty.Name">
      <summary>
                    Gets the name of the object.
                </summary>
      <returns>
                    A string value representing the name of the object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperty.NumIndices">
      <summary>
                    Returns the number of indices required to access the value.
                </summary>
      <returns>
                    A short integer representing the number of indices required to access the value.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperty.Object">
      <summary>
                    Sets or returns the object supporting the <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperty" /> object.
                </summary>
      <returns>
                    An object representing the value of the <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperty" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperty.Parent">
      <summary>
                    Gets the immediate parent of this object.
                </summary>
      <returns>
                    Returns a <see cref="T:EnvDTE.Properties" /> object containing the immediate parent.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)">
      <summary>
                    Sets indexed values in a list.
                </summary>
      <param name="index1">
                    Index of the item in the list to set.
                </param>
      <param name="index2">
                    Index of the item in the list to set.
                </param>
      <param name="index3">
                    Index of the item in the list to set.
                </param>
      <param name="index4">
                    Index of the item in the list to set.
                </param>
      <param name="value">
                    Index of the item in the list to set.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAProperty.Value">
      <summary>
                    Gets or sets the value of the property returned by the <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProperty" /> object
                </summary>
      <returns>
                    Returns an object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1">
      <summary>
                    Represents the automation equivalent of <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" />. 
                </summary>
      <typeparam name="RefType"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.#ctor(`0)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1" /> for the supplied <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" />.
                </summary>
      <param name="referenceNode">
                    The <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" /> for which to construct the automation object.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.BaseReferenceNode">
      <summary>
                    Gets the subtype of <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" /> with which this node was constructed.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" /> or one of its subtypes.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.BuildNumber">
      <summary>
                    Gets the build number of the reference.
                </summary>
      <returns>
                    The build number.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.Collection">
      <summary>
                    Gets the reference collection in which this reference exists.
                </summary>
      <returns>
        <see cref="T:VSLangProj.References" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.ContainingProject">
      <summary>
                    Gets the project in which this reference exists.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Project" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.CopyLocal">
      <summary>
                    Gets or sets whether or not this assembly is copied to the local bin path.
                </summary>
      <returns>true if it is copied, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.Culture">
      <summary>
                    Gets the culture or language supported by the reference.
                </summary>
      <returns>
                    The name of the culture.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.Description">
      <summary>
                    Gets the description of the reference.
                </summary>
      <returns>
                    The description of the reference.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.DTE">
      <summary>
                    Gets the top-level automation object.
                </summary>
      <returns>
        <see cref="T:EnvDTE.DTE" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.ExtenderCATID">
      <summary>
                    Gets the GUID of the element that is being extended.
                </summary>
      <returns>
                    The string value of the GUID of the element that is being extended.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.ExtenderNames">
      <summary>
                    Gets a list of available Extenders for this reference.
                </summary>
      <returns>
                    An object containing an automation-compliant list of strings. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.get_Extender(System.String)">
      <summary>
                    Gets the Extender of the specified name.
                </summary>
      <returns>
                    The Extender, if one is available, otherwise null.
                </returns>
      <param name="ExtenderName">
                    The name of the Extender.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.Identity">
      <summary>
                    Gets the ID of the reference.
                </summary>
      <returns>
                    The ID of the reference.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.MajorVersion">
      <summary>
                    Gets the major version number of the reference.
                </summary>
      <returns>
                    The major version number.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.MinorVersion">
      <summary>
                    Gets the minor version of the reference.
                </summary>
      <returns>
                    The minor version of the reference.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.Name">
      <summary>
                    Gets the name of the reference.
                </summary>
      <returns>
                    The name of the reference.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.Path">
      <summary>
                    Gets the path of the reference.
                </summary>
      <returns>
                    The absolute path of the file represented by the <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.PublicKeyToken">
      <summary>
                    Gets the public key token for the referenced assembly.
                </summary>
      <returns>
                    The public key token of the assembly.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.Remove">
      <summary>
                    Removes this reference from its collection.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.RevisionNumber">
      <summary>
                    Gets the revision number of the reference.
                </summary>
      <returns>
                    The revision number of the reference.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.SourceProject">
      <summary>
                    Gets the project object if this reference is a project.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Project" /> if the reference is a project, otherwise null.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.StrongName">
      <summary>
                    Gets whether the assembly is signed with a public/private key pair.
                </summary>
      <returns>true if this reference represents a signed assembly, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.Type">
      <summary>
                    Gets the type of the reference (assembly or COM component).
                </summary>
      <returns>
        <see cref="T:VSLangProj.prjReferenceType" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceBase`1.Version">
      <summary>
                    Gets the version of the reference.
                </summary>
      <returns>
                    The version string.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAReferenceFolderItem">
      <summary>
                    Represents the <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProjectItem" /> automation object that underlies the <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferenceFolderItem.#ctor(Microsoft.VisualStudio.Package.Automation.OAProject,Microsoft.VisualStudio.Package.ReferenceContainerNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAReferenceFolderItem" />.
                </summary>
      <param name="project"></param>
      <param name="node">
                    The <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" /> to which this automation object belongs.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceFolderItem.ProjectItems">
      <summary>
                    Gets the project item automation objects for the references in the <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" />.
                </summary>
      <returns>
                    The <see cref="T:EnvDTE.ProjectItems" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAReferenceItem">
      <summary>
                    Represents a reference <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProjectItem" /> automation object that is associated with a <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferenceItem.#ctor(Microsoft.VisualStudio.Package.Automation.OAProject,Microsoft.VisualStudio.Package.ReferenceNode)">
      <summary>
                    Initializes a new instance of <see cref="M:Microsoft.VisualStudio.Package.Automation.OAReferenceItem" /> for the specified project and reference node.
                </summary>
      <param name="project"></param>
      <param name="node">
                    The <see cref="T:Microsoft.VisualStudio.Package.ReferenceNode" /> with which this automation object is associated.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceItem.Collection">
      <summary>
                    Gets the collection to which this object belongs.
                </summary>
      <returns>
        <see cref="T:EnvDTE.ProjectItems" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferenceItem.Delete">
      <summary>
                    Deletes this object from the references collection.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferenceItem.Name">
      <summary>
                    Gets or sets the name of the project item.
                </summary>
      <returns>
                    The name of the project item.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferenceItem.Open(System.String)">
      <summary>
                    Opens a window of the specified type.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Window" />.
                </returns>
      <param name="viewKind"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAReferences">
      <summary>
                    Represents the automation equivalent of <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" />. It implements <see cref="T:VSLangProj.References" />, <see cref="T:VSLangProj.ReferencesEvents" />, <see cref="T:Microsoft.Build.Framework.IEventSource" />, and <see cref="T:Microsoft.VisualStudio.Package.CollectionPointContainer" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferences.#ctor(Microsoft.VisualStudio.Package.ReferenceContainerNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAReferences" /> for the supplied reference container node.
                </summary>
      <param name="containerNode">
                    The corresponding <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" /> for the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferences.Add(System.String)">
      <summary>
                    Adds a reference to this container.
                </summary>
      <returns>
                    The added <see cref="T:VSLangProj.Reference" />.
                </returns>
      <param name="bstrPath">
                    The path of the file represented by the reference.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferences.AddActiveX(System.String,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
                    Adds a COM component as a reference.
                </summary>
      <returns>
                    The added <see cref="T:VSLangProj.Reference" />.
                </returns>
      <param name="bstrTypeLibGuid">
                    The GUID of the COM component.
                </param>
      <param name="lMajorVer">
                    The major version of the COM component.
                </param>
      <param name="lMinorVer">
                    The minor version of the COM component.
                </param>
      <param name="lLocaleId">
                    The locale ID of the COM component.
                </param>
      <param name="bstrWrapperTool">
                    The name of the wrapper tool. Not used.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferences.AddProject(EnvDTE.Project)">
      <summary>
                    Adds a project reference.
                </summary>
      <returns>
                    The added <see cref="T:VSLangProj.Reference" />.
                </returns>
      <param name="pProject">
                    The <see cref="T:EnvDTE.Project" /> to reference.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferences.ContainingProject">
      <summary>
                    Gets the project to which this reference container belongs.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Project" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferences.Count">
      <summary>
                    Gets the number of references in the container.
                </summary>
      <returns>
                    The number of references in the container.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferences.DTE">
      <summary>
                    Gets the top-level automation object.
                </summary>
      <returns>
        <see cref="T:EnvDTE.DTE" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferences.Find(System.String)">
      <summary>
                    Finds a reference of the specified ID.
                </summary>
      <returns>
                    The reference if it exists, otherwise null.
                </returns>
      <param name="bstrIdentity">
                    The ID of the reference to find.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferences.GetEnumerator">
      <summary>
                    Gets a default enumerator for the references.
                </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAReferences.Item(System.Object)">
      <summary>
                    Gets the reference at the specified index.
                </summary>
      <returns>
                    The corresponding reference.
                </returns>
      <param name="index">
                    The index of the reference to get.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAReferences.Parent">
      <summary>
                    Gets the parent object of the corresponding <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" />.
                </summary>
      <returns>
                    The object that represents the parent of the <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" />.
                </returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Package.Automation.OAReferences.ReferenceAdded">
      <summary>
                    Raised when a reference is added to this container.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Package.Automation.OAReferences.ReferenceChanged">
      <summary>
                    Raised when a reference in this container is modified.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Package.Automation.OAReferences.ReferenceRemoved">
      <summary>
                    Raised when a reference is removed from this container.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OASolutionFolder`1">
      <summary>
                    Represents the automation-compliant version of the top-level directory in the project hierarchy that contains one or more projects. The type parameter is a <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" /> or a subclass (such as <see cref="T:Microsoft.VisualStudio.Package.ProjectNode" />) that represents the solution. This class implements <see cref="T:EnvDTE80.SolutionFolder" />.
                </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OASolutionFolder`1.#ctor(`0)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OASolutionFolder`1" /> for the specified hierarchy node.
                </summary>
      <param name="associatedNode">
                    The <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OASolutionFolder`1.AddFromFile(System.String)">
      <summary>
                    Adds a new subproject of this solution from the specified file.
                </summary>
      <returns>
                    The newly-created <see cref="T:EnvDTE.Project" />.
                </returns>
      <param name="fileName">
                    The absolute path of the project file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OASolutionFolder`1.AddFromTemplate(System.String,System.String,System.String)">
      <summary>
                    Adds a subproject using the specified template in the specified location.
                </summary>
      <returns>
                    The newly-created <see cref="T:EnvDTE.Project" />.
                </returns>
      <param name="fileName">
                    The name of the template file.
                </param>
      <param name="destination">
                    The path of the project.
                </param>
      <param name="projectName">
                    The name of the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OASolutionFolder`1.AddSolutionFolder(System.String)">
      <summary>
                    Adds a solution folder.
                </summary>
      <returns>
                    When implemented by derived classes, the newly-created <see cref="T:EnvDTE.Project" />.
                </returns>
      <param name="Name">
                    The name of the folder to add.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OASolutionFolder`1.DTE">
      <summary>
                    Gets the top-level automation object.
                </summary>
      <returns>
        <see cref="T:EnvDTE.DTE" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OASolutionFolder`1.Hidden">
      <summary>
                    Gets or sets whether or not the folder is hidden.
                </summary>
      <returns>true if the folder is hidden, otherwise false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OASolutionFolder`1.Parent">
      <summary>
                    Gets the parent of this node.
                </summary>
      <returns>
                    When implemented by derived classes, the parent <see cref="T:EnvDTE.Project" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAVSProject">
      <summary>
                    Represents a Visual Studio language-specific project. This is an implementation of the <see cref="T:VSLangProj.VSProject" /> interface.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProject.#ctor(Microsoft.VisualStudio.Package.ProjectNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAVSProject" /> for the supplied project hierarchy node.
                </summary>
      <param name="project">
                    The project hierarchy node.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProject.AddWebReference(System.String)">
      <summary>
                    Adds a reference to a Web Service to the project. A new Web Service reference subfolder is added to the Web References folder of the project. This new folder contains several other project items related to the Web Service. 
                </summary>
      <returns>
                    When implemented in a derived class, the <see cref="T:EnvDTE.ProjectItem" /> object associated with the new Web Service folder.
                </returns>
      <param name="bstrUrl">
                    The URL of the Web reference.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.BuildManager">
      <summary>
                    Gets the automation version of the <see cref="T:VSLangProj.BuildManager" /> for this project.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.Automation.OABuildManager" />. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProject.CopyProject(System.String,System.String,VSLangProj.prjCopyProjectOption,System.String,System.String)">
      <summary>
                    Copies some or all of a Web project to a new location. 
                </summary>
      <param name="bstrDestFolder">
                    The destination folder for the new project. The folder is created if it does not exist. This string takes the form "http://ServerName/CopyName/"
                </param>
      <param name="bstrDestUNCPath">
                    The UNC path for file-sharing if the project to be copied is using file-share access. Use the empty string if the project is using FrontPage Server Extensions access.
                </param>
      <param name="copyProjectOption">
                    A <see cref="T:VSLangProj.prjCopyProjectOption" /> value that determines which project files are copied — all the files, all the project files, or only the files needed to run the application.
                </param>
      <param name="bstrUsername">
                    The user's network login ID.
                </param>
      <param name="bstrPassword">
                    The user's password. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProject.CreateWebReferencesFolder">
      <summary>
                    Creates the Web References folder for the project.
                </summary>
      <returns>
                    When implemented in a derived class, the <see cref="T:EnvDTE.ProjectItem" /> object associated with the new Web Service folder.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.DTE">
      <summary>
                    Gets the top-level extensibility object.
                </summary>
      <returns>
        <see cref="T:EnvDTE.DTE" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.Events">
      <summary>
                    Gets a <see cref="T:VSLangProj.VSProjectEvents" /> object that allows you to respond to events of the <see cref="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.Imports" />, <see cref="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.References" />, and <see cref="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.BuildManager" /> objects.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.Automation.OAVSProjectEvents" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProject.Exec(VSLangProj.prjExecCommand,System.Int32,System.Object,System.Object@)">
      <summary>
                    This method supports the .NET Framework infrastructure and is not intended to be used directly from your code. Microsoft Internal Use Only.
                </summary>
      <param name="command">
                    Microsoft Internal Use Only.
                </param>
      <param name="bSuppressUI">
                    Microsoft Internal Use Only.
                </param>
      <param name="varIn">
                    Microsoft Internal Use Only.
                </param>
      <param name="pVarOut">
                    Microsoft Internal Use Only.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProject.GenerateKeyPairFiles(System.String,System.String)">
      <summary>
                    Generates a public/private key file used to form a strong name for the assembly. 
                </summary>
      <param name="strPublicPrivateFile">
                    The name of the file to be generated.
                </param>
      <param name="strPublicOnlyFile">
                    If true, only the public key is generated.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProject.GetUniqueFilename(System.Object,System.String,System.String)">
      <summary>
                    Generates a unique file name within the project. Used for naming new project items.
                </summary>
      <returns>
                    When implemented in derived classes, the unique name of the file. 
                </returns>
      <param name="pDispatch">
                    The project in which the item will exist.
                </param>
      <param name="bstrRoot">
                    The name of the item.
                </param>
      <param name="bstrDesiredExt">
                    The extension to be used.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.Imports">
      <summary>
                    Gets the imports associated with the project. 
                </summary>
      <returns>
                    When implemented in a derived class, the <see cref="T:VSLangProj.Imports" /> object associated with the project.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.Project">
      <summary>
                    Gets the generic project element associated with this project.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.Automation.OAProject" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.References">
      <summary>
                    Gets the <see cref="T:VSLangProj.References" /> object associated with the project's <see cref="T:Microsoft.VisualStudio.Package.ReferenceContainerNode" />.
                </summary>
      <returns>
        <see cref="T:VSLangProj.References" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProject.Refresh">
      <summary>
                    Refreshes the appearance of the project in the Solution Explorer, refreshes the references, and gets the latest compiled versions of the files.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.TemplatePath">
      <summary>
                    Gets the full path of the directory that contains the project-item templates.
                </summary>
      <returns>
                    When implemented in a derived class, the full path of the template directory.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.WebReferencesFolder">
      <summary>
                    Gets the Web References directory.
                </summary>
      <returns>
                    When implemented in a derived class, <see cref="T:EnvDTE.ProjectItem" /> that represents the Web References directory.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProject.WorkOffline">
      <summary>
                    Gets or sets whether a Web project is working online or offline. When it is working offline, development continues on an offline store of project files, so that the project files on the server are not changed.
                </summary>
      <returns>
                    When implemented in a derived class, true if the Web project is online.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAVSProjectEvents">
      <summary>
                    Provides access to language-specific project events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProjectEvents.#ctor(Microsoft.VisualStudio.Package.Automation.OAVSProject)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAVSProjectEvents" /> for the specified project.
                </summary>
      <param name="vsProject">
                    The <see cref="T:Microsoft.VisualStudio.Package.Automation.OAVSProject" /> for which the events are raised.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProjectEvents.BuildManagerEvents">
      <summary>
                    Gets the project's build manager events.
                </summary>
      <returns>
        <see cref="T:VSLangProj.BuildManagerEvents" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProjectEvents.ImportsEvents">
      <summary>
                    Gets the project's imports events.
                </summary>
      <returns>
                    When implemented by derived classes, the project's <see cref="T:VSLangProj.ImportsEvents" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProjectEvents.ReferencesEvents">
      <summary>
                    Gets the project's references events.
                </summary>
      <returns>
        <see cref="T:VSLangProj.ReferencesEvents" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Automation.OAVSProjectItem">
      <summary>
                    Represents a language-specific project item. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProjectItem.#ctor(Microsoft.VisualStudio.Package.FileNode)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.Automation.OAVSProjectItem" /> for the specified file node. 
                </summary>
      <param name="fileNode">
                    The associated <see cref="T:Microsoft.VisualStudio.Package.FileNode" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProjectItem.ContainingProject">
      <summary>
                    Gets the project to which this project item belongs.
                </summary>
      <returns>
        <see cref="T:EnvDTE.Project" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProjectItem.DTE">
      <summary>
                    Gets the top-level automation object.
                </summary>
      <returns>
        <see cref="T:EnvDTE.DTE" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProjectItem.FileNode">
      <summary>
                    Gets or sets the file node associated with this project item.
                </summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.FileNode" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Automation.OAVSProjectItem.ProjectItem">
      <summary>
                    Gets the automation object of the <see cref="T:Microsoft.VisualStudio.Package.FileNode" />.
                </summary>
      <returns>
        <see cref="T:EnvDTE.ProjectItem" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Automation.OAVSProjectItem.RunCustomTool">
      <summary>
                    Runs a custom tool on this item. Not implemented.
                </summary>
    </member>
  </members>
</doc>