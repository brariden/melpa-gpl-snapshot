<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Modeling.Sdk</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Modeling.AddRule">
      <summary>
                    Represents a rule that is called when an object is added to the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.AddRule.#ctor">
      <summary>
                    Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Modeling.AddRule" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.AddRule.ElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
      <summary>
                    Alerts listeners that a rule has been used.
                </summary>
      <param name="e">
                    An ElementAddedEventArgs that contains the event data.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.AmbiguousMonikerException">
      <summary>
                    The exception that is thrown when a model element to be added to the store has the same moniker as another element already in the store.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.AmbiguousMonikerException.Element">
      <summary>
                    Gets the model element that could not be added to the store.
                </summary>
      <returns>
                    The model element that could not be added to the store.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.AmbiguousMonikerException.Moniker">
      <summary>
                    Gets the moniker of the model element.
                </summary>
      <returns>
                    The moniker of the model element.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.AncestorVisitorFilter">
      <summary>
                    Visits all aggregating relationships.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.AncestorVisitorFilter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.AncestorVisitorFilter" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.AncestorVisitorFilter.ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,Microsoft.VisualStudio.Modeling.ElementLink)">
      <summary>
                    Checks to see whether a relationship should be visited during a traversal.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.VisitorFilterResult" />, which indicates whether an element should be visited.
                </returns>
      <param name="walker">
                    The walker traversing the model.
                </param>
      <param name="sourceElement">
                    The element that is the source in the relationship.
                </param>
      <param name="sourceRoleInfo">
                    The metadata for the source role.
                </param>
      <param name="domainRelationshipInfo">
                    The metadata for the domain relationship.
                </param>
      <param name="targetRelationship">
                    The relationship.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.AncestorVisitorFilter.ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Checks to see whether a role player should be visited during a traversal.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.VisitorFilterResult" />, which indicates whether an element should be visited.
                </returns>
      <param name="walker">
                    The walker traversing the model.
                </param>
      <param name="sourceElement">
                    The element that is the source role player.
                </param>
      <param name="elementLink">
                    The link. 
                </param>
      <param name="targetDomainRole">
                    The metadata for the target role.
                </param>
      <param name="targetRolePlayer">
                    The element that is the target role player.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.BreadthFirstRolePlayerFirstElementWalker">
      <summary>
                    Enables breadth-first traversals of the model. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.BreadthFirstRolePlayerFirstElementWalker.#ctor(Microsoft.VisualStudio.Modeling.IElementVisitor,Microsoft.VisualStudio.Modeling.IElementVisitorFilter)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.BreadthFirstRolePlayerFirstElementWalker" /> class. 
                </summary>
      <param name="visitor">
                    The element visitor.
                </param>
      <param name="filter">
                    The filter.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.BreadthFirstRolePlayerFirstElementWalker.#ctor(Microsoft.VisualStudio.Modeling.IElementVisitor,Microsoft.VisualStudio.Modeling.IElementVisitorFilter,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.BreadthFirstRolePlayerFirstElementWalker" /> class. 
                </summary>
      <param name="visitor">
                    The element visitor.
                </param>
      <param name="filter">
                    The filter.
                </param>
      <param name="includeLinks">true to include links; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.BreadthFirstRolePlayerFirstElementWalker.DoTraverse(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Verifies whether a breadth-first traversal can be used.
                </summary>
      <returns>true if a breadth-first traversal can be used; otherwise, false.
                </returns>
      <param name="rootElement">
                    The root element, in which the breadth-first traversal would begin.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.CalculatedPropertyValueHandler`2">
      <summary>
                    Base class for calculated domain property handlers.
                </summary>
      <typeparam name="TElement"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CalculatedPropertyValueHandler`2.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.CalculatedPropertyValueHandler`2" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CalculatedPropertyValueHandler`2.NotifyValueChange(`0)">
      <summary>
                    Alerts listeners that the calculated value of a domain property has changed.
                </summary>
      <param name="element">
                    The element that the property is a member of.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CalculatedPropertyValueHandler`2.SetValue(`0,`1)">
      <summary>
                    Sets the value of a domain property for an element.
                </summary>
      <param name="element">
                    The element that has this property.
                </param>
      <param name="newValue">
                    The value the property is set to.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.CanCommitCallback">
      <summary>
                    Represents a callback method for determining whether a transaction can commit based on external criteria.
                </summary>
      <returns>true if the transaction can commit; otherwise, false.
                </returns>
      <param name="transaction">
                    The transaction to check.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.CanUndoRedoCallback">
      <summary>
                    Determines if an undo or redo operation can proceed, based on external criteria.
                </summary>
      <param name="isUndo">true if this is an undo operation; false if this is a redo operation.
                </param>
      <param name="transactionItem">
                    A <see cref="T:Microsoft.VisualStudio.Modeling.TransactionItem" /> identifying the transaction.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ChainingElementVisitorFilter">
      <summary>
                    Represents a chaining filter, which adds filters to a list.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ChainingElementVisitorFilter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ChainingElementVisitorFilter" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ChainingElementVisitorFilter.AddFilter(Microsoft.VisualStudio.Modeling.IElementVisitorFilter)">
      <summary>
                    Add a filter to a list.
                </summary>
      <param name="filter">
                    The filter.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ChainingElementVisitorFilter.ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,Microsoft.VisualStudio.Modeling.ElementLink)">
      <summary>
                    Verifies whether a relationship should be visited during a traversal. 
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.VisitorFilterResult" />, which indicates whether an element should be visited.
                </returns>
      <param name="walker">
                    The walker traversing the model.
                </param>
      <param name="sourceElement">
                    The element that is the source in the relationship.
                </param>
      <param name="sourceRoleInfo">
                    The metadata for the source role.
                </param>
      <param name="domainRelationshipInfo">
                    The metadata for the domain relationship.
                </param>
      <param name="targetRelationship">
                    The relationship.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ChainingElementVisitorFilter.ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Verifies whether a role player should be visited during a traversal.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.VisitorFilterResult" />, which indicates whether an element should be visited.
                </returns>
      <param name="walker">
                    The walker traversing the model.
                </param>
      <param name="sourceElement">
                    The element that is the source role player.
                </param>
      <param name="elementLink">
                    The link. 
                </param>
      <param name="targetDomainRole">
                    The metadata for the target role.
                </param>
      <param name="targetRolePlayer">
                    The element that is the target role player.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ChangeRule">
      <summary>
                    Represents a rule that is called when a change happens to an element in the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ChangeRule.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ChangeRule" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ChangeRule.ElementPropertyChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
      <summary>
                    Alerts listeners that a property for an element has changed.  
                </summary>
      <param name="e">
                    Provides data for the ElementPropertyChanged event.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ChangeSource">
      <summary>
                    Indicates the source of a change that was made during a transaction.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ChangeSource.Normal">
      <summary>
                    Changes that occurred during normal processing.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ChangeSource.Rule">
      <summary>
                    Changes that occurred during rule firing.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ChangeSource.Propagate">
      <summary>
                    Changes that occurred during delete propagation.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ChangeSource.Other">
      <summary>
                    Changes that during some other processing.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ClosureContextHelper">
      <summary>
                    Provides methods to add and retrieve closure context information to and from a particular element walker context.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.#ctor(Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="targetGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.#ctor(Microsoft.VisualStudio.Modeling.ElementWalker)">
      <param name="walker"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.AddClosureElementOperation(Microsoft.VisualStudio.Modeling.ClosureElementOperation)">
      <param name="operation"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.AddClosureElementOperation(Microsoft.VisualStudio.Modeling.ElementGroup,Microsoft.VisualStudio.Modeling.ClosureElementOperation)">
      <param name="group"></param>
      <param name="operation"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.AddClosureElementOperation(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ClosureElementOperation)">
      <param name="walker"></param>
      <param name="operation"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.AddContextListData(Microsoft.VisualStudio.Modeling.ElementGroup,System.Object,System.Object)">
      <param name="elementGroup"></param>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.AddContextListData(Microsoft.VisualStudio.Modeling.ElementWalker,System.Object,System.Object)">
      <param name="walker"></param>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.AddContextListData(System.Object,System.Object)">
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ClosureContextHelper.ClosureContext"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.GetClosureContext(Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="elementGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.GetClosureContext(Microsoft.VisualStudio.Modeling.ElementWalker)">
      <param name="walker"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.GetContextData(Microsoft.VisualStudio.Modeling.ElementGroup,System.Object)">
      <param name="elementGroup"></param>
      <param name="key"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.GetContextData(Microsoft.VisualStudio.Modeling.ElementWalker,System.Object)">
      <param name="walker"></param>
      <param name="key"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.GetContextData(System.Object)">
      <param name="key"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.Resolve(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="targetPartition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.SetContextData(Microsoft.VisualStudio.Modeling.ElementGroup,System.Object,System.Object)">
      <param name="elementGroup"></param>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.SetContextData(Microsoft.VisualStudio.Modeling.ElementWalker,System.Object,System.Object)">
      <param name="walker"></param>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureContextHelper.SetContextData(System.Object,System.Object)">
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ClosureElementOperation">
      <summary>
                    Represents closure element operations.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureElementOperation.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ClosureElementOperation" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureElementOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ClosureElementOperation" /> class. 
                </summary>
      <param name="info">
                    The data that is required to serialize or deserialize an element. 
                </param>
      <param name="context">
                    The context for the element.
                </param>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ClosureElementOperation.ClosureElementOperationList">
      <summary>
                    Represents the list of closure element operations.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureElementOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Gets the element that requires the closure operation.
                </summary>
      <param name="info">
                    The data that is required to serialize or deserialize an element. 
                </param>
      <param name="context">
                    The context for the element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureElementOperation.Resolve(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <summary>
                    Resolves the <see cref="T:Microsoft.VisualStudio.Modeling.Partition" />, which contains elements in a store.
                </summary>
      <param name="targetPartition">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Partition" />.
                </param>
      <param name="group">
                    The group of elements for the <see cref="T:Microsoft.VisualStudio.Modeling.Partition" />.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation">
      <summary>
                    Represents a closure operation to mark a find or create target element operation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.#ctor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo)">
      <param name="copiedSourceElement"></param>
      <param name="copiedSourceRoleInfo"></param>
      <param name="foundElement"></param>
      <param name="foundDomainRole"></param>
      <param name="domainRelationship"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.CopiedRoleId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.CopiedTargetElement"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.FoundRoleId"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.Resolve(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="targetPartition"></param>
      <param name="group"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.ResolveCopiedTargetElement(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="targetPartition"></param>
      <param name="group"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.ResolveCreateElementLink(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="targetPartition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.ResolveDomainRelationship(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="targetPartition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.ResolveFindElement(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="targetPartition"></param>
      <param name="group"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateElementOperation.TargetDomainRelationshipId"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateOrDeleteCopiedElementOperation">
      <summary>
                    Represents a closure operation to find and relate to an element or delete the copied element if the target is not found.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateOrDeleteCopiedElementOperation.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateOrDeleteCopiedElementOperation.#ctor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo)">
      <param name="copiedSourceElement"></param>
      <param name="copiedSourceRoleInfo"></param>
      <param name="foundElement"></param>
      <param name="foundRoleInfo"></param>
      <param name="domainRelationshipInfo"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateOrDeleteCopiedElementOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindAndRelateOrDeleteCopiedElementOperation.Resolve(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="targetPartition"></param>
      <param name="group"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation">
      <summary>
                    Represents a closure operation that marks a find target element operation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.#ctor(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="sourceElement"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.FindElement(System.Guid,System.Guid,Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="elementId"></param>
      <param name="domainClassId"></param>
      <param name="targetStore"></param>
      <param name="elementGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.Matches(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.Resolve(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="targetPartition"></param>
      <param name="group"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.SourceElementDomainClassId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.SourceElementId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.TargetElement"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ClosureFindElementOperation.TargetElementId"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateAndRelateElementOperation">
      <summary>
                    Represents a closure operation that marks a find or create target element operation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateAndRelateElementOperation.#ctor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo)">
      <param name="copiedSourceElement"></param>
      <param name="copiedSourceRoleInfo"></param>
      <param name="foundElement"></param>
      <param name="foundRoleInfo"></param>
      <param name="domainRelationshipInfo"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateAndRelateElementOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateAndRelateElementOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateAndRelateElementOperation.Resolve(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="targetPartition"></param>
      <param name="group"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateAndRelateElementOperation.ResolveCreateElement(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="targetPartition"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateElementOperation">
      <summary>
                    Represents a closure operation that marks a find or create target element operation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateElementOperation.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateElementOperation.#ctor(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="sourceElement"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateElementOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateElementOperation.FindOrCreateElement(System.Guid,System.Guid,Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="sourceElementId"></param>
      <param name="domainClassId"></param>
      <param name="targetPartition"></param>
      <param name="elementGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateElementOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ClosureFindOrCreateElementOperation.Resolve(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="targetPartition"></param>
      <param name="group"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ClosureType">
      <summary>
                    Describes the type of closure to create.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ClosureType.CopyClosure">
      <summary>
                    Create a closure for copy operations.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ClosureType.CopyShapeClosure">
      <summary>
                    Create a closure for copy shape operations.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ClosureType.DeleteClosure">
      <summary>
                    Create a closure for delete operations.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ClosureType.DeleteShapeClosure">
      <summary>
                    Create a closure for delete shape operations.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.CompletionStatus">
      <summary>
                    Describes how the transaction was completed.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.CompletionStatus.RolledBack">
      <summary>
                    The transaction was rolled back.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.CompletionStatus.Committed">
      <summary>
                    The transaction committed.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Context">
      <summary>
                    Contains the mapping of transactions to partitions.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Context.#ctor(Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Context" /> class. 
                </summary>
      <param name="store">
                    The store for the context.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Context.AddPartition(Microsoft.VisualStudio.Modeling.Partition)">
      <summary>
                    Adds a partition to the context.
                </summary>
      <param name="partition">
                    The partition to be added to the context.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Context.Delete">
      <summary>
                    Deletes a partition from the context.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Context.Dispose">
      <summary>
                    Releases all resources that the <see cref="T:Microsoft.VisualStudio.Modeling.Context" /> used. 
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Context.Id">
      <summary>
                    Gets or sets the ID of this context.
                </summary>
      <returns>
                    A unique identifier for the context.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Context.InRedo">
      <summary>
                    Indicates whether the context is redoing an operation.
                </summary>
      <returns>true if the context is redoing an operation; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Context.InUndo">
      <summary>
                    Indicates whether the context is undoing an operation.
                </summary>
      <returns>true if the context is undoing an operation; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Context.InUndoRedoOrRollback">
      <summary>
                    Indicates whether the context is undoing an operation, redoing an operation, or rolling back a transaction.
                </summary>
      <returns>true if the context is undoing an operation, redoing an operation, or rolling back a transaction; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Context.Partitions">
      <summary>
                    Gets the partitions that the context uses.
                </summary>
      <returns>
                    A dictionary containing the partitions. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Context.RemovePartition(Microsoft.VisualStudio.Modeling.Partition)">
      <summary>
                    Removes a partition from the context.
                </summary>
      <param name="partition">
                    The partition to be removed.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Context.Store">
      <summary>
                    Gets the store to which the context belongs.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Context.UndoManager">
      <summary>
                    Gets the undo manager for the context.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.UndoManager" /> object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.CopyOriginContext">
      <summary>
                    Provides information about the origin of the <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CopyOriginContext.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CopyOriginContext.GetCopyOrigin(Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="elementGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CopyOriginContext.GetCopyOrigin(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <param name="elementGroupPrototype"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CopyOriginContext.GetCopyOrigin(Microsoft.VisualStudio.Modeling.Transaction)">
      <param name="transaction"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CopyOriginContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CopyOriginContext.HasContext(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <param name="elementGroupPrototype"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CopyOriginContext.HasContext(Microsoft.VisualStudio.Modeling.Transaction)">
      <param name="transaction"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CopyOriginContext.Set(Microsoft.VisualStudio.Modeling.ElementGroupPrototype,System.String)">
      <param name="elementGroupPrototype"></param>
      <param name="copyOrigin"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.CoreDomainModel">
      <summary>
                    Represents the domain model that defines the basic elements used by all domain models.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.CoreDomainModel.#ctor(Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.CoreDomainModel" /> class. 
                </summary>
      <param name="store">
                    The store that contains the domain model.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The store is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    An instance of this domain model already is in the store.
                </exception>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.CoreDomainModel.DomainModelId">
      <summary>
                    Represents the domain model ID for the core domain model.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DefaultVisitorFilter">
      <summary>
                    Visits all aggregate relationships.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DefaultVisitorFilter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.DefaultVisitorFilter.ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,Microsoft.VisualStudio.Modeling.ElementLink)">
      <param name="walker"></param>
      <param name="sourceElement"></param>
      <param name="sourceRoleInfo"></param>
      <param name="domainRelationshipInfo"></param>
      <param name="targetRelationship"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DefaultVisitorFilter.ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="walker"></param>
      <param name="sourceElement"></param>
      <param name="elementLink"></param>
      <param name="targetDomainRole"></param>
      <param name="targetRolePlayer"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DeleteRule">
      <summary>
                    Represents a rule that is called when an object is deleted from the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DeleteRule.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DeleteRule" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DeleteRule.ElementDeleted(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
      <summary>
                    Alerts listeners that an element has been deleted from the model.
                </summary>
      <param name="e">
                    Provides data for the ElementDeleted event.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DeleteState">
      <summary>
                    Identifies the state of the element being deleted.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.DeleteState.Active">
      <summary>
                    Indicates the element is active.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.DeleteState.Deleting">
      <summary>
                    Indicates the element is in the process of being deleted. This state is valid only while in the context of firing ElementDeletingRules.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.DeleteState.Deleted">
      <summary>
                    Indicates the element has been deleted.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DeletingRule">
      <summary>
                    Represents a rule that is called when an element is being deleted in the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DeletingRule.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.DeletingRule.ElementDeleting(Microsoft.VisualStudio.Modeling.ElementDeletingEventArgs)">
      <param name="e">
                    Provides data for the ElementDeleting event.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DeletingRule.FireBefore"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.DepthFirstElementAndLinkWalker">
      <summary>
                    Enables depth-first traversals of the model starting from a particular element or group of elements. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DepthFirstElementAndLinkWalker.#ctor(Microsoft.VisualStudio.Modeling.IElementVisitor,Microsoft.VisualStudio.Modeling.IElementVisitorFilter)">
      <param name="visitor"></param>
      <param name="filter"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DepthFirstElementAndLinkWalker.#ctor(Microsoft.VisualStudio.Modeling.IElementVisitor,Microsoft.VisualStudio.Modeling.IElementVisitorFilter,System.Boolean)">
      <param name="visitor"></param>
      <param name="filter"></param>
      <param name="includeLinks"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DepthFirstElementAndLinkWalker.GetRelatedElements(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DepthFirstElementWalker">
      <summary>
                    Enables depth-first traversals of the model starting from a particular element or group of elements.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DepthFirstElementWalker.#ctor(Microsoft.VisualStudio.Modeling.IElementVisitor,Microsoft.VisualStudio.Modeling.IElementVisitorFilter)">
      <param name="visitor"></param>
      <param name="filter"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DepthFirstElementWalker.#ctor(Microsoft.VisualStudio.Modeling.IElementVisitor,Microsoft.VisualStudio.Modeling.IElementVisitorFilter,System.Boolean)">
      <param name="visitor"></param>
      <param name="filter"></param>
      <param name="includeLinks"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DepthFirstElementWalker.BeginTraverseElement(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DepthFirstElementWalker.DoTraverse(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="rootElement"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DepthFirstElementWalker.EndTraverseElement(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DepthFirstElementWalker.GetRelatedElements(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DeserializationEndingEventArgs">
      <summary>
                    Provides data for the DeserializationEnding event and notifies listeners that deserialization has ended.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DeserializationEndingEventArgs.#ctor(Microsoft.VisualStudio.Modeling.CompletionStatus)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DeserializationEndingEventArgs" /> class. 
                </summary>
      <param name="status">
                    The completion status of the transaction.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DeserializationEndingEventArgs.Status">
      <summary>
                    Gets the completion status of the transaction.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.CompletionStatus" /> object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainClassInfo">
      <summary>
                    Represents a domain class.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.AllDescendants">
      <summary>
                    Gets a list of all domain classes derived from this class.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.AllDomainProperties">
      <summary>
                    Gets a list of domain properties declared on this domain class.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.AllDomainRolesPlayed">
      <summary>
                    Gets a read-only list of all the domain roles played by this class or its ascendants.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.AllEmbeddedByDomainRoles">
      <summary>
                    Gets a list of domain roles which embed this domain class.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.BaseDomainClass">
      <summary>
                    Gets the domain class that this domain class inherits from.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.DefaultDomainProperty">
      <summary>
                    Gets the default domain property for this domain class.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyInfo" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.DomainModel">
      <summary>
                    Gets the domain model that this domain class belongs to.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.FindDomainProperty(System.String,System.Boolean)">
      <summary>
                    Finds a domain property that is defined in this domain class.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyInfo" /> object.
                </returns>
      <param name="propertyName">
                    The property name to look for.
                </param>
      <param name="includeBaseClasses">
                    Specifies whether to include base classes in the search.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.FindEmbeddingElement(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Finds the embedding container for this element.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> object.
                </returns>
      <param name="element">
                    The element whose container is to be returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.FindEmbeddingElementLink(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.GetName(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets the name of the element.
                </summary>
      <returns>
                    The name of the element.
                </returns>
      <param name="element">
                    The element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.HasNameProperty(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Indicates whether an element has a name.
                </summary>
      <returns>true if the element has a name; otherwise, false. 
                </returns>
      <param name="element">
                    The element to check.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.ImplementationClass">
      <summary>
                    Gets the implementation type of this domain class.
                </summary>
      <returns>
                    The type for this domain class.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.IsDerivedFrom(Microsoft.VisualStudio.Modeling.DomainClassInfo)">
      <summary>
                    Indicates whether this domain class is derived from a specified domain class.
                </summary>
      <returns>true if this domain class is directly or indirectly derived from the specified domain class; otherwise, false. 
                </returns>
      <param name="domainClass">
                    The domain class to check whether it is a base class for this class.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.IsDerivedFrom(System.Guid)">
      <summary>
                    Indicates whether this domain class is derived from a specified domain class.
                </summary>
      <returns>true if this domain class is directly or indirectly derived from the specified domain class; otherwise, false. 
                </returns>
      <param name="baseDomainClassId">
                    The ID of the domain class to check whether it is a base class for this class.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.IsValidationEnabled">
      <summary>
                    Gets whether validation is enabled for this domain class.
                </summary>
      <returns>true if the validation is enabled; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.LocalDescendants">
      <summary>
                    Gets a list of domain classes derived directly from this class.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.LocalDomainProperties">
      <summary>
                    Gets a list of the domain properties declared in this domain class.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.LocalDomainRolesPlayed">
      <summary>
                    Gets a list of the domain roles played by this domain class.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassInfo.NameDomainProperty">
      <summary>
                    Gets the element name property for this domain class.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyInfo" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.SetName(Microsoft.VisualStudio.Modeling.ModelElement,System.String)">
      <summary>
                    Sets the name of the element.
                </summary>
      <param name="element">
                    The element to name.
                </param>
      <param name="name">
                    The name for the element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.SetUniqueName(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Assigns an element a unique name.
                </summary>
      <param name="element">
                    The element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.SetUniqueName(Microsoft.VisualStudio.Modeling.ModelElement,System.String)">
      <summary>
                    Assigns an element a unique name.
                </summary>
      <param name="element">
                    The element.
                </param>
      <param name="baseName">
                    The name that you want to use as a base for generating unique names. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassInfo.TryGetName(Microsoft.VisualStudio.Modeling.ModelElement,System.String@)">
      <summary>
                    Verifies whether the element has a name and returns the name if it exists.
                </summary>
      <returns>true if the element has a name; otherwise, false. 
                </returns>
      <param name="element">
                    The element.
                </param>
      <param name="name">
                    The name of the element.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer">
      <summary>
                    Represents the base class for all generated domain serializers.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Calculates a reference to a handled model element instance.
                </summary>
      <returns>
                    A fully-qualified string reference to the model element instance.
                </returns>
      <param name="directory">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory" /> used to look up serializers.
                </param>
      <param name="element">
                    The model element instance to calculate the qualified name for.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
      <summary>
                    Creates a model element instance.
                </summary>
      <returns>
                    The model element instance.
                </returns>
      <param name="serializationContext">
                    The serialization context that stores serialization errors, if any.
                </param>
      <param name="reader">
                    The XmlReader from which to read.
                </param>
      <param name="partition">
                    The new element instance should be created in the store associated with this partition.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
      <summary>
                    Creates a moniker instance.
                </summary>
      <returns>
                    The moniker instance.
                </returns>
      <param name="serializationContext">
                    The serialization context that stores serialization errors, if any.
                </param>
      <param name="reader">
                    The XmlReader from which to read.
                </param>
      <param name="sourceRolePlayer">
                    The source role-player model element from which the moniker being created is referenced.
                </param>
      <param name="relDomainClassId">
                    The domain class Id of the relationship that connects the source role player to the moniker being created.
                </param>
      <param name="partition">
                    The new Moniker should be created in the store associated with this partition.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Calculates the Qualifier for the moniker.
                </summary>
      <returns>
                    The long-form reference to a model element. 
                </returns>
      <param name="directory">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory" /> used to look up serializers.
                </param>
      <param name="element">
                    The model element instance to get the moniker qualifier from.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.MonikerAttributeName">
      <summary>
                    Gets the XML attribute name that contains the moniker string.
                </summary>
      <returns>
                    Returns the XML attribute name that contains the moniker string. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.MonikerTagName">
      <summary>
                    Gets the XML tag name.
                </summary>
      <returns>
                    Returns the XML tag name when serializing the handled model element as a moniker.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
      <summary>
                    Deserializes a given model element instance from XML.
                </summary>
      <param name="serializationContext">
                    The serialization context that stores the serialization result.
                </param>
      <param name="element">
                    In-memory model element instance that will get the deserialized data.
                </param>
      <param name="reader">
                    The XmlReader from which to read.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.ReadRootElement(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ISchemaResolver)">
      <summary>
                    Deserializes the root model element from XML.
                </summary>
      <param name="serializationContext">
                    The serialization context that stores serialization errors, if any.
                </param>
      <param name="element">
                    The model element instance to read from.
                </param>
      <param name="reader">
                    The XmlReader from which to read.
                </param>
      <param name="schemaResolver">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.ISchemaResolver" /> interface, which resolves an XML schema.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
      <summary>
                    Checks if the given XmlReader is pointing to a serialized model element instance that this serializer can handle.
                </summary>
      <returns>
                    The created model element instance, or null if the reader is not pointing to a correct serialized instance.
                </returns>
      <param name="serializationContext">
                    The serialization context that stores serialization errors, if any.
                </param>
      <param name="reader">
                    The XmlReader from which to read.
                </param>
      <param name="partition">
                    The partition in which the new element will be created.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
      <summary>
                    Checks if the given XmlReader is pointing to a monikerized instance of a model element that this serializer can handle.
                </summary>
      <returns>
                    If the XmlReader is currently pointing to a monikerized instance of a model element that this serializer can handle, this method creates a Moniker instance in the given Store. Otherwise, returns null. 
                </returns>
      <param name="serializationContext">
                    The serialization context that stores serialization errors, if any.
                </param>
      <param name="reader">
                    The XmlReader from which to read.
                </param>
      <param name="sourceRolePlayer">
                    The source role-player model element from which the moniker being created is referenced.
                </param>
      <param name="relDomainClassId">
                    The domain class Id of the relationship that connects the source role player to the moniker being created.
                </param>
      <param name="partition">
                    The new Moniker should be created in the store associated with this partition.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
      <summary>
                    Serializes the model element instance associated with this serializer instance into XML.
                </summary>
      <param name="serializationContext">
                    The serialization context that stores serialization errors, if any.
                </param>
      <param name="element">
                    The model element instance that will be serialized.
                </param>
      <param name="writer">
                    The XmlReader from which to write.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
      <summary>
                    Serializes the model element instance associated with this serializer instance into XML.
                </summary>
      <param name="serializationContext">
                    The serialization context that stores serialization errors, if any.
                </param>
      <param name="element">
                    The model element instance that will be serialized.
                </param>
      <param name="writer">
                    The XmlReader from which to write.
                </param>
      <param name="rootElementSettings">
                    The settings for the root element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
      <summary>
                    Serializes from a moniker the model element instance associated with this serializer instance into XML.
                </summary>
      <param name="serializationContext">
                    The serialization context that stores serialization errors, if any.
                </param>
      <param name="element">
                    The model element instance that will be serialized.
                </param>
      <param name="writer">
                    The XmlReader from which to write.
                </param>
      <param name="sourceRolePlayer">
                    The source role-player model element from which the moniker is referenced.
                </param>
      <param name="relSerializer">
                    The serializer for domain relationships.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.WriteRootElement(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
      <summary>
                    Serializes the root model element instance associated with this serializer instance into XML.
                </summary>
      <param name="serializationContext">
                    The serialization context that stores serialization errors, if any.
                </param>
      <param name="element">
                    The model element instance that will be serialized.
                </param>
      <param name="writer">
                    The XmlReader from which to write.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer.XmlTagName">
      <summary>
                    Gets the XML tag name that will be used in serialization. 
                </summary>
      <returns>
                    The XML tag name used for serialization.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainDataDirectory">
      <summary>
                    Stores metadata about the domain models in the store.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.Contains(System.Guid)">
      <summary>
                    Indicates whether the directory contains an object with a specific ID.
                </summary>
      <returns>true if the object is found; otherwise, false.
                </returns>
      <param name="id">
                    The ID of the object.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainDataDirectory.DomainClasses">
      <summary>
                    Gets a list of the domain classes in the directory.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainDataDirectory.DomainModels">
      <summary>
                    Gets a list of domain models in the directory.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainDataDirectory.DomainObjects">
      <summary>
                    Gets a list of domain objects in the directory.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainObjectInfo" /> objects.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainClass(System.Guid)">
      <summary>
                    Finds a domain class by specifying its ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> object.
                </returns>
      <param name="id">
                    The ID of the domain class.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainClass(System.String)">
      <summary>
                    Finds a domain class by specifying its full name.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> object.
                </returns>
      <param name="classFullName">
                    The full name of the domain class.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainClass(System.Type)">
      <summary>
                    Finds a domain class by specifying its implementation type.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> object.
                </returns>
      <param name="type">
                    The implementation type used with the domain class.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainModel(System.Guid)">
      <summary>
                    Finds a domain model in the data directory.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object with the specified ID or null if not found.
                </returns>
      <param name="id">
                    The ID of the domain model.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainModel(System.String)">
      <summary>
                    Finds a domain model by its full name.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object with the specified ID or null if not found.
                </returns>
      <param name="modelFullName">
                    The full name of the domain model.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainModel(System.Type)">
      <summary>
                    Finds a domain model by specifying its implementation type.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object with the specified ID or null if not found.
                </returns>
      <param name="type">
                    The implementation type for the domain model.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainProperty(System.Guid)">
      <summary>
                    Finds a domain property with a specific ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyInfo" /> object or null if not found.
                </returns>
      <param name="id">
                    The ID of the domain property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainRelationship(System.Guid)">
      <summary>
                    Finds a domain relationship with a specific ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo" /> object or null if not found.
                </returns>
      <param name="id">
                    The ID of the domain relationship.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainRelationship(System.String)">
      <summary>
                    Finds a domain relationship with a specific ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo" /> object or null if not found.
                </returns>
      <param name="relationshipFullName">
                    The full name of the domain relationship.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainRelationship(System.Type)">
      <summary>
                    Finds a domain relationship by implementation type.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo" /> object or null if not found.
                </returns>
      <param name="type">
                    The implementation type for the relationship.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.FindDomainRole(System.Guid)">
      <summary>
                    Finds a domain role with a specific ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> object or null if not found.
                </returns>
      <param name="id">
                    The ID of the domain role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainClass(System.Guid)">
      <summary>
                    Gets a domain class with a specific ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> object that has the specified ID.
                </returns>
      <param name="id">
                    The ID of the domain class.
                </param>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain class is not found.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainClass(System.String)">
      <summary>
                    Gets a domain class by full name.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> object with the specified name. 
                </returns>
      <param name="classFullName">
                    The full name of the domain class.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    If a null reference (Nothing in Visual Basic) is passed in as an argument.
                </exception>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain class is not found.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainClass(System.Type)">
      <summary>
                    Gets a domain class by implementation type.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> object of the specified type.
                </returns>
      <param name="type">
                    The implementation type for the domain class.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    If a null reference (Nothing in Visual Basic) is passed in as an argument.
                </exception>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain class is not found.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainModel(System.Guid)">
      <summary>
                    Gets a domain model with a specific ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object with the specified ID.
                </returns>
      <param name="id">
                    The ID of the domain model.
                </param>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain model is not found.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainModel(System.String)">
      <summary>
                    Gets a domain model by full name.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object with the specified name.
                </returns>
      <param name="modelFullName">
                    The full name of the domain model.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    If a null reference (Nothing in Visual Basic) is passed in as an argument.
                </exception>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain model is not found.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainModel(System.Type)">
      <summary>
                    Gets a domain model by its implementation type.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object with the specified name.
                </returns>
      <param name="type">
                    The implementation type for the domain model.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    If a null reference (Nothing in Visual Basic) is passed in as an argument.
                </exception>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain model is not found.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainProperty(System.Guid)">
      <summary>
                    Gets a domain property with a specific ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyInfo" /> object with the specified ID.
                </returns>
      <param name="id">
                    The ID of the domain property.
                </param>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain property is not found.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainRelationship(System.Guid)">
      <summary>
                    Gets a domain relationship with a specific ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo" /> object with the specified ID.
                </returns>
      <param name="id">
                    The ID of the domain relationship.
                </param>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain relationship is not found.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainRelationship(System.String)">
      <summary>
                    Gets a domain relationship by the full name.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo" /> object with the specified full name.
                </returns>
      <param name="relationshipFullName">
                    The full name of the domain relationship.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    If a null reference (Nothing in Visual Basic) is passed in as an argument.
                </exception>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain relationship is not found.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainRelationship(System.Type)">
      <summary>
                    Gets a domain relationship by the implementation type.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo" /> object of the specified type.
                </returns>
      <param name="type">
                    The implementation type for the relationship.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    If a null reference (Nothing in Visual Basic) is passed in as an argument.
                </exception>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain relationship is not found.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataDirectory.GetDomainRole(System.Guid)">
      <summary>
                    Gets a domain role with a specific ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> object with the specified ID.
                </returns>
      <param name="id">
                    The ID of the domain role.
                </param>
      <exception cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
                    If the requested domain role is not found.
                </exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException">
      <summary>
                    This exception is thrown by the DomainDataDirectory class when a domain element that has a specific identity is not found in the directory.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException" /> class. 
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainDataNotFoundException" /> class. 
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainModel">
      <summary>
                    Represents a domain model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.#ctor(Microsoft.VisualStudio.Modeling.Store,System.Guid)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainModel" /> class. 
                </summary>
      <param name="store">
                    The store that contains the domain model.
                </param>
      <param name="domainModelId">
                    The ID of the domain model.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.CreateElement(Microsoft.VisualStudio.Modeling.Partition,System.Type,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
      <summary>
                    Creates an element of a specified type.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> created.
                </returns>
      <param name="partition">
                    The partition where element is to be created.
                </param>
      <param name="elementType">
                    Element type which belongs to this domain model.
                </param>
      <param name="propertyAssignments">
                    An array of new element property assignments.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.CreateElementLink(Microsoft.VisualStudio.Modeling.Partition,System.Type,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
      <summary>
                    Creates an element link of a specified type.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.ElementLink" /> created.
                </returns>
      <param name="partition">
                    The partition where the element link is to be created.
                </param>
      <param name="elementLinkType">
                    Element link type to create, which belongs to this domain model.
                </param>
      <param name="roleAssignments">
                    An array of relationship role assignments for the new element link.
                </param>
      <param name="propertyAssignments">
                    An array of new element link property assignments.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModel.DomainModelInfo">
      <summary>
                    Gets information about the domain model.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.GetClosureFilter(Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement})">
      <summary>
                    Returns an <see cref="T:Microsoft.VisualStudio.Modeling.IElementVisitorFilter" /> that corresponds to the particular closure type.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.IElementVisitorFilter" /> object. 
                </returns>
      <param name="type">
                    A closure type.
                </param>
      <param name="rootElements">
                    A collection of root elements.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.GetClosureVisitor(Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement})">
      <summary>
                    Returns an IElementVisitor that corresponds to the particular closure type.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.IElementVisitor" /> object.
                </returns>
      <param name="type">
                    A closure type.
                </param>
      <param name="rootElements">
                    A collection of root elements.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.GetCustomDomainModelTypes">
      <summary>
                    Gets the non-generated domain model types.
                </summary>
      <returns>
                    An array of types.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.GetCustomDomainProperties">
      <summary>
                    Gets the non-generated domain properties.
                </summary>
      <returns>
                    An array of <see cref="T:Microsoft.VisualStudio.Modeling.DomainModel.DomainMemberInfo" /> objects that represent property data.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.GetCustomDomainRoles">
      <summary>
                    Gets the non-generated domain roles.
                </summary>
      <returns>
                    An array of <see cref="T:Microsoft.VisualStudio.Modeling.DomainModel.DomainRolePlayerInfo" /> objects.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.GetGeneratedDomainModelTypes">
      <summary>
                    Gets the generated domain model types.
                </summary>
      <returns>
                    An array of types.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.GetGeneratedDomainProperties">
      <summary>
                    Gets the generated domain properties.
                </summary>
      <returns>
                    An array of <see cref="T:Microsoft.VisualStudio.Modeling.DomainModel.DomainMemberInfo" /> objects that represent property data.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.GetGeneratedDomainRoles">
      <summary>
                    Gets the generated domain roles.
                </summary>
      <returns>
                    An array of <see cref="T:Microsoft.VisualStudio.Modeling.DomainModel.DomainRolePlayerInfo" /> objects that represent role data.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModel.ResourceManager">
      <summary>
                    Gets the resource manager for the domain model.
                </summary>
      <returns>
                    The resource manager for the domain model.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModel.Store">
      <summary>
                    Gets the store which contains this instance of the domain model.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainModel.DomainMemberInfo">
      <summary>
                    Stores information about a domain property in a domain model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.DomainMemberInfo.#ctor(System.Type,System.String,System.Guid,System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainModel.DomainMemberInfo" /> class. 
                </summary>
      <param name="domainClassType">
                    The type of the domain object that this property is bound to.
                </param>
      <param name="propertyName">
                    The name of this property.
                </param>
      <param name="id">
                    The ID of this property.
                </param>
      <param name="valueHandlerType">
                    The type of the handler for this property.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModel.DomainMemberInfo.DomainClassType">
      <summary>
                    Get the domain class that declares the property.
                </summary>
      <returns>
                    The type of the domain class.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModel.DomainMemberInfo.Id">
      <summary>
                    Gets the ID of the property.
                </summary>
      <returns>
                    The ID of the property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModel.DomainMemberInfo.Name">
      <summary>
                    Gets the name of the property.
                </summary>
      <returns>
                    The name of the property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModel.DomainMemberInfo.ValueHandlerType">
      <summary>
                    Gets the type of value handler for the property.
                </summary>
      <returns>
                    The type of the value handler for the property.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainModel.DomainRolePlayerInfo">
      <summary>
                    Stores information that is used by the domain model reflector to locate a domain role.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainModel.DomainRolePlayerInfo.#ctor(System.Type,System.String,System.Guid)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainModel.DomainRolePlayerInfo" /> class. 
                </summary>
      <param name="relationshipType">
                    Type of the relationship for this role.
                </param>
      <param name="propertyName">
                    The name of this role.
                </param>
      <param name="id">
                    The ID for this role.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModel.DomainRolePlayerInfo.DomainRelationshipType">
      <summary>
                    Get the domain relationship that this role belongs to.
                </summary>
      <returns>
                    The type for the domain relationship.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModel.DomainRolePlayerInfo.Id">
      <summary>
                    Gets the ID of this role.
                </summary>
      <returns>
                    The ID for this role.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModel.DomainRolePlayerInfo.PropertyName">
      <summary>
                    Gets the name of the property for this role.
                </summary>
      <returns>
                    The name of the property for this role.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainModelInfo">
      <summary>
                    Represents a domain model definition.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModelInfo.DomainClasses">
      <summary>
                    Gets a list of the domain classes that are defined in this domain model.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModelInfo.DomainModel">
      <summary>
                    Gets the domain model that this domain object belongs to.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModelInfo.DomainRelationships">
      <summary>
                    Gets a list of the domain relationships that are defined in this domain model
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModelInfo.ExtendedDomainModels">
      <summary>
                    Gets a list of the domain models that this domain model extends.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModelInfo.ImplementationType">
      <summary>
                    Gets the implementation type of this domain model.
                </summary>
      <returns>
                    The type for this domain model.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainModelInfo.MonikerResolver">
      <summary>
                    Gets a moniker resolver instance for this domain model.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.IMonikerResolver" /> object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainObjectIdAttribute">
      <summary>
                    Represents the ID of a domain object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainObjectIdAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainObjectIdAttribute" /> class. 
                </summary>
      <param name="id">
                    The ID for the domain object.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainObjectIdAttribute.Id">
      <summary>
                    Gets the ID for the domain object.
                </summary>
      <returns>
                    The ID for the domain object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainObjectInfo">
      <summary>
                    Represents an element in a domain model.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainObjectInfo.DisplayName">
      <summary>
                    Gets the display name of the element.
                </summary>
      <returns>
                    The name of the element.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainObjectInfo.DomainModel">
      <summary>
                    Gets the domain model to which the element is assigned.
                </summary>
      <returns>
                    The domain model to which the element is assigned.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainObjectInfo.Id">
      <summary>
                    Gets the ID of the element.
                </summary>
      <returns>
                    The ID of the element.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainObjectInfo.Name">
      <summary>
                    Gets the name of the element.
                </summary>
      <returns>
                    The name of the domain object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainObjectInfo.ToString">
      <summary>
                    Converts the element to a string.
                </summary>
      <returns>
                    The element as a string.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainPropertyAttribute">
      <summary>
                    Indicates that the target is a domain property of a domain class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyAttribute.#ctor">
      <summary>
                    Initializes a new instance of the DomainPropertyAttribute class.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainPropertyAttribute.Kind">
      <summary>
                    Gets or sets the domain property kind for the target domain property.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyKind" /> object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainPropertyInfo">
      <summary>
                    Represents a property of a domain class.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.DefaultValue">
      <summary>
                    Gets the default value of this domain property.
                </summary>
      <returns>
                    An object that represents the default value.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.DomainClass">
      <summary>
                    Gets the domain class where this property is declared.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.DomainModel">
      <summary>
                    Gets domain model where the domain class that has this property is defined.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.ElementNameProvider">
      <summary>
                    Gets a unique name provider for this domain property.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.ElementNameProvider" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.GetValue(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets the value of a property for a specific model element.
                </summary>
      <returns>
                    The value of a property for a specific model element.
                </returns>
      <param name="element">
                    The element to get the property value.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.Kind">
      <summary>
                    Gets the kind for this property.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyKind" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.NotifyValueChange(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Notifies listeners that a value for a property has changed. 
                </summary>
      <param name="element">
                    The element whose the property value changed fires a notification.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.PropertyInfo">
      <summary>
                    Gets the information about the domain property.
                </summary>
      <returns>
                    The information about the domain property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.PropertyType">
      <summary>
                    Gets the type that is assigned to the property.
                </summary>
      <returns>
                    The type that is assigned to the property.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.SetValue(Microsoft.VisualStudio.Modeling.ModelElement,System.Object)">
      <summary>
                    Sets the property value on a given model element.
                </summary>
      <param name="element">
                    Element to set the value on.
                </param>
      <param name="value">
                    Property value to set.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainPropertyInfo.ValueHandler">
      <summary>
                    Gets the value handler for this property.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler" /> object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainPropertyKind">
      <summary>
                    Specifies the type of domain property.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.DomainPropertyKind.Normal">
      <summary>
                    A normal domain property.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.DomainPropertyKind.Calculated">
      <summary>
                    A calculated domain property.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.DomainPropertyKind.CustomStorage">
      <summary>
                    A custom-stored domain property.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler">
      <summary>
                    Represents the base class for domain property value handlers.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler.DomainPropertyId">
      <summary>
                    Gets the ID of the domain property supported by this handler.
                </summary>
      <returns>
                    The ID of the domain property.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler`2">
      <summary>
                    Represents the base class for strong-type domain property handlers.
                </summary>
      <typeparam name="TElement"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler`2.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler`2" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler`2.GetValue(`0)">
      <summary>
                    Gets the value of a domain property for a specified element.
                </summary>
      <returns>
                    Property value.
                </returns>
      <param name="element">
                    The element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler`2.OnValueChanged(`0,`1,`1)">
      <summary>
                    Occurs after a property value has been changed.
                </summary>
      <param name="element">
                    The element.
                </param>
      <param name="oldValue">
                    The current value of the property.
                </param>
      <param name="newValue">
                    The new value of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler`2.OnValueChanging(`0,`1,`1)">
      <summary>
                    Alerts listeners when a property value is about to change.
                </summary>
      <param name="element">
                    The element.
                </param>
      <param name="oldValue">
                    The current value of the property.
                </param>
      <param name="newValue">
                    The new value of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler`2.SetValue(`0,`1)">
      <summary>
                    Sets a domain property value for a specified element.
                </summary>
      <param name="element">
                    The element.
                </param>
      <param name="newValue">
                    The new value of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler`2.ValueChanged(`0,`1,`1)">
      <summary>
                    Adds a transaction record and raises the OnValueChanged event.
                </summary>
      <param name="element">
                    The element.
                </param>
      <param name="oldValue">
                    The current value of the property.
                </param>
      <param name="newValue">
                    The new value of the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler`2.ValueChanging(`0,`1,`1)">
      <summary>
                    Performs validation and raises the <see cref="M:Microsoft.VisualStudio.Modeling.DomainPropertyValueHandler`2.OnValueChanging(`0,`1,`1)" /> event.
                </summary>
      <param name="element">
                    The element.
                </param>
      <param name="oldValue">
                    The current value of the property.
                </param>
      <param name="newValue">
                    The new value of the property.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    Operation is invoked outside of modeling transaction scope or there was an attempt to set a calculated property.
                </exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainRelationshipAttribute">
      <summary>
                    Indicates that the target is a domain relationship.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRelationshipAttribute.#ctor">
      <summary>
                    Initializes a new instance of the DomainRelationshipAttribute class.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRelationshipAttribute.AllowsDuplicates">
      <summary>
                    Gets or sets whether domain relationship allows creating multiple instances between the same pair of elements.
                </summary>
      <returns>true if multiple instances between the same pair of elements is permitted; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRelationshipAttribute.IsEmbedding">
      <summary>
                    Gets and sets whether the domain object in the source role embeds domain objects in the target role.
                </summary>
      <returns>true if the source role objects embed the target role objects; otherwise, false. 
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo">
      <summary>
                    Represents the metadata about a domain relationship.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo.AllowsDuplicates">
      <summary>
                    Gets whether multiple instances of this domain relationship are allowed between the same pair of elements.
                </summary>
      <returns>true if the multiple instances are allowed; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo.BaseDomainRelationship">
      <summary>
                    Gets the base domain relationship, if any.
                </summary>
      <returns>
                    A <see cref="P:Microsoft.VisualStudio.Modeling.Moniker.DomainRelationshipInfo" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo.DomainRoles">
      <summary>
                    Gets a read-only list of the domain roles for this relationship.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> objects.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo.FindDomainRole(System.String)">
      <summary>
                    Finds a domain role by name.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> object if found; otherwise, null.
                </returns>
      <param name="roleName">
                    Domain role name
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo.IsEmbedding">
      <summary>
                    Gets whether the player of the source role logically contains the players of the target role.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer">
      <summary>
                    Represents the base class for all generated domain serializers for domain relationships.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer.MonikerizeReference(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,System.String,Microsoft.VisualStudio.Modeling.Store)">
      <param name="serializationContext"></param>
      <param name="sourceElement"></param>
      <param name="domainClassId"></param>
      <param name="monikerString"></param>
      <param name="store"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer.SerializeReference(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="serializationContext"></param>
      <param name="sourceElement"></param>
      <param name="targetElement"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer.SerializesId"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer.TryCreateDerivedInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
      <param name="serializationContext"></param>
      <param name="reader"></param>
      <param name="partition"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer.UsesFullForm"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainRoleAttribute">
      <summary>
                    Indicates that the target is a domain role of a domain relationship.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleAttribute.#ctor(Microsoft.VisualStudio.Modeling.DomainRoleOrder)">
      <summary>
                    Initializes a new instance of DomainRoleAttribute class.
                </summary>
      <param name="order">
                    The order of the domain role in the domain relationship.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleAttribute.Multiplicity">
      <summary>
                    Gets the multiplicity setting of the domain role in the domain relationship.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Multiplicity" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleAttribute.Order">
      <summary>
                    Gets the order of the domain role in the domain relationship.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleOrder" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleAttribute.PropagatesCopy">
      <summary>
                    Gets or sets whether the domain role propagates copy operations through this role to the opposite role.
                </summary>
      <returns>true if the copy operations are propagated; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleAttribute.PropagatesDelete">
      <summary>
                    Gets or sets whether the domain role propagates delete operations through this role to the opposite role.
                </summary>
      <returns>true if the delete operations are propagated; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleAttribute.PropertyDisplayNameKey">
      <summary>
                    Gets or sets the key for the Display Name property.
                </summary>
      <returns>
                    The key for the Display Name property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleAttribute.PropertyName">
      <summary>
                    Gets or sets the name of the property generated on the role player to access opposite role players.
                </summary>
      <returns>
                    A property name.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleAttribute.RolePlayer">
      <summary>
                    Gets or sets the domain class playing this role.
                </summary>
      <returns>
                    A domain class.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo">
      <summary>
                    Represents a role of a domain relationship.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.BaseDomainRole">
      <summary>
                    Gets the base domain role for this role.
                </summary>
      <returns>
                    The base domain role for this role.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.DomainModel">
      <summary>
                    Gets the domain model that contains information about this role.
                </summary>
      <returns>
                    The domain model that contains information about this role.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.DomainRelationship">
      <summary>
                    Gets the domain relationship that this domain role belongs to.
                </summary>
      <returns>
                    The domain relationship that this domain role belongs to.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetAllElementLinks(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets a list of all element links that the given element participates in.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of the links connected to the element.
                </returns>
      <param name="rolePlayerElement">
                    The element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetElementLinks``1(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets a list of elements that are linked to a role. 
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of links.
                </returns>
      <param name="rolePlayerElement">
                    The element assigned to the role.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetElementLinks(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets element links when a given element plays this role.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of links.
                </returns>
      <param name="rolePlayerElement">
                    The element playing this role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetElementLinks``1(Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean)">
      <summary>
                    Gets element links when a given element plays this role.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of links
                </returns>
      <param name="rolePlayerElement">
                    The element playing this role.
                </param>
      <param name="excludeDerivedRolesLinks">
                    Determines whether to exclude links that are attached to derived role players.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetElementLinks(Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean)">
      <summary>
                    Gets element links when a given element plays this role.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of links.
                </returns>
      <param name="rolePlayerElement">
                    The element playing this role.
                </param>
      <param name="excludeDerivedRolesLinks">
                    Determines whether to exclude links that are attached to derived role players.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetElementLinks``1(Microsoft.VisualStudio.Modeling.ModelElement,System.Guid)">
      <summary>
                    Gets element links when a given element plays a given role.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of links.
                </returns>
      <param name="rolePlayerElement">
                    The element playing the role.
                </param>
      <param name="domainRoleId">
                    ID of the role played by the element.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetElementLinksToElement``1(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets the links between a source and a target element.
                </summary>
      <returns>
                    The links between the source and target element.
                </returns>
      <param name="sourceRolePlayerElement">
                    The source element.
                </param>
      <param name="targetRolePlayerElement">
                    The target element.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetElementLinksToElement(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets the links between a source and a target element.
                </summary>
      <returns>
                    The links between the source and the target element.
                </returns>
      <param name="sourceRolePlayerElement">
                    The source element.
                </param>
      <param name="targetRolePlayerElement">
                    The target element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetElementLinksToElement``1(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean)">
      <summary>
                    Gets a collection of links between a source and target role.
                </summary>
      <returns>
                    The links between the source and target element.
                </returns>
      <param name="sourceRolePlayerElement">
                    The source element.
                </param>
      <param name="targetRolePlayerElement">
                    The target element.
                </param>
      <param name="excludeDerivedRolesLinks">true to exclude links that are assigned to a child source or target element; otherwise, false.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetElementLinksToElement(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean)">
      <summary>
                    Gets the links between a source and target element.
                </summary>
      <returns>
                    The links between the source and the target element.
                </returns>
      <param name="sourceRolePlayerElement">
                    The source element.
                </param>
      <param name="targetRolePlayerElement">
                    The target element.
                </param>
      <param name="excludeDerivedRolesLinks">true to exclude links that are assigned to a child source or target element; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetLinkedElement(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets the element linked to this element in the relationship.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> on the other side of the relationship.
                </returns>
      <param name="rolePlayerElement">
                    The element playing this role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetLinkedElement(Microsoft.VisualStudio.Modeling.ModelElement,System.Guid)">
      <summary>
                    Gets the element that is linked to this element.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> on the other side of the relationship.
                </returns>
      <param name="rolePlayerElement">
                    The element playing this role.
                </param>
      <param name="domainRoleId">
                    The role played by the element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetLinkedElements(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets a list of elements that are linked to this role. 
                </summary>
      <returns>
                    The collection of element links that play the opposite role in links that the element participates in.
                </returns>
      <param name="rolePlayerElement">
                    The element assigned to this role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetRolePlayer(Microsoft.VisualStudio.Modeling.ElementLink)">
      <summary>
                    Gets the link role player that corresponds to this role.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> that is the role player for this role.
                </returns>
      <param name="link">
                    The element link.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetRolePlayer(Microsoft.VisualStudio.Modeling.ElementLink,System.Guid)">
      <summary>
                    Gets the specified role player from a link.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> that is the role player.
                </returns>
      <param name="link">
                    The element link.
                </param>
      <param name="domainRoleId">
                    The domain role to get the role player for.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetRolePlayerMoniker(Microsoft.VisualStudio.Modeling.ElementLink)">
      <summary>
                    Gets the link role player moniker corresponding to this role.
                </summary>
      <returns>
                    The role player moniker for this role.
                </returns>
      <param name="link">
                    The element link.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetSourceRolePlayer(Microsoft.VisualStudio.Modeling.ElementLink)">
      <summary>
                    Gets the source element that is attached to a link.
                </summary>
      <returns>
                    The source element that is attached to a link.
                </returns>
      <param name="link">
                    The link.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.GetTargetRolePlayer(Microsoft.VisualStudio.Modeling.ElementLink)">
      <summary>
                    Gets the target element that is attached to a link.
                </summary>
      <returns>
                    The target element that is attached to a link.
                </returns>
      <param name="link">
                    The link.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.IsEmbedding">
      <summary>
                    Gets the domain role and verifies whether the player of this role logically contains the players of the other role or roles in this relationship.
                </summary>
      <returns>true if the player of this role logically contains players of the other role or roles; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.IsMany">
      <summary>
                    Gets the domain role and verifies whether the multiplicity allows multiple objects. 
                </summary>
      <returns>true if multiple objects are allowed; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.IsOne">
      <summary>
                    Gets the domain role and verifies whether the multiplicity allows a maximum of one object.
                </summary>
      <returns>true if the multiplicity allows one object; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.IsOptional">
      <summary>
                    Gets the domain role and verifies whether the multiplicity allows zero objects. If it does allow zero objects, this makes it optional.
                </summary>
      <returns>true if the zero objects is allowed; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.IsSource">
      <summary>
                    Gets the domain role and verifies that it is source code.
                </summary>
      <returns>true if this is the source role; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.LinkPropertyInfo">
      <summary>
                    Gets the property information for this domain role.
                </summary>
      <returns>
                    A PropertyInfo object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.Multiplicity">
      <summary>
                    Gets the multiplicity of this role.
                </summary>
      <returns>
                    The multiplicity of this role.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.OppositeDomainRole">
      <summary>
                    Gets the domain role opposite this domain role in the domain relationship.
                </summary>
      <returns>
                    The domain role opposite this domain role in the domain relationship.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.PropagatesCopy">
      <summary>
                    Gets the domain role and verifies whether the element playing this role in a link will be copied when the opposite role player element is copied.
                </summary>
      <returns>true if the element playing this role in a link will be copied; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.PropagatesDelete">
      <summary>
                    Gets the domain role and verifies whether the element playing this role in a link will be deleted when the opposite role player element or the link itself is deleted.
                </summary>
      <returns>true if the element playing this role in a link will be deleted; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.PropertyDisplayName">
      <summary>
                    Gets the name of the property that is displayed to the user on the diagram.
                </summary>
      <returns>
                    The name of the property that is displayed to the user on the diagram.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.PropertyName">
      <summary>
                    Gets the name of the accessor property for this role on the role player domain class.
                </summary>
      <returns>
                    The name of the accessor property for this role.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainRoleInfo.RolePlayer">
      <summary>
                    Gets the domain class that plays this role.
                </summary>
      <returns>
                    The domain class that plays this role.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.SetLinkedElement(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Sets the element on the other side of the relationship.
                </summary>
      <param name="rolePlayerElement">
                    The element playing this role.
                </param>
      <param name="linkedElement">
                    The element playing the opposite role in the domain relationship.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.SetLinkedElement(Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Sets the link role player on the other side of the relationship.
                </summary>
      <param name="rolePlayerElement">
                    The element playing a role
                </param>
      <param name="domainRoleId">
                    The role played by the element.
                </param>
      <param name="linkedElement">
                    The element on the other side of relationship.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.SetRolePlayer(Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Sets the link role player that corresponds to this role.
                </summary>
      <param name="link">
                    The element link.
                </param>
      <param name="newRolePlayerElement">
                    The new role player for this role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.SetRolePlayer(Microsoft.VisualStudio.Modeling.ElementLink,System.Guid,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Assigns an element to a role in a relationship.
                </summary>
      <param name="link">
                    The element link.
                </param>
      <param name="domainRoleId">
                    Domain role to set role player for.
                </param>
      <param name="newRolePlayerElement">
                    The new role player.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.SetRolePlayerMoniker(Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.Moniker)">
      <summary>
                    Sets the link role player moniker corresponding to this role.
                </summary>
      <param name="link">
                    The element link.
                </param>
      <param name="rolePlayerMoniker">
                    The new role player moniker for this role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainRoleInfo.SetRolePlayerMoniker(Microsoft.VisualStudio.Modeling.ElementLink,System.Guid,Microsoft.VisualStudio.Modeling.Moniker)">
      <summary>
                    Sets a specified role player on a link.
                </summary>
      <param name="link">
                    The element link.
                </param>
      <param name="domainRoleId">
                    The domain role to set the role player for.
                </param>
      <param name="rolePlayerMoniker">
                    The new role player moniker for this role.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainRoleOrder">
      <summary>
                    Specifies the direction of a domain role in a domain relationship.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.DomainRoleOrder.Source">
      <summary>
                    A source domain role.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.DomainRoleOrder.Target">
      <summary>
                    A target domain role.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainXmlSerializationBehavior">
      <summary>
                    Represents all XML serialization behavior-generated classes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainXmlSerializationBehavior.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainXmlSerializationBehavior" /> class. 
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainXmlSerializationBehavior.AllSerializers">
      <summary>
                    Gets the implementation types.
                </summary>
      <returns>
                    An enumerator.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory">
      <summary>
                    Combines XML serialization behaviors from different domain models together.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory.#ctor(Microsoft.VisualStudio.Modeling.DomainXmlSerializationBehavior[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory" /> class.
                </summary>
      <param name="serializationBehaviors">
                    An array of serialization behaviors from which the mapping entries are added.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory.AddBehavior(Microsoft.VisualStudio.Modeling.DomainXmlSerializationBehavior)">
      <summary>
                    Adds a serialization behavior to this dictionary.
                </summary>
      <param name="serializationBehavior">
                    A serialization behavior from which the mapping entries are added.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory.GetSerializer(System.Guid)">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer" /> instance for the given domain class ID.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer" /> instance for the given <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" />, or null if there is no serializer for the given domain class ID.
                </returns>
      <param name="domainClassId">
                    The ID for the domain class.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectoryEntry">
      <summary>
                    Associates one domain class ID to its DomainClassXmlSerializer type.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectoryEntry.#ctor(System.Guid,System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectoryEntry" /> class. 
                </summary>
      <param name="domainClassId">
                    The domain class ID of the entry.
                </param>
      <param name="serializerType">
                    The corresponding <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer" /> type.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectoryEntry.DomainClassId">
      <summary>
                    Gets the domain class ID.
                </summary>
      <returns>
                    The ID for the domain class.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectoryEntry.SerializerType">
      <summary>
                    Gets the type of <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer" /> for the domain class.
                </summary>
      <returns>
                    The type of <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassXmlSerializer" /> for the domain class.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementAddedEventArgs">
      <summary>
                    Provides data for the ElementAdded event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementAddedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,Microsoft.VisualStudio.Modeling.PropertyAssignment[],Microsoft.VisualStudio.Modeling.ChangeSource)">
      <param name="directory"></param>
      <param name="domainClass"></param>
      <param name="elementId"></param>
      <param name="assignments"></param>
      <param name="changeSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementAddedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,Microsoft.VisualStudio.Modeling.PropertyAssignment[],Microsoft.VisualStudio.Modeling.ChangeSource,Microsoft.VisualStudio.Modeling.TransactionContext)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementAddedEventArgs.GetAssignments"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementAddedEventManager">
      <summary>
                    Manages element added events.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementClosureWalker">
      <summary>
                    Represents a walker that builds closures on model elements.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementClosureWalker.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="partition"></param>
      <param name="type"></param>
      <param name="rootList"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementClosureWalker.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},System.Boolean)">
      <param name="partition"></param>
      <param name="type"></param>
      <param name="rootList"></param>
      <param name="bypassDemandLoading"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementClosureWalker.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo})">
      <param name="partition"></param>
      <param name="type"></param>
      <param name="rootList"></param>
      <param name="bypassDemandLoading"></param>
      <param name="domainRolesToNotPropagate"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementClosureWalker.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo},System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="partition"></param>
      <param name="type"></param>
      <param name="rootList"></param>
      <param name="bypassDemandLoading"></param>
      <param name="domainRolesToNotPropagate"></param>
      <param name="rootDomainRolesToNotVisit"></param>
      <param name="elementsToNotVisit"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementClosureWalker.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo},System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.DomainRoleInfo})">
      <param name="partition"></param>
      <param name="type"></param>
      <param name="rootList"></param>
      <param name="bypassDemandLoading"></param>
      <param name="domainRolesToNotPropagate"></param>
      <param name="rootDomainRolesToNotVisit"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementClosureWalker.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo})">
      <param name="partition"></param>
      <param name="type"></param>
      <param name="rootList"></param>
      <param name="domainRolesToNotPropagate"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementClosureWalker.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo},System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.DomainRoleInfo})">
      <param name="partition"></param>
      <param name="type"></param>
      <param name="rootList"></param>
      <param name="domainRolesToNotPropagate"></param>
      <param name="rootDomainRolesToNotVisit"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementClosureWalker.ClosureList"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementClosureWalker.Context"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs">
      <summary>
                    Provides data for the ElementDeleted event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,Microsoft.VisualStudio.Modeling.ChangeSource)">
      <param name="directory"></param>
      <param name="domainClass"></param>
      <param name="elementId"></param>
      <param name="changeSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,Microsoft.VisualStudio.Modeling.ChangeSource,Microsoft.VisualStudio.Modeling.TransactionContext)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs.CustomStoredPropertyAssignments"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs.ModelElement"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementDeletedEventManager">
      <summary>
                    Manages element removed events.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementDeletingEventArgs">
      <summary>
                    Provides data for the ElementDeleting event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementDeletingEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,Microsoft.VisualStudio.Modeling.ChangeSource)">
      <param name="directory"></param>
      <param name="domainClass"></param>
      <param name="elementId"></param>
      <param name="changeSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementDeletingEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,Microsoft.VisualStudio.Modeling.ChangeSource,Microsoft.VisualStudio.Modeling.TransactionContext)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementDeletingEventArgs.CustomStoredPropertyAssignments"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementDeserializedRule"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementDeserializedRule.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementDeserializedRule.ElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementEventArgs">
      <summary>
                    Provides data for notifications associated with a model element. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,Microsoft.VisualStudio.Modeling.ChangeSource)">
      <param name="directory"></param>
      <param name="domainClass"></param>
      <param name="elementId"></param>
      <param name="changeSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,Microsoft.VisualStudio.Modeling.ChangeSource,Microsoft.VisualStudio.Modeling.TransactionContext)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementEventArgs.DomainClass"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementEventArgs.DomainModel"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementEventArgs.ElementId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementEventArgs.ModelElement"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementEventManager">
      <summary>
                    In derived classes, provides a mechanism for observers to register for and be notified of changes to an element within the scope of the store.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementEventManager.#ctor">
      <summary>
                    Initializes a new instance of the ElementEventManager class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementEventManager.Add(Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Delegate)">
      <summary>
                    Adds a handler for events at the domain class level.
                </summary>
      <param name="domainClass">
                    The domain class or domain relationship for which events are to be handled.
                </param>
      <param name="handler">
                    The event handler.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementEventManager.Add(Microsoft.VisualStudio.Modeling.DomainModelInfo,System.Delegate)">
      <summary>
                    Adds a handler for events at the domain model level.
                </summary>
      <param name="domainModel">
                    The domain model for which events are to be handled.
                </param>
      <param name="handler">
                    The event handler.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementEventManager.Remove(Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Delegate)">
      <summary>
                    Removes an event handler for a domain class or domain relationship.
                </summary>
      <param name="domainClass">
                    The domain class whose event handler is to be removed.
                </param>
      <param name="handler">
                    The event handler.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementEventManager.Remove(Microsoft.VisualStudio.Modeling.DomainModelInfo,System.Delegate)">
      <summary>
                    Removes an event handler for a particular domain model.
                </summary>
      <param name="domainModel">
                    The domain model whose event handler is to be removed.
                </param>
      <param name="handler">
                    The event handler.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementEventsBegunEventArgs">
      <summary>
                    Provides data for the ElementEventsBegun event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementEventsBegunEventArgs.#ctor(Microsoft.VisualStudio.Modeling.TransactionContext)">
      <param name="transactionContext"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementEventsBegunEventManager">
      <summary>
                    Manages events that have begun for elements.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementEventsEndedEventArgs">
      <summary>
                    Provides data for the ElementEventsEnded event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementEventsEndedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.TransactionContext)">
      <param name="transactionContext"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementEventsEndedEventManager">
      <summary>
                    Manages element events ended events.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementFactory">
      <summary>
                    Represents a factory of domain model objects.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementFactory.CreateElement(Microsoft.VisualStudio.Modeling.DomainClassInfo)">
      <summary>
                    Creates a new element instance of a specified type.
                </summary>
      <returns>
                    A new <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> object.
                </returns>
      <param name="domainClass">
                    The domain class of the object to be created.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementFactory.CreateElement(Microsoft.VisualStudio.Modeling.DomainClassInfo,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
      <summary>
                    Creates a new element instance of a specified type.
                </summary>
      <returns>
                    A new <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> object.
                </returns>
      <param name="domainClass">
                    The domain class of the object to be created.
                </param>
      <param name="propertyAssignments">
                    An array of property assignments to set immediately after element creation.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementFactory.CreateElement(System.Guid)">
      <summary>
                    Creates a new element instance of a specified type.
                </summary>
      <returns>
                    A new <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> object.
                </returns>
      <param name="domainClassId">
                    The ID of the domain class of the object to be created.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementFactory.CreateElement(System.Guid,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
      <summary>
                    Creates a new element instance of a specified type.
                </summary>
      <returns>
                    A new <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> object.
                </returns>
      <param name="domainClassId">
                    The ID of the domain class of the object to be created.
                </param>
      <param name="propertyAssignments">
                    An array of property assignments to set immediately after element creation.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementFactory.CreateElementLink(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,Microsoft.VisualStudio.Modeling.PropertyAssignment[],Microsoft.VisualStudio.Modeling.RoleAssignment[])">
      <summary>
                    Creates a new element link.
                </summary>
      <returns>
                    The element link.
                </returns>
      <param name="domainRelationship">
                    The domain relationship of the link to be created.
                </param>
      <param name="propertyAssignments">
                    An array of initial attribute value assignments.
                </param>
      <param name="roleAssignments">
                    An array of the elements playing roles in the domain relationship instance.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementFactory.CreateElementLink(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
      <summary>
                    Creates a new element link.
                </summary>
      <returns>
                    The element link.
                </returns>
      <param name="domainRelationship">
                    The domain relationship of the link to be created.
                </param>
      <param name="roleAssignments">
                    An array of the elements playing roles in the domain relationship instance.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementFactory.CreateElementLink(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Boolean,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
      <summary>
                    Creates a new element link.
                </summary>
      <returns>
                    The element link.
                </returns>
      <param name="domainRelationship">
                    The domain relationship of the link to be created.
                </param>
      <param name="bypassDemandLoading">true to bypass demand loading; otherwise, false. 
                </param>
      <param name="roleAssignments">
                    An array of the elements playing roles in the domain relationship instance.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementFactory.CreateElementLink(System.Guid,Microsoft.VisualStudio.Modeling.PropertyAssignment[],Microsoft.VisualStudio.Modeling.RoleAssignment[])">
      <summary>
                    Creates a new element link.
                </summary>
      <returns>
                    The element link.
                </returns>
      <param name="domainRelationshipId">
                    The ID of the domain relationship of the link to be created.
                </param>
      <param name="propertyAssignments">
                    An array of initial attribute value assignments.
                </param>
      <param name="roleAssignments">
                    An array of the elements playing roles in the domain relationship instance.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementFactory.CreateElementLink(System.Guid,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
      <summary>
                    Creates a new element link.
                </summary>
      <returns>
                    The element link.
                </returns>
      <param name="domainRelationshipId">
                    ID of the domain relationship of the link to be created.
                </param>
      <param name="roleAssignments">
                    An array of the elements playing roles in the domain relationship instance.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementFactory.CreateElementLink(System.Guid,System.Boolean,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
      <summary>
                    Creates a new element link.
                </summary>
      <returns>
                    The element link.
                </returns>
      <param name="domainRelationshipId">
                    The ID of the domain relationship of the link to be created.
                </param>
      <param name="bypassDemandLoading">true to bypass demand loading; otherwise, false. 
                </param>
      <param name="roleAssignments">
                    An array of the elements playing roles in the domain relationship instance.
                </param>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ElementFactory.IdPropertyAssignment">
      <summary>
                    Represents an array of elements that play roles in the domain relationship instance.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementGroup">
      <summary>
                    Provides a way to collect elements and element links.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroup.#ctor(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="partition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroup.#ctor(Microsoft.VisualStudio.Modeling.Store)">
      <param name="store"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroup.Add(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroup.AddGraph(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroup.AddGraph(Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean)">
      <param name="element"></param>
      <param name="isRootElement"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroup.AddRange(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="modelElements"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroup.CreatePrototype"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.ElementGroup.ElementGroupIdDictionary"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.ElementIds"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.ElementLinkIds"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.ElementLinks"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroup.GetElements"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroup.GetElements(System.Guid)">
      <param name="domainClassId"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.Id"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroup.MarkAsRoot(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="rootElement"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.ModelElements"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.Partition"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.RootElementIds"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.RootElements"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.SourceContext"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.TargetContext"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroup.UserData"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementGroupContext">
      <summary>
                    Stores context information about an element group.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupContext.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroupContext.ContextInfo"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupContext.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <param name="sender"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupContext.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype">
      <summary>
                    Contains the information necessary to recreate an <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroup" /> in any store.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.#ctor(Microsoft.VisualStudio.Modeling.ElementGroup,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="group"></param>
      <param name="rootElements"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.#ctor(Microsoft.VisualStudio.Modeling.Partition,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="partition"></param>
      <param name="rootElements"></param>
      <param name="closureGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.#ctor(Microsoft.VisualStudio.Modeling.Partition,System.Guid)">
      <param name="partition"></param>
      <param name="rootElementDomainClassId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.CanCreateElementGroup(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="partition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.CanCreateElementGroup(Microsoft.VisualStudio.Modeling.Store)">
      <param name="store"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.CreateElementGroup(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="partition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.CreateElementGroup(Microsoft.VisualStudio.Modeling.Store)">
      <param name="store"></param>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.CreatingKey"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.DefaultDataFormatName"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.ElementGroupIdDictionary"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.GetProtoElement(System.Guid)">
      <param name="id"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.GetProtoLinks(Microsoft.VisualStudio.Modeling.ProtoElementBase,System.Guid)">
      <param name="protoElementBase"></param>
      <param name="domainRoleId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.GetReconstitutedElement(Microsoft.VisualStudio.Modeling.Transaction,System.Guid)">
      <param name="transaction"></param>
      <param name="sourceElementId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.GetSourceRootElementId(System.Guid)">
      <param name="targetRootElementId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.IsInRole(Microsoft.VisualStudio.Modeling.ProtoElementBase,System.Guid)">
      <param name="protoElementBase"></param>
      <param name="domainRoleId"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.ProtoElementLinks"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.ProtoElements"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.ResolveProtoLinks(System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Modeling.ProtoLink},System.Guid)">
      <param name="protoLinksToResolve"></param>
      <param name="domainRoleId"></param>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.RootElementIdList"></member>
    <member name="F:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.RootElementList"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.RootProtoElements"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.SourceContext"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.SourceRootElementIds"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <param name="sender"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.TargetContext"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.TargetRootElementIds"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.ToString(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="partition"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementGroupPrototype.UserData"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementLink">
      <summary>
                    Base class for model element links.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementLink.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
      <summary>
                    Creates a new instance of the ElementLink class.
                </summary>
      <param name="partition">
                    The partition instance containing this ElementLink.
                </param>
      <param name="roleAssignments">
                    A set of role assignments for role player initialization.
                </param>
      <param name="propertyAssignments">
                    A set of attribute assignments for attribute initialization.
                </param>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ElementLink.DomainClassId">
      <summary>
                    ID of the domain class for the ElementLink.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementLink.GetDomainRelationship">
      <summary>
                    Gets the domain relationship that this ElementLink instantiates.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRelationshipInfo" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementLink.LinkedElements">
      <summary>
                    Gets a read-only collection of elements connected by this element link.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> objects connected by this element link.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementLink.MoveBefore(Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ElementLink)">
      <summary>
                    Move this link before a particular link in the relationship list.
                </summary>
      <param name="domainRole">
                    The role of the element in which to move this link.
                </param>
      <param name="successor">
                    The link that is to follow this link.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementLink.MoveToIndex(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Int32)">
      <summary>
                    Move this link to a specified index position in the list.
                </summary>
      <param name="domainRole">
                    The role of the element in which to move this link.
                </param>
      <param name="index">
                    The new index.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementLink.OnRolePlayerChanged(Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement,System.Int32)">
      <summary>
                    Called when the role player has been changed.
                </summary>
      <param name="domainRole">
                    DomainRoleInfo of the role that has changed.
                </param>
      <param name="oldPlayer">
                    The old role player.
                </param>
      <param name="newPlayer">
                    The new role player.
                </param>
      <param name="linkIndex">
                    The link index.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementLink.OnRolePlayerChanging(Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement,System.Int32)">
      <summary>
                    Called when the role player will be changed.
                </summary>
      <param name="domainRole">
                    DomainRoleInfo of the role that is changing.
                </param>
      <param name="oldPlayer">
                    The old role player.
                </param>
      <param name="newPlayer">
                    The new role player.
                </param>
      <param name="linkIndex">
                    The link index.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementMovedEventArgs">
      <summary>
                    Provides data for the ElementMoved event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementMovedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,System.Guid,System.Guid,Microsoft.VisualStudio.Modeling.ChangeSource)">
      <param name="directory"></param>
      <param name="domainClass"></param>
      <param name="elementId"></param>
      <param name="sourcePartitionId"></param>
      <param name="destinationPartitionId"></param>
      <param name="changeSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementMovedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,System.Guid,System.Guid,Microsoft.VisualStudio.Modeling.ChangeSource,Microsoft.VisualStudio.Modeling.TransactionContext)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementMovedEventArgs.DestinationPartitionId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementMovedEventArgs.SourcePartitionId"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementMovedEventManager">
      <summary>
                    Manages element moved events.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementNameAttribute">
      <summary>
                    Indicates the target domain property provides the element name property.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementNameAttribute.#ctor">
      <summary>
                    Initializes a new instance of the ElementNameAttribute class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementNameAttribute.#ctor(System.Type)">
      <summary>
                    Initializes a new instance of the ElementNameAttribute class by specifying the type of class that provides the element name.
                </summary>
      <param name="elementNameProvider">
                    The type of the element name provider class.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementNameAttribute.ElementNameProvider">
      <summary>
                    Gets the element name provider type.
                </summary>
      <returns>
                    The type of class that provides the element name.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementNameProvider">
      <summary>
                    Represents a name provider for domain elements.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementNameProvider.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ElementNameProvider" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementNameProvider.CustomSetUniqueNameCore(Microsoft.VisualStudio.Modeling.ModelElement,System.String,System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="element"></param>
      <param name="baseName"></param>
      <param name="siblings"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementNameProvider.DomainProperty">
      <summary>
                    Gets or sets the properties for the name provider.
                </summary>
      <returns>
                    The properties for the name provider.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementNameProvider.GetElementNames(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets a map of all unique element names for the elements of a given container and embedded role ID.
                </summary>
      <returns>
                    A Dictionary object where keys are all unique names and values are the first found element for a given name.
                </returns>
      <param name="container">
                    Embedding element.
                </param>
      <param name="embeddedDomainRole">
                    Domain role played by elements embedded by container.
                </param>
      <param name="excludedElement">
                    Element to be excluded from the search (can be null).
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="container" /> or <paramref name="embeddedDomainRole" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementNameProvider.GetLinkNames(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ElementLink)">
      <summary>
                    Gets a map of the link names for the links that are assigned to the role players.
                </summary>
      <returns>
                    The dictionary that contains the link names.
                </returns>
      <param name="rolePlayer">
                    The element to which the links are connected.
                </param>
      <param name="domainRole">
                    The role of the element.
                </param>
      <param name="excludedLink">
                    The links that must be excluded from the list.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementNameProvider.SetUniqueName(Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.String)">
      <summary>
                    Sets the name of a link that is assigned to an element.
                </summary>
      <param name="link">
                    The link.
                </param>
      <param name="indexingDomainRole">
                    The role of the element in the link.
                </param>
      <param name="baseName">
                    The name for the link.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementNameProvider.SetUniqueName(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.String)">
      <summary>
                    Sets a unique name on an element.
                </summary>
      <param name="element">
                    Element to assign a unique name.
                </param>
      <param name="container">
                    Container embedding the element.
                </param>
      <param name="embeddedDomainRole">
                    Role played by the element in the embedding relationship.
                </param>
      <param name="baseName">
                    String from which the generated name should be derived.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" />, <paramref name="container" /> or <paramref name="embeddedDomainRole" /> is a null reference.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    When called outside of a transaction context, the name property is calculated, or other modeling constraints are not satisfied.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    There are more than the maximum elements allowed in the container.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementNameProvider.SetUniqueNameCore(Microsoft.VisualStudio.Modeling.ModelElement,System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.Modeling.ModelElement})">
      <summary>
                    Sets the name of an element.
                </summary>
      <param name="element">
                    The element.
                </param>
      <param name="baseName">
                    The name for the element.
                </param>
      <param name="siblingNames">
                    Names that can be added to the base name.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementOperations">
      <summary>
                    Provides common operations that act upon a collection of model elements.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.#ctor(System.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Partition)">
      <param name="serviceProvider"></param>
      <param name="partition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Store)">
      <param name="serviceProvider"></param>
      <param name="store"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.AddCustomFormat(System.Windows.Forms.IDataObject,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType,System.Drawing.PointF)">
      <param name="data"></param>
      <param name="elements"></param>
      <param name="closureType"></param>
      <param name="sourcePosition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.AddElementGroupFormat(System.Windows.Forms.IDataObject,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType)">
      <param name="data"></param>
      <param name="elements"></param>
      <param name="closureType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.AddElementGroupFormat(System.Windows.Forms.IDataObject,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType,System.Boolean)">
      <param name="data"></param>
      <param name="elements"></param>
      <param name="closureType"></param>
      <param name="bypassDemandLoading"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.CanAddCustomFormat(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType)">
      <param name="elements"></param>
      <param name="closureType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.CanAddElementGroupFormat(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType)">
      <param name="elements"></param>
      <param name="closureType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.CanCopy(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="elements"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.CanCopy(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType)">
      <param name="elements"></param>
      <param name="closureType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.CanCopyCore(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType)">
      <param name="elements"></param>
      <param name="closureType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.CanMerge(Microsoft.VisualStudio.Modeling.ModelElement,System.Windows.Forms.IDataObject)">
      <param name="targetElement"></param>
      <param name="data"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.CanMergeElementGroupPrototype(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <param name="targetElement"></param>
      <param name="elementGroupPrototype"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.CanMergeElementGroupPrototype(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ProtoElementBase,Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <param name="targetElement"></param>
      <param name="toMergeProtoElement"></param>
      <param name="elementGroupPrototype"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.CanMove(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="elements"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.ChooseMergeTarget(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="proposedTargetElement"></param>
      <param name="elementGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.ChooseMergeTarget(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <param name="proposedTargetElement"></param>
      <param name="elementGroupPrototype"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.Copy(System.Windows.Forms.IDataObject,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="data"></param>
      <param name="elements"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.Copy(System.Windows.Forms.IDataObject,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType)">
      <param name="data"></param>
      <param name="elements"></param>
      <param name="closureType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.Copy(System.Windows.Forms.IDataObject,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType,System.Drawing.PointF)">
      <param name="data"></param>
      <param name="elements"></param>
      <param name="closureType"></param>
      <param name="sourcePosition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.Copy(System.Windows.Forms.IDataObject,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},System.Drawing.PointF)">
      <param name="data"></param>
      <param name="elements"></param>
      <param name="sourcePosition"></param>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.ElementOperations.ElementsReconstituted"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.GetClipboardDataObject"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.GetElementGroupPrototype(System.IServiceProvider,System.Windows.Forms.IDataObject)">
      <param name="serviceProvider"></param>
      <param name="data"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.GetModelingToolboxItemDisplayName(System.IServiceProvider,System.Windows.Forms.IDataObject)">
      <param name="serviceProvider"></param>
      <param name="data"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.IsElementGroupPrototypeFormatAvailable"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.Merge(Microsoft.VisualStudio.Modeling.ModelElement,System.Windows.Forms.IDataObject)">
      <param name="targetElement"></param>
      <param name="data"></param>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.ElementOperations.Merged"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.MergeElementGroup(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="targetElement"></param>
      <param name="elementGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.MergeElementGroupPrototype(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <param name="targetElement"></param>
      <param name="elementGroupPrototype"></param>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.ElementOperations.Merging"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.OnElementsReconstituted(Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.OnMerged(Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.OnMerging(Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs)">
      <param name="e"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementOperations.Partition"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementOperations.PropagateElementGroupContextToTransaction(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroup,Microsoft.VisualStudio.Modeling.Transaction)">
      <param name="targetElement"></param>
      <param name="elementGroup"></param>
      <param name="transaction"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementOperations.ServiceProvider"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementOperations.Store"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs">
      <summary>
                    Provides data for the ElementPropertyChanged event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,System.Object,System.Object,Microsoft.VisualStudio.Modeling.ChangeSource)">
      <param name="directory"></param>
      <param name="domainProperty"></param>
      <param name="domainClass"></param>
      <param name="elementId"></param>
      <param name="oldValue"></param>
      <param name="newValue"></param>
      <param name="changeSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Guid,System.Object,System.Object,Microsoft.VisualStudio.Modeling.ChangeSource,Microsoft.VisualStudio.Modeling.TransactionContext)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs.DomainProperty"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs.NewValue"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs.OldValue"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventManager">
      <summary>
                    Manages element property changed events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventManager.Add(Microsoft.VisualStudio.Modeling.DomainClassInfo,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Delegate)">
      <summary>
                    Adds an event handler that is notified whenever the value of a particular property on an instance of a particular domain class, or its subclasses, is changed.
                </summary>
      <param name="domainClass">
                    The domain class to observe.
                </param>
      <param name="domainProperty">
                    The domain property to observe.
                </param>
      <param name="handler">
                    The handler to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventManager.Add(Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Delegate)">
      <summary>
                    Adds an event handler that is notified whenever the value of any instance of a particular domain property is changed.
                </summary>
      <param name="domainProperty">
                    The domain property to observe.
                </param>
      <param name="handler">
                    The handler to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventManager.Add(Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Guid,System.Delegate)">
      <summary>
                    Adds an event handler that is notified whenever the value of a particular property of a particular element is changed.
                </summary>
      <param name="domainProperty">
                    The domain property to observe.
                </param>
      <param name="elementId">
                    The ID of the element to observe
                </param>
      <param name="handler">
                    The handler to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventManager.Remove(Microsoft.VisualStudio.Modeling.DomainClassInfo,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Delegate)">
      <summary>
                    Removes an event handler that is notified whenever the value of any instance of a particular domain property is changed.
                </summary>
      <param name="domainClass">
                    The domain class to observe.
                </param>
      <param name="domainProperty">
                    The domain property to observe.
                </param>
      <param name="handler">
                    The handler to remove.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventManager.Remove(Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Delegate)">
      <summary>
                    Removes an event handler that is notified whenever the value of any instance of a particular domain property is changed.
                </summary>
      <param name="domainProperty">
                    The domain property to observe.
                </param>
      <param name="handler">
                    The handler to remove.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventManager.Remove(Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Guid,System.Delegate)">
      <summary>
                    Removes an event handler that is notified whenever the value of any instance of a particular domain property is changed.
                </summary>
      <param name="domainProperty">
                    The domain property to  observe.
                </param>
      <param name="elementId">
                    The ID of the element to observe.
                </param>
      <param name="handler">
                    The handler to remove.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ElementWalker">
      <summary>
                    Enables various traversals of the model starting from a particular element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.#ctor(Microsoft.VisualStudio.Modeling.IElementVisitor,Microsoft.VisualStudio.Modeling.IElementVisitorFilter)">
      <param name="visitor"></param>
      <param name="filter"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.#ctor(Microsoft.VisualStudio.Modeling.IElementVisitor,Microsoft.VisualStudio.Modeling.IElementVisitorFilter,System.Boolean)">
      <param name="visitor"></param>
      <param name="filter"></param>
      <param name="includeLinks"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementWalker.BypassDemandLoading"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.DoTraverse(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="rootElement"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementWalker.Filter"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementWalker.IncludeLinks"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementWalker.InternalElementList"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.MarkForRemovalFromInternalElementList(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.MarkVisited(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.RemoveMarkedElements"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.Reset"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.ShouldVisitLinkAgain(Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="link"></param>
      <param name="currentElement"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementWalker.Store"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.Traverse(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="rootElement"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.Traverse(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="rootElements"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ElementWalker.Visited(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ElementWalker.Visitor"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.EmbeddingVisitorFilter">
      <summary>
                    Visits all embedding relationships.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.EmbeddingVisitorFilter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.EmbeddingVisitorFilter.ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,Microsoft.VisualStudio.Modeling.ElementLink)">
      <param name="walker"></param>
      <param name="sourceElement"></param>
      <param name="sourceRoleInfo"></param>
      <param name="domainRelationshipInfo"></param>
      <param name="targetRelationship"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.EmbeddingVisitorFilter.ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="walker"></param>
      <param name="sourceElement"></param>
      <param name="elementLink"></param>
      <param name="targetDomainRole"></param>
      <param name="targetRolePlayer"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.EventManagerDirectory">
      <summary>
                    Enables you to add or remove custom code to run when an event is raised.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.EventManagerDirectory.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.EventManagerDirectory" /> class. 
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.EventManagerDirectory.DeserializationBeginning">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when deserializing a model starts.
                </summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.EventManagerDirectory.DeserializationEnding">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when deserializing a model is ending.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.ElementAdded">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when elements are added.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.ElementDeleted">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when elements are deleted.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.ElementEventsBegun">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run before events for elements are raised.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.ElementEventsEnded">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run after elements for events that are raised.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.ElementMoved">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when elements are moved.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.ElementPropertyChanged">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when the value of a property on an element changes.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.RolePlayerChanged">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when elements that are role players are changed.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.RolePlayerOrderChanged">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when elements that are role players are in a different order.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.TransactionBeginning">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when a transaction is starting.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.TransactionCommitted">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when a transaction is committed.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.EventManagerDirectory.TransactionRolledBack">
      <summary>
                    Gets the event manager directory and enables you to add or remove custom code to run when a transaction is rolled back.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ExistingElementEventManager">
      <summary>
                    In a derived class, manages element events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ExistingElementEventManager.#ctor">
      <summary>
                    Initializes a new instance of the ExistingElementEventManager class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ExistingElementEventManager.Add(System.Guid,System.Delegate)">
      <summary>
                    Add a handler for events on a particular element.
                </summary>
      <param name="elementId">
                    The ID of the element.
                </param>
      <param name="handler">
                    The handler to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ExistingElementEventManager.Remove(System.Guid,System.Delegate)">
      <summary>
                    Remove a handler for events on a particular element.
                </summary>
      <param name="elementId">
                    The ID of the element.
                </param>
      <param name="handler">
                    The handler to remove.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ExtendsDomainModelAttribute">
      <summary>
                    Indicates the domain model that this domain model extends.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ExtendsDomainModelAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the ExtendsDomainModelAttribute class.
                </summary>
      <param name="extendedModelId">
                    The domain model that the target extends.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ExtendsDomainModelAttribute.ExtendedModelId">
      <summary>
                    The ID of the domain model that the target extends.
                </summary>
      <returns>
                    The ID of the base domain model.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.GenericEventArgs">
      <summary>
                    Abstract base class for all event arguments for element events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.GenericEventArgs.#ctor(Microsoft.VisualStudio.Modeling.ChangeSource)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.GenericEventArgs" /> class. 
                </summary>
      <param name="changeSource">
                    The source of this change.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.GenericEventArgs.#ctor(Microsoft.VisualStudio.Modeling.ChangeSource,Microsoft.VisualStudio.Modeling.TransactionContext)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.GenericEventArgs.ChangeSource">
      <summary>
                    Gets or sets the source of this change when overridden in a derived class.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ChangeSource" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.GenericEventArgs.DomainClass">
      <summary>
                    Gets the metadata of the domain class for the element to which this notification pertains when overridden in a derived class.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.GenericEventArgs.DomainModel">
      <summary>
                    Gets the metadata of the domain model for the element to which this notification pertains when overridden in a derived class.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainModelInfo" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.GenericEventArgs.ElementId">
      <summary>
                    Gets the ID of the element to which this notification pertains when overridden in a derived class.
                </summary>
      <returns>
                    The ID of the element.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.GlobalEventManager">
      <summary>
                    When overridden in a derived class, enables observers to register for and be notified of changes within a store. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.GlobalEventManager.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.GlobalEventManager" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.GlobalEventManager.Add(System.Delegate)">
      <summary>
                    Adds an event handler delegate for global event notifications.
                </summary>
      <param name="handler">
                    The handler to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.GlobalEventManager.Remove(System.Delegate)">
      <summary>
                    Removes an event handler delegate from global event notifications.
                </summary>
      <param name="handler">
                    The handler to remove.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.IElementDirectory">
      <summary>
                    Directory of model elements that are contained within a store or a partition.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.IElementDirectory.AllElements">
      <summary>
                    Gets a read-only collection of all elements in the directory.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> objects.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.ContainsDeletedElement(System.Guid)">
      <summary>
                    Indicates whether an element is in the set of deleted elements.
                </summary>
      <returns>true if the element is in the deleted element set; otherwise, false. 
                </returns>
      <param name="elementId">
                    The ID of the element to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.ContainsElement(System.Guid)">
      <summary>
                    Gets whether an element with the specified ID is in the directory.
                </summary>
      <returns>true if the element is in the store; otherwise, false. 
                </returns>
      <param name="elementId">
                    The ID of the element to be checked.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.FindDeletedElement(System.Guid)">
      <summary>
                    Finds a particular element that has been deleted.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> that has been deleted.
                </returns>
      <param name="elementId">
                    The ID of the deleted element to be retrieved.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.FindElement(System.Guid)">
      <summary>
                    Gets an element with a specified ID.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> object.
                </returns>
      <param name="elementId">
                    The ID of the element to be retrieved.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.FindElementLink(System.Guid)">
      <summary>
                    Finds a particular instance of a domain relationship.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.ElementLink" /> that represents an instance of the domain relationship.
                </returns>
      <param name="linkId">
                    The ID of the domain relationship instance.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.FindElements``1">
      <summary>
                    Finds all elements in the directory of a specified type.
                </summary>
      <returns>
                    A read-only collection of the type specified.
                </returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.FindElements(Microsoft.VisualStudio.Modeling.DomainClassInfo)">
      <summary>
                    Finds all elements in the directory of a specified type.
                </summary>
      <returns>
                    A read-only collection of the type specified.
                </returns>
      <param name="domainClass">
                    The domain class type.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.FindElements(Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Boolean)">
      <summary>
                    Finds all elements in the directory of a specified type.
                </summary>
      <returns>
                    A read-only collection of the type specified.
                </returns>
      <param name="domainClass">
                    The domain class type.
                </param>
      <param name="includeDescendants">true to include elements of all domain classes derived from the domain class specified in the <paramref name="domainClass" /> parameter; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.FindElements``1(System.Boolean)">
      <summary>
                    Finds all elements in the directory of a specified type.
                </summary>
      <returns>
                    A read-only collection of the type specified.
                </returns>
      <param name="includeDescendants">true to include elements of all domain classes derived from the type of domain class specified; otherwise, false.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.FindElements(System.Guid)">
      <summary>
                    Finds all elements in the directory of a specified type.
                </summary>
      <returns>
                    A read-only collection of the type specified.
                </returns>
      <param name="domainClassId">
                    The ID of the domain class to find.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.FindElements(System.Guid,System.Boolean)">
      <summary>
                    Finds all elements in the directory of a specified type.
                </summary>
      <returns>
                    A read-only collection of the type specified.
                </returns>
      <param name="domainClassId">
                    The ID of the domain class to find.
                </param>
      <param name="includeDescendants">true to include elements of all domain classes derived from the domain class specified in the <paramref name="domainClassId" /> parameter; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.GetDeletedElement(System.Guid)">
      <summary>
                    Gets a particular element that has been deleted.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> object.
                </returns>
      <param name="elementId">
                    The ID of the deleted element to be retrieved.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.GetElement(System.Guid)">
      <summary>
                    Gets a particular element.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> object.
                </returns>
      <param name="elementId">
                    The ID of the element to be retrieved.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.GetElementLink(System.Guid)">
      <summary>
                    Gets a particular instance of a domain relationship.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.ElementLink" /> object.
                </returns>
      <param name="linkId">
                    The ID of the domain relationship instance.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementDirectory.GetElements(System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>
                    Get the set of elements from the IDs in a particular set.
                </summary>
      <returns>
                    A read-only collection of <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> objects.
                </returns>
      <param name="elementIds">
                    The set of IDs whose corresponding elements are to be returned.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.IElementVisitor">
      <summary>
                    Defines the traversal of a model. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementVisitor.EndTraverse(Microsoft.VisualStudio.Modeling.ElementWalker)">
      <summary>
                    Alerts listeners when the walker has finished traversing the model.
                </summary>
      <param name="walker">
                    The walker traversing the model.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementVisitor.StartTraverse(Microsoft.VisualStudio.Modeling.ElementWalker)">
      <summary>
                    Alerts listeners when the walker has started traversing the model.
                </summary>
      <param name="walker">
                    The walker traversing the model.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementVisitor.Visit(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Represents a visiting function, defined by classes that implement the <see cref="T:Microsoft.VisualStudio.Modeling.IElementVisitor" /> interface.
                </summary>
      <returns>true if the traversal is not complete and should continue; otherwise, false. 
                </returns>
      <param name="walker">
                    The walker traversing the model.
                </param>
      <param name="element">
                    The model element being visited.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.IElementVisitorFilter">
      <summary>
                    Provides a callback mechanism for filtering out which role players and which relationships should be visited during traversal by an <see cref="T:Microsoft.VisualStudio.Modeling.ElementWalker" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementVisitorFilter.ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,Microsoft.VisualStudio.Modeling.ElementLink)">
      <param name="walker"></param>
      <param name="sourceElement"></param>
      <param name="sourceRoleInfo"></param>
      <param name="domainRelationshipInfo"></param>
      <param name="targetRelationship"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IElementVisitorFilter.ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="walker"></param>
      <param name="sourceElement"></param>
      <param name="elementLink"></param>
      <param name="targetDomainRole"></param>
      <param name="targetRolePlayer"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.IMergeElements">
      <summary>
                    Allows classes in derived models to access the merge functionality on a model element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IMergeElements.CanMerge(Microsoft.VisualStudio.Modeling.ProtoElementBase,Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <summary>
                    Indicates whether the source element can be added to this element.
                </summary>
      <returns>true if the source element represented by the <see cref="T:Microsoft.VisualStudio.Modeling.ProtoElement" /> can be added to this target element; otherwise, false. 
                </returns>
      <param name="rootElement">
                    The root <see cref="T:Microsoft.VisualStudio.Modeling.ProtoElement" /> representing a source element. 
                </param>
      <param name="elementGroupPrototype">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" /> that contains the root <see cref="T:Microsoft.VisualStudio.Modeling.ProtoElement" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IMergeElements.ChooseMergeTarget(Microsoft.VisualStudio.Modeling.ElementGroup)">
      <summary>
                    Gets the element to use as the target element in the <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" /> merge process.
                </summary>
      <returns>
                    The element to use as the target for the merge process.
                </returns>
      <param name="elementGroup">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" /> to merge with the target element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IMergeElements.ChooseMergeTarget(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <summary>
                    Gets the model element that you want to use as the target for the merge process.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> to use as the target for the merge process. 
                </returns>
      <param name="elementGroupPrototype">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" /> that will be reconstituted and merged with the target element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IMergeElements.MergeConfigure(Microsoft.VisualStudio.Modeling.ElementGroup)">
      <summary>
                    Allows this model element to configure itself after the merge process has related it to the target element.
                </summary>
      <param name="elementGroup">
                    The group of source elements that have been added back in to the target store.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IMergeElements.MergeDisconnect(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Removes links between this element and another element.
                </summary>
      <param name="sourceElement">
                    The other element that is linked to this element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IMergeElements.MergeRelate(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <summary>
                    Gets the merge process that creates a relationship between this target element and the specified source element.
                </summary>
      <param name="sourceElement">
                    The element that is to be related to this model element.
                </param>
      <param name="elementGroup">
                    The group of source <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> objects that have been added back into the target store.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.IMonikerResolver">
      <summary>
                    Resolves a moniker to its element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IMonikerResolver.CreateMoniker(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Creates a moniker for an element.
                </summary>
      <returns>
                    A moniker that represents the element.
                </returns>
      <param name="modelElement">
                    The model element for the moniker.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IMonikerResolver.CreateMonikerForToken(System.Object)">
      <summary>
                    Creates a moniker for a given token.
                </summary>
      <returns>
                    A moniker that represents the token.
                </returns>
      <param name="token">
                    The token for the moniker.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.IMonikerResolver.ResolveMoniker(Microsoft.VisualStudio.Modeling.Moniker)">
      <summary>
                    Resolves a moniker to one or more elements.
                </summary>
      <returns>
                    The model element or elements that the moniker represents.
                </returns>
      <param name="moniker">
                    The moniker to resolve.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.InternalModelingErrorException">
      <summary>
                    Represents the exception that is thrown when an internal error occurs inside the modeling engine.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.InternalModelingErrorException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.InternalModelingErrorException" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.InternalModelingErrorException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.InternalModelingErrorException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.InternalModelingErrorException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.InternalModelingErrorException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.InvalidDomainModelException">
      <summary>
                    Represents an exception that is thrown when an error is encountered with the metadata assigned to a domain model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.InvalidDomainModelException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.InvalidDomainModelException" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.InvalidDomainModelException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.InvalidDomainModelException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.InvalidDomainModelException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.InvalidDomainModelException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ISchemaResolver"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ISchemaResolver.ResolveSchema(System.String)"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1">
      <summary>
                    Provides a collection of all elements that are linked to an element.
                </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1" /> class used for data binding.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.#ctor(Microsoft.VisualStudio.Modeling.ModelElement,System.Guid)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1" /> class for a specified element.
                </summary>
      <param name="sourceRolePlayer">
                    The element which represents the source role in a relationship.
                </param>
      <param name="sourceRoleId">
                    The ID of the source element in the relationship.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Add(`0)">
      <summary>
                    Appends a new role to the end of the collection.
                </summary>
      <param name="item">
                    The role to append.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    Appends a range of elements to the end of the collection.
                </summary>
      <param name="collection">
                    The range of elements to add to the collection.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.AsReadOnly">
      <summary>
                    Gets a read-only collection of linked elements.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1" />, which is a read-only collection of elements.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Clear">
      <summary>
                    Removes all roles from the collection.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Insert(System.Int32,`0)">
      <summary>
                    Inserts a role into the collection at a specified index.
                </summary>
      <param name="index">
                    The index to assign to the role.
                </param>
      <param name="item">
                    The role to insert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    Inserts a range of elements into the collection at a specific index.
                </summary>
      <param name="index">
                    The index of the first element to insert.
                </param>
      <param name="collection">
                    The range of elements to insert.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Item(System.Int32)">
      <summary>
                    Gets or sets the role at a specified index in a collection of linked elements.
                </summary>
      <returns>
                    The role at the specified index in a collection of linked elements.
                </returns>
      <param name="index">
                    The index of the role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Move(System.Int32,System.Int32)">
      <summary>
                    Moves a role to a new position inside the collection.
                </summary>
      <param name="oldIndex">
                    The current index of the role in the collection.
                </param>
      <param name="newIndex">
                    The new index of the role in the collection.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Move(`0,System.Int32)">
      <summary>
                    Moves a role to a new position inside the collection.
                </summary>
      <param name="item">
                    The role to move.
                </param>
      <param name="newIndex">
                    The new index position of the role in the collection.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Remove(`0)">
      <summary>
                    Removes the specified role from the collection.
                </summary>
      <returns>true if the role was found and deleted; false if the role was not found in the collection.
                </returns>
      <param name="item">
                    The role to remove.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.RemoveAt(System.Int32)">
      <summary>
                    Removes the role at a specified index from the collection.
                </summary>
      <param name="index">
                    Index of the role to delete inside the collection.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
                    Removes a range of elements from the collection.
                </summary>
      <param name="index">
                    The index of the first element to remove.
                </param>
      <param name="count">
                    The number of elements to remove.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.ReplaceAt(System.Int32,`0)">
      <summary>
                    Replaces a role at a specified index with a new role.
                </summary>
      <param name="index">
                    The index of the role to replace.
                </param>
      <param name="item">
                    The role that will replace the current role at the specified index.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Sort">
      <summary>
                    Sorts the elements in the collection of element links.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>
                    Sorts the elements in the collection of element links.
                </summary>
      <param name="comparer">
                    The System.Collections.Generic.IComparer implementation to use when comparing elements; or null to use the default comparer System.Collections.Generic.Comparer.Default.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Sort(System.Comparison{`0})">
      <summary>
                    Sorts the elements in the collection of element links.
                </summary>
      <param name="comparison">
                    The System.Comparison to use when comparing elements.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>
                    Sorts a range of elements in the collection of element links.
                </summary>
      <param name="index">
                    The zero-based starting index of the range to sort.
                </param>
      <param name="count">
                    The length of the range to sort.
                </param>
      <param name="comparer">
                    The System.Collections.Generic.IComparer implementation to use when comparing elements; or null to use the default comparer System.Collections.Generic.Comparer.Default.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.System#Collections#IList#Add(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.System#Collections#IList#Contains(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index"></param>
      <param name="value"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.System#Collections#IList#IsReadOnly"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.System#Collections#IList#Item(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.LinkedElementCollection`1.System#Collections#IList#Remove(System.Object)">
      <param name="value"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.MergeAbortedException">
      <summary>
                    Represents an exception that is thrown when a merge operation on a domain model is aborted by the user.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MergeAbortedException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.MergeAbortedException" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MergeAbortedException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.MergeAbortedException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MergeAbortedException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.MergeAbortedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.MergeContext">
      <summary>
                    Provides merge information initially set by the merge process when the objects of a <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" /> are reconstituted into the target store. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MergeContext.AddRootModelElement(Microsoft.VisualStudio.Modeling.Transaction,Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="transaction"></param>
      <param name="modelElement"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MergeContext.GetElementGroup(Microsoft.VisualStudio.Modeling.Transaction)">
      <param name="transaction"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MergeContext.GetRootModelElements(Microsoft.VisualStudio.Modeling.Transaction)">
      <param name="transaction"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MergeContext.GetTargetElement(Microsoft.VisualStudio.Modeling.Transaction)">
      <param name="transaction"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MergeContext.HasContext(Microsoft.VisualStudio.Modeling.Transaction)">
      <param name="transaction"></param>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.MergeContext.PreMergeKey"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.MergeContext.Set(Microsoft.VisualStudio.Modeling.Transaction,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="transaction"></param>
      <param name="targetElement"></param>
      <param name="elementGroup"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs">
      <summary>
                    Provides data for the MergeElementGroup event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs.#ctor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroupPrototype,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="targetElement"></param>
      <param name="elementGroupPrototype"></param>
      <param name="elementGroup"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs.CurrentTransaction"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs.ElementGroup"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs.ElementGroupPrototype"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs.MergeCompleted"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs.TargetElement"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs.TopLevelTransaction"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ModelElement">
      <summary>
                    Represents a domain model element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> class. 
                </summary>
      <param name="partition">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Partition" /> of the store where the element is to be created.
                </param>
      <param name="propertyAssignments">
                    An array of new element property assignments.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.CanMerge(Microsoft.VisualStudio.Modeling.ProtoElementBase,Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <summary>
                    Verifies whether a source element can be added to this element.
                </summary>
      <returns>true if the source element represented by the ProtoElement can be added to this target element; otherwise, false.
                </returns>
      <param name="rootElement">
                    The root ProtoElement representing a source element. 
                
                    If this is null, the <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" />  does not contain any ProtoElements and the code should inspect the <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" /> context information.
                </param>
      <param name="elementGroupPrototype">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" /> that contains the root ProtoElement.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.ChooseMergeTarget(Microsoft.VisualStudio.Modeling.ElementGroup)">
      <summary>
                    Selects a target element that a group of source elements should merge with.
                </summary>
      <returns>
                    The target element.
                </returns>
      <param name="elementGroup">
                    The group of source elements that should merge with the target element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.ChooseMergeTarget(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <summary>
                    Gets the model element that will be used as the target for the <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" /> merge process.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> to use as the target for the merge process.
                </returns>
      <param name="elementGroupPrototype">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroupPrototype" /> that will be reconstituted and merged with the target element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.Copy">
      <summary>
                    Creates a copy of the element in the model.
                </summary>
      <returns>
                    The copy of the <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" />. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.Copy(System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>
                    Creates a copy of the element in the model.
                </summary>
      <returns>
                    The copy of the <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" />. 
                </returns>
      <param name="domainRolesNotToPropagate">
                    A list of domain role IDs through which copy should not be propagated.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.Delete">
      <summary>
                    Deletes an element from the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.Delete(System.Guid[])">
      <summary>
                    Deletes an element from the model.
                </summary>
      <param name="domainRolesToNotPropagate">
                    A list of domain role IDs it ignores.
                </param>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.ModelElement.DomainClassId">
      <summary>
                    Represents the ID of the domain class for this element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.GetDomainClass">
      <summary>
                    Gets the most-derived domain class for this element.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainClassInfo" /> with information about the domain class.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ModelElement.Id">
      <summary>
                    Gets the ID of the element.
                </summary>
      <returns>
                    The ID of the element.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ModelElement.IsActive">
      <summary>
                    Gets the IsActive flag and verifies to see whether the element is active.
                </summary>
      <returns>true if the element is active; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ModelElement.IsDeleted">
      <summary>
                    Gets the IsDeleted flag and checks to see whether the element has been deleted from the model.
                </summary>
      <returns>true if the element has been deleted from the model; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ModelElement.IsDeleting">
      <summary>
                    Gets the IsDeleting flag and verifies whether the element is currently being deleted from the model.
                </summary>
      <returns>true if the element is being deleted from the model; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.MergeConfigure(Microsoft.VisualStudio.Modeling.ElementGroup)">
      <summary>
                    Allows the model element to configure itself immediately after the Merge process has related it to the target element.
                </summary>
      <param name="elementGroup">
                    The group of source elements that have been added back into the target store.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.MergeDisconnect(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Disconnects a source element from a target element.
                </summary>
      <param name="sourceElement">
                    The source element to disconnect from the target element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.MergeRelate(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <summary>
                    Creates a relationship between this target element and the specified source element.
                </summary>
      <param name="sourceElement">
                    The element to be related to this model element.
                </param>
      <param name="elementGroup">
                    The group of source elements that have been added back into the target store.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.Microsoft#VisualStudio#Modeling#IMergeElements#CanMerge(Microsoft.VisualStudio.Modeling.ProtoElementBase,Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <param name="rootElement"></param>
      <param name="elementGroupPrototype"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.Microsoft#VisualStudio#Modeling#IMergeElements#ChooseMergeTarget(Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="elementGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.Microsoft#VisualStudio#Modeling#IMergeElements#ChooseMergeTarget(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
      <param name="elementGroupPrototype"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.Microsoft#VisualStudio#Modeling#IMergeElements#MergeConfigure(Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="elementGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.Microsoft#VisualStudio#Modeling#IMergeElements#MergeDisconnect(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="sourceElement"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.Microsoft#VisualStudio#Modeling#IMergeElements#MergeRelate(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="sourceElement"></param>
      <param name="elementGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.OnCopy(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Alerts listeners that a copy of the element has been created. 
                </summary>
      <param name="sourceElement">
                    The element from which a duplicate was created.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.OnDeleted">
      <summary>
                    Alerts listeners that an element has been deleted from the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.OnDeleting">
      <summary>
                    Alerts listeners that the element is being deleted.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.OnResurrected">
      <summary>
                    Alerts listeners that an element has been added back to a model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.OnRolePlayerPositionChanged(Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ElementLink,System.Int32,System.Int32)">
      <summary>
                    Alerts listeners that the position of a role is about to change.
                </summary>
      <param name="sourceRole">
                    The source role.
                </param>
      <param name="link">
                    The element link.
                </param>
      <param name="oldPosition">
                    The old role player position.
                </param>
      <param name="newPosition">
                    The new role player position.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelElement.OnRolePlayerPositionChanging(Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ElementLink,System.Int32,System.Int32)">
      <summary>
                    Allows notification when a role player position has changed.
                </summary>
      <param name="sourceRole">
                    The source role.
                </param>
      <param name="link">
                    The element link.
                </param>
      <param name="oldPosition">
                    The old role player position.
                </param>
      <param name="newPosition">
                    The new role player position.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ModelElement.Partition">
      <summary>
                    Gets or sets the <see cref="T:Microsoft.VisualStudio.Modeling.Partition" /> that contains the element.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Partition" /> that contains the element.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ModelElement.Store">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> that contains the element.
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> that contains the element.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ModelingEventArgs">
      <summary>
                    Provides data for modeling events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelingEventArgs.#ctor(Microsoft.VisualStudio.Modeling.TransactionContext)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ModelingEventArgs.TransactionContext"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ModelingException">
      <summary>
                    Represents the base class for several exceptions thrown by the modeling engine.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelingException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ModelingException" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ModelingException" /> class with serialized data.
                </summary>
      <param name="info">
                    The object that holds the serialized object data.
                </param>
      <param name="context">
                    The contextual information about the source or the destination.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelingException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ModelingException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ModelingException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ModelingException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Moniker">
      <summary>
                    Contains an expression used to map to its element. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Moniker.#ctor(Microsoft.VisualStudio.Modeling.MonikerKey,Microsoft.VisualStudio.Modeling.Store)">
      <param name="monikerKey"></param>
      <param name="store"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Moniker.#ctor(System.String,System.Guid,System.Guid,Microsoft.VisualStudio.Modeling.Store)">
      <param name="monikerName"></param>
      <param name="domainRelationshipId"></param>
      <param name="domainClassId"></param>
      <param name="store"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.Column"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Moniker.CompareTo(Microsoft.VisualStudio.Modeling.Moniker)">
      <param name="other"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Moniker.ConnectElement"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Moniker.Delete"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Moniker.DisconnectElement"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.DomainClassInfo"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.DomainModelFullName"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.DomainRelationshipInfo"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Moniker.Equals(Microsoft.VisualStudio.Modeling.Moniker)">
      <param name="moniker"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.Id"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.Key"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.Line"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.Location"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.ModelElement"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.MonikerName"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.Resolved"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Moniker.Resurrect"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Moniker.Store"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.MonikerKey">
      <summary>
                    Represents the key of a <see cref="T:Microsoft.VisualStudio.Modeling.Moniker" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MonikerKey.#ctor(System.String,System.Guid,System.Guid,Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" /> with the specified GUID and store.
                </summary>
      <param name="monikerName">
                    The name of the <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" />.
                </param>
      <param name="domainRelationshipId">
                    The GUID of the domain relationship  associated with the <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" />.
                </param>
      <param name="domainClassId">
                    The GUID of the domain class associated with the <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" />.
                </param>
      <param name="store">
                    The store in which the <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" /> is created.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MonikerKey.CompareTo(Microsoft.VisualStudio.Modeling.MonikerKey)">
      <summary>
                    Compares one <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" /> to another one.
                </summary>
      <returns>
                    Returns an integer value (0 if identical, less than 0 or greater than 0 if not identical). 
                </returns>
      <param name="other">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" /> to which this key is compared.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.MonikerKey.DomainClassId">
      <summary>
                    Gets the GUID of the domain class associated with this <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" />.
                </summary>
      <returns>
                    The GUID of the domain class associated with this <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.MonikerKey.DomainRelationshipId">
      <summary>
                    Gets the GUID of the domain relationship associated with this <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" />.
                </summary>
      <returns>
                    The GUID of the domain relationship associated with this <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MonikerKey.Equals(Microsoft.VisualStudio.Modeling.MonikerKey)">
      <summary>
                    Returns whether or not two <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" /> objects are identical.
                </summary>
      <returns>true if the MonikerKeys are identical, otherwise false.
                </returns>
      <param name="monikerKey">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" /> to which this key is compared.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.MonikerKey.MonikerName">
      <summary>
                    Gets the name of the <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" /> used to resolve the moniker.
                </summary>
      <returns>
                    The name of the <see cref="T:Microsoft.VisualStudio.Modeling.MonikerKey" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.MoveRule">
      <summary>
                    Represents a rule that is called when an object is moved in the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.MoveRule.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.MoveRule.ElementMoved(Microsoft.VisualStudio.Modeling.ElementMovedEventArgs)">
      <param name="e">
                    Provides data for the ElementMoved event.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Multiplicity">
      <summary>
                    Indicates the multiplicity for a domain role.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Multiplicity.ZeroMany">
      <summary>
                    Multiplicity of 0 or *.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Multiplicity.One">
      <summary>
                    Multiplicity of 1.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Multiplicity.ZeroOne">
      <summary>
                    Multiplicity of 0 or 1.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Multiplicity.OneMany">
      <summary>
                    Multiplicity of 1 or *.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Partition">
      <summary>
                    Provides a logical container for elements in a store.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.#ctor(Microsoft.VisualStudio.Modeling.Store)">
      <param name="store"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.AddContext(Microsoft.VisualStudio.Modeling.Context)">
      <param name="context"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.AlternateId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.Contexts"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.DirtyCount"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.Dispose"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.DomainDataDirectory"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.ElementDirectory"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.ElementFactory"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.FindByAlternateId(Microsoft.VisualStudio.Modeling.Store,System.Object)">
      <param name="store"></param>
      <param name="alternateId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.GetClosureList(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType)">
      <param name="rootElements"></param>
      <param name="type"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.GetClosureList(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType,System.Boolean)">
      <param name="rootElements"></param>
      <param name="type"></param>
      <param name="bypassDemandLoading"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.GetClosureList(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo})">
      <param name="rootElements"></param>
      <param name="type"></param>
      <param name="bypassDemandLoading"></param>
      <param name="domainRolesToNotPropagate"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.GetClosureList(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo})">
      <param name="rootElements"></param>
      <param name="type"></param>
      <param name="bypassDemandLoading"></param>
      <param name="domainRolesToNotPropagate"></param>
      <param name="rootDomainRolesToNotVisit"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.GetClosureList(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo})">
      <param name="rootElements"></param>
      <param name="type"></param>
      <param name="domainRolesToNotPropagate"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.GetClosureList(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.DomainRoleInfo})">
      <param name="rootElements"></param>
      <param name="type"></param>
      <param name="domainRolesToNotPropagate"></param>
      <param name="rootDomainRolesToNotVisit"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.GetClosurePrototypeGroup(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType)">
      <param name="rootElements"></param>
      <param name="type"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.GetClosurePrototypeGroup(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType,System.Boolean)">
      <param name="rootElements"></param>
      <param name="type"></param>
      <param name="bypassDemandLoading"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.Id"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.IsDirty"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.IsReadOnly"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Partition.RemoveContext(Microsoft.VisualStudio.Modeling.Context)">
      <param name="context"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.StateId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Partition.Store"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.PartitionDictionary">
      <summary>
                    Represents a collection of partitions.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.PartitionDictionary.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.PartitionDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.PartitionDictionary.Remove(System.Guid)">
      <param name="partitionId"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.PropagateDeleteVisitorFilter">
      <summary>
                    Visits all PropagateRemove relationships.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.PropagateDeleteVisitorFilter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.PropagateDeleteVisitorFilter.ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,Microsoft.VisualStudio.Modeling.ElementLink)">
      <param name="walker"></param>
      <param name="sourceElement"></param>
      <param name="sourceRoleInfo"></param>
      <param name="domainRelationshipInfo"></param>
      <param name="targetRelationship"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.PropagateDeleteVisitorFilter.ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="walker"></param>
      <param name="sourceElement"></param>
      <param name="elementLink"></param>
      <param name="targetDomainRole"></param>
      <param name="targetRolePlayer"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.PropertyAssignment">
      <summary>
                    Represents a property assignment pair that consists of property ID and a property value. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.PropertyAssignment.#ctor(System.Guid,System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.PropertyAssignment" /> class. 
                </summary>
      <param name="domainPropertyId">
                    ID of the domain property to be assigned.
                </param>
      <param name="value">
                    The value to assign to the property.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.PropertyAssignment.PropertyId">
      <summary>
                    Gets the ID of the domain property to assign a value.
                </summary>
      <returns>
                    The ID of the domain property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.PropertyAssignment.Value">
      <summary>
                    Gets the value to be assigned to the property.
                </summary>
      <returns>
                    An object that represents the value to assign to the property.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ProtoElement">
      <summary>
                    Represents the prototype class for an element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElement.#ctor(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElement.#ctor(System.Guid)">
      <param name="domainClassId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElement.ReconstituteObject(System.Collections.Generic.Dictionary{System.Guid,System.Guid},Microsoft.VisualStudio.Modeling.Partition)">
      <param name="idDictionary"></param>
      <param name="partition"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ProtoElementBase">
      <summary>
                    Represents the prototype for the element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElementBase.#ctor(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElementBase.#ctor(System.Guid)">
      <param name="domainClassId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElementBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ProtoElementBase.DomainClassId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ProtoElementBase.ElementId"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElementBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElementBase.GetPropertyAssignments(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="partition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElementBase.GetPropertyValue(System.Guid)">
      <param name="domainPropertyId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoElementBase.ReconstituteObject(System.Collections.Generic.Dictionary{System.Guid,System.Guid},Microsoft.VisualStudio.Modeling.Partition)">
      <param name="idDictionary"></param>
      <param name="partition"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ProtoGroup">
      <summary>
                    Contains the information to re-create an <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroup" /> in the context of any store.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoGroup.#ctor(Microsoft.VisualStudio.Modeling.ElementGroup)">
      <param name="elementGroup"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoGroup.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoGroup.ReconstituteGroup(System.Collections.Generic.Dictionary{System.Guid,System.Guid},Microsoft.VisualStudio.Modeling.Partition)">
      <param name="idDictionary"></param>
      <param name="partition"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ProtoLink">
      <summary>
                    Contains the information needed to recreate an <see cref="T:Microsoft.VisualStudio.Modeling.ElementLink" /> in any store.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoLink.#ctor(Microsoft.VisualStudio.Modeling.ElementLink)">
      <param name="link"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoLink.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoLink.GetRolePlayerId(System.Guid)">
      <param name="domainRoleId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoLink.GetRolePlayerMonikerId(System.Guid)">
      <param name="domainRoleId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoLink.ReconstituteObject(System.Collections.Generic.Dictionary{System.Guid,System.Guid},Microsoft.VisualStudio.Modeling.Partition)">
      <param name="idDictionary"></param>
      <param name="partition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoLink.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <param name="sender"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ProtoPropertyValue">
      <summary>
                    Contains the information necessary to populate an attribute value for a particular model element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoPropertyValue.#ctor(Microsoft.VisualStudio.Modeling.PropertyAssignment)">
      <param name="assignment"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoPropertyValue.#ctor(System.Guid,System.Object)">
      <param name="domainPropertyId"></param>
      <param name="propertyValue"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoPropertyValue.CreatePropertyAssignment(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="partition"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ProtoPropertyValue.DomainPropertyId"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoPropertyValue.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ProtoPropertyValue.PropertyValue"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ProtoRolePlayer">
      <summary>
                    Contains the data necessary to set the role player data on an <see cref="T:Microsoft.VisualStudio.Modeling.ElementLink" />.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoRolePlayer.#ctor(System.Guid,System.Guid,System.Guid,System.Int32[])">
      <param name="domainRoleId"></param>
      <param name="rolePlayerId"></param>
      <param name="rolePlayerMonikerId"></param>
      <param name="ordinals"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoRolePlayer.CreateRoleAssignment(System.Collections.Generic.Dictionary{System.Guid,System.Guid},Microsoft.VisualStudio.Modeling.Partition)">
      <param name="idDictionary"></param>
      <param name="partition"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ProtoRolePlayer.DomainRoleId"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ProtoRolePlayer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ProtoRolePlayer.Ordinals"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ProtoRolePlayer.RolePlayerId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ProtoRolePlayer.RolePlayerMonikerId"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1">
      <summary>
                    Represents a strongly-typed read-only collection of element instances on the opposite side of a relationship.
                </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.#ctor(Microsoft.VisualStudio.Modeling.ModelElement,System.Guid)">
      <summary>
                    Initializes a new instance of the ReadOnlyLinkedElementCollection class.
                </summary>
      <param name="sourceRolePlayer">
                    Element which holds the links collection.
                </param>
      <param name="sourceRoleId">
                    Domain role ID of the source element in the domain relationship.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Contains(`0)">
      <summary>
                    Gets whether a specified role player belongs to the collection.
                </summary>
      <returns>true if the role player is in the collection; otherwise, false. 
                </returns>
      <param name="item">
                    The role player to look for in the collection.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies all role players to an array.
                </summary>
      <param name="array">
                    The array to copy the role players to.
                </param>
      <param name="arrayIndex">
                    The index position inside the array where the first element will be copied.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Count">
      <summary>
                    Gets the number of role players in the collection.
                </summary>
      <returns>
                    The number of role players in the collection.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Exists(System.Predicate{`0})">
      <summary>
                    Determines whether there is at least one element for which a given condition is true.
                </summary>
      <returns>true if there is an element in the collection for which <paramref name="match" /> parameter returns true; otherwise, false. 
                </returns>
      <param name="match">
                    The condition to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Find(System.Predicate{`0})">
      <summary>
                    Finds the first element in the collection which matches a given condition.
                </summary>
      <returns>
                    The first element from the collection for which <paramref name="match" /> parameter returns true.
                </returns>
      <param name="match">
                    The condition to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.FindAll(System.Predicate{`0})">
      <summary>
                    Finds all elements which satisfy a given condition.
                </summary>
      <returns>
                    A List of elements for which the <paramref name="match" /> parameter returns true.
                </returns>
      <param name="match">
                    The condition to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.FindIndex(System.Predicate{`0})">
      <summary>
                    Finds the first element which satisfies a given condition.
                </summary>
      <returns>
                    First element in the list for which the predicate returns true; or null if no element is found.
                </returns>
      <param name="match">
                    The condition to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.ForEach(System.Action{`0})">
      <summary>
                    Runs the specified action on all elements in the collection.
                </summary>
      <param name="action">
                    An Action to run.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.GetEnumerator">
      <summary>
                    Gets a strongly-typed enumerator for this collection.
                </summary>
      <returns>
                    An ElementCollection enumerator.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.IndexOf(`0)">
      <summary>
                    Gets the index of a role player inside the collection.
                </summary>
      <returns>
                    The index position of the role player inside collection or -1 if not found.
                </returns>
      <param name="item">
                    The role player to look for in the collection.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Item(System.Int32)">
      <summary>
                    Gets or sets the role player at a specified index inside the collection.
                </summary>
      <returns>
                    The role player at the specified index.
                </returns>
      <param name="index">
                    Index of the role player.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.SourceDomainRole">
      <summary>
                    Gets the source role of the relationship that this collection represents.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.SourceElement">
      <summary>
                    Gets the source role player which was inherited by this collection.
                </summary>
      <returns>
                    The model element which is the source in the relationship.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#Generic#ICollection{T}#Clear"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#ICollection#IsSynchronized"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#ICollection#SyncRoot"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IList#Add(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IList#Clear"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IList#Contains(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index"></param>
      <param name="value"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IList#IsFixedSize"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IList#IsReadOnly"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IList#Item(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IList#Remove(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.TargetDomainRole">
      <summary>
                    Gets the target role of the relationship that this collection represents.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainRoleInfo" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.ToArray">
      <summary>
                    Creates an array and copies all role players in the collection into it.
                </summary>
      <returns>
                    An array of all role players in the collection.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.TrueForAll(System.Predicate{`0})">
      <summary>
                    Checks if a given condition is true for all elements in the collection.
                </summary>
      <returns>true if the predicate returned true for all elements or if the collection is empty; otherwise, false. 
                </returns>
      <param name="match">
                    The condition to check.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Enumerator">
      <summary>
                    Provides an enumerator over a ReadOnlyLinkedElementCollection</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Enumerator.Current"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Enumerator.MoveNext"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Enumerator.Reset"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Enumerator.System#Collections#IEnumerator#Current"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Enumerator.System#IDisposable#Dispose">
      <summary>
                    Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.Modeling.ReadOnlyLinkedElementCollection`1.Enumerator" /> class.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.RoleAssignment">
      <summary>
                    Provides information to initialize a role that is assigned to a link element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RoleAssignment.#ctor(System.Guid,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.RoleAssignment" /> class given an element that plays the role.
                </summary>
      <param name="domainRoleId">
                    The ID of the domain role.
                </param>
      <param name="rolePlayer">
                    The element that is assigned to the role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RoleAssignment.#ctor(System.Guid,Microsoft.VisualStudio.Modeling.ModelElement,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.RoleAssignment" /> class.
                </summary>
      <param name="domainRoleId">
                    The ID of the domain role.
                </param>
      <param name="rolePlayer">
                    The element that is assigned to the role.
                </param>
      <param name="linkIndex">
                    The index of the element link in the list of links for the role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RoleAssignment.#ctor(System.Guid,Microsoft.VisualStudio.Modeling.Moniker)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.RoleAssignment" /> class.
                </summary>
      <param name="domainRoleId">
                    The ID of the domain role.
                </param>
      <param name="rolePlayer">
                    The element's moniker that is assigned to the role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RoleAssignment.#ctor(System.Guid,Microsoft.VisualStudio.Modeling.Moniker,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.RoleAssignment" /> class.
                </summary>
      <param name="domainRoleId">
                    The ID of the domain role.
                </param>
      <param name="rolePlayer">
                    The moniker that is assigned to the role.
                </param>
      <param name="linkIndex">
                    The index of the element link in the list of links for the role.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RoleAssignment.CreatePlaceholderRoleAssignment(System.Guid)">
      <summary>
                    Creates a role assignment placeholder. 
                </summary>
      <returns>
                    The role assignment created as a temporary placeholder that will be replaced.
                </returns>
      <param name="domainRoleId">
                    The ID of the domain role.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RoleAssignment.DomainRoleId">
      <summary>
                    Gets the ID of the domain role. 
                </summary>
      <returns>
                    The ID of the domain role.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RoleAssignment.LinkIndex">
      <summary>
                    Gets the ID of the domain role.
                </summary>
      <returns>
                    The ID of the domain role.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RoleAssignment.RolePlayer">
      <summary>
                    Gets the model element that is assigned to the role.
                </summary>
      <returns>
                    The model element.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RoleAssignment.RolePlayerMoniker">
      <summary>
                    Gets the moniker of the element that is assigned to the role.
                </summary>
      <returns>
                    The moniker.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs">
      <summary>
                    Provides data for the RolePlayerChanged event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Guid,System.Guid,System.Guid,Microsoft.VisualStudio.Modeling.ChangeSource)">
      <param name="directory"></param>
      <param name="domainRole"></param>
      <param name="elementLinkId"></param>
      <param name="oldRolePlayerId"></param>
      <param name="newRolePlayerId"></param>
      <param name="changeSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Guid,System.Guid,System.Guid,Microsoft.VisualStudio.Modeling.ChangeSource,Microsoft.VisualStudio.Modeling.TransactionContext)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.DomainClass"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.DomainModel"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.DomainRelationship"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.DomainRole"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.ElementId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.ElementLink"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.ElementLinkId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.NewRolePlayer"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.NewRolePlayerId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.OldRolePlayer"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs.OldRolePlayerId"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventManager">
      <summary>
                    Manages events that are changed by the role.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventManager.Add(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Delegate)">
      <summary>
                    Adds an event handler that is called whenever any element that plays a particular role in any link is changed.
                </summary>
      <param name="domainRole">
                    The domain role to observe.
                </param>
      <param name="handler">
                    The handler for the notifications.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventManager.Add(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Guid,System.Delegate)">
      <summary>
                    Adds an event handler that is called whenever the element that plays a particular role in a particular link is changed.
                </summary>
      <param name="domainRole">
                    The domain role to observe.
                </param>
      <param name="elementLinkId">
                    The ID of the link to observe.
                </param>
      <param name="handler">
                    The handler for the notifications.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventManager.Remove(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Delegate)">
      <summary>
                    Removes an event handler that is called whenever any element that plays a particular role in any link is changed.
                </summary>
      <param name="domainRole">
                    The domain role that is observed.
                </param>
      <param name="handler">
                    The handler to remove.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerChangedEventManager.Remove(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Guid,System.Delegate)">
      <summary>
                    Removes an event handler that is called whenever the element that plays a particular role in a particular link is changed.
                </summary>
      <param name="domainRole">
                    The domain role that is observed.
                </param>
      <param name="elementLinkId">
                    The ID of the element that is observed.
                </param>
      <param name="handler">
                    The handler to remove.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.RolePlayerChangeRule">
      <summary>
                    Represents a rule that is called when a role player in the model changes.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerChangeRule.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerChangeRule.RolePlayerChanged(Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs)">
      <param name="e">
                    Provides data for the RolePlayerChanged event.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs">
      <summary>
                    Provides data for the RolePlayerOrderChanged event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,System.Guid,Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Guid,Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Int32,System.Int32,Microsoft.VisualStudio.Modeling.ChangeSource)">
      <param name="directory"></param>
      <param name="sourceElementId"></param>
      <param name="sourceDomainRole"></param>
      <param name="counterpartId"></param>
      <param name="counterpartRole"></param>
      <param name="oldOrdinal"></param>
      <param name="newOrdinal"></param>
      <param name="changeSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.#ctor(Microsoft.VisualStudio.Modeling.IElementDirectory,System.Guid,Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Guid,Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Int32,System.Int32,Microsoft.VisualStudio.Modeling.ChangeSource,Microsoft.VisualStudio.Modeling.TransactionContext)"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.CounterpartDomainRole"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.CounterpartRolePlayer"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.CounterpartRolePlayerId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.DomainClass"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.DomainModel"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.DomainRelationship"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.ElementId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.NewOrdinal"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.OldOrdinal"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.SourceDomainRole"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.SourceElement"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs.SourceElementId"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventManager">
      <summary>
                    Manages events that are changed when the order of the model elements that are assigned to roles change.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventManager.Add(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Delegate)">
      <summary>
                    Adds an event handler that is notified whenever the order of elements that play a particular domain role changes for any source element.
                </summary>
      <param name="counterpartDomainRole">
                    The role played by the elements whose order is changed.
                </param>
      <param name="handler">
                    The delegate that is to be called.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventManager.Add(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Guid,System.Delegate)">
      <summary>
                    Adds an event handler that is notified whenever the order of elements that play a particular role in relationships with a particular source element changes.
                </summary>
      <param name="counterpartDomainRole">
                    The role played by the elements whose order is changed.
                </param>
      <param name="sourceElementId">
                    The ID of the parent element ordering the child counterparts.
                </param>
      <param name="handler">
                    The delegate that is to be called.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventManager.Remove(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Delegate)">
      <summary>
                    Remove an event handler that is notified whenever the order of elements that play a particular role in relationships with any source element changes.
                </summary>
      <param name="counterpartDomainRole">
                    The domain role played by the Elements whose order is changed.
                </param>
      <param name="handler">
                    The handler to remove.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventManager.Remove(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Guid,System.Delegate)">
      <summary>
                    Remove an event handler that is notified whenever the order of elements that play a particular role in relationships with a particular source element changes.
                </summary>
      <param name="counterpartDomainRole">
                    The role played by the elements whose order is changed.
                </param>
      <param name="sourceElementId">
                    The ID of the parent element that orders the child counterparts.
                </param>
      <param name="handler">
                    The handler to remove.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.RolePlayerPositionChangeRule">
      <summary>
                    Represents a rule that is called when a model element that is assigned to a specific role changes position in the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerPositionChangeRule.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.RolePlayerPositionChangeRule.RolePlayerPositionChanged(Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs)">
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.RootElementSettings"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.RootElementSettings.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RootElementSettings.Item(System.String)">
      <param name="settingName"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RootElementSettings.SchemaTargetNamespace"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.RootElementSettings.Version"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Rule">
      <summary>
                    When overridden in a derived class, compares rules and determines when they are raised. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Rule.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Rule" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Rule.CompareTo(Microsoft.VisualStudio.Modeling.Rule)">
      <summary>
                    Compares the rule to another rule.
                </summary>
      <returns>
                    1 if the other rule is greater than the specified rule, 0 if the other rule equals the specified rule, -1 if the other rule is less than the specified rule.
                </returns>
      <param name="other">
                    The other rule.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Rule.CompareTo(System.Object)">
      <summary>
                    Compares the rule to another object.
                </summary>
      <returns>
                    1 if the object is greater than the specified rule, 0 if the object equals the specified rule, -1 if the object is less than the specified rule.
                </returns>
      <param name="obj">
                    The other object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Rule.Equals(Microsoft.VisualStudio.Modeling.Rule)">
      <summary>
                    Verifies whether a rule is equal to another rule.
                </summary>
      <returns>true if the rule is equal to another rule; otherwise, false.
                </returns>
      <param name="rule">
                    The other rule.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Rule.Equals(System.Object)">
      <summary>
                    Verifies whether the rule is equal to another object.
                </summary>
      <returns>true if the rule is equal to another object; otherwise, false.
                </returns>
      <param name="obj">
                    The other object.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Rule.FireBefore">
      <summary>
                    Gets the rule and verifies whether it should raise before the change occurs.
                </summary>
      <returns>true if this rule should be raised inline before the change occurs; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Rule.FireImmediately">
      <summary>
                    Gets the rule and verifies whether it should raise immediately.
                </summary>
      <returns>true if this rule should raise immediately; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Rule.FireOnLocalCommit">
      <summary>
                    Gets the rule and verifies whether it should raise when the current transaction commits.
                </summary>
      <returns>true if this rule should raise when the current transaction commits; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Rule.FireOnTopLevelCommit">
      <summary>
                    Gets the rule and verifies whether it should raise when the top level transaction commits.
                </summary>
      <returns>true if this rule should raise when the top level transaction commits; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Rule.FireTime">
      <summary>
                    Gets or sets when the rule should raise.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.TimeToFire" /> indicating when the rule should raise.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Rule.GetHashCode">
      <summary>
                    Gets the hash code for the rule.
                </summary>
      <returns>
                    The hash code for the rule.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Rule.IsEnabled">
      <summary>
                    Gets or sets whether the rule is enabled.
                </summary>
      <returns>true if the rule is enabled; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Rule.op_Equality(Microsoft.VisualStudio.Modeling.Rule,Microsoft.VisualStudio.Modeling.Rule)">
      <summary>
                    Verifies whether two rules are equal.
                </summary>
      <returns>true if the rules are equal; otherwise, false.
                </returns>
      <param name="lhs">
                    The first rule to compare.
                </param>
      <param name="rhs">
                    The second rule to compare.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Rule.op_GreaterThan(Microsoft.VisualStudio.Modeling.Rule,Microsoft.VisualStudio.Modeling.Rule)">
      <summary>
                    Verifies whether a rule is greater than another rule.
                </summary>
      <returns>true if the first rule is greater than the second rule; otherwise, false.
                </returns>
      <param name="lhs">
                    The first rule to compare.
                </param>
      <param name="rhs">
                    The second rule to compare.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Rule.op_Inequality(Microsoft.VisualStudio.Modeling.Rule,Microsoft.VisualStudio.Modeling.Rule)">
      <summary>
                    Verifies whether two rules are not equal.
                </summary>
      <returns>true if the rules are not equal; otherwise, false.
                </returns>
      <param name="lhs">
                    The first rule to compare.
                </param>
      <param name="rhs">
                    The second rule to compare.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Rule.op_LessThan(Microsoft.VisualStudio.Modeling.Rule,Microsoft.VisualStudio.Modeling.Rule)">
      <summary>
                    Verifies whether a rule is less than another rule.
                </summary>
      <returns>true if the first rule is less than the second rule; otherwise, false.
                </returns>
      <param name="lhs">
                    The first rule to compare.
                </param>
      <param name="rhs">
                    The second rule to compare.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Rule.Priority">
      <summary>
                    Gets the priority that is assigned to the rule.
                </summary>
      <returns>
                    The priority that is assigned to the rule.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.RuleManager">
      <summary>
                    Controls whether rules are enabled or disabled.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RuleManager.DisableRule(System.Type)">
      <summary>
                    Disables rules of a particular type.
                </summary>
      <param name="ruleType">
                    The type of rule to disable.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RuleManager.EnableRule(System.Type)">
      <summary>
                    Enables rules of a particular type.
                </summary>
      <param name="ruleType">
                    The type of rule to enable.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RuleManager.IsRuleSuspended">
      <summary>
                    Gets the IsRuleSuspended flag and verifies whether the rule manager is disabled.
                </summary>
      <returns>true if the rule manager is disabled; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RuleManager.ResumeRuleNotification">
      <summary>
                    Resumes rule notification to the client.
                </summary>
      <returns>true if rule notification resumes; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RuleManager.SuspendRuleNotification">
      <summary>
                    Suspends rule notification to the client.
                </summary>
      <returns>true if rule notification is suspended; otherwise, false.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.RuleOnAttribute">
      <summary>
                    Signifies that the class to which this attribute is applied is a rule.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RuleOnAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.RuleOnAttribute" /> class. 
                </summary>
      <param name="attachDomainTypeId">
                    ID (GUID) of the type this rule attaches to.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.RuleOnAttribute.#ctor(System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.RuleOnAttribute" /> class. 
                </summary>
      <param name="attachDomainType">
                    Domain type this rule attaches to.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RuleOnAttribute.AttachDomainType">
      <summary>
                    Gets the type of class for this rule.
                </summary>
      <returns>
                    A System.Type object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RuleOnAttribute.AttachDomainTypeId">
      <summary>
                    Gets the ID of the domain type for this rule.
                </summary>
      <returns>
                    A System.Guid object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RuleOnAttribute.FireTime">
      <summary>
                    Gets or sets the time when the rule is raised.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.TimeToFire" /> value.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RuleOnAttribute.InitiallyDisabled">
      <summary>
                    Gets or sets the InitiallyDisabled flag, which determines whether a rule is disabled by default.
                </summary>
      <returns>true if the rule is disabled by default; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.RuleOnAttribute.Priority">
      <summary>
                    Gets or sets the priority in which the rule is raised. 
                </summary>
      <returns>
                    The priority in which the rule is raised.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.SerializationContext">
      <summary>
                    Defines the context of a serialization operation. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationContext.#ctor(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory)">
      <param name="directory"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationContext.#ctor(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,System.String)">
      <param name="directory"></param>
      <param name="location"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationContext.#ctor(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,System.String,Microsoft.VisualStudio.Modeling.SerializationResult)">
      <param name="directory"></param>
      <param name="location"></param>
      <param name="serializationResult"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationContext.Directory"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationContext.Item(System.String)">
      <param name="propertyName"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationContext.Location"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationContext.Result"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationContext.WriteOptionalPropertiesWithDefaultValue"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.SerializationException">
      <summary>
                    Throws a <see cref="T:Microsoft.VisualStudio.Modeling.SerializationResult" /> as an exception.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationException.#ctor(Microsoft.VisualStudio.Modeling.SerializationResult)">
      <param name="serializationResult"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationException.#ctor(Microsoft.VisualStudio.Modeling.SerializationResult,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="serializationResult"></param>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationException.#ctor(Microsoft.VisualStudio.Modeling.SerializationResult,System.String)">
      <param name="serializationResult"></param>
      <param name="message"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationException.#ctor(Microsoft.VisualStudio.Modeling.SerializationResult,System.String,System.Exception)">
      <param name="serializationResult"></param>
      <param name="message"></param>
      <param name="innerException"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationException.SerializationResult"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationException.ToString"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.SerializationMessage">
      <summary>
                    Represents a serialization message.  
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationMessage.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationMessage.#ctor(Microsoft.VisualStudio.Modeling.SerializationMessageKind,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <param name="kind"></param>
      <param name="message"></param>
      <param name="location"></param>
      <param name="line"></param>
      <param name="column"></param>
      <param name="additionalProperties"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationMessage.AddProperty(System.String,System.Object)">
      <param name="propertyName"></param>
      <param name="propertyValue"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationMessage.Column"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationMessage.GetProperty(System.String)">
      <param name="propertyName"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationMessage.Kind"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationMessage.Line"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationMessage.Location"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationMessage.Message"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationMessage.ToString"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.SerializationMessageKind">
      <summary>
                    Formats the serialization message.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.SerializationMessageKind.Debug">
      <summary>
                    Format as a debug message.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.SerializationMessageKind.Info">
      <summary>
                    Format as an informational message.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.SerializationMessageKind.Warning">
      <summary>
                    Format as a warning message.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.SerializationMessageKind.Error">
      <summary>
                    Format as an error message.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.SerializationResult">
      <summary>
                    Represents a serialization result.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationResult.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.SerializationResult" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationResult.AddMessage(Microsoft.VisualStudio.Modeling.SerializationMessage)">
      <summary>
                    Adds a message to a serialization result.
                </summary>
      <param name="message">
                    The message to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationResult.Append(Microsoft.VisualStudio.Modeling.SerializationResult)">
      <summary>
                    Appends a result to the list of results.
                </summary>
      <param name="newResult">
                    The result to append to the list.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.SerializationResult.Failed">
      <summary>
                    Gets or sets whether the serialization failed.
                </summary>
      <returns>true if the serialization failed; otherwise, false. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationResult.GetEnumerator">
      <summary>
                    Gets the enumerator that enumerates all stored serialization messages.
                </summary>
      <returns>
                    The enumerator.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationResult.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.SerializationUtilities">
      <summary>
                    Provides utilities for serialization.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.AddMessage(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.SerializationMessageKind,System.String,System.Int32,System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
                    Adds a message to a serialization context.
                </summary>
      <param name="serializationContext">
                    The serialization context.
                </param>
      <param name="kind">
                    The type of message.
                </param>
      <param name="message">
                    The contents of the message.
                </param>
      <param name="line">
                    The line from where the message is raised.
                </param>
      <param name="column">
                    The column from where the message is raised.
                </param>
      <param name="additionalProperties">
                    Any additional properties to store in the message.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.AddMessage(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.SerializationMessageKind,System.String,System.Xml.IXmlLineInfo,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
                    Adds a message to a serialization context.
                </summary>
      <param name="serializationContext">
                    The serialization context.
                </param>
      <param name="kind">
                    The type of message.
                </param>
      <param name="message">
                    The contents of the message.
                </param>
      <param name="xmlLineInfo">
                    An XML exception that contains error information to associate with the message.
                </param>
      <param name="additionalProperties">
                    Any additional properties to store in the message.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.AddMessage(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.SerializationMessageKind,System.Xml.XmlException,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
                    Adds a message to a serialization context.
                </summary>
      <param name="serializationContext">
                    The serialization context.
                </param>
      <param name="kind">
                    The type of message.
                </param>
      <param name="xmlException">
                    An XML exception that contains error information to associate with the message.
                </param>
      <param name="additionalProperties">
                    Any additional properties to store in the message.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.AddMessage(Microsoft.VisualStudio.Modeling.SerializationResult,System.String,Microsoft.VisualStudio.Modeling.SerializationMessageKind,System.String,System.Int32,System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <param name="serializationResult">
                    The serialization result in which the message is stored.
                </param>
      <param name="location">
                    The location where the message is raised.
                </param>
      <param name="kind">
                    The type of message.
                </param>
      <param name="message">
                    The contents of the message.
                </param>
      <param name="line">
                    The line from where the message is raised.
                </param>
      <param name="column">
                    The column from where the message is raised.
                </param>
      <param name="additionalProperties">
                    Any additional properties to store in the message.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.AddValidationMessage(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.Validation.ValidationMessage)">
      <summary>
                    Adds a validation message to a serialization result.
                </summary>
      <param name="serializationResult">
                    The serialization result.
                </param>
      <param name="validationMessage">
                    The validation message.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.GetElementName(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets the name of an element in the serialization results.
                </summary>
      <returns>
                    The name of the element.
                </returns>
      <param name="element">
                    The element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.GetPositionInfo(System.Xml.XmlReader,System.Int32@,System.Int32@)">
      <summary>
                    Gets the position of the reader in the serialization results.
                </summary>
      <param name="reader">
                    The reader.
                </param>
      <param name="line">
                    The line that the reader is on. -1 if the line is not available.
                </param>
      <param name="column">
                    The column that the reader is in. -1 if the column is not available.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.GetString``1(Microsoft.VisualStudio.Modeling.SerializationContext,``0)">
      <summary>
                    Converts a string into a given type.
                </summary>
      <returns>
                    The string as the given type.
                </returns>
      <param name="serializationContext">
                    A <see cref="T:Microsoft.VisualStudio.Modeling.SerializationResult" /> object.
                </param>
      <param name="input">
                    The string to convert.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.GetString``1(``0)">
      <summary>
                    Converts an object of a given type into a string.
                </summary>
      <returns>
                    The object as a string.
                </returns>
      <param name="input">
                    The type to convert into a string.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.GetValue``1(System.String)">
      <summary>
                    Converts a string into a given type.
                </summary>
      <returns>
                    The string as the given type.
                </returns>
      <param name="input">
                    The string to convert.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.Skip(System.Xml.XmlReader)">
      <summary>
                    Skips the XmlReader.
                </summary>
      <param name="reader">
                    The XmlReader to skip.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.SkipToFirstChild(System.Xml.XmlReader)">
      <summary>
                    Moves the reader to the open tag of the first child element. 
                </summary>
      <param name="reader">
                    The XmlReader to skip.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.SkipToNextElement(System.Xml.XmlReader)">
      <summary>
                    Moves the reader to the start tag of the next element.
                </summary>
      <param name="reader">
                    The XmlReader to skip.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.TryGetValue``1(System.String,``0@)">
      <summary>
                    Tries to convert a string into a given type.
                </summary>
      <returns>true if the conversion succeeded; otherwise, false.
                </returns>
      <param name="input">
                    The string to convert.
                </param>
      <param name="result">
                    The type to which convert the string.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.TryGetValueFromBinaryForm``1(System.String,``0@)">
      <summary>
                    Tries to deserialize a type from the given string.
                </summary>
      <returns>true if the deserialization succeeded; otherwise, false.
                </returns>
      <param name="input">
                    The string.
                </param>
      <param name="output">
                    The type to deserialize.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SerializationUtilities.UnescapeXmlString(System.String)">
      <summary>
                    Converts an escaped string to an unescaped string read from XML.
                </summary>
      <returns>
                    An unescaped string. 
                </returns>
      <param name="input">
                    The escaped string.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver">
      <summary>
                    Resolves simple string references when the model is serialized using the default XML serialization.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.#ctor(Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver" /> class. 
                </summary>
      <param name="store">
                    The store to which this moniker resolver is associated.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.AddNewElement(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Adds an element during a deserialization transaction.
                </summary>
      <param name="newElement">
                    The element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.AddToLookupTable(System.String,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Adds extra keys to the moniker lookup table that resolves monikers.
                </summary>
      <param name="monikerName">
                    The name to match against moniker keys.
                </param>
      <param name="mel">
                    The model element to return if the keys match.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Calculates the fully-qualified monikerized string of a given element.
                </summary>
      <returns>
                    A calculated moniker string; or null or an empty string if the element cannot be monikerized.
                </returns>
      <param name="mel">
                    The element from which to get the moniker.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.CanBeMonikerized(Microsoft.VisualStudio.Modeling.DomainClassInfo)">
      <summary>
                    Indicates whether a domain class can be monikerized.
                </summary>
      <returns>true if the domain class can be monikerized; otherwise, false. 
                </returns>
      <param name="domainClassInfo">
                    The domain class to verify.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.CreateMoniker(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Not currently implemented. 
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="modelElement">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.CreateMonikerForToken(System.Object)">
      <summary>
                    Not currently implemented.  
                </summary>
      <returns>
                    Not currently implemented.
                </returns>
      <param name="token">
                    Not currently implemented.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.DeserializationComplete">
      <summary>
                    Indicates serialization is complete or was aborted.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.Dispose">
      <summary>
                    Releases all resources used by the <see cref="T:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver" />. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.Dispose(System.Boolean)">
      <summary>
                    Disposes this moniker resolver.
                </summary>
      <param name="disposing">true if the moniker resolver is being disposed; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.Finalize">
      <summary>
                    Finalizes the moniker resolver but does not dispose it.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.IsDisposed">
      <summary>
                    Gets the moniker resolver and verifies whether it has been disposed.
                </summary>
      <returns>true if this moniker resolver has been disposed; otherwise, false. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.IsFullyQualified(System.String)">
      <summary>
                    Indicates whether the input string is a fully-qualified reference.
                </summary>
      <returns>true if the reference is fully qualified (starts with '/'); otherwise, false. 
                </returns>
      <param name="reference">
                    A reference persisted by the default XML serialization.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.OnAmbiguousMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,System.String,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Verifies whether two elements have the same moniker.
                </summary>
      <param name="context">
                    The serialization context.
                </param>
      <param name="moniker">
                    The moniker.
                </param>
      <param name="element1">
                    The first element to check.
                </param>
      <param name="element2">
                    The second element to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.OnMonikerResolvedToDuplicateLink(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.Moniker)">
      <summary>
                    Checks to see if a moniker has a duplicate link.
                </summary>
      <param name="serializationResult">
                    The serialization result.
                </param>
      <param name="moniker">
                    The moniker to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.OnStoreDisposing(System.Object,System.EventArgs)">
      <summary>
                    Alerts listeners that the store is disposing.
                </summary>
      <param name="sender">
                    The sending object.
                </param>
      <param name="args">
                    The event arguments.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.OnTopLevelTransactionBeginning(Microsoft.VisualStudio.Modeling.Transaction)">
      <summary>
                    Verifies whether there is a new top-level transaction.
                </summary>
      <param name="topLevelTransaction">
                    The top-level transaction.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.OnTransactionRollback(System.Object,Microsoft.VisualStudio.Modeling.TransactionRollbackEventArgs)">
      <summary>
                    Alerts listeners that the transaction has been rolled back.
                </summary>
      <param name="sender">
                    The sending object.
                </param>
      <param name="args">
                    The event arguments.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.OnUnresolvedMoniker(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.Moniker)">
      <summary>
                    Checks to see whether there are unresolved monikers.
                </summary>
      <param name="serializationResult">
                    The serialization result.
                </param>
      <param name="moniker">
                    The moniker to check.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.ProcessAddedElement(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Checks to verify whether an element that was created during deserialization has been processed and its moniker added to the lookup table.
                </summary>
      <returns>true if the element is processed and its moniker is added to the lookup table; otherwise, false. 
                </returns>
      <param name="mel">
                    The element that was created during deserialization.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.ResolveMoniker(Microsoft.VisualStudio.Modeling.Moniker)">
      <summary>
                    Resolves a moniker to one element.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> object.
                </returns>
      <param name="moniker">
                    The Moniker to be resolved.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.SerializationContext">
      <summary>
                    Gets or sets the serialization context.
                </summary>
      <returns>
                    The serialization context.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.SimpleMonikerResolver.UnresolvedMonikerExceptionMessage">
      <summary>
                    Gets the error message for the unresolved moniker exception.
                </summary>
      <returns>
                    The error message for the unresolved moniker exception.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Store">
      <summary>
                    The store contains an in-memory representation of the elements and links in one or more models.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.#ctor(System.IServiceProvider,System.Type[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> class. 
                </summary>
      <param name="serviceProvider">
                    The service provider for this store.
                </param>
      <param name="domainModelTypes">
                    The list of domain models to be loaded.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.#ctor(System.Type[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> class. 
                </summary>
      <param name="domainModelTypes">
                    A list of domain models to be loaded.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.AddMonikerResolver(System.Guid,Microsoft.VisualStudio.Modeling.IMonikerResolver)">
      <summary>
                    Register an <see cref="T:Microsoft.VisualStudio.Modeling.IMonikerResolver" /> for the specified domain model.
                </summary>
      <param name="domainModelId">
                    The ID of the domain model that will get the new <see cref="T:Microsoft.VisualStudio.Modeling.IMonikerResolver" />.
                </param>
      <param name="monikerResolver">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.IMonikerResolver" /> for the specified domain model.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.ChangeSource">
      <summary>
                    Gets the current change source for operations in the store.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.CurrentContext">
      <summary>
                    Gets the current context of the store.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.DefaultPartition">
      <summary>
                    Gets or sets the default partition for the store.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.DemandLoading">
      <summary>
                    Gets whether the store is currently demand loading a relationship.
                </summary>
      <returns>true if the store is currently demand loading; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.Dispose">
      <summary>
                    Disposes the store.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.Disposed">
      <summary>
                    Gets whether the store has been disposed.
                </summary>
      <returns>true if the store has been disposed; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.DomainDataDirectory">
      <summary>
                    Gets domain information directory of the store.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.DomainDataDirectory" /> that contains the domain models and domain classes of the store.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.DomainModels">
      <summary>
                    Gets a collection of domain models in this store.
                </summary>
      <returns>
                    A collection of domain models.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.ElementDirectory">
      <summary>
                    Gets the directory of elements contained within the store.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.ElementDirectory" /> for the store.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.ElementFactory">
      <summary>
                    Gets the element factory for the model.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.ElementFactory" /> for the model.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.EventManagerDirectory">
      <summary>
                    Gets the event manager directory for the model.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.EventManagerDirectory" /> for the model.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.FindDomainModel(System.Guid)">
      <summary>
                    Finds a domain model by its ID.
                </summary>
      <returns>
                    A domain model instance; or null if no domain model instance is found.
                </returns>
      <param name="domainModelId">
                    The ID of the domain model.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.FindMonikerResolver(System.Guid)">
      <summary>
                    Finds the <see cref="T:Microsoft.VisualStudio.Modeling.IMonikerResolver" /> registered for the specified domain model. 
                </summary>
      <returns>
                    The <see cref="T:Microsoft.VisualStudio.Modeling.IMonikerResolver" /> for the domain model.
                
                    Returns null if no <see cref="T:Microsoft.VisualStudio.Modeling.IMonikerResolver" /> is registered with this model.
                </returns>
      <param name="domainModelId">
                    ID of the domain model to search for.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.GetClosurePrototypeGroup(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType)">
      <summary>
                    Creates an element group prototype in the default partition of the given closure type if  a list of root elements is specified.
                </summary>
      <returns>
                    The element group prototype collection.
                </returns>
      <param name="rootElements">
                    A collection of root elements.
                </param>
      <param name="type">
                    The type of closure to build.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.GetClosurePrototypeGroup(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.ClosureType,System.Boolean)">
      <summary>
                    Creates an element group prototype in the default partition of the specified closure type when given a list of root elements and allows bypassing of demand loading. 
                </summary>
      <returns>
                    The element group prototype collection that forms the closure for copy.
                </returns>
      <param name="rootElements">
                    A collection of root elements.
                </param>
      <param name="type">
                    The type of closure to build.
                </param>
      <param name="bypassDemandLoading">true to bypass demand loading while forming the closure; otherwise, false.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.GetDomainModel``1">
      <summary>
                    Gets an instance of a specified domain model type.
                </summary>
      <returns>
                    Instance of the domain model.
                </returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.GetDomainModel(System.Guid)">
      <summary>
                    Gets an instance of a domain model by its ID.
                </summary>
      <returns>
                    Instance of the domain model.
                </returns>
      <param name="domainModelId">
                    The ID of the domain model.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.GetService(System.Type)">
      <summary>
                    Gets a service.
                </summary>
      <returns>
                    An object that represents the ServiceType.
                </returns>
      <param name="serviceType">
                    The service type to get.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.Id">
      <summary>
                    Gets the ID of the store.
                </summary>
      <returns>
                    The ID of the store.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.InRedo">
      <summary>
                    Gets the store and verifies whether the current context of the store is being redone.
                </summary>
      <returns>true if the store is being redone; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.InUndo">
      <summary>
                    Gets the store and verifies whether the current context of the store is being undone.
                </summary>
      <returns>true if the store is in undo; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.InUndoRedoOrRollback">
      <summary>
                    Gets the store and verifies whether the current context of the store is being redone, undone, or rolled back.
                </summary>
      <returns>true if the store in either in a redo, an undo or a rollback; otherwise, false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.LoadDomainModels(System.Type[])">
      <summary>
                    Creates all the domain data for the specified list of domain models.
                </summary>
      <param name="domainModelTypes">
                    An array of types of domain models to be loaded.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.Partitions">
      <summary>
                    Gets the Collection of Partition objects for the store.
                </summary>
      <returns>
                    A collection of Partition objects used in Store.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.PartitionsAlternate">
      <summary>
                    Gets the partitions used in the store. 
                </summary>
      <returns>
                    A list of <see cref="T:Microsoft.VisualStudio.Modeling.Partition" /> objects (that use the AlternateKey) used in the store. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.PopContext">
      <summary>
                    Removes the current context off the top of the stack.
                </summary>
      <returns>
                    A context for the store.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.PropertyBag">
      <summary>
                    Gets the property bag for the store.
                </summary>
      <returns>
                    An IDictionary with properties and their values.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.PushContext(Microsoft.VisualStudio.Modeling.Context)">
      <summary>
                    Pushes a new context to the top of the store context stack.
                </summary>
      <param name="context">
                    The context to put on the stack.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.RegisterTransactionLog(Microsoft.VisualStudio.Modeling.TransactionLog)">
      <summary>
                    Allows a client to register a transaction log that will be notified of events on this store.
                </summary>
      <param name="log">
                    The log that this store will notify.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.RuleManager">
      <summary>
                    Gets the rule manager for the store.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.RuleManager" /> for the store.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.ShuttingDown">
      <summary>
                    Gets the store and verifies whether the store is shutting down, or sets the state of the store as shutting down.
                </summary>
      <returns>true if the store is shutting down; otherwise, false.
                </returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Modeling.Store.StoreDisposing">
      <summary>
                    Occurs when the store is disposing.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.TransactionActive">
      <summary>
                    Gets or sets whether the store has a currently active transaction. 
                </summary>
      <returns>true if the store has a currently active transaction; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.TransactionLogs">
      <summary>
                    Gets the current list of transaction logs for the store.
                </summary>
      <returns>
                    An IList of transaction logs.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.TransactionManager">
      <summary>
                    Gets the transaction manager for the model.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.TransactionManager" /> for the model.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.UndoManager">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" /> for the default context.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.Modeling.UndoManager" /> for the default context.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Store.UnregisterTransactionLog(Microsoft.VisualStudio.Modeling.TransactionLog)">
      <summary>
                    Allows a client to unregister a transaction log from being notified of events on this store.
                </summary>
      <param name="log">
                    The log that will be unregistered so it no longer is notified of events on this store.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Store.Version">
      <summary>
                    Gets the version of the store.
                </summary>
      <returns>
                    A Version object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TimeToFire">
      <summary>
                    Determines when to call the rule.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.TimeToFire.Inline">
      <summary>
                    Call the rule when the transaction occurs.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.TimeToFire.LocalCommit">
      <summary>
                    Call the rule when the transaction commits.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.TimeToFire.TopLevelCommit">
      <summary>
                    Call the rule when the top-level transaction commits.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Transaction">
      <summary>
                    A transaction makes sure that changes that were made to the store are treated as a group that can be committed or rolled back.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Transaction.Commit">
      <summary>
                    Commits the transaction.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.Context">
      <summary>
                    Gets the transaction and enables clients to append user data to the transaction.
                </summary>
      <returns>
                    The context for this transaction.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.ContextInstance">
      <summary>
                    Gets the <see cref="T:Microsoft.VisualStudio.Modeling.Context" /> for this transaction.
                </summary>
      <returns>
                    The context instance for this transaction.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Transaction.Dispose">
      <summary>
                    Disposes the state of the transaction.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Transaction.Finalize">
      <summary>
                    Finalizes the transaction. 
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.ForceAllRulesToCommitTime">
      <summary>
                    Gets or sets a flag that forces all nested rules to occur at LocalCommit time for the current transaction.
                </summary>
      <returns>true if all inline rules should occur at LocalCommit time; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.HasPendingChanges">
      <summary>
                    Gets the transaction and verifies whether changes to the store have been made during this transaction.
                </summary>
      <returns>true if changes have been made during this transaction; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.Id">
      <summary>
                    Gets the ID for this transaction.
                </summary>
      <returns>
                    The ID for the transaction.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.InRollback">
      <summary>
                    Gets the transaction and verifies whether this transaction is being rolled back.
                </summary>
      <returns>true if this transaction is being rolled back; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.IsActive">
      <summary>
                    Gets the transaction and verifies whether this transaction is processing.
                </summary>
      <returns>true if the transaction is processing; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.IsHidden">
      <summary>
                    Gets the transaction and verifies whether the transaction is hidden.
                </summary>
      <returns>true if the transaction is hidden; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.IsNested">
      <summary>
                    Gets the transaction and verifies whether a transaction is nested within another transaction.
                </summary>
      <returns>true if the transaction is nested within another transaction; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.IsSerializing">
      <summary>
                    Gets the transaction and verifies whether the transaction is currently serializing.
                </summary>
      <returns>true if the transaction is currently serializing; otherwise, false. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.Name">
      <summary>
                    Gets or sets the name of the transaction.
                </summary>
      <returns>
                    The name of the transaction.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.Parent">
      <summary>
                    Gets the top-level transaction that is assigned to the nested transaction.
                </summary>
      <returns>
                    The top-level transaction that is assigned to the nested transaction.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.PartitionStates">
      <summary>
                    Gets information about the state of all partitions in the store.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Specialized.HybridDictionary" /> object that contains information about the state of all partitions in the store.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Transaction.Rollback">
      <summary>
                    Aborts the transaction.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.SequenceNumber">
      <summary>
                    Gets the sequence number for the transaction.
                </summary>
      <returns>
                    The sequence number for the transaction.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.Store">
      <summary>
                    Gets the store to which the transaction belongs.
                </summary>
      <returns>
                    The store.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.TopLevelTransaction">
      <summary>
                    Gets the top-level transaction of the transaction hierarchy.
                </summary>
      <returns>
                    The top-level transaction of the transaction hierarchy.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Transaction.TransactionDepth">
      <summary>
                    Gets the number of transactions in which this transaction is nested.
                </summary>
      <returns>
                    A number that indicates the level of this transaction in the transaction hierarchy.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionBeginningEventArgs">
      <summary>
                    Provides data for the TransactionBeginning event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionBeginningEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Transaction)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.TransactionBeginningEventArgs" /> class. 
                </summary>
      <param name="transaction">
                    The transaction for which the notification is being made.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionBeginningEventManager">
      <summary>
                    Manages transaction beginning events.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionBeginningRule">
      <summary>
                    Represents a rule that is called when a transaction is beginning in the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionBeginningRule.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionBeginningRule.TransactionBeginning(Microsoft.VisualStudio.Modeling.TransactionBeginningEventArgs)">
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionCommitEventArgs">
      <summary>
                    Provides data for the TransactionCommit event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionCommitEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Transaction)">
      <param name="transaction"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionCommittedEventManager">
      <summary>
                    Manages transaction committed events.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionCommittingRule">
      <summary>
                    Represents a rule that is called when a transaction is in progress in the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionCommittingRule.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionCommittingRule.TransactionCommitting(Microsoft.VisualStudio.Modeling.TransactionCommitEventArgs)">
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionContext">
      <summary>
                    Appends user data to a transaction.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionContext.#ctor">
      <summary>
                    Initializes a new instance of the TransactionContext class.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionContext.ContextInfo">
      <summary>
                    Gets context information.
                </summary>
      <returns>
                    A Dictionary object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionContext.TransactionId"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionEventArgs">
      <summary>
                    Provides data for transaction events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Transaction)">
      <param name="transaction"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionEventArgs.DomainClass"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionEventArgs.DomainModel"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionEventArgs.ElementId"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionEventArgs.Transaction"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionEventManager">
      <summary>
                    Represents the base class for managing notifications of transaction events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionEventManager.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.TransactionEventManager" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionEventManager.Add(System.Guid,System.Delegate)">
      <summary>
                    Adds an event handler delegate for global event notifications.
                </summary>
      <param name="transactionId">
                    The ID of the transaction.
                </param>
      <param name="handler">
                    The event handler delegate.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionEventManager.Remove(System.Guid,System.Delegate)">
      <summary>
                    Removes an event handler delegate from global event notifications.
                </summary>
      <param name="transactionId">
                    The ID of the transaction.
                </param>
      <param name="handler">
                    The event handler delegate.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionItem">
      <summary>
                    Represents a transaction item.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionItem.#ctor(Microsoft.VisualStudio.Modeling.Transaction)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.TransactionItem" /> class. 
                </summary>
      <param name="transaction">
                    The transaction to initialize.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionItem.Context">
      <summary>
                    Gets the transaction context object for this transaction.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.TransactionContext" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionItem.ContextInstance">
      <summary>
                    Gets the context instance to which this transaction belongs.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Context" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionItem.Id">
      <summary>
                    Gets the ID for this transaction item.
                </summary>
      <returns>
                    The ID for the transaction item.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionItem.Name">
      <summary>
                    Gets or sets the name of the transaction.
                </summary>
      <returns>
                    The name of the transaction.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionItem.Store">
      <summary>
                    Gets the store to which this transaction belongs.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionLog">
      <summary>
                    Represents a container of transaction events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionLog.#ctor"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionManager">
      <summary>
                    Creates <see cref="T:Microsoft.VisualStudio.Modeling.Transaction" /> objects and keeps track of the current active transaction.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionManager.#ctor(Microsoft.VisualStudio.Modeling.Store)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.TransactionManager" /> class. 
                </summary>
      <param name="store">
                    The store that this transaction manager is part of.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionManager.AddCanCommitCallback(Microsoft.VisualStudio.Modeling.CanCommitCallback)">
      <summary>
                    Adds the <see cref="T:Microsoft.VisualStudio.Modeling.CanCommitCallback" /> flag.
                </summary>
      <param name="canCommitCallback">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.CanCommitCallback" /> flag.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionManager.BeginTransaction">
      <summary>
                    Creates a new transaction object and returns a reference to it.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Transaction" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionManager.BeginTransaction(System.String)">
      <summary>
                    Creates a new transaction object with a given name and returns a reference to it.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Transaction" /> object.
                </returns>
      <param name="name">
                    The transaction name.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionManager.BeginTransaction(System.String,System.Boolean)">
      <summary>
                    Creates a new transaction object with a given name and returns a reference to it.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Transaction" /> object.
                </returns>
      <param name="name">
                    The transaction name.
                </param>
      <param name="isSerializing">
                    When true, the transaction will notify that deserialization is taking place.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionManager.BeginTransaction(System.String,System.Boolean,Microsoft.VisualStudio.Modeling.TransactionContext)">
      <summary>
                    Creates a new transaction object with a given name and returns a reference to it
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Transaction" /> object.
                </returns>
      <param name="name">
                    The transaction name.
                </param>
      <param name="isSerializing">true to alert listeners that deserialization is taking place; otherwise false.
                </param>
      <param name="context">
                    The transaction context object that allows clients to append user data to the transaction.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionManager.CurrentTransaction">
      <summary>
                    Gets the current active transaction.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Transaction" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionManager.InTransaction">
      <summary>
                    Gets the store and verifies whether it is currently in a transaction.
                </summary>
      <returns>true if the store is in a transaction; otherwise, false. 
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionManager.RemoveCanCommitCallback(Microsoft.VisualStudio.Modeling.CanCommitCallback)">
      <summary>
                    Removes the <see cref="T:Microsoft.VisualStudio.Modeling.CanCommitCallback" /> flag.
                </summary>
      <param name="canCommitCallback">
                    The <see cref="T:Microsoft.VisualStudio.Modeling.CanCommitCallback" /> flag.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionManager.Store">
      <summary>
                    Gets the store that this TransactionManager is part of.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.Modeling.Store" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.TransactionManager.TransactionDepth">
      <summary>
                    Gets the depth of the nested transactions.
                </summary>
      <returns>
                    A number that indicates how many levels of transactions are currently in effect.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionRollbackEventArgs"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionRollbackEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Transaction)"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionRolledBackEventManager">
      <summary>
                    Manages transaction rollback events. 
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.TransactionRollingBackRule">
      <summary>
                    Represents a rule that is called when a transaction is being rolled back in the model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionRollingBackRule.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.TransactionRollingBackRule.TransactionRollingBack(Microsoft.VisualStudio.Modeling.TransactionRollbackEventArgs)">
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.UndoItemEventArgs">
      <summary>
                    Provides data for the UndoItem event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoItemEventArgs.#ctor(Microsoft.VisualStudio.Modeling.TransactionItem)">
      <param name="transactionItem"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoItemEventArgs.TransactionItem"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.UndoManager">
      <summary>
                    Provides the functionality for undo and redo operations.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.#ctor(Microsoft.VisualStudio.Modeling.Context)">
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.#ctor(Microsoft.VisualStudio.Modeling.Store)">
      <param name="store"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.AddCanUndoRedoCallback(Microsoft.VisualStudio.Modeling.CanUndoRedoCallback)">
      <param name="canUndoRedoCallback"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.AddUndoableAction(Microsoft.VisualStudio.Modeling.Transaction)">
      <param name="transaction"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.CanUndoRedoCallbackCollection"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.Context"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.Dispose"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.Finalize"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.Flush"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.InRedo"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.InUndo"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.MaxUndoableTransactions"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.Redo"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.Redo(System.Guid)">
      <param name="id"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.RedoableTransactions"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.RedoAllPossible"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.RedoCount"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.RemoveCanUndoRedoCallback(Microsoft.VisualStudio.Modeling.CanUndoRedoCallback)">
      <param name="canUndoRedoCallback"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.Store"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.TopmostUndoableTransaction"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.Undo"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.Undo(System.Guid)">
      <param name="id"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.UndoableTransactions"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoManager.UndoAllPossible"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.UndoCount"></member>
    <member name="E:Microsoft.VisualStudio.Modeling.UndoManager.UndoItemAdded"></member>
    <member name="E:Microsoft.VisualStudio.Modeling.UndoManager.UndoItemDiscarded"></member>
    <member name="E:Microsoft.VisualStudio.Modeling.UndoManager.UndoStackFlushed"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.UndoManager.UndoState"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.UndoRedoCanceledException">
      <summary>
                    Represents the exception that is thrown when an undo or redo operation has been canceled.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoRedoCanceledException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.UndoRedoCanceledException" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoRedoCanceledException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.UndoRedoCanceledException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.UndoRedoCanceledException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.UndoRedoCanceledException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.UndoState">
      <summary>
                    Describes the undo state in the <see cref="T:Microsoft.VisualStudio.Modeling.Shell.UndoManager" />.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.UndoState.Enabled">
      <summary>
                    Undo is enabled.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.UndoState.Disabled">
      <summary>
                    Undo is disabled.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.UndoState.DisabledNoFlush">
      <summary>
                    Obsolete.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.VisitorFilterResult">
      <summary>
                    Indicates whether an element should be visited.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare">
      <summary>
                    No preference whether the element will be added by others. If all visitors respond DoNotCare, then the element will not be visited.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes">
      <summary>
                    The element should be visited unless there is a Never result by another filter which will override any Yes results.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.VisitorFilterResult.Never">
      <summary>
                    The element will not be visited and the element will be excluded from the closure. This value overrides all Yes values.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.VisitorFilters">
      <summary>
                    Returns various standard visitor filters.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.VisitorFilters.AggregateVisitorFilter"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.VisitorFilters.AncestorVisitorFilter"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.VisitorFilters.DefaultVisitorFilter"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.VisitorFilters.PropagateDeleteVisitorFilter"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.CategoryResourceAttribute">
      <summary>
                    Represents a category in which to group a property when the property is displayed in a <see cref="T:System.Windows.Forms.PropertyGrid" /> control that is set to Categorized mode.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.CategoryResourceAttribute.#ctor(System.String,System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.CategoryResourceAttribute" /> class by using the specified category name key and type.
                </summary>
      <param name="displayNameKey">
                    The key of the category name resource entry in the specified resource.
                </param>
      <param name="type">
                    The type that identifies the assembly that contains the resource.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="displayNameKey" /> is null or the empty string ("").
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.CategoryResourceAttribute.#ctor(System.String,System.Type,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.CategoryResourceAttribute" /> class by using the specified category name key, type, and resources name.
                </summary>
      <param name="displayNameKey">
                    The key of the category name resource entry in the specified resource.
                </param>
      <param name="type">
                    The type that identifies the assembly that contains the resource.
                </param>
      <param name="resourceName">
                    The root name of the resource.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="displayNameKey" /> or <paramref name="resourceName" /> is null or the empty string ("").
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.CategoryResourceAttribute.DisplayNameKey">
      <summary>
                    Gets the key of the category name resource entry.
                </summary>
      <returns>
                    The key of the category name resource entry.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.CategoryResourceAttribute.ResourceName">
      <summary>
                    Gets the root name of the resource.
                </summary>
      <returns>
                    The root name of the resource.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.CategoryResourceAttribute.Type">
      <summary>
                    Gets the type that identifies the assembly that contains the resource.
                </summary>
      <returns>
                    The type that identifies the assembly that contains the resource.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute">
      <summary>
                    Represents a property description for a property when the property is displayed in a <see cref="T:System.Windows.Forms.PropertyGrid" /> control.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute.#ctor(System.String,System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute" /> class by using the specified description key and type.
                </summary>
      <param name="descriptionKey">
                    The key of the description resource entry in the specified resource.
                </param>
      <param name="type">
                    The type that identifies the assembly that contains the resource.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null, or <paramref name="descriptionKey" /> is null or the empty string ("").
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute.#ctor(System.String,System.Type,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute" /> class by using the specified description key, type, and resources name. 
                </summary>
      <param name="descriptionKey">
                    The key of the description resource entry in the specified resource.
                </param>
      <param name="type">
                    The type that identifies the assembly that contains the resource.
                </param>
      <param name="resourceName">
                    The root name of the resource.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null, or <paramref name="descriptionKey" /> or <paramref name="resourceName" /> is null or the empty string ("").
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute.Description">
      <summary>
                    Gets the description, localized to the current culture.
                </summary>
      <returns>
                    The description, localized to the current culture.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute.DescriptionKey">
      <summary>
                    Gets the key of the description resource entry in the specified resource.
                </summary>
      <returns>
                    The key of the description resource entry in the specified resource.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute.ResourceName">
      <summary>
                    Gets the root name of the resource.
                </summary>
      <returns>
                    The root name of the resource.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute.Type">
      <summary>
                    Gets the type that identifies the assembly that contains the resource.
                </summary>
      <returns>
                    The type that identifies the assembly that contains the resource.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute">
      <summary>
                    Represents the name associated with a property.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute.#ctor(System.String,System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute" /> class by using the specified display name key and type. 
                </summary>
      <param name="displayNameKey">
                    The key of the display-name resource entry in the specified resource.
                </param>
      <param name="type">
                    The type that identifies the assembly that contains the resource.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null, or <paramref name="displayNameKey" /> is null or the empty string ("").
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute.#ctor(System.String,System.Type,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute" /> class by using the specified display-name key, type, and resources name. 
                </summary>
      <param name="displayNameKey">
                    The key of the display-name resource entry in the specified resource.
                </param>
      <param name="type">
                    The type that identifies the assembly that contains the resource.
                </param>
      <param name="resourceName">
                    The root name of the resource.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null, or <paramref name="displayNameKey" /> is null or the empty string (""), or <paramref name="resourceName" /> is null or the empty string ("").
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute.DisplayName">
      <summary>
                    Gets the display name, which is localized to the current culture.
                </summary>
      <returns>
                    The display name, which is localized to the current culture.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute.DisplayNameKey">
      <summary>
                    Gets the key of the display-name resource entry in the specified resource.
                </summary>
      <returns>
                    The key of the display-name resource entry in the specified resource.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute.ResourceName">
      <summary>
                    Gets the root name of the resource.
                </summary>
      <returns>
                    The root name of the resource.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute.Type">
      <summary>
                    Gets the type that identifies the assembly that contains the resource.
                </summary>
      <returns>
                    The type that identifies the assembly that contains the resource.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor">
      <summary>
                    Represents a domain property in a domain-specific language (DSL) model.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.#ctor(Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Attribute[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor" /> class and specifies a default value provider. 
                </summary>
      <param name="owner">
                    The element type descriptor for the model element that has the described domain property.
                </param>
      <param name="modelElement">
                    The model element that has the described domain property; or null when this domain property is not associated with a model element.
                </param>
      <param name="domainProperty">
                    The metadata for the described domain property.
                </param>
      <param name="attributes">
                    An array that contains the attributes to apply to the domain property.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> or <paramref name="domainProperty" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.#ctor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Attribute[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor" /> class. 
                </summary>
      <param name="modelElement">
                    The model element that has this domain property; or null to not associate this domain property with a model element.
                </param>
      <param name="domainProperty">
                    The metadata for the described domain property.
                </param>
      <param name="attributes">
                    The attributes to associate with the domain property.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domainProperty" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
                    Indicates whether the value of the domain property can be reset.
                </summary>
      <returns>true if the domain property can be reset; otherwise, false.
                </returns>
      <param name="component">
                    Not used.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.Category">
      <summary>
                    Gets the category in which to group the domain property when the property is displayed in a <see cref="T:System.Windows.Forms.PropertyGrid" /> control that is set to Categorized mode.
                </summary>
      <returns>
                    The category of the described property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.ComponentType">
      <summary>
                    Gets the type of the model element to which this property is bound.
                </summary>
      <returns>
                    The type of the model element to which this property is bound.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.Converter">
      <summary>
                    Gets the converter for the described property.
                </summary>
      <returns>
                    A converter for converting values to and from the type of the described property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.Description">
      <summary>
                    Gets the description of the described property, as specified in the <see cref="T:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute" />.
                </summary>
      <returns>
                    The description of the described property. If the property does not have a <see cref="T:Microsoft.VisualStudio.Modeling.Design.DescriptionResourceAttribute" /> or <see cref="T:System.ComponentModel.DescriptionAttribute" /> attribute, then the empty string ("") is returned.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.DisplayName">
      <summary>
                    Gets the display name of the described property, as specified in the <see cref="T:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute" />.
                </summary>
      <returns>
                    The display name of the described property. If the property does not have a <see cref="T:Microsoft.VisualStudio.Modeling.Design.DisplayNameResourceAttribute" /> or <see cref="T:System.ComponentModel.DisplayNameAttribute" /> attribute, then the display name of the <see cref="T:Microsoft.VisualStudio.Modeling.DomainPropertyInfo" /> that is used to create this descriptor is returned.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.DomainPropertyInfo">
      <summary>
                    Gets the property information object that was used to create this property descriptor.
                </summary>
      <returns>
                    The property information object that was used to create this property descriptor.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.GetEditor(System.Type)">
      <summary>
                    Returns a value editor for the described property.
                </summary>
      <returns>
                    A value editor for the described property.
                </returns>
      <param name="editorBaseType">
                    The type for which to return a value editor.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.GetSetValueTransactionName(System.String)">
      <summary>
                    Returns a localized string for the name of the set value transaction.
                </summary>
      <returns>
                    A localized string for the name of the set value transaction.
                </returns>
      <param name="caption">
                    The localized string that describes the value that will be set.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="caption" /> is null or the empty string ("").
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.GetValue(System.Object)">
      <summary>
                    Gets the value of the domain property.
                </summary>
      <returns>
                    The value of the domain property.
                </returns>
      <param name="component">
                    The model element from which to get the value of the property.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.IsReadOnly">
      <summary>
                    Gets a value that indicates whether the described property is read-only.
                </summary>
      <returns>
                    A value that indicates whether the described property is read-only.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.ModelElement">
      <summary>
                    Gets the model element that was used to create this property descriptor.
                </summary>
      <returns>
                    The model element that was used to create this property descriptor.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.PropertyType">
      <summary>
                    Gets the property type of the described property.
                </summary>
      <returns>
                    The property type of the described property.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.ResetValue(System.Object)">
      <summary>
                    Resets the value of the domain property.
                </summary>
      <param name="component">
                    The model element for which to reset the value of the property.
                </param>
      <exception cref="T:System.ArgumentException">
                    The described property is not bound to a model element and <paramref name="component" /> is not derived from the <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> type.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
                    Sets the value of the domain property.
                </summary>
      <param name="component">
                    The model element for which to set the value of the property.
                </param>
      <param name="value">
                    The value to assign to the property.
                </param>
      <exception cref="T:System.ArgumentException">
                    The described property is not bound to a model element and <paramref name="component" /> is not derived from the <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> type.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
                    Indicates whether the value of the domain property should be serialized.
                </summary>
      <returns>true if the value of the domain property should be serialized; otherwise, false.
                </returns>
      <param name="component">
                    The domain element for which to set the value of the property.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptionProvider">
      <summary>
                    Provides methods for creating and retrieving <see cref="T:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor" /> objects.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptionProvider.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptionProvider" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptionProvider.CreateTypeDescriptor(System.ComponentModel.ICustomTypeDescriptor,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Creates a custom type descriptor.
                </summary>
      <returns>
                    A new custom type descriptor.
                </returns>
      <param name="parent">
                    The parent type descriptor.
                </param>
      <param name="element">
                    The object for which to retrieve the type descriptor.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>
                    Gets a custom type descriptor for the given type and object.
                </summary>
      <returns>
                    A custom type descriptor for the given type and object.
                </returns>
      <param name="objectType">
                    The type of the object for which to retrieve the type descriptor.
                </param>
      <param name="instance">
                    The object for which to retrieve the type descriptor.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor">
      <summary>
                    Provides additional run-time type information for a <see cref="T:Microsoft.VisualStudio.Modeling.ModelElement" /> object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.#ctor(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor" /> class.
                </summary>
      <param name="selectedElement">
                    The model element to describe.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selectedElement" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor" /> class by using a parent custom type descriptor.
                </summary>
      <param name="parent">
                    The parent custom type descriptor.
                </param>
      <param name="selectedElement">
                    The model element to describe.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selectedElement" /> is null.
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.ComponentType">
      <summary>
                    Gets the <see cref="T:System.Type" /> of the model element that this class is representing.
                </summary>
      <returns>
                    The type of the model element that this class is representing.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.CreatePropertyDescriptor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Attribute[])">
      <summary>
                    Creates a descriptor for a property of a model element.
                </summary>
      <returns>
                    The descriptor for the property of the model element.
                </returns>
      <param name="requestor">
                    The model element that has the described domain property.
                </param>
      <param name="domainPropertyInfo">
                    The metadata for the domain property.
                </param>
      <param name="attributes">
                    An array that contains the attributes to apply to the domain property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.CreateRolePlayerPropertyDescriptor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Attribute[])">
      <summary>
                    Creates a descriptor for a role property of a model element.
                </summary>
      <returns>
                    The descriptor for the role property of the model element.
                </returns>
      <param name="sourceRolePlayer">
                    The model element that plays the source role.
                </param>
      <param name="targetRoleInfo">
                    The domain role information for the target role player.
                </param>
      <param name="sourceDomainRoleInfoAttributes">
                    An array that contains the attributes to apply to the source role property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.GetCategory(Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor)">
      <summary>
                    Returns a localized string for the category of a domain property.
                </summary>
      <returns>
                    A localized string for the category of a domain property.
                </returns>
      <param name="propertyDescriptor">
                    The descriptor for the domain property for which to get the category.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyDescriptor" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.GetComponentName">
      <summary>
                    Gets the name of the model element that is represented by this class.
                </summary>
      <returns>
                    The name of the model element that is represented by this class. If the element does not have a name, this property returns the empty string ("").
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.GetDescription(Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor)">
      <summary>
                    Returns a localized string for the description of a domain property.
                </summary>
      <returns>
                    A localized string for the description of the domain property.
                </returns>
      <param name="propertyDescriptor">
                    The descriptor for the domain property for which to get the description.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyDescriptor" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.GetDisplayProperties(Microsoft.VisualStudio.Modeling.ModelElement,System.ComponentModel.PropertyDescriptor@)">
      <summary>
                    Returns a collection of property descriptors for all the properties of a model element.
                </summary>
      <returns>
                    The collection of property descriptors for all of the properties of the model element.
                </returns>
      <param name="requestor">
                    The model element to get the properties of.
                </param>
      <param name="defaultPropertyDescriptor">
                    A descriptor for the default property of the element, passed by reference.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestor" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.GetDomainPropertyAttributes(Microsoft.VisualStudio.Modeling.DomainPropertyInfo)">
      <summary>
                    Returns an array of the custom attributes that are applied to the described property.
                </summary>
      <returns>
                    The array of the custom attributes that are applied to the described property.
                </returns>
      <param name="domainPropertyInfo">
                    The descriptor for the domain property to get the custom attributes of.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.GetProperties">
      <summary>
                    Returns a collection of domain property descriptors that contains all the properties of the described type.
                </summary>
      <returns>
                    The collection of domain property descriptors that contains all the properties of the described type.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>
                    Returns a collection of domain property descriptors that contains all the properties of the described type, filtered by the specified attributes.
                </summary>
      <returns>
                    The collection of domain property descriptors that contains all the properties of the described type, filtered by the specified attributes.
                </returns>
      <param name="attributes">
                    The array of custom attributes on which to filter.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.GetPropertyDescriptorDisplayName(Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor)">
      <summary>
                    Returns a localized string for the display name of a domain property.
                </summary>
      <returns>
                    A localized string for the display name of the domain property.
                </returns>
      <param name="propertyDescriptor">
                    The descriptor for the domain property for which to get the display name.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyDescriptor" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.GetRolePlayerPropertyAttributes(Microsoft.VisualStudio.Modeling.DomainRoleInfo)">
      <summary>
                    Returns an array of the custom attributes that are applied to the described role property.
                </summary>
      <returns>
                    An array of the custom attributes that are applied to the described role property.
                </returns>
      <param name="domainRole">
                    The descriptor for the role property to get the custom attributes of.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.IncludeEmbeddingRelationshipProperties(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    For the specified model element, returns a value that indicates whether to add properties of the target element of any embedded relationships that do not allow duplicates.
                </summary>
      <returns>true in all cases.
                </returns>
      <param name="requestor">
                    The model element to return a value for.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.IncludeOppositeRolePlayerProperties(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    For the specified model element, returns a value that indicates whether to add role properties for zero-to-one and one-to-one relationships.
                </summary>
      <returns>true in all cases.
                </returns>
      <param name="requestor">
                    The model element to return a value for.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.IsPropertyDescriptorReadOnly(Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor)">
      <summary>
                    Returns a value that indicates whether the described property is read-only.
                </summary>
      <returns>
                    A value that indicates whether the property is read-only.
                </returns>
      <param name="propertyDescriptor">
                    The descriptor for the domain property for which to return the value.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyDescriptor" /> is null.
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.ModelElement">
      <summary>
                    Gets the model element that this class is representing.
                </summary>
      <returns>
                    The model element that this class is representing.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.ShouldCreatePropertyDescriptor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainPropertyInfo)">
      <summary>
                    Returns a value that indicates whether a descriptor should be created for the specified domain property.
                </summary>
      <returns>
                    The value of the <see cref="P:System.ComponentModel.BrowsableAttribute.Browsable" /> property of the <see cref="T:System.ComponentModel.BrowsableAttribute" /> attribute of the domain property; or true, if the property does not have a <see cref="T:System.ComponentModel.BrowsableAttribute" />.
                </returns>
      <param name="requestor">
                    The model element that has the domain property.
                </param>
      <param name="domainProperty">
                    The domain property to return a value for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domainProperty" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor.ShouldCreateRolePlayerPropertyDescriptor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo)">
      <summary>
                    Returns a value that indicates whether a descriptor should be created for the specified role property.
                </summary>
      <returns>
                    A value that indicates whether a descriptor should be created for the specified role property.
                </returns>
      <param name="sourceRolePlayer">
                    The model element that has the source role.
                </param>
      <param name="sourceRole">
                    The domain role information for the source role player.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.FlagEnumerationEditor">
      <summary>
                    Provides a user interface (UI) for representing and editing domain enumerations.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.FlagEnumerationEditor.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Char)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.FlagEnumerationEditor" /> class. 
                </summary>
      <param name="enumFields">
                    An array of the names of the enumeration members.
                </param>
      <param name="displayDelimiter">
                    The separator character to use when displaying the property value.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumFields" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.FlagEnumerationEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
                    Edits an enumeration value by using the editor style indicated by the <see cref="Overload:Microsoft.VisualStudio.Modeling.Design.FlagEnumerationEditor.GetEditStyle" /> method.
                </summary>
      <returns>
                    The new enumeration value. If the value has not changed, this returns the original value.
                </returns>
      <param name="context">
                    Additional context information.
                </param>
      <param name="provider">
                    A service provider that this editor can use to obtain services.
                </param>
      <param name="value">
                    The value to edit.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="provider" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.FlagEnumerationEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Gets the editor style used by the <see cref="Overload:Microsoft.VisualStudio.Modeling.Design.FlagEnumerationEditor.EditValue" /> method.
                </summary>
      <returns>
                    The style of editor used by the <see cref="Overload:Microsoft.VisualStudio.Modeling.Design.FlagEnumerationEditor.EditValue" /> method. <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown" /> in all cases.
                </returns>
      <param name="context">
                    A context descriptor that can be used to gain additional context information.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.ForwardingTypeDescriptionProvider">
      <summary>
                    Provides methods for creating and retrieving a type descriptor for the target model element of an indexing model element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ForwardingTypeDescriptionProvider.#ctor(Microsoft.VisualStudio.Modeling.Design.TypeDescriptionProviderForwarder)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.ForwardingTypeDescriptionProvider" /> class.
                </summary>
      <param name="forwarder">
                    The delegate that returns the target model element of the indexing model element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ForwardingTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>
                    Gets a custom type descriptor for the given type and object.
                </summary>
      <returns>
                    A custom type descriptor for the given type and object.
                </returns>
      <param name="objectType">
                    The type of the object for which to retrieve the type descriptor.
                </param>
      <param name="instance">
                    The model element for which to retrieve the type descriptor.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter">
      <summary>
                    Provides a type converter that converts between values of domain enumerations and text.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.#ctor(Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Char)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter" /> class for the specified domain property.
                </summary>
      <param name="domainProperty">
                    The metadata for the domain property that uses this converter.
                </param>
      <param name="displayEnumFieldDelimiter">
                    The character to use to delimit multiple values of a flag enumeration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Indicates whether this converter can convert an object in the given source type to a domain enumeration object by using the specified context.
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="context">
                    The format context.
                </param>
      <param name="sourceType">
                    The type to convert from.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Indicates whether this converter can convert the domain enumeration object to the specified type by using the specified context.
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="context">
                    The format context.
                </param>
      <param name="destinationType">
                    The type to convert to.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.Comparer">
      <summary>
                    Gets an <see cref="T:System.Collections.IComparer" /> object that can order the values of the enumeration.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IComparer" /> object that can order the values of the enumeration.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the specified value object to a domain enumeration object by using the specified context.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="context">
                    The format context.
                </param>
      <param name="culture">
                    The culture information, or null for the current culture.
                </param>
      <param name="value">
                    The object to convert.
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a valid value for the target type.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts the domain enumeration object to the specified type by using the specified context.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="context">
                    The format context.
                </param>
      <param name="culture">
                    The culture information, or null for the current culture.
                </param>
      <param name="value">
                    The object to convert.
                </param>
      <param name="destinationType">
                    The type to convert the value to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
                </summary>
      <returns>
                    A collection that contains the standard set of values for the enumeration.
                </returns>
      <param name="context">
                    The format context.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Indicates whether the collection of standard values returned from the <see cref="Overload:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.GetStandardValues" /> method is an exclusive list, by using the specified context.
                </summary>
      <returns>true if the collection of standard values is an exhaustive list of possible values; false if other values are possible.
                </returns>
      <param name="context">
                    The format context.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Indicates whether this object supports a standard set of values that can be picked from a list, by using the specified context.
                </summary>
      <returns>true if the <see cref="Overload:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.GetStandardValues" /> method should be called to find a common set of values that the object supports; otherwise, false.
                </returns>
      <param name="context">
                    The format context.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ModelingEnumerationConverter.Values">
      <summary>
                    Gets a collection of the values of the constants in the enumeration.
                </summary>
      <returns>
                    A collection of the values of the constants in the enumeration.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem">
      <summary>
                    Represents a toolbox item generated in the Domain-Specific Language Tools (DSL Tools).
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem" /> class from serialized data.
                </summary>
      <param name="info">
                    The serialization information store.
                </param>
      <param name="context">
                    The stream context.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.#ctor(System.String,System.Int32,System.String,System.Drawing.Bitmap,System.String,System.String,System.String,System.String,Microsoft.VisualStudio.Modeling.ElementGroupPrototype,System.Collections.ICollection)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem" /> class from the specified information.
                </summary>
      <param name="id">
                    The identifier for this toolbox item.
                </param>
      <param name="position">
                    The zero-based index of this toolbox item on the DSL tab in the generated designer.
                </param>
      <param name="displayName">
                    The localized display name for this toolbox item.
                </param>
      <param name="bitmap">
                    The 8-bit bitmap that represents this toolbox item in the Toolbox.
                </param>
      <param name="tabNameId">
                    The identifier for the Toolbox tab with which this toolbox item is associated.
                </param>
      <param name="tabName">
                    The localized name of the Toolbox tab with which this toolbox item is associated.
                </param>
      <param name="f1Keyword">
                    The F1 keyword for the Help topic associated with this toolbox item.
                </param>
      <param name="tooltip">
                    The tooltip text for this toolbox item.
                </param>
      <param name="prototype">
                    The information required to create an <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroup" /> for this toolbox item.
                </param>
      <param name="toolboxFilters">
                    A collection of <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> attributes to apply to this toolbox item.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" />,<paramref name=" displayName" />,<paramref name=" bitmap" />,<paramref name=" tabName" />, or <paramref name="f1Keyword" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero (0).
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.ComponentType">
      <summary>
                    Always returns the empty string ("").
                </summary>
      <returns>
                    The empty string.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.ContextSensitiveHelpKeyword">
      <summary>
                    Gets the F1 keyword for the Help topic associated with this toolbox item.
                </summary>
      <returns>
                    The F1 keyword for the Help topic associated with this toolbox item.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.Deserialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Loads the state of the toolbox item from the specified serialization information object.
                </summary>
      <param name="info">
                    The serialization information store.
                </param>
      <param name="context">
                    The stream context.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.Equals(System.Object)">
      <summary>
                    Determines whether two instances of this class are equal.
                </summary>
      <returns>true if the specified toolbox item is equal to the current instance; otherwise, false.
                </returns>
      <param name="obj">
                    The toolbox item to compare with the current instance.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A hash code for the current instance.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.Id">
      <summary>
                    Gets the identifier for this toolbox item.
                </summary>
      <returns>
                    The identifier for this toolbox item.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.Position">
      <summary>
                    Gets the zero-based index of this toolbox item on the DSL tab in the generated designer.
                </summary>
      <returns>
                    The zero-based index of this toolbox item on the DSL tab in the generated designer.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.Prototype">
      <summary>
                    Gets or sets the information required to create an <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroup" /> for this toolbox item.
                </summary>
      <returns>
                    The information required to create an <see cref="T:Microsoft.VisualStudio.Modeling.ElementGroup" /> for this toolbox item.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.Serialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Saves the state of the toolbox item to the specified serialization information object.
                </summary>
      <param name="info">
                    The serialization information store to save to.
                </param>
      <param name="context">
                    The stream context.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.TabName">
      <summary>
                    Gets the localized name of the Toolbox tab with which this toolbox item is associated.
                </summary>
      <returns>
                    The localized name of the Toolbox tab with which this toolbox item is associated.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.TabNameId">
      <summary>
                    Gets the identifier for the Toolbox tab with which this toolbox item is associated.
                </summary>
      <returns>
                    The identifier for the Toolbox tab with which this toolbox item is associated.
                </returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem.ToolboxContextOrigin">
      <summary>
                    Specifies the key that indicates that a copy operation originated in the Toolbox. This field is constant.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.RolePlayerMenuCommand">
      <summary>
                    Represents a command that can be added to the value list for a role property in the property window.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.RolePlayerMenuCommand.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.RolePlayerMenuCommand" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.RolePlayerMenuCommand.DoCommand">
      <summary>
                    When overridden in a derived class, executes the command.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerMenuCommand.MenuText">
      <summary>
                    When overridden in a derived class, gets the name of the command.
                </summary>
      <returns>
                    The name of the command.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerMenuCommand.Result">
      <summary>
                    Gets or sets a value that represents the result of the command.
                </summary>
      <returns>
                    A value that represents the result of the command.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.RolePlayerMenuCommand.ToString">
      <summary>
                    Returns a string that represents the current object.
                </summary>
      <returns>
                    A string that represents the current object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor">
      <summary>
                    Provides additional run-time type information for a role property.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.#ctor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Attribute[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor" /> class. 
                </summary>
      <param name="sourcePlayer">
                    The model element that has the role property and is a role player in the link.
                </param>
      <param name="domainRole">
                    The metadata for the role of the model element in the link.
                </param>
      <param name="sourceDomainRoleInfoAttributes">
                    The attributes to associate with the role property.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="sourcePlayer" /> or <paramref name="domainRole" /> parameter is null.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The domain role does not have a name.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The domain role does not have a multiplicity of zero-to-one or of one-to-one.
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.AllowNull">
      <summary>
                    Gets or sets a value that indicates whether null is a valid value for the described role property.
                </summary>
      <returns>true if null is a valid value for the described role property; otherwise, false. The default value is false.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
                    Indicates whether the value of the domain property can be reset.
                </summary>
      <returns>false in all cases.
                </returns>
      <param name="component">
                    Not used.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.ComponentType">
      <summary>
                    Gets the type of the domain element to which this property is bound.
                </summary>
      <returns>
                    The type of the domain element to which this property is bound.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.Converter">
      <summary>
                    Gets the converter for the described property.
                </summary>
      <returns>
                    The converter for the described property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.DisplayName">
      <summary>
                    Gets the display name of the described role property.
                </summary>
      <returns>
                    The display name of the described role property.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.DomainRoleInfo">
      <summary>
                    Gets the metadata for the role of the model element in the link.
                </summary>
      <returns>
                    The metadata for the role of the model element in the link.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.ElementList">
      <summary>
                    Gets a collection of valid values for the described role property.
                </summary>
      <returns>
                    A collection of valid values for the described role property.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.GetSetFieldString(System.String)">
      <summary>
                    Returns a localized string for the name of the set value transaction.
                </summary>
      <returns>
                    A localized string for the name of the set value transaction.
                </returns>
      <param name="caption">
                    The localized string that describes the value that will be set.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="caption" /> parameter is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.GetValue(System.Object)">
      <summary>
                    Gets the value of the domain role property.
                </summary>
      <returns>
                    The value of the domain role property.
                </returns>
      <param name="component">
                    The link from which to get the value of the property.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.IsReadOnly">
      <summary>
                    Gets a value that indicates whether the described role property is read-only. 
                </summary>
      <returns>true if the described role property is read-only; otherwise, false. The default value is false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.Link">
      <summary>
                    Gets the link in which the model element is a role player.
                </summary>
      <returns>
                    The link in which the model element is a role player; or null if the value of the described role property is null.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.MapSourceRolePlayer">
      <summary>
                    Gets or sets the delegate that enables the role player to intervene in the process of creating a link.
                </summary>
      <returns>
                    The delegate that enables the role player to intervene in the process of creating a link.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.PropertyType">
      <summary>
                    Gets the type of the property.
                </summary>
      <returns>
                    The <see cref="T:System.Guid" /> type.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.RelationshipInfo">
      <summary>
                    Gets the metadata for the link in which the model element is a role player.
                </summary>
      <returns>
                    The metadata for the link in which the model element is a role player.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.ResetValue(System.Object)">
      <summary>
                    Resets the value of the role property.
                </summary>
      <param name="component">
                    The domain element for which to reset the value of the property.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.RolePlayerMenuCommands">
      <summary>
                    Gets the collection of <see cref="T:Microsoft.VisualStudio.Modeling.Design.RolePlayerMenuCommand" /> objects that represent the callback commands for specifying the role player instance when a user selects a particular item.
                </summary>
      <returns>
                    The collection of <see cref="T:Microsoft.VisualStudio.Modeling.Design.RolePlayerMenuCommand" /> objects that represent the callback commands for specifying the role player instance when a user selects a particular item.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
                    Sets the value of the domain role property.
                </summary>
      <param name="component">
                    The link for which to set the value of the property.
                </param>
      <param name="value">
                    The value to assign to the property.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
                    Indicates whether the value of the role property should be serialized.
                </summary>
      <returns>false in all cases.
                </returns>
      <param name="component">
                    Not used.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.SourcePlayer">
      <summary>
                    Gets the model element that is the role player for the link.
                </summary>
      <returns>
                    The model element that is the role player for the link.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.RolePlayerPropertyDescriptor.Store">
      <summary>
                    Gets the store that contains the model element and link.
                </summary>
      <returns>
                    The store that contains the model element and link.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.SourceRolePlayerMapFunction">
      <summary>
                    Represents the method that a domain class can use to adjust the role player of a new link.
                </summary>
      <returns>
                    The model element to use as the new role player in the new link.
                </returns>
      <param name="input">
                    The model element that is the original role player in the new link.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.TrackingPropertyDescriptor">
      <summary>
                    Provides additional run-time type information for a tracking property of a model element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.TrackingPropertyDescriptor.#ctor(Microsoft.VisualStudio.Modeling.Design.ElementTypeDescriptor,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Attribute[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.TrackingPropertyDescriptor" /> class and specifies a default value provider.
                </summary>
      <param name="owner">
                    The element type descriptor for the model element that has the described domain property.
                </param>
      <param name="modelElement">
                    The model element that has this domain property; or null to not associate this domain property with a model element.
                </param>
      <param name="domainProperty">
                    The metadata for the described domain property.
                </param>
      <param name="trackingProperty">
                    The domain-property metadata that indicates whether the described property is tracking or has been updated by the user.
                </param>
      <param name="attributes">
                    The attributes to associate with the domain property.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="owner" />, <paramref name="domainProperty" />, or <paramref name="trackingProperty" /> parameter is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.TrackingPropertyDescriptor.#ctor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Attribute[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.TrackingPropertyDescriptor" /> class.
                </summary>
      <param name="modelElement">
                    The model element that has this domain property; or null to not associate this domain property with a model element.
                </param>
      <param name="domainProperty">
                    The metadata for the described domain property.
                </param>
      <param name="trackingProperty">
                    The domain-property metadata that indicates whether the described property is tracking or has been updated by the user.
                </param>
      <param name="attributes">
                    The attributes to associate with the domain property.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="domainProperty" /> or <paramref name="trackingProperty" /> parameter is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.TrackingPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
                    Indicates whether the value of the domain property can be reset.
                </summary>
      <returns>true if the domain property can be reset; otherwise, false.
                </returns>
      <param name="component">
                    The model element.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.TrackingPropertyDescriptor.ResetValue(System.Object)">
      <summary>
                    Resets the value of the tracking property.
                </summary>
      <param name="component">
                    The domain element that has the property to reset.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.TrackingPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
                    Indicates whether the value of the tracking property should be serialized.
                </summary>
      <returns>true if the value of the domain property should be serialized; otherwise, false.
                </returns>
      <param name="component">
                    The domain element that has the property to check.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.TypeDescriptionProviderForwarder">
      <summary>
                    Represents the method that returns the model element that is represented by another model element.
                </summary>
      <returns>
                    The model element that is represented.
                </returns>
      <param name="source">
                    The model element that represents another model element.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.UserContext">
      <summary>
                    This class is not used by the Visual Studio SDK. (See Remarks.) Represents a Help context.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContext.#ctor">
      <summary>
                    This constructor is not used by the Visual Studio SDK. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.UserContext" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContext.#ctor(System.String)">
      <summary>
                    This constructor is not used by the Visual Studio SDK. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.UserContext" /> class from a string.
                </summary>
      <param name="resource">
                    A string that represents the Help context to create.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContext.#ctor(System.Xml.XmlNodeList)">
      <summary>
                    This constructor is not used by the Visual Studio SDK. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.UserContext" /> class from XML.
                </summary>
      <param name="nodeList">
                    A node list that represents the Help context to create.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContext.Add(System.String,System.String,Microsoft.VisualStudio.Modeling.Design.UserContextType)">
      <summary>
                    This method is not used by the Visual Studio SDK. Adds a Help element to this Help context.
                </summary>
      <param name="name">
                    Name of the Help element.
                </param>
      <param name="value">
                    Value of the Help element
                </param>
      <param name="type">
                    The type of the Help element.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.UserContext.Empty">
      <summary>
                    This property is not used by the Visual Studio SDK. Gets a value that indicates whether this Help context contains any Help elements.
                </summary>
      <returns>true if this Help context contains any Help elements; otherwise, false.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.UserContext.F1Keyword">
      <summary>
                    This property is not used by the Visual Studio SDK. Gets or sets the F1 keyword.
                </summary>
      <returns>
                    The F1 keyword.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContext.SaveToString">
      <summary>
                    This method is not used by the Visual Studio SDK. Returns a serialized version of the Help context.
                </summary>
      <returns>
                    The serialized version of the Help context.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.UserContext.UserContextElements">
      <summary>
                    This property is not used by the Visual Studio SDK. Gets all Help elements. 
                </summary>
      <returns>
                    A collection of all Help elements in this Help context.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.UserContextElement">
      <summary>
                    This class is not used by the Visual Studio SDK. (See Remarks.) Represents a Help element.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContextElement.#ctor(System.String,System.String,Microsoft.VisualStudio.Modeling.Design.UserContextType)">
      <summary>
                    This constructor is not used by the Visual Studio SDK. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.UserContextElement" /> class. 
                </summary>
      <param name="attributeName">
                    The name of the Help element.
                </param>
      <param name="value">
                    The value of the Help element.
                </param>
      <param name="type">
                    The type of the Help element.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.UserContextElement.ContextType">
      <summary>
                    This property is not used by the Visual Studio SDK. Gets the type of the Help element.
                </summary>
      <returns>
                    The type of the Help element.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.UserContextElement.PropertyName">
      <summary>
                    This property is not used by the Visual Studio SDK. Gets the name of the Help element.
                </summary>
      <returns>
                    The name of the Help element.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Design.UserContextElement.Value">
      <summary>
                    This property is not used by the Visual Studio SDK. Gets the value of the Help element.
                </summary>
      <returns>
                    The value of the Help element.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.UserContextType">
      <summary>
                    This enumeration is not used by the Visual Studio SDK. (See Remarks.) Specifies the type of user context element.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Design.UserContextType.F1Keyword">
      <summary>
                    An F1 Help keyword.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Design.UserContextType.Keyword">
      <summary>
                    A Help keyword.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Design.UserContextType.Attribute">
      <summary>
                    A Help filter.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Design.UserContextTypeConverter">
      <summary>
                    This class is not used by the Visual Studio SDK. (See Remarks.) Provides a type converter that converts between values of Help contexts and text.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContextTypeConverter.#ctor">
      <summary>
                    This constructor is not used by the Visual Studio SDK. Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Design.UserContextTypeConverter" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContextTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    This method is not used by the Visual Studio SDK. Indicates whether this converter can convert an object in the given source type to a Help context by using the specified format context.
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="context">
                    The format context.
                </param>
      <param name="sourceType">
                    The type to convert from.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContextTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    This method is not used by the Visual Studio SDK. Indicates whether this converter can convert the Help context to the specified type by using the specified format context.
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="context">
                    The format context.
                </param>
      <param name="destinationType">
                    The type to convert to.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContextTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    This method is not used by the Visual Studio SDK. Converts the specified value object to a Help context object by using the specified format context.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="context">
                    The format context.
                </param>
      <param name="culture">
                    The culture information, or null for the current culture.
                </param>
      <param name="value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Design.UserContextTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    This method is not used by the Visual Studio SDK. Converts the Help context to the specified type by using the specified format context.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="context">
                    The format context.
                </param>
      <param name="culture">
                    The culture information, or null for the current culture.
                </param>
      <param name="value">
                    The object to convert.
                </param>
      <param name="destinationType">
                    The type to convert the value to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.
                </exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Diagnostics.ModelingPerformanceCounters"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Diagnostics.ModelingPerformanceCounters.ElementCount"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Diagnostics.ModelingPerformanceCounters.ElementLinkCount"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Diagnostics.ModelingPerformanceCounters.Enabled"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Diagnostics.ModelingPerformanceCounters.PropertiesInUse"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Diagnostics.StoreViewer"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagnostics.StoreViewer.Show(Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagnostics.StoreViewer.Show(Microsoft.VisualStudio.Modeling.Partition)">
      <param name="partition"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagnostics.StoreViewer.Show(Microsoft.VisualStudio.Modeling.Store)">
      <param name="store"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.HslColor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HslColor.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HslColor.#ctor(System.Int32,System.Int32,System.Int32)">
      <param name="hue"></param>
      <param name="saturation"></param>
      <param name="luminosity"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.HslColor.Black"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HslColor.FromRgbColor(System.Drawing.Color)">
      <param name="color"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.HslColor.Hue"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.HslColor.Luminosity"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.HslColor.Saturation"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HslColor.ToRgbColor"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.HslColor.White"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.HslColorConverter"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HslColorConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HslColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <param name="context"></param>
      <param name="sourceType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HslColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <param name="context"></param>
      <param name="destinationType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HslColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <param name="context"></param>
      <param name="culture"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HslColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <param name="context"></param>
      <param name="culture"></param>
      <param name="value"></param>
      <param name="destinationType"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Validation.ValidationCategories">
      <summary>
                    This enumeration is a parameter for the constructor of the custom attribute, <see cref="T:Microsoft.VisualStudio.Modeling.Validation.ValidationMethodAttribute" />. It specifies the type of validation in which the rule will be invoked.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ValidationCategories.Menu">
      <summary>
                    The method is invoked only when ValidateAll on the shortcut menu is selected.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ValidationCategories.Open">
      <summary>
                    The method is invoked only when the model is opened.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ValidationCategories.Save">
      <summary>
                    Indicates that the validation method is invoked only before a user of the domain-specific language saves the model.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ValidationCategories.Custom">
      <summary>
                    The method is for custom validation.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ValidationCategories.Load">
      <summary>
                    Use this category for rules that check for conditions that will keep the model from loading. The method is invoked before a domain-specific language model is saved, to give the user a chance to correct any problems. 
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Validation.ValidationContext">
      <summary>
                    Contains information about the current validation processing being performed. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationCategories,Microsoft.VisualStudio.Modeling.ModelElement)">
      <param name="categories"></param>
      <param name="subject"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationCategories,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="categories"></param>
      <param name="subjects"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.#ctor(System.String[],Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Validation.ValidationContext" /> class that has a specific model element to validate.
                </summary>
      <param name="customCategories">
                    A list of custom specified strings. If you include this parameter, any validation method with a string in this list can be validated.
                </param>
      <param name="subject">
                    The root object to be validated.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.#ctor(System.String[],System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement})">
      <param name="customCategories"></param>
      <param name="subjects"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.Categories">
      <summary>
                    Gets the validation categories for this validation context.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.ConstructValidationMessage(System.String,System.String,Microsoft.VisualStudio.Modeling.Validation.ViolationType,Microsoft.VisualStudio.Modeling.ModelElement[])">
      <summary>
                    Constructs a validation message. You can override this method to construct a custom validation message.
                </summary>
      <returns>
                    The validation message; otherwise, null, if there is no validation message.
                </returns>
      <param name="description">
                    The message description.
                </param>
      <param name="code">
                    A code that identifies the message.
                </param>
      <param name="violationType">
                    The type of message (error, warning, or informational message).
                </param>
      <param name="elements">
                    The elements to which the message applies.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.CurrentViolations">
      <summary>
                    Gets the collection of validation messages for the validation context.
                </summary>
      <returns>
                    Returns a read-only collection of <see cref="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.LogMessage(System.String,System.String,Microsoft.VisualStudio.Modeling.ModelElement[])" /> objects.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.CustomCategories">
      <summary>
                    Gets the custom validation strings for the validation context.
                </summary>
      <returns>
                    Returns a read-only collection of strings.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.GetCache``1">
      <summary>
                    Gets the cache for the specified class.
                </summary>
      <returns>
                    The cache for the specified class.
                </returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.GetCache``1(System.String)">
      <summary>
                    Gets the cache for the specified class.
                </summary>
      <returns>
                    The cache for the specified class.
                </returns>
      <param name="name">
                    The name of the cache.
                </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.GetNavigationProxyModelElements(Microsoft.VisualStudio.Modeling.ModelElement)">
      <summary>
                    Gets the proxy model elements when a validation error occurs in the model.
                </summary>
      <returns>
                    The proxy model elements.
                </returns>
      <param name="fromElement">
                    The model element that caused a validation error in the model.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.LogError(System.String,System.String,Microsoft.VisualStudio.Modeling.ModelElement[])">
      <summary>
                    Creates a validation error and logs a message into the collection that the validation context maintains.
                </summary>
      <returns>
                    A validation message that contains information about the error.
                </returns>
      <param name="description">
                    The text that describes this error and that appear in the Error List window if a violation is found.
                </param>
      <param name="code">
                    A unique string that identifies this error.
                </param>
      <param name="elements">
                    A list of zero or more elements in the model that are highlighted when a user double-clicks this message in the Error List window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.LogFatal(System.String,System.String,Microsoft.VisualStudio.Modeling.ModelElement[])">
      <summary>
                    Creates a fatal error for validation and logs a message in the validation context.
                </summary>
      <returns>
                    The error message.
                </returns>
      <param name="description">
                    The description of the error.
                </param>
      <param name="code">
                    The code that is assigned to the error.
                </param>
      <param name="elements">
                    The model elements that caused the error.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.LogMessage(System.String,System.String,Microsoft.VisualStudio.Modeling.ModelElement[])">
      <summary>
                    Creates a validation information message and logs it into the collection that the validation context maintains.
                </summary>
      <returns>
                    A validation message that contains information about the message.
                </returns>
      <param name="description">
                    The text that describes this message and that appears in the Error List window if a violation is found.
                </param>
      <param name="code">
                    A unique string that identifies this message.
                </param>
      <param name="elements">
                    A list of zero or more elements that are in the model and that are highlighted if a user double-clicks this message in the Error List window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.LogViolation(Microsoft.VisualStudio.Modeling.Validation.ViolationType,System.String,System.String,Microsoft.VisualStudio.Modeling.ModelElement[])">
      <summary>
                    Creates a validation error, message, or warning.
                </summary>
      <returns>
                    The validation error, message, or warning.
                </returns>
      <param name="violationType">
                    The type of violation.
                </param>
      <param name="description">
                    A description of the violation.
                </param>
      <param name="code">
                    The code for the violation.
                </param>
      <param name="elements">
                    The model elements that caused the violation.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.LogWarning(System.String,System.String,Microsoft.VisualStudio.Modeling.ModelElement[])">
      <summary>
                    Creates a validation warning and logs the message into the collection that the validation context maintains.
                </summary>
      <returns>
                    A validation message that has information about the warning.
                </returns>
      <param name="description">
                    The text that describes this warning and that appears in the Error List window if a violation is found.
                </param>
      <param name="code">
                    A unique string that identifies this warning.
                </param>
      <param name="elements">
                    A list of zero or more elements that are in the model and that are highlighted when a user double-clicks this message in the Error List window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.SetCacheValue``1(System.String,``0)">
      <param name="name"></param>
      <param name="cacheObject"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.TryGetCacheValue``1(System.String,``0@)">
      <param name="name"></param>
      <param name="outValue"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationContext.ValidationSubjects">
      <summary>
                    Gets the list of model elements to validate.
                </summary>
      <returns>
                    Returns a read-only collection of model elements.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Validation.ValidationController">
      <summary>
                    Contains logic to validate a single model element or all model elements in a store or partition.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.#ctor">
      <summary>
                    Creates a new instance of the ValidationController class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.AddObserver(Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver)">
      <summary>
                    Adds an observer to the list of observers for the controller.
                </summary>
      <param name="observer">
                    A ValidationMessageObserver.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.ClearMessages">
      <summary>
                    Removes all messages from the controller.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.CreateValidationContext(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.Validation.ValidationCategories)">
      <param name="subjects"></param>
      <param name="categories"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.CreateValidationContext(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},System.String[])">
      <param name="subjects"></param>
      <param name="customCategories"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationController.ErrorMessages"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationController.FatalMessages"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationController.InformationalMessages"></member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.RemoveObserver(Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver)">
      <summary>
                    Removes the observer from the list of observers for the controller.
                </summary>
      <param name="observer">
                    A ValidationMessageObserver.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.Validate(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.Validation.ValidationCategories)">
      <param name="subject"></param>
      <param name="categories"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.Validate(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.Validation.ValidationCategories)">
      <param name="partition"></param>
      <param name="categories"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.Validate(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Validation.ValidationCategories)">
      <param name="store"></param>
      <param name="categories"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.Validate(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},Microsoft.VisualStudio.Modeling.Validation.ValidationCategories)">
      <param name="subjects"></param>
      <param name="categories"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.ValidateCustom(Microsoft.VisualStudio.Modeling.ModelElement,System.String[])">
      <summary>
                    Validates the specified model element using the specified custom validation categories.
                </summary>
      <param name="subject">
                    The model element to validate.
                </param>
      <param name="customCategories">
                    An array of strings that indicate the custom validation categories.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.ValidateCustom(Microsoft.VisualStudio.Modeling.Partition,System.String[])">
      <summary>
                    Validates the model elements in a partition for the specified custom validation categories.
                </summary>
      <returns>true if the partition is valid and no errors were found; otherwise, false.
                </returns>
      <param name="partition">
                    The partition whose model elements will be validated.
                </param>
      <param name="customCategories">
                    An array of strings that indicates the custom validation categories.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.ValidateCustom(Microsoft.VisualStudio.Modeling.Store,System.String[])">
      <summary>
                    Validates the model elements in a store for the specified custom validation categories.
                </summary>
      <returns>true if the store is valid and no errors were found; otherwise, false.
                </returns>
      <param name="store">
                    The store whose model elements will be validated.
                </param>
      <param name="customCategories">
                    An array of strings that indicate the custom validation categories.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationController.ValidateCustom(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement},System.String[])">
      <param name="subjects"></param>
      <param name="customCategories"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationController.ValidationMessages">
      <summary>
                    Gets the validation messages for the controller.
                </summary>
      <returns>
                    A read-only collection of ValidationMessage objects for the controller. 
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationController.WarningMessages"></member>
    <member name="T:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage">
      <summary>
                    Represents a validation message that states an error, a warning, or a message.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationContext,System.String)">
      <summary>
                    Initializes a new instance of the ValidationMessage class using a context and a description for the message.
                </summary>
      <param name="context">
                    The validation context for the ValidationMessage.
                </param>
      <param name="description">
                    A description of the problem. This text will appear in the Visual Studio Output window.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationContext,System.String,System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the ValidationMessage class using a context, a description, a line number, and a column number for the message.
                </summary>
      <param name="context">
                    The validation context for the ValidationMessage.
                </param>
      <param name="description">
                    A description of the problem. This text will appear in the Visual Studio Output window.
                </param>
      <param name="line">
                    The line number where the error occurs.
                </param>
      <param name="column">
                    The column in a line of text where the error occurs.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationContext,System.String,System.String,Microsoft.VisualStudio.Modeling.Validation.ViolationType)">
      <summary>
                    Initializes a new instance of the ValidationMessage class using a context, a description, a code, and a violation type for the message.
                </summary>
      <param name="context">
                    The validation context for the ValidationMessage.
                </param>
      <param name="description">
                    A description of the problem. This text will appear in the Visual Studio Output window.
                </param>
      <param name="code">
                    The code for the message.
                </param>
      <param name="type">
                    The type of ValidationMessage (error, warning, or message).
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.Code">
      <summary>
                    Gets the code for the message.
                </summary>
      <returns>
                    Returns the message code.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.Column">
      <summary>
                    Gets the column in a line of text where the error occurs.
                </summary>
      <returns>
                    The number of the column in a line of text where the error occurs.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.Context">
      <summary>
                    Gets the context information for a validation message.
                </summary>
      <returns>
                    A ValidationContext object that has information about the context of the ValidationMessage.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.Description">
      <summary>
                    Gets the description for a validation message.
                </summary>
      <returns>
                    A textual description of this ValidationMessage.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.Equals(System.Object)">
      <summary>
                    Checks to see whether the validation message is equal to another object.
                </summary>
      <returns>true if the validation message and object is the same; otherwise, false.
                </returns>
      <param name="obj">
                    The object to test for equality.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.File">
      <summary>
                    Gets the name of a referenced file.
                </summary>
      <returns>
                    The name of the first referenced file, if one exists.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.GetHashCode">
      <summary>
                    Gets an identifier for a ValidationMessage.
                </summary>
      <returns>
                    A numeric hash code for the ValidationMessage.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.HelpKeyword">
      <summary>
                    Gets or sets the keyword to search for in the Help for Visual Studio.
                </summary>
      <returns>
                    The keyword used to search for a Help topic for this validation message.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.Line">
      <summary>
                    Gets the line number in the file to which the error or the warning refers.
                </summary>
      <returns>
                    The line number in the file.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.ReferencedFiles">
      <summary>
                    Gets the names of files to which the ValidationMessage refers.
                </summary>
      <returns>
                    A read-only collection of the names of files.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.ReferencedModelElements">
      <summary>
                    Gets the model elements that are referenced by this message.
                </summary>
      <returns>
                    A read-only collection of ModelElement objects.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.ToString">
      <summary>
                    Identifies the validation message.
                </summary>
      <returns>
                    Returns a string that identifies the ValidationMessage.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.Type">
      <summary>
                    Gets the type of validation message.
                </summary>
      <returns>
                    A ViolationType that indicates the type of message.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.UpdateFileReferences(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
                    Contains the names of files to update from a list of zero or more file names.
                </summary>
      <param name="updateReferencedFiles">
                    The list of names of the files to update. (null is allowed.)
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.UpdateFileReferences(System.String)">
      <summary>
                    Contains the name of the file to update.
                </summary>
      <param name="referencedFile">
                    The name of the file to update. (null is allowed.)
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessage.UpdateReferencedModelElements(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement})">
      <summary>
                    Updates the referenced model elements.
                </summary>
      <param name="modelElements">
                    The list of model elements to update.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver">
      <summary>
                    Reports errors, messages, and warnings that are generated from validation methods. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver.OnValidationBeginning(Microsoft.VisualStudio.Modeling.Validation.ValidationContext)">
      <summary>
                    Indicates that validation is about to begin.
                </summary>
      <param name="context">
                    The context for the validation messages.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver.OnValidationEnded(Microsoft.VisualStudio.Modeling.Validation.ValidationContext)">
      <summary>
                    Indicates that validation has ended.
                </summary>
      <param name="context">
                    The ValidationContext for the validation messages.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver.OnValidationMessageAdded(Microsoft.VisualStudio.Modeling.Validation.ValidationMessage)">
      <summary>
                    Indicates that a validation message has been added.
                </summary>
      <param name="addedMessage">
                    The validation message.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver.OnValidationMessageRemoved(Microsoft.VisualStudio.Modeling.Validation.ValidationMessage)">
      <summary>
                    Indicates that a message has been removed.
                </summary>
      <param name="removedMessage">
                    The ValidationMessage that has been removed.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver.OnValidationMessagesChangedSummary(System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Modeling.Validation.ValidationMessage},System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Modeling.Validation.ValidationMessage})">
      <summary>
                    Indicates that the list of validation messages has changed.
                </summary>
      <param name="messagesBeforeUpdate">
                    The ValidationMessage objects before the update occurred.
                </param>
      <param name="messagesAfterUpdate">
                    The ValidationMessage objects after the update occurred.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMessageObserver.OnValidationMessagesChanging(System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Modeling.Validation.ValidationMessage},System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Modeling.Validation.ValidationMessage},System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Modeling.Validation.ValidationMessage},System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Modeling.Validation.ValidationMessage})">
      <summary>
                    Indicates that a list of validation messages is changing.
                </summary>
      <param name="messagesBeforeUpdate">
                    The ValidationMessage objects before the update occurred.
                </param>
      <param name="messagesRemoved">
                    The ValidationMessage objects that were removed.
                </param>
      <param name="messagesAdded">
                    The ValidationMessage objects that were added.
                </param>
      <param name="messagesAfterUpdate">
                    The ValidationMessage objects after the update occurred.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Validation.ValidationMethodAttribute">
      <summary>
                    Represents an attribute that can be used during validation.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMethodAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Validation.ValidationMethodAttribute" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationMethodAttribute.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationCategories)">
      <param name="categories"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMethodAttribute.Categories"></member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationMethodAttribute.CustomCategory">
      <summary>
                    Gets or sets the custom validation categories for the validation method attribute.
                </summary>
      <returns>
                    The custom categories for the validation method attribute.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Validation.ValidationState">
      <summary>
                    Identifies whether instances of a class will be enabled for validation.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ValidationState.Disabled">
      <summary>
                    Indicates that instances of the class to which this value is applied will not be checked by validation methods for this class.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled">
      <summary>
                    Indicates that instances of the class to which this value is applied will be enabled for validation.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ValidationState.Inherited">
      <summary>
                    Indicates that instances of the class to which this value is applied will be enabled or disabled for validation based on the settings for their parent class.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Validation.ValidationStateAttribute">
      <summary>
                    Indicates whether you can validate the domain type to which you applied the attribute.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Modeling.Validation.ValidationStateAttribute.#ctor(Microsoft.VisualStudio.Modeling.Validation.ValidationState)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Modeling.Validation.ValidationStateAttribute" /> class. 
                </summary>
      <param name="validationState">
                    The validation state setting for this attribute.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Modeling.Validation.ValidationStateAttribute.ValidationState">
      <summary>
                    Gets the value of ValidationStateAttribute.
                </summary>
      <returns>
                    A ValidationState that indicates whether validation is enabled, disabled, or inherited (where the parent class' ValidationState determines whether validation is enabled for the class).
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Modeling.Validation.ViolationType">
      <summary>
                    Represents the type of violation that has occurred during validation.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ViolationType.Error">
      <summary>
                    Indicates a ValidationMessage that represents an error.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ViolationType.Warning">
      <summary>
                    Indicates a ValidationMessage that represents a warning.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ViolationType.Message">
      <summary>
                    Indicates a ValidationMessage that represents a message.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Modeling.Validation.ViolationType.Fatal"></member>
  </members>
</doc>