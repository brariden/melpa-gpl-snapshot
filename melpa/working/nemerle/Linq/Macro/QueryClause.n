using System;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Reflection;

using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.IO;
using Nemerle.Builtins.Function;
using Nemerle.Utility;

using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using Nemerle.Assertions;

using TT = Nemerle.Compiler.Typedtree;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;
using SCG = System.Collections.Generic;
using Debug = System.Diagnostics.Debug;

namespace Nemerle.Linq
{
  [Record]
  public variant QueryClause : Located
  {
    | From    { ident : Name; inExpr : PExpr; }
    | Let     { ident : Name; expr : PExpr; }
    | Where   { expr : PExpr; }
    | Join    { ident : Name; inExpr : PExpr; key1Expr : PExpr; key2Expr : PExpr; into : option[Name] }
    | Orderby { orderings : list[PExpr * bool]; }
    | Select  { expr : PExpr; }
    | Group   { expr : PExpr; byExpr : PExpr; }
    | Into    { ident : Name; }

    public override ToString() : string
    {
      def ordiringToStr(expr : PExpr, isAsc : bool) : string
      {
        def order = if (isAsc) "" else " desc";
        $"$expr$order"
      }
      match (this)
      {
        | From    (ident, inExpr) => $"from $ident in $inExpr"
        | Let     (ident, expr)   => $"let $ident = $expr"
        | Where   (expr)          => $"where $expr"
        | Orderby (orderings)     => $<#order by ..$(orderings; ", "; ordiringToStr)#>
        | Select  (expr)          => $"select $expr"
        | Group   (expr, byExpr)  => $"group $expr by $byExpr"
        | Into    (ident)         => $<#into $ident #>
        | Join    (ident, inExpr, key1Expr, key2Expr, into) => 
          def res = $"join $ident in $inExpr on $key1Expr == $key2Expr";
          match (into)
          {
            | Some(intoIdent) => $"$res $intoIdent"
            | _ => res
          }
      }
    }

    public static ConvertQuery(queryClauses : list[QueryClause]) : PExpr
    {
      ConvertQuery(null, queryClauses, SCG.List())
    }
    
    static ConvertQuery(collection : PExpr, queryClauses : list[QueryClause], parms : SCG.List[PExpr]) : PExpr
    {
      def make_x_param(parms : SCG.List[PExpr]) : PExpr
      {
        assert2(!parms.IsEmpty());
        if (parms.Count == 1) parms[0] else PExpr.Tuple(NList.ToList(parms), 1)
      }
      def appendArgToTuple(paramExpr, exprForAppend) : PExpr.Tuple
      {
        match (paramExpr)
        {
          | PExpr.Tuple(args) => PExpr.Tuple.Create(args + [exprForAppend])
          | _                 => PExpr.Tuple.Create([paramExpr, exprForAppend])
        }
      }
      match (queryClauses)
      {
        | QueryClause.From(ident1, inExpr1) :: QueryClause.From(ident2, inExpr2) :: QueryClause.Select(selExpr) :: tail 
        | QueryClause.From(ident1, inExpr1) :: QueryClause.From(ident2, inExpr2) :: tail with selExpr = null =>
          // from x1 in e1 from x2 in e2 ==> e1.SelectMany( x1 => e2 , ( x1 , x2 ) => new { x1 , x2 } )
          def p1 = <[ $(ident1 : name) ]>;
          def p2 = <[ $(ident2 : name) ]>;
          parms.Add(p1);
          parms.Add(p2);
            
          def selExpr2 = if (selExpr == null) <[ ($p1, $p2) ]> else selExpr;
            
          def newCollection = 
            match (selExpr2)
            {
              | <[ $(n2 : name) ]> when n2.Equals(ident2) => <[ $inExpr1.SelectMany($p1 => $inExpr2) ]>
              | _ =>
                mutable p1Used = false;
                def walker = ExprWalker();
                def walk(info : ExprWalkInfo) : void
                {
                  match (info.Node)
                  {
                    | <[ $(n3 : name) ]> when n3.Equals(ident1) => p1Used = true
                    | _ => ()
                  }
                }
                walker.Walk(selExpr2, walk);
                def p1Ref = if (p1Used) p1 else <[ _ ]>;
                <[ $inExpr1.SelectMany($p1 => $inExpr2,  (($p1Ref, $p2)) => $selExpr2) ]>
            };

          ConvertQuery(newCollection, tail, parms)
          
        | QueryClause.From(ident, inExpr) :: tail => 
          parms.Add(<[ $(ident : name) ]>);
          ConvertQuery(inExpr, tail, parms)
            
        | QueryClause.Where(expr) as clause :: tail =>
          // from x in e
          // where f
          // from x in ( e ) . Where ( x => f )
          def e = collection;
          def x = make_x_param(parms);
          def newCollection = Util.locate(clause.Location, <[ $e.Where($x => $expr) ]>);
          ConvertQuery(newCollection, tail, parms)

        | QueryClause.Select(expr) :: tail =>
          //TODO: Тут надо как-то извлекать список имен колонок и копировать его в parms
          def x = make_x_param(parms);
          def newCollection = <[ $collection.Select($x => $expr) ]>;
          ConvertQuery(newCollection, tail, parms)
            
        | QueryClause.Join(ident, inExpr, k1, k2, into) :: tail =>
          // from x1 in e1    join x2 in e2 on k1 equals k2 
          def e1 = collection;
          def e2 = inExpr;
          def x1 = make_x_param(parms);
          def x2 = <[ $(ident : name) ]>;
          def newCollection = match (into)
          {
            | Some(intoName) => 
              def g = <[ $(intoName : name)]>;
              parms.Add(g);
              // e1.GroupJoin(e2 , x1 => k1, x2 => k2, (x1, g) => new { x1 , g })
              def x1_g = appendArgToTuple(x1, g);
              <[ $e1.GroupJoin($e2, $x1 => $k1, $x2 => $k2, ($x1, $g) => $x1_g) ]>;
                
            | None => 
              parms.Add(x2);
              // from * in (e1).Join(e2, x1 => k1, x2 => k2, (x1, x2) => new { x1 , x2 })
              def x1_x2 = appendArgToTuple(x1, x2);
              <[ $e1.Join($e2, $x1 => $k1, $x2 => $k2, ($x1, $x2) => $x1_x2) ]>;
          };
          ConvertQuery(newCollection, tail, parms)
            
        | QueryClause.Let(ident, expr) :: tail =>
          // from x in e  
          // let y = f
          // from * in ( e ) . Select ( x => new { x , y = f } )
          def e = collection;
          def x = make_x_param(parms);
          def x_f = appendArgToTuple(x, expr);
          def newCollection = <[ $e.Select($x => $x_f) ]>;
          parms.Add(<[ $(ident : name) ]>);
          ConvertQuery(newCollection, tail, parms)
            
        | QueryClause.Orderby([]) as o :: tail =>
          Message.Error(o.Location, "a orderby clause should contains one or more orderings");
          ConvertQuery(collection, tail, parms)

        | QueryClause.Orderby((ordExpr, direction) :: tailOrderings) :: tail =>
          // from x in e   orderby k1 , k2 , … , kn  ==>
          // e.OrderBy(x => k1).ThenBy(x => k2). … .ThenBy(x => kn)
            
          def e = collection;
          def x = make_x_param(parms);
          // e.OrderBy(x => k1)
          def newCollection1 = if (direction) <[ $e.OrderBy          ($x => $ordExpr) ]>
                                else           <[ $e.OrderByDescending($x => $ordExpr) ]>;
          // .ThenBy(x => k2). … .ThenBy(x => kn)
          def convertTailOrderings(x : PExpr, orderings, e : PExpr) : PExpr
          {
            match (orderings)
            {
              | (ordExpr, direction) :: tail =>
                def new_e = if (direction) <[ $e.ThenBy          ($x => $ordExpr) ]>
                            else           <[ $e.ThenByDescending($x => $ordExpr) ]>;
                convertTailOrderings(x, tail, new_e)
                  
              | [] => e
            }
          }            
          def newCollection2 = convertTailOrderings(x, tailOrderings, newCollection1);
                                
          ConvertQuery(newCollection2, tail, parms)
            
        | QueryClause.Group(expr, byExpr) :: tail =>
          // from x in e group v by k
          // e.GroupBy(x => k, x => v)   ||   e.GroupBy(x => k) WHERE v is x
          def e = collection;
          def x = make_x_param(parms);
          def v = expr;
          def k = byExpr;

          def newCollection = {
            def equalExprs(a : PExpr, b : PExpr) {
              | (Ref(a), Ref(b)) when a.Id == b.Id =>
                true
              | (Tuple(a), Tuple(b)) when a.Equals(b, equalExprs) =>
                true
              | (TypeEnforcement(a, a_ty), TypeEnforcement(b, b_ty)) when equalExprs(a, b) && equalExprs(a_ty, b_ty) =>
                true
              | _ =>
                false
            }
            if(equalExprs(x, v))
              <[ $e.GroupBy($x => $k) ]>
            else
              <[ $e.GroupBy($x => $k, $x => $v) ]>
          }
          ConvertQuery(newCollection, tail, parms)
            
        | QueryClause.Into(ident) :: tail =>
          // from … into x … 
          // from x in ( from … ) …
            
          // reset all params and add new one (x)
          // and try continue convertions
          def res = ConvertQuery(null, QueryClause.From(ident, collection) :: tail, SCG.List());
          res
          
        | [] => collection
        | queryClaus :: _ => 
          def clausName = queryClaus.GetType().Name.ToLower();
          Message.Error(queryClaus.Location, $"clause '$clausName' not supported yet");
          collection
      }
    }
  }
}
