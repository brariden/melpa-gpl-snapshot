using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Compiler;
using SCG = System.Collections.Generic;

namespace Nemerle.Linq
{
  /// <summary>
  /// Description of LexerLinq.
  /// </summary>
  public class LexerLinq : LexerCompletion
  {
    static _keywords : list[string] = ["where", "in", "on", "from", "select", "group", "order", "by", "orderby", 
      "join", "desc", "descending", "ascending", "let", "into"];
    static _keywordSet : SCG.HashSet[string] = SCG.HashSet(_keywords);
    public Env : GlobalEnv;
    
    
    public this(typer : Typer, code : string, loc : Location, 
                completionMarkLine : int, completionMarkChar : int)
    {
      base(typer.Manager, code, loc, completionMarkLine, completionMarkChar);
      Env = GlobalEnv(typer.Env, _keywords);
      Keywords = Env.Keywords;
    }
    
    public Peek() : Token
    {
      def tok = base.GetToken();
      PushBack(tok);
      tok
    }
    
    public PushBack(tok : Token) : void
    {
      tok_pending = tok
    }
    
    public GetAnyToken() : Token
    {
      base.GetToken()
    }
    
    public override GetToken() : Token
    {
      def tok = base.GetToken();
      match (tok)
      {
        //| Token.Comma 
        | Token.Keyword(name) when _keywordSet.Contains(name) =>
          tok_pending = tok;
          Token.EndOfFile()
        | _ => tok 
      }
    }
  }
}
