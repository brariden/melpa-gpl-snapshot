/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using System.IO;
using System.CodeDom.Compiler;
using System.Drawing;
using System.Reflection;

using sliver.SnippetCompiler;
using sliver.SnippetCompiler.Languages;

namespace Nemerle.SnippetCompiler.AddIns
{
  /// <summary>
  /// Description of NemerleLanguage.
  /// </summary>
  internal class NemerleLanguage : LanguageBase
  {
    protected /*override*/ CreateCodeDomProvider() : CodeDomProvider
    {
      match (AssemblyLoader.Load("Nemerle.Compiler"))
      {
      | null => null;
      | asm  =>
        def compilerType = asm.GetType("Nemerle.Compiler.NemerleCodeProvider", true);
        Activator.CreateInstance(compilerType) :> CodeDomProvider;
      }
    }

    private GetResource(name : string) : Stream
    {
      def asm = Assembly.GetExecutingAssembly();

      asm.GetManifestResourceStream(name);
    }

    public override GetSyntaxLanguageXmlStream() : Stream
    {
      GetResource("LanguageXml.Nemerle.xml");
    }

    public override GetDefaultTemplate() : string
    {
      using (sr = StreamReader(GetResource("DefaultTemplate.n")))
        sr.ReadToEnd();
    }

    public override Name : string
    {
      get { "Nemerle"; }
    }

    public override FileExtension : string
    {
      get { "n"; }
    }

    public override SmallImage : Image
    {
        get { Image.FromStream(GetResource("Nemerle.png")); }
    }

    protected virtual SetCompilerParameters(_cp : CompilerParameters, _compileType : CompileType, _assemblyName : string) : void
    {
    }

    protected virtual FixCompileResults(results : CompileResults) : void
    {
      foreach (error is CompilerError in results.Errors)
      {
        error.Line--;
        error.Column--;
      }
    }

    public override Compile(compileType : CompileType, assemblyFilename : string, references : array[string], files : array[string], includeSymbols : bool) : CompileResults
    {
        mutable results : CompilerResults;
        mutable cp : CompilerParameters = CompilerParameters();
        cp.ReferencedAssemblies.AddRange(references);
        cp.GenerateInMemory = false;
        cp.OutputAssembly = assemblyFilename;
        cp.GenerateExecutable = ((compileType == CompileType.ConsoleExe) || (compileType == CompileType.WinFormsExe));
        cp.WarningLevel = 0x4;
        cp.IncludeDebugInformation = includeSymbols;
        cp.TreatWarningsAsErrors = false;
        when ((compileType == CompileType.WinFormsExe))
        {
            cp.CompilerOptions = " /target:winexe";
        }
        this.SetCompilerParameters(cp, compileType, assemblyFilename);

        // What does this line???
        //
        // CodeDomProvider.GetLanguageFromExtension(this.FileExtension);

        mutable provider : CodeDomProvider = this.CreateCodeDomProvider();
        try
        {
            results = provider.CompileAssemblyFromFile(cp, files);
        }
        catch
        {
            | exception is Exception =>
            {
                results = CompilerResults(null);
                mutable error : CompilerError = CompilerError();
                error.ErrorText = string.Concat("An exception occurred while compiling: ", exception.Message);
                _ = results.Errors.Add(error);
            }
        }

        mutable results2 : CompileResults = CompileResults(results);
        this.FixCompileResults(results2);
        /* return */results2;
    }
  }
}
