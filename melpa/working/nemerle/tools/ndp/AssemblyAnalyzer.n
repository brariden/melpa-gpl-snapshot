using System;
using System.Reflection;

// #define Console.WriteLine nic

namespace NemerleDoc
{

  /// <summary>
  /// Provides an abstact interface to give some messages as percent of progress.
  /// </summary>
  interface IOResponse {
     init(limit : int) : void;
     next(no : int, msg : string)    : void;
     end(msg : string) : void;
  }

  /// <summary>
  /// Provides tools for analyzing assembly (given as a filename)
  /// </summary>
  module AssemblyAnalyzer
  {
    mutable asm : Assembly;
  
    type_analyzer (t : System.Type, tree : DataTree) : void
    {
        /*
        Console.WriteLine("\n\n--> Type analyzer: SystemType.ToString() {0}", t.ToString());
        Console.WriteLine("--> FullName {0}\tAttributes {1}", t.FullName, t.Attributes);
        Console.WriteLine("--> Namespace: {0}\tName: {1}", t.Namespace,  t.Name, t.FullName);
        Console.WriteLine("--> BaseType: {0}\tDeclaredType: {1}\n\n", t.BaseType, t.DeclaringType);
        */
        
        // analyze attributes      
        def attr = ReflAttribs(is_abstract=t.IsAbstract,
                               is_array=t.IsArray,
                               is_class=t.IsClass,
                               is_interface=t.IsInterface,
                               attr=t.Attributes);
      
        tree.AddItem(t.FullName, ElementType.Type(), attr, t.BaseType, t.GetInterfaces());
      
        foreach (m in t.GetMembers()) 
        {
          // t : System.Reflection.MemberInfo
          // Console.WriteLine("------> Declared type: {0}, Member type: {1}, Name: {2}, ReflType: {3}", m.DeclaringType, m.MemberType, m.Name, m.ReflectedType);
          // Console.WriteLine("------> Element {0}, GetType: {1} ", m,  m.GetType());
          def ty =
            match (m.MemberType) {  // System.Reflection.MemberTypes enumeration
              | Constructor
              | Method   => ElementType.Method()
              | Event    => ElementType.Event()
              | Field    => ElementType.Field()
              | Property => ElementType.Property()
              | NestedType
              | TypeInfo => ElementType.Type()
              | Custom   => ElementType.CustomAttribute()
              | All
              | _ => ElementType.Unknown() // to avoid non-exhaustive pattern message
            }
            
          if (ty != null)
            tree.AddItem(m.DeclaringType.ToString(), m.Name, ty)
          else Console.WriteLine("*** Rejected {0} ***, {1}", m.Name, m.MemberType);        
      }
    }
    
    /// <summary>
    /// Analyzes types in assembly in 'filename', adds to tree
    /// In additilion, display provides a presentation of a progress.
    /// </summary>
    public analyze (filename : string, tree : DataTree, display : IOResponse) : void
    {
      try {
        asm = Assembly.LoadFile(filename);
        when (Nemerledoc.debug) {
          // def objs = asm.GetManifestResourceInfo();
          // foreach (ca in objs) 
          // Console.WriteLine(objs);
        }
        // Console.WriteLine("Codebase={0}\nFullName={1}\nLocation={2}", asm.CodeBase, asm.FullName, asm.Location);
        mutable types = asm.GetTypes();
        display.init(types.Length);
        mutable lp = 0;
        foreach (t in types)
        {
          lp++;
          type_analyzer(t, tree);
          display.next(lp, "")
        }
        display.end("\n")
      } catch  {
        | e => Console.WriteLine("Loading assembly error: {0}", e)
      }
    }
    
  } // AssemblyAnalyzer

}
