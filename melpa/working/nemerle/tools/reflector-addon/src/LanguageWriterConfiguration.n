/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using Nemerle.Utility;

using Reflector;
using Reflector.CodeModel;

namespace Reflector.NemerleLanguage
{
  internal enum NumberFormat
  {
  | Auto
  | Hexadecimal
  | Decimal
  }

  internal enum BracingType
  {
  | Block
  | C
  | Indent
  }

  internal class LanguageWriterConfiguration
  {
    static FalseString : string = false.ToLowerInvariantString();

    _configuration : ILanguageWriterConfiguration;

    [Accessor] _numberFormat : NumberFormat;
    [Accessor] _bracingType  : BracingType;
    [Accessor] _hideCompilerGenerated  : bool;

    public this
      ( configuration : ILanguageWriterConfiguration
      , configManager : IConfigurationManager
      )
    {
      _numberFormat = ParseEnumValue(configuration["NumberFormat"], NumberFormat.Auto);

      unless (configManager == null)
      {
        def memerleConfig = configManager["Nemerle"];
        _bracingType  = ParseEnumValue(memerleConfig.GetProperty("BracingType"), BracingType.Block);
        _hideCompilerGenerated = memerleConfig.GetProperty("HideCompilerGenerated") != FalseString;
      }

      _configuration = configuration;
    }

    private static ParseEnumValue['a](strValue : string, defaultValue : 'a) : 'a
    {
      if (!string.IsNullOrEmpty(strValue) && Array.IndexOf(Enum.GetNames(typeof('a)), strValue) >= 0)
        Enum.Parse(typeof('a), strValue) :> 'a;
      else
        defaultValue;
    }

    public ShowCustomAttributes : bool
    {
      get { _configuration["ShowCustomAttributes"] != FalseString }
    }

    public ShowDocumentation : bool
    {
      get { _configuration["ShowDocumentation"] != FalseString }
    }

    public ShowNamespaceBody : bool
    {
      get { _configuration["ShowNamespaceBody"] != FalseString }
    }

    public ShowNamespaceImports : bool
    {
      get { _configuration["ShowNamespaceImports"] != FalseString }
    }

    public ShowMethodDeclarationBody : bool
    {
      get { _configuration["ShowMethodDeclarationBody"] != FalseString }
    }

    public ShowTypeDeclarationBody : bool
    {
      get { _configuration["ShowTypeDeclarationBody"] != FalseString }
    }

    #region IsVisible

/*
    private IsVisible(methodVisibility : MethodVisibility) : bool
    {
      def visibilityConfig = _configuration.Visibility;
      match (methodVisibility)
      {
      | MethodVisibility.Private
      | MethodVisibility.PrivateScope      => visibilityConfig.Private
      | MethodVisibility.FamilyAndAssembly => visibilityConfig.FamilyAndAssembly
      | MethodVisibility.Assembly          => visibilityConfig.Assembly
      | MethodVisibility.Family            => visibilityConfig.Family
      | MethodVisibility.FamilyOrAssembly  => visibilityConfig.FamilyOrAssembly
      | MethodVisibility.Public            => visibilityConfig.Public
      | _                                  => throw NotSupportedException()
      }
    }

    private IsVisible(fieldVisibility : FieldVisibility) : bool
    {
      def visibilityConfig = _configuration.Visibility;
      match (fieldVisibility)
      {
      | FieldVisibility.Private
      | FieldVisibility.PrivateScope      => visibilityConfig.Private
      | FieldVisibility.FamilyAndAssembly => visibilityConfig.FamilyAndAssembly
      | FieldVisibility.Assembly          => visibilityConfig.Assembly
      | FieldVisibility.Family            => visibilityConfig.Family
      | FieldVisibility.FamilyOrAssembly  => visibilityConfig.FamilyOrAssembly
      | FieldVisibility.Public            => visibilityConfig.Public
      | _                                 => throw NotSupportedException()
      }
    }
*/

    private IsVisible(typeVisibility : TypeVisibility) : bool
    {
      def visibilityConfig = _configuration.Visibility;
      match (typeVisibility)
      {
      | TypeVisibility.Private
      | TypeVisibility.NestedPrivate           => visibilityConfig.Private
      | TypeVisibility.NestedFamilyAndAssembly => visibilityConfig.FamilyAndAssembly
      | TypeVisibility.NestedAssembly          => visibilityConfig.Assembly
      | TypeVisibility.NestedFamily            => visibilityConfig.Family
      | TypeVisibility.NestedFamilyOrAssembly  => visibilityConfig.FamilyOrAssembly
      | TypeVisibility.Public
      | TypeVisibility.NestedPublic            => visibilityConfig.Public
      | _                                      => throw NotSupportedException()
      }
    }

/*
    public IsVisible(value : IEventReference) : bool
    {
      IsVisible(value.DeclaringType) && IsVisible(value.GetVisibility())
    }

    public IsVisible(value : IFieldReference) : bool
    {
      IsVisible(value.DeclaringType) && IsVisible(value.GetVisibility())
    }

    public IsVisible(value : IMethodReference) : bool
    {
      IsVisible(value.DeclaringType) && IsVisible(value.GetVisibility())
    }

    public IsVisible(value : IPropertyReference) : bool
    {
      IsVisible(value.DeclaringType) && IsVisible(value.GetVisibility())
    }
*/

    public IsVisible(value : IType) : bool
    {
      match (value)
      {
      | typeRef is ITypeReference =>
        def ownerVisible = 
          match (typeRef.Owner)
          {
          | ownerRef is ITypeReference => IsVisible(ownerRef)
          | _                          => true
          }
        ownerVisible && IsVisible(typeRef.GetVisibility())
      | _                         => throw NotSupportedException();
      }
    }

    #endregion

  }
}