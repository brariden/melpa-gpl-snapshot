<?xml version="1.0" encoding="windows-1251"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN"
"http://colorer.sf.net/2003/hrc.dtd">
<hrc version="take5" xmlns="http://colorer.sf.net/2003/hrc"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd">
<type name="nem2">
<import type="def"/>



<!--
    nemerle syntax description beta
-->



<!-- 'a' -->
<region name="nemChar"        parent="Symbol"/>

<!-- /*,*/,// -->
<region name="nemComment"        parent="Comment"/>

<!-- inside comment -->
<region name="nemCommentContent"        parent="CommentContent"/>

<!-- +,<,*,&,... -->
<region name="nemOpSymbol"        parent="Symbol"/>

<!-- built in type name -->
<region name="nemTypename"        parent="Keyword"/>

<!-- build in keyword, class,override,... -->
<region name="nemKeyword"        parent="Keyword"/>

<!-- numeric literals -->
<region name="nemNumDec"        parent="NumberDec"/>
<region name="nemNumHex"        parent="NumberHex"/>
<region name="nemNumOct"        parent="NumberOct"/>
<region name="nemNumBin"        parent="NumberBin"/>
<region name="nemNumFloat"        parent="NumberFloat"/>
<region name="nemNumSuffix"        parent="NumberSuffix"/>

<!-- <[,]> -->
<region name="nemQuote"        parent="SymbolStrong"/>

<!-- escape sequence in string literal -->
<region name="nemEscSymb"      parent="StringContent"/>

<!-- some open, close -->
<region name="nemOpen"        parent="PairStart"/>
<region name="nemClose"        parent="PairEnd"/>

<!-- errors, warnings -->
<region name="nemError"        parent="Error"/>
<region name="nemWarn"        parent="Error"/>

<region name="nemDollared"      parent="StringEdge"/>
<region name="nemDirective"     parent="Directive"/>
<region name="nemWord"        parent="Keyword"/>
<region name="nemSymbol"        parent="Symbol"/>
<region name="nemString"      parent="String"/>





<!--
 nemerle syntax description beta
-->


<!-- <[ ]> -->
<scheme name="nem_quote">
   <block start="/(&lt;\[)/" end="/(\]&gt;)/" scheme="nem_quote"
          region00="nemQuote" region01="nemOpen"
          region10="nemQuote" region11="nemClose"/>
</scheme>

<!-- { } -->
<scheme name="nem_fig">
   <block start="/(\{)/" end="/(\})/" scheme="nem_fig"
          region00="nemQuote" region01="nemOpen"
          region10="nemQuote" region11="nemClose"/>
          
<!-- [ ] -->
</scheme>
<scheme name="nem_square">
   <block start="/(\[)/" end="/(\])/" scheme="nem_square"
          region00="nemOpSymbol" region01="nemOpen"
          region10="nemOpSymbol" region11="nemClose"/>
</scheme>

<!-- ( ) -->
<scheme name="nem_round">
   <block start="/(\()/" end="/(\))/" scheme="nem_round"
          region00="nemOpSymbol" region01="nemOpen"
          region10="nemOpSymbol" region11="nemClose"/>
</scheme>


<scheme name="nem_paren">
<inherit scheme='nem_quote'>
	<virtual scheme='nem_quote' subst-scheme='nem_paren'/>
</inherit>
<inherit scheme='nem_round'>
	<virtual scheme='nem_round' subst-scheme='nem_paren'/>
</inherit>
<inherit scheme='nem_square'>
	<virtual scheme='nem_square' subst-scheme='nem_paren'/>
</inherit>
<inherit scheme='nem_fig'>
	<virtual scheme='nem_fig' subst-scheme='nem_paren'/>
</inherit>
</scheme>





<!--
    nemerle syntax description beta
-->




<scheme name='lComment'>
	<block start='/\/\//' end='/$/'
		scheme='Comment'
		region00='nemComment'
		region='nemCommentContent'
		/>
</scheme>

<scheme name='rComment'>
	<block start='/(\/\*)/' end='/(\*\/)/'
		scheme='Comment'
		region='nemCommentContent'
		region00='nemComment'
		region10='nemComment'
		region01='nemOpen'
		region11='nemClose'
		/>
</scheme>
















<scheme name='simple'>
	<block 
start='/^[\t ]*(#[\t ]*region[\t ]*)([^\n\/]*(\/\/?!)?)*((\/\/.*)|(.*))$/'
end='/^[\t ]*(#[\t ]*endregion[\t ]*)([^\n\/]*(\/\/?!)?)*((\/\/.*)|(.*))$/'
		scheme='simple'
		region00='nemDirective' region10='nemDirective'
		region01='nemOpen' region11='nemClose'
		region03='nemWarn' region13='nemWarn'
		region05='nemComment' region15='nemComment'
		/>
   <regexp 
match='/^[ \t]*#[ \t]*define[ \t]+[\w]+([^\n\/]*(\/\/?!)?)*((\/\/.*)|(.*))$/' 
region0='nemDirective'
region2='nemWarn'
region4='nemComment'
	/>
   <regexp 
match='/^[ \t]*#[ \t]*undef[ \t]+[\w]+([^\n\/]*(\/\/?!)?)*((\/\/.*)|(.*))$/' 
region0='nemDirective'
region2='nemWarn'
region4='nemComment'
	/>

   <regexp 
match='/^[ \t]*#[ \t]*line[\r\t ]+default[ \t]*([^\n\/]*(\/\/?!)?)*((\/\/.*)|(.*))$/'
region0='nemDirective'
region2='nemWarn'
region4='nemComment'
	/>
   <regexp 
match='/^[ \t]*#[ \t]*line[\r\t ]+[0-9]+([^\n\/]*(\/\/?!)?)*((\/\/.*)|(.*))$/'
region0='nemDirective'
region2='nemWarn'
region4='nemComment'
	/>

   <regexp 
match='/^[ \t]*#[ \t]*pragma[\r\t ]+warning[\r\t ]+(disable)|(restore)([\r\t ]+\d+(,[\r\t ]+\d+)*)?([^\n\/]*(\/\/?!)?)*((\/\/.*)|(.*))/' 
region0='nemDirective'
region6='nemWarn'
region8='nemComment'
	/>
   <regexp match='/^[ \t]*#[ \t]*pragma[\r\t ]+indent.*/' region0='nemDirective'/>

   <regexp match='/^[ \t]*#[ \t]*error.*$/' region0='nemDirective'/>
   <regexp match='/^[ \t]*#[ \t]*warning.*$/' region0='nemDirective'/>
</scheme>

<scheme name='if_expr'>
	<block start='/(.?!|\n)/' scheme='if_end'
		end='/^\M(([\t ]*#[\t ]*endif)).*$/'
	/>
	<inherit scheme='lComment'/>
	
	<!-- /, warning: expected // -->
	<regexp match='/\/\/?!/' region0="nemWarn"/>

	<inherit scheme='nem_round'>
		<virtual scheme='nem_round' subst-scheme='if_expr'/>
	</inherit>
	<keywords region='nemKeyword'>
		<word name='true'/>
		<word name='false'/>
	</keywords>
	<keywords region='nemOpSymbol'>
		<symb name='!'/>
		<symb name='\x26\x26'/>
		<symb name='||'/>
		<symb name='=='/>
		<symb name='!='/>
	</keywords>
	<regexp match='/[\w_]+/' region0='nemString'/>
	
	<!-- wrong characters in preprocessing directive -->
	<regexp match='/[^ \t]/' region0='nemError' priority='low'/>
</scheme>

<scheme name='if_end'>
	<block start='/^([\t ]*#[\t ]*if)\M[ \t]/'
		end='/^(([\t ]*#[\t ]*endif)).*$/'
		scheme='ifexpr_end'
		region00='nemDirective'	region11='nemDirective'
		region01='nemOpen'		region12='nemClose'
	/>
	<block 	start='/^([\t ]*#[\t ]*elif)\M[ \t]/'
		end='/^\M(([\t ]*#[\t ]*endif)).*$/'
		region00='nemDirective'	region11='nemDirective'
		region01='nemOpen' 		region12='nemClose'
		scheme='ifexpr_end'
	/>
	<block 	start='/^([\t ]*#[\t ]*else).*$/'
		end='/^\M(([\t ]*#[\t ]*endif)).*$/'
		region00='nemDirective'	region11='nemDirective'
		region01='nemOpen'     	region12='nemClose'
		scheme='nemPP'
	/>
	<inherit scheme='simple'>
		<virtual scheme='simple' subst-scheme='nemPP' />
	</inherit>


	<inherit scheme='lComment'/>
	<inherit scheme='rComment'/>
	<inherit scheme='nem_numb' />
	<inherit scheme='nem_symb' />
	<inherit scheme='nemString' />
	<inherit scheme='nem_paren'>
		<virtual scheme='nem_paren' subst-scheme='if_end'/>
	</inherit>
	<inherit scheme='nem_key' />


<!---->

	<regexp match='/^[ \t]*#.*$/' 
		region0='nemError' 
		priority='low'
	/>

</scheme>
	

<scheme name='ifexpr_end'>
	<block start='/.?#1[ \t]/' 
		end='/^\M(([ \t]*#[ \t]*endif)).*$/'
		scheme='if_expr'
	/>             
</scheme>

<scheme name='nemPP'>
	<inherit scheme='simple'>
		<virtual scheme='simple' subst-scheme='nemPP' />
	</inherit>
	<block start='/^([\t ]*#[\t ]*if)\M[ \t]/'
		end='/^([\t ]*#[\t ]*endif).*$/'
		scheme='ifexpr_end'
		region00='nemDirective'	region10='nemDirective'
		region01='nemOpen'     	region11='nemClose'
	/>
	<regexp match='/^[ \t]*#.*$/' 
		region0='nemError' 
		priority='low'
	/>
</scheme>




<!--
    nemerle syntax description beta
-->


<!-- 1_000_000 -->
<scheme name="nemDecNumb">
   <regexp match="/\b(\d+(_\d+)*)([uslbUSLB]{1,2})?\b/xi"
           region0="nemNumDec" region3="nemNumSuffix"/>
</scheme>

<!-- 0xff -->
<scheme name="nemHexNumb">
   <regexp match="/\b0[xX][\da-fA-F]+(_[\da-fA-F]+)*([uslbUSLB]{1,2})?\b/xi"
           region0="nemNumHex" region2="nemNumSuffix"/>
</scheme>

<!-- 0o77 -->
<scheme name="nemOctNumb">
   <regexp match="/\b0[oO][0-7]+(_[0-7]+)*([uslbUSLB]{1,2})?\b/xi"
           region0="nemNumOct" region2="nemNumSuffix"/>
</scheme>

<!-- 0b11 -->
<scheme name="nemBinNumb">
   <regexp match="/\b0[bB][01]+(_[01]+)*([uslbUSLB]{1,2})?\b/xi"
           region0="nemNumBin" region2="nemNumSuffix"/>
</scheme>

<!-- 1.2E3 -->
<scheme name="nemFloatNumb">
   <regexp match="/\b(\d+(_\d+)*)?(\.)?~1\.\d+(_\d+)*([eE][\-\+]?\d+)?([fdmFDM]?)\b/xi" 
   		region0="nemNumFloat" region6="nemNumSuffix"/>
   <regexp match="/\b\d+(_\d+)*([eE][\-\+]?\d+)([fdmFDM]?)\b/ix" 
   		region0="nemNumFloat" region3="nemNumSuffix"/>
   <regexp match="/\b\d+(_\d+)*([fdmFDM])\b/ix" 
   		region0="nemNumFloat" region2="nemNumSuffix"/>
</scheme>

<scheme name="nem_numb">
   <inherit scheme="nemFloatNumb"/>
   <inherit scheme="nemBinNumb"/>
   <inherit scheme="nemDecNumb"/>
   <inherit scheme="nemHexNumb"/>
   <inherit scheme="nemOctNumb"/> 
</scheme>





<!--
    nemerle syntax description beta
-->


<!-- '\\' -->
<scheme name="nem_symb">
   <regexp match="/'[^\'\\]'/" region0="nemChar"/>
   <regexp match="/\'\\n\'/" region0="nemChar"/>
   <regexp match="/\'\\b\'/" region0="nemChar"/>
   <regexp match="/\'\\e\'/" region0="nemChar"/>
   <regexp match="/\'\\r\'/" region0="nemChar"/>
   <regexp match="/\'\\t\'/" region0="nemChar"/>
   <regexp match="/\'\\0\'/" region0="nemChar"/>
   <regexp match="/\'\\$\'/" region0="nemChar"/>
   <regexp match="/\'\\\\\'/" region0="nemChar"/>
   <regexp match="/\'\\\'\'/" region0="nemChar"/>
   <regexp match='/\x27\\\"\x27/' region0="nemChar"/>
   <regexp match="/\'\\x[0-9a-zA-Z]{1,4}\'/" region0="nemChar"/>
   <regexp match="/\'\\u[0-9a-zA-Z]{4}\'/" region0="nemChar"/>
   <regexp match="/\'\\U[0-9a-zA-Z]{8}\'/" region0="nemChar"/>
</scheme>





<!--
    nemerle syntax description beta
-->




<!-- $"$( here )"-->
<scheme name="nem_dlr">
	<inherit scheme="nem_round" />
</scheme>

<scheme name="nemString">
<!-- $@"string" -->
   <block 
    start='/\$[ \r\t]*\@[ \r\t]*"/' end='/"/' 
    scheme="nemStringMonkeyDollar" region="nemString" 
    region00="nemOpen" region10="nemClose"
   />
<!-- $"abc" "def" "$g"-->
   <block 
    start='/\$[ \r\t]*\M(\")/' end='/\M./' 
    scheme="nemPreStringCoreDollar" region="nemString"
   />
<!-- 
   region00="nemOpen" region10="nemClose"
-->
<!-- @"verbatim" -->
   <block 
    start='/\@[ \r\t]*"/' end='/"/' 
    scheme="nemStringMonkey" region="nemString"
    region00="nemOpen" region10="nemClose"
   />
<!-- "string" -->
   <block 
    start='/"/' end='/"/' 
    scheme="nemStringCore" region="nemString"
    region00="nemOpen" region10="nemClose"
   />
</scheme>

<!-- "qwe\n" -->
<scheme name="nemStringCore">
   <regexp match='/\\[ntrbe"\\0\$\x27]/' region0="nemEscSymb"/>
   <regexp match='/\\x[\da-fA-F]{1,4}/' region0="nemEscSymb"/>
   <regexp match='/\\u[\da-fA-F]{4}/' region0="nemEscSymb"/>
   <regexp match='/\\U[\da-fA-F]{8}/' region0="nemEscSymb"/>
   <regexp match='/\\\\$/' region0="nemError"/> 
   <regexp match='/[^\\\"]$/' region0="nemError"/>
   <regexp match='/\\./' region0="nemError"/>
   <regexp match='/(\$)[\w\(]/' region1="nemWarn"/>
</scheme>


<scheme name="nemPreStringCoreDollar">
   <regexp match='/[ \t\r]/'/> 
   <block 
    start='/\"/' end='/\"/' 
    scheme="nemStringCoreDollar" region="nemString"
    region00="nemOpen" region10="nemClose"
   />
</scheme>

<!-- $ "$qwe\n" -->
<scheme name="nemStringCoreDollar">

   <regexp match='/\\[ntrbe"\\0\$\x27]/' region0="nemEscSymb"/>
   <regexp match='/\\x[\da-fA-F]{1,4}/' region0="nemEscSymb"/>
   <regexp match='/\\u[\da-fA-F]{4}/' region0="nemEscSymb"/>
   <regexp match='/\\U[\da-fA-F]{8}/' region0="nemEscSymb"/>
   <regexp match='/[^\"]$/' region0="nemError"/>
   <regexp match='/\\./' region0="nemError"/>
   <regexp match='/\$[\w]+/' region0="nemDollared"/>
   <block start='/(\$[ \t\r]*\()/' end='/(\))/' 
	scheme="nem_dlr"
	region00="nemOpSymbol" region10="nemOpSymbol"
	region01='nemOpen' region11='nemClose'
   />
</scheme>

<!-- @"no escapes\" -->
<scheme name="nemStringMonkey">
   <regexp match='/""/' region0="nemEscSymb"/>
</scheme>

<!-- $@"no escapes\ but $dollars" -->
<scheme name="nemStringMonkeyDollar">
   <regexp match='/""/' region0="nemEscSymb"/>
   <regexp match='/\$[\w]+/' region0="nemDollared"/>
   <block start='/(\$\()/' end='/(\))/' 
	scheme="nem_dlr"
	region00="nemOpSymbol" region10="nemOpSymbol"
	region01='nemOpen' region11='nemClose'
   />
</scheme>






<!--
 nemerle syntax description beta
-->


<scheme name="nem_symb_lexer">
 <keywords region="nemOpSymbol">
<symb name=";"/>
<symb name=","/>
 </keywords>
</scheme>

<scheme name="nem_opsymb">
 <keywords region="nemOpSymbol">
	<symb name="="/><symb name="&lt;"/><symb name="&gt;"/>
	<symb name="@"/><symb name="^"/><symb name="|"/>
	<symb name="&amp;"/><symb name="+"/><symb name="-"/>
	<symb name="*"/><symb name="/"/><symb name="$"/>
	<symb name="%"/><symb name="!"/><symb name="?"/>
	<symb name="~"/><symb name="."/><symb name=":"/>
	<symb name="#"/>
 </keywords>
</scheme>

<scheme name="nem_key_lexer">
 <keywords region="nemKeyword">
<!-- Keywords-->
<word name="_"/>
<word name="abstract"/>
<word name="and"/> 
<word name="array"/>
<word name="as"/>
<word name="base"/> 
<word name="catch"/>
<word name="class"/>
<word name="def"/> 
<word name="delegate"/>
<word name="enum"/>
<word name="event"/> 
<word name="false"/>                   
<word name="finally"/>
<word name="fun"/> 
<word name="implements"/> 
<word name="interface"/> 
<word name="internal"/> 
<word name="is"/> 
<word name="macro"/> 
<word name="match"/> 
<word name="matches"/> 
<word name="module"/> 
<word name="mutable"/> 
<word name="namespace"/> 
<word name="new"/> 
<word name="null"/> 
<word name="out"/> 
<word name="override"/> 
<word name="params"/> 
<word name="private"/> 
<word name="protected"/> 
<word name="public"/> 
<word name="ref"/> 
<word name="sealed"/> 
<word name="static"/> 
<word name="struct"/> 
<word name="syntax"/> 
<word name="this"/> 
<word name="throw"/> 
<word name="true"/> 
<word name="try"/> 
<word name="type"/> 
<word name="typeof"/> 
<word name="using"/> 
<word name="variant"/> 
<word name="virtual"/> 
<word name="void"/> 
<word name="volatile"/> 
<word name="when"/> 
<word name="where"/> 
<word name="partial"/> 
<word name="extern"/> 
<word name="with"/> 
 </keywords>
</scheme>

<scheme name="nem_key_coremacro">
 <keywords region="nemKeyword">
<word name="if"/> 
<word name="else"/> 
<word name="for"/> 
<word name="do"/> 
<word name="while"/> 
<word name="return"/> 
<word name="break"/> 
<word name="continue"/> 
<word name="unchecked"/> 
<word name="yield"/> 
<word name="repeat"/> 
<word name="when"/> 
<word name="unless"/> 
<word name="using"/>
<word name="lock"/> 
<word name="foreach"/> 
<word name="abort"/> 
<word name="ignore"/>
<word name="lambda"/> 
<word name="time"/> 
 </keywords>
</scheme>


<scheme name="nem_key_coretype">
 <keywords region="nemTypename">
<word name="object"/>
<word name="bool"/>
<word name="byte"/>
<word name="float"/> 
<word name="uint"/> 
<word name="char"/> 
<word name="ulong"/> 
<word name="ushort"/> 
<word name="decimal"/> 
<word name="int"/> 
<word name="sbyte"/> 
<word name="short"/> 
<word name="double"/> 
<word name="long"/> 
<word name="string"/> 
<word name="void"/> 
 </keywords>
</scheme>


<scheme name="nem_key_exttype">
 <keywords region="nemTypename">
<word name="option"/> 
<word name="list"/> 
 </keywords>
</scheme>

<scheme name="nem_key">
 <keywords region="nemString">
<word name="true"/> 
<word name="false"/> 
<word name="null"/> 
<word name="this"/> 
 </keywords>

	<inherit scheme='nem_key_lexer'/>
	<inherit scheme='nem_symb_lexer'/>
	<inherit scheme='nem_opsymb'/>
	<inherit scheme='nem_key_coremacro'/>
	<inherit scheme='nem_key_coretype'/>
	<inherit scheme='nem_key_exttype'/>
 <keywords region="nemKeyword">
<word name="get"/> 
<word name="set"/> 
 </keywords>
</scheme>




<!--
    nemerle syntax description beta
-->











<scheme name="nem2">
	<inherit scheme='lComment'/>
	<inherit scheme='rComment'/>
	<inherit scheme='nemPP'>
		<virtual scheme='nemPP' subst-scheme='nem2'/>
	</inherit>
	<inherit scheme='nem_numb' />
	<inherit scheme='nem_symb' />
	<inherit scheme='nemString' />
	<inherit scheme='nem_paren'>
		<virtual scheme='nem_paren' subst-scheme='nem2'/>
	</inherit>
	<inherit scheme='nem_key' />
</scheme>



</type>
</hrc>
