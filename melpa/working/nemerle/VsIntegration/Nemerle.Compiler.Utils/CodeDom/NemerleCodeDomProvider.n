using System;
using System.ComponentModel;
using System.CodeDom.Compiler;

using Nemerle.Compiler;

namespace Nemerle.Compiler.Utils
{
  public class NemerleCodeDomProvider : CodeDomProvider
  {
    private provider: CodeDomProvider;

    public this()
    {
      this(NemerleCodeProvider());
    }

    public this(prov: CodeDomProvider)
    {
      provider = prov;
    }

    [Obsolete("Callers should not use the ICodeParser interface.")]
    public override CreateParser():  ICodeParser
    {
#pragma warning disable 618 // Obsolete
      def parser = provider.CreateParser();
#pragma warning restore 618

      if (parser == null)
        NemerleCodeParser();
      else
        parser;
    }

    [Obsolete("Callers should not use the ICodeGenerator interface.")]
    public override CreateGenerator():  ICodeGenerator
    {
#pragma warning disable 618 // Obsolete
      provider.CreateGenerator();
#pragma warning restore 618
    }

    [Obsolete("Callers should not use the ICodeCompiler interface.")]
    public override CreateCompiler():  ICodeCompiler
    {
#pragma warning disable 618 // Obsolete
      provider.CreateCompiler();
#pragma warning restore 618
    }

    public override FileExtension: string
    {
      get { provider.FileExtension; }
    }
    
    public override GetConverter (ty : Type) : TypeConverter
    {
      provider.GetConverter(ty);
    }
  }
}
