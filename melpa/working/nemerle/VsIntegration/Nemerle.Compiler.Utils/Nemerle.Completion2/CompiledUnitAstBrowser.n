using System;
using System.Reflection;
using System.Windows.Forms;
//using Nemerle.Collections; //Fixme: BUG!!!
using Nemerle.Compiler;
using Nemerle.Compiler.Utils;

namespace Nemerle.Completion2
{
  public delegate ShowLocation(loc : Location) : void;

  variant PropInfo
  {
    | SimpleNode
      {
        name : string;
        ty : Type;
        loc : option[Location];
        subNodes : list[PropInfo];

        public override ToString() : string
        {
          match (loc)
          {
            | Some(loc) => $"($loc) $ty: $name"
            | None      => $"$ty: $name"
          }
        }
      }
      
    | LocationNode
      {
        name : string;
        loc  : Location;
    
        public override ToString() : string { $"($loc) $name" }
      }
    | None
  }

  public class CompiledUnitAstBrowser : Form
  {
    ScanVariable(name : string, obj : object, fileIndex : int) : PropInfo
    {
      def tyBldTy   : Type = typeof(TypeBuilder);
      def locTy     : Type = typeof(Location);
      //def locatedTy : Type = typeof(Located);
      def iterTy    : Type = typeof(System.Collections.IEnumerable);
      def processed = Nemerle.Collections.Hashtable();
      def compilerAssembly = typeof(Location).Assembly;

      def getLoc(obj : object)
      {
        def x = match (obj)
        {
          | located is Located => Some(located.Location)
          | _ => None()
        }

        assert(true);
        x
      }

      def scan(name : string, obj : object) : PropInfo
      {
        when (name == "A")
        {
          assert(true);
        }

        def ty = obj.GetType();

        if (!ty.Assembly.Equals(compilerAssembly) || ty.Equals(tyBldTy) || processed.ContainsKey(obj))
          PropInfo.None()
        else
        {
          processed.Add(obj, name);
          //def locatedTy = typeof(Located);
          
          if (ty.Equals(locTy))
            if ((obj :> Location).FileIndex == fileIndex)
              PropInfo.LocationNode(name, obj :> Location);
            else
              PropInfo.None()
          else
          {
            mutable infos = [] : list[PropInfo];

            def fields = ty.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);
            foreach (field in fields)
            {
              def value = field.GetValue(obj);
              
              unless (value == null)
              {
                def valTy = value.GetType();

                when (field.Name == "partial_parts")
                {
                  assert(true);
                }
                
                def processCollection()
                {
                  mutable infos2 = [];
                  
                  foreach (elem when elem != null in value :> System.Collections.IEnumerable)
                  {
                    def res1 = scan("elem:", elem);
                    unless (res1 is PropInfo.None)
                      infos2 ::= res1;
                  }

                  unless (infos2 is [])
                    infos ::= PropInfo.SimpleNode(field.Name, valTy, getLoc(value), infos2);
                }

                def processSingleValue()
                {
                  def res2 = scan(field.Name, value);
                  unless (res2 is PropInfo.None)
                    infos ::= res2;
                }

                match (value)
                {
                  | token is Token =>
                    match (token)
                    {
                      | RoundGroup | BracesGroup | SquareGroup  
                      | QuoteGroup | LooseGroup | Namespace => processCollection();
                      | _ => processSingleValue();
                    }

                  | _ =>
                    if (iterTy.IsAssignableFrom(valTy))
                      processCollection();
                    else
                      processSingleValue();
                }

                

                match (TryGetEnumerator(value))
                {
                  | null => 
                    def res2 = scan(field.Name, value);
                    unless (res2 is PropInfo.None)
                      infos ::= res2;

                  | values =>
                    mutable infos2 = [];
                    
                    foreach (elem when elem != null in values)
                    {
                      def res1 = scan("elem:", elem);
                      unless (res1 is PropInfo.None)
                        infos2 ::= res1;
                    }

                    unless (infos2 is [])
                      infos ::= PropInfo.SimpleNode(field.Name, valTy, getLoc(value), infos2);
                }
              }
            }
            
            if (infos is [])
              PropInfo.None()
            else
              PropInfo.SimpleNode(name, ty, getLoc(obj), infos)
          }
        }
      }

      scan(name, obj);
    }

    public TryGetEnumerator(obj : object) : System.Collections.IEnumerable
    {
      match (obj)
      {
        | token is Token =>
          match (token)
          {
            | RoundGroup as x | BracesGroup as x | SquareGroup as x  
            | QuoteGroup as x | LooseGroup as x | Namespace as x => x

            | _ => null
          }

        | _ => null
      }
    }

    FillTree(root : Decl) : void
    {
      def fileIndex = root.Location.FileIndex;
      mutable currNode = null;

      def locToStr1(x) { $"($(x.Line),$(x.Column); $(x.EndLine),$(x.EndColumn))" }
      def locToStr2(loc)
      {
        | Some(x) => locToStr1(x)
        | _ => ""
      }

      def addNodeFromInfo(nodes, info)
      {
        match (info : PropInfo)
        {
          | SimpleNode(name, ty, loc, subInfos) =>
            def subNode = nodes.Add($"$(locToStr2(loc)) $name ($(ty.Name))");
            match (loc)
            {
              | Some(loc) => subNode.Tag = loc;
              | _ => ()
            }

            foreach (subInfo in subInfos)
              addNodeFromInfo(subNode.Nodes, subInfo);

          | LocationNode(name, loc) =>
            def subNode = nodes.Add($"$(locToStr1(loc)) $name");
            subNode.Tag = loc;

          | None => ()
        }
      }


      def addLocation(nodes, kind, name, location)
      {
        when (!name.IsNullOrEmpty())
        {
          def x = location;
          def newNode = nodes.Add($"($(x.Line),$(x.Column); $(x.EndLine),$(x.EndColumn)) $kind: $name");
          newNode.Tag = location;
          currNode = newNode;
        }
      }

      def addLocations(nodes, text, locations)
      {
        when (!text.IsNullOrEmpty())
        {
          def newNode = nodes.Add(text);
          mutable locAll = Nemerle.Compiler.Location.Default;

          foreach (loc in locations)
          {
            locAll += loc;
            def newSubNode = newNode.Nodes.Add($"($(loc.Line),$(loc.Column); $(loc.EndLine),$(loc.EndColumn))");
            newSubNode.Tag = loc;
            when (loc.FileIndex == fileIndex)
              newSubNode.ForeColor = System.Drawing.Color.Red;
          }

          newNode.Tag = locAll;
        }
      }

      def addName(nodes, name, locations)
      {
        when (!name.IsNullOrEmpty())
        {
          def newNode = nodes.Add($"Name: $name");
          mutable locAll = Nemerle.Compiler.Location.Default;

          foreach (loc in locations)
          {
            locAll += loc;
            def x = loc;
            def newSubNode = newNode.Nodes.Add($"name part ($(x.Line),$(x.Column); $(x.EndLine),$(x.EndColumn))");
            newSubNode.Tag = loc;
          }

          newNode.Tag = locAll;
        }
      }

      def addType(nodes, builder)
      {
        def typePrefix = builder.FullName + ".";
        addLocation(nodes, "Location", " ", builder.Location);
        addLocations(nodes, "PartsLocation", builder.PartsLocation);
        
        def comparer(x, y)
        {
          def (x, y) = (x.Location, y.Location);
          if (x.Line == y.Line) x.Column - y.Column else if (x.Line > y.Line) 1 else 0
        }
        // Filter member whith this fileIndex, convert list to list[MemberBuilder] and sort the result list.
        def fileMembers = builder.GetDirectMembers().Filter(fun(m)
          { m.Location.FileIndex == fileIndex }).Sort(comparer);

        foreach (member in fileMembers)
        {
          assert(true);
          def info = ScanVariable($"$member".Replace(typePrefix, ""), member, fileIndex);
          addNodeFromInfo(nodes, info);
        }
      }

      def add(nodes, astNode)
      {
        def newNode = nodes.Add($"$(astNode.GetType().Name): $astNode");
        newNode.Tag = astNode.Location;

        match (astNode : Decl)
        {
          | Using as x => 
            addName(newNode.Nodes, x.Name, x.NameLocations);
            addLocation(newNode.Nodes, "Alias", x.Alias, x.AliasLocation);

          | Namespace as x =>
            def decls = x.Decls;
            addName(newNode.Nodes, x.Name, x.NameLocations);
            addLocation(newNode.Nodes, "BodyLocation", "{}", x.BodyLocation);
            foreach (decl in decls)
              add(newNode.Nodes, decl)

          | Type(ast) => addType(newNode.Nodes, ast.TypeBuilder);

          | GlobalAttribute => ()
          | None => ()
        }
      }

      def getNodesInfo() : list[int]
      {
        mutable acc = [];
        mutable i = 0;

        def loop(nodes : TreeNodeCollection)
        {
          foreach (node :> TreeNode in nodes)
          {
            i++;
            when (node.IsExpanded)
              acc ::= i;

            loop(node.Nodes);
          }
        }

        loop(Tree.Nodes);
        acc.Rev()
      }

      def setNodesInfo(nodesInfo)
      {
        mutable acc = nodesInfo;
        mutable i = 0;

        def loop(nodes : TreeNodeCollection)
        {
          foreach (node :> TreeNode in nodes)
          {
            i++;
            if (acc.IsEmpty)
              Nemerle.Imperative.Return();
            else when (acc.Head == i)
            {
              node.Expand();
              acc = acc.Tail;
            }
            
            loop(node.Nodes);
          }
        }

        loop(Tree.Nodes);
      }

      try
      {
        Tree.BeginUpdate();
        def nodesInfo = getNodesInfo();
        //def count = Tree.GetNodeCount(true);
        Tree.Nodes.Clear();
        add(Tree.Nodes, root);
        //when (count == Tree.GetNodeCount(true))
        setNodesInfo(nodesInfo);
      }
      finally
      {
        Tree.EndUpdate();
      }
      Tree.Nodes[0].Expand();
    }

    static mutable _instance : CompiledUnitAstBrowser;

    public static Instance : CompiledUnitAstBrowser
    {
      get
      {
        when (_instance == null)
        {
          _instance = CompiledUnitAstBrowser();
          _instance.Show();
        }

        _instance;
      }
    }

    public mutable _root : Decl;

    public Root : Decl
    {
      get { _root }
      set
      {
        _root = value;
        FillTree(value);
      }
    }

    Tree : TreeView;

    public static event ShowLocation : ShowLocation;

    public this()
    {
      //def scrBnds = Screen.PrimaryScreen.Bounds;
      Tree = TreeView();
      Tree.HideSelection = false;
      TopMost = true;
      Tree.Dock = DockStyle.Fill;
      Controls.Add(Tree);
      Bounds = System.Drawing.Rectangle(858, 641, 300, 161);
      Top = 600;
      Left = 1000;
      Tree.AfterSelect += fun(_, arg : TreeViewEventArgs)
      {
        def node = arg.Node;
        when (CompiledUnitAstBrowser.ShowLocation != null)
          match (node.Tag)
          {
            | loc is Location when loc.EndLine < 5000 => CompiledUnitAstBrowser.ShowLocation(loc);
            | _               => ()
          }
        _ = node;
      };
    }

    protected override OnClosed(e : EventArgs) : void
    {
      _instance = null;
      base.OnClosed(e);
    }
  }
}
