using System;
using System.IO;
using System.Diagnostics;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.NemerleModifiers;

using SR = System.Reflection;
using SCG = System.Collections.Generic;
using Typed = Nemerle.Compiler.Typedtree;
using BF = System.Reflection.BindingFlags;

namespace Nemerle.Completion2
{
  public partial class Project
  {
    internal FindUnimplementedMembers(fileIndex : int, line : int, column : int) : option[TypeBuilder * list[FixedType.Class * IMember]]
    {
      match (GetActiveDecl(fileIndex, line,  column))
      {
        | Decl.Type(ast) => 
            def member = ast.TypeBuilder.GetMemberByLocation(fileIndex, line, column);
            def ty = match (member) { | ty is TypeBuilder => ty | _ => ast.TypeBuilder };
            Some(ty, ty.UnimplementedMembers)
            
        | GlobalAttribute | Using | Namespace | None => None()
      };
    }

    internal FindMethodsToOverride(fileIndex : int, line : int, column : int) 
      : option[TypeBuilder * array[IMember]]
    {
      match (GetActiveDecl(fileIndex, line,  column))
      {
        | Decl.Type(ast) => 
            def member = ast.TypeBuilder.GetMemberByLocation(fileIndex, line, column);
            def ty = match (member) { | ty is TypeBuilder => ty | _ => ast.TypeBuilder };
            
            def isOverrideble(m : IMember) : bool
            {
              def res1 = m.Attributes %&& (Abstract | Override | Virtual);
              res1 && !m.IsStatic
            }
            def isOverriden(m : IMember) : bool
            {
              def res1 = m.Attributes %&& Override;
              res1
            }
            def flags = BF.DeclaredOnly %| BF.Instance %| BF.NonPublic %| BF.Public;
            
            def overrideble = ty.BaseType.GetMembers().Filter(isOverrideble);
            def overriden   = ty.GetMembers(flags).Filter(isOverriden);
            
            def excludeOverriden(m : IMember) : bool
            {
              def tbTy = ty.GetMemType();
              def name = m.Name;
              def cmpSign(tbMember : IMember, baseMember : IMember) : bool
              {
                def res1 = match (tbMember, baseMember)
                {
                  | (x is IMethod, y is IMethod) => x.GetParameters().Length == y.GetParameters().Length
                  | (x is IProperty, y is IProperty) => 
                    if (x.IsIndexer)
                    {
                      x.IsIndexer == y.IsIndexer
                      //TODO: реализовать проверку количества параметров эксесоров
                    }
                    else true
                    
                  | _ => false
                }
                
                if (res1) 
                {
                  def baseMemberTy = tbTy.TypeOfMember(baseMember).Fix();
                  def tbMemberTy   = tbMember.GetMemType();
                  def res3 = baseMemberTy.Equals(tbMemberTy);
                  res3
                }
                else false
              }
              
              def res = overriden.Exists(x => x.Name == name && cmpSign(x, m));
              !res
            }
            
            def notOverriden = overrideble.Filter(excludeOverriden).NToArray();
            
            Some(ty, notOverriden)
            
        | GlobalAttribute | Using | Namespace | None => None()
      };
    }

    /// This method add relocation information, if changes made in 
    /// methode/property accessor body or in fields initialisation expression.
    /// If relocation added this method return changed member. Otherwise null.
    /// If relocation not added we must repars all project files.
//    public AddRelocation(
//      fileIndex  : int,
//      newEndChar : int, newEndLine : int,
//      oldEndChar : int, oldEndLine : int,
//      startChar  : int, startLine  : int
//    )
//      : MemberBuilder
//    {
//      def isInclude(loc) { loc.Contains(startLine, startChar) && loc.Contains(oldEndLine, oldEndChar) }
//
//      def member = match (GetActiveDecl(fileIndex, startLine,  startChar))
//      {
//        | Decl.Type(ast) => ast.TypeBuilder.GetMemberByLocation(fileIndex, startLine, startChar);
//        | GlobalAttribute | Using | Namespace | None => null
//      };
//
//      if (member == null)
//        null
//      else match (member) // Editing in only one member.
//      {
//        | method is MethodBuilder when isInclude(method.BodyLocation)       with memberBuilder = method
//        | field  is FieldBuilder  when isInclude(field.InitializerLocation) with memberBuilder = field =>
//          memberBuilder.ResetCodeCache();
//          
//          _ = this.Engine.BeginAddRelocation(this, fileIndex, 
//                newEndChar, newEndLine, oldEndChar, oldEndLine);
//
//#if DebugLocations
//          //UpdateDebugTree(fileIndex);
//#endif
//          memberBuilder
//        | _ => null
//      }
//    } // AddRelocation
  } // end class Engine
} // end namespace

