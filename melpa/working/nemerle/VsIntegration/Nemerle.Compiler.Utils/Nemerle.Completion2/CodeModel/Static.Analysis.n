using System;
using System.Diagnostics;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Collections.Helpers;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Compiler.Utils;
using Nemerle.Utility;

using P = Nemerle.Compiler.Parsetree;
using T = Nemerle.Compiler.Typedtree;
using SCG = System.Collections.Generic;

using Nemerle.Logging;
[assembly: LogFunction(Debug.WriteLine)]
#if phantom
  [assembly: LogFlag(phantom, true)]
#else
  [assembly: LogFlag(phantom, false)]
#endif

namespace Nemerle.Completion2
{
  public class Analyser
  {
    public FindLocalValueEntries(expressionRoot : TExpr, localValue : LocalValue) : list[GotoInfo]
    {
      Debug.WriteLine($"Searching for $localValue");
      CoreFind(expressionRoot, FindLocalValueEntriesNodeVisitor(_, localValue, _))
    }
    
    public FindFunctionParameterEntries(expressionRoot : TExpr, functionParameter : T.TParameter) : list[GotoInfo]
    {
      Debug.WriteLine($"Searching for $functionParameter");
      CoreFind(expressionRoot, FindFunctionParameterEntriesNodeVisitor(_, functionParameter, _))
    }
    
    public FindTypeUsages(roots : list[Decl], typeToFind : TypeInfo) : list[GotoInfo]
    {
      def result = SCG.List();
      foreach(root in roots.RemoveDuplicates())
        result.AddRange(CoreFind(root, FindTypeEntriesVisitor(_, typeToFind, _)));

      result
        .RemoveDuplicates()
        .Sort((left, right) => left.Location.CompareTo(right.Location));

      result.NToList();
    }
    
    public CoreFind(expressionRoot : TExpr, finder : ExprWalkInfo * SCG.List[GotoInfo] -> void) : list[GotoInfo]
    {
      def walk(foundEntries)
      {
        ExprWalker().Walk(expressionRoot, finder(_, foundEntries));
      }
      
      CoreFind(walk);
    }

    public CoreFind(root : Decl, finder : ExprWalkInfo * SCG.List[GotoInfo] -> void) : list[GotoInfo]
    {
      def walk(foundEntries)
      {
        ExprDeclWalker().Walk(root, finder(_, foundEntries));
      }
      
      CoreFind(walk);
    }
    
    private CoreFind([NotNull] walkerFunc : SCG.List[GotoInfo] -> void) : list[GotoInfo]
    {
      def foundEntries = SCG.List();
      walkerFunc(foundEntries);
      def entries = foundEntries.RemoveDuplicates();
      Debug.WriteLine($"Found $(entries.Count) entries:");
      entries.ForEach(location : GotoInfo => Debug.WriteLine(location));
      entries.NToList()
    }
    
    mutable enclosingLocations : list[Location];

    public GetChainOfEnclosingLocations(root : Token.BracesGroup, line : int, column : int) : list[Location]
    {
      enclosingLocations = [];
      AccumulateLocations(root, line, column);
      //ExprWalker().Walk(expressionRoot, LocationsAccumulator);
      enclosingLocations.Reverse()
    }
    
    /// Returns whether the first location is (not strictly) 
    /// after the second (the left of first is to the right of second)
    public static StartsAfterEndOf(this first: Location, second: Location) : bool
    {
      if (first.Line > second.EndLine)
        true
      else if (first.Line < second.EndLine)
        false
      else if (first.Column > second.EndColumn)
        true
      else if (first.Column < second.EndColumn)
        false
      else
        true
    }

    FindLocalValueEntriesNodeVisitor(exprWalkInfo: ExprWalkInfo, localValue : LocalValue, foundEntries : SCG.List[GotoInfo]) : void
    {
      def node = exprWalkInfo.Node;
      match (node)
      {
        | TExpr.LocalFunRef(decl, _) as funRef when decl.Equals(localValue) with loc = funRef.Location
        | TExpr.SelfTailCall(TExpr.LocalFunRef(decl, _) as func, _) when decl.Equals(localValue) with loc = func.Location
        | TExpr.LocalRef(referenced) as pointer when (referenced.Equals(localValue)) with loc = pointer.Location =>
          foundEntries.Add(GotoInfo(loc, UsageType.Usage));
        | TExpr.DefValIn(definition, _, _) when (definition.Equals(localValue))
        | fh is T.TFunHeader when fh.decl.Equals(localValue) with definition = fh.decl
        | Pattern.As(_, definition) when (definition.Equals(localValue)) =>
          foundEntries.Add(GotoInfo(definition.Location, UsageType.Definition));
        | _ => ()
      }
    }
    
    FindTypeEntriesVisitor(info : ExprWalkInfo, typeToFind : TypeInfo, foundEntries : SCG.List[GotoInfo]) : void
    {
      def isRightCtor(rref)
      {
        match(rref.TypedObject)
        {
        | TExpr.StaticRef(_, mem, _) =>
              match(mem)
              {
              | mb is MethodBuilder when mb.Name == ".ctor" && mb.DeclaringType.Equals(typeToFind) => true
              | _ => false
              }
        | T.Pattern.HasType(mtype) when mtype.Equals(typeToFind.GetMemType())
        | T.Pattern.Application(ti, _) when ti.Equals(typeToFind) => true
        | _ => false
        }
      }

      def node = info.Node;
      
      def isContainsTypeEntry(rootType, typeToFind)
      {
        if (rootType.Equals(typeToFind))
          true
        else match (rootType)
        {
          | FixedType.Class(_tycon, args) => args.Exists(isContainsTypeEntry(_, typeToFind))
          | _ => false
        }
      }
      
      match(node)
      {
      | fp is Typedtree.TParameter when isContainsTypeEntry(fp.ty, typeToFind.GetMemType()) with loc = fp.TypeLocation
      | PExpr.Ref as rref when isRightCtor(rref) with loc = rref.Location =>
          foundEntries.Add(GotoInfo(loc, UsageType.Usage));
      | tb is TypeBuilder when tb.Equals(typeToFind) with loc = tb.Ast.name.Location =>
          foundEntries.Add(GotoInfo(loc, UsageType.Definition));
      | _ => ()
      }
    }
    
    FindFunctionParameterEntriesNodeVisitor(exprWalkInfo: ExprWalkInfo, functionParameter : T.TParameter, foundEntries : SCG.List[GotoInfo]) : void
    {
      def node = exprWalkInfo.Node;
      log(phantom, $"processing node: $(node.ToString().Brief())");
      log(phantom, $" type: $(node.GetType())");
      match (node)
      {
        | TExpr.LocalRef(referenced) as pointer 
            when (referenced.ValKind is LocalValue.Kind.FunParm
                  && referenced.Name == functionParameter.Name
                  && pointer.Location != functionParameter.NameLocation)
          => log(phantom, "  it's a reference!");
             foundEntries.Add(GotoInfo(pointer.Location, UsageType.Usage));
        | _ => log(phantom, "  skipping...");
      }
    }

    AccumulateLocations(token : Token, line : int, column : int) : void
    {
      unless (token == null)
      {
        if (token.Location.Contains(line, column))
        {
          mutable current = token;
          mutable next = token.Next;
          while (next != null)
          {
            current = current.Next;
            next = next.Next;
          }
          unless (token.Next == null)
            enclosingLocations ::= token.Location + current.Location;
          enclosingLocations ::= token.Location;
          match (token)
          {
            | RoundGroup(children, _, _)
            | BracesGroup(children, _, _, _)
            | SquareGroup(children, _, _)
            | QuoteGroup(children, _, _)
            | LooseGroup(children)
            | Namespace(_, _, children) => AccumulateLocations(children, line, column);
            | _ => ();
          }
        }
        else
          AccumulateLocations(token.Next, line, column);
      }
    }
  }
}
