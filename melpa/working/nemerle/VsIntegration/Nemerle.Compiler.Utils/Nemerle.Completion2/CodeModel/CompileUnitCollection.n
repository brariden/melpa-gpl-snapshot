using System;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2
{
  public class CompileUnitCollection
  {
    internal this([NotNull] engine : Engine, [NotNull] compileUnits : array[CompileUnit])
    {
      Engine     = engine;
      _compileUnits  = compileUnits;
    }

    public Engine : IIdeEngine
    {
      mutable _engine : Engine;
      get         { ManagerClass.Instance = _engine; _engine; }
      private set { _engine = (value :> Engine) }
    }
    
    _compileUnits  : array[CompileUnit];

    public IsFileInProject(fileIndex : int) : bool
    {
      _compileUnits.Length != 0 && fileIndex < _compileUnits.Length && _compileUnits[fileIndex] != null
    }

    public IsFileInProject(filePath : string) : bool
    {
      IsFileInProject(Location.GetFileIndex(filePath))
    }

    public IsFileInProject(loc : Location) : bool { IsFileInProject(loc.FileIndex) }

    public GetTopDeclarations(fileIndex : int) : list[TopDeclaration]
    {
      _compileUnits[fileIndex].TopDeclarations;
    }
    
    public GetTopNamespace(fileIndex : int) : Decl.Namespace
    {
      def compileUnit = _compileUnits[fileIndex];

      if (compileUnit == null) null
      else               _compileUnits[fileIndex].TopNamespace;
    }

    public GetRegions(fileIndex : int) : list[Region]
    {
      _compileUnits[fileIndex].Regions;
    }

    public Item[filePath : string] : CompileUnit
    {
      get { this[Location.GetFileIndex(filePath)]; }
    }

    public Item[fileIndex : int] : CompileUnit
    {
      get
      {
        when (_compileUnits.Length < 0)
          throw System.Exception($"File '$fileIndex' does not exist in project.");
        
        def fileInfo = _compileUnits[fileIndex];
        when (fileInfo == null)
          throw System.Exception($"File '$fileIndex' contains an empty declaration list.");

        fileInfo
      }
    }

    public Count : int
    {
      //[Nemerle.Memoize]
      get
      {
        mutable count = 0;

        foreach (fileInfo when fileInfo != null in _compileUnits)
          count++;

        count;
      }
    }

    public GetEnumerator() : SCG.IEnumerator[CompileUnit]
    {
      foreach (compileUnit when compileUnit != null in _compileUnits)
        yield compileUnit;
    }
  }
}
