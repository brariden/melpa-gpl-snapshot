using System;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.Utils;
using Nemerle.Imperative;
using Nemerle.Utility;

using P = Nemerle.Compiler.Parsetree;
using T = Nemerle.Compiler.Typedtree;

namespace Nemerle.Completion2
{
  public class ExprDeclWalker : ExprWalker
  {
  public this()
  {
  }

  public this(callback : IExprWalkerCallback)
  {
    base(callback);
  }

  private Go(lst : list[Decl])  : void { when (lst != null) foreach (item in lst) Go(item); }
  
  private Go(decl : Decl) : void
  {
    when (Push(decl))
    { 
    match (decl)
    {
    | Decl.Namespace as n => Go(n.Decls);
    | Decl.Type(ast) => Go(ast);
    | GlobalAttribute
    | Using
    | None
    | _ => ()
    }

    Pop();
    }
  }

  public Walk([NotNull] expression : Decl, [NotNull] walkHandler : ExprWalkHandler) : void
  {
    Init(walkHandler);
    Go(expression);
  }
  }
}

