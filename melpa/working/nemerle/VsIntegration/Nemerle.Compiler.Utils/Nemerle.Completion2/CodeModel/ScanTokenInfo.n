using System;

using Nemerle.Compiler;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  public class ScanTokenInfo
  {
    public mutable Token       : Token;
    public mutable State       : ScanState;
    public mutable Color       : ScanTokenColor;
    public mutable Triggers    : ScanTokenTriggers;
    public mutable Type        : ScanTokenType;
    public mutable IsEndOfLine : bool;
    public mutable ColorizeEnd : bool;

    public RecursiveCount : int
    {
      get { (State & ScanState.RecursiveCounter) :> int >> 20 }
      set
      {
        def val = if (value > 0xF) 0xF else value;

        State &= ~ScanState.RecursiveCounter;
        State |= (val << 20) :> ScanState;
      }
    }

    public BracketCount : int
    {
      get { (State & ScanState.BracketCounter) :> int >> 24 }
      set
      {
        def val = if (value > 0xF) 0xF else value;

        State &= ~ScanState.BracketCounter;
        State |= (val << 24) :> ScanState;
      }
    }

    public QuotationCount : int
    {
      get { (State & ScanState.QuotationCounter) :> int >> 28 }
      set
      {
        def val = if (value > 0xF) 0xF else value;

        State &= ~ScanState.QuotationCounter;
        State |= (val << 28) :> ScanState;
      }
    }

    public IsQuotation       : bool { get { State %&& ScanState.Quotation       } }
    public IsQuotationStart  : bool { get { State %&& ScanState.QuotationStart  } }
    public IsComment         : bool { get { State %&& ScanState.Comment         } }
    public IsString          : bool { get { State %&& ScanState.String          } }
    public IsMultiLineString : bool { get { State %&& ScanState.MultiLineString } }
    public IsRecursiveString : bool { get { State %&& ScanState.RecursiveString } }
    public IsDollar          : bool { get { State %&& ScanState.Dollar          } }

    public IsWhiteSpaceType : bool { get { Type == ScanTokenType.WhiteSpace } }
    public IsCommentType    : bool { get { Type == ScanTokenType.Comment || Type == ScanTokenType.LineComment } }

    public IsWhiteSpaceOrCommentType : bool { get { IsWhiteSpaceType || IsCommentType } }

    public override ToString() : string { Token.ToString() }

    public Clone() : ScanTokenInfo
    {
      mutable clone = ScanTokenInfo();
      clone.Token       = Token;
      clone.State       = State;
      clone.Color       = Color;
      clone.Triggers    = Triggers;
      clone.Type        = Type;
      clone.IsEndOfLine = IsEndOfLine;
      clone.ColorizeEnd = ColorizeEnd;
      clone
    }
  }
}
