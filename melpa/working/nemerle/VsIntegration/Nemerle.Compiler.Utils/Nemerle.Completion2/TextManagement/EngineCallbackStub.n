using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

using Nemerle.Collections;
using Nemerle.Compiler;

namespace Nemerle.Completion2
{
  public class EngineCallbackStub : IIdeProject
  {
    public static Default : EngineCallbackStub = EngineCallbackStub(["mscorlib", "System"], []);

    _assemblyReferences : IEnumerable[string];
    _sources            : List[IIdeSource]           = List();
    _sourceMap          : Hashtable[int, IIdeSource] = Hashtable();

    public this(assemblyReferences : IEnumerable[string], sources : IEnumerable[string])
    {
      // Load sources...
      _sources.AddRange(sources.Map(path => FileNemerleSource(Location.GetFileIndex(path))));

      foreach (source in _sources)
        _sourceMap.Add(source.FileIndex, source);

      // Load assemblies...

      // Copy assembly refs. If it is not a path try load 
      // assembly by name and get it path.
      def refsAry = assemblyReferences.NToArray();
      def asmRefs = array(refsAry.Length);
      _assemblyReferences = asmRefs;
      
      for (mutable i = 0; i < asmRefs.Length; i++)
      {
        def asm = refsAry[i];
        if (IO.File.Exists(asm))
          asmRefs[i] = asm;
        else
        {
#pragma warning disable 618 // Obsolete
          def asm = Assembly.LoadWithPartialName(asm);
#pragma warning restore 618
          asmRefs[i] = Uri(asm.CodeBase).LocalPath;
        }
      }
    }

    public ProjectName : string { get { "UnitTestFakeProject" } }
    public ProjectFullName : string { get { @"C:\UnitTestFakeProject.nproj" } }
    public RootNamespace : string { get { @"RootNamespace" } }

    public GetAssemblyReferences() : IEnumerable[string]
    {
      _assemblyReferences
    }

    public GetMacroAssemblyReferences() : IEnumerable[string]
    {
      []
    }

    public GetOptions() : CompilationOptions
    {
			def options = CompilationOptions();

      options.DefineConstant("DEBUG");
      options.DefineConstant("TRACE");

      options.GreedyReferences = false;
      options.ColorMessages    = false;
      options.IgnoreConfusion  = true;

			options;
    }

    public GetSource(fileIndex : int) : IIdeSource
    {
      if (_sourceMap.ContainsKey(fileIndex))
        _sourceMap[fileIndex]
      else
        null
    }

    public GetSources() : IEnumerable[IIdeSource]
    {
      _sources
    }

    public ShowMessage(message : string, messageType : MessageType) : void
    {
      Diagnostics.Trace.WriteLine($"$messageType: $message")
    }

    public ClearAllCompilerMessages() : void
    {
      //TODO: VladD2: We should implement testing of error reporting.
    }

    public SetTopLevelCompilerMessages(_messages : IEnumerable[CompilerMessage]) : void
    {
      //TODO: VladD2: We should implement testing of error reporting.
    }

    public SetCompilerMessageForCompileUnit(_compileUnit : CompileUnit) : void
    {
      //TODO: VladD2: We should implement testing of error reporting.
    }
    
    public SetMethodCompilerMessages(_member : MemberBuilder, _messages : IEnumerable[CompilerMessage]) : void
    {
      //TODO: VladD2: We should implement testing of error reporting.
    }

    public ClearMethodCompilerMessages(_member : MemberBuilder) : void
    {
    }

    public TypesTreeCreated() : void
    {
    }
    
    public SetStatusText(text : string) : void
    {
      Debug.WriteLine(text);
    }

    public LookupLocationsFromDebugInformation(_info : GotoInfo) : array[GotoInfo] { null }

    public SetHighlights(_ : IIdeSource, _ : IEnumerable[GotoInfo]) : void { }
    public AddUnimplementedMembers(_ : IIdeSource, _ : TypeBuilder, _ : IEnumerable[IGrouping[FixedType.Class, IMember]]) : void { }
    public AddOverrideMembers(_ : IIdeSource, _ : TypeBuilder, _ : IEnumerable[IMember]) : void { }
  }
}