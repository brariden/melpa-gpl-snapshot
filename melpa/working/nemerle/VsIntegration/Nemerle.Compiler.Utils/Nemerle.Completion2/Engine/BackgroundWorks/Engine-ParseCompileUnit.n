using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Surround;

namespace Nemerle.Completion2
{
	internal partial class Engine
	{
    public BeginParseCompileUnit(source : IIdeSource) : ParseCompileUnitAsyncRequest
    {
      def request = ParseCompileUnitAsyncRequest(this, source, ParseCompileUnit);
      AsyncWorker.AddWork(request);
      request
    }

    public ParseCompileUnit(source : IIdeSource) : CompileUnit
    {
      def request = BeginParseCompileUnit(source);
      _ = request.AsyncWaitHandle.WaitOne();
      when (request.Stop)
        assert(false);
        
      request.CompileUnit
    }

    /// Run by AsyncWorker thread!
    /// Parse CompileUnit. Set CompileUnit to source. Update information about outline regions. 
    private ParseCompileUnit(request : AsyncRequest) : void
    {
      surroundwith (currentAsyncRequest)
      try
      {
        AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();

        when (request.Stop)
          return;
        
        def sourceStemp = request.GetTextCurrentVersionAndFileIndex();

        when (request.Stop)
          return;

        def req         = request :> ParseCompileUnitAsyncRequest;
			  def compUnit    = ParseCompileUnit(sourceStemp);
        req.CompileUnit = compUnit;

        //Debug.WriteLine($"UpdateCompileUnit 6 $(timer.Elapsed)"); timer.Reset(); timer.Start();
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The parse CompileUnit operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
      finally
      {
        AsyncWorker.AddResponse(() => _callback.SetStatusText("Update compile unit is complete."));
        request.MarkAsCompleted();
      }
    }
  } // end class Engine
} // end of Nemerle.Completion2 namespace
