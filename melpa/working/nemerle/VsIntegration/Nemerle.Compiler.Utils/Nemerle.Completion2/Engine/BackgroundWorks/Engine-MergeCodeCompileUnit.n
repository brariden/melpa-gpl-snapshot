using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Surround;

namespace Nemerle.Completion2
{
	internal partial class Engine
	{
    public BeginMergeCodeCompileUnit(codeCompileUnit : CodeCompileUnit) : MergeCodeCompileUnitAsyncRequest
    {
      def request = MergeCodeCompileUnitAsyncRequest(this, codeCompileUnit, MergeCodeCompileUnit);
      AsyncWorker.AddWork(request);
      request
    }

    public MergeCodeCompileUnit(codeCompileUnit : CodeCompileUnit) : FormChanges
    {
      def request = BeginMergeCodeCompileUnit(codeCompileUnit);
      _ = request.AsyncWaitHandle.WaitOne();
      
      when (request.Stop)
        assert(false);
        
      request.MergeInfo
    }

    /// Run by AsyncWorker thread!
    /// Parse CompileUnit. Set CompileUnit to source. Update information about outline regions. 
    private MergeCodeCompileUnit(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();
      
      surroundwith (currentAsyncRequest)
      try
      {

        when (request.Stop)
          return;
        
        if (IsBuildTypesTreeInProgress)
          AsyncWorker.AddWork(request);
        else
        {
          def project = this.Project;

          if (project == null)
          {
            _ = BeginBuildTypesTree();
            AsyncWorker.AddWork(request);
          }
          else
          {
            def req = request :> MergeCodeCompileUnitAsyncRequest;
            
            req.MergeInfo = MakeMargeInfoCodeCompileUnit(req.CodeCompileUnit);

            req.MarkAsCompleted();
          }
        }

        //Debug.WriteLine($"UpdateCompileUnit 6 $(timer.Elapsed)"); timer.Reset(); timer.Start();
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The parse CompileUnit operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
      finally
      {
        //AsyncWorker.AddResponse(() => _callback.SetStatusText("Update compile unit is complete."));
        request.MarkAsCompleted();
      }
    }
    
    private MakeMargeInfoCodeCompileUnit(codeCompileUnit : CodeCompileUnit) : FormChanges
    {
      assert(codeCompileUnit.Namespaces.Count >= 1);
      def ns = codeCompileUnit.Namespaces[0];
      assert(ns.Types.Count >= 1);
      def ty = ns.Types[0];
      def cls = ty.UserData["Member"] :> TopDeclaration.Class;
      //assert(cls != null);
      
      def methods = ty.Members.OfType.[CodeMemberMethod]().ToArray();
      
      def found = methods.Find(m => m.Name == "InitializeComponent" 
                                 && m.ReturnType.BaseType == "System.Void" && m.ReturnType.TypeArguments.Count == 0
                                 && m.Parameters.Count == 0);
      
      def makeFormChanges(method, domCls, cls) : FormChanges
      {
        def domFields = domCls.Members.OfType.[CodeMemberField]().ToArray();
        def fields = cls.TypeBuilder.AstParts.SelectMany(
              p => p.GetMembers().OfType.[ClassMember.Field]()).ToArray();
        
        def isInserted(domFld) : bool
        {
          def member = domFld.UserData["Member"] :> ClassMember;
          member == null
        }
        
        def insertedFields = domFields.FilterToArray(isInserted);
        
        //Trace.WriteLine("Inserted fields:\n--------------------------------------");
        //foreach (df in insertedFields)
        //  Trace.WriteLine(FormCodeDomGenerator.ToString(df));
          
        def delitedFields = fields.Exclude(domFields, (df, f) => df.Name == f.Name && f.UserData["Member"] != null)
                                  .ToArray();
        
        def isInserted(domMethod : CodeMemberMethod) : bool * _
        {
          def member = domMethod.UserData["Member"] :> ClassMember.Function;
          (member == null, domMethod)
        }
        
        def insertedMethods = methods.MapLazyFiltered(isInserted).NToArray();
        
        //Trace.WriteLine("Delited fields:\n--------------------------------------");
        //foreach (f in delitedFields)
        //  Trace.WriteLine(f);

        def (statements, sourseInitializeComponent) = 
          if (method == null) (null, null)
          else                (method.Statements, method.UserData["Member"] :> ClassMember.Function);
          
        FormChanges(statements, sourseInitializeComponent, 
                    insertedFields, delitedFields, insertedMethods, domCls)
      }
      
      match (found)
      {
        | Some(method) => makeFormChanges(method, ty, cls);
        | _            => makeFormChanges(null,   ty, cls);
      }
    }
  } // end class Engine
} // end of Nemerle.Completion2 namespace
