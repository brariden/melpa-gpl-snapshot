using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Reflection.BindingFlags;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using MethodBuilderEx = Nemerle.Completion2.Factories.IntelliSenseModeMethodBuilder;
using SCG             = System.Collections.Generic;

namespace Nemerle.Completion2
{
	internal partial class Engine
	{
    //TODO: VladD2: 
    // 1. Добавить значения текущего source и позиции в нем обновляемых из IDE.
    // 2. Сортировать _methodsCheckQueue так чтобы в ее начале были методы находящиеся 
    //    ближе всего к курсору из текущего source (если конечно такие есть).
    mutable _methodsCheckQueue : SCG.List[MethodBuilderEx] = SCG.List();
    mutable _activeSourceIndex  : int;
    mutable _activeSourceLine   : int;
    mutable _activeSourceCol    : int;

    private RefreshMethodsCheckQueue() : void
    {
      def activeSourceIndex  = _activeSourceIndex;
      def activeSourceLine   = _activeSourceLine;
      def activeSourceCol    = _activeSourceCol;

      _activeSourceIndex  = 0;
      _activeSourceLine   = 0;
      _activeSourceCol    = 0;

      SetTextCursorLocation(activeSourceIndex, activeSourceLine, activeSourceCol);
    }
    
    public SetActiveSource(fileIndex : int) : void
    {
      when (_activeSourceIndex != fileIndex)
        lock (_methodsCheckQueue)
        {
          def (list1, list2) = _methodsCheckQueue.Partition(
                                 m => m.Location.FileIndex == fileIndex);

          _methodsCheckQueue.Clear();
          _methodsCheckQueue.AddRange(list1);
          _methodsCheckQueue.AddRange(list2);
        }
    }

    public SetTextCursorLocation(fileIndex : int, line : int, col : int) : void
    {
      _activeSourceLine = line;
      _activeSourceCol  = col;

      lock (_methodsCheckQueue)
      {
        SetActiveSource(fileIndex);

        def i = _methodsCheckQueue.FindIndex(m => m.Location.Contains(line, col));

        when (i >= 0)
        {
          def elem = _methodsCheckQueue[i];
          _methodsCheckQueue.RemoveAt(i);
          _methodsCheckQueue.AddAtFirst(elem);
        }
      }
    }

    public AddMethodAtFirstCheckQueue(method : MethodBuilderEx) : void
    {
      lock (_methodsCheckQueue)
        _methodsCheckQueue.MoveToFirst(method);

      def request = AsyncRequest(AsyncRequestType.CheckMembers, this, null, CheckMethod);
      AsyncWorker.AddWork(request);
    }

    private BeginCheckMethods(project : Project) : AsyncRequest
    {
      // заполняем _methodsCheckQueue

      def typeBuilders = project.NamespaceTree.GetTypeBuilders();
			def mbsForCompile = typeBuilders.SelectMany(tb =>
				tb.GetMethods(Public | NonPublic | Instance | Static | DeclaredOnly)
					.Cast.[MethodBuilderEx]()
					.Where(mb => mb.IsBodyCompilable));

			_methodsCheckQueue = SCG.List(mbsForCompile);

      RefreshMethodsCheckQueue();

      // помещаем в очередь работ запрос на обработку первого метода

      def request = AsyncRequest(AsyncRequestType.CheckMembers, this, null, CheckMethod);
      AsyncWorker.AddWork(request);
      request
    }

    private CheckMethod(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();

      surroundwith (currentAsyncRequest)
      try
      {
        def timer = Stopwatch.StartNew();

        // берем один метод из очереди....
        def method = lock (_methodsCheckQueue)
                      if (_methodsCheckQueue.IsEmpty()) null
                      else _methodsCheckQueue.Dequeue();

        def name = if (method == null) "<no method>" else method.Name;

        //Debug.WriteLine($"CheckMethod: $(timer.Elapsed) begin chek Method: $name"); 

        when (method != null && method.IsBodyCompilable && method.Env != null && method.BodyLocation.IsSourceAvailable)
        {
          //TUDO: Добавить поиск исходного поля (если это инициализатор поля) и проверку наличия явно заданного типа.
          // Если тип не задан явно (тип выводится), надо проверить соответствие типа.
          method.EnsureCompiled(); // типизируем его...
        }

        // сообщения об ошибках полученных в процессе компиляции метода помещаются в очередь 
        // ответов автоматически (в ReportMemberErrors() вызываемом из геттера BodyTyped).

        def isQueueEmpty = lock (_methodsCheckQueue) _methodsCheckQueue.IsEmpty();
            
        Debug.WriteLine($"CheckMethod: $(timer.Elapsed) Method $name checkd!"); timer.Reset(); timer.Start();

        if (isQueueEmpty) 
          request.MarkAsCompleted();
        else // если очередь не пуста ...
          AsyncWorker.AddWork(request); // помещаем еще один запрос в хвост очереди задач
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The CheckMethod operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
    }
	}
}
