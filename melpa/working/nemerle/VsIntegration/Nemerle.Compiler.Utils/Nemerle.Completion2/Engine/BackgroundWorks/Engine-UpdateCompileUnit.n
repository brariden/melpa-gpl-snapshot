using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Surround;

[assembly: DefineSurround("currentAsyncRequest", false, 
                          _currentAsyncRequest = request, 
                          {
                            _currentAsyncRequest = null;
                          })]


namespace Nemerle.Completion2
{
  using MethodBuilderEx = Factories.IntelliSenseModeMethodBuilder;

  internal partial class Engine
  {
    public LastEditTime : DateTime { get; private set; }
  
    public BeginUpdateCompileUnit(source : IIdeSource) : AsyncRequest
    {
      LastEditTime = DateTime.Now;
      def request = AsyncRequest(AsyncRequestType.UpdateCompileUnit, this, source, UpdateCompileUnit);
      AsyncWorker.AddWork(request);
      request
    }

    private TryRelocate(source : IIdeSource) : void
    {
      def fileIndex = source.FileIndex;
      mutable resetedMember;
      mutable resetedMemberParsed;
      mutable lastRelocationVersion = -1;

      when (!IsDefaultEngine)
      {
        def project = this.Project;
        
        when (project != null)
        {
          def relocationRequests = RelocationQueue.GetRelocationRequests(source.RelocationRequestsQueue);

          foreach (rel in relocationRequests)
          {
            lastRelocationVersion = rel.SourceVersion;
            def info = RelocationInfo(fileIndex, rel.Begin, rel.Old, rel.New);

            def compileUnit = project.CompileUnits[fileIndex];

            def needRelocation = match (compileUnit.FindMember(info.Begin.Line, info.Begin.Column))
            {
              | Some(m is ClassMember.Function) =>
                def innerLoc = m.BodyInnerLocation;

                if (innerLoc.Contains(info.Begin.Line, info.Begin.Column))
                {
                  resetedMemberParsed = m;
                  assert2(resetedMember == null || resetedMember : object == m.Builder);
                  resetedMember       = m.Builder :> MethodBuilderEx;
                  resetedMember.ResetCodeCache();
                  // Не делаем релокешон если локешон метода не меняется!
                  def newLoc = 
                    try { Completion.Relocate(innerLoc, info) }
                    catch { _ is Completion.RelocationFailedException => Location.Default };
                  AsyncWorker.AddResponse(() => _callback.ClearMethodCompilerMessages(resetedMember));
                  AddMethodAtFirstCheckQueue(resetedMember); // Add request for typing of relocated method body
                  newLoc != innerLoc
                }
                else true

              | _x => true
            }

            def isUpdate = rel.Begin != rel.Old && rel.Begin != rel.New;
            if (resetedMember == null && isUpdate)
            {
              RequestOnBuildTypesTree();
              break;
            }
            else when (needRelocation)
              compileUnit.TopNamespace.Relocate(info);
            //TODO: Relocate: Regions & ParseCompilerMessages (А надо ли если мы все время получаем ноый CompileUnit?)
          }
        }
      }
    }
    
    static CollectAndApplyTopDeclarations(source : IIdeSource, compUnit : CompileUnit) : void
    {
      def topDecls       = compUnit.TopDeclarations;
      def decls          = AstUtils.GetAllDeclarations(topDecls);

      def declsAry = decls
        .Where(d => d.name is Splicable.Name && d.name.GetName().context != null)
        .OrderBy(d => d.Name)
        .ToArray();

      //source.Declarations = declsAry;
      AsyncWorker.AddResponse(() => source.SetTopDeclarations(declsAry));
      //source.SetTopDeclarations(declsAry);
    }
    
    static CollectAndApplyRegions(source : IIdeSource, compUnit : CompileUnit) : void
    {
      def version = compUnit.SourceVersion;
      
      when (version == source.CurrentVersion 
         && !compUnit.ParseCompilerMessages.Any(cm => cm.Msg.Contains("parse error")))
      {
        def regions = RegionsHelper.Collect(compUnit);
      
        //Debug.WriteLine($"UpdateCompileUnit 4 $(timer.Elapsed)"); timer.Reset(); timer.Start();

        when (version == source.CurrentVersion)
          AsyncWorker.AddResponse(() => source.SetRegions(regions, version));
      }
    }

    /// Run by AsyncWorker thread!
    /// Parse CompileUnit. Set CompileUnit to source. Update information about outline regions.
    private UpdateCompileUnit(request : AsyncRequest) : void
    {
      surroundwith (currentAsyncRequest)
      try
      {
        //def timer = Stopwatch.StartNew();
        AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();
        AsyncWorker.AddResponse(() => _callback.SetStatusText("Update compile unit..."));
        //Debug.WriteLine($"UpdateCompileUnit 1 $(timer.Elapsed)"); timer.Reset(); timer.Start();

        when (request.Stop)
          return;
        
        def sourceStemp = request.GetTextCurrentVersionAndFileIndex();
        def (_, version, _) = sourceStemp;
        def source    = request.Source;

        when (request.Stop)
          return;

        def compUnit = ParseCompileUnit(sourceStemp);

        source.CompileUnit = compUnit;
        
        //Debug.WriteLine($"UpdateCompileUnit 2 $(timer.Elapsed)"); timer.Reset(); timer.Start();
        def isStopingMsg(msg) { msg.Contains("unexpected end of file") || msg.Contains("Newline in constant") }
        def errors = compUnit.ParseCompilerMessages;

        when (errors.Any(cm => isStopingMsg(cm.Msg)))
        {
          // The user does type non closed bracket or quote. The AST is be in incorrect state.
          // We should report errors and stop processing the CompileUnit.
          AsyncWorker.AddResponse(() => _callback.SetStatusText("Update compile unit aborted (file in inconsistent state)."));
          return;
        }

        CollectAndApplyTopDeclarations(source, compUnit);

        //Debug.WriteLine($"UpdateCompileUnit 3 $(timer.Elapsed)"); timer.Reset(); timer.Start();

        when (request.Stop)
          return;

        //def version = compUnit.SourceVersion;
        assert2(version == compUnit.SourceVersion);

        CollectAndApplyRegions(source, compUnit);

        //Debug.WriteLine($"UpdateCompileUnit 5 $(timer.Elapsed)"); timer.Reset(); timer.Start();

        when (!request.Stop && !IsDefaultEngine)
        {
          def isNeedRebuildTypesTree(engine, source) : bool
          {
            // Сравненивает старый и новый CompileUnit, и если их структура не совпадает (т.е. были 
            // добавлены, удалены, изменены методы), запустить парсинг дерева типов. 
            // Парсинг дерева типов так же запускается если оно не существует к этому моменту.
            def isNeedBuildTypesTree = if (engine.IsProjectAvailable)
              //TODO: VladD2: Возможно в IsStructureOfCompileUnitChanged нужно передавать еще 
              // старое значение CompileUnit-а (то что было в source.CompileUnit до его обновления).
              // Иначе сравнение будет всегда происходить с CompileUnit-ом полученым при построении
              // дерева типов и это может привести черт знает к чему. В общем нужно продумать стратегию
              // проверки изменения структуры CompileUnit-а!!!
                                         engine.Project.IsStructureOfCompileUnitChanged(source)
                                       else
                                         true;
            isNeedBuildTypesTree
          }

          if (isNeedRebuildTypesTree(this, source))
            RequestOnBuildTypesTree();
          else lock (source.RelocationRequestsQueue)
          {
            try
            {
              when (source.RelocationRequestsQueue.Count == 0)
                return;

              when (source.RelocationRequestsQueue.Last().SourceVersion != version)
                return;

              TryRelocate(source);
            }
            catch
            {
            | _ is Completion.RelocationFailedException => RequestOnBuildTypesTree();
            | _ => throw;
            }
          }
        }

        //Debug.WriteLine($"UpdateCompileUnit 6 $(timer.Elapsed)"); timer.Reset(); timer.Start();
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The update CompileUnit operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
      finally
      {
        AsyncWorker.AddResponse(() => _callback.SetStatusText("Update compile unit is complete."));
        request.MarkAsCompleted();
      }
    }
    
    internal ParseCompileUnit(code : string, sourceVersion : int, fileIndex : int) : CompileUnit
    {
      RestoreManagerClassInstance();
      _isCompileUnit = true;
      def currentMessages = _currentMessages;
      try
      {
        _namespaces.Clear();

        _currentMessages = List();
        _decls           = [];
        def parseResult  = 
          try Parser.Parse(StringSource(fileIndex, code))
          catch
          { | e =>
              Message.Error(Location(fileIndex, 1, 1), $"Exception: [$(e.GetType().Name)] $(e.Message)");
              ParseResult([])
          };
        def endLoc       = parseResult.Location;
        def loc          = Location(fileIndex, 1, 1, endLoc.EndLine, endLoc.EndColumn);
        def commentLocs  = parseResult.CommentLocations;       
        def openLoc      = Location(fileIndex, 1, 1, 1, 1);
        def closeLoc     = Location(fileIndex, endLoc.EndLine, endLoc.EndColumn, endLoc.EndLine, endLoc.EndColumn);
        def insideEnv    = match (_decls.Find(_ is Decl.Using))
                           { | Some(Decl.Using as u) => u.AfterEnv | _ => CoreEnv };
        def topNs        = Decl.Namespace(loc, _decls.Rev(), [], [], CoreEnv, insideEnv, openLoc, openLoc, closeLoc, parseResult.TopDeclarations);
        
        assert2(_namespaces.Count == 0);

        // Данная функция подключает полученный список TopDeclaration-ов в пространсва имен к которым
        // они пренадлежат.
        // Go through namespaces for each file.
        
        def addTypes(ns, topDeclarations) : void
        {
          def getNsDeclList(ns, acc = List())
          {
            acc.Add(ns);

            foreach (subNs is Decl.Namespace in ns.Decls)
              _ = getNsDeclList(subNs, acc);

            acc
          }
          
          def typesGroupedByNs = topDeclarations.GroupBy(
                d => match (d.TryGetEnv()) { | Some(env) => env | _ => null });
          def nsDeclList = getNsDeclList(ns).NToList();
          def join = nsDeclList.Join(typesGroupedByNs, 
                nsDecl => nsDecl.InsideEnv,
                group  => group.Key,
                x      => x);
          foreach ((nsDecl, group) in join)
            foreach (topDeclaration in group)
              nsDecl.Decls ::= Decl.Type(topDeclaration.Location, topDeclaration);
        }
        
        addTypes(topNs, parseResult.TopDeclarations);
        //assert2(lexer.IsEof);
        
        def cu = CompileUnit(topNs, parseResult.TopDeclarations.Rev(), parseResult.Regions.Rev(), _currentMessages.UpCastToArray(),
                      parseResult.LinesLengths, sourceVersion, fileIndex, commentLocs);

        foreach (msg in cu.ParseCompilerMessages)
          msg.CompileUnit = cu;

        AsyncWorker.AddResponse(() => _callback.SetCompilerMessageForCompileUnit(cu));
        //_callback.SetCompilerMessageForCompileUnit(cu);

        cu
      }
      finally
      {
        _isCompileUnit = false;

        //when (currentMessages != null && _currentMessages.Count > 0)
        //  currentMessages.AddRange(_currentMessages);

        _currentMessages = currentMessages;
        _decls           = [];
      }
    }
  } // end class Engine
} // end of Nemerle.Completion2 namespace
