using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using LibRefManager = Nemerle.Completion2.Factories.IntelliSenseModeLibraryReferenceManager;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    [Accessor] _projectAvailableEvent : ManualResetEvent = ManualResetEvent(false);
    public IsBuildTypesTreeInProgress  : bool { get; private set; }
    public IsNeedBuildTypesTree : bool { get; private set; }
    /// Return true if Engine is initialised.
    public RequestOnInitEngine() : bool
    {
      if (CoreEnv == null) // Engine not init yet. We mast BuildTypesTree for init it
      {
        when (!IsBuildTypesTreeInProgress && !IsNeedBuildTypesTree)
          RequestOnBuildTypesTree();

        false
      }
      else true
    }
    
    public override RequestOnBuildTypesTree() : void
    {
      LastEditTime = DateTime.Now;
      IsNeedBuildTypesTree = true;
    }
    
    public OnIdle() : void
    {
      when (IsNeedBuildTypesTree)
      {
        def delta = DateTime.Now - LastEditTime;
        
        when (delta.TotalMilliseconds > 2000)
        {
          IsNeedBuildTypesTree = false;
          _ = BeginBuildTypesTree();
        }
      }
    }

    public BeginBuildTypesTree() : AsyncRequest
    {
      IsNeedBuildTypesTree = false;
      
      if (_optionsHasBeenRead)
      {
        IsBuildTypesTreeInProgress = true;
        def request = AsyncRequest(AsyncRequestType.BuildTypesTree, this, null, BuildTypesTree);
        AsyncWorker.AddWork(request);
        request
      }
      else
        BeginReloadProject();
    }

    ///// Build TypesTree synchronously. Avoid call this method! Use BeginBuildTypesTree() instead.
    //public BuildTypesTree() : void
    //{
    //  def request = BeginBuildTypesTree();
    //  
    //  if (AsyncWorker.IsRunSynchronously)
    //  {
    //    while (!request.IsCompleted)
    //      _ = AsyncWorker.DoSynchronously();
    //  }
    //  else
    //    _ = ProjectAvailableEvent.WaitOne();

    //  assert(IsProjectAvailable);
    //}

    public ProcessPendingTypesTreeRequest() : void
    {
      when(IsNeedBuildTypesTree || IsBuildTypesTreeInProgress)
      {
        when(IsNeedBuildTypesTree)
          _ = BeginBuildTypesTree();

        def emptyWork(request : AsyncRequest) { request.MarkAsCompleted() };
        def request = AsyncRequest(AsyncRequestType.EmptyRequest, this, null, emptyWork);
        def waitHandle = request.AsyncWaitHandle;
        AsyncWorker.AddWork(request);

        _ = waitHandle.WaitOne();
      }
    }

    /// Run by AsyncWorker thread!
    /// Makes the typed tree (namespace tree) and constructs compile 
    /// unit collection.
    private BuildTypesTree(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();

      IsNeedBuildTypesTree = false;

      surroundwith (currentAsyncRequest)
      try
      {
        unless (AsyncWorker.IsRunSynchronously) 
          ignore(ProjectAvailableEvent.Reset());

        _typesTreeVersion++;
        
        AsyncWorker.AddResponse(() => _callback.SetStatusText("Building types tree..."));
        Debug.WriteLine(">>>> ##### Building types tree!");
        
        AsyncWorker.AddResponse(() => _callback.ClearAllCompilerMessages());
        
        def init() : void
        {
          _currentMessages = List(32);
          //TODO: VladD2: Надо перенести инициализацию опций в BeginReloadProject()

          RestoreManagerClassInstance();

          // we must clean the nodes from current program - note that this 
          // behaviour is automatically provided by Run, but completion
          // engine does not use it at the moment.. :(
          if (Options.PersistentLibraries)
          {
            LibrariesManager.RemoveInternalExtensionMethods();
            InitCompiler();
          }
          else
          {
            def output = Output;
            ResetCompilerState(Options);
            InitEngine(output);

            // Get assembly references from IDE.
            def asmRefs = _assemblyReferences.Append(_macroAssemblyReferences);
            
            // Update library list.
            LibRefManager.UpdateAssemblies(asmRefs);

            try
            {
              InitCompiler();

              mutable ex;

              foreach (asm in _assemblyReferences) // Add all asseblies into compiler
                try { LibrariesManager.AddLibrary(asm, true); }
                catch
                {
                  | _ is AssemblyFindException => ()
                  | e => when (ex == null) ex = e
                }

              foreach (asm in _macroAssemblyReferences) // Add macro asseblies into compiler
                try { LibrariesManager.LoadPluginsFrom(asm); }
                catch
                {
                  | _ is AssemblyFindException => ()
                  | e => when (ex == null) ex = e
                }

              LoadExternalLibraries(); // reload types information

              when (ex != null)
                throw ex;
            }
            catch
            {
              | e =>
                def errorMag =
                  if (LibRefManager.UnresolvedAssms.Count > 0)
                  {
                    $"Error: $(e.Message)\r\n\r\n"
                    + LibRefManager.UnresolvedAssms.Values.ToString("\r\n\r\n")
                    + "\r\n\r\nTry recompile solution or referenced assembies!";
                  }
                  else $"Error: $(e.Message)\r\n\r\n";

                AsyncWorker.AddResponse(() => _callback.ShowMessage(errorMag, MessageType.Error));
            }
          }
          
          // next time Init is called, we won't reload libs
          Options.PersistentLibraries = true;
    #pragma warning disable 618 // Obsolete
          _project = null; // in other locations you must use ResetNamespaceTree()!
    #pragma warning restore 618 // Obsolete
          _namespaces.Clear();
          _decls = null;
          _compileUnits = null;
          
          //if (this.Hierarchy == null)
            this.Hierarchy = TypesManager(this);
          //else
          //  this.Hierarchy.Init();

          _isCanBeReset = true;
        }

        when (request.Stop)
          throw CompilationAbortedException("before init");

        init();

        when (request.Stop)
          throw CompilationAbortedException("after init");

        def expandArray(ary, newLen, expandFactor = 1)
        {
          if (newLen > ary.Length)
          {
            def newArray = array(newLen * expandFactor);
            ary.CopyTo(newArray, 0);
            newArray;
          }
          else ary
        }
        
        _compileUnits = array(Nemerle.Compiler.Location.GetIndexArrayLength());

        foreach (source in _callback.GetSources())
        {
          def sourceStemp = source.GetTextCurrentVersionAndFileIndex();
          def (_, version, fileIndex) = sourceStemp;
          
          when (source.RelocationRequestsQueue != null) // && source.RelocationRequestsQueue.Count > 0) // race condition
            RelocationQueue.RemoveOldRequests(source.RelocationRequestsQueue, version);

          _compileUnits = expandArray(_compileUnits, fileIndex + 1, 2);

          def newCompileUnit       = ParseCompileUnit(sourceStemp);
          source.CompileUnit       = newCompileUnit;
          when (source.RelocationRequestsQueue != null)
          {
            CollectAndApplyTopDeclarations(source, newCompileUnit);
            CollectAndApplyRegions(source, newCompileUnit);
          }
          _compileUnits[fileIndex] = newCompileUnit;

          // регистрируем обработчики изменения исходников, разбираемых кастомными парсерами
          def sourceFileName = Location.GetFileName(fileIndex);
          unless(string.IsNullOrEmpty(sourceFileName))
          when(Parser.IsExtensionRegistered(System.IO.Path.GetExtension(sourceFileName)))
            SubscribeSourceChanged(fileIndex, OnSourceChanged, invokeAfterSubscription = false);

          when (request.Stop)
            throw CompilationAbortedException("parsing of top level AST");
        }
         
        // create N.C.TypeBuilders for all parsed types and add them to namespace hierarchy
        try
        {
            //Trace.WriteLine("!!! Begin >>>>");
            foreach (compilerUnit when compilerUnit != null in _compileUnits)
              foreach (topDecl in compilerUnit.TopDeclarations)
              {
                //Output.WriteLine($"------- $topDecl: $(topDecl.Name)");
                //Output.WriteLine(topDecl.Location);
                when (topDecl.name is Splicable.Name && topDecl.PName.context != null)
                  ScanningPipeline(topDecl);

                when (request.Stop)
                  throw CompilationAbortedException("adding TopDeclarations into TypesTree");
            }
            //Trace.WriteLine("!!! End <<<<");
        }
        catch { | _e => Trace.WriteLine(_e); }

        // xz. Looks like it's building types' tree and is resolving references.
        try { this.Hierarchy.Run(); }
        catch { | _e => Trace.WriteLine(_e); }

        def nsTree = NameTree.NamespaceTree;

        when (request.Stop)
          throw CompilationAbortedException("after creating of Typetree");

#pragma warning disable 618 // Obsolete
        _project = Project(
          this, 
          CompileUnitCollection(this, _compileUnits),
          nsTree,
          _currentMessages.NToList(),
          _callback);

        _rowProject = _project;
        
        when (TypedtreeCreated != null)
          TypedtreeCreated(_project, EventArgs.Empty);

        ignore(BeginCheckMethods(_project));
#pragma warning restore 618 // Obsolete

        Debug.WriteLine("<<<< ##### Building types tree finish!");
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The building of TypesTree operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
        | e =>
          unless (AsyncWorker.IsRunSynchronously) 
            ignore(ProjectAvailableEvent.Set());
          _ = e; throw;
      }
      finally
      {
        OnTypeTreeBuildFinish();
          
        when (Hierarchy != null)
          Hierarchy.Dispose();

        unless (request.Stop)
        {
          LastParseTime = DateTime.Now;
          def messages = CurrentMessages; // closure copy of list (array)
          AsyncWorker.AddResponse(() => _callback.SetTopLevelCompilerMessages(messages));
          _currentMessages = null;
        }

        IsBuildTypesTreeInProgress = false;

        //request.MarkAsCompleted();

        unless (AsyncWorker.IsRunSynchronously) 
          when (IsProjectAvailable)
            ignore(ProjectAvailableEvent.Set());

        request.MarkAsCompleted();

        AsyncWorker.AddResponse(() => _callback.TypesTreeCreated());
        AsyncWorker.AddResponse(() => _callback.SetStatusText("Building types tree is completed."));
      }
    } // end of BuildTypesTree()

    private OnSourceChanged(_source : ISource) : void
    {
      // при изменении исходников, отображенных на кастомные парсеры
      // просто запускаем перестроение дерева типов
      RequestOnBuildTypesTree();
    }
  } // end class Engine
} // end of Nemerle.Completion2 namespace
