// This tiny project is very useful for refactoring (and other) tests
// methods' ASTs are short and easily observable via debugger
// Macros could also be put here for testing purposes

using System.Console;

namespace TestProjectTwo
{
  public abstract class Spirit {}
    
  public interface IHuman
  {
    SpeakWithCreator(message : string) : void;
    Fall() : void;
    Cry() : void;
  }

  public class God : Spirit, IHuman
  {
    public static Instance : God = God(); // definition {4} Instance
    
    public mutable FirstHumanBeing : Human; // definition {5} FirstHumanBeing
    
    public CreateHumanBeing() : IHuman // definition {3} CreateHumanBeing
    {
      Instance.FirstHumanBeing = Human(this); // usage {4} // usage {5}
      Instance.FirstHumanBeing // usage {4} // usage {5}
    }
    
    public Listen(message : string) : void // definition {6} Listen
    {
      WriteLine($"I am God, receiving message: $message");
    }
    
    public RobeFirstHumanInFlesh() : void // definition {7} RobeFirstHumanInFlesh
    {
      RemoveFirstHumanFrom(Instance); // usage {4} // usage {8}
    }
    
    RemoveFirstHumanFrom(creator : God) : void // definition {8} RemoveFirstHumanFrom
    {
      creator.FirstHumanBeing = null; // usage {5}
    }
    
    public CheckContact() : string // definition {9} CheckContact
    {
      def status = if (FirstHumanBeing != null) "ok" else "lost :("; // usage {5}
      $"Contact with first human being is $status"
    }
    
    [Nemerle.NotImplemented]
    public virtual SpeakWithCreator(_ : string) : void {} // definition {10} SpeakWithCreator

    [Nemerle.NotImplemented]
    public virtual Fall() : void {} // definition {11} Fall
    
    [Nemerle.NotImplemented]
    public virtual Cry() : void {} // definition {12} Cry
  }
  
  public class Human : God
  {
    public mutable imageOfGod : God; // definition {13} imageOfGod
    
    public this(imageAndLikeness : God)
    {
      imageOfGod = imageAndLikeness; // usage {13}
    }
    
    public override SpeakWithCreator(message : string) : void // definition {14} SpeakWithCreator
    {
      imageOfGod.Listen(message); // usage {6} // usage {13}
    }
    
    public override Fall() : void
    {
      imageOfGod = null; // usage {13}
    }
    
    public override Cry() : void
    {
      WriteLine("I'm fucked up, man!");
    }
  }
  
  public module ChristianVision
  {
    public TheFallOf(human : IHuman) : void -> void
    {
      human.Fall
    }
  }

  public module Time
  {
    public VeryLongAgo() : void
    {
      def firstHuman = God.Instance.CreateHumanBeing(); // definition {1} firstHuman // usage {3} // usage {4}
      WriteLine($"First human is alive: $(firstHuman != null)"); // usage {1}
      WriteLine($"First human being is spirit: $(firstHuman is Spirit)"); // usage {1}
      firstHuman.SpeakWithCreator("Hello, God..."); // usage {1}
      def actualize(reasons)
      {
        reasons()
      }
      def someReasons = (ChristianVision.TheFallOf(firstHuman), God.Instance.RobeFirstHumanInFlesh); // usage {1} // definition {2} someReasons // usage {4} // usage {7}
      actualize(someReasons[0]); // usage {2}
      actualize(someReasons[1]); // usage {2}
      try
      {
        firstHuman.SpeakWithCreator("Where are you, God???"); // usage {1}
      }
      catch
      {
        | _ => WriteLine("First human can't find God!");
      }
      WriteLine($"GOD SAYS: $(God.Instance.CheckContact())");
      firstHuman.Cry(); // usage {1}
    }
  }
}
