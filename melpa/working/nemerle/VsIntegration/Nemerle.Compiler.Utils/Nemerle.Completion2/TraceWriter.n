using System;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Nemerle.Text;

namespace Nemerle.Completion2
{
  public class TraceWriter : TextWriter
  {
    public override Encoding : Encoding
    {
      get { throw NotImplementedException(); }
    }

    public override Write(value : string) : void
    {
      def value = value.Replace('`', '\'');
      def result = regexp match (value)
      {
        | @"(?<m1>.+?):(?<m2>\d+):(?<m3>\d+):(?<m4>\d+):(?<m5>\d+):(?<m6>.*)" =>
          $"$m1($m2,$m3,$m4,$m5):$m6"
        | _ => value
      }
      //Trace.Write(result);
      _ = result;
    }

    public override WriteLine(value : string) : void
    {
      Write(value);
      Write("\n");
    }

    public override WriteLine(buffer : array[char]) : void
    {
      WriteLine(string(buffer));
    }

    public override WriteLine(buffer : array[char], index : int, count : int) : void
    {
      WriteLine(string(buffer, index, count));
    }

    public override WriteLine(value : object) : void
    {
      WriteLine(if (value == null) "<null>" else value.ToString());
    }

    public override Write(buffer : array[char]) : void
    {
      Trace.Write(string(buffer));
    }
  }
}
