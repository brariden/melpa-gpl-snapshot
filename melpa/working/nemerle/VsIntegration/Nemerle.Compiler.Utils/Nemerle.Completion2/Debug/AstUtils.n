using System;
using System.Diagnostics;
using System.Reflection;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Completion2;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using SCG   = System.Collections.Generic;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

namespace Nemerle.Compiler.Utils
{
  public module AstUtils
  {
    public FillList(lex : LexerBase, items : SCG.List[AstNodeInfo]) : void
    {
      def scan(toc : Token)
      {
        | EndOfFile => items.Add(AstNodeInfo("EOF", toc.Location));
        | _ =>
          items.Add(AstNodeInfo(toc.ToString(), toc.Location));
          scan(lex.GetToken());
      }

      scan(lex.GetToken());
    }

    public FillList(rootNamespase : Decl.Namespace, items : SCG.List[AstNodeInfo]) : void
    {
      items.Clear();
      
      def scan(node : Decl, indent)
      {
        match (node)
        {
          | Using as us => items.Add(AstNodeInfo($"$(indent)$us", us.Location));
          | Namespace as n =>  //(Name, NameLocations, Alias, AliasLocation)
            def name = n.Name.ToString(".");
            items.Add(AstNodeInfo($"$(indent)ns $name", n.Location));
            unless (n.NameLocations.IsEmpty)
              items.Add(AstNodeInfo($"$(indent)ns name: $name", n.NameLocations.EnclosingLocation()));
            items.Add(AstNodeInfo($"$(indent){", n.Location.FromStart()));
            
            foreach (subNode in n.Decls)
              scan(subNode, indent + " ");
              
            items.Add(AstNodeInfo($"$(indent)} // ns $name", n.Location.FromEnd()));
            
          | Type(ast) =>
            def scanType(tb : TypeBuilder, indent)
            {
              def name = tb.Name;
              def fileIndex = rootNamespase.Location.FileIndex;
              items.Add(AstNodeInfo($"$(indent)type $name", tb.Location));

              def scanMethod(method : MethodBuilder, indent)
              {
                def name = method.Name;
                def flags = (if (method.IsGenerated) "G " else "")
                  + (if (method.Attributes %&& NemerleModifiers.SpecialName) "S " else "");
                items.Add(AstNodeInfo($"$(indent)method $name(... // $flags",
                  method.Location));
                def ret = method.Ast.header.ParsedReturnType;
                items.Add(AstNodeInfo($"$(indent)  ) : $ret", ret.Location));
                items.Add(AstNodeInfo($"$(indent){", method.BodyLocation.FromStart()));
                items.Add(AstNodeInfo($"$(indent)} // method $name", method.BodyLocation.FromEnd()));
              }
              def scanField(field : FieldBuilder, indent)
              {
                ignore(field);
                ignore(indent);
              }
              def scanProp(prop : PropertyBuilder, indent)
              {
                ignore(prop);
                ignore(indent);
              }

              items.Add(AstNodeInfo($"$(indent)type name $name", tb.Location));
              match (tb.PartsLocation.Find(x => x.FileIndex == fileIndex))
              {
                | Some(loc) => 
                  items.Add(AstNodeInfo($"$(indent){", loc.FromStart()));
                  foreach (subTb in tb.GetDirectSubTypes())
                    scanType(subTb, indent + " ");
                    //
                  def mems = tb.GetDirectMembers(); //GetMembers(BindingFlags.NonPublic | BindingFlags.DeclaredOnly | BindingFlags.Public);
                  foreach (mem when mem.Location.FileIndex  == fileIndex in mems)
                    match (mem)
                    {
                      | tb     is TypeBuilder     => scanType(tb, indent + " ");
                      | method is MethodBuilder   => scanMethod(method, indent + " ");
                      | field  is FieldBuilder    => scanField(field, indent + " ");
                      | prop   is PropertyBuilder => scanProp(prop, indent + " ");
                      | _ => ()
                    }
                    
                  items.Add(AstNodeInfo($"$(indent)} // type $name", loc.FromEnd()));
                
                | _ => ()
              }
            }
            
            scanType(ast.TypeBuilder, indent);

          | _ => ()
        }
      }

      scan(rootNamespase, "");
    }

    public GetAllDeclarations(lst : list[TopDeclaration]) : SCG.IEnumerable[TopDeclaration]
    {
      def result = SCG.List();

      def checkDecl(decl : TopDeclaration) 
      {
        def checkMember(member : ClassMember) 
        {
          | TypeDeclaration(td) => checkDecl(td);
          | _                   => ();
        }

        match (decl)
        {
        | Alias                => ();
        | Delegate
        | Enum
        | Interface
        | Macro                => result.Add(decl);
        | Class     (_, decls)
        | Variant   (_, decls)
        | VariantOption(decls) =>
          result.Add(decl);
          when (decls != null)
            foreach (decl in decls)
              checkMember(decl);
        }
      }

      foreach (top in lst)
        checkDecl(top);

      result;
    }

    public GetMembers(decl : TopDeclaration) : list[ClassMember]
    {
      mutable result = [];

      def checkMember(mem : ClassMember) 
      {
      | Event
      | Field
      | Function
      | Property => result ::= mem;
      | _        => ();
      }

      match (decl)
      {
      | Class     (_, decls)
      | Variant   (_, decls)
      | VariantOption(decls) => decls.Iter(checkMember);
      | _                    => ();
      }

      result;
    }

    public GetMemberLabel(mem : ClassMember) : string
    {
      | Field(Wildcard)                => mem.Name;
      | Field(ty)
      | Event(ty, _, _, _)
      | Property(returnType = ty, parameters = [])   => $"$(mem.Name) : $ty";
      | Property(returnType = ty, parameters = dims) => $"$(mem.Name)$dims : $ty";
      | Function(hdr, _, _)            => hdr.ToString()
      | _                              => mem.Name;
    }
  }
}
