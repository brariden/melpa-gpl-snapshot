using System;
using System.Collections.Generic;
using System.Text;

using Nemerle.Utility;
using Nemerle.Compiler;

namespace Nemerle.Completion2.CodeFormatting
{
  [Record (Exclude = [ResultType])]
  public class FormatterResult
  {
    [Accessor] _startLine : int = -1;
    [Accessor] _startCol : int = -1;
    [Accessor] _endLine : int = -1;
    [Accessor] _endCol : int  = -1;
    [Accessor] _replacementString : string = "";
    
    public override ToString() : string
    {
      match((StartLine, StartCol, EndLine, EndCol, ReplacementString))
      {
      | (startLine, startCol, endLine, endCol, replacement) when startLine == endLine 
                                                                 && startCol == endCol 
                                                                 && replacement.Length > 0 => $"\"$replacement\" -> ($startLine, $startCol)";
      | (startLine, startCol, endLine, endCol, replacement) when startLine == endLine => $"($startLine, $startCol-$endCol) = \"$replacement\"";
      | (startLine, startCol, endLine, endCol, replacement) => $"($startLine, $startCol, $endLine, $endCol) = \"$replacement\"";
      //| _ => "FormatterResult.ToString(): unexpected set of values";
      }
    }
    
    public IntersectsWith(other : FormatterResult) : bool
    {
      def thisLoc = Location(0, StartLine, StartCol, EndLine, EndCol);
      thisLoc.Contains(other.StartLine, other.StartCol) || thisLoc.Contains(other.EndLine, other.EndCol);    
    }
    
    public static Replace(loc : Location, replacement : string) : FormatterResult 
    {
      FormatterResult(loc.Line, loc.Column, loc.EndLine, loc.EndColumn, replacement);
    }

    public static Replace(line : int, fromCol : int, toCol : int, replacement : string) : FormatterResult
    {
      FormatterResult(line, fromCol, line, toCol, replacement);
    }
    
    public static Insert(line : int, column : int, value : string) : FormatterResult
    {
      FormatterResult(line, column, line, column, value);
    }    
    
    public static Erase(loc : Location) : FormatterResult
    {
      Replace(loc, "");
    } 
    
    public static Erase(line : int, fromCol : int, toCol : int) : FormatterResult
    {
      Replace(line, fromCol, toCol, "");
    }
  }
}