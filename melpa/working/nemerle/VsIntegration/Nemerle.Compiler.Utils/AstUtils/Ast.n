using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace Nemerle.Compiler.Utils
{
  module Ast
  {
    private CheckFail(result : bool) : bool
    {
#if DEBUG
      unless (result)
      {
        assert2(true);
      }
#endif
      result
    }

    DeclarationBaseEqualsStruct(first : DeclarationBase, second : DeclarationBase) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;

      def loc1 = first.Location;
      def loc2 = second.Location;

      def res3 =
        if (loc1.IsGeneratedOrEmpty)
          loc2.IsGeneratedOrEmpty
        else if (loc2.IsGeneratedOrEmpty)
          loc1.IsGeneratedOrEmpty
        else
        {
          def res1 = EqualsStruct(first.ParsedSplicableName,         second.ParsedSplicableName);
          def res2 = EqualsStruct(first.ParsedAttributsAndModifiers, second.ParsedAttributsAndModifiers);
          res1 && res2
        };

      CheckFail(res3)
    }

    ForAllEx[T](first : list[T], second : list[T], eq : T * T -> bool) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;
        
      def res1 = if (first.IsEmpty) second.IsEmpty else first.ForAll2(second, eq);
      CheckFail(res1)
    }
    
    public EqualsStruct(first : AttributesAndModifiers, second : AttributesAndModifiers) : bool
    {
      if (first == null) second == null
      else
      {
        def res1 = EqualsStruct(first.ParsedCustomAttributes, second.ParsedCustomAttributes);
        def res2 = first.ParsedModifiers == second.ParsedModifiers;
        CheckFail(res1 && res2)
      }
    }
    
    public EqualsStruct(first : TopDeclaration, second : TopDeclaration) : bool
    {
      def res1 = 
        if (!DeclarationBaseEqualsStruct(first, second))
          false
        else match (first, second)
        {
          | (Alias(ty1),                  Alias(ty2)) => EqualsStruct(ty1, ty2)
          | (VariantOption      (decls1), VariantOption      (decls2)) =>
            decls1.ForAll2(decls2, EqualsStruct)
            
          | (Class    (extends1, decls1), Class    (extends2, decls2))
          | (Enum     (extends1, decls1), Enum     (extends2, decls2))
          | (Interface(extends1, decls1), Interface(extends2, decls2))
          | (Variant  (extends1, decls1), Variant  (extends2, decls2)) => 
            ForAllEx(extends1, extends2, EqualsStruct) && decls1.ForAll2(decls2, EqualsStruct)
            
          | (Macro(header1, synt1, _expr1), Macro(header2, synt2, _expr2)) => 
            EqualsStruct(header1, header2) && ForAllEx(synt1, synt2, EqualsStruct)
            
          | (Delegate(header1), Delegate(header2)) => EqualsStruct(header1, header2)
          | _                                    => false
        };
      
      CheckFail(res1)
    }

    public static EqualsStruct(first : option[ClassMember.Function], second : option[ClassMember.Function]) : bool
    {
      | (Some(x), Some(y)) => EqualsStruct(x, y)
      | (None,       None) => true
      | _                  => false
    }
    
    public static EqualsStruct(first : Typarms, second : Typarms) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;

      def res1 = ForAllEx(first.tyvars,      second.tyvars,      EqualsStruct);
      def res2 = ForAllEx(first.constraints, second.constraints, EqualsStruct);
      CheckFail(res1 && res2)
    }

    public static EqualsStruct(first : Constraint, second : Constraint) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;

      def res1 = EqualsStruct(first.tyvar, second.tyvar);
      def res2 = EqualsStruct(first.ty,    second.ty);
      CheckFail(res1 && res2)
    }

    public static EqualsStruct(first : Splicable, second : Splicable) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;


      def res1 =
        match (first, second)
        {
          | (Splicable.Name(n1), Splicable.Name(n2)) => string.Equals(n1.ParsedId, n2.ParsedId, StringComparison.Ordinal)
          | _ =>
            def loc1 = first.Location;
            def loc2 = second.Location;
            loc1.IsGenerated && loc2.IsGenerated 
              || loc1.Line == 0 && loc2.Line == 0 
              || first.ToString() == second.ToString()
        };

      CheckFail(res1)
    }

    public static EqualsStruct(first : PFunHeader, second : PFunHeader) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;

      def res1 = EqualsStruct(first.ParsedTypeParameters, second.ParsedTypeParameters);
      def res2 = EqualsStruct(first.ParsedSplicableName,  second.ParsedSplicableName);
      def res3 = EqualsStruct(first.ParsedReturnType,     second.ParsedReturnType);
      def res4 = EqualsStruct(first.ParsedParameters,     second.ParsedParameters);

      CheckFail(res1 && res2 && res3 && res4)
    }
    
    public static EqualsStruct(first : PParameter, second : PParameter) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;

      def res1 = DeclarationBaseEqualsStruct(first,    second);
      def res2 = EqualsStruct(first.ParsedType,        second.ParsedType);
      def res3 = EqualsStruct(first.ParsedPatternHack, second.ParsedPatternHack);

      CheckFail(res1 && res2 && res3)
    }
    
    public EqualsStruct(first : list[PExpr], second : list[PExpr]) : bool
    {
      ForAllEx(first, second, EqualsStruct)
    }
    
    public EqualsStruct(first : list[PParameter], second : list[PParameter]) : bool
    {
      ForAllEx(first, second, EqualsStruct)
    }

    public EqualsStruct(first : FunBody, second : FunBody) : bool
    {
      def res1 = match (first, second)
        {
          | (null,     null)
          | (Parsed,   Parsed)
          | (Abstract, Abstract)
          | (Typed,    Parsed)
          | (Parsed,   Typed)
          | (Typed,    Typed) => true
          | _                 => false
        };

      CheckFail(res1)
    }

    public EqualsStruct(first : ClassMember, second : ClassMember) : bool
    {
      def res1 = 
        if (!DeclarationBaseEqualsStruct(first, second))
          false
        else match (first, second)
        {
          | (TypeDeclaration(td1), TypeDeclaration(td2)) => EqualsStruct(td1, td2)
          | (Field as field1, Field as field2) => EqualsStruct(field1.ParsedType, field2.ParsedType)
          | (Function as f1, Function as f2) =>
            EqualsStruct(f1.header, f2.header)
            && EqualsStruct(f1.ParsedImplemented, f2.ParsedImplemented)
            && EqualsStruct(f1.ParsedBody, f2.ParsedBody) // сравнивается только тип тела!
            
          | (Property(parsedReturnType = ty1, parsedParameters = dims1, parsedGetter = get1, parsedSetter = set1), 
             Property(parsedReturnType = ty2, parsedParameters = dims2, parsedGetter = get2, parsedSetter = set2))
            =>
            EqualsStruct(ty1, ty2) && EqualsStruct(dims1, dims2)
            && EqualsStruct(get1, get2) && EqualsStruct(set1, set2)
            
          | (Event(ty1, field1, add1, remove1), Event(ty2, field2, add2, remove2)) =>
            EqualsStruct(ty1, ty2) && EqualsStruct(field1, field2)
            && EqualsStruct(add1, add2) && EqualsStruct(remove1, remove2)
          
          | (EnumOption(None),         EnumOption(None))         => true
          | (EnumOption(Some(value1)), EnumOption(Some(value2))) => EqualsStruct(value1, value2)
          | (_, _) => false
        };
        
      CheckFail(res1)
    }
    
    public static EqualsStruct(first : PExpr, second : PExpr) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;

      def res1 = first.ToString() == second.ToString();
      CheckFail(res1)
    }
  } // end of Ast module
} // end of Nemerle.Compiler.Utils namespace