using System.Console;

namespace QtTest
{
  variant MyVar
  {
  | Op1 { parms : string    }
  | Op2 { lst   : list[int] }
  }

  public class Class1
  {
    ExtTest() :void
    {
      def str = "". StrExt /*038:-2*/();
    }
    public static StrExt(this s : string) : int { 0 }

    TupleTest() : string * int /*037:-2*/
    {
      ("", 0)
    }

    ForeachTest() : void
    {
      foreach /*036:-2*/ (ch in "123")
      {
      }
    }

    TryCatch() : void
    {
      try
      {
        def bbb /*035:-2*/ = "".ToString();
      }
      catch
      {
      | ex => ex /*034:-2*/.ToString();
      }
      finally
      {
        def aaa /*032:-2*/ = "". ToString /*033:-2*/();
      }
    }

    ParamTest( arr /*031:-2*/ : array[int]) : void
    {
      def bar(bbb /*030:-2*/: array[int]/*027:-6*/) : void {}
      bar(arr);

      System.Array.Sort(arr, (x /*028:-2*/, y /*029:-2*/: int) => x - y);

      def foo( ppp /*012:-3*/) {}
      foo(1);

      mutable iii/*010:-1*/ : int/*009:-1*/;
      _ = arr/*008:-1*/[0];
    }

    Operators(val : string)
    {
      mutable ss = "";
      foreach (s in [""])
        ss += /*025:-2*/s;

      _ = "1" + /*022:-1*/ val;
    }

    public static TestMType(t : Nemerle.Compiler.FixedType) : string
    {
    | Fun as f =>
      def fromTy = f.from.Fix();
      def toTy   = f.to.Fix();
      if (fromTy /*026:-2*/ : object == t || toTy : object == t)
        ""
      else
        ""
    }

    MatchTest(sss : string, myvar : MyVar, o : object) : void
    {
      match (o)
      {
      | s is MyVar. Op1 /*024:-2*/=> ()
      | s is string /*023:-2*/=> ()
      | _ => ()
      }

      match (myvar)
      {
      | Op2 as op2 /*021:-2*/ => _ = op2.lst. Map /*020:-2*/(_.ToString());
      | Op1 /*016:-2*/(parms) =>
        def res = match ( parms /*019:-2*/)
        {
        | "123" => 1
        | _     => 2
        }
        ()
      | Op2 => ()
      }

      def chk (x, n) { x == n }
      match (sss.Length)
      {
      | xx /*014:-2*/ when chk /*015:-2*/(xx, 1) => ()
      | _ => ();
      }

      def foo(ss)
      {
      | xx/*013:-1*/ when xx.Length == 0 => ();
      | _ => ();
      }

      foo(sss);
    }

    DoTest()
    {
      def s = "";
      s. Substring /*018:-2*/(0);

      mutable foo = 0;
      do {
        foo /*017:-2*/+= 100;
      } while (foo < 1000);
    }

    MacroTest() : void
    {
      foreach (ch/*011:-1*/ in "123")
      {
      }

      if/*003:-1*/ ("".Length/*004:-1*/ == 0) {}
      else {}
    }

    WriteLineTest() : void
    {
      System.Console.WriteLine/*006:-1*/("");
      WriteLine/*002:-1*/("");
    }

    Foo() : void
    {
      def bar/*005:-1*/()
      {
        _ = ReadLine/*001:-1*/();
        def _iii/*007:-1*/ = ReadLine();
      }

      bar();
    }
  }
}