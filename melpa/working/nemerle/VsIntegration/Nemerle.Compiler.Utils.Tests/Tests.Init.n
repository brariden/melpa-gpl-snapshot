using Nemerle.Compiler;
using Nemerle.Compiler.Utils;
using Nemerle.Completion2;
using System.Diagnostics;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Compiler.Parsetree;

using NUnit.Framework;

using System;
using System.Collections.Generic;
using System.Console;
using System.IO;
using System.IO.Path;
using System.Reflection;
using System.Text;

namespace Tests
{
  public partial class Test1
  {
    static FilePath1     : string;
    static FilePath2     : string;
    static FilePath3     : string;
    static FileQuickTip  : string;
    static FileQuickTip2 : string;
    static FileMethodTip : string;
    
    static this()
    {
      def asm     = Reflection.Assembly.GetExecutingAssembly();
      def asmPath = Uri(asm.CodeBase).LocalPath;
      def dir = GetDirectoryName(asmPath);
      def projPath = Combine(dir, @"Content");
      def makePath(fileName : string) { GetFullPath(Combine(projPath, fileName)) }
      
      FilePath1     = makePath("Class1.n");
      FilePath2     = makePath("Class1-2.n");
      FilePath3     = makePath("Class1-3.n");
      FileQuickTip  = makePath("QuickTip.n");
      FileQuickTip2 = makePath("QuickTip2.n");
      FileMethodTip = makePath("MethodTip.n");
    }
  
    [TestFixtureSetUp]
    public Init() : void
    {
      def callback = EngineCallbackStub(
        ["mscorlib",
         "System",
         "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
         "System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
         "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"],
        [FilePath1, FileQuickTip2, FilePath3, FilePath2, FileQuickTip, FileMethodTip]
      );

      _engine = EngineFactory.Create(callback, TraceWriter(), false);

      def request = _engine.BeginReloadProject();
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne(20_000));
      Assert.IsTrue(_engine.IsProjectAvailable);
    }

    //mutable _project : Project;
    mutable _engine  : IIdeEngine;

    [DebuggerNonUserCode]
    GetSource(filePath : string) : IIdeSource
    {
      _engine.GetSource(Location.GetFileIndex(filePath))
    }

    [DebuggerNonUserCode]
    public static ToVsOutputStringFormat(loc : Location) : string
    {
      mutable res = $"$(loc.File)($(loc.Line),$(loc.Column)";

      when (loc.EndLine > loc.Line || loc.EndLine == loc.Line && loc.EndColumn > loc.Column)
        res += $",$(loc.EndLine),$(loc.EndColumn)";

      res + "): ";
    }

    /// Находит тег и возвращает его координаты (строка, колонка).
    /// формат тега /*Тега*/ или /*Тега:+сдвиг*/ или /*Тега:-сдвиг*/
    /// Сдвиг позволяет задать колонку с относительным сдвигом.
    ReadLocation(filePath : string, tagName : string) : int * int
    {
      def tagName = "/*" + tagName;
      def lines = File.ReadAllLines(filePath);
      for (mutable i = 0; i < lines.Length; i++)
      {
        def line = lines[i];
        def index = line.IndexOf(tagName);
        when (index >= 0)
        {
          def str = line.Substring(index + tagName.Length);
          mutable isNegative = false;
          def offset = regexp match (str)
          {
            | @":\+{0,1}(?<offset : int>\d+)\*/.*" => offset
            | @":\-(?<offset : int>\d+)\*/.*"      => isNegative = true; -offset
            | _                                    => 0
          }
          def len = str.IndexOf("*/");
          assert(len >= 0);

          def col = if (isNegative)
            index + offset;
          else
            index + len + 2 + offset + tagName.Length;

          return (i + 1, col + 1);
        }
      }

      throw System.Exception("Tag not found.");
    }
  }
}
