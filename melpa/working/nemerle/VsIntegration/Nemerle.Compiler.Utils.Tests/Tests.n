using System.Console;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Linq;

using NUnit.Framework;

using Nemerle.Text;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Utils;
using Nemerle.Utility;
using Nemerle.Compiler.Utils.Async;

namespace Tests
{
  [TestFixture]
  public partial class Test1
  {
    [Test, Category("GoTo")]
    public GoToInfoTest_001() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "GoToInfoTest_001");
      def source = GetSource(file);
      def result = _engine.GetGotoInfo(source, line, col, GotoKind.Usages);

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(6, result.Length);
      Assert.AreEqual(UsageType.Definition, result[0].UsageType);

      foreach (x in result.Skip(1))
      {
        Assert.IsTrue(x.HasLocation);
        Assert.IsTrue(x.UsageType == UsageType.Usage);
        //Trace.WriteLine(ToVsOutputStringFormat(x.Location) + x.UsageType.ToString());
      }
    }

    [Test, Category("GoTo")]
    public GoToInfoTest_002() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "GoToInfoTest_002");
      def source = GetSource(file);
      def result = _engine.GetGotoInfo(source, line, col, GotoKind.Usages);

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(2, result.Length);
      Assert.AreEqual(UsageType.Definition, result[0].UsageType);
      Assert.IsTrue(result.All(x => x.Location.Line == line));

      foreach (x in result.Skip(1))
      {
        Assert.IsTrue(x.HasLocation);
        Assert.IsTrue(x.UsageType == UsageType.Usage);
        //Trace.WriteLine(ToVsOutputStringFormat(x.Location) + x.UsageType.ToString());
      }
    }

    [Test, Category("GoTo")]
    public GoToInfoTest_003() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "GoToInfoTest_003");
      def source = GetSource(file);
      def result = _engine.GetGotoInfo(source, line, col, GotoKind.Usages);

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(3, result.Length);
      Assert.AreEqual(UsageType.Definition, result[0].UsageType);
      Assert.AreEqual(UsageType.Definition, result[1].UsageType);
      Assert.AreEqual(UsageType.Usage,      result[2].UsageType);
      Assert.IsTrue(result.All(x => x.HasLocation && x.Location.Line == line));
    }

    [Test, Category("GoTo")]
    public GoToInfoTest_004() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "GoToInfoTest_004");
      def source = GetSource(file);
      def result = _engine.GetGotoInfo(source, line, col, GotoKind.Usages);

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(2, result.Length);
      Assert.AreEqual(UsageType.Definition, result[0].UsageType);
      Assert.AreEqual(UsageType.Usage,      result[1].UsageType);
      Assert.IsTrue(result.All(x => x.HasLocation && x.Location.Line == line));
    }

    // ValdD2: This test fail when runing as test, but work fine if on integration.
    //[Test, Category("GoTo")]
    //public GoToInfoTest_005() : void
    //{
    //  def file = FilePath1;
    //  def (line, col) = ReadLocation(file, "GoToInfoTest_005");
    //  def source = GetSource(file);
    //  def result = _engine.GetGotoInfo(source, line, col, GotoKind.Usages);
    //
    //  Assert.IsNotNull(result, "result is null");
    //  Assert.AreEqual(3, result.Length);
    //  Assert.IsTrue(result.All(x => x.HasLocation));
    //  Assert.AreEqual(UsageType.Definition, result[0].UsageType);
    //  Assert.AreEqual(UsageType.Definition, result[0].Location.Line == line);
    //  Assert.AreEqual(UsageType.Usage,      result[1].UsageType);
    //  Assert.AreEqual(UsageType.Usage,      result[2].UsageType);
    //}

    [Test, Category("MethodTip")]
    public GetMethodTip() : void
    {
      def test(testNumber, expectedCount, expected)
      {
        def file = FileMethodTip;
        def (line, col) = ReadLocation(file, testNumber);
        def result = _engine.BeginGetMethodTipInfo(GetSource(file), line, col);
        Assert.IsTrue(result.AsyncWaitHandle.WaitOne());

        def result = result.MethodTipInfo;

        Assert.IsNotNull(result, "result is null");

        def count = result.GetCount();

        if (expectedCount > 0)
          Assert.AreEqual(count, expectedCount, $"expected $expectedCount overloads, but found $count");
        else
          Assert.IsTrue(count > 0, "expected everload count > 0");

        foreach (i in [0 .. count - 1])
          Assert.AreEqual(result.GetName(i), expected, "expected overload name $expected, but found $(result.GetName(i))");
      }

      test("CompareTo_inField",                     0, "CompareTo");
      test("CompareTo_onString",                    0, "CompareTo");
      test("CompareTo_inMatchWhen_onDelayedTyVar",  0, "CompareTo");
    }

    [Test, Category("QuickTip")]
    public QuickTip() : void
    {
      def file = FileQuickTip2;

      def test(testNumber, len, expected)
      {
        def (line, col) = ReadLocation(file, testNumber);
        def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
        Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
        def result = request.QuickTipInfo;


        Assert.IsNotNull(result, "result is null");

        def line0 = result.Text;

        if (expected[0] == '-')
          Assert.IsTrue(line0.IndexOf(expected.Substring(1)) < 0);
        else
          Assert.IsTrue(line0.IndexOf(expected) >= 0);

        when (len > 0)
          Assert.AreEqual(len, result.Location.EndColumn - result.Location.Column);
      }

      test("009",  3, "'int'");
      test("016",  3, "Op1");
      test("015",  3, "chk");
      test("014",  2, "xx");
      test("013",  2, "xx");
      test("012",  3, "ppp");
      test("011",  2, "ch");
      test("010",  3, "iii");
      test("007",  0, "_iii");
      test("006",  9, "WriteLine");
      test("005",  0, "bar");
      test("004",  0, "Length");
      test("003",  0, "Nemerle.Core.if");
      test("002",  0, "WriteLine");
      test("001",  0, "ReadLine");

      test("021",  3, "op2");
      test("008",  3, "arr");
      test("038",  6, "StrExt");
      test("037",  3, "'int'");
      test("036",  7, "foreach");
      test("035",  3, "bbb");
      test("034",  2, "ex");
      test("033",  8, "ToString");
      test("032",  3, "aaa");
      test("031",  3, "arr");
      test("030",  3, "bbb");
      test("029",  1, "y");
      test("028",  1, "x");
      test("027", 10, "array");
      test("026",  6, "fromTy");
      test("025",  2, "+=");
      test("024",  3, "Op1");
      test("023",  6, "string");
      test("022",  1, "op_Addition");
      test("020",  3, "Map");
      test("019",  5, "parms");
      test("018",  9, "Substring");
      test("017",  3, "foo");
    }

    [Test, Category("Complete")]
    public Complete_in_base_type_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in base type 1");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(2, result.Length);
      Assert.AreEqual("string", result[1].DisplayName);
    }

    [Test, Category("Complete")]
    public Complete_in_base_type_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in base type 2");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(1, result.Length);
      Assert.AreEqual("IDisposable", result[0].DisplayName);
    }

    [Test, Category("Complete")]
    public Complete_in_base_type_3() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in base type 3");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(1, result.Length);
      Assert.AreEqual("TTest", result[0].DisplayName);
    }

    [Test, Category("Complete")]
    public Complete_in_return_type_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in return type 1");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual("Microsoft", result[3].DisplayName);
    }

    [Test, Category("Complete")]
    public Complete_in_return_type_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in return type 2");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(1, result.Length);
      Assert.AreEqual("void", result[0].DisplayName);
    }

    [Test, Category("Complete")]
    public Complete_in_return_type_3() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in return type 3");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(1, result.Length);
      Assert.AreEqual("int", result[0].DisplayName);
    }

    [Test, Category("Complete")]
    public Complete_in_return_type_4() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in return type 4");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(4, result.Length);
      Assert.AreEqual("Int16", result[0].DisplayName);
    }

    [Test, Category("Complete")]
    public Complete_in_match_variant_6() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 6");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(1, result.Length);
      Assert.AreEqual("_", result[0].ToString());
    }

    [Test, Category("Complete")]
    public Complete_in_match_variant_5() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 5");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 2);
      Assert.AreEqual("_", result[0].ToString());
      Assert.AreEqual("TestVariant2", result[1].ToString());
    }

    [Test, Category("Complete")]
    public Complete_in_match_variant_4() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 4");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 2);
      Assert.AreEqual("_", result[0].ToString());
      Assert.AreEqual("CValue", result[1].ToString());
    }

    [Test, Category("Complete")]
    public Complete_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete 2");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 10);
    }

    [Test, Category("Complete")]
    public Complete_empty() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete empty");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 10);
    }

    [Test, Category("Complete")]
    public Complete_System_Collections_Generic_List__Collections() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete System.Collections.Generic.List/Collections");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 1);
    }

    [Test, Category("Complete")]
    public Complete_namespace_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete namespace 2");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 1);
    }

    [Test, Category("Complete")]
    public Complete_Complete_expr() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete expr");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 18);
    }

    [Test, Category("Complete")]
    public Complete_ExtensionMethod_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "ExtensionMethod_1");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.IsTrue(result.Length > 6, "Expected more then 6 elems.");
      foreach (elem in result)
        StringAssert.StartsWith("Map", elem.DisplayName);
    }

    [Test, Category("Complete")]
    public Complete_enum() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete enum");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(32, result.Length, "Expected 32 elements."); //VladD2: этот тест выдает слишком много элементов. Позже надо будет разобраться.
    }

    [Test, Category("Source")]
    public SimpleSourceTextManager_GetLine() : void
    {
      def file = FilePath1;
      def (line, _) = ReadLocation(file, "Start block 1");
      def txtMan = GetSource(file);

      def result = txtMan.GetLine(line);

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual (result, "          /*Start block 1:-0*/;");
    }

    [Test, Category("Source")]
    public SimpleSourceTextManager_GetLine_EOF() : void
    {
      def file = FilePath1;
      def (line, _) = ReadLocation(file, "EOF");
      def txtMan = GetSource(file);

      def result = txtMan.GetLine(line);

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual (result, "}/*EOF:0*/");
    }

    [Test, Category("Source")]
    public SimpleSourceTextManager_GetLineAndColumn() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Start block 1");
      def txtMan = GetSource(file);

      def pos = txtMan.GetPositionOfLineIndex(line, col);
      def (line2, col2) = txtMan.GetLineIndexOfPosition(pos);

      Assert.AreEqual(line2, line);
      Assert.AreEqual(col2,  col);
    }

    [Test, Category("Source")]
    public SimpleSourceTextManager_GetRegion_block_1() : void
    {
      SimpleSourceTextManager_Start_block(1,
        @"/*Start block 1:-0*/;
          /*End block 1:0*/");
    }

    [Test, Category("Source")]
    public SimpleSourceTextManager_GetRegion_block_2() : void
    {
      SimpleSourceTextManager_Start_block(2,
        @"/*Start block 2:-0*/;/*End block 2:0*/");
    }

    [Test, Category("Source")]
    public SimpleSourceTextManager_GetRegion_block_3() : void
    {
      SimpleSourceTextManager_Start_block(3,
        @"/*Start block 3:-0*/;
          // Some code line...
          // Some code line...
          // Some code line...
          /*End block 3:0*/");
    }

    private SimpleSourceTextManager_Start_block(blockNum : int, testStr : string) : void
    {
      def testStr = testStr.Replace("\r\n", "\n");
      def file = FilePath1;
      def (line, col) = ReadLocation(file, $"Start block $blockNum");
      def (endLine, endCol) = ReadLocation(file, $"End block $blockNum");
      def txtMan = GetSource(file);

      def result = txtMan.GetRegion(line, col, endLine, endCol);
      def result = result.Replace("\r\n", "\n");

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual (result, testStr);
    }

    [Test, Category("QuickTip")]
    public Hint_on_return() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Hint on return");
      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;

      Assert.IsNotNull(result, "result is null");
      StringAssert.Contains("Keywords: <keyword>return</keyword>", result.Text);
    }

    [Test, Category("Completion")]
    public Complete_GlabalNs_in_NestedNs() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete glabal ns");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(2, result.Length, "Expected 2 elements.");
    }

    [Test, Category("QuickTip")]
    public Hint_in_body_of_implicit_match() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Hint in body of implicit match");
      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;

      Assert.IsNotNull(result, "result is null");
      StringAssert.Contains("variant option TestVariant1.Aaa", result.Text);
      //StringAssert.Contains("'TestVariant1'", result.Text);
      //StringAssert.Contains("variant", result.Text);
      //StringAssert.Contains("option", result.Text);
    }

    [Test, Category("QuickTip")]
    public Overload1() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "ClassExtension");

      def test()
      {
        def result = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
        Assert.IsTrue(result.AsyncWaitHandle.WaitOne());
        Assert.IsNotNull(result.QuickTipInfo, "result is null");
        def tExpr = result.QuickTipInfo.TExpr;
        Assert.AreEqual(tExpr.ToString(), "ClassExtension.Foo");
        Assert.AreEqual(tExpr.Type.ToString(), "string -> int");
      }

      test();

      def request = _engine.BeginBuildTypesTree();
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne(10_000));
      Assert.IsTrue(_engine.IsProjectAvailable);

      test();

      def request = _engine.BeginBuildTypesTree();
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne(10_000));
      Assert.IsTrue(_engine.IsProjectAvailable);

      test();
    }

    [Test, Category("Completion")]
    public Complete_generic_type_cast() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete generic type cast");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.Greater(result.Length, 0);
    }

    [Test, Category("Completion")]
    public Complete_type_cast() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete type cast");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.Greater(result.Length, 0);
    }

    [Test, Category("Completion")]
    public Complete_namespace_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete namespace 1");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test, Category("Completion")]
    public Complete_vars_with_same_name() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete vars with same name");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(2, result.Length, "Expected 2 elements.");
    }

    [Test, Category("Completion")]
    public Complete_in_match_variant_3() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 3");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test, Category("Completion")]
    public Complete_in_match_variant_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 2");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test, Category("Completion")]
    public Complete_in_match_variant_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 1");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test, Category("Completion")]
    public Complete_type_escalation_3() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete type escalation 3");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test, Category("Completion")]
    public Complete_type_escalation_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete type escalation 2");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test, Category("Completion")]
    public Complete_type_escalation() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete type escalation");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(18, result.Length, "Expected 1 elements.");
    }

    [Test, Category("Completion")]
    public Complete_in_lambda() : void
    {
      def test(tag)
      {
        def file = FilePath1;
        def (line, col) = ReadLocation(file, tag);
        def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
        Assert.IsNotNull(result, "result is null");
        Assert.AreEqual(1, result.Length, "Expected 1 element[s].");
        Assert.AreEqual(result[0].ToString(), "CompareTo", "Expected 1 element[s].");
      }

      test("Complete in lambda CompareTo");
      test("Complete in lambda CompareTo 2");
    }

    [Test, Category("Completion")]
    public Complete_qualidend() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete qualidend");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(2, result.Length, "Expected 2 elements.");
    }

    [Test, Category("Completion")]
    public CompleteInType_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Main() 2");
      def decl = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(decl, "decl is null");
    }

    [Test, Category("Completion")]
    public CompleteInUsing_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "using");
      def decl = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(decl, "decl is null");
    }

    [Test, Category("Completion")]
    public Complete_Complete_aliased_type() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete aliased type");
      def result = _engine.Completion(GetSource(file), line, col).CompletionElems;
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual($"..$result", "SetBufferSize, SByte, sbyte");
    }

    [Test, Category("QuickTip")]
    public FindByLocation_Method_Main() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Tests.Class1.Main()");

      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;
      StringAssert.Contains("private method Tests.Class1.Main() : void", result.Text);
    }

    [Test, Category("QuickTip")]
    public QuickTip_ClassExtension() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "ClassExtension");

      def Test()
      {
        def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
        Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
        def result = request.QuickTipInfo;

        Assert.IsNotNull(result, "result is null");
        StringAssert.Contains("'ClassExtension'", result.Text);
        StringAssert.Contains("<b>Foo</b>", result.Text);
        Assert.AreEqual(result.TExpr.Type.ToString(), "string -> int");
      }

      Test();
      Test();
    }

    // VladD2: Не надо удалять отлаженные тесты. Не факт, что другие тесты покрывают
    // их функциональность.
    [Test, Category("QuickTip")]
    public QuickTip_TupleMethod() : void
    {
      def file        = FilePath2;
      def (line, col) = ReadLocation(file, "TupleMethod");

      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;

      Assert.IsNotNull(result, "result is null");
      StringAssert.Contains("'XStruct'", result.Text);
    }

    [Test, Category("QuickTip")]
    public QuickTip_TupleProp() : void
    {
      def file        = FilePath2;
      def (line, col) = ReadLocation(file, "TupleProp");

      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;

      Assert.IsNotNull(result, "result is null");
      StringAssert.Contains("'XStruct'", result.Text);
    }

    [Test, Category("QuickTip")]
    public QuickTip_CtorArg() : void
    {
      def file        = FilePath2;
      def (line, col) = ReadLocation(file, "CtorArg");

      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;

      Assert.IsNotNull(result, "result is null");
      StringAssert.Contains("'XStruct'", result.Text);
    }

    [Test, Category("QuickTip")]
    public QuickTip_ArgPattern() : void
    {
      def file        = FilePath2;
      def (line, col) = ReadLocation(file, "ArgPattern");

      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;

      Assert.IsNotNull(result, "result is null");
      StringAssert.Contains("variant option TestVariant2.CValue", result.Text);
    }

    [Test, Category("QuickTip")]
    public QuickTip_StackOverflow() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "StackOverflow");

      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;
      Assert.IsNotNull(result, "result is null");
    }

    [Test, Category("QuickTip")]
    public QuickTip_Imperative() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "Class4");

      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;

      Assert.IsNotNull(result, "result is null");
      StringAssert.Contains("<b>ToString</b>", result.Text);
    }

    [Test, Category("QuickTip")]
    public QuickTip_ForMacro() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "forMacro");

      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;

      Assert.IsTrue(result.Text.StartsWith("macro Nemerle.Core.for"));
    }

    [Test, Category("QuickTip")]
    public Property_location() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "PropStartLocation");

      def request = _engine.BeginGetQuickTipInfo(GetSource(file), line, col);
      Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
      def result = request.QuickTipInfo;
      StringAssert.Contains("Class5.Prop : int", result.Text);
    }

    [Test, Category("QuickTip")]
    public QuickTips() : void
    {
      def file  = FileQuickTip;
      def lines = File.ReadAllLines(file);
      def rx    = Regex(@"\/\*([^:]+):([^:]+):([^:]+)\*\/");

      for (mutable i = 0; i < lines.Length; i++)
      {
        def line = lines[i];

        foreach (m is Match in rx.Matches(line))
          when (m.Groups.Count == 4 && m.Groups[1].Value == "QuickTip")
          {
            def col      = m.Index + int.Parse(m.Groups[2].Value);
            def expected = m.Groups[3].Value;

            def request = _engine.BeginGetQuickTipInfo(GetSource(file), i + 1, col);
            Assert.IsTrue(request.AsyncWaitHandle.WaitOne());
            def result = request.QuickTipInfo;

            when (result == null)
            {
              WriteLine(line);
              Assert.Fail($"$file at $(i+1):$col, expected '$expected', got null");
            }

            def actual = result.Text;
            when (actual.IndexOf(expected) < 0)
            {
              WriteLine(line);
              Assert.Fail($"$file at $i:$col, expected '$expected', got '$actual'");
            }
          }
      }
    }
  }
}
