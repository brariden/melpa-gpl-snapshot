<?xml version="1.0" encoding="utf-8"?>
<page subtitle="Step-by-Step Tutorial">

  <section title="1. Introduction" anchor="intro">
    <p>
    This is a short Sioux tutorial. It shows how to write and build simple Nemerle web application.
    </p>
  </section>


  <section title="2. Writing code" anchor="writing">
    <p>
    First of all open your favorite text editor and start coding:<br/> <br/>

    <table cellpadding="0" cellspacing="0" class="code"><tr><td><pre class="code">
using Sioux;
using Nemerle.Xml;
using System.Xml;

public class MyFirstApp : Application
{
    override protected DoGet() : void
    {
        def doc = XmlDocument();
        doc.Load("my_first_app.xml");
        this.FormTemplate = Some (XmlTemplate(doc));
    }
}
    </pre></td></tr></table>
    <br/>
    Save it as "my_first_app.n" and type: <br/><br/>
    <b class="terminal">ncc -r:Sioux -tdll -o:MyFirstApp.dll my_first_app.n</b><br/>
    <b class="terminal">cp MyFirstApp.dll webapps/</b><br/><br/>

    in terminal. 
    </p>
  </section>


  <section title="3. Code explanation" anchor="explanation1">
    <p>
    Now, we'll explain our code:<br/><br/>
    <table cellpadding="0" cellspacing="0" class="code"><tr><td><pre class="code">
using Sioux;
    </pre></td></tr></table><br/>
    Let compiler know we're using Sioux namespace. It contains basic classes such as Application, Request etc.
    <br/><br/>
    <table cellpadding="0" cellspacing="0" class="code"><tr><td><pre class="code">
using Nemerle.Xml;
using System.Xml;
    </pre></td></tr></table><br/>
    We are operating on Xml documents in Sioux. <b>System.Xml</b> namespace contains XmlDocument class and 
    <b>Nemerle.Xml</b> namespace contains XmlTemplate class.
    <br/><br/>
    <table cellpadding="0" cellspacing="0" class="code"><tr><td><pre class="code">
public class MyFirstApp : Application
{
   ...
}
    </pre></td></tr></table><br/>
    Every Sioux application is a subclass of Sioux.Application class.    
    <br/><br/>
    <table cellpadding="0" cellspacing="0" class="code"><tr><td><pre class="code">
override protected DoGet() : void
{
   ...
}
    </pre></td></tr></table><br/>
    Sioux application handles GET and POST requests. If we want to handle GET request we have to override <b>DoGet()</b> method.
    <br/><br/>
    <table cellpadding="0" cellspacing="0" class="code"><tr><td><pre class="code">
def doc = XmlDocument();
doc.Load("/my_first_app.xml");
this.FormTemplate = Some (XmlTemplate(doc));
    </pre></td></tr></table><br/>
    If we want to display <b class="terminal">my_first_app.xml</b> we have to load it, create XmlTemplate object and tell Sioux 
    that it is our FormTemplate. FormTemplate is a field in Sioux.Application object, which contains XmlTemplate object that is
    displayed when our app is handling request.

    </p>
  </section>


  <section title="4. XML file" anchor="file">
    <p>
    All we have to do now is to write <b class="terminal">my_first_app.xml</b>. Here's the code:
    <br/><br/>
    <table cellpadding="0" cellspacing="0" class="code"><tr><td><pre class="code">
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;My first Sioux application&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;
This is my first Sioux application
&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
    </pre></td></tr></table><br/>
    Assuming that Sioux is running, open your browser and enter:<br/><br/>
    <b class="terminal">http://localhost/webapp/MyFirstApp/</b>
    </p>
  </section>


  <section title="5. Second example" anchor="second_example">
    <p>
    Let's assume that we have two XML files: <b class="terminal">file1.xml</b> and <b class="terminal">file2.xml</b> and we want to use
    them both in our application.<br/><br/>
    <table cellpadding="0" cellspacing="0" class="code"><tr><td><pre class="code">
&lt;!-- FILE1.XML --&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;First file&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;
This is file1.xml
&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
    </pre></td>
    <td><pre class="code">
&lt;!-- FILE2.XML --&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Second file&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;
This is file2.xml 
&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
    </pre></td>

</tr></table><br/>
   Let's write code:<br/><br/>
    <table cellpadding="0" cellspacing="0" class="code"><tr><td><pre class="code">
using Sioux;
using Nemerle.Xml;
using System.Xml;

public class SecondApp : Application
{
    override protected DoGet() : void
    {
        def doc = XmlDocument();
	match(PageName)
	{
	    | "/file2.xml" => doc.Load("file2.xml");
	    | _ => doc.Load("file1.xml");
	}
        
        this.FormTemplate = Some (XmlTemplate(doc));
    }
}
    </pre></td></tr></table><br/><br/>
    Save it as "second_app.n" and type: <br/><br/>
    <b class="terminal">ncc -r:Sioux -tdll -o:SecondApp.dll second_app.n</b><br/>
    <b class="terminal">cp SecondApp.dll webapps/</b><br/><br/>

    in terminal. To run type:<br/><br/>
    <b class="terminal">http://localhost/webapp/MyFirstApp/</b>
    </p>
  </section>


  <section title="6. More of second example" anchor="explanation2">
    <p>
    There is one part of code different than in  first example:<br/><br/>
       <table cellpadding="0" cellspacing="0" class="code"><tr><td><pre class="code">
match(PageName)
{
    | "/file2.xml" => doc.Load("file2.xml");
    | _ => doc.Load("file1.xml");
}
    </pre></td></tr></table><br/><br/>
    PageName field in instance of Application class is a part of request url. It is a substring of request url, beginning
    right after application name.<br/>
    If we type <br/><br/><b class="terminal">http://localhost/webapp/SecondApp/file2.xml</b><br/> <br/>PageName field will be "/file2.xml",
    when we type <br/><br/><b class="terminal">http://localhost/webapp/SecondApp/</b><br/> <br/>PageName will be "/". <br/>
    Finally, if we type <br/><br/> <b class="terminal">http://localhost/webapp/SecondApp/file2.xml</b> <br/><br/>our application will 
    display file2.xml, if we type <br/><br/><b class="terminal">http://localhost/webapp/SecondApp/file1.xml</b> <br/><br/>our application 
    will display file1.xml.
    </p>
  </section>

</page>