using System;
using System.Xml.Linq;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

[Record]
public variant Tag
{
  | Text  { style : string; format : Format; text : string; }
  | P     {
            style : string; content : list[Tag];
            
            public ReplaceContent(newContent : list[Tag]) : Tag
            {
              Tag.P(_attrs, StartPos, EndPos, style, newContent)
            }
            
            public new ToXml() : XElement { base.ToXml() :> XElement }
            
            public ToPlainText() : string { ToXml().Value }
          }
  
  public this() { }
  
  mutable _attrs : Hashtable[string, string];
  
  #region Properties
  
  public Attrs[key : string] : string
  {
    get { if (_attrs == null) null else _attrs[key] }
    
    set
    {
      when (_attrs == null)
        _attrs = Hashtable();

      _attrs[key] = value;
    }
  }
  
  public StartPos : int { get; set; }
  public EndPos   : int { get; set; }
  public Length   : int { get { EndPos - StartPos } }
  
  public HasAttrs : bool { get { _attrs != null && _attrs.Count > 0 } }
  public HasAttr(key : string) : bool { _attrs != null && _attrs.ContainsKey(key) }
  
  #endregion
  
  static Formats : array[Format] = 
    array[Format.Superscript, Format.Subscript, Format.Bold, Format.Italic, Format.Underline];
  
  public ToXml() : XObject
  {
    def formatToTag(format : Format) : string
    {
      | Bold        => "B"
      | Italic      => "I"
      | Underline   => "U"
      | Superscript => "SUP"
      | Subscript   => "SUB"
      | _           => assert(false)
    }

    def mekeElems(format : Format, tagName : string, text : string) : XObject
    {
      mutable cur = XText(text);
      
      foreach (f in Formats)
        when (format %&& f)
          cur = XElement(formatToTag(format & f), cur);

      if (tagName == "") cur else XElement(tagName.ToUpper(), cur);
    }

    def attrs = if (HasAttrs) _attrs.KeyValuePairs.MapToArray((k, v) => XAttribute(XName.Get(k), v)) 
                else array(0);
                
    def tag = match (this)
    {
      | Text(name, format, text) => mekeElems(format, name, text)
      | P(name, content) => XElement(XName.Get(name.ToUpper()), content.MapToArray(x => x.ToXml())) 
    };
    
    match (tag)
    {
      | tag is XElement when HasAttrs => tag.Add(attrs);
      | _ => ()
    }
    
    tag
  }
  
  #region object  Members
  
  public override ToString() : string
  {
    ToXml().ToString()
  }
  
  #endregion
}
