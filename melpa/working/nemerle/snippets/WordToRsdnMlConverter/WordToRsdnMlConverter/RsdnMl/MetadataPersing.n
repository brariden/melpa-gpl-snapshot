using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using System.Collections.Generic;

partial class RsdnMl
{
  static _rxParseSubPart : Regex = Regex(@"(.*?):\s*(.*)\s*", RegexOptions.Compiled);
  
  _hendlers : Hashtable[string, (string * string * Tag.P -> XElement) * string];

  static _personHendlers : Hashtable[string, string] = Hashtable(
    //     Имя поля                     Имя атрибута ("" - использовать значение тега)
    array[("ФИО",                       ""                   ),
          ("E-Mail",                    "e-mail"             ),
          ("Номер профиля на rsdn.ru",  "rsdn-profile"       ),
          ("Телефон",                   "phone"              ),
          ("Адрес",                     "address"            ),
          ("Место работы",              "place-of-employment"),
          ("Должность",                 "job"                ),
          ("Место учебы",               "place-of-study"     ),
          ("Научная степень",           "scientific-degree"  ),
          ("Научное звание",            "scientific-rank"    ),
          ("Уровень сложности",         "difficulty"         ),
          ("Требуется",                 "requirements"       ),
          ]);
          
  static ParsePartStr(prefix : string, p : Tag.P) : string
  {
    def part = p.ToPlainText();
    assert2(part.StartsWith(prefix, StringComparison.InvariantCultureIgnoreCase));
    assert2(part[prefix.Length] == ':');
    part.Substring(prefix.Length + 1).Trim()
  }
  
  static GetParts(metadata : string) : array[string]
  {
    def all   = metadata + ";";
    def parts = all.Split(array[';'], StringSplitOptions.RemoveEmptyEntries)
                   .MapToArray(x => x.TrimStart());
    parts
  }
  
  ParseCopyright(prefix : string, tagName : string, p : Tag.P) : XElement
  {
    def possibleValues = "auditoptim, mag или new_mag";
    def metadata = ParsePartStr(prefix, p);
    def parts = GetParts(metadata).NToList();
    def elem = XElement(tagName);
    def error() { Error($<#Строка метаданных "Copyright" может содержать только поля "Источник" (со значениями: $possibleValues) и "№" содержащий номер издания.#>, p); }
    
    match (parts)
    {
      | [p1] when SplitPrefix(p1)[0] == "Источник" with p2="№: не задан"
      | [p1, p2] => 
        def (prefix1, content1) = SplitPrefix(p1);
        def (prefix2, content2) = SplitPrefix(p2);
        
        if (prefix1 == "Источник" && prefix2 == "№")
        {
          match (content1)
          {
            | "auditoptim"      => ()
            | "mag" | "new_mag" => 
              when (content2 == "не задан")
                Error(<#Не задано поле "№".#>, p);
            
            | _ => Error($<#Обнаружено неверное значение "$content1" в поле "Источник" строки "Copyright". Допустимые значения: $possibleValues.#>, p);
          }
          elem.Add(XAttribute("source", content1));
          elem.Add(XAttribute("num",    content2));
        }
        else error()
        
      | [_] => elem.Value = metadata;
      | _ => error()
    }
    
    elem
  }
  
  ParseSource(prefix : string, tagName : string, p : Tag.P) : XElement
  {
    def metadata = ParsePartStr(prefix, p);
    def parts = GetParts(metadata);
    def elem = XElement(tagName);
    
    if (parts.Length == 1 && SplitPrefix(parts[0])[1] == "") // без тегов
      elem.Value = parts[0];
    else
    {
      mutable fieldCount;
                     
      foreach (part in parts)
      {
        match (SplitPrefix(part))
        {
          | ("Заголовок", value) => fieldCount +=    1; elem.Value = value;
          | ("Url",       value) => fieldCount +=   10; elem.Add(XAttribute("href", value));
          | (field, _)           => fieldCount += 1000; Error($<#Неверное имя поля "$field"#>, p);
        }
      }
      
      when (fieldCount != 11)
        Error($<#Метаданные типа "$prefix" должны содержать два поля "Заголовок" и "Url" разделенные точкой а запятой! Например:
  Заголовок: RSDN Magazine #3-2009; Url: http://rsdn.ru/mag/main.htm#>, p);
    }
    
    elem
  }
  
  ParseCover(prefix : string, tagName : string, p : Tag.P) : XElement
  {
    XElement(tagName, XAttribute("src", ParsePartStr(prefix, p)))
  }
  
  static ParsePart(prefix : string, tagName : string, p : Tag.P) : XElement
  {
    XElement(tagName, ParsePartStr(prefix, p))
  }
  
  ParseAuthor(prefix : string, tagName : string, p : Tag.P) : XElement
  {
    def metadata = ParsePartStr(prefix, p);
    def parts = GetParts(metadata);
    def elem = XElement(tagName);
                   
    foreach (part in parts)
    {
      def (prefix, value) = SplitPrefix(part);
      mutable attrName;
      
      if (_personHendlers.TryGetValue(prefix, out attrName))
      {
        if (attrName == "")
          elem.Add(value);
        else
          elem.Add(XAttribute(attrName, value));
      }
      else if (prefix.Trim() == "" && part.Trim() == "")
        Error(<#Метаданные по человеку содержат пустое вхождение (удалите точку с запятой, если она лишняя)!#>, p);
      else if (prefix.Trim() == "")
        Error($<#Метаданные по человеку содержат нераспознанное вхождение "$part"!"#>, p);
      else
        Error($<#Префикс "$prefix" не найден!"#>, p);
    }
    
    elem
  }
  
  ParseMetadata(metadata : list[Tag.P]) : array[XElement]
  {
    def elems = List();
                        
    foreach (p in metadata)
    {
      def part = p.ToPlainText();
      def prefix = ParsePrefix(part);
      mutable info;
      
      when (_hendlers.TryGetValue(prefix, out info))
      {
        def (func, tagName) = info;
        def elem = func(prefix, tagName, p);
        
        CheckMetaElement(elem, p);
        elems.Add(elem);
      }
    }
      
    elems.NToArray()
  }
  
  CheckMetaElement(elem : XElement, p : Tag) : void
  {
    def isNoAttr(attrName)  { elem.Attribute(attrName) == null }
    def isAttrSet(attrName) { elem.Attribute(attrName) != null }
    def isAuthor = elem.Name.LocalName == "AUTHOR";
  
    match (elem.Name.LocalName)
    {
      | "AUTHOR" | "TRANSLATOR" | "CONTRIBUTOR" | "SOURCE" =>
        if (isAttrSet("rsdn-profile"))
          elem.Add(XAttribute("href", $<#http://www.rsdn.ru/Users/$(elem.Attribute("rsdn-profile").Value).aspx#>));
        else when (isAttrSet("e-mail"))
          elem.Add(XAttribute("href", $<#mailto:$(elem.Attribute("e-mail").Value)#>));

        when (isAuthor && isNoAttr("e-mail"))
          Error("Описание автора обязано содержать E-Mail.", p);
          
        when (isAuthor && isNoAttr("rsdn-profile"))
          Error("Описание автора обязано содержать номер профиля пользователя на rsdn.ru.", p);
          
        when (isAuthor && isNoAttr("place-of-employment") && isNoAttr("place-of-study"))
          Error("Описание автора обязано содержать информацию о месте работы и/или месте учебы автора.", p);
          
        when (isAuthor && (elem.Value ?? "").Trim().Length == 0)
          Error("Описание автора обязано содержать ФИО (имя фамилию и отчество автора в именительном падеже).", p);

      | _ => ()
    }
  }
  
  static SplitPrefix(str : string) : string * string
  {
    def m = _rxParseSubPart.Match(str);
    
    if (m.Success) (Normalize(m.Groups[1].Value), m.Groups[2].Value)
    else           ("", "")
  }
  
  static ParsePrefix(str : string) : string
  {
    def index = str.IndexOf(':');
    if (index <= 0) ""
    else Normalize(str.Substring(0, index));
  }

  static Normalize(str : string) : string
  {
    def removeUnnecessarySpaces(str : string) : string
    {
      def len = str.Length;
      def newStr = str.Replace("  ", " ");
      if (len == newStr.Length) newStr
      else                      removeUnnecessarySpaces(newStr)
    }

    removeUnnecessarySpaces(str.Replace('\u00A0', ' '));
  }

  ReadTableWithArticleMetadata(parags : list[Tag.P]) : list[Tag.P] * list[Tag.P]
  {
    match (parags)
    {
      | Tag.P("TABLE", rows) :: tail => 
        mutable metadata = [];
        
        foreach (tr in rows)
        {
          | Tag.P("tr", [Tag.P(_, ps)]) => 
            
            foreach (p is Tag.P in ps)
              metadata ::= p;
          
          | _ =>
            Error("В таблице содержащей метаданные (идущей непосредственно за заголовками) должна быть одна колонка.", tr);
            return (parags, metadata);
        }
             
        (tail, metadata)
        
      | x :: _ => 
        Error("Отсуствует таблица содержащая метаданные статьи! (она должна идти сразу за названием статьи)", x);
        (parags, [])
        
      | _ => 
        Error("Или я лючу, или вы забыли хоть что-то написать в статье!", 0);
        (parags, [])
    }
  }
}
