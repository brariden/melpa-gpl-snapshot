using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Windows.Forms;

using Nemerle.Compiler;
using Nemerle.Compiler.NamespaceTree.TypeInfoCache;
using Nemerle.Completion2;

namespace Nemerle.Compiler.Utils
{
  public class AstBrowserForm : Form
  {
    public this(namespaceTree : NamespaceTree.Node)
    {
      def FillTree(name, rootNode)
      {
        def name = name + match (rootNode.Value)
        {
        | No                 => " (No)"
        | Cached             => " (int type)"// { tycon : TypeInfo; }
        | CachedAmbiguous    => " (int types)"// { elems : list [TypeInfo] }
        | NotLoaded          => " (ext type)"// { e : ExternalType; }
        | NotLoadedList      => " (ext types)"// { elems : list [ExternalType] }        
        | MacroCall          => " (macro)"// { m : IMacro; }
        | NamespaceReference => " (namespace)"
        };

        def treeNode = if (rootNode.Children is null)
          TreeNode(name);
        else
        {
          def nodes = List();

          foreach ((name, node) in rootNode.Children.KeyValuePairs)
            nodes.Add(FillTree(name, node));

          TreeNode(name, nodes.ToArray());
        }

        treeNode.Tag = rootNode.Value;
        //Trace.WriteLine(treeNode.Tag is null);
        treeNode
      }

      _namespaceTree = namespaceTree;

      StartPosition = FormStartPosition.CenterParent;
      def size = 700;
      Size = Size(size, size);

      def spliter = SplitContainer();
      spliter.Dock = DockStyle.Fill;
      spliter.Parent = this;
      spliter.SplitterDistance = size / 2;
      
      def tree = TreeView();
      tree.Dock = DockStyle.Fill;
      tree.Parent = spliter.Panel1;
      ignore(tree.Nodes.Add(FillTree(namespaceTree.GetDisplayName(), namespaceTree)));

      def propDrid = PropertyGrid();
      propDrid.Dock = DockStyle.Fill;
      propDrid.Parent = spliter.Panel2;
      _propDrid = propDrid;

      //tree.AfterSelect += (_, e) => propDrid.SelectedObject = e.Node.Tag;
      tree.AfterSelect += xxx;
    }

    mutable _propDrid : PropertyGrid;

    xxx(_ : object, e : TreeViewEventArgs) : void 
    {
      _propDrid.SelectedObject = e.Node.Tag
    }

    _namespaceTree : NamespaceTree.Node;
  }
}
