using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Surround;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    public BeginMergeCodeCompileUnit(codeCompileUnit : CodeCompileUnit) : MergeCodeCompileUnitAsyncRequest
    {
      def request = MergeCodeCompileUnitAsyncRequest(this, codeCompileUnit, MergeCodeCompileUnit);
      AsyncWorker.AddWork(request);
      request
    }

    public MergeCodeCompileUnit(codeCompileUnit : CodeCompileUnit) : FormChanges
    {
      def request = BeginMergeCodeCompileUnit(codeCompileUnit);
      _ = request.AsyncWaitHandle.WaitOne();
      
      when (request.Stop)
        assert(false);
        
      request.MergeInfo
    }

    /// Run by AsyncWorker thread!
    private MergeCodeCompileUnit(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();
      
      surroundwith (currentAsyncRequest)
      try
      {

        when (request.Stop)
          return;
        
        if (IsBuildTypesTreeInProgress)
          AsyncWorker.AddWork(request);
        else
        {
          def project = this.Project;
          def req         = request :> MergeCodeCompileUnitAsyncRequest;

          if (project == null)
          {
            _ = BeginBuildTypesTree();
            AsyncWorker.AddWork(request);
          }
          else
          {/*
            def sourceInfos = req.CodeCompileUnit.UserData["NemerleSources"] :> List[string * int * int];
            mutable sourceChanged = false;
            
            foreach ((_, fileVertion, fileIndex) in sourceInfos)
            {
              def source = GetSource(fileIndex);
              
              when (fileVertion != source.FileIndex)
              {
                sourceChanged = true;
                _ = BeginUpdateCompileUnit(source);
              }
            }
            
            if (sourceChanged)
              AsyncWorker.AddWork(request);
            else
            */
            {
              req.MergeInfo = MakeMargeInfoCodeCompileUnit(req.CodeCompileUnit);

              req.MarkAsCompleted();
            }
          }
        }

        //Debug.WriteLine($"UpdateCompileUnit 6 $(timer.Elapsed)"); timer.Reset(); timer.Start();
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The parse CompileUnit operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
      finally
      {
        //AsyncWorker.AddResponse(() => _callback.SetStatusText("Update compile unit is complete."));
        request.MarkAsCompleted();
      }
    }
    
    private MakeMargeInfoCodeCompileUnit(codeCompileUnit : CodeCompileUnit) : FormChanges
    {
      def project = this.Project;
      assert(project != null);
      assert(codeCompileUnit.Namespaces.Count >= 1);
      def ns = codeCompileUnit.Namespaces[0];
      assert(ns.Types.Count >= 1);
      def ty = ns.Types[0];
      def fileIndex = ty.UserData["FileIndex"] :> int;
      //def source = GetSource(fileIndex);
      def compileUnit = project.CompileUnits[fileIndex];// source.CompileUnit;
      def name = ty.UserData["Name"] :> string;
      def cls = compileUnit.TopDeclarations.First(td => td.Name == name) :> TopDeclaration.Class;
      //assert(cls != null);
      
      def domMethods = ty.Members.OfType.[CodeMemberMethod]().ToArray();
      
      def found = domMethods.Find(m => m.Name == "InitializeComponent" 
                                    && m.ReturnType.BaseType.Trim().StartsWith("System.Void", "void")
                                    && m.ReturnType.TypeArguments.Count == 0
                                    && m.Parameters.Count == 0);
      
      def makeFormChanges(domMethod, domCls, cls, domMethods) : FormChanges
      {
        def domFields = domCls.Members.OfType.[CodeMemberField]().ToArray();
        def members   = cls.TypeBuilder.AstParts.SelectMany(p => p.GetMembers()).ToArray();
        def fields    = members.OfType.[ClassMember.Field]().ToArray();
        def methods   = members.OfType.[ClassMember.Function]().ToArray();
        
        
        def insertedFields = domFields.Exclude(fields, (df, f) => df.Name == f.Name).ToArray();
        def delitedFields  = fields.Exclude(domFields, (f, df) => f.Name == df.Name).ToArray();
        
        def isInserted(domMethod : CodeMemberMethod) : bool * _
        {
          def found = domMethod.UserData["Member"] :> ClassMember.Function != null;
          def dm = domMethod;
          
          def cmpMethods(m : ClassMember.Function) : bool
          {
            // TODO: Implement depper comparition
            m.Name == dm.Name && m.header.Parameters.Length == dm.Parameters.Count
          }
          
          if (found)
            (false, domMethod)
          else match (methods.Filter(cmpMethods))
          {
            | [method] => 
              domMethod.UserData["Member"] = method;
              (false, domMethod)
            
            | _ => (true, domMethod)
          }
        }
        
        def insertedMethods = domMethods.MapLazyFiltered(isInserted).NToArray();

        def (statements, sourseInitializeComponent) = 
          if (domMethod == null)
            (null, null)
          else
            (domMethod.Statements, methods.FindObject(m => domMethod.Name == m.Name && m.header.Parameters.IsEmpty));
          
        FormChanges(statements, sourseInitializeComponent, insertedFields, delitedFields, insertedMethods, domCls, cls)
      }
      
      match (found)
      {
        | Some(method) => makeFormChanges(method, ty, cls, domMethods);
        | _            => makeFormChanges(null,   ty, cls, domMethods);
      }
    }
  } // end class Engine
} // end of Nemerle.Completion2 namespace
