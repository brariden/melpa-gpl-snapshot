using System;
using System.Diagnostics;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;
using Nemerle.Imperative;
using Nemerle.Utility;

using SCG = System.Collections.Generic;
using Typed = Nemerle.Compiler.Typedtree;

namespace Nemerle.Completion2
{
  [Record(Exclude = [_flags])]
  public class CompletionElem
  {
    static _comparer : SCG.IEqualityComparer[Elem] = ElemEqualityComparer();
    [Accessor]         _glyphType   : int;
    [Accessor]         _displayName : string;
    [Accessor]         _info        : string;
    [Accessor]         _overloads   : SCG.IList[Elem];
    [Accessor] mutable _flags       : CompletionElemFlags;

    public this(
      glyphType   : int, 
      displayName : string, 
      info        : string,
      overloads   : SCG.IList[Elem],
      flags       : CompletionElemFlags)
    {
      this(glyphType, displayName, info, overloads);
      _flags = flags;
    }

    public Description : string
    {
      get
      {
        def builder = Text.StringBuilder();

        when (Overloads != null)
          foreach (overload in Overloads)
          {
            | Local (value) => _ = builder.AppendLine(value.MakeHint());
            | Node(_, node) => _ = builder.AppendLine(node.MakeHint());
            | Member(member)
            | Overload (overload) with member = overload.Member =>
              _ = builder.AppendLine(member.ToString());

              def info = XmlDocReader.GetInfo(member, member.Location);

              when (info != null)
              {
                _ = builder.AppendLine(info.Summary);
                _ = builder.AppendLine();
              }

            | Overloads => assert(false);
            | Simple(_, info, _) => _ = builder.AppendLine(info);
          }

        builder.ToString().TrimEnd('\n', '\r')
      }
    }

    public override ToString() : string { _displayName }
    
    [OverrideObjectEquals]
    public Equals(other : CompletionElem) : bool
    {
      if (Overloads == null ||  Overloads.Count < 1)
      {
        if (other.Overloads == null ||  other.Overloads.Count < 1)
          DisplayName.Equals(other.DisplayName)
        else
          false
      }
      else
      {
        this.Overloads.Count == other.Overloads.Count
        && _comparer.Equals(this.Overloads[0], other.Overloads[0])
      }
    }
    
    public override GetHashCode() : int
    {
      if (Overloads == null || Overloads.Count < 1)
        DisplayName.GetHashCode()
      else
    	  _comparer.GetHashCode(Overloads[0])
    }
    
    public class ElemEqualityComparer : SCG.IEqualityComparer[Elem]
    {
      public Equals(x : Elem, y : Elem) : bool
      {
        match (x, y)
        {
          | (Simple(name_x, info_x, _), Simple(name_y, info_y, _)) => info_x.Equals(info_y) && name_x.Equals(name_y)
          | (Node(node=node_x),         Node(node=node_y))         => node_x.Equals(node_y)
          | (Local(value_x),            Local(value_y))            => value_x.Equals(value_y)
          | (Overloads(overloads_x),    Overloads(overloads_y))    => overloads_x.ForAll2(overloads_y, (o1, o2) => EqualsMembers(o1.Member, o2.Member))
          | (Overload(value_x),         Overload(value_y))         => EqualsMembers(value_x.Member, value_y.Member)
          | (Member(member_x),          Member(member_y))          => EqualsMembers(member_x, member_y)
          | _                                                      => false
        }
      }
      
      public GetHashCode(obj : Elem) : int
      {
        match (obj)
        {
          | Simple(info=info) => info.GetHashCode()
          | Node(node=node)   => node.GetHashCode()
          | Local(value)      => value.GetHashCode()
          | Overloads(overloads) =>
            mutable code = 0;
            foreach (overload in overloads)
              code ^= GetHashCode(overload.Member);
            code

          | Overload(overload) => GetHashCode(overload.Member)
          | Member(member)     => GetHashCode(member)
        }
      }
      
      static EqualsMembers(x : IMember, y : IMember) : bool
      {
        x.Name.Equals(y.Name) && x.DeclaringType?.Equals(y.DeclaringType)
      }

      static GetHashCode(member : IMember) : int
      {
        member.Name.GetHashCode() ^ member.DeclaringType?.GetHashCode()
      }
    }
  }
}
