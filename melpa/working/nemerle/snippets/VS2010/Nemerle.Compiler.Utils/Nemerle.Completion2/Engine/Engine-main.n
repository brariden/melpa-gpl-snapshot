using System;
using System.IO;
using System.Diagnostics;
using System.Linq;

using SCG = System.Collections.Generic;
using SR  = System.Reflection;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;

using Typed         = Nemerle.Compiler.Typedtree;
using TExpr         = Nemerle.Compiler.Typedtree.TExpr;
using LibRefManager = Nemerle.Completion2.Factories.IntelliSenseModeLibraryReferenceManager;
using Pair          = System.Collections.Generic.KeyValuePair;

namespace Nemerle.Completion2
{
  internal partial class Engine : ManagerClass, IIdeEngine
  {
    public event   TypedtreeCreated : EventHandler;

    public GetActiveEnv(fileIndex : int, line : int) : GlobalEnv * TypeBuilder * int * int
    {
#pragma warning disable 618 // Obsolete
      def project = RawProject;
#pragma warning restore 618

      if (project == null)  (null, null, -1, -1)
      else                  project.GetActiveEnv(fileIndex, line)
    }

    public GetIdeSource(fileIndex : int) : IIdeSource implements IIdeEngine.GetSource { _callback.GetSource(fileIndex) }
    public override GetSource(fileIndex : int) : ISource { GetIdeSource(fileIndex) ?? base.GetSource(fileIndex) }
    public GetSources() : SCG.IEnumerable[IIdeSource] { _callback.GetSources() }

    public NotifySourceDeleted(fileIndex : int) : void
    {
      UnsubscribeSourceChangedHandler(fileIndex);
    }

    public IsExtensionRegistered(fileExtension : string) : bool
    {
      Parser.IsExtensionRegistered(fileExtension)
    }

    public Close() : void
    {
      AsyncWorker.AddWork(AsyncRequest(AsyncRequestType.CloseProject, this, null, _ => ()));
    }

    // HACK: see usings
    public static VeryBigNumber = 1000000;
  } // end class Engine
} // end of Nemerle.Completion2 namespace
