using System;
using System.Diagnostics;
using System.IO;
using System.Xml;

using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Utils;
using Nemerle.Imperative;

using Nemerle.Completion2.Engine;

namespace Nemerle.Completion2
{
  public module XmlDocReader
  {
    private class XmlDocFile
    {
      private         _filePath  : string;
      private mutable _timeStamp : DateTime;
      private mutable _members   : Map[string, string] = Map();

      public this(filePath : string)
      {
        _filePath  = filePath;
        Load();
      }

      public GetMemberDoc(member : string) : string
      {
        when (File.GetLastWriteTime(_filePath) > _timeStamp)
          Load();

        match (_members.Find(member))
        {
        | Some(doc) => doc
        | None      => null
        }
      }

      private Load() : void
      {
        _timeStamp = File.GetLastWriteTime(_filePath);
        _members   = _members.Clear();

        using (rdr = XmlTextReader(_filePath))
        {
          do
          {
              when (rdr.NodeType == XmlNodeType.Element && rdr.LocalName == "member")
                _members = _members.Replace(rdr.GetAttribute("name"), rdr.ReadInnerXml());
          }
          while (rdr.Read());
        }
      }
    }

    private mutable _xmlDocCache : Map[string, XmlDocFile] = Map();

    private GetDocFile(asmFilePath : string) : XmlDocFile
    {
      match (_xmlDocCache.Find(asmFilePath))
      {
      | Some(docFile) => docFile;
      | None          =>
        def xmlFile = Environment.ExpandEnvironmentVariables(Path.ChangeExtension(asmFilePath, ".xml"));
        def docFile = 
          try
          {
            if (File.Exists(xmlFile))
              XmlDocFile(xmlFile);
            else
            {
              // Hack for .Net framework assemblies.
              // Some of them are loaded from the GAC, while their xml documentation stored in
              // the %SystemRoot%/Microsoft.Net/<version>/ folder.
              
              def runtimeDir = System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory();
              def altPath = Path.Combine(runtimeDir, Path.GetFileName(xmlFile));

              if (File.Exists(altPath))
                XmlDocFile(altPath);
              else
              {
                def altPath = Path.Combine(Path.Combine(runtimeDir, "en"), Path.GetFileName(xmlFile));
              
                if (File.Exists(altPath))
                  XmlDocFile(altPath);
                else
                  null;
              }
            }
          }
          catch
          {
          // Eat exceptions related to bad file format or problems with access to.
          //
          | e is XmlException              => Debug.WriteLine(e.ToString(), typeof(XmlDocReader).Name); null;
          | e is InvalidOperationException => Debug.WriteLine(e.ToString(), typeof(XmlDocReader).Name); null;
          }
        _xmlDocCache = _xmlDocCache.Add(asmFilePath, docFile);

        docFile;
      }
    }

    public GetContent(member : IMember, location : Location) : string
    {
      match (XmlDoc.GetKey(member))
      {
      | null => null;
      | key  => GetContent(key, location);
      }
    }

    public GetContent(ns : NamespaceTree.Node, location : Location) : string
    {
      GetContent("N:" + ns.GetDisplayName(), location);
    }

    public GetContent(key : string, location : Location) : string
    {
      if (string.IsNullOrEmpty(location.File) || location.EndLine > 0)
        null;
      else
      {
        def docFile = GetDocFile(location.File);

        if (docFile == null)
          null;
        else
          docFile.GetMemberDoc(key);
      }
    }

    public GetInfo(member : IMember, location : Location) : XmlDocInfo
    {
      match (XmlDoc.GetKey(member))
      {
      | null => null;
      | key  => GetInfo(key, location);
      }
    }

    public GetInfo(ns : NamespaceTree.Node, location : Location) : XmlDocInfo
    {
      GetInfo("N:" + ns.GetDisplayName(), location);
    }

    public GetInfo(key : string, location : Location) : XmlDocInfo
    {
      def content = GetContent(key, location);

      if (content == null)
        null
      else
      {
        def info = XmlDocInfo();
        using (reader = XmlReader.Create(StringReader("<root>" + content + "</root>")))
        {
          def getText() 
          {
            if (reader.Read())
            {
              match (reader.NodeType)
              {
              | XmlNodeType.Text       => reader.Value + getText()
              | XmlNodeType.EndElement => string.Empty
              | XmlNodeType.Element    =>

                def attr = match (reader.Name)
                {
                | "see"      when reader.MoveToAttribute("cref") =>
                    reader.Value.Substring(2);
                | "see"      when reader.MoveToAttribute("langword")
                | "paramref" when reader.MoveToAttribute("name") =>
                    reader.Value;

                | _ => string.Empty;
                }
                attr + getText();

              | _ => getText();
              }
            }
            else
              string.Empty;
          }

          while (reader.Read())
          {
            match (reader.NodeType)
            {
            | XmlNodeType.Element    when reader.Name == "summary"   => info.Summary = getText().Trim()
            | XmlNodeType.Element    when reader.Name == "returns"   => info.Returns = getText().Trim()
            | XmlNodeType.Element    when reader.Name == "param" && reader.MoveToAttribute("name") =>
                info.Params ::= (reader.Value, getText().Trim());
            | XmlNodeType.Element    when reader.Name == "value" =>
                info.Params ::= ("value", getText().Trim());
            | XmlNodeType.Element    when reader.Name == "typeparam" && reader.MoveToAttribute("name") =>
                info.TypeParams ::= (reader.Value, getText().Trim());
            | XmlNodeType.Element    when reader.Name == "exception" && reader.MoveToAttribute("cref") =>
                info.Exceptions ::= (reader.Value.Substring(2), getText().Trim());
            | _ => ()
            }
          }
        }

        info.Params     = info.Params.    Rev();
        info.TypeParams = info.TypeParams.Rev();
        info.Exceptions = info.Exceptions.Rev();

        info;
      }
    }
  }
}
