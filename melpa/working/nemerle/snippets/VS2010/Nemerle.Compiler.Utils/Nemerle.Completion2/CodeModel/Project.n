using System;
using System.Collections.Generic;
using System.Diagnostics;

using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.Utils;
using Nemerle.Collections;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Compiler.NemerleModifiers;

using SCG = System.Collections.Generic;
using SR  = System.Reflection;

namespace Nemerle.Completion2
{
  //public delegate AddHiddenRegion(location : Location, text : string, isExpanded : bool) : void;
  public delegate AddError       (compilerMessage : CompilerMessage) : bool;

  public partial class Project
  {
    internal this(engine : Engine, compileUnits : CompileUnitCollection, 
                 namespaceTree : NamespaceTree.Node, 
                 errors : list[CompilerMessage], callback : IIdeProject)
    {
      EngineEx        = engine;
      _compileUnits   = compileUnits;
      _namespaceTree  = namespaceTree;
      _errors         = errors;
      _callback       = callback;
    }

    public Engine : IIdeEngine
    {
      get { EngineEx }
    }

    internal EngineEx : Engine
    {
      mutable _engine : Engine;

      get { ManagerClass.Instance = _engine; _engine; }
      set { _engine = value }
    }

    [Accessor] _compileUnits  : CompileUnitCollection;
    [Accessor] _namespaceTree : NamespaceTree.Node;
    [Accessor] _errors        : list[CompilerMessage];
               _callback      : IIdeProject;
    
    static _autoModule = "_N_AutoModule";

    public GetActiveNamespaces(fileIndex : int, line : int, column : int) : list[Decl.Namespace]
    {
      def findNamespaces(declaration) : list[Decl.Namespace]
      {
        | @namespace is Decl.Namespace =>
          def namespaces =
            match (@namespace.Decls.Find(declaration => declaration.Location.Contains(line, column)))
            {
              | Some(declaration) => findNamespaces(declaration);
              | None => [];
            }
          @namespace :: namespaces
        | _ => []
      }

      findNamespaces(_compileUnits.GetTopNamespace(fileIndex))
    }

    /// Finds the innermost top level construction (namespace, class,
    /// using, attribute) located at fileIndex, line, and col.
    public GetActiveDecl(fileIndex : int, line : int, col : int) : Decl
    {
      def find_decl(decl : Decl)
      {
        def find(decls : list[Decl])
        {
          | decl2 :: tail =>
            match (find_decl(decl2))
            {
              | Decl.None => find(tail)
              | x         => x
            }
          | [] => decl
        }

        match (decl)
        {
          | Decl.Namespace as ns2 when ns2.Location.Contains(line, col) => find(ns2.Decls)
          | Decl.Using     as usn when usn.Location.Contains(line, col) => decl
          | Decl.Type(ast) when ast.Location.Contains(fileIndex, line, col) => decl
          | _ => Decl.None(Location.Default)
        }
      }

      def topNamespace = _compileUnits.GetTopNamespace(fileIndex);
      find_decl(topNamespace)
    }

    public GetActiveEnv(fileIndex : int, line : int) : GlobalEnv * TypeBuilder * int * int
    {
      mutable env;
      mutable typeBuilder;
      mutable start = 0;
      mutable end   = int.MaxValue;

      def check(loc, doFind)
      {
        if (line >= loc.Line)
        {
          if (line <= loc.EndLine)
          {
            start = loc.Line;
            end   = loc.EndLine;

            doFind();

            true;
          }
          else
          {
            start = loc.EndLine + 1;
            false;
          }
        }
        else
        {
          end = loc.Line - 1;
          false;
        }
      }

      def loop(decl : Decl)
      {
        | Namespace as ns => 

          check(ns.Location, () =>
          {
            env = ns.InsideEnv;

            foreach (d in ns.Decls)
              when (loop(d))
                break;
          });

        | Type(ast) => 
            def checkTopDeclaration(ast)
            {
              match (ast.TryGetEnv())
              {
                | Some(curEnv) =>
                  if (check(ast.Location, fun() { env = curEnv; }))
                    match (ast : TopDeclaration)
                    {
                      | Class        (decls   = decls)
                      | Interface    (methods = decls)
                      | Variant      (decls   = decls)
                      | VariantOption(decls   = decls) =>
                        foreach (ClassMember.TypeDeclaration(td) in decls)
                          _ = checkTopDeclaration(td);
                        true
                          
                      | _ => true
                    }
                  else false
                  
                | _ => false
              }
            }
            
            checkTopDeclaration(ast)

        | Using as us   => 

          when (us.NameLocations.Length > 0 && line >= us.NameLocations.Head.Line)
          {
            start = us.Location.Line;
            env   = us.AfterEnv;
          }

          false

        | _ => false
      }

      def decl = _compileUnits.GetTopNamespace(fileIndex);

      _ = loop(decl);

      (env, typeBuilder, start, end)
    }

    /// Finds the innermost top level construction (namespace, class,
    /// using, attribute) located at filePath, line, and col.
    public GetActiveDecl([NotNull] filePath : string, line : int, col : int) : Decl
    {
      GetActiveDecl(Location.GetFileIndex(filePath), line, col)
    }

    public GetQuickTipInfo(fileIndex : int, line : int, col : int) : QuickTipInfo
    {
      def decl      = GetActiveDecl(fileIndex, line, col);

      match (decl)
      {
      | Using as us => this.EngineEx.GetUsingQuickTip(us, fileIndex, line, col)
      | Type  as tp => GetTypeQuickTip (tp, fileIndex, line, col, EngineEx);
      | _           => null
      }
    }

    public GetGotoInfo(member : SR.MemberInfo) : array [GotoInfo]
    {
      //TODO: VladD2: Переписать этот код так чтобы оно работал с отпарсеным исходником (не требовал проекта)!

      def isType   = member is System.Type && Attribute.GetCustomAttribute(member, typeof(Nemerle.Internal.VariantOptionAttribute)) == null;
      def ty       = if (isType) member :> System.Type else member.DeclaringType;
      def fullName = ty.FullName.Split('`')[0];

      def typeBuilder = Array.Find(NamespaceTree.GetTypeBuilders(), p => p.FullName == fullName);
      if (typeBuilder != null)
      {
        def lst = 
          if (isType)
            typeBuilder.AstParts.Map(p => GotoInfo(p.name.Location))
          else if (typeBuilder.LookupMemberAvailable)
            typeBuilder.GetMembers()      .Filter(m => m.Name == member.Name).Map(GotoInfo);
          else
            typeBuilder.GetParsedMembers().Filter(m => m.Name == member.Name).Map(GotoInfo);

        lst.ToArray()
      }
      else
      {
        Debug.WriteLine($"Type builder $fullName not found");
        null
      }
    }


//    public GetTypes(fileIndex : int) : List[TypeBuilder]
//    {
//      def lst = List();
//
//      def find(decl)
//      {
//				| Decl.Type(ast)    =>
//
//					lst.Add(ast.TypeBuilder);
//					
//					match (ast : TopDeclaration)
//					{
//						| Class        (decls   = decls)
//						| Interface    (methods = decls)
//						| Variant      (decls   = decls)
//						| VariantOption(decls   = decls) =>
//							foreach (ClassMember.TypeDeclaration(td) in decls)
//								find(td);
//								
//						| _ => ()
//					}
//
//				| Namespace as nm =>
//					foreach (d in nm.Decls)
//						find(d);
//				| _               => ()
//      }
//
//      find(_compileUnits.GetTopNamespace(fileIndex));
//
//      lst
//    }

    public GetMethodTip([NotNull] source : IIdeSource, line : int, col : int) : MethodTipInfo
    {
      //def member = source.CompileUnit.FindMember(line, col);
      //
      //match (member)
      //{
      //  | Some(ClassMember.Function as f)           when f.BodyInnerLocation.Contains(line, col)
      //  | Some(ClassMember.Property(get = Some(f))) when f.BodyInnerLocation.Contains(line, col) 
      //  | Some(ClassMember.Property(set = Some(f))) when f.BodyInnerLocation.Contains(line, col) 
      //    => null
      //    
      //  | _ => null
      //}
      def fileIndex = source.FileIndex;
      def decl      = GetActiveDecl(fileIndex, line, col);
      
      match (decl)
      {
      | Type as tp => GetMethodTip(tp, fileIndex, line, col, source);
      | None       => throw System.Exception()
      | _          => null
      }
    }

    _debug(obj : object) : void
    {
      when (obj != null)
        _ = obj.ToString();
    }

    /// Find TypeBuilder by it full qualified name (include outer classes)/
    /// namespacePath - list of namespace path.
    /// typeInfs - list of names with type parameters count of class and it
    ///            outer classes which it nested.
    public LookupTypeBuilder(
      namespacePath : list[string],
      typeInfs      : list[string * int]
    )
      : TypeBuilder // nullable
    {
      def nsTree = NamespaceTree;
      def fullName = namespacePath + [typeInfs.Head[0]];
      def typeInfo = nsTree.LookupType(fullName, typeInfs.Head[1]);
      match (typeInfo)
      {
        | Some(tb is TypeBuilder) =>
          def nesteds = typeInfs.Tail;
          
          if (nesteds.IsEmpty) tb
            else nesteds.FoldRight(tb, fun((name, tArgs) : string * int, obj : TypeBuilder) : TypeBuilder
          {
            Debug.Assert(obj.LookupMemberAvailable);
            match (obj.GetNestedTypes().Find(a : TypeInfo => a.Name == name && a.TyparmsCount == tArgs))
            {
              | Some(nestedTb is TypeBuilder) => nestedTb
              | _ => obj
            }
          });

        | _ => null
      }
    }
    
    public IsStructureOfCompileUnitChanged(source : IIdeSource) : bool
    {
      def unit1 = source.CompileUnit;
      
      when (unit1 == null)
        return false;
        
      def unit2TopNamespace = CompileUnits.GetTopNamespace(source.FileIndex);
      
      if (unit2TopNamespace == null)
        true
      else
      {
        def res1 = unit1.TopNamespace.Equals(unit2TopNamespace);
        !res1
      }
    }
  }
}
