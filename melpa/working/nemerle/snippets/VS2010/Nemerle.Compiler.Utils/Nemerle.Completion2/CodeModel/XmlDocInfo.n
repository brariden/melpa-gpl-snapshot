using System;

using Nemerle.Utility;

namespace Nemerle.Completion2
{
  public class XmlDocInfo
  {
    [Accessor(flags=WantSetter)] mutable _summary    : string;
    [Accessor(flags=WantSetter)] mutable _returns    : string;
    [Accessor(flags=WantSetter)] mutable _params     : list[string * string] = [];
    [Accessor(flags=WantSetter)] mutable _typeParams : list[string * string] = [];
    [Accessor(flags=WantSetter)] mutable _exceptions : list[string * string] = [];

    public GetText() : string
    {
      def appendParam(sb, (name, text))
      {
        sb
          .Append('\t')
          .Append(name)
          .Append(":\t")
          .Append(text)
      }

      def appendException(sb, (name, text))
      {
        sb
          .Append('\t')
          .Append(name)
          .Append(":\tWhen ")
          .Append(text)
      }

      NStringBuilder(256)
        .AppendUnless(string.IsNullOrEmpty(_summary), sb => sb
          .Append("Summary\n\t")
          .Append(_summary)
          .Append('\n'))
        .AppendUnless(string.IsNullOrEmpty(_returns), sb => sb
          .Append("Return Value:\n\t")
          .Append(_returns)
          .Append('\n'))
        .AppendUnless(_typeParams.IsEmpty, sb => sb
          .Append("Type parameters:\n")
          .AppendList(_typeParams, appendParam, "\n")
          .Append('\n'))
        .AppendUnless(_params.IsEmpty, sb => sb
          .Append("Parameters:\n")
          .AppendList(_params, appendParam, "\n")
          .Append('\n'))
        .AppendUnless(_exceptions.IsEmpty, sb => sb
          .Append("Exceptions:\n")
          .AppendList(_exceptions, appendException, "\n")
          .Append('\n'))
        .ToString();
    }
  }
}
