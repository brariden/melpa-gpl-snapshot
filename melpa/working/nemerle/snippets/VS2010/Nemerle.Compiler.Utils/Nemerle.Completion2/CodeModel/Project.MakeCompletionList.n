using System.Diagnostics;
using System.Linq;
using System.Reflection;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Extensions;
using Nemerle.Utility;
using SCG = System.Collections.Generic;

using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Utils;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    internal MakeCompletionList(
      result : CompletionResult,
      inExpr : bool = false,
      filter : Elem -> bool = null
    ) : NemerleCompletionResult
    {
      def overloadsMap = Hashtable.[string, SCG.List[Elem]]();
      def importCompletionList = SCG.List.[string * SCG.List[Elem]]();
      def completionList = SCG.List();
      def listCtor = SCG.List;


      def add(name, value)
      {
        unless (IsSpecialName(name))
        {
          if (IsImportCompletion)
            importCompletionList.Add(name, SCG.List(1) <- [ value ]);
          else
          {
            def overloads = overloadsMap.GetValue(name, listCtor);
            overloads.Add(value);
          }
        }
      }
      def makeName(member : IMember) : string
      {
        if (member.MemberKind == MemberTypes.Constructor)
          member.DeclaringType.Name
        else if (member.DeclaringType?.GetConstantObject() == member : object)
          member.DeclaringType.Name
        else
          member.Name;
      }
      def addMember(member : IMember)
      {
        def name = makeName(member);

        when (IsValid(name))
          add(name, Elem.Member(member))
      }
      def addOverload(overload : OverloadPossibility)
      {
        def name = makeName(overload.Member);

        when (IsValid(name))
          add(name, Elem.Overload(overload))
      }

      def elems = if (filter == null) result.Elems else result.Elems.Filter(filter);

      foreach (elem in elems)
      {
        | Member(member)                => addMember(member);
        | Local (value)                 => add(value.Name, elem);
        | Node (name, _)                => add(name, elem);
        | Overloads (values)            =>
          foreach (overload in values.Distinct())
            addOverload(overload);

        | Overload(overload)            => addOverload(overload);
        | Simple(name, info, glyphType) => completionList.Add(CompletionElem(glyphType, name, info, null));
      }

      foreach ((name, overloads) in if (IsImportCompletion) importCompletionList : Seq[_] else overloadsMap.KeyValuePairs)
      {
        assert(overloads.Count > 0);

        match (overloads[0] : Elem)
        {
          | Local (value) =>
            def value = value;
            def glyphType =
              match (value.ValKind)
              {
                | FunParm               => GlyphType.Local
                | Plain                 => GlyphType.Local
                | ExceptionValue        => GlyphType.Local
                | PatternVariable       => GlyphType.Local
                | Function              => GlyphType.Function
                | BlockReturn           => GlyphType.Block
                | ClosurisedThisPointer => GlyphType.Keyword
                | MacroRedirection      => GlyphType.Macro
              };

            completionList.Add(CompletionElem(glyphType :> int, value.Name, "", overloads));

          | Node(_, node) when node.FullName == ["System", "Void"] =>
            completionList.Add(CompletionElem(
              node.Value.GetGlyphIndex() :> int, "void", "", overloads));

          | Node(_, node) =>
            completionList.Add(CompletionElem(
              node.Value.GetGlyphIndex() :> int, name, "", overloads));

          | Member(member)
          | Overload (overload) with member = overload.Member =>
            completionList.Add(CompletionElem(member.GetGlyphIndex(), name, "", overloads));

          | Overloads                     => assert(false);
          | Simple(name, info, glyphType) => completionList.Add(CompletionElem(glyphType, name, info, null));
        }
      }

      when (inExpr && result.ObjectType == null)
      {
        def add(keyword)
        { completionList.Add(CompletionElem(GlyphType.Snippet :> int, keyword, "keyword", null)); }

        foreach (kw in _expressionKeywords.FilterLazy(_.StartsWithIgnoreCase(result.NamePrefix)))
          add(kw);
      }

      def completionList2 = if (IsImportCompletion) completionList.Distinct().ToArray() else completionList.ToArray();
      NemerleCompletionResult(completionList2, result.Env, result.IsMemeberComplation)
    }

    static IsValid(name : string) : bool
    {
      !IsPropertyAccessor(name) && !IsEventAccessor(name)
        && !IsOperator(name)
    }

    static IsPropertyAccessor(name : string) : bool
    {
      name.StartsWith("get_") || name.StartsWith("set_")
    }

    static IsEventAccessor(name : string) : bool
    {
      name.StartsWith("add_") || name.StartsWith("remove_")
    }

    static IsOperator(name : string) : bool
    {
      name.StartsWith("op_")
    }

    static IsSpecialName(name : string) : bool
    {
      name.StartsWith("value__") || name.StartsWith("_N_")
    }
  } // end class Project
} // end namespace
