using System;

using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;
using Nemerle.Imperative;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  public enum UsageType
  {
    | Definition
    | Usage
    | GeneratedDefinition
    | GeneratedUsage
    | ExternalDefinition
    | ExternalUsage
  }

  public class GotoInfo
  {
    [Nemerle.DesignPatterns.ProxyPublicMembers(Include = [FileIndex, Line, Column, EndLine, EndColumn])]
    [Accessor] _location      : Location;
    [Accessor] _memberInfo    : System.Reflection.MemberInfo;
    [Accessor] _member        : IMember;
    [Accessor] _usageType     : UsageType = UsageType.Definition;
    [Accessor] _macroEnvelope : TExpr.MacroEnvelope;
               _filePath      : string;

    public FilePath : string
    {
      get
      {
        if (_location.FileIndex > 0)
          _location.File
        else
          _filePath
      }
    }

    public GetLineOfCode(engine: IIdeEngine) : string
    {
      engine.GetSource(FileIndex).GetLine(Line)
    }

    public UsageTypeToString() : string
    {
      match (_usageType)
      {
        | Definition          => "def"
        | Usage               => "use"
        | GeneratedDefinition => "def-gen"
        | GeneratedUsage      => "use-gen"
        | ExternalDefinition  => "def-ext"
        | ExternalUsage       => "use-ext"
      }
    }

    public this(location : Location)
    {
      _location  = location;
    }

    public this(location : Location, usageType : UsageType)
    {
      _location = location;
      _usageType = usageType;
    }

    public this(member : IMember)
    {
      match (member)
      {
      | mb is MemberBuilder => this(mb.Ast.name.Location)
      | _                   => this(member.NameLocation)
      }

      _member = member;

      unless (HasLocation)
        _memberInfo = member.GetHandle();
    }

    public this(member : IMember, usageType : UsageType)
    {
      this(member);

      _usageType = usageType;
    }

    public this(value : ClassMember)
    {
      this(value.Location);
    }

    public this(value : ClassMember, usageType : UsageType)
    {
      this(value);

      _usageType = usageType;
    }

    public this(value : LocalValue)
    {
      this(value.NameLocation)
    }

    public this(value : LocalValue, usageType : UsageType)
    {
      this(value);

      _usageType = usageType;
    }

    public this (top : TopDeclaration)
    {
      this(top.name.Location);
    }

    public this(_fh : Typedtree.TFunHeader)
    {
    }

    public this(fp : Typedtree.TParameter)
    {
      this(fp.NameLocation);
    }

    public this(funHeader : Typedtree.TFunHeader, usageType : UsageType)
    {
      this(funHeader);

      _usageType = usageType;
    }

    public this(macroEnvelope : TExpr.MacroEnvelope)
    {
      _location       = macroEnvelope.the_macro.Location;
      _macroEnvelope  = macroEnvelope;

      def typeOfMacro = macroEnvelope.the_macro.GetType();

      _filePath       = typeOfMacro.Assembly.GetLocalPath();
      _memberInfo     = typeOfMacro;
    }

    public this(macroEnvelope : TExpr.MacroEnvelope, usageType : UsageType)
    {
      this(macroEnvelope);

      _usageType = usageType;
    }

    public this(filePath : string, location : Location)
    {
      this(location);

      _filePath = filePath;
    }

    public this(filePath : string, location : Location, usageType : UsageType)
    {
      this(filePath, location);

      _usageType = usageType;
    }

    public HasLocation : bool
    {
      get { !string.IsNullOrEmpty(FilePath) && _location.EndLine > 0 }
    }

    public override ToString() : string
    {
      $"$(if (_location != Location.Default) _location.ToString() else FilePath) ($(UsageTypeToString()))"
    }

    //VladD2: Определяя Equals ВСЕГДА определяфте GetHashCode!
    [OverrideObjectEquals]
    public Equals(goto : GotoInfo) : bool
    {
      Location == goto.Location && UsageType == goto.UsageType
    }
    
    public override GetHashCode() : int
    {
      this.Location.GetHashCode() ^ (this.UsageType :> int)
    }
  }
}
