using Nemerle.Compiler;
using Nemerle.Compiler.Utils;
using Nemerle.Extensions;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Completion2
{
  [Record]
  public variant Decl
  {
    | GlobalAttribute { }
    | Using
      {
                Name          : list[string];
        mutable NameLocations : list[Location];
                Alias         : string;
        mutable AliasLocation : Location;
                BeforeEnv     : GlobalEnv;
                AfterEnv      : GlobalEnv;
        
        public Equals(other : Using) : bool { other.Name.Equals(Name) && other.Alias == Alias }
      }
    | Namespace
      {
        mutable Decls                  : list[Decl];
                Name                   : list[string];
        mutable NameLocations          : list[Location]; // mutable need for Relocation algorithm
                OutsideEnv             : GlobalEnv;
                InsideEnv              : GlobalEnv;
        mutable HeaderLocation         : Location;
        mutable BodyOpenTokenLocation  : Location;
        mutable BodyCloseTokenLocation : Location;
        /// TopDeclaration-s of file. Exists only in top namespace.
                TopDeclarations        : list[TopDeclaration];

        /// The Location contains only body (without braces location)
        public BodyLocation  : Location
        {
          get
          {
            def loc = BodyOpenTokenLocation;
            def end = BodyCloseTokenLocation;
            if (end == Location.Default) loc // parsing of ns body failed!
            else Location(loc.FileIndex, loc.EndLine, loc.EndColumn, end.Line, end.Column)
          }
        }

        public Equals(other : Namespace) : bool
        {
          other.Name.Equals(Name) && other.Decls.ForAll2(Decls, (x, y) => x.Equals(y))
        }
      }
    | Type 
      {
        Ast              : TopDeclaration;
        
        public Equals(other : Type) : bool { other.Ast.Equals(Ast) }
      }
    | None
    
    public virtual Equals(other : Decl) : bool
    {
      match (other, this)
      {
        | (Using     as x1, Using     as x2) => x1.Equals(x2)
        | (Namespace as x1, Namespace as x2) => x1.Equals(x2)
        | (Type(x1),               Type(x2)) => Ast.EqualsStruct(x1, x2)
        | (GlobalAttribute, GlobalAttribute) => true
        | (None,                       None) => true
        | (null,                       null) => true
        | _                                  => false
      }
    }
    
    [Accessor (flags = WantSetter)]
    mutable _location : Location;
    
    public override ToString() : string
    {
      match (this)
      {
        | GlobalAttribute   => "<attribute>"
        | Using     as decl => "using " + decl.Name.ToString(".") + ";"
        | Namespace as decl => "namespace " + decl.Name.ToString(".") + " { ... }"
        | None              => "<none>"
        | Type(typeBuilder) => typeBuilder.ToString()
      }
    }

    /// Finds the innermost top level construction (namespace, class,
    /// using, attribute) located at line, and col.
    public FindDecl(line : int, col : int) : Decl
    {
      def find_decl(decl : Decl)
      {
        def find(decls : list[Decl])
        {
          | decl2 :: tail =>
            match (find_decl(decl2))
            {
              | Decl.None => find(tail)
              | x         => x
            }
          | [] => decl
        }

        match (decl)
        {
          | Decl.Namespace as ns2 when ns2.Location.Contains(line, col) => find(ns2.Decls)
          | Decl.Using     as usn when usn.Location.Contains(line, col) => decl
          | Decl.Type(ast)        when ast.Location.Contains(line, col) => decl
          | _                                                           => Decl.None(Location.Default)
        }
      }

      find_decl(this)
    }
  }
}
