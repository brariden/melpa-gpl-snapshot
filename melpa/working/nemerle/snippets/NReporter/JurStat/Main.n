using Nemerle.Assertions;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Utility;

using System;
using System.Math;
using System.Console;
using System.Xml.Linq;
using System.Linq;

module Program
{
  Main(args : array[string]) : void
  {
    when (args.Length != 1 || !IO.File.Exists(args[0]))
    {
      WriteLine("usage: JurStat.exe <path to jurnal spec>");
      return;
    }
    
    def spec = XElement.Load(args[0]);
    def price = spec.GetAsDouble(@"Properties\Товар\Цена");
    
    def qtys = spec.Element("Items").Elements().Map(
      elem => (double.Parse(elem.Element("Количество").Value),
               price - price / 100 * double.Parse(elem.Element("Скидка").Value),
               elem.Element("Имя").Value));
      
    def qty = qtys.Fold(0.0, fun((qt, _, _), acc) { qt + acc });
    def sum = qtys.Fold(0.0, fun((qt, p, _), acc) { acc + qt * p });
    
    WriteLine(spec.GetAsString(@"Properties\Товар\ИмяЖурнала") + " "
      + spec.GetAsString(@"Properties\ГодЖурнала") + " "
      + spec.GetAsString(@"Properties\НомерЖурнала"));
    WriteLine($"Общее количество журналов $qty");
    WriteLine("Сумма {0:### ### ##0.00}", sum);
    WriteLine($"Количество фирм-заказчиков: $(qtys.Length)");

    WriteLine();
    WriteLine("Название\t\t\tКол-во\t\tЦена\t\tСумаа");
    WriteLine();

    def maxNameLen = qtys.Fold(0, fun((_, _, n), acc) { Max(n.Length, acc) }) + 1;

    foreach ((qt, price, name) in qtys)
    {
      
      WriteLine($"$(name.PadRight(maxNameLen))\t$qt\t\t$price\t\t$(qt * price)");
    }
    
    
    WriteLine("...");
    _ = ReadLine();
  }

  public GetAsString([NotNull] this node : XElement, [NotNull] path : string) : string
  {
    try
    {
      def elems = path.Split('\\').ToNList();
      def elem = elems.Tail.Fold(node.Element(elems.Head), 
        (name, elem) => elem.Element(name));
      elem.Value
    }
    catch
    {
      | e => throw ArgumentException("Incorrect path", "path", e);
    }
  }
  
  public GetAsDouble(this node : XElement, path : string) : double
  {
    double.Parse(node.GetAsString(path));
  }
}