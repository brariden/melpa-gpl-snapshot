using System;
using System.Runtime.InteropServices;
using System.Xml.Linq; // Пространство имен LINQ to XML
using Nemerle.Late;
using Nemerle.Utility;

namespace NReporter
{
    /// <summary>
    /// Description of WordPrinter.
    /// </summary>
  class WordPrinter : IPrinter
  {
    // late - это макрос, производящий позднее связывание идущего за ним
    // выражения. Код, идущий за ним, аналогичен коду на скриптовых языках
    // или коду на VB в режиме позднего связывания.
    // late удобно использовать для обращения к COM-серверам вроде MS Word.
    // При этом не требуется импортировать COM-библиотеки и нет проблем
    // со значениями параметров, так как полностью воспроизводится семантика
    // значений параметров по умолчанию принятая в COM и VB.
    // Так что весь код, взаимодействующий с Excel и Word, динамический.
    public this() { late _app.Visible = false }
    
    _app : object = LateEx.CreateObject("Word.Application");
    mutable _copies : int;
    
    public ReadTemplateInfo(info : XElement) : void
    {
      _copies = if (info == null) 1 else info.Element("Copies") :> int;
    }
    
    /// Открывает файл в Word и печатает его содержимое.
    public Print(reportPath : string) : void
    {
      def doc = late (_app.Documents.Open(reportPath, 
        ReadOnly=true, AddToRecentFiles=false, Visible=true));
      _ = late doc.Activate();
      _ = late doc.PrintOut(Copies=_copies);
      _ = late doc.Close(0/*wdDoNotSaveChanges */);
      _ = Marshal.ReleaseComObject(doc);
    }

    public Dispose() : void
    {
      _ = late _app.Quit(0/*wdDoNotSaveChanges */);
      _ = Marshal.ReleaseComObject(_app); // освобождаем ссылку на COM-объект
    }
  }
}
