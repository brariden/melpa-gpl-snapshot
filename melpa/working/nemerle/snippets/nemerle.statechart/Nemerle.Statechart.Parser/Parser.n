using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Peg;
using Nemerle;
using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;

namespace Nemerle.Statechart
{

  using StateNode;  
  //using TransitionNode;
  using PseudoStateModelNode;
  using GuardNode;
  using ListUtils;

  public partial class FsmParser
  {
    region_reference(name : NameIdentifier, _ : NToken, tok : NToken, _ : NToken) : NameIdentifier
    {
      def text = GetText(tok);
      def parent = name.FullName;
      NameIdentifier.Name(name.pos, $"$parent[$text]")
    }
    
    fully_qualified(id : NToken, tail : List[NToken * NToken]) : NameIdentifier
    {
      def pos = id.StartPos;
      def tail = tail.Map((_, x) => GetText(x));
      match (GetText(id), tail)
      {
        | (s, [])   => NameIdentifier.Name(pos, s)
        | (s, tail) => def lst = s :: tail;
                       def (last, lst) = lst.SplitLast();
            NameIdentifier.QualifiedName(pos, last, lst)
      }
    }
    
    
    simple_attrs(attr : List[NToken * List[NToken * NToken] * NToken]) : List[NToken]
    {
      attr.SelectMany((_, x, _) => x.Map((x, _) => x)).ToList()
    }

    attributes(attr : List[NToken]) : List[StateAttribute]
    {
      def get_attr(at)
      {
        match (GetText(at))
        {
          | "Initial" => StateAttribute.Initial(at.StartPos)
          | str       => StateAttribute.Unknown(at.StartPos, str)
        }
      }

      attr.Map(get_attr).ToList()
    }

    comma_identifier(_ : NToken, text : NToken, _ : NToken) : string
    {
      GetText(text)
    }
    
    identifier_string(text : NToken) : string
    {
      GetText(text)
    }
    
    get_action_attr(attr : IEnumerable[NToken]) : ActionFlags
    {
      def get_attr(at, res)
      {
        match (GetText(at))
        {
          | _ => (ActionFlags.None | res)
        }
      }

      attr.FoldLeft(ActionFlags.None, get_attr)
    }

    do_activity(attr : option[List[NToken]], key : NToken, acts : Actions) : StateNode.DoActivity
    {
      def get_attr(at, res)
      {
        def flag = match (GetText(at))
                    {
                      | "NoWait"       => ActivityFlag.NoCancel
                      | _              => ActivityFlag.None
                    }
        res | flag
      }

      def flags = attr.WithDefault(Enumerable.Empty());
      def flags = flags.FoldLeft(ActivityFlag.None, get_attr);
      DoActivity(key.StartPos, acts, flags)
    }

    flags(s : NToken, tok : List[NToken * NToken], _ : NToken) : StateNode
    {
      def err = List();
      
      def proc_tok((tok, _), flag)
      {
        def str = GetText(tok);
        
        def nflag= if (flags_map.ContainsKey(str)) flags_map[str] else 
                    {
                      err.Add(str);
                      MachineFlag.None
                    }
        nflag |  flag
      }

      def flags = tok.FoldLeft(MachineFlag.None, proc_tok);
      def flags = MachineFlags(flags, err.NToList());
      StateNode.Flags(s.StartPos, flags)
    }

   using_mach(tok : NToken, from : NameIdentifier, _ : NToken) : StateNode.Using
   {
     StateNode.Using(tok.StartPos, from.FullName)
   }

   event_decl(tok : NToken, name : NToken, _ : NToken, type : NToken, types : List[NToken], _ : NToken, _ : NToken) : StateNode.EventDecl
   {
     StateNode.EventDecl(tok.StartPos, GetText(name), GetText(type) :: types.Map(GetText));
   }
   
   floating_number(minus : NToken, num : NToken, frac : option[NToken * NToken], exp : option[NToken * NToken * NToken]) : double
   {
     def min = GetText(minus);
     def num = GetText(num);
     def frac = frac.Map((x, y) => (GetText(x), GetText(y)));
     def exp = exp.Map((x, y, z) => (GetText(x), GetText(y), GetText(z)));
     def frac = frac.MapDefault((x, y) => $"$x$y", "");
     def exp = exp.MapDefault((x, y, z) => $"$x$y$z", "");
     def num = $"$min$num$frac$exp";
     mutable res;
     if (double.TryParse(num, NumberStyles.Float, CultureInfo.CreateSpecificCulture("en-US"), out res))
     {
       res
     } else
     {
       double.NaN
     }
   }
  }

}
