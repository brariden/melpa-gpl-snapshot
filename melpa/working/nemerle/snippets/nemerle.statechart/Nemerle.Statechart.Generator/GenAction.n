using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System;
using System.Collections.Generic;
using System.Linq;



namespace Nemerle.Statechart
{
  using PathNode;

  class GenElement
  {
    public decl_map : Map[string, string];

    public name : string;

    public this(n : string, map : Map[string, string])
    {
      name = n;
      decl_map = map;
    }

    public ExecName : string
    {
      get
      {
        if (IsDeclared) decl_map.Get(name) else  $"On$name"//CreateExecName(name)
      }
    }

    public IsDestDeclared : bool
    {
      get
      {
        decl_map.Exists((_, x)  => name == x)
      }
    }

    public IsDeclared : bool
    {
      get
      {
        decl_map.Exists((x, _)  => name == x)
      }
    }

    public DeclName : string
    {
      get
      {
        if (decl_map.Contains(name)) decl_map.Get(name) else name
      }
    }

    public override ToString() : string
    {
      ExecName
    }

  }

  /// <summary>
  /// Description of GenAction.
  /// </summary>
  class GenAction : GenElement
  {
    //[Accessor] node : PathNode;
    public action : FsmAction;
    gen   : StaticGenerator;
    //[Accessor] mutable inlined_actions : list[GenAction] = [];

    public this(act : FsmAction, map : Map[string, string], gen : StaticGenerator)
    {
      if (act is FsmAction.Normal(n, _)) base(n, map); else base(null, map);
      action = act;
      this.gen = gen
    }

    [Memoized]
    public Params : list[PExpr]
    {
      get
      {
        match (action)
        {
          | FsmAction.Normal(_, p) => p.Map(x => <[ $(x : usesite) ]>)
          | _                      => []
        }
      }
    }

    Evaluate(expr : PExpr) : PExpr
    {
      def check(e)
      {
        | <[ send_other(Event.$(x : usesite)) ]> 
        | <[ send_other($(x : usesite))]>        => gen.gen_events.SendOtherCode(x)
        | <[ send_all(Event.$(x : usesite)) ]> 
        | <[ send_all($(x : usesite))]>          => gen.gen_events.SendAllCode(x)
        | <[ send(Event.$(x : usesite)) ]> 
        | <[ send($(x : usesite)) ]>             => gen.gen_events.SendEventCode(x)
        | e                                      => e
      }

      Macros.TraverseExpr(None(), expr, false, (_, after, e) => if (after) check(e) else e)
    }

    TryEvaluate() : PExpr
    {
      match (action)
      {
        | FsmAction.Expr(e)     => Evaluate(e) 
        | Normal(name = null)   => <[ () ]>
        | _                     => null
      }
    }

    [Memoized]
    public ExecExpr : PExpr
    {
      get
      {
        match (TryEvaluate())
        {
          | null                  => <[ $(ExecName : usesite)(..$Params) ]>
          | e                     => e
        }
      }
    }

    [Memoized]
    public DeclExecExpr : PExpr
    {
      get
      {
        match (TryEvaluate())
        {
          | null                  => <[ $(DeclName : usesite)(..$Params); ]>
          | e                     => e
        }
      }
    }

    public override ToString() : string
    {
      ExecName
    }

    [Memoized]
    public EventActionCall : PExpr
    {
      get
      {
        <[
          $(DeclName : usesite)?.Invoke()
        ]>
      }
    }

    public IsExpr : bool
    {
      get
      {
        action is FsmAction.Expr
      }
    }

    public BodyFunc : PExpr -> PExpr {get;set;}

    public Define() : void
    {
      when (!IsDeclared && !IsExpr)
      {
        def body = if (BodyFunc != null) BodyFunc(EventActionCall) else EventActionCall;
        gen.Define(<[decl: public event $(DeclName: usesite) : System.Action;]>);
        gen.Define(<[decl: $(ExecName : usesite)() : void 
                            {
                              $body
                            }]>);
      }

    }

  }

}





