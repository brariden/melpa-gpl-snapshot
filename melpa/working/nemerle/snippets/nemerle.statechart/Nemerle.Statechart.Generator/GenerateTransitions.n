using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{
  using ListUtils;
  /// <summary>
  /// Description of GenerateTransitions.
  /// </summary>
  public partial class StaticGenerator
  {

    GetGroupTransitionName(from : ActiveStateConfig, trigger : StateEvent) : string
    {
      $"Transition$(from)By$trigger"
    }

    internal GetTransitionFunction(tran : Transition) : ClassMember
    {
      <[ decl: $(tran.Name : usesite)(..$(tran.Trigger.event_parameter_decls())) : State { $(GetTransitionBody(tran)) } ]>
    }

    internal GetTransitionFunction(name : string, tran : Transition) : ClassMember
    {
      <[ decl: $(name : usesite)(..$(tran.Trigger.event_parameter_decls())) : State { $(GetTransitionBody(tran)) } ]>
    }

    internal GetTransitionFunction(tran : list[Transition]) : list[ClassMember]
    {
      tran.Map(GetTransitionFunction)
    }
    
    internal GetTransitionFunction(tran : list[string * Transition]) : list[ClassMember]
    {
      tran.Map(GetTransitionFunction)
    }

    internal GetTransitionName(tran : Transition) : string
    {
      if (tran.WithinRegion && gen_states.concurrent_field_pattern)
      {
        def from = tran.WithinRegionSource;
        def from = $<#..$(from; "")#>;
        $"Transition$(from)To$(tran.WithinRegionTarget)By$(tran.Trigger)"
      } else
      if (tran.Grouped > 1)
      {
        GetGroupTransitionName(tran.Source, tran.Trigger);
      } else tran.Name
    }

    GetTransitionFunction(st : ActiveStateConfig) : list[ClassMember]
    {
      def tran = st.transitions.Exclude(_.IsDefer);

      def get_body(x)
      {
        def name = GetTransitionName(x);
        <[ decl: $(name : usesite)(..$(x.Trigger.event_parameter_decls())) : State { $(GetTransitionBody(x)) } ]>
      }

      tran.Map(get_body);
    }

    public GetDestination(tran : Transition, dest : TargetDeterminator) : PExpr
    {
      match (dest)
      {
        | State(st)      => def st_code = GetExecStateCode(tran, st);
                            st_code
        | NoStateChange  => <[ cur_state ]>
        | Terminate      => <[ Terminate();null ]>
        | History(h)     => SingleHistoryEmit.HistoryRestoreCode(h)
        | Defer          => def body = DeferrableEvents.GetRunCode();<[ $body; null ]>
        | Completion(st) => match (st.transitions.Find(x => x.Trigger.IsCompletion))
            {
              | Some(tran) => def name =  GetTransitionName(tran);
                              <[ $(name : usesite)() ]>
              | _          => <[ Terminate();null ]>
            }
        | _              => throw InvalidOperationException("unknown destination")
      }
    }

    EvalGuardExpr(expr : PExpr) : PExpr
    {
      def check_eval(_, after, e)
      {
        if (after)
          match (e)
          {
            | <[ in_state($st) ]>
            | <[ InState($st) ]>   => def st = st.ToString();
                                      def st = GetExecStateName(st);
                                      <[ IsInState($st) ]>
            | t => t
          } else e
      }

      Macros.TraverseExpr(None(), expr, false, check_eval)
    }

    GetGuardCondExpr(g : GuardNode) : PExpr
    {
      match (g)
      {
        | GuardNode.Expr(cond) => EvalGuardExpr(cond)
        | _                    => <[ true ]>
      }
    }

    GetGuards(g : GuardNode) : PExpr
    {
      GetGuardCondExpr(g)
    }

    GetPath(path : PathSequence) : PExpr
    {
      def path = GenTranPath(path, action_for, this, FsmFlags);
      path.TranBody
    }

    GetTransitionBody(tran : Transition) : PExpr
    {
      def body = get_junction_body(tran, tran.DecisionTree);
      body
    }

    DefineTransBody(tr : Transition) : PExpr
    {
      def name = tr.Name;
      <[ $(name : usesite)();]>
    }

    DefineHandlerTransBody(tr : Transition) : PExpr
    {
      match (tr.Target)
      {
        | TargetDeterminator.Defer => <[ fsm.Defer(); null ]>
        | _                        => def name = GetTransitionName(tr);
                                      <[ fsm.$(name : usesite)(..$(tr.Trigger.event_parms_names()));]>
      }
    }

    DefineDeferedEvents() : void
    {
      def deferred = DeferrableEvents(this);
      deferred.Emit()
    }

    internal DefineTransitions(ty : TypeBuilder, st : ActiveStateConfig) : void
    {
      DeferrableEvents.EmitInState(st, ty);
      def defs =  {
                  def group = st.transitions;
                  group.MapToList(x => gen_events.EventDeclInState(x, DefineHandlerTransBody(x)))
                  }
      Define(ty, defs)
    }

    //internal DefineTransitions(ty : TypeBuilder, st : HState) : void
    //{
    //  DeferrableEvents.EmitInState(st, ty);
    //  def defs =  {
    //                def group = st.transitions;
    //                group.MapToList(x => gen_events.EventDeclInState(x.Trigger, DefineHandlerTransBody(x)))
    //              }
    //  Define(ty, defs)
    //}

    GetTransitionFunctionWithin(tran : list[Transition]) : list[ClassMember]
    {
      
      def get_body(x)
      {
        def name = GetTransitionName(x);
        <[ decl: $(name : usesite)(..$(x.Trigger.event_parameter_decls())) : State { $(GetTransitionBody(x)) } ]>
      }

      tran.Map(get_body);
    }
    
    DefineTransitionActions() : void
    {
      Define(GetTransitionFunction(Initial));
      foreach (st in ActiveStates)
      {
        if (st.IsConcurrent && gen_states.concurrent_field_pattern)
        {
          def (within, other) = st.transitions.Partition(x => x.WithinRegion);
          def tran = within.Exclude(_.IsDefer);
          def defs = GetTransitionFunctionWithin(tran);
          def other = GetTransitionFunction(other);
          def defs = defs + other;
          Define(defs);
        } else
        {
          def body = GetTransitionFunction(st);
          Define(body);
        }
      }
    }

  }
}
