using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System.Text;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of GeneratorImpl.
  /// </summary>
  public partial class StaticGenerator
  {

    public Define(lst : IEnumerable[ClassMember]) : void
    {
      util.Define(lst);
    }
    
    public Define(f : ClassMember) : void
    {
      util.Define(f);
    }

    public Define(ty : TypeBuilder, f : ClassMember) : void
    {
      util.Define(ty, f);
    }

    public Define(ty : TypeBuilder, lst : IEnumerable[ClassMember]) : void
    {
      util.Define(ty, lst)
    }
    
    public DefineNested(ty : TypeBuilder, f : ClassMember.TypeDeclaration) : TypeBuilder
    {
      util.DefineNested(ty, f);
    }

    public DefineNested(f : ClassMember.TypeDeclaration) : TypeBuilder
    {
      util.DefineNested(f)
    }
    
    public DefineEvent(name : string, type : PExpr, pars : list[PParameter], body : PExpr) : void
    {
      util.DefineEvent(name, type, pars, body)
    }
    
    public DefineEvent(name : string) : void
    {
      util.DefineEvent(name)
    }
    
    public DefineMethod(name : string, body : PExpr) : void
    {
      util.DefineMethod(name, body)
    }
    
    public util : GenUtil;

    static merge_and : PExpr * PExpr -> PExpr = (x, y) => <[ $x && $y ]>;

    public static GetExecStateName(st : string) : PExpr
    {
      def name = $"State$st";
      <[ $(name : usesite) ]>
    }
    
    public GetExecStateCode(tran : Transition, st : ActiveStateConfig) : PExpr
    {
      //def name = $"State$st";
      //<[ $(name : usesite) ]>
      gen_states.ExecStateCode(tran, st)
    }
    
    DefineActionEvent(act : GenAction) : void
    {
      def body_func(b)
      {
        if (FsmFlags.TestingFeatures)
        <[ 
            $b;
            OnActionExecuted($(act.DeclName));
        ]> else b
      }
        act.BodyFunc = body_func;
        
        act.Define()
      
    }

    static MergeExpr(expr : IEnumerable[PExpr], merge_func : PExpr * PExpr -> PExpr) : PExpr
    {
      def merge_expr(item, res)
      {
        | (<[ () ]>, r) => r
        | (e, <[ () ]>) => e
        | (e, expr)     => merge_func(expr, e)
      }

      expr.Reduce(merge_expr)
    }

    internal StateIdDefaultValue : PExpr
    {
      get
      {
        match (StatesId.Length)
        {
          | 1
          | 2               => <[ 0 ]>
          | x when (x <= 4) => <[ LongId() ]>
          | _               => <[ null ]>
        }
      }
    }

    internal StateIdType : PExpr
    {
      get
      {
        match (StatesId.Length)
        {
          | 1               => <[ uint ]>
          | 2               => <[ ulong ]>
          | x when (x <= 4) => <[ LongId ]>
          | _               => <[ LongId ]>
        }
      }
    }

    internal GetId(id : IdType) : PExpr * PExpr
    {
      def get_long_id() : PExpr
      {
        def res = id.Result.NToList();
        def pars =  res.Map(x => <[ $x ]>);
        <[ LongId(..$pars) ]>
      }

      def get_class_long_id() : PExpr
      {
        def res = id.Result.NToList();
        def res = res.FirstElems(_ == 0);
        def pars = res.Select(x => <[ $x ]>);
        def pars = pars.MapIndex((x, i) => <[ id.$($"id$i" : usesite) = $x ]>).NToList();
        <[ 
        def id = LongId();
        {..$pars}
        id
        ]>
      }

      match (StatesId.Length)
      {
        | 1               => def id = id.UInt; (<[ $(id : uint) ]>, <[ 0 ]>)
        | 2               => def id = id.ULong;(<[ $(id : ulong) ]>, <[ 0 ]>)
        | x when (x <= 4) => (<[ $(get_long_id()) ]>, <[ LongId() ]>)
        | _               => (<[ $(get_class_long_id()) ]>, <[ null ]>)
      }
    }
  }
}
