using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using System.IO;

namespace Nemerle.Statechart
{

  using PathNode;

  /// <summary>
  /// Description of GeneratorDecls.
  /// </summary>
  public partial class StaticGenerator
  {
    internal ty : TypeBuilder;

    [Memoized]
    internal Events : list[StateEvent]
    {
      get
      {
        def evts = transitions.Select(_.Trigger);
        def evts = evts.Where(x => x != null && x.Name != null);
        evts.RemoveDuplicatesSort(x => x.FullName)
      }
    }

    internal gen_events : GenEvents;
    
    //gen_regions : Regions;
    
    [Memoized]
    HistoryStates : list[PseudoState.History]
    {
      get
      {
        ActiveStates.SelectMany(_.History).Distinct().NToList()
      }
    }

    [Memoized]
    States : list[HState]
    {
      get
      {
        ActiveStates.SelectMany(_.states).NToList()
      }
    }
    
    [Memoized]
    internal HasDeferedEvents : bool
    {
      get
      {
        transitions.Exists(x => x.IsDefer || x.DecisionTree.Targets.Exists(x => x is TargetDeterminator.Defer))
      }
    }
    
    [Memoized]
    actions      : list[GenAction]
    {
      get
      {
        def act = transitions.SelectMany(x => x.DecisionTree.PathActions);
        def act = act.Exclude(_ is FsmAction.Normal(name = null));
        def act = act.RemoveDuplicatesSort(_.ToString());
        act.Map(x => GenAction(x, action_for, this))
      }
    }

    [Memoized]
    tran_paths : list[PathSequence]
    {
      get
      {
        transitions.SelectMany(x => x.DecisionTree.Path).NToList()
      }
    }

    [Memoized]
    tran_path_nodes : list[TranPath]
    {
      get
      {
        def ex = tran_paths.SelectMany(x => x.exit_tran_path);
        def en = tran_paths.SelectMany(x => x.entry_tran_path);
        def ex = ex.RemoveDuplicatesSort(x => x.state.name);
        def en = en.RemoveDuplicatesSort(x => x.state.name);
        ex + en
      }
    }

    [Memoized]
    path_state_actions : list[TranPath]
    {
      get
      {
        tran_path_nodes.Filter(x => x.kind == PathKind.Entry || x.kind == PathKind.Exit);
      }
    }

    [Memoized]
    internal transitions : list[Transition]
    {
      get
      {
        def default = HistoryStates.FilterValues(_.default);
        Initial :: ActiveStates.SelectMany(x => x.transitions).Concat(default).NToList()
      }
    }

    Initial : Transition;

    internal ConcurrentCombinationsLimit : int = 50;
    internal ConcurrentTransitionsLimit : int = 300;
    internal ActiveStates : IEnumerable[ActiveStateConfig];

    internal states : IEnumerable[HState]
    {
      get
      {
        ActiveStates.SelectMany(_.states).Distinct().NToList()
      }
    }
    
    mutable decls : Map[string, list[ClassMember]];
    mutable action_for : Map[string, string]; // source_name * dest_name
    mutable event_for : Map[string, string];
    mutable macro_actions : Map[string, list[PExpr]];
    mutable constructor : option[string];
    mutable guard_for : Map[string, string]; // сторожевые условия объявленные в классе

    internal ChartName : string;

    public init_exprs : list[PExpr] {get;set;default []}
    mutable gen_members : list[ClassMember] = [];
    internal mutable compile_list : list[TypeBuilder] = [];
    
    internal mutable StateBuilders : list[ActiveStateConfig * TypeBuilder] = [];
    
    mutable method_decls : list[string];

    internal timed_events : TimedEvents;
    
    [Memoized]
    HistoryPaths : list[HistoryPath]
    {
      get
      {
        ActiveStates.SelectMany(_.HistoryPath).Distinct().NToList()
      }
    }

    internal mutable state_builder : TypeBuilder;

    DoActivities : IEnumerable[StateAction.Do]
    {
      get
      {
        States.SelectMany(_.do_activity).RemoveDuplicatesSort(_.Name)
      }
    }

    [Memoized]
    have_completion : bool
    {
      get
      {
        DoActivities.Exists(_.need_completion)
      }
    }

    FinalizeGen() : void
    {
      Define(gen_members);
      compile_list.Iter(_.Compile());
      when (WithSources) 
      {
      }
    }

    LoadedMachines : Hashtable[string, StateNode.StateMachine];
    
    internal FsmFlags : MachineFlags;
    
    StatesId : StateId;
    
    internal EventCtx : EventContext = EventContext();
    
    public WithSources : bool {get;set;}

    gen_states : States;
    
    public this(active_states : list[ActiveStateConfig], fsm_flags : MachineFlags, initial : Transition, id : StateId, loaded : Hashtable[string, StateNode.StateMachine], ty : TypeBuilder)
    {
      ActiveStates = active_states;
      FsmFlags = fsm_flags;
      Initial = initial;
      StatesId = id;
      LoadedMachines = loaded;
      this.ty = ty;
      ChartName = ty.Name;
      WithSources = true;
      util = GenUtil(ty, WithSources);
      gen_events = GenEvents(this, Events);
      timed_events = TimedEvents(this);
      gen_states = States(this);
      //gen_regions = Regions(this);
    }

    public Generate() : void
    {
      Init();
      DefineEvents();
      DefineActions();
      DefineGuards();
      DefineTransitionActions();
      DefineDeferedEvents();
      DefineDoActivity();
      DefineInit();
      DefineHistory();
      DefinePseudo();
      DefineSubMachines();
      FinalizeGen();
    }

  }
}
