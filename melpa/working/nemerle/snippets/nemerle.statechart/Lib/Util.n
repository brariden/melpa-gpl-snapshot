using System;
using System.Diagnostics;
using Nemerle;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.ComponentModel;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace Nemerle.Statechart
{

  macro single_func(block)
  syntax ("single_func", block)
  {
    Utils.CreateSingleFunc(block)
  }

  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Method)]
  macro FormSync(type : TypeBuilder, meth : ClassMember.Function, params expr : array[PExpr])
  {
    Utils.FormSyncCreate(type, meth, expr)
  }

  public module FormUtils
  {

    public Sync(this form : Control, act : Action) : void
    {
      if (form.InvokeRequired) _ = form.Invoke(act) else act()
    }

    public Sync[T](this form : Control, act : Func[T]) : T
    {
      if (form.InvokeRequired) form.Invoke(act) :> T else act()
    }

    public Sync(this form : ISynchronizeInvoke, act : Action) : void
    {
      if (form.InvokeRequired) _ = form.Invoke(act, array[]) else act()
    }

    public Sync[T](this form : ISynchronizeInvoke, act : Func[T]) : T
    {
      if (form.InvokeRequired) form.Invoke(act, array[]) :> T else act()
    }
  }

  module Utils
  {

    public GetCtors(ty : TypeBuilder) : list[ClassMember.Function]
    {
      def mems = ty.AstParts.SelectMany(_.GetMembers());
      def meth = mems.FilterType();
      meth.Filter(x => x.Name == ".ctor")
    }
    
    public FormSyncCreate(_ : TypeBuilder, meth : ClassMember.Function, expr : array[PExpr]) : void
    {
      def ret = meth.header.ReturnType;
      if (ret is <[ void ]>)
      match (expr.NToList())
      {
        | []        => meth.Body = <[ this.Sync(() => { $(meth.Body) }) ]>
        | head :: _ => meth.Body = <[ $head.Sync(() => { $(meth.Body) }) ]>
      } else
      match (expr.NToList())
      {
        | []        => meth.Body = <[ this.Sync(Func.[$ret](_ => { $(meth.Body) })) ]>
        | head :: _ => meth.Body = <[ $head.Sync(Func.[$ret](_ => { $(meth.Body) })) ]>
      }
    }

    public attr_func(this f : IField, func : list[PExpr] -> bool) : bool
    {
      if (f is LibraryReference.ExternalFieldInfo) false else
      {
        def attr = f.GetModifiers().GetMacroAttributes();
        func(attr)
      }
    }

    public CreateSingleFunc(block : PExpr) : PExpr
    {
      def create_res(x)
      {
        | <[ def $_ = $_ ]> => x
        | x => <[ def res = $x ]>
      }

      def process(_, after, expr)
      {
        match (after, expr)
        {
          | (true, <[ {..$lst} ]>) => def (last, lst) = lst.SplitLast();
              def lst = lst.Map(create_res) + [last];
                                      <[ {..$lst}]>
          | (true, PExpr.MacroCall(name = Name where (Id = "__"))) => <[ res ]>
          | (_, x) => x
        }
      }

      Macros.TraverseExpr(None(), block, false, process)
    }

 
  }

  partial module NeedChangeImpl
  {

    StrToLower(s : string) : string
    {
      char.ToLower(s[0]).ToString() + s.Substring(1);
    }

    public CreateConstrBody(type : string, pars : list[string * string * string], parms : list[string * string], extra : list[string * PExpr]) : PExpr
    {

      def inst_par((f, ep, p), pars, extra)
      {
        def ep = StrToLower(ep);

        def extra = if (extra != null) match (extra.Find((x, _) => x == ep))
                      {
                        | Some((_, e)) => <[$(ep : usesite) = $e ]>
                        | _            => null
                      } else null;
        if (extra != null) extra else
          match (pars.Find((x, _) => f == x))
          {
            | Some((_, n)) => <[ $(ep : usesite) = $(n : usesite) ]>
            | _            => <[ $(ep : usesite) = $(p : usesite) ]>
          }
      }


      def expr = pars.Map(inst_par(_, parms, extra));
      //def expr = if (extra != null) expr + extra else expr;
      <[ $(type : usesite)(..$expr) ]>
    }

    public CreateNewInst(typebuilder : TypeBuilder, type : PExpr, parms : list[string * string]) : PExpr
    {

      //def have_record_ignore(f : IField)
      //{
      //  f.attr_func(x => x.Exists(_ is <[ RecordIgnore ]>) && !x.Exists(_ is <[ NeedChange ]>))
      //}

      def fields = typebuilder.GetFields();
      def have_version = fields.Exists(x => x.Name == "version");
      def iter_exist = fields.Exists(x => x.Name == "cached_iter");

      def def_constr(cur_type, fields)
      {
        //def opt = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;
        //def fields = cur_type.GetFields(opt);
        //def fields = fields.Exclude(x => attr_func(x, x => x.Exists(_ is <[ RecordIgnore ]>) && !x.Exists(_ is <[ NeedChange ]>)));
        //def pars = fields.Map(x => StrToLower(x.Name));
        //def parms = unseq(parms);
        //def parms = parms.Map(split);
        def extra = [];
        def extra = if (have_version) ("version", <[ version + 1 ]>) :: extra else extra;
        def extra = if (iter_exist) ("cached_iter", <[ null ]>) :: extra else extra;
        def extra = if (extra is []) null else extra;
        CreateConstrBody(cur_type.Name, fields, parms, extra)
      }

      def def_opts(o)
      {
        //def opt = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy;
        def fields = GetChangeFields(o);//o.GetFields(opt);
        def match_fields = fields.Exclude(x => parms.Exists((y, _) => y == x.Name));
        def match_fields = if (have_version) match_fields.Exclude(x => x.Name == "version"); else match_fields;
        def match_fields = if (iter_exist) match_fields.Exclude(x => x.Name == "cached_iter"); else match_fields;
              //def fields = fields.Exclude(have_record_ignore);
        def names = match_fields.Map(x => <[ $(x.Name : usesite) = $(StrToLower(x.Name) : usesite) ]>);
        def fields = fields.Map(x => (x.Name, StrToLower(x.Name), StrToLower(x.Name)));
        def body = def_constr(o, fields);
        <[case: | $(o.Name : usesite)(..$names) => $body ]>
      }

      //assert2(false);
      def cur_type = typebuilder;
      def type = type?.ToString();
      match (cur_type.GetVariantOptions())
      {
        | [] => def cur_type = if (type == null) cur_type else
                                {
                                  if (cur_type.Name == type) cur_type else 
                                  {
                                    def cur_type = cur_type.GetVariantOptionParent();
                                    if (type == cur_type.Name) cur_type else 
                                      match (cur_type.GetVariantOptions().Find(x => x.Name == type))
                                      {
                                        | Some(t) => t
                                        | _       => Message.Error($"Cannot find the '$type' type");
                                                    null
                                      }
                                  }
                                }

            if (cur_type != null) 
            {
              def fields = GetChangeFields(cur_type);
              def fields = fields.Map(x => (x.Name, StrToLower(x.Name), x.Name));
              def_constr(cur_type, fields)
            } else <[]>//GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy)) else <[]>

        | lst => 
            def expr = lst.Map(def_opts);
            <[
              match (this)
              {
                ..$expr
              }
            ]>
      }     
    }

    public CreateNewInst(typeBuilder : TypeBuilder, type : PExpr, parms : PExpr) : PExpr
    {
      def split(p)
      {
        | <[ $(x : name) = $(y : name) ]> => (x.Id, StrToLower(y.Id))
        | _                               => Message.Error(p.Location, "Unknown expression for new_inst assignment"); ("", "")
      }

      def unseq(p)
      {
        match (p)
        {
          | <[ {..$seq} ]> 
          | <[ (..$seq) ]> => seq
          | x              => [x]
        }
      }

      def parms = unseq(parms);
      def parms = parms.Map(split);
      CreateNewInst(typeBuilder, type, parms)
    }
  }


  macro @^&(type, parms)
  syntax (type, "^&", "(", parms,")")
  {
    //assert2(false);
    NeedChangeImpl.CreateNewInst(Macros.ImplicitCTX().CurrentTypeBuilder, type, parms)
  }

}
