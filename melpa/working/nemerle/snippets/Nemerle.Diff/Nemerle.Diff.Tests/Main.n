#region License notes
/*
 * Copyright (c) 2010 Vladimir Kochetkov <mailto:kochetkov.vladimir@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#endregion

using Nemerle.Diff;

using System.Console;
using System.Math;
using System.Text;

module Program
{
    Main() : int
    {
        #region Tests
        
        def tests = [
        /*
            Test format description:
            (
                "test name",
                array[sequence A elements],
                array[sequence B elements],
                "expected Diff() result in string representation",
                "expected Match() result"
            ),
        */
            (
                "Empty sequence A",
                array[],
                array["a","b","c","d","e","f","g","h","i","j","k","l"],
                "0.{a,b,c,d,e,f,g,h,i,j,k,l}.0*",
                0.0D
            ),(
                "Empty sequence B",
                array["a","b","c","d","e","f","g","h","i","j","k","l"],
                array[],
                "12.{}.0*",
                0.0D
            ),(
                "Equal sequences",
                array["a","b","c","d","e","f","g","h","i","j","k","l"],
                array["a","b","c","d","e","f","g","h","i","j","k","l"],
                "",
                1.0D
            ),(
                "Different sequences",
                array["a","b","c","d","e","f","g","h","i","j","k","l"],
                array["0","1","2","3","4","5","6","7","8","9"],
                "12.{0,1,2,3,4,5,6,7,8,9}.0*",
                0.0D
            ),(
                "Snake",
                array["a","b","c","d","e","f"],
                array["b","c","d","e","f","x"],
                "1.{}.0*0.{x}.6*",
                0.667D
            ),(
                "Some differences",
                array["a","b","-","c","d","e","f","f"],
                array["a","b","x","c","e","f"],
                "1.{x}.2*1.{}.4*1.{}.7*",
                0.625D
            ),(
                "Long repeats",
                array["a","a","a","a","a","a","a","a","a","a"],
                array["a","a","a","a","-","a","a","a","a","a"],
                "0.{-}.4*1.{}.9*",
                0.9D
            ),(
                "Mirroring sequences",
                array["4","3","2","1","0"],
                array["0","1","2","3","4"],
                "0.{0,1,2,3}.0*4.{}.1*",
                0.2D
            ),(
                "Bug #x1 repro",
                array["c1","a","c2","b","c","d","e","g","h","i","j","c3","k","l"],
                array["C1","a","C2","b","c","d","e","I1","e","g","h","i","j","C3","k","I2","l"],
                "1.{C1}.0*1.{C2}.2*0.{I1,e}.7*1.{C3}.11*0.{I2}.13*",
                0.647D
            ),(
                "Bug #x2 repro",
                array["F"],
                array["0","F","1","2","3","4","5","6","7"],
                "0.{0}.0*0.{1,2,3,4,5,6,7}.1*",
                0.111D
            ),(
                "Bug #x3 repro",
                array["HELLO","WORLD"],
                array["","","hello","","","","world",""],
                "2.{,,hello,,,,world,}.0*",
                0.0D
            )
                
        ];
        
        #endregion

        #region Tests runner
                
        def runTest((testName, sequenceA, sequenceB, expectedDiffResult, expectedMatchResult), acc)
        {
            def sequenceToString(sequence)
            {
                def sb = StringBuilder();
                foreach(element in sequence)
                    _ = sb.Append(element + ",");
                when (sb.Length != 0)
                    _ = sb.Remove(sb.Length - 1, 1);
                sb.ToString()
            }
            def diffToString(diff)
            {
                def sb = StringBuilder();
                foreach(element in diff)
                    _ = sb.Append(element.Deleted.ToString() + ".{" + sequenceToString(element.Inserted) + "}." + element.Index.ToString() + "*");
                sb.ToString()
            }

            def sequenceAString = sequenceToString(sequenceA);
            def sequenceBString = sequenceToString(sequenceB);
            
            def diffResult = sequenceA.Diff(sequenceB);
            def diffResultString = diffToString(diffResult);
            
            def patchResult = sequenceA.Patch(diffResult);
            def patchResultString = sequenceToString(patchResult);
            
            def matchResult = System.Math.Round(sequenceA.Match(sequenceB), 3);            
            
            if (diffResultString != expectedDiffResult)
            {
                WriteLine($"FAILED the \"$(testName)\" test:\n---\nDiff(\"$(sequenceAString)\", \"$(sequenceBString)\") = \"$(diffResultString)\"\nExpected: \"$(expectedDiffResult)\"\n---\n");
                false
            } else if (patchResultString != sequenceBString)
            {
                WriteLine($"FAILED the \"$(testName)\" test:\n---\nPatch(\"$(sequenceAString)\", \"$(diffResultString)\") = \"$(patchResultString)\"\nExpected: \"$(sequenceBString)\"\n---\n");
                false
            } else if (matchResult != expectedMatchResult)
            {
                WriteLine($"FAILED the \"$(testName)\" test:\n---\nMatch(\"$(sequenceAString)\", \"$(sequenceBString)\") = \"$(matchResult.ToString())\"\nExpected: \"$(expectedMatchResult.ToString())\"\n---\n");
                false
            } else {
                WriteLine($"PASSED the \"$(testName)\" test");
                true && acc
            }
        }
        
        if (tests.FoldLeft(true, runTest))
        {
            WriteLine("\nAll tests are successfuly passed.");
            0
        }
        else
        {
            WriteLine("\nSome tests are failed.");
            1
        }
        #endregion
    }
}