#region License notes
/*
 * Copyright (c) 2010 Vladimir Kochetkov <mailto:kochetkov.vladimir@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#endregion

using Nemerle.Assertions;

using System;
using System.Collections.Generic;

namespace Nemerle.Diff
{
    /// Implementation of Edit Distance Algorithm published in
    /// "Binary codes capable of correcting deletions, insertions, and reversals"
    /// by Vladimir Levenshtein, Soviet Physics Papers, 1966.
    public partial module DiffExtensions
    {
        /// <summary>
        /// Finds a similarity rate for two sequences.
        /// </summary>
        /// <param name="sequenceA">A-version of the sequence</param>
        /// <param name="sequenceB">B-version of the sequence</param>
        /// <returns>Returns a similarity rate of given sequences (from 0.0D for fully different sequences to 1.0D for fully similar ones).</returns>
        public Match[T](
            [NotNull] this sequenceA : array[T],
            [NotNull]      sequenceB : array[T]
        ) : double
        where T : IEquatable[T]
        {
            Match(sequenceA, sequenceB, _.Equals(_))
        }

        /// <summary>
        /// Finds a similarity rate for two sequences.
        /// </summary>
        /// <param name="sequenceA">A-version of the sequence</param>
        /// <param name="sequenceB">B-version of the sequence</param>
        /// <param name="equals">Item equality predicate</param>
        /// <returns>Returns a similarity rate of given sequences (from 0.0D for fully different sequences to 1.0D for fully similar ones).</returns>
        public Match[T](
            [NotNull] this sequenceA : array[T],
            [NotNull]      sequenceB : array[T],
            [NotNull]      equals    : Func[T, T, bool]
        ) : double
        {
            mutable a = sequenceA;
            mutable b = sequenceB;
            
            mutable n = sequenceA.Length;
            mutable m = sequenceB.Length;
            
            // Make sure n <= m, to use O(min(n,m)) space
            when (n > m)
            {
                a <-> b;
                n <-> m;
            }
            
            // Keep current and previous row, not entire matrix
            mutable currentVector = $[0 .. n].ToArray();
            mutable previousVector;
            
            for (mutable i = 1, i < m + 1; i++)
            {
                previousVector = currentVector;
                currentVector = array(m + 1);
                currentVector[0] = i;
                for (mutable j = 1; j < n + 1; j++)
                {
                    def insert = previousVector[j] + 1;
                    def delete = currentVector[j - 1] + 1;
                    mutable change = previousVector[j - 1];
                    unless (equals(a[j - 1], b[i - 1])) change += 1;
                    currentVector[j] = if (insert < delete && insert < change) insert else if (delete < insert && delete < change) delete else change;
                }
            }
            
            1.0D - (currentVector[n] :> double) / (if (n > m) n else m) :> double
        }
    }
}
