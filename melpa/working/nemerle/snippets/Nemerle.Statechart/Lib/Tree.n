using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{
  public enum TreeTraversalType
  {
    | PreOrder
    | PostOrder
    | BreadthFirst
  }
  
  public interface IGeneralTree[T]
  {
    Current : T {get;}
    ChildNodes : IEnumerable[IGeneralTree[T]] {get;}
  }
  /// <summary>
  /// Description of Tree.
  /// </summary>
  public module TreeUtils
  {
    
    public GetPreOrderEnumerable[T](this tree : IGeneralTree[T]) : IEnumerable[T]
    {
      GetPreOrderEnumerable(tree, _.ChildNodes).Select(x => x.Current)
    }
    
    public GetPostOrderEnumerable[T](this tree : IGeneralTree[T]) : IEnumerable[T]
    {
      GetPostOrderEnumerable(tree, _.ChildNodes).Select(x => x.Current)
    }

    public GetPostOrderIter[T](this tree : IGeneralTree[T]) : IEnumerable[IGeneralTree[T]]
    {
      GetPostOrderEnumerable(tree, _.ChildNodes)
    }
    
    public  GetBreadthFirstEnumerable[T](this tree : IGeneralTree[T]) : IEnumerable[T]
    {
      GetBreadthFirstEnumerable(tree, _.ChildNodes).Select(x => x.Current)
    }
    
    public GetEnumerable[T](tree : T, childs : T -> IEnumerable[T], TraversalType : TreeTraversalType) : IEnumerable[T]
    {
      match (TraversalType)
      {
        | TreeTraversalType.PreOrder     => GetPreOrderEnumerable(tree, childs)
        | TreeTraversalType.BreadthFirst => GetBreadthFirstEnumerable(tree, childs)
        | TreeTraversalType.PostOrder    => GetPostOrderEnumerable(tree, childs)
      }
    }

    public GetPreOrderEnumerable[T](tree : T, childs : T -> IEnumerable[T]) : IEnumerable[T]
    {
      def stack = SCG.Stack();
      stack.Push(tree);

      def loop()
      {
        if (stack.Count != 0)
        {
          def current = stack.Pop();
          def childs = childs(current);
          foreach (c in childs)
          {
            stack.Push(c)
          }
          yield current;
        } else ()
      }

      loop()
    }

    public GetPostOrderEnumerable[T](tree : T, childs : T -> IEnumerable[T]) : IEnumerable[T]
    {
      def child = SCG.Stack();
      def parent = SCG.Stack();

      child.Push(tree);

      while (child.Count != 0)
      {
        def curr = child.Pop();
        parent.Push(curr);
        def childs = childs(curr);
        foreach (s in childs) child.Push(s);
      }
      parent
    }

    public GetBreadthFirstEnumerable[T](tree : T, childs : T -> IEnumerable[T]) : IEnumerable[T]
    {
      def queue = SCG.Queue();
      queue.Enqueue(tree);

      while (queue.Count != 0)
      {
        def node = queue.Dequeue();
        yield node;
        def childs = childs(node);
        foreach (s in childs) queue.Enqueue(s)
      }
    }

    public Fold[T, TAcc](this node : IGeneralTree[T], init : TAcc, folder : T * TAcc -> TAcc) : TAcc
    {
      Fold(node, init, x => x.ChildNodes, (x, a) => folder(x.Current, a))
    }
    
    public Fold[T, TAcc](node : T, init : TAcc, childs : T -> IEnumerable[T], folder : T * TAcc -> TAcc) : TAcc
    {
      def fold(n, acc)
      {
        folder(n, acc)// :: tail
      }

      GetPostOrderEnumerable(node, childs).FoldLeft(init, fold)
    }
    
    public FoldTree[T, TAcc](this node : IGeneralTree[T], init : TAcc, folder : T * IEnumerable[TAcc] -> TAcc) : TAcc
    {
      FoldTree(node, init, x => x.ChildNodes, (x, a) => folder(x.Current, a))
    }
    
    public FoldTree[T, TAcc](node : T, init : TAcc, childs : T -> IEnumerable[T], folder : T * IEnumerable[TAcc] -> TAcc) : TAcc
    {
      def loop(n, acc)
      {
        def (chacc, tail) = acc.PopRev(childs(n).Count());
        folder(n, chacc) :: tail;
      }
      
      GetPostOrderEnumerable(node, childs).FoldLeft([init], loop).Head
    }
    
    public Reduce[T](this tree : IGeneralTree[T], folder : T * IEnumerable[T] -> T) : T
    {
      def deque = List();

      def fold_func(x, chacc)
      {
        def len = x.ChildNodes.Count();
        def (child, lst) = chacc.PopRev(len);
        def acc = folder(x.Current, child);
        deque.Add(acc);
        acc :: lst
      }

      tree.GetPostOrderIter().FoldLeft([], fold_func).Head
    }
  }
}
