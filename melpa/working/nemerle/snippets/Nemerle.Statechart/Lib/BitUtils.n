using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of BitUtils.
  /// </summary>
  public module BitUtils
  {
    
    public SetAll[T](this lst : BitArray, coll : IEnumerable[T], setter : T -> int) : void
    {
      coll.Iter(x => lst.Set(setter(x), true))
    }

    public @|=(a : BitArray, b : BitArray) : BitArray
    {
      a.Or(b)
    }
    
    public @&=(a : BitArray, b : BitArray) : BitArray
    {
      a.And(b)
    }
    
    public @~=(a : BitArray) : BitArray
    {
      a.Not()
    }
    
    public @|(a : BitArray, b : BitArray) : BitArray
    {
      def bits = BitArray(a);
      bits.Or(b)
    }
    
    public @&(a : BitArray, b : BitArray) : BitArray
    {
      def bits = BitArray(a);
      bits.And(b)
    }
    
    public @~(a : BitArray) : BitArray
    {
      def bits = BitArray(a);
      bits.Not()
    }
    
    public MakeLong(lo : uint, hi : uint) : ulong
    {
      def hi  = hi :> ulong;
      lo | (hi << 32)
    }
  }
}
