using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using SCG = System.Collections.Generic;


namespace Nemerle.Statechart
{
  using PseudoStateModelNode;
  using FsmState;
  using PseudoStateNode;
  using ListUtils;

  [Record]
  partial variant TransitionTarget
  {
    | Nowhere
    | Error { err : TransitionTarget }
    | Final
      {
        [NeedChange]
        state : FsmState;
      }
      
    | PseudoState
      {
        [NeedChange]
        node : PseudoStateNode;

        this(st : FsmState, node : TargetType.PseudoState)
        {
          //base(st.analyser);
          this.node = PseudoStateNode.Create(st, node.node);
        }

      }
      
    | State 
      {
        [NeedChange]
        state : FsmState;

        //Name : string
        //{
        //  get
        //  {
        //    $"$state"
        //  }
        //}

        
      }

    | Named
      {
        state : FsmState;
        name  : string;

        this(st : FsmState, type : TargetType.Named)
        {
          //base(st.analyser);
          state = st;//CreateState(type.parent, [], null);
          name = type.name;
        }

      }

    | Qualified 
      {
        parent : string;
        [NeedChange] target : TransitionTarget;

      }
      
    | Defer
      
      [Memoized]
      public ToHTarget : HTarget
      {
        get
        {
          match (this)
          {
            | TransitionTarget.Final(st)
            | State(st)      => HTarget.State(st.ToHState)
            | PseudoState(p) => HTarget.PseudoState(p.ToHPseudo)
            | Nowhere        => HTarget.Nowhere()
            | Defer          => HTarget.Defer()
            | _              => throw InvalidOperationException("invalid target")
          }
        }
      }
  }


}
