using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of StateMapRefs.
  /// </summary>
  partial class StateMap
  {

    ResolveReferences() : void
    {
      PseudoStates.Iter(x => UpdatePseudoStateReference(x, x.state));
      Transitions.Iter(x => UpdateTransitionReference(x, x.From));
    }

    ResolveLeftReferences() : void
    {
      def left = Transitions.Where(x => x.To is TransitionTarget.Qualified);
      foreach (tr in left)
      {
        UpdateTransitionReference(tr, tr.From)
      }
    }
    
    UpdatePseudoStateReference(p : PseudoStateNode, st : FsmState) : void
    {
      match (p)
      {
        | Initial(tran = tr)          => tr.Iter(UpdateTransitionReference(_, st))
        | EntryPoint(tran = tr)
        | ExitPoint(tran = Some(tr))
        | Join(transition = tr)
        | History(default = Some(tr)) => UpdateTransitionReference(tr, st)
        | Junction as p               => UpdateJunctionReference(p, st, null)
        | _                           => ()
      }
    }

    UpdateJunctionReference(p : PseudoStateNode.Junction, _st : FsmState, tran : StateTransition) : void
    {
      def check_target(t)
      {
        def tar = t.target;
        match (ResolveTarget(t.state, tar, tran))
        {
          | null => ()
          | nt    => t.target = nt;
        }
      }
      
      p.tree.Iter(null, check_target)
    }
    
    UpdateTransitionReference(tr : StateTransition, st : FsmState) : void
    {
      match (ResolveTarget(st, tr.To, tr))
      {
        | null => ()
        | t    => tr.To = t
      }
    }
    
    ResolvePseudoState(p : PseudoStateNode, st : FsmState) : PseudoStateNode
    {
      match (p)
      {                                             // get history from state
        | PseudoStateNode.History as h           => match (st.GetHistory(h))
                                                    {
                                                      | null => messager.AddError(FsmError.StateHasNotHistory(st)); null
                                                      | x    => x
                                                    }
        | Terminate as p                         => p // it is must be resolved
        | Junction(IsUnnamed = true) as j        => j
        | ExitPoint(n)                           => match (p.state.PartOfStateMachine)
                                                    {
                                                      | Some(st) => GetPseudoIn(n, st.AllPseudo)
                                                      | _        => GetPseudoIn(n, p.state.SuperStatesInclude)
                                                    }
                                                        
        | _                                      => match (p.NativeName) // find for name
                                                    {
                                                      | Some(p)   => GetPseudoIn(p, PseudoStates)
                                                      | _         => null
                                                    }
      }

    }
    
    TraverseQual(st : FsmState, tr : TransitionTarget, tran : StateTransition) : TransitionTarget
    {
      match (tr)
      {
        | Qualified(parent = par, target = t) => def res = GetQual(st, par, tran);
                                                 match (res, t)
                                                 {
                                                   | (null, _) => messager.AddError(FsmError.UnknownTarget(tran, tr)); TransitionTarget.Error(tr)
                                                   | (res, _)  => if (res.type is SubMachine(unresolved = true)) tr else TraverseQual(res, t, tran)
                                                 }
                                                 
        | Named(_, n)                         => match (GetNamed(n, st, tran, st)) 
                                                 {
                                                   | null => messager.AddError(FsmError.UnknownNode(tran, n));null
                                                   | t    => t
                                                 }
        | t                                   => ResolveTarget(st, t, tran)
      }
    }
    
    GetNamed(n : string, tran : StateTransition, st : FsmState, deflt : TransitionTarget) : TransitionTarget
    {
      match (GetNamed(n, null, tran, st))
      {
        | null => deflt
        | t    => t
      }
    }
    
    ResolveTarget(st : FsmState, tr : TransitionTarget, tran : StateTransition) : TransitionTarget
    {
      match (tr)
      {
        // TODO: продумать алгоритм разрешения неоднозначности из того в каком состояниии
        // осуществляется переход
        | Named(_, n)                         => match (GetNamed(n, null, tran, st))
                                                 {
                                                   | null => messager.AddError(FsmError.UnknownNode(tran, n)); null
                                                   | t    => t
                                                 }
        | Qualified                           => TraverseQual(st, tr, tran)
        | PseudoState(Fork as p) as t         => def tar = p.target;
                                                 def tar = tar.Map(x => match (ResolveTarget(p.state, x, tran))
                                                                        {
                                                                          | null => x
                                                                          | x    => x
                                                                        });
                                                 p.target = tar;
                                                 t
        | PseudoState(p) as t                 => match (ResolvePseudoState(p, st))
                                                 {
                                                   | null => messager.AddError(FsmError.UnknownTarget(tran, tr));null
                                                   | n    => t.ChangeNode(n)
                                                 }
        | State(s) as t                       => def name = s.NativeName;
                                                 match (Get(st, name))
                                                 {
                                                   | null => messager.AddError(FsmError.StateNotFound(tran, name));t
                                                   | s    => t.ChangeState(s)
                                                 }
        | _                                   => null // other skipped
      }
    }


  }
}
