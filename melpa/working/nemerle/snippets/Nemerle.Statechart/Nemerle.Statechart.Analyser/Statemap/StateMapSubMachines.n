using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of StateMapSubMachines.
  /// </summary>
  partial class StateMap
  {

    public LoadedMachines : Hashtable[string, StateNode.StateMachine] {get;set;}

    public SubMachines : IEnumerable[FsmState]
    {
      get
      {
        States.Where(x => x.type is StateType.SubMachine)
      }
    }

    LoadUsings(fsm : StateNode.StateMachine) : void
    {
      def map = Hashtable();
      foreach (u in fsm.usings)
      {
        match (StateMachinesInProj.Find((x, _) => x == u.from))
        {
          | Some(t) => map.Add(t)
          | _       => messager.AddError(FsmError.ExtStateMachineNotFound(u))
        }
      }
      LoadedMachines = map
    }

    Instantiate(instance : FsmState, machine : FsmState, index : int) : void
    {
      def state = machine;
      def st = instance;
      foreach (st in state.AllStates)
      {
        st.copy_num = index // set copy num for every sub state
      }
      state.AllPseudo.Iter(x => x.copy = index); // and its pseudo
      state.type = StateType.SubMachine(st.SubMachineType, false); // type is sub machine
      state.name = st.name; // copy name of source state
      state.entry += st.entry;
      state.exit  += st.exit;
      state.do_activity += st.do_activity;
      state.DefineTransitions(st.transitions); // copy transitions
      state.transitions.Iter(x => x.From = state); // set state as in machine
      state.Attributes = st.Attributes; // copy attributes
      foreach (point in st.ExitPoints)
      {
        when (point.tran is Some(t)) // transition from declaration assign to exit point in imported sub machine
          match (state.ExitPoints.Find(x => x.name == point.name))
          {
            | Some(e) => t.From = state; // source and from machine state
                         t.Source = state;
                         t.FromPseudo = Some(e); // from pseudo exit point in machine state
                         e.tran = Some(t);
            | _       => messager.AddError(FsmError.PseudoStateNotFound(point.Name))
          }
      }
      st.Super.Replace(st, state) // replace state in tree
    }

    RetargetTransitions(old : FsmState, nst : FsmState) : void
    {
      def old_st = old.AllStates.ToArray();
      def old_ps = old.AllPseudo.ToArray();
      def newst = nst.AllStates.ToArray();
      def new_ps = nst.AllPseudo.ToArray();
      def trans = nst.AllStates.SelectMany(x => x.transitions);
      
      def find_state(st)
      {
        def idx = old_st.IndexOf(st);
        def nst = if (idx != -1) newst[idx] else st;
        nst
      }
     
      def find_pseudo(st)
      {
        def idx = old_ps.IndexOf(st);
        def nst = if (idx != -1) new_ps[idx] else st;
        nst
      }
      
      foreach (ps in new_ps)
      {
        ps.Retarget(find_state, find_pseudo)
      }
      
      foreach (tr in trans)
      {
        tr.To = tr.To.Retarget(find_state, find_pseudo);
      }
    }
    
    public CreateInlinedSubMachines() : void
    {
      // try seek inline state here
      foreach (st when st.type is SubMachine(_, true) in SubMachines with i)
      {
        if (States.Find(x => x.name == st.SubMachineType) is Some(machine))
        {
          def copy = machine.Clone();
          copy.transitions = copy.transitions + st.transitions;
          foreach (st in copy.AllSubStates)
          {
            st.copy_num = i + 1// set copy num for every sub state
          }
          copy.name = st.name;
          copy.type = StateType.SubMachine(st.SubMachineType, false);
          copy.AllPseudo.Iter(x => x.copy = i + 1); // and its pseudo
          copy.transitions.Iter(x => { x.From = copy; x.Source = copy;});
          RetargetTransitions(machine, copy);
          st.Super.Replace(st, copy)
        } else
        {
          messager.AddError(FsmError.StateMachineNotFound(st.SubMachineType, st));
        }
      }
    }
    
    CreateSubMachines(fsm : StateNode.StateMachine) : void
    {
      LoadUsings(fsm);
      foreach (st in SubMachines with i)
      {
        when (LoadedMachines.Values.Find(x => x.name == st.SubMachineType) is Some(loaded))
        {
          def map = StateMap.CreateSub(analyser, loaded.state);
          def state = map.state_tree;
          state.AllStates.Iter(x => _ = Bind(x));
          Instantiate(st, state, i);
          
        }
      }
    }
  }
}
