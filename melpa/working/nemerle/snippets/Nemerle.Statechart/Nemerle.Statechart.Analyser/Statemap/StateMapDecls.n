using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of StateMapDecls.
  /// </summary>
  partial class StateMap
  {

    CreateAndResolvePreDecl(tar : TransitionTarget, tr : StateTransition, mach : bool = false) : TransitionTarget
    {
      def add_find_pseudo(tr, p)
      {
        def super = tr.StateObtainPseudoStateFromThis;
        p.state = super;
        def find = super.pseudo_states.FindTypeWhen(x => x.Name == p.Name);
        find.IfDefault(p, x => {super.AddPseudo(x);x.state = super})
      }
      
      match (tar)
      {
        | TransitionTarget.PseudoState(p) as t => 
              def p = match (p)
              {
                // search for terminate in automata
                | PseudoStateNode.Terminate as p => def pseudo = PseudoStates.FindType();
                                                    pseudo.IfDefault(p, x => state_tree.AddPseudo(x));
                | PseudoStateNode.Fork as p       => add_find_pseudo(tr, p)
                | Junction(IsUnnamed = true) as j => add_find_pseudo(tr, j)
                | ExitPoint(name = n) as p => 
                    def st = tr.From;
                    st.pseudo_states.FindTypeWhen(x => x.name == n).IfDefault(p, x => st.AddPseudo(x));
                // another pseudo state is not used
                | t => t
              }
              t.ChangeNode(p)
        | TransitionTarget.Named(st, n)  => GetNamed(n, tr, st, tar)
        
        | TransitionTarget.Final as t    => def st = tr.From; // begining of transition
                                      def super = st.Super; // if transition is initial use super this state or super state of this
                                        // search for final state in super
                                      if (super.IsTopState && !mach) CreateAndResolvePreDecl(TransitionTarget.PseudoState(PseudoStateNode.Terminate(0, state_tree)), tr, mach) else
                                      {
                                        def st = match (super.sub_states.Find(_.IsFinal))
                                        {
                                          // if find select it
                                          | Some(st) => st
                                          | _        => def fin = FsmState(analyser, StateType.Final()); // else create and add and select
                                                        fin.name = $"$(super)Final";
                                                        super.Add(fin);
                                                        fin
                                        }
                                      t.ChangeState(st)
                                      }
        | _ => null

      }
    }

    CheckRelocateTran(tr : StateTransition) : void
    {
      def relocate = tr.RelocateFrom;
      match (relocate)
      {
        | TransitionTarget.Nowhere => ()
        | TransitionTarget.PseudoState(PseudoStateNode.Join(joined_states = st)) => 
          def lst = st.Map(x => GetNamed(x.name, tr, tr.From, TransitionTarget.Named(tr.From, x.name)));
          if (lst.All(x => x is TransitionTarget.State))
          {
            def st = lst.Map(x => x.ToState);
            def pseudo = PseudoStateNode.Join(tr.Location, 0, tr.From, null, st, tr);
            tr.FromPseudo = Some(pseudo);
          } else
          {
            messager.AddError(FsmError.JoinMustHaveSourcesFromStates(lst, tr))
          }
        
        | TransitionTarget.PseudoState(PseudoStateNode(NativeName = Some(n))) => 
          match (GetPseudo(tr.From, n.SplitToList('.')))
          {
            | null                                        => messager.AddError(FsmError.RelocatePseudoNotFound(tr))
            | PseudoStateNode.ExitPoint(tran = Some) as p => messager.AddError(FsmError.RelocatePseudoAlreadyHaveTarget(tr, p))
            | PseudoStateNode.ExitPoint(state = st) as p  => tr.From.DeleteTransition(tr);
                                                             p.tran = Some(tr);
                                                             tr.FromPseudo = Some(p);
                                                             tr.From = st;
                                                             tr.Source = st;
                                                             tr.kind = TransitionKind.Local;
            | p                                           => messager.AddError(FsmError.RelocateSourceNotSupported(p))
          }
        
        | TransitionTarget.State(st) => tr.From.DeleteTransition(tr);
                                        st.transitions ::= tr;
                                        tr.From = st;
                                        tr.Source = st;
        | _ => ()
      }
    }

    CreatePreDecls(mach : bool = false) : void
    {
      def resolve(to, tr)
      {
        match (CreateAndResolvePreDecl(to, tr, mach))
        {
          | null => to
          | t    => t
        }
      }
      
      def tran = Transitions;
      def nested = Transitions.SelectMany(x => x.To.NestedTransitions);
      def pseudo = PseudoStates.SelectMany(x => x.NestedTransitions);
      def tran = tran.Concat(nested).Concat(pseudo);
      foreach (tr in tran)
      {
        tr.To = resolve(tr.To, tr);
        def tar = tr.RelocateFrom;
        def tar = resolve(tar, tr);
        tr.RelocateFrom = tar;
      }
      foreach (tr in Transitions) CheckRelocateTran(tr)
    }

  }
}
