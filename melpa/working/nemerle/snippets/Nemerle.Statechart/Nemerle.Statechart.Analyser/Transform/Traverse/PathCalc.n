using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of TraverseDecisionTree.
  /// </summary>
  class PathCalc
  {
    [Accessor]
    path : PathSequence = PathSequence();
    
    public static FindPath(src : list[HState],
                          dest : list[HState]) : list[HState] * list[HState]
    {
      def (ex, en) = src.RemoveDupFirst(dest, (x, y) => x == y : object);
      (ex.Rev(), en)
    }

    static GetEntryNode(st : HState) : IEnumerable[PathNode]
    {
      | HState(do_activity = do_act, entry = en) =>
              def act = en.Map(_.action);
              def en = act.Map(PathNode.Entry(st, _));
              def do_act = do_act.Select(PathNode.RunDoActivity(st, _));
              en.Concat(do_act)
    }

    static GetEntryPath(nodes : IEnumerable[HState]) : list[TranPath]
    {
      $[TranPath(st, GetEntryNode(st).NToList(), PathKind.Entry), st in nodes]
    }

    static GetActionPath(st : HState, act : IEnumerable[FsmAction]) : list[TranPath]
    {
      $[TranPath(st, PathNode.Action(st, a) :: [], PathKind.Action), a in act]
    }

    static GetExitNode(st : HState) : IEnumerable[PathNode]
    {
      def do_act = st.do_activity.Map(x => PathNode.StopDoActivity(st, x));
      def nodes = if (st.history.HasValue) PathNode.SaveHistory(st, st.history.Value) :: do_act; else do_act;
      def act = st.exit.Map(_.action);
      def exit = act.Select(PathNode.Exit(st, _));
      nodes.Concat(exit)
    }

    public static GetExitPath(nodes : IEnumerable[HState]) : list[TranPath]
    {
      $[TranPath(st, GetExitNode(st).NToList(), PathKind.Exit), st in nodes]
    }

    static GetPath(source : list[HState], target : list[HState]) : list[HState] * list[HState]
    {
      FindPath(source, target)
    }

    public static GetPath(source : list[HState], target : list[HState], st : HState, act : list[FsmAction]) : PathSequence
    {
      def (ex, en) = GetPath(source, target);
      def exit = GetExitPath(ex);
      def entry = GetEntryPath(en);
      def act = GetActionPath(st, act);
      def path = PathSequence();
      path.Add(exit);
      path.Add(act);
      path.Add(entry);
      path
    }

    public AddExit(src : IEnumerable[HState]) : void
    {
      def nodes = GetExitPath(src);
      path.Add(nodes)
    }
    
    public AddEntry(src : IEnumerable[HState]) : void
    {
      def nodes = GetEntryPath(src);
      path.Add(nodes)
    }
    
    public AddAction(st : HState, act : IEnumerable[FsmAction]) : void
    {
      def tran_path = GetActionPath(st, act);
      path.Add(tran_path);
    }
  }
}
