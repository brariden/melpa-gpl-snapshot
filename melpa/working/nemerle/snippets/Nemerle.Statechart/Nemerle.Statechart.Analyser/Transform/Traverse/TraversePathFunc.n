using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of TraversePathFunc.
  /// </summary>
  partial class TraversePath
  {
    public Source : ActiveStateConfig;
        
    tran_target   : HTarget;
    
    public tran_path   : TransitionPath;
    
    path : PathCalc = PathCalc();
    
    public Path : PathSequence
    {
      get
      {
        path.Path
      }
    }
    
    tree_trav : TraverseDecisionTree;

    public this(trav : TraversePath, source : ActiveStateConfig, tar : HTarget)
    {
      this.tree_trav = trav.tree_trav;
      tran_path = trav.tran_path;
      Source = source;
      tran_target = tar;
    }
    
    public this(source : ActiveStateConfig, tran_path : TransitionPath)
    {
      Source = source;
      this.tran_path = tran_path;
      tran_target = tran_path.transition.Target;
      tree_trav = TraverseDecisionTree(transition, path, this);
    }
    
    TargetStates : list[HState]
    {
      get
      {
        match (tran_target)
        {
          | HTarget.State(st)                          => st :: []
          | HTarget.PseudoState(HPseudoState.Fork(st)) => st
          | _                                          => []
        }
      }
    }
    
    Local : bool
    {
      get
      {
        tran_path.transition.Local || tran_target is HTarget.PseudoState
      }
    }
    
    [Memoized]
    SourceConfig : list[HState]
    {
      get
      {
        match (tran_source)
        {
          | State
          | HTarget.PseudoState(HPseudoState.Join) => Source.states
          | HTarget.PseudoState(p)                 => p.state.active_config
          | _                                      => []
        }
      }
    }

    [Memoized]
    FixedStates : list[HState]
    {
      get
      {
        if (Target != null)
        {
          def fixed_src = Source.states.Exclude(x => !x.regions.ContainsIn(FixedRegions));
          def fixed_tar = Target.states.Exclude(x => !x.regions.ContainsIn(FixedRegions));
          def intersection = fixed_src.Intersect(fixed_tar).NToList();
          def intersection = intersection.Exclude(x => MainSource.Exists(y => x.SameRegion(y)));
          intersection
        } else []
      }
    }
    
    [Memoized]
    SourceRegs : list[HState]
    {
      get
      {
        MainSourceConfig.SelectMany(_.regions).NToList()
      }
    }
    
    [Memoized]
    TargetRegs : list[HState]
    {
      get
      {
        if (TargetStates != null) TargetStates.SelectMany(_.regions).NToList() else []
      }
    }
    
    [Memoized]
    FixedRegions : list[HState]
    {
      get
      {
        SourceRegs.Intersect(TargetRegs).NToList()
      }
    }
    
    [Memoized]
    Target : ActiveStateConfig
    {
      get
      {
        if (!TargetStates.IsEmpty()) GetTargetConfig() else null
      }
    }

    [Memoized]
    TargetConfig : list[HState]
    {
      get
      {
        match (tran_target)
        {
          | HTarget.PseudoState(HPseudoState.Fork)
          | State                                  => Target.states
          | HTarget.PseudoState(null)              => []
          | HTarget.PseudoState(p)                 => p.state.active_config
          | _                                      => []
        }
      }
    }
    
    [Memoized]
    MainSourceConfig : list[HState]
    {
      get
      {
        MainSource.ActiveConfig()
      }
    }
    
    [Memoized]
    MainSource : list[HState]
    {
      get
      {
        match (tran_source)
        {
          | State(st)                                           => st :: []
          | HTarget.PseudoState(HPseudoState.Join(states = st)) => st
          | HTarget.PseudoState(p)                              => p.state :: []
          | _                                                   => []
        }
      }
    }
    
    [Memoized]
    public MainTarget : list[HState]
    {
      get
      {
        match (tran_target)
        {
          | HTarget.PseudoState(null) => []
          | PseudoState(HPseudoState.Fork(st)) => st
          | State(st)                 => st :: []
          | PseudoState(p)            => p.state :: []
          | _                         => []
        }
      }
    }
    
    [Memoized]
    public MainTargetConfig : list[HState]
    {
      get
      {
        MainTarget.ActiveConfig()
      }
    }
    
    IsInternal : bool
    {
      get
      {
        match (transition.Target)
        {
          | HTarget.Nowhere
          | HTarget.Defer => true
          | _             => false
        }
      }
    }
    
    transition : HTransition
    {
      get
      {
        tran_path.transition
      }
    }
    
    tran_source : HTarget
    {
      get
      {
        transition.Source
      }
    }
    
    [Memoized]
    LcaConfig : list[HState]
    {
      get
      {
        if (Lca != null) Lca.active_config else []
      }
    }
    
    [Memoized]
    Lca : HState
    {
      get
      {
        if (Local) MainSourceConfig.DupLast(MainTargetConfig) else
          MainSourceConfig.ChopLast().NToList().DupLast(MainTargetConfig.ChopLast().NToList())// TranTargetState
      }
    }

    [Memoized]
    ExitPath : list[HState]
    {
      get
      {
        def to_lca = SourceConfig.LastElems(Lca);
        def wo_fixed = to_lca.Exclude(FixedStates);
        wo_fixed.Reverse()
      }
    }
    
    [Memoized]
    EntryPath : list[HState]
    {
      get
      {
        def from_lca = TargetConfig.LastElems(Lca);
        def wo_fixed = from_lca.Exclude(FixedStates);
        wo_fixed
      }
    }
    
  }
}
