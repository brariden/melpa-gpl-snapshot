using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  partial class FsmAnalyser
  {

    InitStatechart() : void
    {
      InitFlags();
      statemap.Create(Fsm);
      //statemap.StateTree.name = FsmState.TopStateName; // change name
    }

    InitFlags() : void
    {
      def pflags = Fsm.flags;
      def flags = pflags.flags;
      // if testing, enable auto entry exit actions, transition completed event
      def flags = if (pflags.TestingFeatures) flags | MachineFlag.AutoEntryExitActions | MachineFlag.PropertyStateChanged | MachineFlag.TransitionCompleted 
                  else flags;
      FsmFlags = pflags.ChangeFlags(flags);
    }

    CreateBindings() : void
    {
      statemap.ChangeBind("States", _ => OnPropertyChanged("States"));
      statemap.ChangeBind("Transitions", _ => OnPropertyChanged("StateTransitions"));
      statemap.ChangeBind("PseudoStates", _ => OnPropertyChanged("PseudoStates"));
    }

    CreateStateMap() : void
    {
      InitStatechart();
      CreateBindings();

      when (Error) throw FsmErrorException();
      RenameDuplicates();
    }

    RenameDuplicates() : void
    {
      foreach (st when st.name != null && char.IsLower(st.name[0]) in States)
      {
        st.name = st.name.ToUpperFirst();
      }

      def dups = States.NToList().Duplicates(FsmState.NameComparer);
      def dups = dups.GroupBy(_.Name).NToList();

      foreach (st in dups)
      {
        foreach (st in st with i)
        {
          st.copy_num = i
        }
      }
    }

  }
}
