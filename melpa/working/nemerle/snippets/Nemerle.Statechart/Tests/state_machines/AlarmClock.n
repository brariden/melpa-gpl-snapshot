using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using System.Threading;

namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of AlarmClock.
  /// </summary>
  [statechart(
  <#
  flags auto_initial testing force_concurrent_combination;
  //flags debug;
  
  state Operations : Powered
  {
  }
  
  state Run : Operations
  {
    entry / set_am_pm;
    do / update_time;

    state DisplayCurrentTime
    {
      do / disp_cur_time_blink;
      push_hour                     => DisplayAlarmTime;
      push_min [in_state(AlarmOn)]  => Beep;
    }
    
    state CheckMode
    {
      push_hour, push_min, after (5 s) => DisplayCurrentTime;
      
      state DisplayAlarmTime
      {
        entry / disp_alarm_time;
      }
    
      state Beep
      {
        do / Beep;
      }
    }
    

    time_set  => TimeSet;
    alarm_set => AlarmSet;
  }
  
  state AlarmSet : Operations
  {
    entry / al_icon_on;
    entry / setup_time = alarm;
    exit  / al_icon_off;
    
    run / alarm = setup_time => Run;
    
    state SetupTime
    {
      state SetNormal
      {
        do / disp_cur_set_time;
        push_hour / UpdateHours;
        push_min  / UpdateMins;
        hold_hour => SetFastHour;
        hold_min  => SetFastMin;
      }
        
      state SetFast
      {
        release_hour, release_min => SetNormal;
            
        state SetFastHour
        {
          do / set_hour_fast;
        }

        state SetFastMin : SetFast
        {
          do / set_min_fast;
        }
      }
    
    }
   
  }
    
  state TimeSet : Operations
  {
    run / set_cur_time => Run;
    entry / setup_time = Now;
    
    state DisplayCurrentTime
    {
      submachine SetupTime
      {
        
      }
    }
  }
  #>)]
  partial public class AlarmClock
  {
    
    
    update_time(tok : CancellationToken) : void
    {
      while (!tok.IsCancellationRequested)
      {
        def pass = DateTime.Now - Now + diff;
        def old = Now;
        Now = Now.Add(pass);
        if (old.Hour >= 12 && Now.Hour < 12) pass_12_hours() else
        if (old.Hour < 12 && Now.Hour == 12) after_12_hours() else ();
        when (Now.Hour == alarm.Hour && Now.Minute == alarm.Minute && Now.Second == alarm.Second) current_time_is_alarm();
        _ = tok.WaitHandle.WaitOne(500);
      }
    }
    
    set_hour_fast(tok : CancellationToken) : void
    {
      while (!tok.IsCancellationRequested)
      {
        SetHour();
        _ = tok.WaitHandle.WaitOne(150);
      }
    }

    set_min_fast(tok : CancellationToken) : void
    {
      while (!tok.IsCancellationRequested)
      {
        SetMin();
        _ = tok.WaitHandle.WaitOne(100);
      }
    }
    
    set_cur_time() : void
    {
      Now = setup_time;
      diff = Now - DateTime.Now;
    }
    
    disp_setup_time() : void
    {
      OnShow(SetupTime)
    }
    
    disp_alarm_time() : void
    {
      OnShow(AlarmTime)
    }
    
    disp_cur_set_time(tok : CancellationToken) : void
    {
      while (!tok.IsCancellationRequested)
      {
        OnShow(if (blink) TimeString(setup_time) else "     ");
        set_am_pm(setup_time);
        _ = tok.WaitHandle.WaitOne(300);
      }
    }

    disp_cur_time_blink(tok : CancellationToken) : void
    {
      while (!tok.IsCancellationRequested)
      {
        OnShow(CurTime);
        _ = tok.WaitHandle.WaitOne(1000);
      }
    }
    
    UpdateHours() : void
    {
      setup_time = setup_time.AddHours(1);
    }
 
    UpdateMins() : void
    {
      def old = setup_time;
      def newt = setup_time.AddMinutes(1);
      setup_time = if (newt.Hour != old.Hour) newt.AddHours(old.Hour - newt.Hour) else newt;
    }
    
    defer_alarm() : void
    {
      alarm = Now + TimeSpan.FromMinutes(1)
    }
    
    SetHour() : void
    {
      UpdateHours();
      disp_setup_time(); 
      set_am_pm(setup_time);
    }
    
    SetMin() : void
    {
      UpdateMins();
      disp_setup_time(); 
      set_am_pm(setup_time);
    }
    
  }
}

