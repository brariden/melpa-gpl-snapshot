using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using System.Windows.Forms;
using System.Threading;

namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of FileFsmDialogs.
  /// </summary>
  [statechart(<#
  
  //flags : debug;
  
  save_as_pressed (=> FileDialogs.SaveChecking.save_as;
  exit_pressed    (=> Exiting;
  
  using SaveCheckingMachine; // include statemachine SaveChecking from SaveCheckingMachine class
  
  submachine SaveChecking : FileDialogs
  {
    _ => $0;
    exit: cancel => merge_cancel;
  }
  
  state FileDialogs
  {
    _      => Interface;
    cancel => Interface.H;
    
    state Opening
    {
      _ => final;
      
      submachine Checking[SaveChecking]
      {
        _ => OpenDialog;
        exit: cancel => merge_cancel;
      }
    }
    
    state OpenDialog : Opening
    {
      _ => $0;
      
      state ViewOpenDialog
      {
        do / ViewDialog(ViewOpenDialog);
        OK / CurFile = OpenDialog.FileName => OpenFile;
      }
      
      state OpenFile
      {
        do / DoActionComplete(OnOpenFileAction);
        OK => $0;
      }
    }
    
    state NewCreating
    {
      _ => NotSaved;
      
      submachine SaveChecking
      {
        _ => NewDialog;
        exit: cancel => merge_cancel;
      }
    }
    
    state NewDialog : NewCreating
    {
      _ => $0;
      
      state ViewNewDialog
      {
        do / DoActionComplete(ViewNewDialog);
        OK => NewDialogAction;
      }
      
      state NewDialogAction
      {
        do / DoActionComplete(OnNewFileAction);
        OK => $0;
      }
    }
    
    state Exiting
    {
      _ => X;
    }
    
    submachine Checking[SaveChecking] : Exiting
    {
      _ => $0;
      exit: cancel => merge_cancel;
    }
  }

  #>
  )]
  public partial class FileFsm
  {
    
    public sync : ISynchronizeInvoke {get;set;}
    

    ViewDialog(dlg : void -> DialogResult) : void
    {
      def res = dlg();
      match (res)
      {
        | DialogResult.OK     => OK()
        | DialogResult.Yes    => Yes()
        | DialogResult.No     => No()
        | DialogResult.Cancel => cancel()
        | _                   => ()
      }
    }
    
    DoActionComplete(act : void -> bool) : void
    {
      if (act()) OK() else cancel()
    }
    
    ViewOpenDialog() : DialogResult
    {
      sync.Sync(OpenDialog.ShowDialog)
    }

    ViewNewDialog() : bool
    {
      NewDialog == null || NewDialog()
    }

    OnOpenFileAction() : bool
    {
      OpenFileAction == null || OpenFileAction(CurFile)
    }

    OnNewFileAction() : bool
    {
      NewFileAction == null || NewFileAction()
    }

    public OpenDialog : OpenFileDialog {get;set;}
    
    CurFile   : string {get;private set;}
    public NewFileAction  : void -> bool {get;set;}
    public OpenFileAction : string -> bool {get;set;}
    
    public NewDialog  : void -> bool {get;set;}
    
  }
}
