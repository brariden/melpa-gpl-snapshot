using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of CodePad.
  /// </summary>
  [statechart(<#

  flags auto_initial testing;

  event num(int);

  state Locked
  {
    entry / lock_door;

    state Idle
    {
      
      $> / clear();
      num(n) / enter_room(n) => Interaction;
    }

    state Interaction
    {
      cancel / beep(10) => Idle;

      state EnteringRoomNumber
      {
        num(n) / enter_room(n);
        key / beep(11) => EnteringPassword;
        after (3 sec)  => InhabitantInteraction;
      }

      state EnteringPassword
      {
        entry / clear_pass view_dash;

        cancel / beep_fail => Idle;
        
        num(n) [password.Length == pass_length - 1] / enter_pass(n) => ${
                                                                          pass_ok            => Unlocked;
                                                                          else / beep_fail() => Idle;
                                                                        }
        num(n) [else] / enter_pass(n);
      }

      state InhabitantInteraction
      {
        enter_permitted => Unlocked;
        
        state Call
        {
          entry  / green_signal;
          exit   / red_signal;
          do / room_call;
          
          tube         => Talking;
          after (10 s) => Idle;
        }

        state Talking
        {
          tube        => Idle;
          after (15s) => Idle;
        }
      }
      
      
    }
  }

  @Locked: 
  {
    magnetic_key [key_ok] => Unlocked;
    inside_button         => Unlocked;
  }

  state Unlocked
  {
    do / beep_enter;
    entry / unlock_door;
    entry / clear;
    after (5s) => Locked;
  }
  #>)]
  public class CodePad
  {
    mutable room : string;
    mutable password : string;

    public max_width   : int {get;set;default 3}
    public pass_length : int {get;set;default 4}

    public known_passwords : Hashtable[int, string] {get;set; default Hashtable(array[(33, "0278"), (1, "1328"), (99, "1234")]) }

    pass_ok : bool
    {
      get
      {
        def room = int.Parse(room);
        match (known_passwords.Find(x => x.Key == room))
        {
          | Some(x) when x.Value == password => true
          | _                                => false
        }
      }
    }

    key_ok : bool
    {
      get
      {
        true
      }
    }

    clear() : void
    {
      room = "";
      clear_pass();
      OnShow(".");
    }

    clear_pass() : void
    {
      password = "";
    }

    view_dash() : void
    {
      OnShow("-----");
    }

    beep_fail() : void
    {
      Beep.Beep(100, 1000, 70);
      Beep.Beep(100, 1000, 70);
      Beep.Beep(100, 1000, 70);
    }

    beep(n : int) : void
    {
      def n = if (n == 0) 10 else n;
      def freq = 50 * n;
      Beep.Beep(100, 500 + freq, 150)
    }

    enter_room(n : int) : void
    {
      when (room.Length < max_width)
        room += n;
      beep(n);
      OnShow(room);
    }

    enter_pass(n : int) : void
    {
      when (password.Length < pass_length)
        password += n;
      beep(7);
    }

    room_call(tok : CancellationToken) : void
    {
      ret:
        {
        while (!tok.IsCancellationRequested)
        {
          for (mutable i; i < 10; i++)
          {
            if (tok.IsCancellationRequested) ret() else
            {
              Beep.Beep(100, 1000, 100);
              _ = tok.WaitHandle.WaitOne(10);
            }
          }
          _ = tok.WaitHandle.WaitOne(700);
        }
    }
    }

    beep_enter(tok : CancellationToken) : void
    {
      while (!tok.IsCancellationRequested)
      {
        Beep.Beep(100, 1000, 200);
        _ = tok.WaitHandle.WaitOne(200);
      }
    }

    OnShow(str : string) : void
    {
      Show?.Invoke(str)
    }

    public event Show : Action[string];
  }
}
