using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Threading;
using System.ComponentModel;

namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of SaveCheckingMachine.
  /// </summary>
  [statechart(<#
  
  //flags : debug;
  name SaveChecking;
  
  0 / IsNew = false => WantToSave;
  
  cancel => (X) cancel; // exit point cancel
  
  
  entry: save => Overwrite; // entry point syntax 1
  save_as:    => SaveAs;    // entry point syntax 2
  new: / IsNew = true => WantToSave;
  
  state WantToSave
  {
    do / ViewDialog(ViewWantToSave);
    Yes => {
             IsNew => SaveAs;
             else  => Overwrite;
           }
           
    No  => $0;
  }
    
  state Overwrite
  {
    do / ViewDialog(ViewOverwrite);
    Yes => SaveCurrentFile;
    No  => SaveAs;
  }
    
  state SaveCurrentFile
  {
    do / DoActionComplete(SaveCurrentFile);
    OK => $0;
  }
    
  state SaveAs
  {
    entry / SaveDialog.FileName = CurFile;
      
    do / ViewDialog(ViewSaveAsDialog);
    OK / CurFile = SaveDialog.FileName => SaveCurrentFile;
  }
  #>)]
  class SaveCheckingMachine
  {
    
    public sync : ISynchronizeInvoke {get;set;}
    
    ViewOverwrite() : DialogResult
    {
      MessageBox.Show("Want to overwrite file?", "Warning", MessageBoxButtons.YesNoCancel);
    }

    ViewWantToSave() : DialogResult
    {
      MessageBox.Show("Want to save file?", "Warning", MessageBoxButtons.YesNoCancel);
    }

    ViewDialog(dlg : void -> DialogResult) : void
    {
      def res = dlg();
      match (res)
      {
        | DialogResult.OK     => OK()
        | DialogResult.Yes    => Yes()
        | DialogResult.No     => No()
        | DialogResult.Cancel => cancel()
        | _                   => ()
      }
    }
    
    DoActionComplete(act : void -> bool) : void
    {
      if (act()) OK() else cancel()
    }

    ViewSaveAsDialog() : DialogResult
    {
      sync.Sync(SaveDialog.ShowDialog)
    }
    
    SaveCurrentFile() : bool
    {
      SaveFileAction == null || SaveFileAction(CurFile)
    }
    
    mutable IsNew : bool;
    public LastSaved : string {get;private set;}
    mutable CurFile   : string;
    public SaveDialog : SaveFileDialog {get;set;}
    public SaveFileAction : string -> bool {get;set;}
    
  }
}
