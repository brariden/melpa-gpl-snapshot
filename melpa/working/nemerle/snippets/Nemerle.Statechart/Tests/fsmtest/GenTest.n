using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of GenTest.
  /// </summary>
  class FsmTestGen
  {

    CreateEventWithParams(e : EventInfo, pars : list[string], fsm_name : string) : string
    {
      def name = e.name;

      def create_parm(p, t)
      {
        match (t)
        {
          | "string" => $<#"$p"#>
          | _        => p
        }
      }

      def pars = pars.Zip(e.parms).Map(create_parm);
      $<#$fsm_name.Event.$(name.ToUpperFirst())(..$(pars; ", "))#>
    }

    create_param(st : string, act : list[string]) : string
    {
      def (entry : list[string], other) = act.Partition(x => x.StartsWith("Entry"));
      def (exit : list[string], other)  = other.Partition(x : string => x.StartsWith("Exit"));
      def act : list[string] = other;
      
      def entry = entry.Map(x => x.TrimStart("Entry"));
      def exit  = exit.Map(x => x.TrimStart("Exit"));
      def st_equal = st == entry.Last();
      def entry = entry.Map(x => $<#"$x"#>);
      def act   = act.Map(x => $<#"$x"#>);
      def exit  = exit.Map(x => $<#"$x"#>);
      def ex_act_empty = exit.IsEmpty() && act.IsEmpty();
      def act = if (act.IsEmpty()) "" else $<#, [..$(act;", ")]#>;
      if (st_equal) 
      {
        def entry = $<#[..$(entry;", ")]#>;
        if (ex_act_empty) $<#[..$(entry;", ")]#> else $<#[..$(exit;", ")]$act, $entry#>
      } else 
      {
        def exit = $<#, [..$(exit;", ")]#>;
        def entry = $<#, [..$(entry;", ")]#>;
        if (ex_act_empty) $<#"$st"$entry#> else $<#"$st"$exit$entry#>
      }
    }

    get_event_variant2(e : ActionType, st : string, act : list[string]) : string
    {
      match (e)
      {
        | ActionType.Initiate => def str = create_param(st, act);
                                  $<#tester.Initiate($str);#>

        | SendEvent(e, pars)  => def str = if (act.IsEmpty()) "null" else create_param(st, act);
                                  def evt = if (pars.IsEmpty()) $<#"$e"#> else CreateEventWithParams(e, pars, fsm_name);
                                  $<#tester.Test($evt, $str);#>
        | _                   => ""
      }
    }

    is_exit_act_entry_pattern(act : list[string]) : bool
    {
      mutable entry = false;
        res :
          {
            foreach (act in act)
            {
              if (act.StartsWith("Entry")) entry = true; else
              when (act.StartsWith("Exit"))
              {
                when (entry) res(false)
              }
            }
          true
          }
    }

    have_actions(act : list[string]) : bool
    {
      def act = act.Exclude(x => x.StartsWith("Entry"));
      def act  = act.Exclude(x : string => x.StartsWith("Exit"));
      !act.IsEmpty()
    }
    
    GenerateTestMethods(act_type : ActionType, res : Result) : string
    {

      def state = res.state;
      def act = res.act;
      match (act_type)
      {
        | ActionType.Initiate => def is_normal_pattern = is_exit_act_entry_pattern(act);
                                 def have_act = have_actions(act);
                                 def gen2 = get_event_variant2(act_type, state, act);
                                 def gen1 = {
                                              def act = act.Map(x => $<#"$x"#>);
                                              $<#tester.Initiate("$state", ..$(act;", "));#>
                                            }
                                 if (!have_act && gen2.Length <= gen1.Length && is_normal_pattern) gen2 else gen1

        | SendEvent(ev, pars) => def is_normal_pattern = is_exit_act_entry_pattern(act);
                                  def gen2 = get_event_variant2(act_type, state, act);
                                  def gen1 = {
                                                def act = act.Map(x => $<#"$x"#>);
                                                def evt = if (pars.IsEmpty()) $<#"$(ev.name)"#> else CreateEventWithParams(ev, pars, fsm_name);
                                                $<#tester.Test($evt, "$state", ..$(act;", "));#>
                                              };
                                  if (gen2.Length <= gen1.Length && is_normal_pattern) gen2 else gen1;
        | SetProperty(n, v)   => $"fsm.$n = $v;"
        | Terminate           => "fsm.Terminate();"
        | _                   => ""
      }

    }

    fsm_name : string;
    history : list[ActionType * Result];

    public this(fsm_name : string, history : list[ActionType * Result])
    {
      this.fsm_name = fsm_name;
      this.history = history;
    }

    gen_out(e : ActionType, res : Result, a : list[string]) : list[string]
    {
      def act = res.act;
      def st = res.state;
      def res = $"[$st]" :: "Ok" :: a;
      match (e)
      {
        | ActionType.Initiate  => def res = act + res;
                                    //"Initiate state machine" :: 
                                    res
        | SendEvent(e, _)      => def res = act + res;
                                    $"Processing a '$(e.name)' " :: res
        | _                    => a
      }
    }

    public GenerateOutput(out_file : string) : void
    {
      def out_str = history.FoldBack([], ((act, r), a) => gen_out(act, r, a));
      def out_str = "/*" :: "BEGIN-OUTPUT" :: out_str + ["END-OUTPUT"] + ["*/"];
      File.WriteAllLines(out_file, out_str);
    }

    public GenerateTestMethods(code_file : string) : void
    {
      def str = history.Map(GenerateTestMethods);
      def str =  $"def fsm = $fsm_name();" :: "def tester = fsm.GetTester();" :: "tester.ConsoleTestInit();" :: str;
      File.WriteAllLines(code_file, str);
    }


  }
}
