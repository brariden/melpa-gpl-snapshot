using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing auto_initial;

  //flags debug;

  name "is in state";
  
  b => D;
  
   region A
   {
     state B
     {
       a => C;
     }
     
     state C
     {
       a => B;
       b => E;
     }
     
   } and
   {
     state D
     {
       c => F;
     }
     
     state F
     {
       
     }
   }
   
   state E
   {
     state G
     {
       
     }
     
     a => C;
   }
  #>)]
  public class example
  {
  }



module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("B|D", ["A", "B", "D"]);
    tester.Test("a", "C", ["B"], ["C"]);
    tester.Test("a", "D", ["C"], ["B"]);
    tester.Test("a", "A", ["B"], ["C"]);
    tester.Test("b", "E", ["D", "C", "A"], ["E", "G"]);
    tester.Test("a", "C", ["E"], ["A", "C", "D"]);
    tester.Test("c", "F", ["D"], ["F"]);
    tester.Test("b", "E", ["F", "C", "A"], ["E", "G"]);
    tester.Test("a", "C|D", ["E"], ["A", "C", "D"]);
    tester.Test("a", "B", ["C"], ["B"]);
    tester.Test("b", "D", ["D", "B", "A", "Top"], ["Top", "A", "B", "D"]);
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
EntryB
EntryD
[B|D]
Ok
Processing a 'a' 
ExitB
EntryC
[C|D]
Ok
Processing a 'a' 
ExitC
EntryB
[B|D]
Ok
Processing a 'a' 
ExitB
EntryC
[C|D]
Ok
Processing a 'b' 
ExitD
ExitC
ExitA
EntryE
EntryG
[G]
Ok
Processing a 'a' 
ExitG
ExitE
EntryA
EntryC
EntryD
[C|D]
Failed
Processing a 'c' 
ExitD
EntryF
[C|F]
Ok
Processing a 'b' 
ExitF
ExitC
ExitA
EntryE
EntryG
[G]
Ok
Processing a 'a' 
ExitG
ExitE
EntryA
EntryC
EntryD
[C|D]
Failed
Processing a 'a' 
ExitC
EntryB
[B|D]
Ok
Processing a 'b' 
ExitD
ExitB
ExitA
ExitTop
EntryTop
EntryA
EntryB
EntryD
[B|D]
Ok
END-OUTPUT
*/
