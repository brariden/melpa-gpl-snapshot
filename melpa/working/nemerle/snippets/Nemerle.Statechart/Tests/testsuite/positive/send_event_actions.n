using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  [Event]
  variant Events
  {
    | A
    | B
    | C
  }

  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing;
  name "several fsm signal transferring";
  //flags debug;
  
  event_class Events;
  
  state A
  {
    a / send_other(b);
    b => B;
  }

  state B
  {
    a => C;
    b / send(a);
  }
  
  state C
  {
    a => A;
    b => B;
  }
  #>)]
public class example
{
}

  [statechart(
  <#
  flags testing;
  name "several fsm signal transferring";
  
  event_class Events;
  
  state A
  {
    a => B;
    b => C;
  }

  state B
  {
    a => C;
    b => A;
  }
  
  state C
  {
    a => A;
    c / send_all(b);
    b => A;
  }
  #>)]
public class example2
{
}

module Test
{
  Main() : void
  {
    def fsm = example();
    def fsm2 = example2();
    def tester1 = fsm.GetTester();
    tester1.ConsoleTestInit();
    def tester2 = fsm2.GetTester();
    tester2.ConsoleTestInit();
    tester1.Initiate(["A"]);
    tester2.Initiate(["A"]);
    tester2.CheckAfterComplete("C", "ExitA", "EntryC");
    tester1.TestNotWait("a", null);
    tester2.WaitForComplete();
    tester1.SuppressPrint = true;
    tester2.SuppressPrint = true;
    tester1.CheckAfterComplete("B", "ExitA", "EntryB");
    tester2.TestWait("c", 500, "A", "ExitC", "EntryA");
    tester1.WaitForComplete();
    tester1.SuppressPrint = false;
    tester1.TestWait("b", 500, "C", "ExitB", "EntryC");
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
[A]
Ok
EntryA
[A]
Ok
Processing a 'a' 
[A]
Ok
ExitA
EntryC
[C]
Ok
Processing a 'c' 
Ok
Ok
Processing a 'b' 
ExitB
EntryC
[C]
Ok
END-OUTPUT
*/
