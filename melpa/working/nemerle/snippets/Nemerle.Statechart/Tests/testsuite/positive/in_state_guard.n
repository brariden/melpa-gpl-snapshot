using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing auto_initial;

  //flags debug;
    
   name "self transitions in region";
   
   state A
   {
     a [in_state(A)] => B;
   }
   
   region B
   {
     state C
     {
       b [in_state(E)] => A;
     }
   } and
   {
     state D
     {
       a => E;
     }
     
     state E
     {
       a => D;
     }
   }
   
  #>)]
  public class example
  {
  }



module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("A", "EntryA");
    tester.Test("a", "C|D", "ExitA", "EntryB", "EntryC", "EntryD");
    tester.Test("b", "C|D", );
    tester.Test("a", "C|E", "ExitD", "EntryE");
    tester.Test("b", "A", "ExitE", "ExitC", "ExitB", "EntryA");
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
[A]
Ok
Processing a 'a' 
ExitA
EntryB
EntryC
EntryD
[C|D]
Ok
Processing a 'b' 
[C|D]
Ok
Processing a 'a' 
ExitD
EntryE
[C|E]
Ok
Processing a 'b' 
ExitE
ExitC
ExitB
EntryA
[A]
Ok
END-OUTPUT
*/
