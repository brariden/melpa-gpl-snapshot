using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Console;
using Nemerle.Statechart;

  [statechart(<#

  flags testing;
  //flags debug;
  
  name "level conflict with else guards and deferrable event";
  
  state D
  {
    
    a, b / defer; // W: Transition "DeferrableEventaAtD" is overriden by \[TransitionBToCBya, TransitionAToEBya, TransitionCToBBya, TransitionEToBBya\], due to execute priority rules, because this transitions is always enabled
    
    state A
    {
      a [a2] => E;
      a [else] => E;
    
      state B
      {
        a [a1] => C;
      }

      state C
      {
        a => B;
        b => E;
      }
      
      state E
      {
        a => B;
      }
    }
  
  }
  #>)]
  public class example
  {
    public a1 : bool {get;set;}
    public a2 : bool {get;set;}
    public a3 : bool {get;set;}
  }

  module Test
  {
    Main() : void
    {
      def fsm = example();
      def tester = fsm.GetTester();
      tester.ConsoleTestInit(true);
      tester.Initiate("B", "EntryD", "EntryA", "EntryB");
      fsm.a1 = true;
      tester.Test("a", ["B"], ["C"]);
      tester.Test("a", ["C"], ["B"]);
      fsm.a1 = false;
      fsm.a2 = true;
      tester.Test("a", ["B", "A"], ["A", "E"]);
      tester.Test("b", null);
      tester.Test("a", ["E"], ["B"]);
      fsm.a1 = true;
      tester.TestWait("a", 100, "E", "ExitB", "EntryC", "ExitC", "EntryE");
      tester.Test("a", ["E"], ["B"]);
      fsm.a1 = false;
      fsm.a2 = false;
      tester.Test("a", ["B", "A"], ["A", "E"]);
      tester.Test("a", ["E"], ["B"]);
      tester.Test("b", null);
      tester.Test("a", ["B", "A"], ["A", "E"]);
      fsm.a1 = true;
      tester.Test("a", ["E"], ["B"]);
      tester.TestWait("a", 100, "E", "ExitB", "EntryC", "ExitC", "EntryE");
      fsm.Terminate();
    }
  }
  
/*
BEGIN-OUTPUT
EntryD
EntryA
EntryB
[B]
Ok
Processing a 'a' 
ExitB
EntryC
[C]
Ok
Processing a 'a' 
ExitC
EntryB
[B]
Ok
Processing a 'a' 
ExitB
ExitA
EntryA
EntryE
[E]
Ok
Processing a 'b' 
[E]
Ok
Processing a 'a' 
ExitE
EntryB
[B]
Ok
Processing a 'a' 
ExitB
EntryC
ExitC
EntryE
[E]
Ok
Processing a 'a' 
ExitE
EntryB
[B]
Ok
Processing a 'a' 
ExitB
ExitA
EntryA
EntryE
[E]
Ok
Processing a 'a' 
ExitE
EntryB
[B]
Ok
Processing a 'b' 
[B]
Ok
Processing a 'a' 
ExitB
ExitA
EntryA
EntryE
[E]
Ok
Processing a 'a' 
ExitE
EntryB
[B]
Ok
Processing a 'a' 
ExitB
EntryC
ExitC
EntryE
[E]
Ok
END-OUTPUT
*/
