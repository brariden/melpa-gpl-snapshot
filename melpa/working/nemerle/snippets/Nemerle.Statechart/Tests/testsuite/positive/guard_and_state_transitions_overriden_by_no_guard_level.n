using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

  /// <summary>
  /// Description of PathCover.
  /// </summary>
  [statechart(<#

  flags testing;

  name "guard and simple transitions overriden by no guard transition on several levels";
  
  state E
  {
    a => C; // W: Transition "TransitionEToCBya" is overriden by \[TransitionAToCBya\], due to execute priority rules, because this transitions is always enabled
    
    state D
    {

      a [a1] => C; // W: Transition "TransitionDToCBya" is overriden by \[TransitionAToCBya\], due to execute priority rules, because this transitions is always enabled

      state A
      {
        a       => C;
      }

    }

  }
  
  state C
  {
  }

  #>
  )]
  public class example
  {
    public a1 : bool {get;set;default true}
  }


module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("A", "EntryE", "EntryD", "EntryA");
    tester.Test("a", ["A", "D", "E"], ["C"]);
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryE
EntryD
EntryA
[A]
Ok
Processing a 'a' 
ExitA
ExitD
ExitE
EntryC
[C]
Ok
END-OUTPUT
*/
