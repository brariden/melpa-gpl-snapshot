using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

  [statechart(<#

  flags testing auto_initial;

  name "junction pseudostates with multiple actions, see UML Reference Manual p.432 Fig.14-170";

  state X
  {
    exit / p;

    f / d => T;

    state S
    {
      e => {
             / a => junc2;
           }
    }
  }

  junction junc2
  {
    / b => junc1;
  }

  state Y
  {
    entry / q;

    junction junc1
    {
      / c => T;
    }

    state T
    {
      ev1 => "X";
    }
  }

  #>)]
  public class example
  {

  }

 module Test
 {
   Main() : void
   {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("S", "EntryX", "EntryS");
    tester.Test("f", "T", "ExitS", "p", "ExitX", "d", "q", "EntryY", "EntryT");
    tester.Test("ev1", "S", "ExitT", "ExitY", "EntryX", "EntryS");
    tester.Test("e", "T", "ExitS", "a", "p", "ExitX", "b", "q", "EntryY", "c", "EntryT");
    fsm.Terminate();
   }
 }

/*
BEGIN-OUTPUT
EntryX
EntryS
[S]
Ok
Processing a 'f'
ExitS
p
ExitX
d
q
EntryY
EntryT
[T]
Ok
Processing a 'ev1'
ExitT
ExitY
EntryX
EntryS
[S]
Ok
Processing a 'e'
ExitS
a
p
ExitX
b
q
EntryY
c
EntryT
[T]
Ok
END-OUTPUT
*/
