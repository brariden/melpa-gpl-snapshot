using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Console;
using Nemerle.Statechart;
  /// <summary>
  /// Description of Hypothetical.
  /// </summary>
  [statechart(<#

  flags testing;
  //flags debug;

  name "deferable event taken if no transition is enabled";

  state B
  {
    a [a1] => C;
    a / defer;
    b => C;
  }

  state C
  {
    a => B;
  }

  #>)]
  public class example
  {
    public a1 : bool {get;set;}
  }

  module Test
  {
    Main() : void
    {
      def fsm = example();
      def tester = fsm.GetTester();
      tester.ConsoleTestInit();
      tester.Initiate("B", "EntryB");
      fsm.a1 = true;
      tester.Test("a", ["B"], ["C"]);
      tester.Test("a", ["C"], ["B"]);
      fsm.a1 = false;
      tester.Test("a", null);
      tester.TestWait("b", 100, "B", "ExitB", "EntryC", "ExitC", "EntryB");
      fsm.Terminate();
    }
  }
  
/*
BEGIN-OUTPUT
EntryB
[B]
Ok
Processing a 'a' 
ExitB
EntryC
[C]
Ok
Processing a 'a' 
ExitC
EntryB
[B]
Ok
Processing a 'a' 
[B]
Ok
Processing a 'b' 
ExitB
EntryC
ExitC
EntryB
[B]
Ok
END-OUTPUT
*/
