using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;
  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing;
  
  name "choice";
  
  state A
  {
    a [g1] / act1 => ${
                        g2 / act2   => B;
                        else / act3 => C;
                      }
  }
  
  state B
  {
    a => A;
    b / g3 = true;
  }
  
  state C
  {
    a => A;
  }
  #>)]
  public class example
  {
    public g2 : bool {get;set;}
    public g1 : bool {get;set;}
    public g3 : bool {get;set;}
    
    act1() : void
    {
      when (!g3) g2 = true;
    }
  }

  
module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("A", "EntryA");
    tester.Test("a", "A", );
    fsm.g1 = true;
    tester.Test("a", "B", "ExitA", "act2", "EntryB");
    tester.Test("b", "B", );
    tester.Test("a", "A", "ExitB", "EntryA");
    fsm.g2 = false;
    tester.Test("a", "C", "ExitA", "act3", "EntryC");
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
[A]
Ok
Processing a 'a' 
[A]
Ok
Processing a 'a' 
ExitA
act2
EntryB
[B]
Ok
Processing a 'b' 
[B]
Ok
Processing a 'a' 
ExitB
EntryA
[A]
Ok
Processing a 'a' 
ExitA
act3
EntryC
[C]
Ok
END-OUTPUT
*/
