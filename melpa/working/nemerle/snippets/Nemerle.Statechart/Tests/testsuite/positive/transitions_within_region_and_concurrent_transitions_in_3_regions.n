using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing;

  //flags debug;
  name "transitions within region and transition to region with 3 regions";
  
  b => D; // W: Transition "TransitionTopToDByb" is overriden by \[TransitionCToBByb, TransitionBToCByb\], due to execute priority rules, because this transitions is always enabled
  e => D;
  
   region A
   {
     state B
     {
       a => C;
       b => C;
     }
     
     state C
     {
       a => B;
       b => B;
     }
     
   } and
   {
     state D
     {
       a => F;
       c => F;
     }
     
     state F
     {
       a => D;
       c => D;
     }
   } and
   {
     state G
     {
       a => I;
       d => I;
     }
     
     state I
     {
       a => G;
       d => G;
     }
   }
   
  #>)]
  public class example
  {
  }



module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit(true);
    tester.Initiate("B|D|G", ["A", "B", "D", "G"]);
    tester.Test("a", "C|F|I", ["B", "D", "G"], ["C", "F", "I"]);
    tester.Test("a", "B|D|G", ["C", "F", "I"], ["B", "D", "G"]);
    tester.Test("b", "C|D|G", ["B"], ["C"]);
    tester.Test("b", "B|D|G", ["C"], ["B"]);
    tester.Test("c", "B|F|G", ["D"], ["F"]);
    tester.Test("c", "B|D|G", ["F"], ["D"]);
    tester.Test("d", "B|D|I", ["G"], ["I"]);
    tester.Test("d", "B|D|G", ["I"], ["G"]);
    tester.Test("b", "C|D|G", ["B"], ["C"]);
    tester.Test("d", "C|D|I", ["G"], ["I"]);
    tester.Test("d", "C|D|G", ["I"], ["G"]);
    tester.Test("c", "C|F|G", ["D"], ["F"]);
    tester.Test("d", "C|F|I", ["G"], ["I"]);
    tester.Test("a", "B|D|G", ["C", "F", "I"], ["B", "D", "G"]);
    tester.Test("b", "C|D|G", ["B"], ["C"]);
    tester.Test("c", "C|F|G", ["D"], ["F"]);
    tester.Test("d", "C|F|I", ["G"], ["I"]);
    tester.Test("d", "C|F|G", ["I"], ["G"]);
    tester.Test("a", "B|D|I", ["C", "F", "G"], ["B", "D", "I"]);
    tester.Test("c", "B|F|I", ["D"], ["F"]);
    tester.Test("a", "C|D|G", ["B", "F", "I"], ["C", "D", "G"]);
    tester.Test("c", "C|F|G", ["D"], ["F"]);
    tester.Test("a", "B|D|I", ["C", "F", "G"], ["B", "D", "I"]);
    tester.Test("d", "B|D|G", ["I"], ["G"]);
    
    tester.Test("a", "C|F|I", ["B", "D", "G"], ["C", "F", "I"]);
    tester.Test("e", "B|D|G", ["I", "F", "C", "A", "Top"], ["Top", "A", "B", "D", "G"]);
    tester.Test("a", "C|F|I", ["B", "D", "G"], ["C", "F", "I"]);
    tester.Test("b", "B|F|I", ["C"], ["B"]);
    tester.Test("e", "B|D|G", ["I", "F", "B", "A", "Top"], ["Top", "A", "B", "D", "G"]);
    tester.Test("b", "C|D|G", ["B"], ["C"]);
    tester.Test("c", "C|F|G", ["D"], ["F"]);
    tester.Test("d", "C|F|I", ["G"], ["I"]);
    tester.Test("e", "B|D|G", ["I", "F", "C", "A", "Top"], ["Top", "A", "B", "D", "G"]);    
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
EntryB
EntryD
EntryG
[B|D|G]
Ok
Processing a 'a' 
ExitB
ExitD
ExitG
EntryC
EntryF
EntryI
[C|F|I]
Ok
Processing a 'a' 
ExitC
ExitF
ExitI
EntryB
EntryD
EntryG
[B|D|G]
Ok
Processing a 'b' 
ExitB
EntryC
[C|D|G]
Ok
Processing a 'b' 
ExitC
EntryB
[B|D|G]
Ok
Processing a 'c' 
ExitD
EntryF
[B|F|G]
Ok
Processing a 'c' 
ExitF
EntryD
[B|D|G]
Ok
Processing a 'd' 
ExitG
EntryI
[B|D|I]
Ok
Processing a 'd' 
ExitI
EntryG
[B|D|G]
Ok
Processing a 'b' 
ExitB
EntryC
[C|D|G]
Ok
Processing a 'd' 
ExitG
EntryI
[C|D|I]
Ok
Processing a 'd' 
ExitI
EntryG
[C|D|G]
Ok
Processing a 'c' 
ExitD
EntryF
[C|F|G]
Ok
Processing a 'd' 
ExitG
EntryI
[C|F|I]
Ok
Processing a 'a' 
ExitC
ExitF
ExitI
EntryB
EntryD
EntryG
[B|D|G]
Ok
Processing a 'b' 
ExitB
EntryC
[C|D|G]
Ok
Processing a 'c' 
ExitD
EntryF
[C|F|G]
Ok
Processing a 'd' 
ExitG
EntryI
[C|F|I]
Ok
Processing a 'd' 
ExitI
EntryG
[C|F|G]
Ok
Processing a 'a' 
ExitC
ExitF
ExitG
EntryB
EntryD
EntryI
[B|D|I]
Ok
Processing a 'c' 
ExitD
EntryF
[B|F|I]
Ok
Processing a 'a' 
ExitB
ExitF
ExitI
EntryC
EntryD
EntryG
[C|D|G]
Ok
Processing a 'c' 
ExitD
EntryF
[C|F|G]
Ok
Processing a 'a' 
ExitC
ExitF
ExitG
EntryB
EntryD
EntryI
[B|D|I]
Ok
Processing a 'd' 
ExitI
EntryG
[B|D|G]
Ok
Processing a 'a' 
ExitB
ExitD
ExitG
EntryC
EntryF
EntryI
[C|F|I]
Ok
Processing a 'e' 
ExitI
ExitF
ExitC
ExitA
ExitTop
EntryTop
EntryA
EntryB
EntryD
EntryG
[B|D|G]
Ok
Processing a 'a' 
ExitB
ExitD
ExitG
EntryC
EntryF
EntryI
[C|F|I]
Ok
Processing a 'b' 
ExitC
EntryB
[B|F|I]
Ok
Processing a 'e' 
ExitI
ExitF
ExitB
ExitA
ExitTop
EntryTop
EntryA
EntryB
EntryD
EntryG
[B|D|G]
Ok
Processing a 'b' 
ExitB
EntryC
[C|D|G]
Ok
Processing a 'c' 
ExitD
EntryF
[C|F|G]
Ok
Processing a 'd' 
ExitG
EntryI
[C|F|I]
Ok
Processing a 'e' 
ExitI
ExitF
ExitC
ExitA
ExitTop
EntryTop
EntryA
EntryB
EntryD
EntryG
[B|D|G]
Ok
END-OUTPUT
*/
