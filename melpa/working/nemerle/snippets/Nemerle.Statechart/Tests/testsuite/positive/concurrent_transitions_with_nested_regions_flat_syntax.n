using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  /// <summary>
  /// Description of junction_example.
  /// </summary>
[statechart(
  <#
  flags testing;

  // flags debug;

  name "concurrent transitions with nested regions flat syntax";

  region J
  {

  }

  region A : J[0]
  {
  }

  state K : J[1]
  {
    a => L;
  }

  state L : J[1]
  {
    a => K;
  }

  state B : A[0]
  {
    a => C;
    b => C;
  }

  state C : A[0]
  {
    a => B;
    b => B;
  }

  state D : A[1]
  {
    a => F;
    c => F;
  }

  state F : A[1]
  {
    a => D;
    c => D;
  }
  #>)]
public class example
{
}



module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("B|D|K", ["J", "A", "K", "B", "D"]);
    tester.Test("b", "C|D|K", ["B"], ["C"]);
    tester.Test("b", "B|D|K", ["C"], ["B"]);
    tester.Test("c", "B|F|K", ["D"], ["F"]);
    tester.Test("c", "B|D|K", ["F"], ["D"]);
    tester.Test("a", "C|F|L", ["B", "D", "K"], ["L", "C", "F"]);
    tester.Test("c", "C|D|L", ["F"], ["D"]);
    tester.Test("a", "B|F|K", ["C", "D", "L"], ["K", "B", "F"]);
    tester.Test("b", "C|F|K", ["B"], ["C"]);
    tester.Test("a", "B|D|L", ["C", "F", "K"], ["L", "B", "D"]);
    tester.Test("c", "B|F|L", ["D"], ["F"]);
    tester.Test("a", "C|D|K", ["B", "F", "L"], ["K", "C", "D"]);
    tester.Test("c", "C|F|K", ["D"], ["F"]);
    tester.Test("a", "B|D|L", ["C", "F", "K"], ["L", "B", "D"]);
    tester.Test("b", "C|D|L", ["B"], ["C"]);
    tester.Test("a", "B|F|K", ["C", "D", "L"], ["K", "B", "F"]);
    tester.Test("b", "C|F|K", ["B"], ["C"]);
    tester.Test("c", "C|D|K", ["F"], ["D"]);
    tester.Test("a", "B|F|L", ["C", "D", "K"], ["L", "B", "F"]);
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryJ
EntryA
EntryK
EntryB
EntryD
[B|D|K]
Ok
Processing a 'b' 
ExitB
EntryC
[C|D|K]
Ok
Processing a 'b' 
ExitC
EntryB
[B|D|K]
Ok
Processing a 'c' 
ExitD
EntryF
[B|F|K]
Ok
Processing a 'c' 
ExitF
EntryD
[B|D|K]
Ok
Processing a 'a' 
ExitB
ExitD
ExitK
EntryL
EntryC
EntryF
[C|F|L]
Ok
Processing a 'c' 
ExitF
EntryD
[C|D|L]
Ok
Processing a 'a' 
ExitC
ExitD
ExitL
EntryK
EntryB
EntryF
[B|F|K]
Ok
Processing a 'b' 
ExitB
EntryC
[C|F|K]
Ok
Processing a 'a' 
ExitC
ExitF
ExitK
EntryL
EntryB
EntryD
[B|D|L]
Ok
Processing a 'c' 
ExitD
EntryF
[B|F|L]
Ok
Processing a 'a' 
ExitB
ExitF
ExitL
EntryK
EntryC
EntryD
[C|D|K]
Ok
Processing a 'c' 
ExitD
EntryF
[C|F|K]
Ok
Processing a 'a' 
ExitC
ExitF
ExitK
EntryL
EntryB
EntryD
[B|D|L]
Ok
Processing a 'b' 
ExitB
EntryC
[C|D|L]
Ok
Processing a 'a' 
ExitC
ExitD
ExitL
EntryK
EntryB
EntryF
[B|F|K]
Ok
Processing a 'b' 
ExitB
EntryC
[C|F|K]
Ok
Processing a 'c' 
ExitF
EntryD
[C|D|K]
Ok
Processing a 'a' 
ExitC
ExitD
ExitK
EntryL
EntryB
EntryF
[B|F|L]
Ok
END-OUTPUT
*/
