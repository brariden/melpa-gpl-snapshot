using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Console;
using Nemerle.Statechart;

  /// <summary>
  /// Description of PathCover.
  /// </summary>
  [statechart(
  <#
  flags testing;
  //flags debug;
  
  name "both histories and default transition";
  
  state A
  {
    b => B;
    (H*) => G;
    (H)  => F;
  }

  state D : A
  {
    c => G;
    d => A.H;
    e => A.H*;
  }

  state G : A
  {
    a => D;
  }

  state E : D
  {
    a => F;
  }
      
  state F : D
  {
    a => C;
  }
      
  state B
  {
    a => A.H;
    b => A.H*;
  }

  state C
  {
    a => A;
    b => B;
  }
  #>
  )]
  public class example
  {

  } 

  module Test
  {
    public Main() : void
    {
      def fsm = example();
      def tester = fsm.GetTester();
      tester.ConsoleTestInit();
      tester.Initiate("E", "EntryA", "EntryD", "EntryE");
      tester.Test("d", ["E", "D"], ["D", "F"]);
      tester.Test("e", ["F", "D"], ["G"]);
      tester.Test("b", ["G", "A"], ["B"]);
      tester.Test("a", ["B"], ["A", "G"]);
      tester.Test("a", ["G"], ["D", "E"]);
      tester.Test("a", ["E"], ["F"]);
      tester.Test("b", ["F", "D", "A"], ["B"]);
      tester.Test("b", ["B"], ["A", "D", "F"]);
      tester.Test("b", ["F", "D", "A"], ["B"]);
      tester.Test("a", ["B"], ["A", "D", "E"]);
      tester.Test("d", ["E", "D"], ["D", "E"]);
      tester.Test("e", ["E", "D"], ["D", "F"]);
      tester.Test("a", ["F", "D", "A"], ["C"]);
      tester.Test("a", ["C"], ["A", "D", "E"]);
      tester.Test("a", ["E"], ["F"]);
      tester.Test("a", ["F", "D", "A"], ["C"]);
      tester.Test("b", ["C"], ["B"]);
      tester.Test("a", ["B"], ["A", "D", "E"]);
      tester.Test("e", ["E", "D"], ["D", "F"]);
      fsm.Terminate();
    }
  }
  
/*
BEGIN-OUTPUT
EntryA
EntryD
EntryE
[E]
Ok
Processing a 'd' 
ExitE
ExitD
EntryD
EntryF
[F]
Ok
Processing a 'e' 
ExitF
ExitD
EntryG
[G]
Ok
Processing a 'b' 
ExitG
ExitA
EntryB
[B]
Ok
Processing a 'a' 
ExitB
EntryA
EntryG
[G]
Ok
Processing a 'a' 
ExitG
EntryD
EntryE
[E]
Ok
Processing a 'a' 
ExitE
EntryF
[F]
Ok
Processing a 'b' 
ExitF
ExitD
ExitA
EntryB
[B]
Ok
Processing a 'b' 
ExitB
EntryA
EntryD
EntryF
[F]
Ok
Processing a 'b' 
ExitF
ExitD
ExitA
EntryB
[B]
Ok
Processing a 'a' 
ExitB
EntryA
EntryD
EntryE
[E]
Ok
Processing a 'd' 
ExitE
ExitD
EntryD
EntryE
[E]
Ok
Processing a 'e' 
ExitE
ExitD
EntryD
EntryF
[F]
Ok
Processing a 'a' 
ExitF
ExitD
ExitA
EntryC
[C]
Ok
Processing a 'a' 
ExitC
EntryA
EntryD
EntryE
[E]
Ok
Processing a 'a' 
ExitE
EntryF
[F]
Ok
Processing a 'a' 
ExitF
ExitD
ExitA
EntryC
[C]
Ok
Processing a 'b' 
ExitC
EntryB
[B]
Ok
Processing a 'a' 
ExitB
EntryA
EntryD
EntryE
[E]
Ok
Processing a 'e' 
ExitE
ExitD
EntryD
EntryF
[F]
Ok
END-OUTPUT
*/
