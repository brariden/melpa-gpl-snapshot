using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

  [statechart(<#

  flags testing auto_initial;
  //flags debug;
  
  name "join transition with guards and actions 2";
  
  state A
  {
    a => B;
  }

  region B
  {
    join j1 [a1] / act => A;
    
    state E
    {
      a => F;
    }
    
    state F
    {
      a => j1;
    }
    
  } and
  {
    
    state D
    {
      a => C;
    }
    
    state C
    {
      a => j1;
    }
    
  }
  
  #>)]
  public class example
  {
    public a1 : bool {get;set;}
    
  }

  
  module Test
  {
    Main() : void
    {
      def fsm = example();
      def tester = fsm.GetTester();
      tester.ConsoleTestInit();
      tester.Initiate("A", "EntryA");
      tester.Test("a", "E|D", ["A"], ["B", "E", "D"]);
      tester.Test("a", "F|C", ["E", "D"], ["F", "C"]);
      tester.Test("a", null);
      fsm.a1 = true;
      tester.Test("a", ["C", "F", "B"], ["act"], ["A"]);
      fsm.Terminate();
    }
  }
 
/*
BEGIN-OUTPUT
EntryA
[A]
Ok
Processing a 'a' 
ExitA
EntryB
EntryE
EntryD
[E|D]
Ok
Processing a 'a' 
ExitE
ExitD
EntryF
EntryC
[F|C]
Ok
Processing a 'a' 
[F|C]
Ok
Processing a 'a' 
ExitC
ExitF
ExitB
act
EntryA
[A]
Ok
END-OUTPUT
*/
