using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;
  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing;

  //flags debug;

  name "transition to junction with action and guard";
  
   state A
   {
     a [g1] / action() => {
                            g2   => B;
                            else => C;
                          }
   }
   
   state B
   {
     a => A;
   }
   
   state C
   {
     a => A;
   }
   
  #>)]
  public class example
  {
    public g2 : bool {get;set;}
    public g1 : bool {get;set;}
    
  }



module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("A", "EntryA");
    tester.Test("a", null);
    fsm.g1 = true;
    tester.Test("a", ["A"], ["action"], ["C"]);
    tester.Test("a", ["C"], ["A"]);
    fsm.g2 = true;
    tester.Test("a", ["A"], ["action"], ["B"]);
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
[A]
Ok
Processing a 'a' 
[A]
Ok
Processing a 'a' 
ExitA
action
EntryC
[C]
Ok
Processing a 'a' 
ExitC
EntryA
[A]
Ok
Processing a 'a' 
ExitA
action
EntryB
[B]
Ok
END-OUTPUT
*/
