using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

  [statechart(<#

  flags testing auto_initial;
  //flags debug;
  
  name "fork transition";
  
  state A
  {
    a => C, F;
    b => B;
  }
    
  region B
  {
    _ => A;
    
    state C
    {
      a => D;
    }
    
    state D
    {
      a => $0;
    }
    
  } and
  {
    state E
    {
      a => F;
    }
    
    state F
    {
      a => $0;
    }
  }
  
  #>)]
  public class example
  {
  }

 module Test
 {
   Main() : void
   {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("A", "EntryA");
    tester.Test("a", "C|F", ["A"], ["B", "C", "F"]);
    tester.Test("a", "D|BSubRegion1Final", ["C", "F"], ["BSubRegion1Final", "D"]);
    tester.Test("a", "A", "ExitD", "EntryBSubRegion0Final", "ExitBSubRegion1Final", "ExitBSubRegion0Final", "ExitB", "EntryA");
    tester.Test("b", "C|E", ["A"], ["B", "C", "E"]);
    tester.Test("a", "D|F", ["C", "E"], ["D", "F"]);
    tester.Test("a", "A", "ExitD", "ExitF", "EntryBSubRegion0Final", "EntryBSubRegion1Final", "ExitBSubRegion1Final", "ExitBSubRegion0Final", "ExitB", "EntryA");
    fsm.Terminate();
   }
 }
 
/*
BEGIN-OUTPUT
EntryA
[A]
Ok
Processing a 'a' 
ExitA
EntryB
EntryC
EntryF
[C|F]
Ok
Processing a 'a' 
ExitC
ExitF
EntryBSubRegion1Final
EntryD
[D|BSubRegion1Final]
Ok
Processing a 'a' 
ExitD
EntryBSubRegion0Final
ExitBSubRegion1Final
ExitBSubRegion0Final
ExitB
EntryA
[A]
Ok
Processing a 'b' 
ExitA
EntryB
EntryC
EntryE
[C|E]
Ok
Processing a 'a' 
ExitC
ExitE
EntryD
EntryF
[D|F]
Ok
Processing a 'a' 
ExitD
ExitF
EntryBSubRegion0Final
EntryBSubRegion1Final
ExitBSubRegion1Final
ExitBSubRegion0Final
ExitB
EntryA
[A]
Ok
END-OUTPUT
*/
