using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Console;
using Nemerle.Statechart;
using System.Threading;
  /// <summary>
  /// Description of Hypothetical.
  /// </summary>
  [statechart(<#
  
  flags testing;
  
  name "coffee grinding with deferable events";
  
  state MachineIdle
  {
    turn_on => Preparing;
  }
  
  state Preparing
  {
    machine_ready / defer;
    do / grind_coffee;
    _ => Waiting;
  }
  
  state Waiting
  {
    machine_ready => Brewing;
  }
  
  state Brewing
  {
    do / brew_coffee;
    _ => MachineIdle;
  }
  
  #>)]
  public class example
  {
    brew_coffee(_ : CancellationToken) : void
    {
      Thread.Sleep(100)
    }
    
    grind_coffee(_ : CancellationToken) : void
    {
      Thread.Sleep(100)
    }
  }

  module Test
  {
    Main() : void
    {
      def fsm = example();
      def tester = fsm.GetTester();
      tester.ConsoleTestInit();
      tester.Initiate("MachineIdle", "EntryMachineIdle");
      tester.Test("turn_on", ["MachineIdle"], ["Preparing"]);
      tester.TestWait("machine_ready", 1000, "MachineIdle", "ExitPreparing", "EntryWaiting", "ExitWaiting", "EntryBrewing", "ExitBrewing", "EntryMachineIdle");
      tester.TestWait("turn_on", 1000, "Waiting", "ExitMachineIdle", "EntryPreparing", "ExitPreparing", "EntryWaiting");
      tester.TestWait("machine_ready", 1000, "MachineIdle", "ExitWaiting", "EntryBrewing", "ExitBrewing", "EntryMachineIdle");
      fsm.Terminate();
    }
  }
/*
BEGIN-OUTPUT
EntryMachineIdle
[MachineIdle]
Ok
Processing a 'turn_on' 
ExitMachineIdle
EntryPreparing
[Preparing]
Ok
Processing a 'machine_ready' 
ExitPreparing
EntryWaiting
ExitWaiting
EntryBrewing
ExitBrewing
EntryMachineIdle
[MachineIdle]
Ok
Processing a 'turn_on' 
ExitMachineIdle
EntryPreparing
ExitPreparing
EntryWaiting
[Waiting]
Ok
Processing a 'machine_ready' 
ExitWaiting
EntryBrewing
ExitBrewing
EntryMachineIdle
[MachineIdle]
Ok
END-OUTPUT
*/
