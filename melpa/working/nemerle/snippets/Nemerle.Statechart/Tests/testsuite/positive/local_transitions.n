using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Console;
using Nemerle.Statechart;

  /// <summary>
  /// Description of Hypothetical.
  /// </summary>
  [statechart(<#
  
  flags testing;
  
  name "local transitions";
  
  state A
  {
    b (=> D;
  }
  
  state B : A
  {
    state C
    {
      a (=> A;
    }
    
    state D
    {
      a => C;
    }
  }
  
  #>)]
  public class example
  {
    foo : bool {get;set;}
  }

  module Test
  {
    public Main() : void
    {
      def fsm = example();
      def tester = fsm.GetTester();
      tester.ConsoleTestInit();
      tester.Initiate("C", "EntryA", "EntryB", "EntryC");
      tester.Test("a", ["C", "B"], ["B", "C"]);
      tester.Test("b", ["C", "B"], ["B", "D"]);
      tester.Test("a", ["D"], ["C"]);
      tester.Test("b", ["C", "B"], ["B", "D"]);
      fsm.Terminate();
    }
  }
  
/*
BEGIN-OUTPUT
EntryA
EntryB
EntryC
[C]
Ok
Processing a 'a' 
ExitC
ExitB
EntryB
EntryC
[C]
Ok
Processing a 'b' 
ExitC
ExitB
EntryB
EntryD
[D]
Ok
Processing a 'a' 
ExitD
EntryC
[C]
Ok
Processing a 'b' 
ExitC
ExitB
EntryB
EntryD
[D]
Ok
END-OUTPUT
*/
