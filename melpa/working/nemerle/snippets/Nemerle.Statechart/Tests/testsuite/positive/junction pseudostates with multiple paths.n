using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

  [statechart(<#

  flags testing auto_initial;
  //flags debug;
  
  name "junction pseudostates with multiple paths, see UML Reference Manual p.432 Fig.14-169";
  
  e1 => P;
  e2 => Q;
  
  junction junc1
  {
    n == 0 / c => U;
    n > 0  / d => V;
  }
  
  state P
  {
    g / a => junc1;
  }
  
  state Q
  {
    h [m > 0] / b => junc1;
  }
  
  state U
  {
  }
    
  state V
  {
  }
  
  #>)]
  public class example
  {
    public n : int {get;set;}
    public m : int {get;set;}
  }

 module Test
 {
   Main() : void
   {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("P", "EntryP");
    tester.Test("g", "U", "ExitP", "a", "c", "EntryU");
    tester.Test("e2", "Q", "ExitU", "ExitTop", "EntryTop", "EntryQ");
    tester.Test("h", "Q", );
    fsm.m = 1;
    tester.Test("h", "U", "ExitQ", "b", "c", "EntryU");
    fsm.n = 1;
    tester.Test("e1", "P", "ExitU", "ExitTop", "EntryTop", "EntryP");
    tester.Test("g", "V", "ExitP", "a", "d", "EntryV");
    tester.Test("e2", "Q", "ExitV", "ExitTop", "EntryTop", "EntryQ");
    tester.Test("h", "V", "ExitQ", "b", "d", "EntryV");
    fsm.Terminate();
   }
 }
 
/*
BEGIN-OUTPUT
EntryP
[P]
Ok
Processing a 'g' 
ExitP
a
c
EntryU
[U]
Ok
Processing a 'e2' 
ExitU
ExitTop
EntryTop
EntryQ
[Q]
Ok
Processing a 'h' 
[Q]
Ok
Processing a 'h' 
ExitQ
b
c
EntryU
[U]
Ok
Processing a 'e1' 
ExitU
ExitTop
EntryTop
EntryP
[P]
Ok
Processing a 'g' 
ExitP
a
d
EntryV
[V]
Ok
Processing a 'e2' 
ExitV
ExitTop
EntryTop
EntryQ
[Q]
Ok
Processing a 'h' 
ExitQ
b
d
EntryV
[V]
Ok
END-OUTPUT
*/
