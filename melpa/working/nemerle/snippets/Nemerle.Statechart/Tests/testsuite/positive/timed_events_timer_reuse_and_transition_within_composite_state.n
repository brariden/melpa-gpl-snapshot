using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;
using System.Console;
using System.Diagnostics;

  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing auto_initial;

  //flags debug;

  name "after timer reuse and after transition within composite state";
  
   state A
   {
     after (1s) / check_time(200, 400) => C;
     
     state B
     {
       entry / start_time;
       after (700 ms) / check_time(500, 800) => D;
       after (500 ms) / check_time(400, 600);
     }
     
     state D
     {
       entry / start_time;
     }
     
   }
   
  state C
  {
    entry / start_time;
    a => A;
    after (500 ms) / check_time(400, 600);
  }
  
   #>)]
  public class example
  { 
    time : Stopwatch = Stopwatch();
    
    start_time() : void
    {
      time.Stop();
      time.Reset();
      time.Start();
    }
    
    check_time(start : int, end : int) : void
    {
      time.Stop();
      def ms = time.ElapsedMilliseconds;
      if (ms > start && ms < end) WriteLine("OK") else WriteLine("Fail")
    }
  }



module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("C", 2000, "EntryA", "EntryB", "ExitB", "EntryD", "ExitD", "ExitA", "EntryC");
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
EntryB
OK
ExitB
OK
EntryD
ExitD
ExitA
OK
EntryC
[C]
Ok
END-OUTPUT
*/
