using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Peg;
using Nemerle;
using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  using StateNode;  
  //using TransitionNode;
  using PseudoStateModelNode;
  using GuardNode;
  using ListUtils;

  public partial class FsmParser
  {

    get_state_qualified_target(name : NameIdentifier) : TargetType
    {
      | Name(name = n)           => TargetType.Named(name.pos, n)
      | QualifiedName(parts = p, name = n) => 
                                    def st = $<#..$(p;".")#>;
                                    TargetType.Qualified(name.pos, st, TargetType.Named(name.pos, n))

    }

    qualified_target(cm1 : NToken, name : NameIdentifier, cm2 : NToken, _ : NToken) : TargetType
    {
      def pos = name.pos;
      def braces = !cm1.IsEmpty && !cm2.IsEmpty;
      
      def get_target(n)
      {
        if (braces) TargetType.Named(name.pos, n) else
        match (n)
        {
          | "history"  with hist = HistoryType.None
          | "H"  with hist = HistoryType.Shallow
          | "h"  with hist = HistoryType.Shallow
          | "h*" with hist = HistoryType.Deep
          | "H*" with hist = HistoryType.Deep => TargetType.PseudoState(pos, PseudoStateModelNode.History(pos, hist, None()))
          | "final"
          | "$0"       => TargetType.Final(pos)
          | "self"
          | "@"        => TargetType.Self(pos)
          | "terminate"
          | "x"
          | "X"        => TargetType.PseudoState(name.pos, PseudoStateModelNode.Terminate(0))
          | x when (x.IndexOf('(') != -1 ) => 
                def n = string(n.Explode().Except(['(', ')']).ToArray());
                TargetType.Named(name.pos, n)
          | _                      => TargetType.Named(name.pos, n)
        }
      }

      match (name)
      {
        | Name(name = n)                     => get_target(n)
        | QualifiedName(parts = p, name = n) => 
            def st = $<#..$(p;".")#>;
            TargetType.Qualified(name.pos, st, get_target(n))
      }
    }

    exit_point_target(id : NameIdentifier, _ : NToken) : TargetType
    {
      def pos = id.pos;
      TargetType.PseudoState(pos, PseudoStateModelNode.ExitPoint(pos, id.name, None()))
    }

    fork_trans_target(_ : NToken, first : NameIdentifier, second : NameIdentifier, lst : List[NameIdentifier], _ : NToken, _ : NToken) : TargetType
    {
      def targets = first :: second :: lst.NToList();
      def targets = targets.Map(get_state_qualified_target);
      TargetType.PseudoState(first.pos, PseudoStateModelNode.Fork(first.pos, targets))
    }

    fork_alt_target(reg : NameIdentifier, _ : NToken, first : NToken, lst : List[NToken], _ : NToken, _ : NToken) : TargetType
    {
      def pos = reg.pos;
      def targets = first :: lst.NToList();
      def targets = targets.Map(x => TargetType.Named(x.StartPos, GetText(x)));
      def target = TargetType.PseudoState(pos, PseudoStateModelNode.Fork(pos, targets));
      match (reg)
      {
        | Name(name = n)           => TargetType.Qualified(pos, n, target)
        | QualifiedName as t => def st = t.FullName;
                                TargetType.Qualified(pos, st, target)
      }
    }

    join_alt_tran(_ : NToken, parent : NameIdentifier, _tok : NToken, id : NToken, lst : List[NToken], _ : NToken, _ : NToken, tran : StateNode.Transition) : StateNode.Transition
    {
      def lst = id :: lst.NToList();
      def lst = lst.Map(x => parent.Add(GetText(x)));
      def pos = parent.pos;
      def tar = TargetType.PseudoState(pos, PseudoStateModelNode.Join(pos, null, lst, tran));
      StateNode.Transition(pos, tar, tran.evt, tran.guard, tran.action, tran.to, TransitionKind.External)
    }

    join_relocate_tran(_ : NToken, tok : NToken, id : NameIdentifier, lst : List[NameIdentifier], _ : NToken, _ : NToken, tran : StateNode.Transition) : StateNode.Transition
    {
      def lst = id :: lst.NToList();
      def pos = tok.StartPos;
      def tar = TargetType.PseudoState(pos, PseudoStateModelNode.Join(pos, null, lst, tran));
      StateNode.Transition(pos, tar, tran.evt, tran.guard, tran.action, tran.to, TransitionKind.External)
    }

    default_transition(act : Actions, target : TargetType) : StateNode.Transition
    {
      def act = if (act.Empty) None() else Some(act);
      def pos = target.pos;
      StateNode.Transition(pos, TargetType.NoTarget(pos), [], GuardNode.Empty(-1), act, target, TransitionKind.Local)
    }

    simple_event(id : NToken) : TransitionEvent
    {
      create_event(id, [])
    }

    events(evt : TransitionEvent, lst : List[NToken * TransitionEvent]) : List[TransitionEvent]
    {
      def lst = lst.Map((_, x) => x);
      def lst = evt :: lst;
      lst.ToList()
    }
    
    check_err(expr : IEnumerable[double * NToken]) : string
    {
      mutable hours = false;
      mutable min = false;
      mutable sec = false;
      mutable msec = false;
      mutable ticks = false;
      mutable days = false;
      ret :
        {
      foreach ((_, u) in expr)
      {
        def u = GetText(u);
        match (u)
        {
          | "days"
          | "d"            => if (days) ret(u) else days = true;
          | "sec"
          | "s"
          | "secs"
          | "seconds"      => if (sec) ret(u) else sec = true;
          | "msec"
          | "ms"
          | "milliseconds" => if (msec) ret(u) else msec = true;
          | "min"
          | "m"
          | "minutes"      => if (min) ret(u) else min = true;
          | "hours"
          | "h"            => if (hours) ret(u) else hours = true;
          | "ticks"
          | "t"            => if (ticks) ret(u) else ticks = true;
          | _              => ()
        }
      }
      null
    }
    }

    simple_time_expr(expr : List[double * NToken]) : TimedExpr
    {

      match (check_err(expr)) 
      {
        | null => 
          try
          {
            def ret(t)
            {
              TimedExpr.Expr(TimedExprType.After(t))
            }

            def get_value(t, u)
            {
              match (GetText(u))
              {
                | "d"
                | "days"         => ret(TimeSpan.FromDays(t))
                | "sec"
                | "s"
                | "secs"
                | "seconds"      => ret(TimeSpan.FromSeconds(t))
                | "msec"
                | "ms"
                | "milliseconds" => ret(TimeSpan.FromMilliseconds(t))
                | "min"
                | "m"
                | "minutes"      => ret(TimeSpan.FromMinutes(t))
                | "hours"
                | "h"            => ret(TimeSpan.FromHours(t))
                | "ticks"
                | "t"            => ret(TimeSpan.FromTicks(t :> long))
                | u              => TimedExpr.Error(TimedErrorType.UnknownUnit(u))
              }

            }

            def accumulate(x : TimedExpr, y : TimedExpr)
            {
              | (TimedExpr.Expr(TimedExprType.After(a)), TimedExpr.Expr(TimedExprType.After(b))) => ret(a + b)
              | _                                                                                => TimedExpr.Error(TimedErrorType.InvalidValue())
            }

            def vals = expr.Map(get_value);
            match (vals.Find(x => x is TimedExpr.Error))
            {
              | Some(e) => e
              | _       => vals.Reduce(accumulate)
            }
          }
          catch
          {
            | OverflowException => TimedExpr.Error(TimedErrorType.Overflow())
            | ArgumentException => TimedExpr.Error(TimedErrorType.InvalidValue())
          }
        
        | str  => TimedExpr.Error(TimedErrorType.DuplicateUnit(str))
      }

    }

    full_time_expr(text : NToken) : TimedExpr
    {
      try
      {
        def time = TimeSpan.Parse(GetText(text));
        TimedExpr.Expr(TimedExprType.After(time))
      }
      catch
      {
        | FormatException   => TimedExpr.Error(TimedErrorType.InvalidValue())
        | OverflowException => TimedExpr.Error(TimedErrorType.Overflow())
      }
    }

    timed_after_event(tok : NToken, _ : NToken, expr : TimedExpr, _ : NToken) : TransitionEvent
    {
      TransitionEvent.Timed(tok.StartPos, expr)
    }

    event_with_parms(name : NToken, _ : NToken, type : NToken, parms : List[NToken], _ : NToken) : TransitionEvent
    {
      TransitionEvent.Normal(name.StartPos, GetText(name), GetText(type) :: parms.Map(GetText))
    }

    ext_trans_body(act : Actions, to : TargetType) : StateNode.Transition
    {
      def pos = act.pos;
      def act = if (act.Empty) None() else Some(act);
      StateNode.Transition(pos, TargetType.NoTarget(pos), [], GuardNode.Empty(), act, to, TransitionKind.External)
    }

    ext_transition(evt : List[TransitionEvent], guard : option[GuardNode], body : StateNode.Transition) : StateNode.Transition
    {
      def pos = evt.First().pos;
      def guard = guard.WithDefault(GuardNode.Empty(-1));
      Transition(pos, TargetType.NoTarget(pos), evt.NToList(), guard, body.action, body.to, TransitionKind.External)
    }

    local_trans(evt : List[TransitionEvent], guard : option[GuardNode], act : Actions, to : TargetType) : StateNode.Transition
    {
      def pos = evt.First().pos;
      def act = if (act.Empty) None() else Some(act);
      def guard = guard.WithDefault(GuardNode.Empty(-1));
      Transition(pos, TargetType.NoTarget(pos), evt.NToList(), guard, act, to, TransitionKind.Local)
    }

    internal_trans(evt : List[TransitionEvent], guard : option[GuardNode], acts : Actions) : StateNode.Transition
    {
      def pos = if (evt.Count() != 0) evt.First().pos else -1;
      def guard = guard.WithDefault(GuardNode.Empty(-1));
      Transition(pos, TargetType.NoTarget(pos), evt.NToList(), guard, Some(acts), TargetType.NoTarget(pos), TransitionKind.Internal)
    }

    deferrable_evts(lst : List[TransitionEvent], tok : NToken, _ : NToken, _ : NToken) : StateNode.Defer
    {
      Defer(tok.StartPos, lst.NToList())
    }

    deferred_evts(tok : NToken, _ : NToken, lst : List[TransitionEvent], _ : NToken) : StateNode.Defer
    {
      Defer(tok.StartPos, lst.NToList())
    }

    relocate_pseudo_tran(_ : NToken, n : NameIdentifier, _ : NToken, tran : StateNode.Transition) : StateNode.Transition
    {
      def pos = n.pos;
      def tar = TargetType.PseudoState(pos, PseudoStateModelNode.EntryPoint(pos, n.FullName, null));
      StateNode.Transition(pos, tar, [], GuardNode.Empty(), tran.action, tran.to, TransitionKind.External)
    }

    relocate_st_tran(_ : NToken, n : NameIdentifier, _ : NToken, tran : StateNode.Transition) : StateNode.Transition
    {
      def pos = n.pos;
      def tar = TargetType.Named(pos, n.FullName);
      StateNode.Transition(n.pos, tar, tran.evt, tran.guard, tran.action, tran.to, tran.kind)
    }

    _normal_transition(tr : StateNode.Transition) : StateNode
    {
      tr
    }
    
    combined_rel_tran(tok : NToken, name : NameIdentifier, _ : NToken, _ : NToken, lst : List[StateNode.Transition], _ : NToken) : StateNode
    {
      def pos = tok.StartPos;
      def tar = TargetType.Named(pos, name.FullName);
      def lst = lst.Map(x => x.ChangeFrom(tar));
      StateNode.Sequence(pos, lst)
    }
    
    evt_class_list(_ : NToken, evts : List[NToken * NToken], _ : NToken) : list[string]
    {
      evts.Map((x, _) => GetText(x))
    }
    
    event_class(tok : NToken, name : NameIdentifier, evts : option[list[string]], _ : NToken) : StateNode
    {
      StateNode.EventClassDecl(tok.StartPos, name, evts.WithDefault([]))
    }
  }
}
