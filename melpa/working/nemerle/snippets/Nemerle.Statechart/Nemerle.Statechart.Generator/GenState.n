using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of GenState.
  /// </summary>
  [Record]
  class GenState
  {
    gen : StaticGenerator;
    st : HState;
    ty : TypeBuilder;
    
    id_type : PExpr
    {
      get
      {
        gen.StateIdType
      }
    }
    
    id_expr : PExpr
    {
      [Memoize]
      get
      {
        def (expr, _) = gen.GetId(st.Id);
        expr
      }
    }
    
    ClassBody : ClassMember.TypeDeclaration
    {
      get
      {
        <[ variant_option: |  $(st.name : usesite)
                      {
                          public override get_id() : $id_type { $id_expr }

                          public static Id() : $id_type
                          {
                              $id_expr
                          }

                          public override ToString() : string
                          {
                              $(st.name)
                          }
                      } 
                   ]>;
      }
    }
    
    public Emit() : TypeBuilder
    {
      def ty = gen.DefineNested(ty, ClassBody);
      //gen.DefineTransitions(ty, st);
      ty
    }
  }
}
