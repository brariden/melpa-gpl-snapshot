using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of States.
  /// </summary>
  [Record]
  class States
  {
    gen : StaticGenerator;
    [RecordIgnore]
    mutable ty : TypeBuilder;

    id_type : PExpr
    {
      get
      {
        gen.StateIdType
      }
    }

    default_id : PExpr
    {
      get
      {
        gen.StateIdDefaultValue
      }
    }

    top : ClassMember.TypeDeclaration
    {
      get
      {
        <[decl:
          public variant State : HsmState
          {

              public virtual get_id() : $id_type { $default_id }

              public override ToString() : string
              {
                null
              }
          } ]>
      }
    }

    public concurrent_field_pattern : bool
    {
      [Memoize]
      get
      {
        def flags = gen.FsmFlags;
        if (flags.ForceFieldConcurrentStates) true
        else
        {
          if (flags.ForceConcurrentStateCombination) false else
            gen.ActiveStates.Count() > gen.ConcurrentCombinationsLimit || gen.transitions.Length > gen.ConcurrentTransitionsLimit
        }
      }
    }

    public ExecStateCode(tran : Transition, st : ActiveStateConfig) : PExpr
    {
      if (st.IsConcurrent && concurrent_field_pattern)
      {
        if (tran.WithinRegion) 
        {
          def st = tran.WithinRegionTarget.Head;
          def name = $"State$st";
          <[ $(name : usesite) ]>
        } else
        GenRegion.ExecStateCode(st)
      } else
      {
        def name = $"State$st";
        <[ $(name : usesite) ]>
      }
    }

    //StateNames : 
    //{
    //  def state_names = $[(st.name, $"State$(st)"), st in ActiveStates]; // создаем имена состояний
    //}
    
    state_fields : list[ClassMember]
    {
      [Memoize]
      get
      {
        state_names.Map((x, y) =>  <[decl: public static $(y : usesite) : State.$(x : usesite) = State.$(x : usesite)(); ]>)
      }
    }
    
    state_names : list[string * string]
    {
      [Memoize]
      get
      {
        if (concurrent_field_pattern) 
        {
          def st = gen.states.Exclude(_.IsTop);
          st.Map(x => (x.ToString(), $"State$x"));
        } else
          {
            def conf = gen.ActiveStates;
            def conf = conf.Map(x => x.ToString());
            def st = gen.states.Filter(x => ((x.IsSimple && !x.regions.IsEmpty()) || x.IsComposite) && !x.IsTop);
            def other = st.Map(x => x.ToString());
            def st = conf + other;
            st.Map(x => (x, $"State$x"))
          }
      }
    }
    
    public IsInStateFromStrBody : list[MatchCase]
    {
      get
      {
        def mexpr = state_names.FoldRight([<[case: | _ => throw InvalidOperationException("Invalid state") ]>], 
                                      ((x, _), a) => <[case: | $(x : string) => State.$(x : usesite).Id()]> :: a);
        mexpr
      }
    }
    
    EmitStateFields() : void
    {
      gen.Define(state_fields); // create state variables for fast using 
    }
    
    GenBaseStruct() : void
    {
      EmitStateFields();
      ty = gen.DefineNested(gen.ty, top);
      gen.state_builder = ty;
      when (gen.HasDeferedEvents) DeferrableEvents.EmitIsDeferDeclaration(ty);
      def defs = gen.gen_events.EventDeclsInTopState;
      gen.Define(ty, defs);
      gen.compile_list ::= ty;
    }

    ActiveStates : list[ActiveStateConfig]
    {
      [Memoize]
      get
      {
        gen.ActiveStates.NToList()
      }
    }
    
    EmitConcField() : void
    {
      def (conc, other) = ActiveStates.Partition(_.IsConcurrent);
      foreach (st in other)
      {
        def st_gen = GenActiveStateConfig(gen, st, ty);
        def ty = st_gen.Emit();
        gen.compile_list ::= ty;
        gen.StateBuilders ::= (st, ty);
      }

      def other = other.SelectMany(_.simple_states).NToList();
      def conc = conc.SelectMany(_.states).Distinct().NToList().Exclude(other);
      
      foreach (st when !st.IsTop in conc)
      {
        def st_gen = GenRegion(gen, ty, st);
        def ty = st_gen.Emit();
        gen.compile_list ::= ty;
        //gen.StateBuilders ::= (st, ty);
      }
      
    }

    EmitConcCombinations() : void
    {
      foreach (st in ActiveStates)
      {
        def st_gen = GenActiveStateConfig(gen, st, ty);
        def ty = st_gen.Emit();
        gen.compile_list ::= ty;
        gen.StateBuilders ::= (st, ty);
      }
      def composite = gen.states.Filter(x => ((x.IsSimple && !x.regions.IsEmpty()) || x.IsComposite) && !x.IsTop);
      foreach (st in composite)
      {
        def st_gen = GenState(gen, st, ty);
        def ty = st_gen.Emit();
        gen.compile_list ::= ty;
      }
    }

    public Emit() : void
    {
      GenBaseStruct();
      if (concurrent_field_pattern) 
        EmitConcField()
      else 
        EmitConcCombinations()

    }
  }
}
