using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of GenUtil.
  /// </summary>
  [Record]
  public class GenUtil
  {
    ty : TypeBuilder;
    
    public Define(lst : IEnumerable[ClassMember]) : void
    {
      Define(ty, lst);
    }
    
    public DefineEvent(name : string) : void
    {
      def evt = <[decl: public event $(name : usesite) : EventHandler;]>;
      def method = <[decl: $($"On$name" : usesite)() : void {$(get_event_call(name))}]>;
      Define([method, evt]);
    }

    public DefineEvent(name : string, type : PExpr, pars : list[PParameter], body : PExpr) : void
    {
      def evt = <[decl: public event $(name : usesite) : $type;]>;
      def method = <[decl: $($"On$name" : usesite)(..$pars) : void 
                    {
                      $(name : usesite)?.Invoke($body);
                    }]>;
      Define([method, evt]);
    }

    public Define(f : ClassMember) : void
    {
      Define(ty, f);
    }

    public DefineMethod(name : string, body : PExpr) : void
    {
      Define(<[decl: $(name : usesite)() : void {$body}]>)
    }
    
    public WithSources : bool {get;set;}
    
    public Define(ty : TypeBuilder, f : ClassMember) : void
    {
      if (WithSources) _  =  ty.DefineWithSource(f); else 
      //when (WithSources) 
      //{
      //  def prn = printer.GetNestedPrinter(ty, printer);
      //  prn.PrintClassMember(f)
      //}
      ty.Define(f);
    }

    public Define(ty : TypeBuilder, lst : IEnumerable[ClassMember]) : void
    {
      foreach (l in lst) Define(ty, l);
    }
    
    public DefineNested(ty : TypeBuilder, f : ClassMember.TypeDeclaration) : TypeBuilder
    {
      when (WithSources)
      {
        def man = ty.TyManager;
        man.GenerateFakeSourceCode(ty, f);
        //def prn = printer.GetNestedPrinter(ty, printer);
        //prn.PrintClassMember(f);
      }
      ty.DefineNestedType(f);
    }

    public DefineNested(f : ClassMember.TypeDeclaration) : TypeBuilder
    {
      DefineNested(ty, f);
    }
    

    //get_guard_call(act : string) : PExpr
    //{
    //<[
    //  def temp =  $(act : usesite);
    //    if (temp != null) temp(); else false
    //]>;
    //}

    public get_event_call(act : string) : PExpr
    {
    <[
        def temp =  $(act : usesite);
        when (temp != null) temp(this, null);
    ]>;
    }
  }
}
