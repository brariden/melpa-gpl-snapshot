using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of Activity.
  /// </summary>
  [Record]
  class Activities
  {
    activity : list[StateAction.Do];
    map : Map[string, string];
    gen : StaticGenerator;
    
    original_actions : list[FsmAction]
    {
      [Memoize]
      get
      {
        actions.Distinct().NToList()
      }
    }
    
    original_act : list[GenAction]
    {
      [Memoize]
      get
      {
        original_actions.Map(x => GenAction(x, map, gen))
      }
    }
    
    actions : list[FsmAction]
    {
      [Memoize]
      get
      {
        activity.SelectMany(x => x.action.actions).NToList()
      }
    }
    
    gen_activities : list[GenActivity]
    {
      [Memoize]
      get
      {
        activity.Map(x => GenActivity(x, map, gen, activity.Except(x).NToList()))
      }
    }
    
    public Emit() : void
    {
      // for not declared actions generate event members
      foreach (GenAction(action = FsmAction.Normal as act) as a when !a.IsDeclared in original_act)
      {
        gen.DefineEvent(act.name, <[ Action[CancellationToken] ]>, [<[parameter: tok : CancellationToken ]>], <[ tok ]>)
      }
      foreach (act in gen_activities)
        act.Emit()
    }
  }
}
