using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  [Record]
  public variant HPseudoState : IEquatable[HPseudoState]
  {
    | History
      {
        default : option[HTransition];
        type    : HistoryType;
        //paths   : list[Transition] {get;set;default []}
      }
    | Junction
      {
        name : string;
        tree : HJunctionNode;
        type : JunctionType;
        decision_tree : DecisionNode {get;set;}
      }
    | Fork
      {
        states : list[HState];
      }
    | Join
      {
        name       : string;
        states     : list[HState];
        transition : HTransition {get;set;}
      }
    | Terminate


    public state : HState;

    public override ToString() : string
    {
      Name
    }

    public override GetHashCode() : int
    {
      Name.GetHashCode()
    }
    
    public Equals(b : HPseudoState) : bool
    {
      this : object == b
    }
    
    public static HistoryName(this lst : list[HPseudoState.History]) : string
    {
      | n :: [] => n.Name
      | n       => def n = n.Select(x => x.Name);
                  $<#..$(n;"")#>
    }

    [RecordIgnore]
    public PseudoState : PseudoState {get;set;}
    
    public Name : string
    {
      get
      {
        def name = match (this)
                    {
                      | History(type = t) => 

              def type = match (t)
                          {
                            | HistoryType.Deep     => "Deep"
                            | Shallow              => "Shallow"
                            | None                 => ""
                          }

              if (state != null)
              {
                if (state.history.IsOne) $"$(state)History" else $"$(state)$(type)History"
              } else "History";
                      | Join(name = n)           => $"Join$n"//$copy_name
                      | Terminate => $"$(state)Terminate"
                      | Fork(states = t)          => $<#Fork$(state)To..$(t;"_")#>
          //| Initial                   => $"$(state)Initial"
                      | Junction(name = n)        => $"$state$n"
          //| EntryPoint(name = n)      => $"EntryPoint$n"
          //| ExitPoint(name = n)       => $"ExitPoint$n"
                    }
        name// + copy_name
      }
    }
  }

}
