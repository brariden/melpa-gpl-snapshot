using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using SCG = System.Collections.Generic;
using System.ComponentModel;

namespace Nemerle.Statechart
{

  using ListUtils;
  using TreeUtils;
  
  [NotifyPropertyChange]
  [Record]
  public partial variant DecisionNode : INotifyPropertyChanged
  {
    | Condition 
      {
        condition : GuardNode;
        body      : DecisionNode;
        [NotifyPropertyChange]
        else_node : option[DecisionNode] {get;set;default None()}
      }
    | Target 
      {
        target      : HTarget;
        [NotifyPropertyChange]
        destination : TargetDeterminator {get;set;}
      }

    public actions : list[FsmAction] {get;set;default []}
    [NotifyPropertyChange]
    public path  : PathSequence {get;set;}
    public state : HState {get;set;}
    public Parent : DecisionNode {get;set;}
    
    public aliases : list[string * string] {get;set;default []}
    
    [Memoized(else_node, path)]
    public Path : list[PathSequence]
    {
      get
      {
        GetBreadthFirstEnumerable().Map(_.path)
      }
    }
    
    [Memoized(else_node, destination)]
    public Targets : list[TargetDeterminator]
    {
      get
      {
        GetBreadthFirstEnumerable().FoldLeft([], (x, a) => if (x is Target(destination = t)) t :: a else a)
      }
    }
    
    [Memoized(else_node, path)]
    public PathActions : list[FsmAction]
    {
      get
      {
        GetBreadthFirstEnumerable().SelectMany(x => x.path.Path.FilterValues(x => x.PathAction)).NToList();
      }
    }
    
    public GetBreadthFirstEnumerable() : IEnumerable[DecisionNode]
    {
      def queue = SCG.Queue();
      foreach (n in ThisNodes) queue.Enqueue(n);

      while (queue.Count != 0)
      {
        def node = queue.Dequeue();
        yield node;
        def childs = node.ChildNodes;
        foreach (s in childs) queue.Enqueue(s)
      }
    }
    
    public Clone() : DecisionNode
    {
      def node = match (this)
      {
        | Condition(c, b) as n => Condition(actions, path, state, null, aliases, c, b.Clone(), n.else_node.Map(x => x.Clone()))
        | Target(t) as n     => Target(actions, path, state, null, aliases, t, n.destination)
      }
      node.Prepare();
      node
    }
    
    public Prepare() : void
    {
      foreach (node in GetBreadthFirstEnumerable())
      {
        foreach (ch in node.ChildNodes)
        {
          ch.Parent = node
        }
      }
    }
    
    ThisNodes : IEnumerable[DecisionNode]
    {
      get
      {
        if (this is Condition(else_node = Some(b))) b.ThisNodes.AddBefore(this) else ListUtils.SingleElement(this)
      }
    }
    
    public ChildNodes : IEnumerable[DecisionNode]
    {
      get
      {
        match (this)
        {
          | Condition(body = a) => a.ThisNodes
          | Target              => Enumerable.Empty()
        }
      }
    }
    
    public Current : DecisionNode
    {
      get
      {
        this
      }
    }
    
    public Iter(cond : Condition -> void, target : Target -> void) : void
    {
      def iter(a)
      {
        | Condition as a => when (cond != null) cond(a)
        | Target as a    => when (target != null) target(a)
      }
      
      Iter(iter)
    }

    public Iter(iter : DecisionNode -> void) : void
    {
      GetBreadthFirstEnumerable().Iter(iter)
    }
    
  }

}
