using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  [Record]
  public class PathSequence
  {
    //mutable path : List[PathNode] = List();

    [Memoized]
    public exit_states : list[HState]
    {
      get
      {
        exit_tran_path.Map(_.state)
      }
    }

    public this(p : IEnumerable[TranPath])
    {
      path.AddRange(p)
    }
    
    path        : List[TranPath] = List();
    
    public TranPath : IEnumerable[TranPath]
    {
      get
      {
        path
      }
    }
    
    public AddPath(path : PathSequence) : void
    {
      this.path.AddRange(path.path);
    }
    
    [Memoized]
    public exit_tran_path  : list[TranPath]
    {
      get
      {
        path.Filter(x => x.kind == PathKind.Exit)
      }
    }

    [Memoized]
    public actions_path    : list[TranPath]
    {
      get
      {
        path.Filter(x => x.kind == PathKind.Action)
      }
    }

    [Memoized]
    public entry_tran_path : list[TranPath]
    {
      get
      {
        path.Filter(x => x.kind == PathKind.Entry)
      }
    }

    [Memoized]
    public tran_nodes : list[TranPath]
    {
      get
      {
        exit_tran_path + entry_tran_path
      }
    }

    [Memoized]
    public action_nodes : list[PathNode]
    {
      get
      {
        actions_path.SelectMany(_.nodes).NToList()
      }
    }

    [Memoized]
    public entry_states : list[HState]
    {
      get
      {
        entry_tran_path.Map(_.state)
      }
    }

    public Add(path : IEnumerable[TranPath]) : void
    {
      this.path.AddRange(path)
    }

    [Memoized]
    public exit_nodes : list[PathNode]
    {
      get
      {
        exit_tran_path.SelectMany(_.nodes).NToList()
      }
    }

    [Memoized]
    public entry_nodes : list[PathNode]
    {
      get
      {
        entry_tran_path.SelectMany(_.nodes).NToList()
      }
    }

    [Memoized]
    public Path : IEnumerable[PathNode]
    {
      get
      {
        path.SelectMany(_.nodes)
      }
    }
    
    public this() {}
    
    public static @+(a : PathSequence, b : PathSequence) : PathSequence
    {
      def path = a.Clone();
      path.AddPath(b);
      path
    }
    
    public static CombineParallel(a : PathSequence, b : PathSequence) : PathSequence
    {
      def order_nodes(x, desc)
      {
        x.nodes = x.nodes.Sort(_.state, desc)
      }
      
      def entry  = a.entry_tran_path + b.entry_tran_path;
      entry.Iter(order_nodes(_, false));
      def entry = entry.Sort(_.state);
      def action = a.actions_path  + b.actions_path;
      action.Iter(order_nodes(_, false));
      def action = action.Sort(_.state);
      def exit   = a.exit_tran_path + b.exit_tran_path;
      exit.Iter(order_nodes(_, true));
      def exit   = exit.Sort(_.state, true);
      def path = exit.Concat(action).Concat(entry);
      PathSequence(path)
    }
    
    public Clone() : PathSequence
    {
      PathSequence(List(path))
    }
  }

}
