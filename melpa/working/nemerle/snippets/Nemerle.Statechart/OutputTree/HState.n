using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  [Record]
  public class HState : Located, IEquatable[HState]
  {
    public name : string;
    public transitions : list[HTransition] {get;set;default []}
    public hierarchy : list[HFsm] {get;set;default []}
    public automaton : HFsm {get;set;}
    
    public entry : list[StateAction.Entry] {get;set;default []}
    public exit  : list[StateAction.Exit]  {get;set;default []}

    public do_activity : list[StateAction.Do] {get;set;default []}
    
    public super : HState {get;set;}
    
    public join_transitions : list[HPseudoState.Join] {get;set;default []}
    
    public Id : IdType {get;set;}
    
    public history : TwoOption[HPseudoState.History] 
    {
      get
      {
        match (hierarchy.Find(x => x.history.HasValue))
        {
          | Some(a) => a.history
          | _       => TwoOption.None()
        }
      }
    }
    
    public override GetHashCode() : int
    {
      name.GetHashCode()
    }
    
    public Equals(b : HState) : bool
    {
      this : object == b
    }
    
    public IsSimple : bool
    {
      get
      {
        hierarchy.IsEmpty()
      }
    }
    
    public IsConcurrent : bool
    {
      get
      {
        hierarchy.Length >= 2
      }
    }
    
    public IsComposite : bool
    {
      get
      {
        hierarchy.Length != 0
      }
    }
    
    public IsFinal : bool;
    
    public IsTop : bool
    {
      get
      {
        super == null
      }
    }
    
    public IsSubStateOf(st : HState) : bool
    {
      st.all_sub_states.ContainsRef(this)
    }
    
    [Memoized]
    public all_simple_states : list[HState]
    {
      get
      {
        if (hierarchy.IsEmpty()) this :: [] else
          hierarchy.SelectMany(x => x.states.SelectMany(x => x.all_simple_states)).NToList()
      }
    }

    [Memoized]
    public all_sub_states : list[HState]
    {
      get
      {
        hierarchy.SelectMany(x => x.states.SelectMany(x => x.all_states)).NToList()
      }
    }
    
    [Memoized]
    public all_states : list[HState]
    {
      get
      {
        this :: all_sub_states
      }
    }
    
    [Memoized]
    public active_config : list[HState]
    {
      get
      {
        active_super + [this]
      }
    }
    
    [Memoized]
    public active_super : list[HState]
    {
      get
      {
        ListUtils.UnfoldRev(super, x => if (x != null) Some(x, x.super) else None())
      }
    }
    
    [Memoized]
    public hierarchy_pos : int
    {
      get
      {
        if (automaton == null || automaton.super == null) 0 else
          automaton.super.hierarchy_pos + 1
      }
    }
    
    [Memoized]
    public regions : list[HState]
    {
      get
      {
        active_super.Rev().Filter(_.IsConcurrent)
      }
    }
    
    public region_pos(r : HState) : int
    {
      match (r.hierarchy.Find(x => x.all_states.ContainsRef(this)))
      {
        | Some(sreg) => r.hierarchy.IndexOf(sreg)
        | _          => 0
      }
    }
    
    public SameRegion(st : HState) : bool
    {
      def have = GetSameRegion(st);
      have.All(x => region_pos(x) == st.region_pos(x))
    }
    
    public GetSameRegion(st : HState) : IEnumerable[HState]
    {
      regions.Intersect(st.regions)
    }
    
    public override ToString() : string { if (name != null && !name.IsEmpty()) name else "Top" }
  }
}
