using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
/// <summary>
  /// Description of ActiveState.
  /// </summary>
  [Record]
  public class ActiveStateConfig : IEquatable[ActiveStateConfig]
  {
    public name : string
    {
      [Memoize]
      get
      {
        if (simple_states.IsEmpty()) 
        {
          $<#..$(states;"")#>
        } else 
        {
          $<#..$(simple_ordered_by_regions;"|")#>;
        }
      }
    }
    
    simple_ordered_by_regions : list[HState]
    {
      [Memoize]
      get
      {
        def order_by(x, y)
        {
          def r1 = x.regions;
          def r2 = y.regions;
          def intersect = r1.Intersect(r2).NToList();
          
          def loop(inter)
          {
            match (inter)
            {
              | [] => 0
              | r :: tail => def diff = x.region_pos(r) - y.region_pos(r);
                             if (diff != 0) diff else loop(tail)
            }
          }
          
          loop(intersect)
        }
        
        simple_states.Sort(order_by)
      }
    }
    
    public transitions : list[Transition] {get;set;default []}

    public states : list[HState]; // states in it resides

    public IsThis(st : IEnumerable[HState]) : bool
    {
      simple_states.All(st.ContainsRef)
    }

    public HistoryPath : list[HistoryPath] {get;set;default []}

    public History : list[PseudoState.History] {get;set;default []}

    public Id : IdType {get;set;}

    [Memoized]
    public regions : list[HState]
    {
      get
      {
        states.Filter(_.IsConcurrent)
      }
    }
    
    public IsConcurrent : bool
    {
      [Memoize]
      get
      {
        !regions.IsEmpty()
      }
    }
    
    public join_transitions : list[HPseudoState.Join]
    {
      get
      {
        states.SelectMany(_.join_transitions).Distinct().NToList()
      }
    }
    
    [Memoized]
    public completion_originated : list[HState]
    {
      get
      {
        match (join_transitions)
        {
          | []  => simple_states.Filter(x => x.transitions.Exists(_.IsCompletion))
          | lst => lst.FoldLeft([], (x, a) => if (x.transition.Trigger.IsCompletion && x.states.AllContainsIn(simple_states)) x.states + a else a)
        }
      }
    }
    
    [Memoized]
    public simple_states : list[HState]
    {
      get
      {
        states.Filter(_.IsSimple)
      }
    }

    public Equals(b : ActiveStateConfig) : bool
    {
      this : object == b
    }
    
    
    public override GetHashCode() : int
    {
      name.GetHashCode()
    }
    
    public Used : bool {get;set;default false}
    public override ToString() : string { name }
    
    public static ActiveConfig(this lst : IEnumerable[HState]) : list[HState]
    {
      def conf = lst.SelectMany(x => x.active_config);
      def conf = conf.Distinct();
      def sorted = conf.Sort(x => x);
      sorted
    }
    
    public static Sort[T](this lst : IEnumerable[T], func : T -> HState, desc : bool = false) : list[T]
    {
      def sort(x, y)
      {
        def st1 = func(x);
        match (st1.regions)
        {
          | []     => 0
          | r :: _ => st1.region_pos(r) - func(y).region_pos(r)
        }
      }
      
      def by_reg = lst.NToList().Sort(sort);
      def by_hierarchy = if (desc) by_reg.OrderByDescending(x => func(x).hierarchy_pos) else by_reg.OrderBy(x => func(x).hierarchy_pos);
      by_hierarchy.ThenBy(x => func(x).Location).NToList();
    }
  }

  [Record]
  public class Transition : Located, IEquatable[Transition]
  {
    public Source  : ActiveStateConfig;
    
    /// <summary>
    /// source of transition arrow
    /// </summary>
    public OriginateFrom : HState;
    
    
    public Trigger : StateEvent {get;set;}
    public Guard   : GuardNode;
    //public Actions : list[FsmAction];
    public Path    : PathSequence;
    public Target  : TargetDeterminator;

    public DecisionTree : DecisionNode {get;set;}
    
    public Priority : int {get;set;default 0}
    
    public Grouped : int {get;set;default 1}
    
    public Kind : TransitionKind;
    
    public Used : bool {get;set;default false}
    
    public MayRun : bool {get;set;default false}
    
    public OverridenBy : list[Transition] {get;set;default []}
    
    public ConcurrentGroup : list[Transition] {get;set;default []}
    
    public WithinRegion : bool
    {
      get
      {
        if (Source.IsConcurrent)
        {
          if (TargetStates.IsEmpty() || OriginateFrom == null) false else
          {
            def target = TargetStates.Head;
            OriginateFrom.SameRegion(target);
          }
        } else false
          
      }
    }
    
    public WithinRegionSource : list[HState]
    {
      get
      {
        if (WithinRegion)
        {
          Source.simple_states.Filter(x => OriginateFrom.SameRegion(x));
        } else []
      }
    }
    
    public WithinRegionTarget : list[HState]
    {
      get
      {
        if (WithinRegion)
        {
          match (Target)
          {
            | TargetDeterminator.State(st) => st.simple_states.Filter(x => TargetStates.Head.SameRegion(x))
            | _                            => []
            //| Completion(st)               => 
          }
        } else []
      }
    }
    
    public TargetStates : list[HState];
    
    public IsDefer : bool
    {
      get
      {
        Target is TargetDeterminator.Defer
      }
    }
    
    [Memoized]
    public Name : string
    {
      get
      {
        match (Kind)
        {
          | Internal => match (Target)
                        {
                          | Defer => $"DeferrableEvent$(Trigger)At$Source"
                          | _     => $"InternalTransition$(Source)By$Trigger"
                        }
          | Initial  => $"InitialTransitionFrom$(Source)To$Target"
          | _        => def tar = Target.ToString();
                        if (tar.IsEmpty()) $"Transition$(Source)By$Trigger" else $"Transition$(Source)To$(Target)By$Trigger"
        }
      }
    }

    public Equals(b : Transition) : bool
    {
      Name == b.Name
    }
    
    public override GetHashCode() : int
    {
      Name.GetHashCode()
    }
    
    public override ToString() : string { Name }

  }

  [Record]
  public variant PseudoState
  {
    | History 
      {
        default : option[Transition];
        type    : HistoryType;
        state   : HState;

        [Memoized]
        Name : string
        {
          get
          {
            def type = match (type)
                        {
                          | HistoryType.Deep     => "Deep"
                          | Shallow              => "Shallow"
                          | None                 => ""
                        }

            if (state != null)
            {
              if (state.history.IsOne) $"$(state)History" else $"$(state)$(type)History"
            } else "History";
          }
        }

        public override ToString() : string
        {
          Name
        }
      }
  }

  public variant TargetDeterminator
  {
    | State { state : ActiveStateConfig }
    | History { state : PseudoState.History; }
    | NoStateChange
    | Terminate// { node : HPseudoState.Terminate; }
    | Completion { state : ActiveStateConfig; }
    | Junction { node : DecisionNode; name : string;}
    | Defer
    
    public override ToString() : string
    {
      match (this)
      {
        | State(st)       => $"$st"
        | History(h)      => $"$h"
        | Terminate       => "Terminate"
        | Junction(_, n)  => n
        | Completion(st)  => $"$(st)Completion"
        | Defer           => "Defer"
        | _               => ""
      }
    }
  }

}
