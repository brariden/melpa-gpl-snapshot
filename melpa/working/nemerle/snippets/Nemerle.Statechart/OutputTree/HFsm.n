using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of HFsm.
  /// </summary>
  [Record]
  public class HFsm
  {
    public name : string;
    public states : list[HState];
    
    public init_state : option[HState];
    
    public accept_state : option[HState];
    
    public super : HState;
    
    public history : TwoOption[HPseudoState.History] {get;set; default TwoOption.None()}
    
    [Memoized]
    public all_states : list[HState]
    {
      get
      {
        states.SelectMany(_.all_states).NToList()
      }
    }
  
    [Memoized]
    public all_simple_states : list[HState]
    {
      get
      {
        states.SelectMany(_.all_simple_states).NToList()
      }
    }
    
    [Memoized]
    public active_super : list[HState]
    {
      get
      {
        if (super != null) super.active_super + [super] else []
      }
    }
  }

  [Record]
  public class HTransition : Located, IEquatable[HTransition]
  {
    public Source  : HTarget;
    public Trigger : StateEvent;
    public Guard   : GuardNode;
    public Actions : list[FsmAction];
    public Target  : HTarget;
    public Kind    : TransitionKind;
    
    public Local   : bool
    {
      get
      {
        match (Kind)
        {
          | TransitionKind.Local
          | TransitionKind.History
          | TransitionKind.Initial => true
          | _                      => false
        }
      }
    }
    
    [Memoized]
    public SourceState : HState
    {
      get
      {
        if (Source is HTarget.State(st)) st else null
      }
    }
    
    [Memoized]
    public TargetState : HState
    {
      get
      {
        if (Target is HTarget.State(st)) st else null
      }
    }
    
    public IsCompletion : bool
    {
      get
      {
        Trigger.IsCompletion
      }
    }
    
    public IsDefer : bool
    {
      [Memoize]
      get
      {
        Target is HTarget.Defer
      }
    }
    
    public Equals(a : HTransition) : bool
    {
      this : object == a
    }
    
    public override GetHashCode() : int
    {
      ToString().GetHashCode()
    }
    
    public override ToString() : string
    {
      if (IsCompletion) $"CompletionTransition$(Source)To$(Target)" else $"Transition$(Source)To$(Target)By$Trigger"
    }
  }

  [Record]
  public variant HTarget : IEquatable[HTarget]
  {
    | Nowhere
    | PseudoState { node : HPseudoState; }
    | State { state : HState; }
    | Defer
    
    public override ToString() : string
    {
      match (this)
      {
        | PseudoState(null)
        | Nowhere           => ""
        | PseudoState(node) => node.ToString()
        | State(st)         => st.ToString()
        | Defer             => "Defer"
      }
    }
    
    public override GetHashCode() : int
    {
      ToString().GetHashCode()
    }
    
    public Equals(b : HTarget) : bool
    {
      match (this, b)
      {
        | (Nowhere, Nowhere)                          => true
        | (PseudoState(n), PseudoState(n2))           => n : object == n2
        | (State(st), State(st2))                     => st : object == st2
        | _                                           => false
      }
    }
  }

  [Record]
  public variant HJunctionNode : IGeneralTree[HJunctionNode]
  {
    | Node { nodes : list[HJunctionNode] {get;set;default []} }
    | Target { target : HTarget; } 
    
    public guard : GuardNode {get;set;}
    public actions : list[FsmAction] {get;set;}
    
    public state : HState;
    
    public Current : HJunctionNode 
    {
      get
      {
        this
      }
    }
    
    public ChildNodes : IEnumerable[IGeneralTree[HJunctionNode]] 
    {
      get
      {
        match (this)
        {
          | Node(nodes = n) => n
          | Target          => Enumerable.Empty()
        }
      }
    }
  }
  

}
