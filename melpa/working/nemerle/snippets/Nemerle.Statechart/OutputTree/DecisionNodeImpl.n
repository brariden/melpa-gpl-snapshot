using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using ListUtils;
  using GuardNode;

  /// <summary>
  /// Description of DecisionNodeImpl.
  /// </summary>
  public partial variant DecisionNode
  {

    public static create_decision_tree(target : HPseudoState.Junction, _tr : HTransition) : void
    {
      
      def create_tree(node, a)
      {
        match (node)
        {
          | HJunctionNode.Node(actions = act, guard = g, nodes = n, state = st) => 
              Some(DecisionNode.Condition(act, null, st, null, [], g, n.FoldBack(None(), create_tree).WithDefault(null), a))
          | Target(actions = act, target = t, state = st) => Some(DecisionNode.Target(act, null, st, null, [], t, null))
        }
      } 

      def check_prepare(n)
      {
        | HJunctionNode.Target(guard = GuardNode.Else) as n => n.guard = GuardNode.Empty();
                                                               n
        | HJunctionNode.Target(guard = GuardNode.Expr as g) as n => 
            n.guard = GuardNode.Empty();
            HJunctionNode.Node(g, [], n.state, [n])
        | _ => n
      }

      def expand(t)
      {
        | HJunctionNode.Node as n                                      => n.nodes = n.nodes.Map(expand);
                                                                          n
        | Target(HTarget.PseudoState(HPseudoState.Junction as j)) as n => def tree = expand(j.tree); 
                                                                          HJunctionNode.Node(n.guard, n.actions, n.state, tree :: [])
        | n                                                            => n
      }
      
      def tree = target.tree;
      
      def tree = expand(tree);
      // check tree nodes and prepare
      foreach (HJunctionNode.Node(nodes = n) as node in tree.GetBreadthFirstEnumerable())
      {
        def n = n.Map(check_prepare);
        node.nodes = n;
      }

      def tree = target.tree;
      def tree = create_tree(tree, None()).WithDefault(null);
      // set parents
      tree.Prepare();
      
      def tree = if (tree is DecisionNode.Condition(condition = GuardNode.Empty, actions = [], else_node = None, body = b)) b else tree;
      target.decision_tree = tree
    }

  }
}
