using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

namespace Nemerle.WUI.Reactive
{
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  macro View(tb : TypeBuilder, method : MethodBuilder) 
  {
    ViewImpl.DoTransform(tb, method, Macros.ImplicitCTX())
  }
  
  module ViewImpl
  {
    public DoTransform(tb : TypeBuilder, method : MethodBuilder, typer : Typer) : void
    {
      Macros.DefineCTX(typer); _ = tb;
      
      match (method.Header.body)
      {
        | FunBody.Parsed(body) =>
          TypeBody(tb, method, typer);
          def script = MakeViewScript(method, typer, body);
          _ = script;
          
        | _ => ()
      }
    }
    
    MakeViewScript(_method : MethodBuilder, _typer : Typer, _body : PExpr) : string
    {
      //assert2(false);
      ""
    }
    
    TypeBody(_tb : TypeBuilder, method : MethodBuilder, typer : Typer) : void
    {
      def body = method.Body;
      def oldEmitDebug = typer.Manager.Options.EmitDebug;
      typer.Manager.Options.EmitDebug = false;
      def methodTyper = typer.Manager.ComponentsFactory.CreateTyper(method);
      methodTyper.RunFullTyping();
      typer.Manager.Options.EmitDebug = oldEmitDebug;
      method.Body = body;
    }
  }
}
