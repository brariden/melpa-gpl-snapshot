using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.ComputationExpressions;
using Nemerle.ComputationExpressions.Async;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace WindowsFormsTest
{
  /// <summary>
  /// Description of MainForm.
  /// </summary>
  public partial class MainForm : Form
  {
    private mutable guiCtx : ExecutionContext;
    private mutable poolCtx : ExecutionContext;

    public this()
    {
      InitializeComponent();
      guiCtx  = SystemExecutionContexts.FromCurrentSynchronizationContext();
      poolCtx = SystemExecutionContexts.ThreadPool();
    }
  
    private button1_Click (_sender : object,  _e : System.EventArgs) : void
    {
      def proc(cur, max)
      {
        comp async
        {
          callcomp Async.SwitchTo(poolCtx);
          def fib(n)
          {
            if (n < 2)
              1
            else
              fib(n - 2) + fib(n - 1);
          }
          def res = fib(cur);

          callcomp Async.SwitchTo(guiCtx);
          textBox1.Text = $"fib($cur) = $res\n" + textBox1.Text;
          progressBar1.Maximum = max;
          progressBar1.Value = cur;
          when (cur < max)
            callcomp proc(cur + 1, max);
        }
      }
      def work()
      {
        comp async
        {
          def time = Diagnostics.Stopwatch.StartNew();
          callcomp proc(1, 42);
          callcomp Async.SwitchTo(guiCtx);
          textBox1.Text = $"$(time.Elapsed)\n" + textBox1.Text;
        }
      }
      _ = work().Start(guiCtx);
    }
  
    private button2_Click (_sender : object,  _e : System.EventArgs) : void
    {
      def max = 42;
      def calc(cur)
      {
        comp async
        {
          def ti1 = Threading.Thread.CurrentThread.ManagedThreadId;
          def fib(n)
          {
            if (n < 2)
              1
            else
              fib(n - 2) + fib(n - 1);
          }
          def res = fib(cur);

          callcomp Async.SwitchTo(guiCtx);
          def ti2 = Threading.Thread.CurrentThread.ManagedThreadId;

          textBox1.Text = $"fib($cur) = $res\n" + textBox1.Text;
          progressBar1.Maximum = max;
          progressBar1.Value = Math.Max(progressBar1.Value, cur);

          return (ti1, ti2, cur, res);
        }
      }
      def printResults(results)
      {
        comp async
        {
          def time = Diagnostics.Stopwatch.StartNew();
          foreach (result in results)
          {
            defcomp (ti1, ti2, cur, res) = result;
            textBox2.Text = $"Ok  $ti1   $ti2     fib($cur) = $res\n" + textBox2.Text;
          }
          textBox1.Text = $"$(time.Elapsed)\n" + textBox1.Text;
        }
      }

      progressBar1.Value = 0;
      def results = $[calc(i).Start(poolCtx) | i in [1..max]];
      _ = printResults(results).Start(guiCtx);
    }
  
    private mutable button2 : System.Windows.Forms.Button;
  
    private mutable textBox2 : System.Windows.Forms.TextBox;
  }
}
