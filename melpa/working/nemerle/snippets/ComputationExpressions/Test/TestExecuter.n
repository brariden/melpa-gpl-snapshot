using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.ComputationExpressions;

namespace Test
{
  using System.Reflection.BindingFlags;

  [Record]
  public sealed class TestCaseAttribute : Attribute
  {
    [Accessor] template : string;
  }

  public module TestExecuter
  {
    public Run(t : Type) : bool
    {
      mutable totalResult = true;

      def color = Console.ForegroundColor;
      try
      {
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.WriteLine($<#Start test: $(t.Name) #>);
        foreach (m in t.GetMethods(NonPublic | Public | Static))
        {
          Console.ForegroundColor = ConsoleColor.Gray;
          def attributes = m.GetCustomAttributes(typeof(TestCaseAttribute), false) :> array[TestCaseAttribute];
          unless (attributes.Length == 1)
            continue;
          unless (m.ReturnType.IsAssignableFrom(typeof(void)))
            throw ArgumentException();
          unless (m.GetParameters().Length == 1)
            throw ArgumentException();
          unless (m.GetParameters()[0].ParameterType.IsAssignableFrom(typeof(IO.TextWriter)))
            throw ArgumentException();

          def str = attributes[0].Template;
          def res = using (sw = IO.StringWriter())
          {
            sw.WriteLine();
            try
            {
              _ = m.Invoke(null, array[sw]);
            }
            catch
            {
              | ex is Exception => sw.WriteLine($"Exception: $(ex.InnerException.GetType().FullName)");
            }
            sw.ToString();
          }
          def ok = res == str;
          if (ok)
            Console.ForegroundColor = ConsoleColor.Green;
          else
            Console.ForegroundColor = ConsoleColor.Red;
          Console.WriteLine($<#Test: $(t.Name) $(m.Name) $(if (ok) "OK" else "Failed")#>);
          when (!ok)
          {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("- Result: --------------------------------------------------------");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(res);
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("- Expected: ------------------------------------------------------");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(str);
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("------------------------------------------------------------------");
          }

          totalResult &= ok;
        }

        totalResult
      }
      finally
      {
        Console.ForegroundColor = color;
        Console.WriteLine();
      }
    }
  }
}
