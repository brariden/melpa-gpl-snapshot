using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nemerle.ComputationExpressions;

namespace Test
{
  /// <summary>
  /// Description of ContBuilder.
  /// </summary>
  public class ContBuilder
  {
    [Record]
    public class Cont[A, R]
    {
      public cont : (A -> R) -> R;
    }

    public Return[A, R](value : A) : Cont[A, R]
    {
      Cont(k => k(value));
    }

    public ReturnComp[A, R](cont : Cont[A, R]) : Cont[A, R]
    {
      Cont(k => cont.cont(k));
    }

    public Zero[A, R]() : Cont[A, R]
      where A : new()
    {
      Cont(k => k(A()));
    }

    public Bind[A, B, R](cont : Cont[A, R], f : A -> Cont[B, R]) : Cont[B, R]
    {
      Cont(k => cont.cont(a => f(a).cont(k)));
    }

    public Bind[A, B, R](cont : Cont[A, R], f : void -> Cont[B, R]) : Cont[B, R]
    {
      Cont(k => cont.cont(_ => f().cont(k)));
    }

    public While[A, R](pred : void -> bool, body : Cont[A, R]) : Cont[A, R]
      where A : new()
    {
      def cont = ContBuilder();
      comp cont
      {
        def loop()
        {
          comp cont
          {
            when (pred())
            {
              callcomp body;
              returncomp loop();
            }
          }
        }
        returncomp loop();
      }
    }

    public Delay[A, R](cont : void -> Cont[A, R]) : Cont[A, R]
    {
      cont()
    }

    public Combine[A, B, R] (cont1 : Cont[A, R], cont2 : Cont[B, R]) : Cont[B, R]
    {
      Bind (cont1, _ => cont2)
    }

    public Run[A, R] (cont : Cont[A, R]) : Cont[A, R]
    {
      cont
    }

    public CallCC[A, B, R](f : (A -> Cont[B, R]) -> Cont[A, R]) : Cont[A, R]
    {
      Cont(k => f(a => Cont(_ => k(a))).cont(k))
    }
  }
}
