/*
 * Copyright (c) 2010  David Sorokin <david.sorokin@gmail.com>
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Utility;
using Nemerle.Collections;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Internal
{
  /// <summary>
  /// Represents an enumeration that can imitate the try-finally block.
  /// </summary>
  [Record]
  public class TryFinallyEnumerable[T] : IEnumerable[T]
  {
    private body : IEnumerable[T];
    private handler : void -> void;
    
    public GetEnumerator () : IEnumerator[T]
    {
      try
      {
        SubEnumerator (body.GetEnumerator (), handler)
      }
      catch
      {
        | e is Exception =>
          try
          {
            throw e   // namely in this strange way!
          }
          finally
          {
            handler ()
          }
      }
    }
    
    private class SubEnumerator : IEnumerator[T]
    {
      private ts : IEnumerator[T];
      private handler : void -> void;
      private mutable handled : bool;
      
      public this (ts : IEnumerator[T], handler : void -> void)
      {
        this.ts = ts;
        this.handler = handler;
        this.handled = false;
      }
      
      public Dispose () : void
      {
        ts.Dispose ()
      }
      
      public Reset () : void
      {
        throw NotSupportedException ()
      }
      
      public MoveNext () : bool
      {
        try
        {
          if (ts.MoveNext ())
            true
          else
          {
            handled = true;
            handler ();   // it may raise an exception too
            false
          }
        }
        catch
        {
          | e is Exception =>
            if (handled)
              throw e
            else
              try
              {
                throw e;  // namely in this way to have the same order of calls
              }
              finally
              {
                handled = true;
                handler ()
              }
        }
      }
      
      public Current : T
      {
        get { ts.Current }
      }
    }
  }
}
