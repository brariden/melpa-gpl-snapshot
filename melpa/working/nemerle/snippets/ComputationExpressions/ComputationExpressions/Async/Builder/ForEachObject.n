using System.Collections;

namespace Nemerle.ComputationExpressions.Async
{
  [Record]
  internal class AsyncForEachObject[A] : Async[FakeVoid]
  {
    private enumerator : IEnumerator;
    private body : A -> Async[FakeVoid];

    [RecordIgnore]
    private mutable curBody : Async[FakeVoid] = null;

    public override Exec(job : AsyncJobBase, mutable res : ref FakeVoid) : Async[FakeVoid]
    {
      if (curBody == null)
      {
        if (enumerator.MoveNext())
        {
          curBody = job.ExecWhileReady(body(enumerator.Current :> A), ref res);
          this;
        }
        else
        {
          null;
        }
      }
      else
      {
        curBody = job.ExecWhileReady(curBody, ref res);
        this;
      }
    }

    public override Cancel() : void
    {
      when (curBody != null)
        curBody.Cancel();
    }
  }
}
