using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  /// <summary>
  /// Description of ExecutionContext.
  /// </summary>
  public abstract class ExecutionContext
  {
    public abstract Execute(computatuion : void -> void) : void;
    public static Default : ExecutionContext { get { SystemExecutionContexts.ThreadPool() } }
  }

  public module SystemExecutionContexts
  {
    public ThreadPool() : ExecutionContext
    {
      SystemThreadPoolExecutionContext.Instance
    }

    public FromCurrentSynchronizationContext() : ExecutionContext
    {
      when (Threading.SynchronizationContext.Current == null)
        throw InvalidOperationException("SynchronizationContext.Current == null");

      SynchronizationContextExecutionContext(Threading.SynchronizationContext.Current)
    }
  }

  internal class SystemThreadPoolExecutionContext : ExecutionContext
  {
    private this(){}
    public static Instance : ExecutionContext = SystemThreadPoolExecutionContext();

    public override Execute(computatuion : void -> void) : void
    {
      when (!Threading.ThreadPool.QueueUserWorkItem(_ => computatuion()))
        throw InvalidOperationException("Failed to queue user work item.");
    }
  }

  [Record]
  internal class SynchronizationContextExecutionContext : ExecutionContext
  {
    private ctx : Threading.SynchronizationContext;
    public override Execute(computatuion : void -> void) : void
    {
      ctx.Post(_ => computatuion(), null);
    }
  }
}
