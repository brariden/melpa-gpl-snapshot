using Nemerle.Collections;

using System;
using System.Collections;
using System.Collections.Generic;

using Nemerle.ComputationExpressions.Async.AcyncBuilder;

namespace Nemerle.ComputationExpressions.Async
{
  public partial module AcyncUtils
  {
    public AsyncMap[A, B](this items : IEnumerable[A], fn : A -> B) : IEnumerable[AsyncValue[B]]
    {
      AsyncMap(items, fn, ExecutionContext.Default, CancelationToken.Default)
    }

    public AsyncMap[A, B](this items : IEnumerable[A], fn : A -> B, cancelationToken : CancelationToken) : IEnumerable[AsyncValue[B]]
    {
      AsyncMap(items, fn, ExecutionContext.Default, cancelationToken)
    }

    public AsyncMap[A, B](this items : IEnumerable[A], fn : A -> B, executionContext : ExecutionContext) : IEnumerable[AsyncValue[B]]
    {
      AsyncMap(items, fn, executionContext, CancelationToken.Default)
    }

    public AsyncMap[A, B](this items : IEnumerable[A], fn : A -> B, executionContext : ExecutionContext, cancelationToken : CancelationToken) : IEnumerable[AsyncValue[B]]
    {
      def res = List();
      foreach (item in items)
        res.Add(Delay(() => Return(fn(item))).Start(executionContext, cancelationToken));
      res
    }
  }
}
