/*
 * Copyright (c) 2010  David Sorokin <david.sorokin@gmail.com>
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;

namespace Nemerle.ComputationExpressions.Extensions
{
  using Nemerle.ComputationExpressions.Internal;
  
  /// <summary>
  /// Defines a computation builder for the list comprehension.
  /// </summary>
  internal class ListBuilder : ComputationBuilder
  {
    private acc : Name = Macros.NewSymbol ();
    
    public override Return (expr : PExpr) : PExpr
    {
      Message.FatalError (expr.Location, "The list comprehension doesn't support the return construct. Use yield instead.")
    }
    
    public override ReturnComp (expr : PExpr) : PExpr
    {
      Message.FatalError (expr.Location, "The list comprehension doesn't support the returncomp construct. Use yieldcomp instead.")
    }
    
    public override Yield (expr : PExpr) : PExpr
    {
      <[ $(acc : name).Add ($expr) ]>
    }
    
    public override YieldComp (expr : PExpr) : PExpr
    {
      <[ $(acc : name).AddRange ($expr) ]>
    }
    
    public override Bind (expr : PExpr, name : PExpr, cont : PExpr) : PExpr
    {
      ignore (name);
      ignore (cont);
      
      Message.FatalError (expr.Location, "The list comprehension doesn't support the defcomp construct. Use yield and yieldcomp instead.")
    }
    
    public override Delay (expr : PExpr) : PExpr
    {
      Message.FatalError (expr.Location, "The list comprehension doesn't support the Delay method.")
    }
    
    public override Combine (expr1 : PExpr, expr2 : PExpr) : PExpr 
    {
      <[ $expr1; $expr2 ]>
    }
    
    public override Run (expr : PExpr) : PExpr
    {
      <[
        { 
          mutable $(acc : name) = List ();
          $expr;
          $(acc : name).NToList ()
        }
      ]>
    }
    
    public override Zero () : PExpr
    {
      <[ () ]>
    }
    
    public override While (pred : PExpr, body : PExpr) : PExpr
    {
      <[ while ($pred) $body ]>
    }
    
    public override ForEach (name : PExpr, coll : PExpr, body : PExpr) : PExpr
    {
      <[ foreach ($name in $coll) $body ]>
    }
    
    protected override ForEach (coll : PExpr, cont : PExpr) : PExpr
    {
      ignore (coll);
      ignore (cont);
      
      throw NotSupportedException ("It directly supports the foreach statement.")
    }
    
    public override For (init : PExpr, cond : PExpr, change : PExpr, body : PExpr) : PExpr
    {
      <[ for ($init; $cond; $change) $body ]>
    }
    
    public override DoWhile (pred : PExpr, body : PExpr) : PExpr
    {
      <[ do $body while ($pred) ]>
    }
    
    public override TryFinally (body : PExpr, handler : PExpr) : PExpr
    {
      PExpr.TryFinally (body, handler)
    }
    
    public override TryCatch (body : PExpr, cases : list [TryCase]) : PExpr
    {
      PExpr.Try (body, cases)
    }
    
    protected override TryCatch (body : PExpr, cont : PExpr) : PExpr
    {
      ignore (body);
      ignore (cont);
      
      throw NotSupportedException ("It directly supports the try-catch statement.")
    }
    
    public override Using (expr : PExpr, name : PExpr, body : PExpr) : PExpr
    {
      <[ using ($name = $expr) $body ]>
    }
  }
}
