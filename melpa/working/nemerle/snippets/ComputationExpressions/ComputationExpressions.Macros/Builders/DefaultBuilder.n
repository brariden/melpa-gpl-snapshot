/*
 * Copyright (c) 2010  David Sorokin <david.sorokin@gmail.com>
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;

namespace Nemerle.ComputationExpressions
{
  using ComputationExpressions.Internal;
  using ComputationExpressions.InternalMacros;

  /// <summary>
  /// This is a default F#-like computation builder.
  /// </summary>
  public class DefaultBuilder : ComputationBuilder
  {
    private builder : PExpr;
    
    public this (builder : PExpr)
    {
      this.builder = builder
    }
    
    public override Return (expr : PExpr) : PExpr
    {
      <[ $builder.Return ($expr) ]>
    }
    
    public override ReturnComp (expr : PExpr) : PExpr
    {
      <[ $builder.ReturnComp ($expr) ]>
    }
    
    public override Yield (expr : PExpr) : PExpr
    {
      <[ $builder.Yield ($expr) ]>
    }
    
    public override YieldComp (expr : PExpr) : PExpr
    {
      <[ $builder.YieldComp ($expr) ]>
    }
    
    public override Bind (expr : PExpr, name : PExpr, cont : PExpr) : PExpr
    {
      <[ $builder.Bind ($expr, $name => $cont) ]>
    }
    
    public override Delay (expr : PExpr) : PExpr
    {
      <[ $builder.Delay (() => $expr) ]>
    }
    
    public override Combine (expr1 : PExpr, expr2 : PExpr) : PExpr 
    {
      <[ $builder.Combine ($expr1, $builder.Delay (() => $expr2)) ]>
    }
    
    public override Run (expr : PExpr) : PExpr
    {
      <[ ComputationRun ($builder, $expr) ]>
    }
    
    public override Zero () : PExpr
    {
      <[ $builder.Zero () ]>
    }
    
    public override While (pred : PExpr, body : PExpr) : PExpr
    {
      <[ $builder.While (() => $pred, $builder.Delay (() => $body)) ]>
    }
    
    protected override ForEach (coll : PExpr, cont : PExpr) : PExpr
    {
      <[ $builder.ForEach ($coll, $cont) ]>
    }
    
    public override TryFinally (body : PExpr, handler : PExpr) : PExpr
    {
      <[ $builder.TryFinally ($builder.Delay (() => $body), () => $handler) ]>
    }
    
    protected override TryCatch (body : PExpr, cont : PExpr) : PExpr
    {
      <[ $builder.TryCatch ($builder.Delay (() => $body), $cont) ]>
    }
    
    public override Using (expr : PExpr, name : PExpr, body : PExpr) : PExpr
    {
      <[ $builder.Using ($expr, $name => $body) ]>
    }
  }
}
