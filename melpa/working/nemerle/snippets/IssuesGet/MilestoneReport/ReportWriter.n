using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using IssuesGet;

namespace MilestoneReport
{
  /// <summary>
  /// Description of ReportWriter.
  /// </summary>
  interface IReportWriter
  {
    WriteCategory(str : string) : void;
    EndCategory() : void;
    WriteProduct(str : string) : void;
    WriteLine(str : string) : void;
    WriteLine() : void;
    WriteIssue(idx : int, iss : Issue) : void;
    BeginWrite(title : string) : void;
    EndWrite() : void;
  }

  class OutReportWriter : IReportWriter
  {
    public WriteLine() : void
    {
      Console.WriteLine()
    }

    public WriteLine(str : string) : void
    {
      Console.WriteLine(str)
    }
    
    public WriteProduct(prod : string) : void
    {
      WriteLine($"Product: $prod\n")
    }
    
    public WriteCategory(str : string) : void
    {
      WriteLine($"Category: $str\n")
    }
    
    public EndCategory() : void
    {
    }
    
    public WriteIssue(idx : int, iss : Issue) : void
    {
      def title = iss.Title;
      def url   = iss.Url;
      WriteLine($"$idx. $title\r\n\t $url\n")
    }
    
    public BeginWrite(title : string) : void
    {
      Console.OutputEncoding = Encoding.UTF8;
      WriteLine(title)
    }
    
    public EndWrite() : void
    {
      
    }
  }
  
  class TextFileWriter : IReportWriter
  {
    file : TextWriter;
    
    public this(file : string)
    {
      this.file = StreamWriter(file, false, Encoding.UTF8);
    }
    
    public virtual WriteLine() : void
    {
      file.WriteLine();
    }

    public virtual WriteLine(str : string) : void
    {
      file.WriteLine(str)
    }

    public virtual WriteProduct(prod : string) : void
    {
      WriteLine($"Product: $prod\n")
    }
    
    public virtual WriteCategory(str : string) : void
    {
      WriteLine($"Category: $str\n")
    }

    public virtual EndCategory() : void
    {
    }
    
    public virtual WriteIssue(idx : int, iss : Issue) : void
    {
      def title = iss.Title;
      def url   = iss.Url;
      WriteLine($"$idx. $title\r\n\t $url\n")
    }

    public virtual BeginWrite(title : string) : void
    {
      WriteLine(title)
    }
    
    public virtual EndWrite() : void
    {
      file.Close();
    }

    
  }

  class HtmlFileWriter : TextFileWriter
  {
    public this(file : string)
    {
      base(file)
    }
    
    public override BeginWrite(title : string) : void
    {
      WriteLine($<# 
      <html>
          <head>
            <title>$title</title>
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/> 
            <link rel="stylesheet" href="http://rsdn.ru/css/article.css" type="text/css" />
          </head>
       <body marginwidth="20" marginheight="20"> 
       <H1>$title</H1> #>);
    }
    
    public override WriteProduct(str : string) : void
    {
      WriteLine($<#<H2>Product: $str</H2>#>);
    }
    
    public override WriteCategory(str : string) : void
    {
      WriteLine($<#<H3>Category: $str</H3> <ol> #>);
    }
    
    public override EndCategory() : void
    {
      WriteLine("</ol>");
    }
    
    public override WriteIssue(_ : int, iss : Issue) : void
    {
      def num   = iss.Number;
      def title = iss.Title;
      def url   = iss.Url;      
      WriteLine($<#<li>$title (<A HREF="$url" target="_blank">issue $num</A>)</li>#>)
    }

    public override EndWrite() : void
    {
      WriteLine(<#</body> 
              </html> #>);
      base.EndWrite();
    }
    
  }
  
  class CombineWriter : IReportWriter
  {
    writers : array[IReportWriter];
    
    public this(params wr : array[IReportWriter])
    {
      writers = wr
    }
    
    public WriteLine() : void
    {
      writers.Iter(_.WriteLine())
    }

    public WriteLine(str : string) : void
    {
      writers.Iter(_.WriteLine(str))
    }
    
    public WriteProduct(str : string) : void
    {
      writers.Iter(_.WriteProduct(str))
    }
    
    public WriteCategory(str : string) : void
    {
      writers.Iter(_.WriteCategory(str))
    }

    public EndCategory() : void
    {
      writers.Iter(_.EndCategory())
    }
    
    public WriteIssue(idx : int, iss : Issue) : void
    {
      writers.Iter(_.WriteIssue(idx, iss))
    }
    
    public BeginWrite(title : string) : void
    {
      writers.Iter(_.BeginWrite(title))
    }
    
    public EndWrite() : void
    {
      writers.Iter(_.EndWrite())
    }
    
  }
}
