using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Collections;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  internal class SwitchScope
  {
    private sealed class LabelInfo
    {
      public this(patterns : list[PT.PExpr])
      {
        this.patterns = patterns;
      }

      [Accessor] patterns : list[PT.PExpr];
      public IsUsed : bool { get; set; }
    }

    public this(labelScope : LabelScope)
    {
      this.labelScope = labelScope;
      this.caseLabels = Hashtable(10);
    }

    public DeclareLabel(patterns : list[PT.PExpr]) : int
    {
      def id = labelScope.DeclareLabelForSwitchCase();
      caseLabels[id] = LabelInfo(patterns);
      id
    }

    public UseLabel(label : PT.PExpr) : int
    {
      def matchLabel(x)
      {
        def labelsMatch(_)
        {
          | (<[ $(a : name) ]>, <[ $(b : name) ]>) =>
            a.Id == b.Id

          | (<[ $a1.$(a2 : name) ]>, <[ $b1.$(b2 : name) ]>) when a2.Id == b2.Id =>
            labelsMatch(a1, b1)

          | (PT.PExpr.Literal(a), PT.PExpr.Literal(b)) =>
            a.Equals(b)

          | (PT.PExpr.Wildcard, PT.PExpr.Wildcard) =>
            true

          | _ => false
        }
        labelsMatch(label, x)
      }
      foreach(pair with (id = pair.Key, info = pair.Value) in caseLabels)
      {
        when(info.Patterns.Find(matchLabel).IsSome)
        {
          info.IsUsed = true;
          Nemerle.Imperative.Return(id);
        }
      }
      Message.Error(label.Location, $"case label `$label' is undefined");
      labelScope.DeclareLabelForSwitchCase()
    }

    public IsLabelUsed(id : int) : bool
    {
      match(caseLabels.Get(id))
      {
        | Some(info) => info.IsUsed
        | _ => false
      }
    }

    private caseLabels : Hashtable[int, LabelInfo];

    private labelScope : LabelScope;
  }
}