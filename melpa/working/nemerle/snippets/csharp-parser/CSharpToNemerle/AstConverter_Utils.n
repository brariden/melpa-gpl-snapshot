using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    MakeName(id : CS.Identifier) : PT.Name
    {
      PT.Name.NameInCurrentColor(id.Id, id |> NLocation, currentEnv)
    }

    MakeName(name : string, loc : Location) : PT.Name
    {
      PT.Name.NameInCurrentColor(name, loc, currentEnv)
    }

    MakeSplicableName(id : CS.Identifier) : PT.Splicable
    {
      PT.Splicable.Name(MakeName(id))
    }

    MakeSplicableName(id : string, loc : Location) : PT.Splicable
    {
      PT.Splicable.Name(MakeName(id, loc))
    }

    MakeSplicableName(expr : CS.Expr) : PT.Splicable
    {
      | Ref(id) => MakeSplicableName(id)
      | _ => Message.FatalError(expr |> NLocation, $"`$expr' is not valid name")
    }

    MakeWildcardSplicableName(loc : Location) : PT.Splicable
    {
      PT.Splicable.Name(loc, PT.Name.NameInCurrentColor(Util.tmpname("wildcard"), "_", loc, currentEnv))
    }

    MakeSpecialMacroCall(loc : Location, macroName : string, expr : PT.PExpr) : PT.PExpr
    {
      PT.PExpr.MacroCall(
        loc,
        MakeName(macroName, loc),
        manager.NameTree.ExactPath(["Nemerle", "Core", macroName]),
        [PT.SyntaxElement.Expression(expr)])
    }

    TryQualifiedIdentifier(name : CS.Expr, allowAlias : bool) : option[list[string]]
    {
      def walk_expr(expr : CS.Expr, result : list[string]) {
        match(expr) {
          | Alias(id) when allowAlias
          | Ref(id) =>
            id.Id :: result

          | Member(expr, member) =>
            walk_expr(expr, walk_expr(member, result))

          | Alias(_) =>
            Message.Error(expr |> NLocation, "namespace alias qualifier not allowed here");
            result

          | _ => throw Recovery()
        }
      }
      try {
        Some(walk_expr(name, []))
      } catch {
        | _ is Recovery =>
          None()
      }
    }

    QualifiedIdentifier(name : CS.Expr, allowAlias : bool) : list[string]
    {
      match(TryQualifiedIdentifier(name, allowAlias)) {
        | Some(x) => x
        | _ =>
          Message.Error(name |> NLocation, "invalid namespace name");
          []
      }
    }

    PrepareAttributes(attrs : list[CS.CustomAttribute]) : list[CS.CustomAttribute * bool]
    {
      attrs.Map(a => (a, false))
    }

    TakeOutAttributes[T](pool : ref list[CS.CustomAttribute * bool]) : list[CS.CustomAttribute]
      where T: CS.CustomAttributeTarget
    {
      mutable newPool = [];
      mutable selected = [];
      foreach( (attr, isUsed) in pool.Rev())
      {
        match(attr.Target : CS.CustomAttributeTarget)
        {
          | _ is CS.CustomAttributeTarget.Default
          | _ is T =>
            newPool ::= (attr, true);
            selected ::= attr;
          | _ =>
            newPool ::= (attr, isUsed);
        }
      }
      pool = newPool;
      selected
    }

    TakeOutAttributesWithoutDefault[T](pool : ref list[CS.CustomAttribute * bool]) : list[CS.CustomAttribute]
      where T: CS.CustomAttributeTarget
    {
      mutable newPool = [];
      mutable selected = [];
      foreach( (attr, isUsed) in pool.Rev())
      {
        match(attr.Target : CS.CustomAttributeTarget)
        {
          | _ is T =>
            newPool ::= (attr, true);
            selected ::= attr;
          | _ =>
            newPool ::= (attr, isUsed);
        }
      }
      pool = newPool;
      selected
    }

    CheckAttributes(attrs : list[CS.CustomAttribute * bool]) : void
    {
      foreach((attr, false) in attrs)
        Message.Warning(attr.Target |> NLocation, $"`$(attr.Target)' is not valid attribute location for this declaration, attribute is ignored");
    }

    TakeOutAndCheckAttributes[T](attrs : list[CS.CustomAttribute]) : list[CS.CustomAttribute]
      where T: CS.CustomAttributeTarget
    {
      mutable pool = PrepareAttributes(attrs);
      def selected = TakeOutAttributes.[T](ref pool);
      CheckAttributes(pool);
      selected
    }

    WithCurrentEnv[T](member : T) : T
      where T : PT.ClassMember
    {
      member.SetEnv(currentEnv);
      member
    }

    NLocation(loc : PEG.Location) : Location
    {
      locationConverter.Convert(loc)
    }

    NLocation(located : PEG.Located) : Location
    {
      locationConverter.Convert(located.Location)
    }

    ResetDocComments(obj : Located) : void
    {
      when(null != manager.DocComments)
        manager.DocComments = manager.DocComments.Replace(obj.Location, "");
    }
  }
}