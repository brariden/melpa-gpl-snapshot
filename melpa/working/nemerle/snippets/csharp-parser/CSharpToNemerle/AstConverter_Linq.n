using System;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Linq;

using PT  = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS  = CSharpParser;
using SCG = System.Collections.Generic;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    ConvertQuery(query : CS.Expr.Query) : PT.PExpr
    {
      def toNemerleLinqQuery(query : list[CS.QueryExpr]) : list[QueryClause]
      {
        def result = SCG.List();
        def convertDirection(direction : CS.OrderDirection)
        {
          | Desc => false
          | _    => true
        }
        def convert(queryExpr : CS.QueryExpr)
        {
          | From(variable, null, expr)         => result.Add(QueryClause.From(MakeName(variable), ConvertExpr(expr)));
          | From(variable, variableType, expr) => result.Add(QueryClause.From(MakeName(variable), <[ $(ConvertExpr(expr)).Cast.[$(ConvertExpr(variableType))]() ]>));
          | Let(variable, expr)                => result.Add(QueryClause.Let(MakeName(variable), ConvertExpr(expr)));
          | Where(expr)                        => result.Add(QueryClause.Where(ConvertExpr(expr)));
          | OrderBy(orderings)                 => result.Add(QueryClause.Orderby(orderings.Map((expr, dir) => (ConvertExpr(expr), convertDirection(dir)))));
          | Select(expr)                       => result.Add(QueryClause.Select(ConvertExpr(expr)));
          | Group(expr, partition)             => result.Add(QueryClause.Group(ConvertExpr(expr), ConvertExpr(partition)));
          | Join(variable, null, expr,  leftExpr, rightExpr, into) =>
            result.Add(QueryClause.Join(MakeName(variable), ConvertExpr(expr), 
                                        ConvertExpr(leftExpr), ConvertExpr(rightExpr), 
                                        if (into == null) None() else Some(MakeName(into))));
          | Join(variable, variableType, expr,  leftExpr, rightExpr, into) =>
            result.Add(QueryClause.Join(MakeName(variable), <[ $(ConvertExpr(expr)).Cast.[$(ConvertExpr(variableType))]() ]>, 
                                        ConvertExpr(leftExpr), ConvertExpr(rightExpr), 
                                        if (into == null) None() else Some(MakeName(into))));
          | Into(variable, query) => 
            result.Add(QueryClause.Into(MakeName(variable)));
            foreach (e in query)
              convert(e);
        }

        foreach (e in query)
          convert(e);
          
        result.NToList()
      }
      def nemerleLinqQuery = toNemerleLinqQuery(query.query);
      QueryClause.ConvertQuery(nemerleLinqQuery);
    }
  }
}