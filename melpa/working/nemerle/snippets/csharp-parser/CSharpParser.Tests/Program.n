using System;
using System.Console;
using System.Text.RegularExpressions;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Peg;
using Nemerle.Surround;
using Nemerle.Utility;

[assembly: DefineSurround("Red", false,
  Console.ForegroundColor = ConsoleColor.Red,
  Console.ResetColor())]

[assembly: DefineSurround("Green", false,
  Console.ForegroundColor = ConsoleColor.Green,
  Console.ResetColor())]

[assembly: DefineSurround("Yellow", false,
  Console.ForegroundColor = ConsoleColor.Yellow,
  Console.ResetColor())]

namespace CSharpParser.Tests
{
  [Record]
  public class TestCase
  {
    [Accessor]
    private fileName : string;

    [Accessor]
    private source : SourceSnapshot;

    [Accessor]
    private errorInfo : list[ErrorInfo];

    [Accessor]
    private validateAst : CompilationUnit -> bool;
  }

  [Record]
  public class ErrorInfo
  {
    [Accessor] line : int;
    [Accessor] message : string;

    public MatchMessage(actualError : string) : bool
    {
      if(string.IsNullOrEmpty(message))
        true
      else
        Regex.IsMatch(actualError, message)
    }
  }

  module Program
  {
    RunTest(test : TestCase) : bool
    {
      def showErrorPos(errorPos)
      {
        def errorLocation = test.Source.GetSourceLine(errorPos);
        def col = errorPos - errorLocation.StartPos + 1;
        WriteLine(errorLocation.GetText().TrimEnd(array['\r', '\n', '\u2028', '\u2029']));
        surroundwith(Yellow)
        {
          Write(string('-', col - 1));
          WriteLine('^'); // error pointer
        }
        WriteLine();
      }

      mutable testIsPassed = true;

      def preParser = CSharpParser.PreParser();
      match(preParser.Parse(test.Source))
      {
        | Some(preAst) =>
          def preResult = CSharpParser.Preprocessor.Run(preAst, []);
          when(preResult.HasErrors)
          {
            testIsPassed = false;
            foreach(error in preResult.Errors)
              surroundwith(Red)
                WriteLine($"C# preprocessor error: $error");
          }

          def parser = CSharpParser.Parser();
          match(parser.Parse(preResult.Source))
          {
            | Some(unit) =>
    
              mutable hitErrorLines = [];
    
              // handle actual parse errors
              foreach(error in unit.GetParseErrors())
              {
                def line = error.Location.StartLineColumn[0];
    
                match(test.ErrorInfo.Find(ei => ei.Line == line))
                {
                  | Some(errorInfo) when errorInfo.MatchMessage(error.ToString()) =>
                    // we expected error on this line (this is negative test)
                    //
                    hitErrorLines ::= line;
    
                  | Some(errorInfo) =>
                    // error message differs
                    //
                    surroundwith(Red)
                      WriteLine($"expected error didn't match on line $(errorInfo.Line)");
                    WriteLine(error);
                    showErrorPos(error.Location.StartPos);
    
                    hitErrorLines ::= line;
    
                    testIsPassed = false;
    
                  | _ =>
                    // this error is unexpected
                    //
                    WriteLine(error);
                    showErrorPos(error.Location.StartPos);
    
                    testIsPassed = false;
                }
              }
    
              // handle expected parse errors
              //
              foreach(errorInfo in test.ErrorInfo)
                unless(hitErrorLines.Contains(errorInfo.Line))
                {
                  surroundwith(Red)
                    WriteLine($"expected error didn't occur on line $(errorInfo.Line)");
    
                  testIsPassed = false;
                }
    
              // check AST only when error checks passed
              //
              when(testIsPassed)
              unless(test.ValidateAst(unit))
              {
                surroundwith(Red)
                  WriteLine($"AST validation failed for `$(test.FileName)'");
    
                testIsPassed = false;
              }
    
            | _ =>
              def (errorPos, _) = parser.GetMaxRollbackPosAndIds();
              surroundwith(Red)
                WriteLine($"Failed to parse file `$(test.FileName)'");
              showErrorPos(errorPos);
    
              testIsPassed = false;
          }
        | _ =>
          def (errorPos, _) = preParser.GetMaxRollbackPosAndIds();
          surroundwith(Red)
            WriteLine($"Failed to pre-parse file `$(test.FileName)'");
          showErrorPos(errorPos);

          testIsPassed = false;
      }

      testIsPassed
    }

    Main() : int
    {
      mutable totalTests = 0;
      mutable totalFailed = 0;

      foreach(test in GetTestCases("positive\\*.cs"))
      {
        unless(RunTest(test))
          totalFailed += 1;
        totalTests += 1;
      }

      foreach(test in GetTestCases("negative\\*.cs"))
      {
        unless(RunTest(test))
          totalFailed += 1;
        totalTests += 1;
      }

      if(totalFailed == 0)
      {
        surroundwith(Green)
          WriteLine($"All $totalTests tests passed.");
        0
      }
      else
      {
        surroundwith(Red)
          WriteLine($"$totalFailed tests of $totalTests failed.");
        -1
      }
    }
  }
}