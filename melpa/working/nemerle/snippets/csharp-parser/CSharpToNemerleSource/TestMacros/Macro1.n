using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharpToNemerle
{
  public macro TestMacro()
  {
    <[ () ]>
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Field)]
  public macro MacroAttribute(_ : TypeBuilder,_ : ParsedField)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Property)]
  public macro MacroAttribute(_ : TypeBuilder,_ : ParsedProperty)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Event)]
  public macro MacroAttribute(_ : TypeBuilder,_ : ParsedEvent)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Method)]
  public macro MacroAttribute(_ : TypeBuilder,_ : ParsedMethod)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Class)]
  public macro MacroAttribute(_ : TypeBuilder)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Parameter)]
  public macro MacroAttribute(_ : TypeBuilder, _ : ParsedParameter)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Class)]
  public macro MacroAttribute2(_ : TypeBuilder,_ : string)
  {
  }

}
