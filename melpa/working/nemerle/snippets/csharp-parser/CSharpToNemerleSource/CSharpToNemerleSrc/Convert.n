using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Macros;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;
using System.IO;
using System.Text;

namespace CSharpToNemerle
{

  public class CompilerHost : ManagerClass
  {
    public this()
    {
      base(CompilationOptions());
      Options.LibraryPaths ::= NemerleBinPath;
      InitCompiler();
      LoadExternalLibraries();
      Hierarchy = TypesManager(this);
    }

    NemerleBinPath : string
    {
      get
      {
        def nemerle = Environment.GetEnvironmentVariable("Nemerle");
        if (nemerle == null)
        {
          def progFiles86 = Environment.GetEnvironmentVariable("ProgramFiles(x86)");
          if (progFiles86 == null)
            Path.Combine(Environment.GetEnvironmentVariable("ProgramFiles"), "Nemerle")
          else
            Path.Combine(progFiles86, "Nemerle")
        }
        else
          nemerle
      }
    }
  }

  /// <summary>
  /// Description of Class1.
  /// </summary>
  public class CSharpToNemerleConvert
  {
    mutable compiler : ManagerClass = CompilerHost();

    public this()
    {
    }

    check_dir(file : string) : void
    {
        def dir = Path.GetDirectoryName(file);
        when (!dir.IsEmpty())
        when (!Directory.Exists(dir)) 
        {          
          _ = Directory.CreateDirectory(dir);
        }                      
    }
    
    public Convert(file : string, out_file : string) : void
    {
      def writer = LocatableTextWriter(StringBuilder());
      def parser = CSharpParser(compiler);          
      def str = File.ReadAllText(file);
      def src = StringSource(Location.GetFileIndex(file), str);
      def res = parser.Parse(src);      
      DeclPrettyPrint.PrintFile(res, writer, compiler);           
      check_dir(out_file);
      File.WriteAllText(out_file, writer.ToString());
    }

    public PrintNFile(file : string, out_file : string) : void
    {
        def writer = LocatableTextWriter(StringBuilder());
        def source = FileSource.ReadFile(file, true, false);
        def parser = DefaultParser(compiler);
        def res = parser.Parse(source);        
        DeclPrettyPrint.PrintFile(res, writer, compiler);
        check_dir(out_file);
        File.WriteAllText(out_file, writer.ToString());
    }
}
}
