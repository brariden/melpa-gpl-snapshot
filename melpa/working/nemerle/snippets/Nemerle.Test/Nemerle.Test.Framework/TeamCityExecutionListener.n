using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Nemerle.Test.Framework
{
  public sealed class TeamCityExecutionListener : ExecutionListener
  {
    public this(suiteName : string, captureTestOutput : bool, [NotNull] outputWriteLine : string -> void)
      requires !string.IsNullOrEmpty(suiteName)
    {
      _suiteName = suiteName;
      _captureTestOutput = captureTestOutput;
      _outputWriteLine = outputWriteLine;
    }

    public this(suiteName : string, captureTestOutput : bool, [NotNull] output : TextWriter)
    {
      this(suiteName, captureTestOutput, output.WriteLine)
    }

    public override Start() : void
    {
      _outputWriteLine($"##teamcity[testSuiteStarted name='$(_suiteName |> escape)']");
    }

    public override TestStart(test : Test) : void
    {
      def captureTestOutputValue = if(_captureTestOutput) "true" else "false";
      _outputWriteLine($"##teamcity[testStarted name='$(test.Name |> escape)' captureStandardOutput='$(captureTestOutputValue |> escape)']");
    }

    public override TestComplete(test : Test, result : Result, statistics : Statistics) : void
    {
      match(result)
      {
        | Passed => ()
        | Skipped(message) =>
          _outputWriteLine($"##teamcity[testIgnored name='$(test.Name |> escape)' message='$(message |> escape)']");
        | Failed(message, []) =>
          _outputWriteLine($"##teamcity[testFailed name='$(test.Name |> escape)' message='$(message |> escape)']");
        | Failed(message, details) =>
          _outputWriteLine($"##teamcity[testFailed name='$(test.Name |> escape)' message='$(message |> escape)' details='..$(details; escape(Environment.NewLine); escape)']");
        | Exception(exception) =>
          _outputWriteLine($"##teamcity[testFailed name='$(test.Name |> escape)' message='Unhandled exception of type $(exception.GetType().FullName |> escape)' details='$(exception.ToString() |> escape)']");
      }
      _outputWriteLine($"##teamcity[testFinished name='$(test.Name |> escape)' duration='$(statistics.ElapsedMilliseconds)']");
    }

    public override Complete() : void
    {
      _outputWriteLine($"##teamcity[testSuiteFinished name='$(_suiteName |> escape)']");
    }

    private static escape(message : string) : string
    {
      def needEscape = needEscapeResult :
      {
        foreach(c in message)
        {
          | '\'' | '\n' | '\r' | '|' | '[' | ']' => needEscapeResult(true)
          | _ => ()
        }
        false
      };
      if(needEscape)
      {
        def buffer = StringBuilder();
        mutable pos = 0;
        foreach(c in message with i)
        {
          | '\'' with escapeString = "|'"
          | '\n' with escapeString = "|n"
          | '\r' with escapeString = "|r"
          | '|'  with escapeString = "||"
          | '['  with escapeString = "|["
          | ']'  with escapeString = "|]" =>
            _ = buffer.Append(message, pos, i - pos).Append(escapeString);
            pos = i + 1;
          | _ => ()
        }
        buffer.Append(message, pos, message.Length - pos).ToString()
      }
      else
        message
    }

    private _suiteName : string;
    private _captureTestOutput : bool;
    private _outputWriteLine: string -> void;
  }
}
