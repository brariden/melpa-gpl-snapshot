using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Test.Framework;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler.Test
{
  internal sealed class NccTestExecutionListener : ExecutionListener
  {
    public this([NotNull] outputWriter : ColorizedOutputWriter)
    {
      _outputWriter = outputWriter;
    }

    public override Start() : void
    {
      _passed = 0;
      _failed = 0;
      _notRun = 0;
      _testStats.Clear();
      _outputWriter.WriteLine(null, $"Runtime version: $(Environment.Version)");
      def processType = if (IntPtr.Size == 8) "64" else "32";
      _outputWriter.WriteLine(null, $"Is a $processType bit process.");
      _timer.Start();
    }

    public override TestStart(test : Test) : void
    {
      | nccTest is NccTest with name = nccTest.FullName
      | _                  with name = test.Name =>
        _outputWriter.Write(ConsoleColor.DarkCyan, name);
        _outputWriter.Write(null, ": ");
    }

    public override TestComplete(test : Test, result : Result, statistics : Statistics) : void
    {
      unless(result is Result.Skipped)
        _testStats.Add(test, statistics);
      match(result)
      {
        | Passed  => _passed += 1;
        | Failed  => _failed += 1;
        | Skipped => _notRun += 1;
        | Exception(ex) =>
          _failed += 1;
          _outputWriter.WriteLine(ConsoleColor.Red, ex.ToString());
      }
    }

    public override Complete() : void
    {
      _timer.Stop();
      when(_testStats.Count > 0)
      {
        def topCount = Math.Min(_testStats.Count, 20);
        _outputWriter.WriteLine(ConsoleColor.DarkMagenta, $"Top $topCount of slowest tests:");
        foreach ((test, stats) in _testStats.OrderByDescending((_, stats) => stats.ElapsedMilliseconds).Take(topCount))
          _outputWriter.WriteLine(null, $"    Time: $(stats.Elapsed) Test: $(test.Name)");
      }
      match((_passed, _failed))
      {
        | (0, 0) =>
          _outputWriter.WriteLine(ConsoleColor.Cyan, "No tests to run.");

        | (_, 0) =>
          _outputWriter.WriteLine(ConsoleColor.Cyan, $"All tests passed. Time taken: $(_timer.Elapsed)");

        | (_, _) =>
          _outputWriter.WriteLine(ConsoleColor.Red, $<#$(pluralize(_passed, "test")) passed, $(pluralize(_failed, "test")) failed. Time taken: $(_timer.Elapsed)#>);
      }
    }

    private static pluralize(count : int, text : string) : string
    {
      if(count == 1) count.ToString() + " " + text
      else count.ToString() + " " + text + "s"
    }

    public GetExitCode() : int
    {
      if (_failed > 0)
        1
      else
        0
    }

    private _outputWriter : ColorizedOutputWriter;
    private mutable _passed : int;
    private mutable _failed : int;
    private mutable _notRun : int;
    private _testStats : List[Test * Statistics] = List();
    private _timer : Stopwatch = Stopwatch();
  }
}
