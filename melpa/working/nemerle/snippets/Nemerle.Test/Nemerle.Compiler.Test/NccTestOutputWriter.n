using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Test.Framework;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler.Test
{
  internal sealed class NccTestOutputWriter
  {
    public this([NotNull] writer : ColorizedOutputWriter)
    {
      _writer = writer;
    }

    public HasErrors : bool { get { _errorBuffer.Count > 0 } }

    public Write(messageType : NccTestMessageType, message : string) : void
    {
      def color = match (messageType)
      {
        | Error   =>
          unless(HasErrors)
          {
            _writer.WriteSpacer(null, '.', _statusColumn);
            _writer.WriteLine(ConsoleColor.Red, "failed");
          }
          _errorBuffer.Add(message);
          ConsoleColor.Red
        | Warning => ConsoleColor.Yellow
        | Debug => ConsoleColor.DarkGray
        | _ => null
      }
      _writer.Write(color, message);
    }

    public WriteLine(messageType : NccTestMessageType, message : string) : void
    {
      def color = match (messageType)
      {
        | Error   =>
          unless(HasErrors)
            writeStatus(ConsoleColor.Red, "failed");
          _errorBuffer.Add(message);
          ConsoleColor.Red;
        | Warning => ConsoleColor.Yellow
        | Debug => ConsoleColor.DarkGray
        | _ => null
      }
      _writer.WriteLine(color, message);
    }

    public GetSuccesOrFailResult() : Result
    {
      if (_errorBuffer.Count > 0)
        Result.Failed(_errorBuffer.Last(), NList.ToList(_errorBuffer.Take(_errorBuffer.Count - 1)))
      else
      {
        def message = "passed";
        writeStatus(ConsoleColor.Green, message);
        Result.Passed(message)
      }
    }

    public GetNotRunResult(message : string) : Result
    {
      writeStatus(ConsoleColor.Yellow, message);
      Result.Skipped(message);
    }

    public Reset() : void
    {
      _errorBuffer.Clear();
    }

    private writeStatus(color : ConsoleColor?, message : string) : void
    {
      _writer.WriteSpacer(null, '.', Math.Max(0, _statusColumn - message.Length));
      _writer.WriteLine(color, message);
    }

    private _writer : ColorizedOutputWriter;
    private _errorBuffer : List[string] = List();
    private static _statusColumn : int = 110;
  }

  internal enum NccTestMessageType
  {
    | Debug
    | Info
    | Warning
    | Error
  }
}
