using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Threading;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nemerle.Compiler.Test
{
  internal sealed class ExternalVerifier : Verifier
  {
    public this(
                verifierFileName        : string,
      [NotNull] verifierArguments       : list[string],
      [NotNull] processStartInfoFactory : ProcessStartInfoFactory)
      requires !string.IsNullOrEmpty(verifierFileName)
    {
      _verifierFileName = verifierFileName;
      _verifierArguments = verifierArguments;
      _processStartInfoFactory = processStartInfoFactory;
    }

    public override Verify(filePath : string) : VerifierResult
      requires !string.IsNullOrEmpty(filePath)
    {
      def actualArguments = List();
      actualArguments.AddRange(_verifierArguments);
      actualArguments.Add(filePath);

      def startInfo = _processStartInfoFactory.CreateProcessStartInfo(_verifierFileName, actualArguments);
      startInfo.UseShellExecute = false;
      startInfo.RedirectStandardOutput = true;
      startInfo.RedirectStandardError = true;

      using(process = Process.Start(startInfo))
      {
        mutable stdout;
        def readStdout()
        {
          stdout = process.StandardOutput.ReadToEnd();
        }
        mutable stderr;
        def readStderr()
        {
          stderr = process.StandardError.ReadToEnd();
        }

        using (
          stdoutEvent = ThreadPoolUtils.QueueUserWorkItem(readStdout),
          stderrEvent = ThreadPoolUtils.QueueUserWorkItem(readStderr),
          watchdogEvent = process.WaitForExitOrKill()
        )
         ThreadPoolUtils.WaitAll(stdoutEvent, stderrEvent, watchdogEvent);

        if(process.ExitCode == 0)
          VerifierResult.Success()
        else
          VerifierResult.Fail(stdout + Environment.NewLine + stderr)
      }
    }

    private _verifierFileName : string;
    private _verifierArguments : list[string];
    private _processStartInfoFactory : ProcessStartInfoFactory;
  }
}
