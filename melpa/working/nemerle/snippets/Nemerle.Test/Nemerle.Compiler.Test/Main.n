using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Test.Framework;
using Nemerle.Test.Framework.Utils;

using System;
using System.IO;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nemerle.Compiler.Test;

internal module Program
{
  public Main(arguments : array[string]) : int
  {
    def parseArguments(value : string) : array[string]
    {
      value.Split(array[' ', '\t', '\n', '\r'], StringSplitOptions.RemoveEmptyEntries)
    }

    mutable showUsage                 = false;
    mutable externalNcc               = None();
    def     referencies               = List();
    def     macroReferencies          = List();
    def     nccArguments              = List();
    mutable externalVerifier          = None();
    def     externalVerifierArguments = List();
    mutable runtime                   = None();
    def     runtimeArguments          = List();
    mutable verbosity                 = 0;
    mutable testFiles                 = List();
    mutable outputDirectory           = null;
    mutable sortCriteria              = SortCriteria.FullName;
    mutable colorSet                  = ColorSet.Console;
    mutable teamCityTestSuite         = null;
    mutable visualStudioTestSuite     = null;
    mutable visualStudioSummaryResult = "SummaryResult.xml";

    def options =
    [
      Getopt.CliOption.PreHelp("usage header", "Usage:"),
      Getopt.CliOption.Flag(name = "-help",
                              aliases = ["-?"],
                              help = "prints this message",
                              handler = fun() { showUsage = true }),
      Getopt.CliOption.String(name = "-n",
                              aliases = ["-ncc"],
                              help = "use this Nemerle compiler (default : internal) ",
                              handler = fun (s) { externalNcc = Some(s); }),
      Getopt.CliOption.String(name = "-reference",
                              aliases = ["-ref"],
                              help = "dll to be referenced during file(s) compilation (default : none) ",
                              handler = fun (s) { referencies.Add(s) }),
      Getopt.CliOption.String(name = "-macro",
                              aliases = ["-m"],
                              help = "macro dll to be referenced during file(s) compilation (default : none) ",
                              handler = fun (s) { macroReferencies.Add(s) }),
      Getopt.CliOption.String(name = "-parameters",
                              aliases = ["-parms", "-p"],
                              help = "parameters passed to the compiler (default : none) ",
                              handler = fun (s) { nccArguments.AddRange(parseArguments(s)) }),
      Getopt.CliOption.String(name = "-output",
                              aliases = [],
                              help = "output directory for Nemerle compiler (default : test file directory) ",
                              handler = fun (s) { outputDirectory = s }),
      Getopt.CliOption.String(name = "-verifier",
                              aliases = ["-verify"],
                              help = "location of PEVerify program (default : none) ",
                              handler = fun (s) { externalVerifier = Some(s.Trim()) }),
      Getopt.CliOption.String(name = "-verifier-params",
                              aliases = ["-verify-params"],
                              help = "parameters passed to the PEVerify program (default : none) ",
                              handler = fun (s) { externalVerifierArguments.AddRange(parseArguments(s)) }),
      Getopt.CliOption.String(name = "-r",
                              aliases = ["-runtime"],
                              help = "use this .Net runtime engine (default : none) ",
                              handler = fun (s) { runtime = Some(s.Trim()) }),
      Getopt.CliOption.String(name = "-rp",
                              aliases = ["-runtime-params"],
                              help = "parameters passed to the .Net runtime (default : none)",
                              handler = fun (s) { runtimeArguments.AddRange(parseArguments(s)) }),
      Getopt.CliOption.Flag(name = "-v",
                            aliases = ["-verbose"],
                            help = "prints all Nemerle output (default : off) ",
                            handler = fun () { verbosity = 1; }),
      Getopt.CliOption.Flag(name = "-vv",
                            help = "prints all Nemerle and runtime output (default : off) ",
                            handler = fun () { verbosity = 2; }),
      Getopt.CliOption.String(name = "-s",
                              aliases = ["-sort"],
                              help = "test files sort criteria 'filename' / 'modified' / 'create' (default : file modification date) ",
                              handler = fun (s)
                              {
                                match(s.Trim().ToLower())
                                {
                                  | "filename"      => sortCriteria = SortCriteria.FullName
                                  | "modified-date" => sortCriteria = SortCriteria.LastWriteTime
                                  | "access-date"   => sortCriteria = SortCriteria.LastAccessTime
                                  | "create-date"   => sortCriteria = SortCriteria.CreationTime
                                  | _ => ()
                                }
                              }),
      Getopt.CliOption.Flag(name = "-debugger",
                            aliases = [],
                            help = "Display assert dialog for user can start debug session",
                            handler = () => System.Diagnostics.Debug.Assert(false, 
                            "Press Retry to start debug session of test. "
                            "If you wants to see this dialog at next time you should "
                            "remove '-debugger' option from command line")),
      Getopt.CliOption.Flag(name = "-unix-colors",
                            aliases = [],
                            help = "Print passed/error/warning messages with ANSI characters interpreted by UNIX as colors",
                            handler = fun() { colorSet = ColorSet.Unix }),
      Getopt.CliOption.String(name = "-team-city-test-suite",
                              aliases = [],
                              help = "TeamCity test suite name",
                              handler = fun(value) { teamCityTestSuite = value }),
      Getopt.CliOption.String(name = "-visual-studio-test-suite",
                              aliases = [],
                              help = "VisualStudio test suite name",
                              handler = fun(value) { visualStudioTestSuite = value }),
      Getopt.CliOption.String(name = "-visual-studio-summary-result",
                              aliases = [],
                              help = "VisualStudio test summary XML file name",
                              handler = fun(value) { visualStudioSummaryResult = value }),
      Getopt.CliOption.NonOption(name = "",
                                 help = "specify file (s) to be tested (default : All *.n and *.cs files from current directory) ",
                                 handler = fun (s) { testFiles.Add(s) })
    ];

    mutable parseError = None();
    Getopt.Parse(fun(message) { parseError = Some(message) }, options, arguments.ToNList());
    when(parseError is Some(message))
    {
      Console.Error.WriteLine(message);
      return -1;
    }

    when(showUsage)
    {
      Console.Error.WriteLine(Getopt.Usage(options));
      return -1;
    }

    def outputWriter = match(colorSet)
    {
      | Console => DefaultColorizedOutputWriter(Console.Out)
      | Unix    => UnixColorizedOutputWriter(Console.Out)
    };
    def processStartFactory = match(runtime)
    {
      | Some(fileName) => RuntimeProcessStartInfoFactory(fileName, runtimeArguments.ToNList())
      | None           => DefaultProcessStartInfoFactory()
    };
    def ncc = match(externalNcc)
    {
      | Some(fileName) => ExternalNcc(fileName, nccArguments.ToNList(), processStartFactory)
      | None           => HostedNcc(nccArguments.ToNList(), verbosity)
    };
    def verifier = match(externalVerifier)
    {
      | Some(fileName) => Some(ExternalVerifier(fileName, externalVerifierArguments.ToNList(), DefaultProcessStartInfoFactory()))
      | None()         => None()
    };
    def mainExecutionListener = NccTestExecutionListener(outputWriter);
    def listener =
    {
      mutable listeners = [mainExecutionListener];
      unless(string.IsNullOrEmpty(teamCityTestSuite))
        listeners ::= TeamCityExecutionListener(teamCityTestSuite, false, outputWriter.WriteLine(ConsoleColor.DarkGray, _));
      unless(string.IsNullOrEmpty(visualStudioTestSuite))
        listeners ::= VisualStudioExecutionListener(visualStudioTestSuite, visualStudioSummaryResult);
      match(listeners)
      {
        | [one] => one
        | many  => MulticastExecutionListener(many)
      }
    };
    def runner =
      if(ncc is HostedNcc && typeof(object).GetType().FullName == "System.RuntimeType")
        ThreadRunner(listener, 20 * 1024 * 1024 * if (IntPtr.Size == 8) 4 else 1)
      else
        Runner(listener);
    def testsFileNames = FileSearcher.Search(testFiles, SearchOption.TopDirectoryOnly).ToArray();
    Array.Sort(testsFileNames, StringComparer.Ordinal);
    def tests = testsFileNames.Select(NccTest(_, outputDirectory, outputWriter, ncc, referencies, macroReferencies, verifier, processStartFactory, verbosity));
    runner.Run(tests);
    outputWriter.Flush();
    mainExecutionListener.GetExitCode()
  }

  private enum SortCriteria
  {
    | FullName
    | CreationTime
    | LastAccessTime
    | LastWriteTime
  }

  private enum ColorSet
  {
    | Console
    | Unix
  }
}
