#pragma indent

// right priority < (left(=>) = 145) to allow: parser <@ x => M
[assembly: Nemerle.Internal.OperatorAttribute ("Nemerle.Aop.DevMacros", "<@", false, 145, 144)] 
[assembly: Nemerle.Internal.OperatorAttribute ("Nemerle.Aop.DevMacros", "<@@", false, 145, 144)] 
[assembly: Nemerle.Internal.OperatorAttribute ("Nemerle.Aop.DevMacros", "<%", false, 142, 142)] 

[assembly: Nemerle.Internal.OperatorAttribute ("Nemerle.Aop.DevMacros", "<|>", false, 147, 146)]
[assembly: Nemerle.Internal.OperatorAttribute ("Nemerle.Aop.DevMacros", "<*>", false, 148, 147)] 
[assembly: Nemerle.Internal.OperatorAttribute ("Nemerle.Aop.DevMacros", "*>", false, 148, 147)] 
[assembly: Nemerle.Internal.OperatorAttribute ("Nemerle.Aop.DevMacros", "<*", false, 148, 147)] 

using Nemerle.Compiler
using Nemerle.IO

namespace Nemerle.Aop.DevMacros

    [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeTypedMembers, Nemerle.MacroTargets.Method)]\
    macro Reversed(_: TypeBuilder, mb: ParsedMethod) 
        mb.Body = match (mb.Body)
            | <[{..$sequence}]> => 
                def reversed = sequence.Rev()
                <[{..$reversed}]>
            | x => x

    macro ReversedSequence(body) syntax ("reversed", body) 
        match (body)
            | <[{..$sequence}]> => 
                def reved = sequence.Rev()
                <[{..$reved}]>
            | x => x
