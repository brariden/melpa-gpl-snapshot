// providing that programmer gives a name without wildchars, the using directives are
// taken into account. Specifically here the aClassInB is not a full name. It is resolved 
// according to using B; declaration.
using Nemerle.Aop;
using Nemerle.IO;
using B;


namespace A {
    public class aClassInA {
        public aMethod(): void {print("A\n")}
    }
}

namespace B {
    public class aClassInB {
        public aMethod(): void {print("B\n")}
    }
}

[aspect()] public class Aspect {
    after() returning: execution(aClassInB.aMethod(): void) {print("advice\n")}
}

public class Main {
    public static Main(): void {
        A.aClassInA().aMethod();
        B.aClassInB().aMethod();
    }
}

/*
BEGIN-OUTPUT
A
B
advice
END-OUTPUT
*/
