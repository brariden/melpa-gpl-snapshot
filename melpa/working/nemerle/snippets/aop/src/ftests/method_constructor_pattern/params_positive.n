using Nemerle.Aop;
using Nemerle.IO;

namespace N { public class Klass {} }

public class Base {
    public Method( _: N.Klass, _: string, _: array[float] ): void {
        print("Method\n");
    }
  

    public Method( _: N.Klass, _: int,_: array[float] ): void {
        print("Method with non-matching params\n");
    }

    public MethodInt(_: N.Klass, _: string,_: array[float]): int {
        print("Method with non-matching ret type\n");
        0
    }

    public Method(): void {
        print("par-less method\n");
    }
}


[aspect()] public class Aspecto {
    after() returning: execution(Base.Method(N.Klass, string , ?): void) {
        print("advice\n");
    }
}

public class Main {
    public static Main(): void {
        Base().Method(null,null,null);
        Base().Method(null,0,null);
        _=Base().MethodInt(null,null,null);
        Base().Method();
    }
}

/*
BEGIN-OUTPUT
Method
advice
Method with non-matching params
Method with non-matching ret type
par-less method
END-OUTPUT
*/
