// tests if checking subtype pattern works well with typarams pattern
using Nemerle.Aop;
using Nemerle.IO;


namespace A {
    public class AClass['a] { }
}

namespace B {
    public class BClass['a,'b]: A.AClass['a] { }
}

public class D {
    public D(_: B.BClass[string,int]): void {print("D\n")}
    public E(_: B.BClass[int,int]): void {print("E\n")}
    public F['a](_: B.BClass['a,string]): void where 'a : string {print("F\n")} //not fully supporting generics yet, this should not match
}

[aspect()] public class Aspect {
    after() returning: execution(D.?(A.AClass[string]+): void) {print("advice\n")}
}

public class Main {
    public static Main(): void {
        D().D(B.BClass());
        D().E(B.BClass());
        D().F(B.BClass());
    }
}

/*
BEGIN-OUTPUT
D
advice
E
F
END-OUTPUT
*/
