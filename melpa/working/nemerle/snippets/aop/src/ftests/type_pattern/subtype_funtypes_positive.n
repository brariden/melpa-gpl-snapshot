using Nemerle.Aop;
using Nemerle.IO;
using System.Collections;



public class C {
    public M1(_: ICollection -> Stack): void {print("M1\n")} //should not match, because there is no subtyping for functions in nemerle, unfortunatelly
    public M2(_: ICollection -> string): void {print("M2\n")}
    public M3(_: Stack -> ICollection): void {print("M3\n")}
}

[aspect()] public class Aspect {
    after(_f: Stack -> ICollection) returning: execution(C.?(?): void) && args(_f) {print("advice\n")}
}

public class Main {
    public static Main(): void {
        C().M1(_=>Stack());
        C().M2(_=>"");
        C().M3(_=>Stack());
    }
}

/*
BEGIN-OUTPUT
M1
M2
M3
advice
END-OUTPUT
*/
