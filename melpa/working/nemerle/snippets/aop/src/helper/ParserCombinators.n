#pragma indent

using Nemerle.Aop.DevMacros
using Nemerle.Compiler
using Nemerle.Utility
using Nemerle.Builtins.Function
using Nemerle.Collections
using Nemerle.IO

namespace Nemerle.Aop.Helper

    type Parser['a] = PInput -> PResult['a]

    [Record] public class PInput
        [Accessor] tokens : list[Token]
        env : GlobalEnv
        params_dict : Hashtable[string, AdviceParameter]
        factory : object
        public this(tokens : list[Token], env : GlobalEnv)
            this(tokens, env, null)
        public this(tokens : list[Token], env : GlobalEnv, params_dict : Hashtable[string, AdviceParameter])
            this(tokens, env, params_dict, null)
        public WithTokens(toks : list[Token]) : PInput
            PInput(toks, this.env, this.params_dict, this.factory)
        public WithFactory(factory : object) : PInput
            PInput(this.tokens, this.env, this.params_dict, factory)
        public Factory : object
          get
            when (this.factory == null)
                print ("trying to get factory but it is null\n")
            this.factory
        public ParamsDict : Hashtable[string, AdviceParameter]
          get
            when (this.params_dict == null)
                print("trying to get params_dict when it is null\n")
            this.params_dict
        public Env : GlobalEnv
          get
            when (this.env == null)
                print("trying to get the evn when it is null\n")
            this.env


    public variant PResult['a]
        | OK
            val : 'a
            unparsed : PInput
        | Fail
            unparsed : PInput
        | Error
            unparsed : PInput
            description : string

    public module ParserCombinators
        public token_equal(tok1 : Token, tok2 : Token) : bool
            | (Token.Identifier(id1), Token.Identifier(id2)) => id1 == id2 //TODO
            | (Token.Operator(id1), Token.Operator(id2)) => id1 == id2
            | _ => false

        public @<|>['a](parser1 : Parser['a], parser2 : Parser['a]) : Parser['a]
            MapOutput(parser1, (result, rest)=>PResult.OK(result, rest), ts=>parser2(ts))

        public @<*>['a, 'b](parser1 : Parser['a], parser2 : Parser['b]) : Parser['a*'b]
            fun(ts)
                match(parser1(ts))
                    | PResult.OK(v, rest) =>
                        match(parser2(rest))
                            | PResult.OK(v2, rest2) => PResult.OK((v, v2), rest2)
                            | PResult.Fail => PResult.Fail(ts)
                            | PResult.Error(errest, desc) => PResult.Error(errest, desc)
                    | PResult.Fail => PResult.Fail(ts)
                    | PResult.Error(errest, desc) => PResult.Error(errest, desc)

        // ignore output from the left parser
        public @*>['a, 'b](parser1 : Parser['a], parser2 : Parser['b]) : Parser['b]
            parser1 <*> parser2 <@ (_, v2) => v2

        // ignore output from the right parser
        public @<*['a, 'b](parser1 : Parser['a], parser2 : Parser['b]) : Parser['a]
            parser1 <*> parser2 <@ (v1, _) => v1

        public @<@['a, 'b](parse : Parser['a], f : 'a -> 'b ) : Parser['b]
            MapOutput(parse, (v, l) => PResult.OK(f(v), l), x=>PResult.Fail(x))

        public @<@@['a, 'b](parse : Parser['a], f : 'a * PInput -> 'b ) : Parser['b]
            MapOutput(parse, (v, rest) => PResult.OK(f(v, rest), rest), x=>PResult.Fail(x))

        MapOutput['a, 'b](parse : Parser['a], some : 'a * PInput -> PResult['b], none : PInput -> PResult['b]) : Parser['b]
            fun(input)
                match(parse(input))
                    | PResult.OK(x, unp)  => some(x, unp)
                    | PResult.Fail(x)  => none(x)
                    | PResult.Error(x, desc) => PResult.Error(x, desc) // propagate error up

        public @<%['a] (description : string, parse : Parser['a]) : Parser['a]
            fun(ts)
                match(parse(ts))
                    | PResult.Fail(x) => PResult.Error(x, description)
                    | x => x

        public optional['a](parse : Parser['a]) : Parser[option['a]]
            (parse <@ x => Some(x)) <|> succeed(None())

        public repetition['a](parser : Parser['a]) : Parser[list['a]]
            def rep(input)
                def parse = (parser<*>rep <@ (_ :: _)) <|> succeed([])
                parse(input)
            rep

        public rep_with_separator['a, 'b](parse : Parser['a], parse_sep : Parser['b]) : Parser[list['a]]
            parse <*> repetition(parse_sep *> parse) <@ (x, y) => x :: y

        public succeed['a](val_to_return : 'a) : Parser['a]
            ts => PResult.OK(val_to_return, ts)

        public condition['a](parse : Parser['a], p : 'a -> bool)  : Parser['a]
            fun(ts)
                match(parse(ts))
                    | PResult.OK(v, _) as result when p(v) => result
                    | _ => PResult.Fail(ts)

        public keyword(kwrd : string) : Parser[string]
            condition(parse_id, x=>x==kwrd)

        public integer(inp : PInput) : PResult[int]
            match(inp.Tokens)
                | Token.IntegerLiteral(Literal.Integer(val, _, _)) :: rest => PResult.OK((val :> int, inp.WithTokens(rest)))
                | _ => PResult.Fail(inp)

        public operator(oper : string) : Parser[string]
            fun (inp)
                match(inp.Tokens)
                    | Token.Operator(op) :: rest when oper == op =>
                        PResult.OK(op, inp.WithTokens(rest))
                    | _ => PResult.Fail(inp)

        public parse_id['a](inp : PInput) : PResult[string]
            match(inp.Tokens)
                | Token.Identifier(id) :: rest =>
                    PResult.OK(id, inp.WithTokens(rest))
                | _ => PResult.Fail(inp)

        public roundgrp['a](parse : Parser['a]) : Parser['a]
            condition_tok(grp(parse), fun(_) {|Token.RoundGroup => true | _ => false})

        public bracesgrp['a](parse : Parser['a]) : Parser['a]
            condition_tok(grp(parse), fun(_) {|Token.BracesGroup => true | _ => false})

        grp['a](parser : Parser['a]) : Parser['a]
            fun(inp)
                match(inp.Tokens)
                    | Token.RoundGroup :: rest | Token.BracesGroup :: rest | Token.LooseGroup :: rest | Token.SquareGroup :: rest =>
                        def toks = Lexer(inp.Tokens.Head).Map(x=>x)
                        def p = MapOutput(parser, (v, _) => PResult.OK(v, inp.WithTokens(rest)), x=>PResult.Fail(x))
                        p(inp.WithTokens(toks))
                    | _ => PResult.Fail(inp)

        condition_tok['a](parser : Parser['a], p : Token->bool) : Parser['a]
            fun(inp)
                match(inp.Tokens)
                    | h :: _ when p(h) => parser(inp)
                    | _ => PResult.Fail(inp)

        public squaregrp['a](parse : Parser['a]) : Parser['a]
            condition_tok(grp(parse), fun(_) {|Token.SquareGroup => true | _ => false})

        public loosegrp['a](parse : Parser['a]) : Parser['a]
            condition_tok(grp(parse), fun(_) {|Token.LooseGroup => true | _ => false})

        public parentheses['a](parser : Parser['a]) : Parser['a]
            roundgrp(loosegrp(parser))

        public some['a](parse : Parser['a]) : PInput -> 'a
            parse >> (fun(_){|PResult.OK(x, _)=>x |PResult.Fail(x) with desc =""|PResult.Error(x, desc) => Nemerle.IO.print("error $x |> $desc\n"); throw System.Exception()})

        public get_result['a](res : PResult['a]) : 'a * PInput
            | OK(v, rest) => (v, rest)
            | _ => throw System.Exception()

