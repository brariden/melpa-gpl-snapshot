#pragma indent

using Nemerle.Utility
using Nemerle.Compiler
using Nemerle.IO
using Nemerle
using Nemerle.Compiler.Parsetree
using Nemerle.Collections

namespace Nemerle.Aop.Helper
    
    public enum AfterType { | After | Throwing | Returning }

    public abstract class Advice

        public static Before(advice_meth : AdviceMethod, pointcut_toks : list[Token]) : Advice
            def environment = advice_meth.PointcutEnv;
            def pointcut = Pointcut.Parse(pointcut_toks, environment, advice_meth.GlobalEnv)
            BeforeAdvice(pointcut, advice_meth)

        public static After(advice_meth : AdviceMethod, pointcut_toks : list[Token], has_ret_parm : bool, after_type : AfterType, ret_or_throw_parm : list[PParameter]) : Advice
            def pointcutEnv = advice_meth.PointcutEnv
            def pointcut = Pointcut.Parse(pointcut_toks, pointcutEnv, advice_meth.GlobalEnv) :> RootPointcut
            when (has_ret_parm && after_type == AfterType.Returning)
                pointcut.Add(ReturnsPointcut(advice_meth.LastParamType))

            if (after_type == AfterType.Throwing)
                AfterThrowing(pointcut, advice_meth, NList.Map(ret_or_throw_parm, x => x.Type).Find(_ => true))
            else
                AfterAdvice(pointcut, advice_meth, has_ret_parm, after_type)

        public static Around(meth : AdviceMethod, pointcut_toks : list[Token]) : Advice
            def pointcut = Pointcut.Parse(pointcut_toks, meth.PointcutEnv, meth.GlobalEnv) :> RootPointcut
            pointcut.Add(ReturnsPointcut.ExactlyTheSame(meth.ReturnTyVar))
            AroundAdvice(pointcut, meth)

        protected pointcut : Pointcut
        protected mutable has_been_weaved_somewhere = false
        [Nemerle.DesignPatterns.ProxyPublicMembers]\
        protected adviceMethod : AdviceMethod

        public this(pointcut : Pointcut)
            this.pointcut = pointcut

        public this(pointcut : Pointcut, meth : AdviceMethod)
            this.pointcut = pointcut
            this.adviceMethod = meth

        public virtual WeaveIfMatches(jp : Joinpoint) : void
            def match_res = pointcut.Matches(jp)
            when (match_res.Matched)
//                    print("$pointcut matches $jp and advice count is $(Advices.Instance.Count)\n");
                    def has_invocation_param()
                        adviceMethod.ParametersCount > 0 && adviceMethod.NameOfParmType(0) == "Nemerle.Aop.JoinPoint"
                    def vbs = if (has_invocation_param())
                        VariableBinding.Invocation(0) :: match_res.VarBindings
                    else 
                        match_res.VarBindings
                    weave(jp, vbs)
                    has_been_weaved_somewhere = true

        internal virtual ContainsProceed : bool
          get
            false

        protected abstract weave(jp : Joinpoint, var_bindings : list[VariableBinding]) : void


        public WarnIfNotWeaved() : void
            when (!has_been_weaved_somewhere)
                Message.Warning($"pointcut $pointcut matches nothing\n");

        public override ToString() : string
            "advice: "  +  pointcut.ToString()

    internal class AroundAdvice : Advice
        internal this(pointcut : Pointcut, meth : AdviceMethod)
            base(pointcut, meth)
        protected override weave(jp : Joinpoint, var_bindings : list[VariableBinding]) : void
            jp.WeaveAround(this, var_bindings)

        internal override ContainsProceed : bool
          get
            adviceMethod.LastParamsNameIsProceed

    internal class BeforeAdvice : Advice
        internal this(pointcut : Pointcut, meth : AdviceMethod)
            base(pointcut, meth)
        protected override weave(jp : Joinpoint, var_bindings : list[VariableBinding]) : void
            jp.WeaveBeforeReturning(this, var_bindings)

    internal class AfterAdvice : Advice
        after_type : AfterType
        has_ret_parm : bool

        internal this(pointcut : Pointcut, meth : AdviceMethod, has_return_parm : bool, after_type : AfterType)
            base(pointcut, meth)
            this.after_type = after_type 
            this.has_ret_parm = has_return_parm
        protected override weave(jp : Joinpoint, var_bindings : list[VariableBinding]) : void
            mutable vbs = if (has_ret_parm)
                VariableBinding.ReturnValue(ParametersCount-1)  :: var_bindings
            else
                var_bindings
            match(after_type)
                | AfterType.Returning => jp.WeaveAfterReturning(this, vbs)
                | AfterType.After => jp.WeaveAfter(this, vbs)
                | _ => Message.Error("internal error")

    internal class AfterThrowing : Advice
        throw_parm_ty : option[PExpr]
        internal this(pointcut : Pointcut, meth : AdviceMethod, throw_parm_ty : option[PExpr])
            base(pointcut, meth)
            this.throw_parm_ty = throw_parm_ty

        protected override weave(jp : Joinpoint, var_bindings : list[VariableBinding]) : void
            mutable vbs = match (throw_parm_ty)
                | Some(ty) => VariableBinding.ThrownException(ParametersCount-1, ty) :: var_bindings
                | None => var_bindings
            jp.WeaveAfterThrowing(this, vbs)
            
