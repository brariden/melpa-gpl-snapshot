#pragma indent

using Nemerle.Utility
using Nemerle.Compiler
using Nemerle.IO
using Nemerle
using Nemerle.Compiler.Parsetree
using Nemerle.Collections

namespace Nemerle.Aop.Helper
    /** Serves as a wrapper around method implementing an advice.

        It is created given name of the method and looks up
        the actual MethodBuilder lazily, to enable creating
        this object in the BeforeInheritance phase (in that phase
        there are no MethodBuilders yet).

        Its resposibility is to expose types from the signature, 
        with variables substituted, for the purpose of checking
        subtyping relations.
    */
    public class AdviceMethod

        mutable body : MethodBuilder
        name : string
        aspect : TypeBuilder

        public this(aspekt : TypeBuilder, name : string)
            this.aspect = aspekt
            this.name = name

        public Builder : MethodBuilder
            get
                when(body==null)
                    body = aspect.LookupMember(name).Head  :> MethodBuilder
                body

        public NameOfParmType(n : int) : string
            Builder.GetParameters().Nth(n).ty.Fix().ToString()

        public PointcutEnv : Hashtable[string, AdviceParameter] 
          get
            def param_dict = Hashtable()
            // : TODO improve it someday
            Builder.GetParameters().IterI(1, (i, fun_param) => param_dict[fun_param.Name] = AdviceParameter(i, ParamType(i-1)))
            param_dict

        public GlobalEnv : GlobalEnv
          get
            aspect.GlobalEnv


        // static tyvars substituted for fresh type vars
        mutable parms : list[TypeVar]
        mutable ret_type : TypeVar

        private init() : void
            def (subst, _) = Subst.Fresh(Builder.GetHeader().TypeParameters)
            parms = Builder.GetParameters().Map(p=>subst.Apply(p.ty.Fix()))
            ret_type = subst.Apply(Builder.GetHeader().ReturnType.Fix())

        // 0 based
        private ParamType(n : int) : TypeVar
            when(parms==null)
                init()
            parms.Nth(n)

        internal ReturnTyVar : TypeVar
          get
            when(ret_type==null)
                init()
            ret_type

        internal LastParamType : TypeVar
          get
            ParamType(ParametersCount-1)

        internal LastParamsNameIsProceed : bool
          get
            ParametersCount > 0 && Builder.GetParameters().Nth(ParametersCount-1).Name == "proceed"

        public ParametersCount : int
            get
                Builder.GetParameters().Length
