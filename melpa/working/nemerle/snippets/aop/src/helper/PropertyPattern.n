using Nemerle.IO;
using Nemerle.Compiler;

namespace Nemerle.Aop.Helper {

    public class PropertyPattern : MemberPattern {
        
        get : bool;
        set : bool;

        public this(ret_type : TypePattern, id : IdPattern, get : bool, set : bool) {
            base(id, parameters = Parameters.Empty(), return_type = ret_type);
            this.get = get;
            this.set = set;
        }


        public override Matches(jp : Joinpoint) : MatchResult {
            def get_set =( (get && jp.IsPropertyGet) || (set && jp.IsPropertySet) );

//            when(get_set) {
//            print("jp is $jp\n");
//            print("get_set is $get_set\n");
//
//            print("$id is match? $(jp.Name)\n");
//            print("$return_type ~~= $(jp.ReturnType)\n");
//            }
            if (jp.IsPropertyGet) {
                def all_met = get_set
                && id.Matches(jp.Name)
                && (return_type == null || return_type.Matches(jp.ReturnType));
                MatchResult(all_met, [])
            } else {
                def all_met = get_set
                && id.Matches(jp.Name)
                && (return_type == null || return_type.Matches(jp.FirstParamType));
                MatchResult(all_met, [])
            }

        }
        public override Kind : string { get { "property"} }

        public override ToString() : string { 
            def get_set = (if (get)"get;"else"") + (if(set) "set;"else"") ;
            $"$id{$get_set} : $return_type"
        }
    }
}
