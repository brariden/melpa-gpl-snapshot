using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;

using Nemerle.Peg;
using Nemerle.Peg.FSMBuilder;

    [PegGrammar( Options = EmitDebugSources,program, grammar {
    
        // character processing
        any                         = ['\u0000'..'\uFFFF'];
        newLine : void              = "\r\n" / '\n' / '\r' / '\u2028' / '\u2029' / '\u0085';
        comment                     = '#' (!newLine any)* newLine;
        space   : void              = ' ' / '\t' / '\u000B' / '\u000C' / comment;
        letter                      = ([Lu, Ll, Lt, Lm, Lo, Nl] / '_');
        digit                       = ['0'..'9'];
        
        
        // identifiers
        identifierPart              = letter / digit;
        identifierBody              = letter identifierPart*;
        identifier                  = identifierBody s;
        placeholder                 = '_' s;
        
        // spaces
        [InlineAllSubrules]
        s : void                    = space*;
        S : void                    = !identifierPart s;
        

        // string literal
        escapeSequence              = @"\""";
        simpleCharacter             = !( "\"" / "\\") any;
        character                   = escapeSequence / simpleCharacter;
        stringLiteral               = '"' character '"';

        // texty literals
        naLiteral                   = "~" S;
        trueLiteral                 = "true" S;
        falseLiteral                = "false" S;
        boolean                     = trueLiteral / falseLiteral; 
        
        // number literal
        naturalNumber               = digit+;
        integerNumber               = ('-' s)? naturalNumber s;
        decimalNumber               = integerNumber ("." naturalNumber)? ("e" naturalNumber)? s;
        
        
        // date literal
        datePart                    = ':'s naturalNumber s;
        date                        = naturalNumber s datePart+;
        
        
        // brackets
        parenL                      = '('s;
        parenR                      = ')'s;
        braceL                      = '['s;
        braceR                      = ']'s;
        bracketL                    = '{'s;
        bracketR                    = '}'s;
        
        
        // operators
        addOp                       = '+'s;
        subOp                       = '-'s;
        /**** и так далее ****/
        
        // punctuation
        comma                       = ','s;
        semicolon                   = ';'s;
        
        nsOp                        = "s"s;
        // names
        simpleName                  = identifier;
        complexName                 = simpleName? (nsOp simpleName)+;
        name                        = placeholder / simpleName / complexName;
        // values
        data                        = s;
        listLiteral                 = s;
        literalValue                = data / stringLiteral / boolean / listLiteral / date;
        value                       = name / literalValue;
        
        // expression lists
        commaList                   = expression (comma expression)*;
        semiList                    = expression (semicolon expression)*;
        
        // expressions        
        priorityExpression          = parenL expression parenR;
        ex0                         = priorityExpression //priorityExpression
                                    / value;
        
        callExpression              = ex0 parenL commaList parenR;
        indexExpression             = ex0 braceL commaList braceR;
        ex1                         = callExpression 
                                    / indexExpression 
                                    / ex0;
        dotOp                       = s;
        memberExpression            = ex1 dotOp name;
        ex2                         = memberExpression
                                    / ex1;
        andOp                       = s;
        divOp                       = s;
        eqOp                        = s;
        filterOp                    = s;
        gteOp                       = s;
        gtOp                        = s;
        lseOp                       = s;
        lsOp                        = s;
        mapOp                       = s;
        mulOp                       = s;
        orOp                        = s;
        powOp                       = s;
        reduceOp                    = s;
        xorOp                       = s;

        mapExpression               = ex2 mapOp ex3;
        reduceExpression            = ex2 reduceOp value reduceOp ex3 
                                    / ex2 reduceOp ex3;
        filterExpression            = ex2 filterOp ex3;
        pipeOp                      = s;
        pipeExpression              = ex2 pipeOp ex3;
        ex3                         = mapExpression 
                                    / reduceExpression 
                                    / filterExpression 
                                    / pipeExpression
                                    / ex2;
        
        powExpression               = ex3 powOp ex4;
        ex4                         = powExpression
                                    / ex3;
        
        mulExpression               = ex4 mulOp ex5;
        divExpression               = ex4 divOp ex5;
        ex5                         = mulExpression 
                                    / divExpression
                                    / ex4;
        
        addExpression               = ex5 addOp ex6;
        subExpression               = ex5 subOp ex6;
        ex6                         = addExpression 
                                    / subExpression
                                    / ex5;
        
        lessExpression              = ex6 lsOp ex7;
        lessEqualExpression         = ex6 lseOp ex7;
        greaterExpression           = ex6 gtOp ex7;
        greaterEqualExpression      = ex6 gteOp ex7;
        equalExpression             = ex6 eqOp ex7;
        ex7                         = equalExpression 
                                    / lessExpression 
                                    / lessEqualExpression 
                                    / greaterExpression 
                                    / greaterEqualExpression
                                    / ex6;
        
        orExpression                = ex7 orOp ex8;
        xorExpression               = ex7 xorOp ex8;
        andExpression               = ex7 andOp ex8;
        ex8                         = orExpression 
                                    / xorExpression 
                                    / andExpression
                                    / ex7;
        
        expression                  = ex8;
        
        
        // program structure
        statement : int             = expression;
        program : int               = statement+;
    })]
class TestGrammar
{
  program(_ : List[int]) : int
  {
    0
  }
  statement(_ : NToken) : int
  {
    0
  }
};

//[PegGrammar(union,
//grammar
//{
//  union         = concatenation ("|" concatenation)*;
//  concatenation = basicRE+;
//  basicRE       = zeroOrOne / zeroOrMany / oneOrMany / elementary;
//  elementary    = group / any / eos / symbol / set;

//  zeroOrOne     = elementary "?";
//  zeroOrMany    = elementary "*";
//  oneOrMany     = elementary "+";
//  group         = "(" union ")";
//  any           = ".";
//  eos           = "$";

//  set           = negativeSet / positiveSet;
//  positiveSet   = "[" setItem+ "]";
//  negativeSet   = "[^" setItem+ "]";

//  setItem       = range / symbol;
//  range         = symbol "-" symbol;
//  reserved      = any / eos / "\\" / "+" / "*" / "?" / "|";
//  symbol        = !reserved ['\x0000'..'\xFFFF'] / "\\" reserved;
//})]
//class RegExToFSM
//{
//}

module Program
{
  Main() : void
  {
    def print(fsm : FSM)
    {
      WriteLine("============================================================================");
      foreach (state in $[0..fsm.StateCount - 1])
      {
        Write($"$state ");
        when (state == fsm.StartState)
          Write(" start");
        when (fsm.OkStates.Contains(state))
          Write(" ok");
        WriteLine();
        foreach (transition in fsm.Transitions.Filter(t => t.From == state))
        {
          match (transition)
          {
          | Symbol(chars) => WriteLine($"-> $(transition.To) [$chars]");
          | Epsilon       => WriteLine($"-> $(transition.To) Epsilon");;
          }
        }
        WriteLine();
      }
      WriteLine("============================================================================");
    }

    def printFsm(fsm)
    {
      print(DFSMTransform.Do(fsm));
    }
    ///printFsm(RepeatMin(1, Symbol('x')));
    //printFsm(Seq([RepeatMin(1, Symbol('x')), RepeatMin(1, Symbol('x'))]));
    def any = Symbol(RangeSet().AddRange('\x0000', '\xFFFF'));

    //printFsm(
    //  Seq
    //    ([Choice
    //        ([Symbol('a')
    //        , Symbol('b')
    //        ])
    //    , RepeatMin(1, Symbol('c'))
    //    ])
    //);

    //printFsm(
    //  Seq
    //    ([RepeatMin(0, any)
    //    , Choice
    //        ([Symbol('a')
    //        , Symbol('b')
    //        ])
    //    , RepeatMin(1, Symbol('c'))
    //    ])
    //);

    //printFsm(
    //  Seq
    //    ([RepeatMin(0, any),
    //      RepeatMinMax(5, 100,
    //        Seq
    //          ([Symbol('a')
    //          , Option(Symbol('x'))
    //          ])
    //        )
    //    ])
    //);

    //printFsm(
    //  Seq
    //    ([RepeatMin(0, any),
    //      RepeatMinMax(3, 8,
    //        Seq
    //          ([Symbol('0', '9')
    //          , Option(Symbol('-'))
    //          ])
    //        )
    //    ])
    //);

    printFsm(
      Seq
        ([RepeatMin(0, any),
          any
        ])
    );

    print(Seq([DFSMTransform.Do(RepeatMin(0, any)), DFSMTransform.Do(any)]));
    printFsm(Seq([DFSMTransform.Do(RepeatMin(0, any)), DFSMTransform.Do(any)]));

    //def words = ["abstract"     , "as"          , "base"        , "bool"        , "break"
    //            , "byte"        , "case"        , "catch"       , "char"        , "checked"
    //            , "class"       , "const"       , "continue"    , "decimal"     , "default"
    //            , "delegate"    , "do"          , "double"      , "else"        , "enum"
    //            , "event"       , "explicit"    , "extern"      , "false"       , "finally"
    //            , "fixed"       , "float"       , "for"         , "foreach"     , "goto"
    //            , "if"          , "implicit"    , "in"          , "int"         , "interface"
    //            , "internal"    , "is"          , "lock"        , "long"        , "namespace"
    //            , "new"         , "null"        , "object"      , "operator"    , "out"
    //            , "override"    , "params"      , "private"     , "protected"   , "public"
    //            , "readonly"    , "ref"         , "return"      , "sbyte"       , "sealed"
    //            , "short"       , "sizeof"      , "stackalloc"  , "static"      , "string"
    //            , "struct"      , "switch"      , "this"        , "throw"       , "true"
    //            , "try"         , "typeof"      , "uint"        , "ulong"       , "unchecked"
    //            , "unsafe"      , "ushort"      , "using"       , "virtual"     , "void"
    //            , "volatile"    , "while"       ];
    ////def words = ["+=", "-==", "===", "121", "131"];
    ////def words = ["qwerasdf", "qwer", "asdf", "asfdasdfasdf"];
    ////def words = ["aaaaaaaaaaaaaaaaa"];
    //def wordsFsm = Choice(words.Map(String));
    //def wordsFsm = DFSMTransform.Normalize(wordsFsm);

    //print(wordsFsm);
    //def wordsFsm = DFSMTransform.Do(wordsFsm);
    //print(wordsFsm);
    //def wordsFsm = DFSMTransform.Minimize(wordsFsm);
    //print(wordsFsm);

    //def _any = Symbol(RangeSet().AddRange('\u0000', '\uFFFF'));
    //def star = Symbol(RangeSet().AddRange('*', '*').AddRange('0', '9'));
    //def slash = Symbol(RangeSet().AddRange('/', '/'));
    //def _commentEnd = Seq([star, slash]);
    ////print(any);
    ////print(star);
    ////print(slash);
    ////print(commentEnd);
    ////def test = Choice([commentEnd, star, slash, star, slash]);
    ////def test = Choice([commentEnd, slash]);
    ////print(test);
    //def test = FSM();
    //def (test, _) = test.NewState();
    //def (test, _) = test.NewState();
    //def (test, _) = test.NewState();
    //def (test, _) = test.NewState();
    //def (test, _) = test.NewState();
    //def (test, _) = test.NewState();
    //def (test, _) = test.NewState();
    //def (test, _) = test.NewState();
    //def (test, _) = test.NewState();
    //def (test, start) = test.NewStartState();
    //def (test, ok) = test.NewOkState();

    ////def test = test.AddTransition(Transition.Symbol(0, 1, RangeSet().AddRange('0', '9')));
    ////def test = test.AddTransition(Transition.Symbol(0, 4, RangeSet().AddRange('0', '9')));
    ////def test = test.AddTransition(Transition.Symbol(0, 5, RangeSet().AddRange('2', '2')));
    ////def test = test.AddTransition(Transition.Symbol(0, 2, RangeSet().AddRange('6', '6')));
    ////def test = test.AddTransition(Transition.Symbol(0, 3, RangeSet().AddRange('4', '9')));

    ////def test = test.AddTransition(Transition.Symbol(0, 2, RangeSet().AddRange('a', 'x')));
    ////def test = test.AddTransition(Transition.Symbol(0, 2, RangeSet().AddRange('f', 'z')));
    ////def test = test.AddTransition(Transition.Symbol(0, 2, RangeSet().AddRange('A', 'W')));
    ////def test = test.AddTransition(Transition.Symbol(0, 2, RangeSet().AddRange('E', 'Z')));
    ////def test = test.AddTransition(Transition.Symbol(0, 1, RangeSet().AddRange('F', 'W')));

    //def test = test.AddTransition(Transition.Symbol(10, 11, RangeSet().AddRange('0', '1')));
    //def test = test.AddTransition(Transition.Epsilon(10, 11));
    //def test = test.AddTransition(Transition.Epsilon(11, 10));

    //def test = test.AddTransition(Transition.Epsilon(start, 10));
    //def test = test.AddTransition(Transition.Epsilon(11, 0));

    //def test = test.AddTransition(Transition.Symbol(0, 1, RangeSet().AddRange('1', '1')));
    //def test = test.AddTransition(Transition.Symbol(1, 2, RangeSet().AddRange('1', '1')));
    //def test = test.AddTransition(Transition.Symbol(2, ok, RangeSet().AddRange('0', '0')));

    //def test = test.AddTransition(Transition.Symbol(0, 4, RangeSet().AddRange('1', '1')));
    //def test = test.AddTransition(Transition.Symbol(4, 5, RangeSet().AddRange('0', '0')));
    //def test = test.AddTransition(Transition.Symbol(5, ok, RangeSet().AddRange('1', '1')));

    //def test = test.AddTransition(Transition.Symbol(0, 6, RangeSet().AddRange('0', '0')));
    //def test = test.AddTransition(Transition.Symbol(6, 7, RangeSet().AddRange('1', '1')));
    //def test = test.AddTransition(Transition.Symbol(7, ok, RangeSet().AddRange('1', '1')));

    //def _test = DFSMTransform.Normalize(test);

    ////print(test);
    ////print(DFSMTransform.Do(test));
  }
}