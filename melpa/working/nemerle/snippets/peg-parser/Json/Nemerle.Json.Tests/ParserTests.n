using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Json;
using NUnit.Framework;
using NJ = Newtonsoft.Json.Linq;

namespace Nemerle.Json.Tests
{
  [TestFixture]
  public class ParserTests: AssertionHelper
  {
      test = <#{ 
  a : 1, 
  b : "2",
  c : true,
  d : [null, "2", true,],
  "e" : { "a" : 1, b : "2", c : 3.14},
  f : null,
}
#>;

    [Test]
    public SimpleTest() : void 
    {
      def parser = JsonParser();
      
      def result = parser.Parse("1");
      match (result)
      {
        | Some(JObject.Value(JValue.Number(i))) => Console.WriteLine(i);
        | x => Assert.Fail($"Expected integer, but $(x.ToString())");
      }

      def result = parser.Parse(test);
      
      match (result)
      {
        | Some(x) => 
          Console.WriteLine(x.ToString());
        | x => Assert.Fail($"Expected object, but $(x.ToString())");
      }
    }
    
    [Test]
    public NewtonJsonBechmark() : void
    {
      def parser = JsonParser();
      def count = 10000;

      _ = parser.Parse(test);
      _ = NJ.JObject.Parse(test);
      
      def sw = Stopwatch();
      sw.Start();
      for (mutable i = 0; i < count; i++)
        _ = parser.Parse(test);
      sw.Stop();
      Console.WriteLine("Parsing peg:    {0}", sw.ElapsedTicks);
      
      def sw = Stopwatch();
      sw.Start();
      for (mutable i = 0; i < count; i++)
        _ = NJ.JObject.Parse(test);
      sw.Stop();
      Console.WriteLine("Parsing newton: {0}", sw.ElapsedTicks);
    }
    
    [Test]
    public EscapeTest() : void
    {
      def t = json({
        "\n": "\a\b\t\n";
      });
      
      Assert.That(t.ToString(), Is.EqualTo(@"{""\n"":""\a\b\t\n""}"));
    }
  }
}
