using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Json;
using NUnit.Framework;
using NJ = Newtonsoft.Json.Linq;

namespace Nemerle.Json.Tests
{
  [TestFixture]
  public class JsonTests: AssertionHelper
  {
     test = <#{ 
  a : 1, 
  b : "2",
  c : true,
  d : [null, "2", true,],
  "e" : { "a" : 1, b : "2", c : 3.14},
  f : null,
}
#>;

    [Test]
    public NewtonJsonBechmark() : void
    {
      def parser = JsonParser();
      def count = 10000;

      def obj = parser.Parse(test);
      def nobj = NJ.JObject.Parse(test);
      
      def sw = Stopwatch();
      sw.Start();
      for (mutable i = 0; i < count; i++)
        _ = obj.ToString();
      sw.Stop();
      Console.WriteLine("Serializing peg:    {0} {1}", sw.ElapsedTicks, obj.Value.ToString());
      
      def sw = Stopwatch();
      sw.Start();
      for (mutable i = 0; i < count; i++)
        _ = nobj.ToString();
      sw.Stop();
      Console.WriteLine("Serializing newton: {0} {1}", sw.ElapsedTicks, nobj.ToString(Newtonsoft.Json.Formatting.None));
    }
    
    [Test]
    public EscapeTest() : void
    {
      def t = json({
        "\n": "\a\b\t\n";
      });
      
      Assert.That(t.ToString(), Is.EqualTo(@"{""\n"":""\a\b\t\n""}"));
    }
  }
}
