/*
    Copyright Bogdan Mart aka. winnie    2010
    Refactor by hardcase.
    Coded with guidance of hevy metal!
*/

using System;

using Nemerle;
using Nemerle.Macros;
using Nemerle.Collections;
using Nemerle.Compiler;

using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace Macroses
{
  
  public macro Syncronized2(target, body)
  syntax ("sync", "(", target, ")", body)
  {      
    SyncronizedImpl.DoWork(target, body, ImplicitCTX()) // accessing Typer
  }
  
  public macro Syncronized(body)
  syntax ("sync", body)
  {      
    SyncronizedImpl.DoWork(<[ this ]>, body, ImplicitCTX())
  }
  
  
  module SyncronizedImpl
  {
    public DoWork(target : PT.PExpr, body : PT.PExpr, typer : Typer) : PT.PExpr
    {
      //unless(typer.Manager.IsIntelliSenseMode)
      //    _ = System.Diagnostics.Debugger.Launch(); 

      def disp = {

          def tTarget =  typer.TypeExpr(target);
          def targetMembers = match(tTarget.Type.Hint) { // actually we need delay typing here
            | Some(ty) => ty.TypeInfo.GetMembers()
            | _ => 
              Message.Error("Unable to type syncronization target in single pass.");
              []
          }

          def invokeMeth = {
            DefineCTX(typer); // for <[ ttype: ]>
            targetMembers.Find(fun(_) {
              | m is IMethod when m.Name == "Invoke" =>
                 match(m.GetParameters()) {
                   | [a, b] when a.ty.Equals(<[ ttype: System.Delegate ]>)
                              && b.ty.Equals(FixedType.Array(<[ ttype: System.Object ]>, 1)) => true;
                   | _ => false
                 }
              | _ => false
            })
          }

          if(invokeMeth.IsSome)
            <[ $(tTarget : typed) ]>
          else {
            def dispatcherProp = targetMembers.Find(fun(_) {
              | p is IProperty when p.Name == "Dispatcher" => true;
              | _ => false
            });
            if(dispatcherProp.IsSome)
              <[ $(tTarget : typed).Dispatcher ]>
            else
              <[ System.Windows.Application.Current.Dispatcher ]>
          }
      }

      def tBody = typer.TypeExpr(body);
      typer.DelayMacro(lastChance =>
        match(tBody.Type.Hint) {
          | Some(ty) when ty.Equals(FixedType.Void()) =>
            Some(<[
              _ = $(disp).Invoke( (fun() { $(tBody : typed) }) : System.Action ); // use of typed body - tBody
            ]>)
          | Some(_) =>
            Some(<[
              mutable ret;
              _ =  $(disp).Invoke( (fun() { ret = $(tBody : typed); }) : System.Action ); 
              ret
            ]>)
          | _ =>
            when(lastChance)
              Message.Error("Expression type in `sync' macro cant be inferred.");
            None()
        }
      )
    }
  }
}