using System;
using System.Windows;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.TextEditor;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.Editor
{
  module WpfTooltipService
  {
    sync_root : object = object();

    public ShowTooltip(tip_info : QuickTipInfo, text_area : TextArea, loc : TextLocation) : void
    {
      when(null == text_area || text_area.IsDisposed)
        Nemerle.Imperative.Return();
      lock(sync_root)
      {
        match(tip_info)
        {
          | null 
          | tip_info when string.IsNullOrEmpty(tip_info.Text) =>
            CloseTooltipInternal();

          | tip_info =>
            def text = $<#<hint>$(tip_info.Text)</hint>#>;
            when(text != hint.Text || !hint.IsOpen)
              ShowTooltipInternal(text, tip_info.GetHintContent, text_area, loc);
        }
      }
    }

    public CloseTooltip() : void
    {
      lock(sync_root)
      {
        CloseTooltipInternal();
      }
    }

    hint : WpfHint.Hint = WpfHint.Hint();

    private ShowTooltipInternal(text : string, get_hint_content : System.Func[string, string], text_area : TextArea, loc : TextLocation) : void
    {
      Utils.WorkbenchInvoke(fun ()
      {
        try
        {
          when(hint.IsOpen)
            hint.Close();

          def hint_pos =
          {
            def ypos = (text_area.Document.GetVisibleLine(loc.Y) + 1) * text_area.TextView.FontHeight - text_area.VirtualTop.Y;
            def p = text_area.PointToScreen(Drawing.Point(0, ypos));
            Drawing.Point(Forms.Control.MousePosition.X - 16, p.Y - 1)
          }

          def hint_rect = Rect();
          hint_rect.X = hint_pos.X;
          hint_rect.Y = hint_pos.Y;

          hint.Show(IntPtr.Zero, hint_rect, get_hint_content, text);
        } catch
        {
          | error => LoggingService.Error(error);
        }
      });
    }

    private CloseTooltipInternal() : void
    {
      when(hint.IsOpen)
      {
        Utils.WorkbenchInvoke(hint.Close);
      }
    }
  }
}