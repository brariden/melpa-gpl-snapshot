using System;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.Core.WinForms;
using ICSharpCode.SharpDevelop;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.SharpDevelop.Gui;
using ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor;
using ICSharpCode.TextEditor;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.SharpDevelop.CodeCompletion;

namespace Nemerle.SharpDevelop.Editor
{
  public class NemerleSourceDisplayBinding : TextEditorDisplayBinding
  {
    public override CreateContentForFile(file : OpenedFile) : IViewContent
    {
      def view = base.CreateContentForFile(file);
      match(EngineContext.FindSourceInContexts(file.FileName))
      {
        | Some(source) => BindSource(view, source);
        | _ => ();
      }
      view
    }

    public static BindSource(view : IViewContent, source : Source) : void
    {
      match(view)
      {
        | view is TextEditorDisplayBindingWrapper =>
          def editor = view.TextEditorControl;
          def document = editor.Document;
          when(null != document)
          {
            source.DocumentAndEditor = (document, editor);
            view.Disposed += fun(_)
            {
              source.DocumentAndEditor = (null, null);
            };
          }
        | _ => ();
      }
    }
  }
}