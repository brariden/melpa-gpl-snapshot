using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Internal.Templates;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.SharpDevelop.Dom;

using MSBuild = Microsoft.Build.BuildEngine;

using Nemerle.SharpDevelop.CodeCompletion;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop
{
  public class NemerleProject : CompilableProject
  {
    static this()
    {
      ProjectService.SolutionLoaded += OnSolutionLoaded;
      ProjectService.ProjectItemAdded += OnProjectItemAdded;
      ProjectService.EndBuild += OnEndBuild;
    }

    public this(provider : IMSBuildEngineProvider, fileName : string, projectName : string)
    {
      base(provider);
      this.Name = projectName;
      Init();
      this.LoadProject(fileName);
      this.engine_context = EngineContext.CreateContext(this);
      this.Disposed += OnDisposed;
    }

    public this(info : ProjectCreateInformation)
    {
      base(info.Solution);
      Init();
      this.Create(info);
    }

    private Init() : void
    {
      reparseReferencesSensitiveProperties.Add("TargetFrameworkVersion");
      reparseCodeSensitiveProperties.Add("DefineConstants");
    }

    engine_context : EngineContext;

    public override Language : string
    {
      get { NemerleLanguageProperties.LanguageName }
    }

    public override LanguageProperties : LanguageProperties
    {
      get { NemerleLanguageProperties.Instance }
    }

    private SetNemerleProperty(value : string) : void
    {
      def first_prop_group =
        MSBuildProject.PropertyGroups
          .Cast.[MSBuild.BuildPropertyGroup]()
          .FirstOrDefault() ?? MSBuildProject.AddNewPropertyGroup(false);

      first_prop_group
        .AddNewProperty("Nemerle", value)
        .Condition = " '$(Nemerle)' == '' ";
    }

    protected override Create(info : ProjectCreateInformation) : void
    {
      base.Create(info);

      SetNemerleProperty("$(ProgramFiles)\\Nemerle");

      SetProperty("Debug", null, "DefineConstants", "DEBUG;TRACE",
            PropertyStorageLocations.ConfigurationSpecific, false);
      SetProperty("Release", null, "DefineConstants", "TRACE",
            PropertyStorageLocations.ConfigurationSpecific, false);

      try
      {
        AddImport("$(Nemerle)\\Nemerle.MSBuild.targets", null);
      } catch
      {
        | ex is MSBuild.InvalidProjectFileException =>
          throw ProjectLoadException("Please ensure that the Nemerle compiler is installed on your computer.\n\n" + ex.Message, ex);
      }

      ProjectService.AddProjectItem(this, ReferenceProjectItem(this, "mscorlib"));
      ProjectService.AddProjectItem(this, ReferenceProjectItem(this, "Nemerle"));
      ProjectService.AddProjectItem(this, ReferenceProjectItem(this, "System"));
      ProjectService.AddProjectItem(this, ReferenceProjectItem(this, "System.Data"));
      ProjectService.AddProjectItem(this, ReferenceProjectItem(this, "System.Xml"));

      when(TargetFrameworkVersion == "v3.5")
        AddDotnet35References();
    }

    public override GetDefaultItemType(fileName : string) : ItemType
    {
      if (string.Equals(".n", Path.GetExtension(fileName), StringComparison.OrdinalIgnoreCase))
        ItemType.Compile
      else
        base.GetDefaultItemType(fileName)
    }

    public override CreateProjectItem(item : MSBuild.BuildItem) : ProjectItem
    {
      match(item.Name)
      {
        | "MacroReference" => MacroReferenceProjectItem(this, item)
        | "MacroProjectReference" => MacroProjectReferenceProjectItem(this, item)
        | _ => base.CreateProjectItem(item)
      }
    }

    public override GetBuildDependencies(build_options : ProjectBuildOptions) : ICollection[IBuildable]
    {
      def result = base.GetBuildDependencies(build_options);
      foreach (item is MacroProjectReferenceProjectItem in GetItemsOfType(ItemTypeExt.MacroProjectReference))
      {
        when (null != item.ReferencedProject)
          result.Add(item.ReferencedProject);
      }
      result
    }

    private OnDisposed(_ : object, _ : EventArgs) : void
    {
      unless(null == engine_context)
        engine_context.Dispose();
    }

    private static OnSolutionLoaded(_ : object, e : SolutionEventArgs) : void
    {
      foreach(project is NemerleProject in e.Solution.Projects)
        project.engine_context.Reload(false);
    }

    private static OnEndBuild(_ : object, e : BuildEventArgs) : void
    {
      when(null != e.Results && null != ProjectService.OpenSolution)
        foreach(project is NemerleProject in ProjectService.OpenSolution.Projects)
          project.engine_context.Reload(false);
    }

    private static OnProjectItemAdded(_ : object, e : ProjectItemEventArgs) : void
    {
      when(e.Project is NemerleProject)
      match(e.ProjectItem)
      {
        | item when item.ItemType == ItemType.Reference =>
          match(item.Include)
          {
            | "Nemerle"
            | "Nemerle.Compiler"
            | "Nemerle.Macros" =>
              item.SetMetadata("Private", "True");
              item.SetMetadata("HintPath", $"$$(Nemerle)\\$(item.Include).dll");
            | _  =>
              when(FileUtility.IsBaseDirectory(NemerleLanguageBinding.NemerleBinPath, item.FileName))
              {
                def new_hint_path = FileUtility.RenameBaseDirectory(item.FileName, NemerleLanguageBinding.NemerleBinPath, "$(Nemerle)");
                item.SetMetadata("HintPath", new_hint_path);
              }
          }
        | item when item.ItemType == ItemTypeExt.MacroReference =>
          match(item.Include)
          {
            | "Nemerle.Linq"
            | "Nemerle.Macros" =>
              item.SetMetadata("HintPath", $"$$(Nemerle)\\$(item.Include).dll");
            | _ =>
              when(FileUtility.IsBaseDirectory(NemerleLanguageBinding.NemerleBinPath, item.FileName))
              {
                def new_hint_path = FileUtility.RenameBaseDirectory(item.FileName, NemerleLanguageBinding.NemerleBinPath, "$(Nemerle)");
                item.SetMetadata("HintPath", new_hint_path);
              }
          }
        | _ => ()
      }
    }
  }
}
