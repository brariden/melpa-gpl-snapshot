using System;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.TextEditor;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.CodeCompletion
{
  public class Source : IIdeSource, IDisposable
  {
    public this([NotNull] context : EngineContext, file_name : string)
    {
      this.context = context;
      this.file_name = file_name;
      this.file_index = Location.GetFileIndex(file_name);
      this.completion_func = System.Func(Completion);

      RefreshContent();
    }

    mutable content : IIdeSource;

    [Accessor] context : EngineContext;

    [Accessor] file_name : string;

    [Accessor] file_index : int;

    [Accessor] relocation_requests_queue : SCG.List[RelocationRequest] = SCG.List();

    internal DocumentAndEditor : IDocument * TextEditorControl
    {
      mutable doc_and_editor : IDocument * TextEditorControl = (null, null);
      get { doc_and_editor } 
      set
      {
        unless(doc_and_editor.Equals(value))
        {
          doc_and_editor = value;
          RefreshContent();
        }
      }
    }

    internal Declarations : array[TopDeclaration]
    {
      get;
      set;
    }

    private RefreshContent() : void
    {
      DisposeContent();
      content = match(DocumentAndEditor)
      {
        | (null, null) => FileNemerleSource(file_index)
        | (document, editor) => DocumentNemerleSource(this, document, editor)
      }
    }

    mutable update_compile_unit_async : AsyncRequest = null;

    private BeginUpdateCompileUnit() : void
    {
      when (update_compile_unit_async == null || update_compile_unit_async.IsCompleted) 
        update_compile_unit_async = context.Engine.BeginUpdateCompileUnit(this);
    }

    internal UpdateCompileUnit(
      newEndLine    : int, newEndChar    : int,
      oldEndLine    : int, oldEndChar    : int,
      startLine     : int, startChar     : int) : void
      {

      def queue = RelocationRequestsQueue;
      unless(queue == null)
      {
        RelocationQueue.AddRelocationRequest(
          queue, FileIndex, CurrentVersion,
          newEndLine, newEndChar,
          oldEndLine, oldEndChar,
          startLine,  startChar);
      }

      BeginUpdateCompileUnit();
    }

    internal ParseCompilationUnit() : ICompilationUnit
    {
      BeginUpdateCompileUnit();
      if(update_compile_unit_async.AsyncWaitHandle.WaitOne(TimeSpan.FromMinutes(5)))
        compilation_unit
      else
        null
    }

    [Accessor] volatile mutable compilation_unit : ICompilationUnit = null;

    public CompileUnit : CompileUnit
    {
      mutable compile_unit : CompileUnit = null;
      get { compile_unit }
      set
      {
        compile_unit = value;
        content.CompileUnit = value;
        compilation_unit = NemerleCompilationUnit(ParserService.GetProjectContent(context.Project), this);
      }
    }

    public CurrentVersion : int
    {
      get { content.CurrentVersion }
    }

    public LineCount : int { 
      get { content.LineCount }
    }

    public LockWrite() : void
    {
      content.LockWrite()
    }

    public UnlockWrite() : void
    {
      content.UnlockWrite()
    }

    public LockReadWrite() : void
    {
      content.LockReadWrite()
    }

    public UnlocReadkWrite() : void
    {
      content.UnlocReadkWrite()
    }

    public GetTextCurrentVersionAndFileIndex() : string * int * int
    {
      content.GetTextCurrentVersionAndFileIndex()
    }

    public SetRegions(regions : SCG.IList[RegionInfo], sourceVersion : int) : void
    {
      content.SetRegions(regions, sourceVersion)
    }

    public SetTopDeclarations(topDeclarations : array[TopDeclaration]) : void
    {
      content.SetTopDeclarations(topDeclarations);
      Declarations = topDeclarations;
    }

    public GetText() : string
    {
      content.GetText()
    }

    public GetRegion(lineStart : int, colStart : int, lineEnd : int, colEnd : int) : string
    {
      content.GetRegion(lineStart, colStart, lineEnd, colEnd)
    }

    public GetRegion(location : Location) : string
    {
      content.GetRegion(location)
    }

    public GetLine(line : int) : string
    {
      content.GetLine(line)
    }

    public GetPositionOfLineIndex(line : int, col : int) : int
    {
      content.GetPositionOfLineIndex(line, col)
    }

    public GetLineIndexOfPosition(pos : int) : int * int
    {
      content.GetLineIndexOfPosition(pos)
    }

    completion_func : System.Func[int, int, array[CompletionElem]];

    public Completion(line : int, column : int) : array[CompletionElem]
    {
      Context.Engine.Completion(this, line, column).CompletionElems
    }

    public BeginCompletionAsync(line : int, column : int, callback : AsyncCallback = null, obj : object = null) : IAsyncResult
    {
      completion_func.BeginInvoke(line, column, callback, obj)
    }

    public EndCompletionAsync(asyncResult : IAsyncResult) : array[CompletionElem]
    {
      completion_func.EndInvoke(asyncResult)
    }

    #region Disposable

    private DisposeContent() : void
    {
      match(content)
      {
        | content is IDisposable => content.Dispose();
        | _ => ();
      }
      content = null;
    }

    public Dispose() : void
    {
      DisposeContent();
    }

    #endregion
  }
}