using System;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.SharpDevelop.Project;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Collections;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;

namespace Nemerle.SharpDevelop.CodeCompletion
{
  public class NemerleCompilationUnit : DefaultCompilationUnit
  {
    public this(projectContent : IProjectContent, source : Source)
    {
      base(projectContent);
      this.source = source;
      this.FileName = source.FileName;
      when(null != source.CompileUnit)
        Import(source.CompileUnit);
    }

    [Accessor] source : Source;

    private Import(cu : CompileUnit) : void
    {
      def loc_to_dom(loc)
      {
        DomRegion(loc.Line, loc.Column, loc.EndLine, loc.EndColumn)
      }
      def atb_to_mod(atb, default = ModifierEnum.None)
      {
        mutable mod = default;
        when(atb %&& NemerleModifiers.Abstract)    mod |= ModifierEnum.Abstract;
        when(atb %&& NemerleModifiers.Extern)      mod |= ModifierEnum.Extern;
        when(atb %&& NemerleModifiers.Internal)    mod |= ModifierEnum.Internal;
        when(atb %&& NemerleModifiers.Extern)      mod |= ModifierEnum.Extern;
        when(atb %&& NemerleModifiers.New)         mod |= ModifierEnum.New;
        when(atb %&& NemerleModifiers.Override)    mod |= ModifierEnum.Override;
        when(atb %&& NemerleModifiers.Partial)     mod |= ModifierEnum.Partial;
        when(atb %&& NemerleModifiers.Private)     mod |= ModifierEnum.Private;
        when(atb %&& NemerleModifiers.Protected)   mod |= ModifierEnum.Protected;
        when(atb %&& NemerleModifiers.Public)      mod |= ModifierEnum.Public;
        when(atb %&& NemerleModifiers.Sealed)      mod |= ModifierEnum.Sealed;
        when(atb %&& NemerleModifiers.Static)      mod |= ModifierEnum.Static;
        when(atb %&& NemerleModifiers.Virtual)     mod |= ModifierEnum.Virtual;
        when(atb %&& NemerleModifiers.Volatile)    mod |= ModifierEnum.Volatile;
        mod
      }
      def import_members(c, members)
      {
        match(members)
        {
          | [] => ();
          | member :: members =>
            match(member)
            {
              | ClassMember.TypeDeclaration(td) =>
                import_decl(td, c.InnerClasses)
              | ClassMember.Field =>
                def m = DefaultField(c, member.Name);
                m.Region = loc_to_dom(member.NameLocation);
                m.BodyRegion = loc_to_dom(member.BodyLocation);
                m.AttributesAndModifiers=
                  if(member.Attributes %&& NemerleModifiers.Mutable)
                    atb_to_mod(member.Attributes, ModifierEnum.Private)
                  else
                    atb_to_mod(member.Attributes, ModifierEnum.Private | ModifierEnum.Readonly);
                c.Fields.Add(m);
              | ClassMember.Function as member =>
                def m = DefaultMethod(c, member.Name);
                m.Region = loc_to_dom(member.NameLocation);
                m.BodyRegion = loc_to_dom(member.BodyLocation);
                m.AttributesAndModifiers= atb_to_mod(member.Attributes, ModifierEnum.Private);
                foreach(par in member.header.Parameters)
                {
                  m.Parameters.Add(DefaultParameter(par.Name, NullReturnType.Instance, loc_to_dom(par.Location)));
                }
                c.Methods.Add(m);
              | ClassMember.Property =>
                def m = DefaultProperty(c, member.Name);
                m.Region = loc_to_dom(member.NameLocation);
                m.BodyRegion = loc_to_dom(member.BodyLocation);
                m.AttributesAndModifiers= atb_to_mod(member.Attributes, ModifierEnum.Private);
                c.Properties.Add(m);
              | ClassMember.Event =>
                def m = DefaultEvent(c, member.Name);
                m.Region = loc_to_dom(member.NameLocation);
                m.AttributesAndModifiers= atb_to_mod(member.Attributes, ModifierEnum.Internal);
                c.Events.Add(m);
              | ClassMember.EnumOption =>
                def m = DefaultField(c, member.Name);
                m.Region = loc_to_dom(member.NameLocation);
                m.BodyRegion = loc_to_dom(member.BodyLocation);
                m.AttributesAndModifiers= atb_to_mod(member.Attributes, ModifierEnum.Public);
                c.Fields.Add(m);
            }
            import_members(c, members);
        }
      }
      and import_decl(decl, collection)
      {
        def class_type = match(decl)
        {
          | TopDeclaration.Alias          => ClassType.Class
          | TopDeclaration.Class          =>
            if(decl.Attributes %&& NemerleModifiers.Struct)
              ClassType.Struct
            else
              ClassType.Class
          | TopDeclaration.Delegate       => ClassType.Delegate
          | TopDeclaration.Enum           => ClassType.Enum
          | TopDeclaration.Interface      => ClassType.Interface
          | TopDeclaration.Macro          => ClassType.Class
          | TopDeclaration.Variant        => ClassType.Enum
          | TopDeclaration.VariantOption  => ClassType.Class
        }

        def c = DefaultClass(this, decl.FullName);
        def region_loc =
        {
          def header_loc = decl.NameLocation;
          def entire_loc = decl.Location;
          Location(entire_loc.FileIndex,
            header_loc.EndLine,
            header_loc.EndColumn,
            entire_loc.EndLine,
            entire_loc.EndColumn);
        }
        c.Region = loc_to_dom(region_loc);
        c.BodyRegion = loc_to_dom(decl.BodyLocation);
        c.AttributesAndModifiers= atb_to_mod(decl.Attributes, ModifierEnum.Internal);
        c.ClassType = class_type;

        import_members(c, decl.GetMembers());

        collection.Add(c);
      }
      NList.Iter(cu.TopDeclarations, import_decl(_, Classes));

      match(cu.TopNamespace)
      {
        | null => ();
        | ns =>
          def scope = DefaultUsingScope();
          scope.NamespaceName = NString.Concat(".", ns.Name);
          UsingScope = scope;
      }

      NList.Iter(cu.Regions,
        region => FoldingRegions.Add(FoldingRegion(region.Text, loc_to_dom(region.Location))));
    }
  }
}