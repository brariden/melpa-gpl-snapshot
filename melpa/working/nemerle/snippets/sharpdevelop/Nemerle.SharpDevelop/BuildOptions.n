using System;
using System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Gui.OptionPanels;
using ICSharpCode.SharpDevelop.Project;

using Nemerle.Utility;

namespace Nemerle.SharpDevelop
{
  public sealed class BuildOptions : AbstractBuildOptions
  {
    public override LoadPanelContents() : void
    {
      SetupFromXmlStream(this.GetType().Assembly.GetManifestResourceStream(GetType().Namespace + ".Resources.BuildOptions.xfrm"));
      InitializeHelper();

      InitBaseIntermediateOutputPath();
      InitIntermediateOutputPath();
      InitOutputPath();
      InitXmlDoc();
      InitTargetFramework();

      def b = helper.BindString("conditionalSymbolsTextBox", "DefineConstants", TextBoxEditMode.EditRawProperty);
      b.DefaultLocation = PropertyStorageLocations.ConfigurationSpecific;
      _ = b.CreateLocationButton("conditionalSymbolsTextBox");

      def b = helper.BindBoolean("optimizeCodeCheckBox", "Optimize", false);
      b.DefaultLocation = PropertyStorageLocations.ConfigurationSpecific;
      _ = b.CreateLocationButton("optimizeCodeCheckBox");

      def b = helper.BindBoolean("checkIntegerOverflowCheckBox", "CheckIntegerOverflow", true);
      b.DefaultLocation = PropertyStorageLocations.ConfigurationSpecific;
      _ = b.CreateLocationButton("checkIntegerOverflowCheckBox");

      def b = helper.BindBoolean("noStdLibCheckBox", "NoStdLib", false);
      b.DefaultLocation = PropertyStorageLocations.Base;
      _ = b.CreateLocationButton("noStdLibCheckBox");

      def b = helper.BindBoolean("noStdMacrosCheckBox", "NoStdMacros", false);
      b.DefaultLocation = PropertyStorageLocations.Base;
      _ = b.CreateLocationButton("noStdMacrosCheckBox");

      def b = helper.BindBoolean("greedyReferencesCheckBox", "GreedyReferences", true);
      b.DefaultLocation = PropertyStorageLocations.Base;
      _ = b.CreateLocationButton("greedyReferencesCheckBox");

      def b = helper.BindBoolean("indentationSyntaxCheckBox", "IndentationSyntax", false);
      b.DefaultLocation = PropertyStorageLocations.Base;
      _ = b.CreateLocationButton("indentationSyntaxCheckBox");

      def b = helper.BindBoolean("registerCOMInteropCheckBox", "RegisterForComInterop", false);
      b.DefaultLocation = PropertyStorageLocations.PlatformSpecific;
      advancedLocationButton = b.CreateLocationButtonInPanel("platformSpecificOptionsPanel");

      def b = CreatePlatformTarget();
      b.RegisterLocationButton(advancedLocationButton);

      InitDebugInfo();
      InitWarnings();

      helper.AddConfigurationSelector(this);
    }
  }
}