using System;
using System.Text;
using System.IO;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Internal.Templates;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.SharpDevelop.Dom;

using Microsoft.Build.BuildEngine;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop
{
  /// <summary>
  /// Description of NemerleLanguageProperties.
  /// </summary>
  public sealed class NemerleLanguageProperties : LanguageProperties
  {
    internal static Instance : NemerleLanguageProperties = NemerleLanguageProperties();

    internal static LanguageName : string = "Nemerle";

    public this()
    {
      base(StringComparer.Ordinal);
    }
    
    #region Supports...
    
    public override SupportsExtensionMethods : bool
    {
      get { true }
    }
    
    public override SearchExtensionsInClasses : bool
    {
      get { true }
    }
    
    public override ImportNamespaces : bool
    {
      get { true }
    }

    public override ImportModules : bool
    {
      get { true }
    }

    public override CanImportClasses : bool
    {
      get { true }
    }

    public override SupportsImplicitInterfaceImplementation : bool
    {
      get { true }
    }

    public override ExplicitInterfaceImplementationIsPrivateScope : bool
    {
      get { true }
    }

    public override IndexerExpressionStartToken : string
    {
      get { "[" }
    }

    #endregion

    public override IsClassWithImplicitlyStaticMembers(c : IClass) : bool
    {
      c.ClassType == ClassType.Module
    }

    public override CreateDefaultImports(pc : IProjectContent) : IUsing
    {
      def u = DefaultUsing(pc);
      u.Usings.Add("System");
      u.Usings.Add("System.Text");
      u.Usings.Add("Nemerle.Collections");
      u.Usings.Add("Nemerle.Utility");
      u
    }

    public override ShowMember(member : IMember, showStatic : bool) : bool
    {
      match(base.ShowMember(member, showStatic), member)
      {
        | (false, _) => false
        | (true, member is IMethod) when member.Name.StartsWith("_N_") => false
        | (true, member is IMethod) when member.Name.StartsWith("__N_") => false
        | (true, member is IMethod) when member.GetIsOperator() => false
        | _ => true
      }
    }

    public override CodeDomProvider : System.CodeDom.Compiler.CodeDomProvider
    {
      get { Nemerle.Compiler.Utils.NemerleCodeDomProvider() }
    }

    public override ToString() : string
    {
      "[LanguageProperties: Nemerle]"
    }
  }
}
