* ob-typescript
[[http://melpa.org/#/ob-typescript][http://melpa.org/packages/ob-typescript-badge.svg]]

This org-mode babel extension enables you to execute typescript code blocks.

** Install

*** Requirement
You need to install node.js and typescript to use this extension.

*** MELPA
With setting up [[http://melpa.org][MELPA]], use =M-x package-install ob-typescript= .

*** Manually
Add ob-typescript.el to your =load-path= and require.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/path/to/ob-typescript.el")
(require 'ob-typescript)
#+END_SRC

** Configure

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((typescript . t)
   ))
#+END_SRC

** Examples

*** Execute with node.js

#+BEGIN_SRC typescript
module Greeting {
    export class Hello {
        constructor(private text : string) {
        }
        say() :void{
            console.log(this.text);
        }
    }
}

var hello : Greeting.Hello = new Greeting.Hello("Hello, World!");
hello.say();
#+END_src

#+RESULTS:
: Hello, World!

*** Transpile

You can see transpile results by specifying ":wrap SRC js" header argument.

#+Begin_SRC typescript :wrap SRC js
module Greeting {
    export class Hello {
        constructor(private text : string) {
        }
        say() :void{
            console.log(this.text);
        }
    }
}

var hello : Greeting.Hello = new Greeting.Hello("Hello, World!");
hello.say();
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
var Greeting;
(function (Greeting) {
    var Hello = (function () {
        function Hello(text) {
            this.text = text;
        }
        Hello.prototype.say = function () {
            console.log(this.text);
        };
        return Hello;
    })();
    Greeting.Hello = Hello;
})(Greeting || (Greeting = {}));
var hello = new Greeting.Hello("Hello, World!");
hello.say();
#+END_SRC
