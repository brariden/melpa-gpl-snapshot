diff --git a/src/server/protocol.d.ts b/src/server/protocol.d.ts
index 3a66975..cf41bd6 100644
--- a/src/server/protocol.d.ts
+++ b/src/server/protocol.d.ts
@@ -949,6 +949,9 @@ declare namespace ts.server.protocol {
           * errors for the files in the file list
           */
         delay: number;
+
+        responseType?: string;
+
     }
 
     /**
diff --git a/src/server/session.ts b/src/server/session.ts
index c1bafdf..74f2f2b 100644
--- a/src/server/session.ts
+++ b/src/server/session.ts
@@ -753,6 +753,29 @@ namespace ts.server {
             }
         }
 
+        getErrorResponse(fileNames: string[]) {
+            var checkList = fileNames.reduce((accum: PendingErrorCheck[], fileName: string) => {
+                fileName = ts.normalizePath(fileName);
+                var project = this.projectService.getProjectForFile(fileName);
+                if (project) {
+                    accum.push({ fileName, project });
+                }
+                return accum;
+            }, []);
+
+            return checkList.map(checkSpec => {
+                var project = checkSpec.project;
+                var file = checkSpec.fileName;
+                var semanticDiags = project.compilerService.languageService.getSemanticDiagnostics(file);
+                var syntaticDiags = project.compilerService.languageService.getSyntacticDiagnostics(file);
+                return {
+                    file: file,
+                    syntaxDiag: syntaticDiags ? syntaticDiags.map((diag) => formatDiag(file, project, diag)) : [],
+                    semanticDiag: semanticDiags ? semanticDiags.map((diag) => formatDiag(file, project, diag)) : [],
+                }
+            })
+        }
+
         private change(line: number, offset: number, endLine: number, endOffset: number, insertString: string, fileName: string) {
             const file = ts.normalizePath(fileName);
             const project = this.projectService.getProjectForFile(file);
@@ -997,7 +1020,11 @@ namespace ts.server {
             },
             [CommandNames.Geterr]: (request: protocol.Request) => {
                 const geterrArgs = <protocol.GeterrRequestArgs>request.arguments;
-                return {response: this.getDiagnostics(geterrArgs.delay, geterrArgs.files), responseRequired: false};
+                if (geterrArgs.responseType === 'response') {
+                    return {response: <any>this.getErrorResponse(geterrArgs.files), responseRequired: true};
+                } else {
+                    return {response: this.getDiagnostics(geterrArgs.delay, geterrArgs.files), responseRequired: false};
+                }
             },
             [CommandNames.GeterrForProject]: (request: protocol.Request) => {
                 const { file, delay } = <protocol.GeterrForProjectRequestArgs>request.arguments;
