#    -*- mode: org -*-


Archived entries from file /home/phillord/src/knowledge/tawny-owl/src/tawny/todo.org

* DONE Fix one-of to make it simpler
  CLOSED: [2014-05-20 Tue 10:25]

(defdatatype toddlerAge
  ;; oh dear, this is unutterably horrible!
  :equivalent (apply oneof (map literal (min-max-inc 1 2))))

We want

(defdatatype toddlerAge
  :equivalent (oneof 1 2))

OR

(defdatatype FlowerPotMenName
  :equivalent (oneof "Bill" "Ben"))

Oneof is a multimethod, overloaded for objects and data, so this is not
trivial.

 - [X] check guess-individual-literal to see whether this can do something sensible
 - [X] probably, this doesn't work because a string (which is not a real one) 
       will Except -- is it sensible to interpret a string as a individual if
       it's in the ontology, or a literal if not? This might lead to some odd
       bugs, but is I think the only plausible things
   - [X] string? clause needs to do two things
   - [X] IF entity-for-string returns something, try again
   - [X] If not, it's a string, so coerce to literal

 - [X] an number should definately be interpreted as a literal (or the
       appopriate type)
 - [ ] Test everything to here!
 - [ ] number-to-literal interpretation function -- matching clojure/xml
       datatypes
 - [ ] Test this function


* DONE Strange crash
   CLOSED: [2014-05-20 Tue 10:22]

In a new namespace this...

(use 'tawny.owl)
(defontology bob)
(defclass A)
(defclass B)
(add-subclass A B)
(add-superclass A B)
(superclasses A)

Causes this.

The add-subclass,add-superclass thing makes no sense (A and B are
equivalent), but it still shouldn't cause a crash. Presumably, it's recursing
infinitely or something wierd.

StackOverflowError 
	java.util.HashMap$KeySet.iterator (HashMap.java:1006)
	java.util.HashSet.iterator (HashSet.java:170)
	java.util.AbstractCollection.toArray (AbstractCollection.java:137)
	java.util.ArrayList.<init> (ArrayList.java:164)
	org.semanticweb.owlapi.util.CollectionFactory$ConditionalCopySet.<init> (CollectionFactory.java:371)
	org.semanticweb.owlapi.util.CollectionFactory.getCopyOnRequestSetFromMutableCollection (CollectionFactory.java:313)
	uk.ac.manchester.cs.owl.owlapi.MapPointer.getValues (MapPointer.java:95)
	uk.ac.manchester.cs.owl.owlapi.InternalsImpl.getValues (InternalsImpl.java:172)
	uk.ac.manchester.cs.owl.owlapi.OWLOntologyImpl.getSubClassAxiomsForSubClass (OWLOntologyImpl.java:1059)
	uk.ac.manchester.cs.owl.owlapi.OWLClassImpl.getSubClassAxioms (OWLClassImpl.java:213)
	uk.ac.manchester.cs.owl.owlapi.OWLClassImpl.getSuperClasses (OWLClassImpl.java:247)
	tawny.owl/eval3425/direct-superclasses--3426 (owl.clj:1999)




(defn- superclasses-1
  "Returns all subclasses of all classes in classlist."
  [o classlist seen]
  ;; if there are no subclasses return empty list
  (if (= 0 (count classlist))
    (list)
    (let [firstclasslist (first classlist)
          seen (conj seen firstclasslist)]
      (concat (list firstclasslist)
              (superclasses-1
               o
               (rest classlist)
               seen)
              ;; don't recurse if we have been here before.
              ;; blocks "A sub B", "B sub A" errors.
              (when-not
                  (contains? seen
                             firstclasslist)
                (superclasses-1
                 o
                 (direct-superclasses o firstclasslist)
                 seen))))))


* Name change
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-12-30 Sun 09:13
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

Move the entire library to a new name "tawny owl". 

* Memorise/Remember
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-08 Tue 17:05
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

I need some functionality for remebering the mapping between IRIs and clojure
identifiers, so that if the meaningful names

(memorise)

save the current IRI to identifier mapping (including old mappings already
loaded), into a file based on the current namespace


(remember)

Load IRI mappings from a file save by memorise. This should check for IRIs
which have changed their mappings. What happens to old mapping should depend
on a dynamically bound variable. It should emit a warning at minimum, and bind
the old mapping as alias, or bind the old mapping as an alias which will crash
when used (with some suitable warning), or not bind it, in which case the
compiler will pick up any usage (but without nice warnings). 

See here -- which might be a nicer way to do the alias. Alias might want to
come in another package, as I think I might want to use this else where. 

https://github.com/technomancy/leiningen/blob/1.x/src/leiningen/core.clj#L13

* owlsome
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-08 Tue 17:06
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_OLPATH: Bugs
  :ARCHIVE_CATEGORY: todo
  :END:

(owlsome hasPart)

doesn't crash -- not good -- should have arity of at least 2



* Remove the Ontology Record and use java object
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-25 Fri 19:16
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

The existance of an Ontology record with an ontology inside it 
is a pain in the ass for many reasons -- mostly because I have to remember the
layer of indirection. So I want to get away from this and just use the
underlying Java object

** Get prefix from ontology

(.isPrefixOWLOntologyFormat
 (.getOntologyFormat owl-ontology-manager (#'get-current-jontology)))

returns true -- so by default, we should be able to get the format. Then

public java.util.Map<java.lang.String,java.lang.String> getPrefixName2PrefixMap()

Description copied from interface: PrefixManager
Gets a map that maps prefix names to prefixes.

should let us get the prefix name (that is owl:) for prefix (that is url). The
map is backward, but such is life. 

Setting prefix is easy -- save-ontology has the code. 

** IRI

Easy to get -- from the ontology ID object which comes direct from the
Ontology object.

** Options 

Just put these damn options in! Ah well. 

Currently only used by memorise to store remembered entities. This can be 
replaced by a map, with appropriate hooks. Currently, I have this for
reasoner. This should be easy to generalise -- map from ontology to another
map. Second map can use namespaced keywords, and we can put anything we want
into it. 

Perhaps, can use this for lookup cache also. 

Maybe, a better idea here is to use the IMeta interface and extends-type
support to add metadata to ontologies. This doesn't work for the reasoner
however, as I need to be able to blitz all the reasoners when the factory
changes (which doesn't affect ontologies). 

Lookup cache is namespace based. I guess I could add this to the namespace
metadata? Although, why not the ontology? Can get the ontology from the
namespace after all. 


So, final decision. Will create a (options ontology) method in owl.clj, which
returns a hash for each and an (update-options f ontology) which applies
function f which updates. We store this in a ref. Then we hook into ontology
creation/destruction code, so that we can clear things up appropriately.

This means that ontologies have to be removed explicitly; but then they do
anyway because the ontology manager holds onto them. So only a problem if
ontologies are created with random IRIs. 

Reasoner can also be updated. This will make the task of getting all reasoners
a little harder -- we iterate through all options, get the reasoner, kill it.
But, we can do this one after the other. 


* Annotation Problems
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-25 Fri 19:17
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

 - [] create new add-a-annotation method which adds a single annotation.
 - [] Change add-annotation to use it.
 - [] Change add-a-annotation to multimethod keyed on class of first entity.
 - [] Add OWLNamedEntity should pass directly, rather than conversion of IRI.
 - [] Add support for OWLOntology -- need different AddOntologyAnnotation
      which we will only use in this place. 

* Ugly error when the reasoner factory has not been set.
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-02-12 Tue 23:20
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_OLPATH: Bugs
  :ARCHIVE_CATEGORY: todo
  :END: 
java.lang.IllegalArgumentException: No matching method found: createNonBufferingReasoner for class clojure.lang.PersistentList$EmptyList
 at clojure.lang.Reflector.invokeMatchingMethod (Reflector.java:53)
    clojure.lang.Reflector.invokeInstanceMethod (Reflector.java:28)
    tawny.reasoner$reasoner.invoke (reasoner.clj:162)
    tawny.reasoner$unsatisfiable.invoke (reasoner.clj:206)
    tawny.reasoner$coherent_QMARK_.invoke (reasoner.clj:212)
    tawny.upper.extent$eval1980.invoke (NO_SOURCE_FILE:4)
    clojure.lang.Compiler.eval (Compiler.java:6511)
    clojure.lang.Compiler.eval (Compiler.java:6501)
    clojure.lang.Compiler.eval (Compiler.java:6477)
    clojure.core$eval.invoke (core.clj:2797)
    clojure.main$repl$read_eval_print__6405.invoke (main.clj:245)
    clojure.main$repl$fn__6410.invoke (main.clj:266)
    clojure.main$repl.doInvoke (main.clj:266)
    clojure.lang.RestFn.invoke (RestFn.java:1096)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__544.invoke (interruptible_eval.clj:56)
    clojure.lang.AFn.applyToHelper (AFn.java:159)
    clojure.lang.AFn.applyTo (AFn.java:151)
    clojure.core$apply.invoke (core.clj:601)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1771)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:41)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__585$fn__587.invoke (interruptible_eval.clj:171)
    clojure.core$comp$fn__4034.invoke (core.clj:2278)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__578.invoke (interruptible_eval.clj:138)
    clojure.lang.AFn.run (AFn.java:24)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1110)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:603)
    java.lang.Thread.run (Thread.java:679)


* Annotation
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-02-20 Wed 13:05
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Currently 

defannotationproperty 

doesn't work -- the code that it calls just returns the annotation property --
it doesn't actually stick it into the ontology. So need to make sure that this
happens (annotation assertion axiom I think). 

Also, we need to be able to add annotations (comments particularly!) to the
annotation. 

* AnnotationProperties can't express superproperties
  :PROPERTIES:
  :status:   closed
  :type:     feature
  :ARCHIVE_TIME: 2013-02-22 Fri 21:20
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:










* Default ontology must be set for seealso

   :PROPERTIES:
   :status:   closed
   :ARCHIVE_TIME: 2013-07-24 Wed 12:22
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END: 


As a much wider problem, we sometimes require the default ontology to be set
when it is not used. Generally, this comes about because we have functions
which can take OWL API objects (in which case we don't need the ontology),
but can also take strings (in which case we need to know how to transform to
objects, which uses the ontology object). 

The current crash comes because defontfn calls default-ontology, which in
turn calls "get-current-ontology" which crashes if there isn't one. 

Solution 

get-current-ontology-or-nil

which returns nil when there is no currentonlogy -- rewrite
get-current-ontology to use. 

write new macro 

defmontfn (maybe ontology), which calls get-current-ontology or nil.

Move most functions to this. The ensure-class functions will still crash when
necessary. But seealso functions will work because they use OWL API object.



* IRI creation needs to be generalised.
   :PROPERTIES:
   :type:     feature
   :status:   closed
   :severity: medium
   :ARCHIVE_TIME: 2013-07-24 Wed 12:24
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END: 
   
Have a OBO style generator. 

Initially, generate an UUID style identifer for new terms. Can use memorise to
save and to store these in a file. Add a URI gen client which will search for
these, and replace them with newly minted URIs. Have to add a purl creation
client also, which will update all purls and make sure that they point to the
correct place. 

First thing to do is to have a memorise in reverse thing which puts the IRIs
into another file.




* multiple arity version of defontfn
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-07-24 Wed 12:29
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

The defontfn can currently only cope with single artiy functions. 
It should be able to cope with more. 



* tawny doc
   :PROPERTIES:
   :type:     bug
   :ARCHIVE_TIME: 2013-07-24 Wed 12:29
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END:

Doesn't cope well when the class isn't known as a var. Should fall back to 
http:// with special case for owl:thing. 




* reasoner monitor
  :PROPERTIES:
  :type:     bug
  :status:   closed
  :ARCHIVE_TIME: 2013-07-24 Wed 12:29
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

** Issue
Something isn't working and the progress monitor isn't always getting set. 

             (SimpleConfiguration.
              (*reasoner-progress-monitor*)))]

This *should* work. Using dynamic binding? Some laziness disaster? 

Think I should extent reasoner to take this explicitly. It balks tests
completely. 

** Closed

The original issue was wrong, and this dynamic binding is working.



* add :ontology frame to all things
   :PROPERTIES:
   :type:     feature
   :severity: mild
   :ARCHIVE_TIME: 2013-07-24 Wed 12:30
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END:

We should be able to specify the ontology as a parameter, to 
all things that add to an ontology -- with-ontology is a bit unwieldy. 
Although we might want to use with-ontology to implement this, or I will have
to pass it around a lot. 

A new frame would be one option. Or the first parameter would be another. 



* tawny.lookup optimisation
  :PROPERTIES:
  :type:     performance
  :status:   closed
  :ARCHIVE_TIME: 2013-07-24 Wed 12:30
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

** Issue

This is potentially very slow. Add a cache to hold the map. 
Put hooks into tawny.old macros for "new var creation". When this 
pings, just kill the cache and start again. 

Also, kill on ontology kill I think. 


** Solution

Providing a generic cache is more of a pain than it appears, as it requires
hooks in everywhere, which potentially get called often. tawny.render was the
biggest sufferer from this, where I have fixed it by dynamically binding a
cache. 



* Clojure IDs as annotation

   :PROPERTIES:
   :type:     feature
   :severity: medium
   :scheduled_release: 0.12
   :status:   closed
   :ARCHIVE_TIME: 2013-07-24 Wed 13:47
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END:

The identifiers used within clojure should be placed onto the ontology as
annotations. The idea here is that someone using clojure-owl to generate an
OWL file, should be able to read this OWL file in and recreate what they
started with (at least in terms of ids and so on). 





* r/isuperclass? returns class
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-07-29 Mon 15:32
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Technically this is correct, but we might have expected true or false.
Probably nil is not ideal either.



* data-some not rendering proper
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-08-12 Mon 14:39
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

(data-some sio.sio/has_value :XSD_DATE_TIME)

renders as ...
(owlsome sio.sio/has_value nil)

Obviously the nil is wrong


* Added SimpleMapper support to tawny.read
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-08-21 Wed 10:29
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:



* consisten function impl
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-09-08 Sun 21:13
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

owlclass-explicit and others should all use the same form, with destructuring
and the like. 

This little function would be a good thing to do...
(defn fapply [f x]
  (into {}
        (for [[k v] x]
          [k ((get f k) v)])))


Takes a map of key->function and key->data, and applies the former to the
latter. This should make things nice a declarative. 



* name corrections [13/13]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-09-10 Tue 08:34
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Consistent use of "-"
Including for "owl" prefix

 - [X] iriforname
 - [X] labelproperty
 - [X] owlcommentproperty
 - [X] owlcomment
etc...

 - [X] add-haskey
 - [X] add-superproperty
 - [X] objectproperty

 - [X] atmost/atleast
 - [X] disjointclasseslist
 - [X] disjointclasses

 - [X] getfact/getfactnot
 - [X] owlimport

 - [X] owlthing/nothing


* Macro naming
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-09-10 Tue 08:34
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

defannotationproperty
defoproperty
defdproperty
defclass
defdatatype



* Ontology
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-09-20 Fri 11:42
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END: 

This function should also use extensible handlers.



* Should be able to pass multiple comments or labels
  :PROPERTIES:
  :type:     bug
  :status:   open
  :severity: mild
  :scheduled_release: 1.0
  :ARCHIVE_TIME: 2013-10-03 Thu 08:03
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:
  

     (when comment
       (add-annotation o class
                       (list (owlcomment
                              (first comment)))))

   doesn't make sense.



* Autoname
   :PROPERTIES:
   :type:     feature
   :severity: mild
   :ARCHIVE_TIME: 2013-10-03 Thu 08:03
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END:

An autoname facility might be nice for where I can't be assed to specify a
name. Especially good for probe classes. Easiest way is to just implement a
new owlclass function. 



* add-annotation
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-10-03 Thu 08:03
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Doesn't broadcast, and probably should!



* Move the reasoner code into ontology options
   
   :PROPERTIES:
   :status:   open
   :severity: mild
   :type:     performance
   :ARCHIVE_TIME: 2013-10-03 Thu 08:07
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END:

This is actually a bit of a pain, because I have to blitz all the reasoners
when changing factory. So, it's probably not worth doing.   

   

* name annotation
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-10-11 Fri 22:26
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Forces everything into OWL full. This is clearly not ideal.

Possiblilites? Auto import?
(def
  owl-self-ont
  (.loadOntologyFromOntologyDocument 
  owl-ontology-manager
  (iri (clojure.java.io/resource "tawny.owl"))))

(owl-import owl-self-ont) 

when creating a new ontology fixes the problem. Can't create this ontology in
tawny because of a disaster bootstrap problem.

In protege, this will force loading everytime.

We need an ability to switch this off. Add an ontology option maybe?



* Individual to handlers
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-10-11 Fri 22:26
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:
Thought I had done this, but no.



* Regularisiation
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-04-03 Thu 16:12
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:
  
** Plan [24/24]

All the old keywords will be retained, but plugged through a deprecated
function. I have no choice to totally change the semantics of add-subclass
and so forth.

What about data properties?

 - [X] create deprecated-add-subclass
 - [X] create deprecated-add-subproperty-chain
 - [X] create new add-subclass
 - [X] create add-superclass
 - [X] create new add-subproperty-chain
 - [X] create deprecated-add-subproperty (copy of add-superproperty but
   deprecated) for use with :subproperty keyword
 - [X] create new add-subproperty (which adds a subpropety)
 - [X] create deprecated add-data-subproperty (copy of add-data-superproperty)
 - [X] create new add-data-subproperty
 - [X] add :super, :sub to class handlers
 - [X] add :super, :sub to object property handler
 - [X] add :super, :sub to data proeprty handler
 - [X] unit test add-subclass, add-superclass
 - [X] test :super, :sub for class in REPL
 - [X] unit test :super, :sub for class
 - [X] test :super, :sub for oproperty in REPL
 - [X] unit test :super, :sub for oproperty
 - [X] test :super, :sub for dproperty in REPL
 - [X] unit test :super, :sub for dproperty
 - [X] Update *all* test cases to deprecated :subclass
 - [X] Update *all* test cases to drepcated :subproperty
 - [X] Rendering!
 - [X] Check for all doc strings
 - [X] Update the /doc documentation

We need to regularise the syntax.

add-* x y 

should y as an * to x

so

add-annotation entity annotation

adds annotation to entity.


** Breakages
 - add-subclass x y adds y as a superclass of x.
 - :subclass frame adds superclasses! (subclassof)
 - :subproperty adds a superproperty! (consistent with :subclass)
 - add-subproperty-chain adds superproperties!
 - :subpropertychain likewise
 - :subproperty adds a superproperty



* Individuals
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-04-06 Sun 11:57
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

** Problem

I don't like the current syntax for individuals which looks like this..

(defindividual Bill
  :fact
  (fact hasWife Mary)
  (fact-not hasDaughter Susan))

The multiple uses pf "fact" are really ugly. It would be much nicer to write:

(defindividual Bill
  :fact
  (hasWife Mary)
  (owl-not hasDaughter Susan))

This is however difficult for two reasons. Firstly "hasWife" is an object
property and so not a function

** Solution

Rename fact to "is" and make "owl-not" work.

(defindividual Bill
  :fact
  (is hasWife Mary)
  (owl-not hasDaughter Susan))

Now guess-type is pretty close to working

user> (defindividual i)
#'user/i
user> (defoproperty r)
#'user/r
user> (defdproperty d)
#'user/d


user> (guess-type [r i])
:tawny.owl/object-property
user> (guess-type [d 10])
:tawny.owl/data-property

in this case it all works -- that we get an object property distinguishes
what we want  (in fact at the moment, this calls object-not which crashes). 


(guess-type ["f" i])
nil
(guess-type ["d" 10])
nil

There are some untyped edge cases which are problematic. Having a literal or
a number indicates the type of "f" and "d" but these are not being returned. 

We could add a different nil handler for owl-not -- currently this just
throws an error. We'd need to check whether the second arg with
guess-individual-literal and then move from there.

Last edge case is something like

(guess-type ["d" "hello"])

since "hello" is a string (i.e. a literal), we can probably infer that "d" is
a datatype property. But this seems dodgy to me, so we won't.

These changes would mean that 

(owl-not r i)

would now return a fact, while currently this crashes with an assertion fail
error. Of course this will still crash soon after

(defclass C :subclass (fact r i))

crashes with and ArityException. This is ensure-class gets called on the
returned closure. This in turn detects that it is a function and so calls it,
but with no values -- this is to support deprecated classes in OBO stuff, but
clearly it doesn't make sense here.

It's not a very good exception really. And there is no way to check for it,
since we can't know the arity of the closure, except by calling it -- which
we need to catch and rethrow.


** Second Solution

I've been making this much more complex than necessary (not a first!)

We can distinguish based on arity! object-not current has arity of 1,
likewise data-not, so arity 2 has to be fact-not (assuming it is sane).

fact-not already distinguishes correctly what to do based on type. So, all we
need to do is change owl-not into owl-not-impl and make it a private
function. Then have an owl-not arity overloaded function which calls
owl-not-impl for arity 1, and fact-not for arity 2. All of these function
should crash sanely if they get the wrong type!

Surprisingly, this works!


** is nameclashes with clojure.test

which is a pain so probably not the thing to do

(defindividual Bill
  :fact
  (hasWife Mary)
  (owl-not hasDaughter Susan))

- (. hasWife Mary) clashes with java interop
- (, hasWife Mary) , is whitespace
- (| hasWife Mary) unintuitive
- (am hasWife Mary) -- different person of is

Decided not to care!


** Plan

 - [X] Done most of it
 - [X] Don't forget is
 - [X] Update documentation!


* Before Release
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-04-10 Thu 11:29
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

- [X] fact,fact-not to is and (owl)not
- [X] owl-and and the other multi methods are not documented
- [X] Delete test-ontology function.
- [X] Eastwood with no errors?
- [X] Superproperty rendering is not happening!
- [X] Refine for individuals
- [X] Autosave function in REPL

* Documentation
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-04-10 Thu 11:32
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_CATEGORY: todo
  :END: 

** Getting started with-clojure [5/5]
 - [X] Complete leiningen project file
 - [X] Namespaces, how they relate to files
 - [X] How to evaluate a file
 - [X] How to write a main method which dumps OWL files
 - [X] How to use Clojars.

** Getting started [9/9]

 - [X] Namespace and tawny OWL imports
 - [X] Relationship between ontology and namespace
 - [X] Creating a new ontology
 - [X] Creating a new class
 - [X] Creating properties
 - [X] as-subclasses, as-disjoints macrs
 - [X] Removing classes again
 - [X] Saving ontologies
 - [X] Interaction with Protege

** Adding restrictions [5/5]
 - [X] Adding superclasses, equivalents
 - [X] Building some,only
 - [X] And, or, not
 - [X] Forward declaration with declare-classes
 - [X] String based use of Tawny.

** Name Clashes [1/1]

 - [X] A seperate document describing what to do about these. 

** Querying the Ontology [2/2]
 - [X] Programmatically interacting with the ontology
 - [X] Not asserted and reasoned

** Reasoning [4/4]
 - [X] What is reasoning
 - [X] Reasoning over a single ontology
 - [X] Reasoning predicates
 - [X] Reasoning with tawny-mode

** Importing and Reading external ontologies [5/5]
 - [X] Difference between clojure import and OWL import.
 - [X] Reading an OWL file into Clojure
 - [X] What it means, in terms of Clojure
 - [X] transform and filter
 - [X] Filter is only in namespace, not save

** Tawny Repl [1/1]
 - [X] Documentation lookup
 - [ ] Why documentation lookup is slow

** Scripting with Tawny [1/1]
 - [X] Added NamedPizza's

** Polyglot [1/1]
 - [X] Adding multi lingual labels
   
** Memorise [/]
 - [ ] What is the problem with read and transform
 - [ ] How memorise helps to solve this problem
 - [ ] How to save a memorisation state
 - [ ] How to load one again.

** Render [/]
 - [ ] What render is for
 - [ ] How render is not necessary for reading
 - [ ] How render is used for documentation
 - [ ] And testing

** Testing [6/6]
 - [X] What is unit testing, how does it look in Clojure
 - [X] How does unit testing apply to ontologies
 - [X] Predicates for use without reasoning
 - [X] How to set up reasoner in a fixture
 - [X] Predicates for use with reasoning
 - [X] probe-classes. 

* Privacy
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-04-10 Thu 11:33
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

consider "add" methods 




* Memorise, obo
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-04-10 Thu 11:34
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Move to defontfn footing, and add some documentation!



* Memorise read rather than load
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-04-10 Thu 11:34
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Currently implemented using load -- this forces byte compilation of the saved
file. This imposes file size limits due to the java class format. Probably
not good.

Can use clojure.edn which just returns data instead.



* let-ontology
  :PROPERTIES:
  :status:   closed
  :ARCHIVE_TIME: 2014-05-20 Tue 10:29
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:


** Closed

Decided to close this one, because it's not really worth the effort.

** Description

A macro for easing

(let [ont (ontology)
      cl (owl-class ont)
      cl2 (owl-class ont)]
   (coherent? ont))

style code -- want instead

(let-ont [ont (ontology)
          cl (owl-class)
          cl2 (owl-class)])



Possible expansions:

(let [ont (ontology)]
  (with-current-ontology
     (let [cl (owl-class)
           cl2 (owl-class)])))

This is nice and simple, but uses dynamic scoping of the current ontology
which is a bit unpredicatable if we call anything else. 

Another possibility is to expand to the form above, but simply adding "ont"
as the first value. But this fails for 

(let-ont [ont (ontology)
          cl (if condition
                 (owl-class "a")
                 (owl-class "b"))]
     (consistent?))

cause the if form would end up as 

(if ont condition
   (owl-class "a")
   (owl-class "b"))

which is not ideal. Another possibility would be to check for tawny functions
using clojure.walk. Okay, but fails if we define things like (sio-class).
      


