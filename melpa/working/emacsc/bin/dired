#!/usr/bin/perl
#
# dired(1) - a frontend command for dired
#
# Copyright (c) 2013-2015 Akinori MUSHA
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# See https://github.com/knu/emacsc for the latest information.

use Cwd qw(abs_path getcwd);
use File::Basename;
use Getopt::Long;

main();

sub usage {
    my $name = basename($0);

    print STDERR <<EOF;
usage: $name [directory|file]

Open a given directory or a file name with dired, defaulted to the
current directory.  If a non-directory is given, the point will be
automatically moved to the file on startup.

This command depends on emacsc(1).  Put the following lines in your
Emacs initialization file.

    (require 'emacsc)
EOF
}

sub main {
    my $opt_h;
    GetOptions("h|help" => sub { usage; exit }) or exit 64;

    if (1 < @ARGV) {
        usage;
        exit 64;
    }

    eval {
        my($dir, $file) = parse_filename(@ARGV ? $ARGV[0] : getcwd());
        emacsc(<<'ELISP', $dir, $file);
(let* ((dir "%s")
       (filename "%s")
       (buffer (dired dir))
       (pos (with-current-buffer buffer
              (goto-char (point-min))
              (dired-next-line 1)
              (while (and (not (eobp))
                          (or (dired-between-files)
                              (not (string= (file-name-nondirectory (dired-get-filename nil t))
                                            filename))))
                (dired-next-line 1)))))
  (switch-to-buffer buffer)
  ;; force redisplay of hl-line-mode
  (if (bound-and-true-p hl-line-mode)
    (hl-line-highlight)))
ELISP
    };
    if ($@) {
        print STDERR basename($0), ": ", $@;
        exit 1;
    }
}

sub parse_filename {
    my($file) = @_;

    $abs = abs_path($file);

    if (-d $abs) {
        return ($abs, '..');
    } elsif (-e _ || -l $abs) {
        return (dirname($abs), basename($abs));
    } else {
        die sprintf("%s: %s\n", $file, $! || 'No such file or directory');
    }
}

sub elisp_escape {
    (local $_) = @_;
    s/[\\"]/\\$1/;
    $_;
}

sub emacsc {
    my($elisp, @args) = @_;
    $elisp =~ s/;;.*$//mg;
    $elisp =~ s/\s+(?=\s|\z)//g;
    exec qw(emacsc -x), sprintf($elisp, map elisp_escape($_), @args);
}
