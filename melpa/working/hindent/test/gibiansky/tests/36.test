import A.Long.Module.Name (With(many, many, many,  many, many), imports, and, exports, that, don't, fit, on, one, line, at, all)

import A.Long.Module.Name (With(many, many, many,  many, many), With(many, many, many,  many, many), With(many, many, many,  many, many), imports, and, exports, that, don't, fit, on, one, line, at, all)

f (Zee x) =
  -- Comment!
  startswith "No instance for (Show" msg && True

x = do
  -- hi
  return output { longLongLong = 3,  longLongLong = 3, longLongLong = 3, longLongLong = 3, longLongLong = 3, longLongLong = 3}

f x = f $ do
  -- hello
  f x

f x = f $
  -- hello
  f x

a =
  case x of
    z -> y -- what
    z -> y

class A be where
  x = y
  z = w

class A b where
  x = y
>
  z = w

data Widget = forall a. IHaskellWidget a => Widget a
  deriving Typeable

instance Monoid X where
    mempty = X
    X `mappend` X = X

a =
  let x = X { y = z, 
              -- FIXME
              z = z }
  in Z
