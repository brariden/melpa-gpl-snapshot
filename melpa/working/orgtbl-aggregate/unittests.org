# -*- coding:utf-8; -*-
#+TITLE: Unit Tests & Examples for Orgtbl Aggregate
Copyright (C) 2013, 2014, 2015, 2016  Thierry Banel

org-aggregate is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

org-aggregate is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


Running all the tests should not change anything to this page.

All pull-mode tests can be re-computed at once by executing:
(org-update-all-dblocks)

All push-mode tests can be re-computed at once by executing:
(org-table-map-tables
  (lambda ()
    (org-table-align)
    (orgtbl-send-table 'maybe)))

* Test PUSH
Push = source table drives computation of aggregated tables.
Run by typing C-c C-c on the first pipe of the source table.

** Source table
No need to name it.

#+ORGTBL: SEND aggtable1 orgtbl-to-aggregated-table :cols "sum($3) $2 sum($4) mean($5) $3*$3 min($5) max($5)"
#+ORGTBL: SEND aggtable2 orgtbl-to-aggregated-table :cols "sum(x) q sum(y) mean(z) x*x min(z) max(z)"
#+ORGTBL: SEND aggtable3 orgtbl-to-aggregated-table :cols "p count() sum($4) mean(z) sum(z*z) (x) min(y) max(y)"
#+ORGTBL: SEND aggtable4 orgtbl-to-aggregated-table :cols "count() mean(x) mean(y) mean(z) meane(z) median(z)" :cond (not (equal f ""))
#+ORGTBL: SEND aggtable5 orgtbl-to-aggregated-table :cols "count() mean(x) mean(y) mean(z) meane(z) median(z) hline"
#+ORGTBL: SEND aggtable6 orgtbl-to-aggregated-table :cols "q prod(z) sdev(z) pvar(z) psdev(z)"
#+ORGTBL: SEND aggtable7 orgtbl-to-aggregated-table :cols "q prod(z) cov(x,y) corr(z,z)"
#+ORGTBL: SEND aggtable8 orgtbl-to-aggregated-table :cols "hline min(d) max(d) mean(d)"
#+ORGTBL: SEND aggtable9 orgtbl-to-aggregated-table :cols "sum(x) q sum(y) mean(z) x*x min(z) max(z)" :cond (equal hline "2")
#+ORGTBL: SEND aggtablea orgtbl-to-aggregated-table :cols "sum(x) q sum(y) mean(z) x*x min(z) max(z)" :cond (equal q "b")
| p | q |   x |    y | z | f | d                      |
|---+---+-----+------+---+---+------------------------|
| 1 | b |  12 |    8 | 9 | 0 | [2013-12-22 sun 09:01] |
| 3 | b |  12 |    8 | 9 | 0 | [2013-11-23 sat 13:04] |
| 1 | a |   3 |    2 | 4 | 0 | [2011-09-24 sat 13:54] |
| 2 | a |   3 |    2 | 2 |   | [2013-09-25 wed 03:54] |
| 3 | a |   3 |    2 | 1 |   | [2014-02-26 wed 16:11] |
| 3 | a |   5 |    4 | 2 |   | [2014-01-18 sat 03:51] |
| 1 | a | 5.1 |    2 | 8 | 1 | [2013-12-25 wed 00:00] |
|---+---+-----+------+---+---+------------------------|
| 2 | b |   9 |    8 | 5 |   | [2012-12-25 tue 00:00] |
| 3 | b |   9 |    8 | 1 |   | [2014-01-18 sat 23:22] |
| 4 | a |   a |    a | 8 |   | [2014-08-02 sat 23:22] |
| 5 | a |   a | 10*a | 4 |   | [2015-09-14 mon 13:07] |
|---+---+-----+------+---+---+------------------------|
| 4 | b |   b |    b | 6 | 1 | [2015-10-02 fri 17:42] |
| 5 | b | b+3 |  b*b | 8 | 1 | [2016-01-28 thu 15:06] |

** Resulting tables

#+BEGIN RECEIVE ORGTBL aggtable1
| sum($3)    | $2 | sum($4)      |      mean($5) | $3*$3             | min($5) | max($5) |
|------------+----+--------------+---------------+-------------------+---------+---------|
| 2 b + 45   | b  | b + b^2 + 32 | 6.33333333333 | 2 b^2 + 6 b + 459 |       1 |       9 |
| 2 a + 19.1 | a  | 11 a + 12    | 4.14285714286 | 2 a^2 + 78.01     |       1 |       8 |
#+END RECEIVE ORGTBL aggtable1

#+BEGIN RECEIVE ORGTBL aggtable2
| sum(x)     | q | sum(y)       |       mean(z) | x*x               | min(z) | max(z) |
|------------+---+--------------+---------------+-------------------+--------+--------|
| 2 b + 45   | b | b + b^2 + 32 | 6.33333333333 | 2 b^2 + 6 b + 459 |      1 |      9 |
| 2 a + 19.1 | a | 11 a + 12    | 4.14285714286 | 2 a^2 + 78.01     |      1 |      8 |
#+END RECEIVE ORGTBL aggtable2

#+BEGIN RECEIVE ORGTBL aggtable3
| p | count() |    sum($4) | mean(z) | sum(z*z) | (x)           |         min(y) |         max(y) |
|---+---------+------------+---------+----------+---------------+----------------+----------------|
| 1 |       3 |         12 |       7 |      161 | [12, 3, 5.1]  |              2 |              8 |
| 3 |       4 |         22 |    3.25 |       87 | [12, 3, 5, 9] |              2 |              8 |
| 2 |       2 |         10 |     3.5 |       29 | [3, 9]        |              2 |              8 |
| 4 |       2 |      a + b |       7 |      100 | [a, b]        |      min(a, b) |      max(a, b) |
| 5 |       2 | 10 a + b^2 |       6 |       80 | [a, b + 3]    | min(10 a, b^2) | max(10 a, b^2) |
#+END RECEIVE ORGTBL aggtable3

#+BEGIN RECEIVE ORGTBL aggtable4
| count() | mean(x)                 | mean(y)                         |       mean(z) | meane(z)                         | median(z) |
|---------+-------------------------+---------------------------------+---------------+----------------------------------+-----------|
|       6 | 0.333333333333 b + 5.85 | b / 6 + b^2 / 6 + 3.33333333333 | 7.33333333333 | 7.33333333333 +/- 0.802772971919 |         8 |
#+END RECEIVE ORGTBL aggtable4

#+BEGIN RECEIVE ORGTBL aggtable5
| count() | mean(x)       | mean(y)         | mean(z) | meane(z)              | median(z) | hline |
|---------+---------------+-----------------+---------+-----------------------+-----------+-------|
|       7 | 6.15714285714 | 4               |       5 | 5 +/- 1.34518541827   |         4 |     0 |
|       4 | 0.5 a + 4.5   | 2.75 a + 4      |     4.5 | 4.5 +/- 1.44337567297 |       4.5 |     1 |
|       2 | b + 1.5       | b / 2 + b^2 / 2 |       7 | 7 +/- 1               |         7 |     2 |
#+END RECEIVE ORGTBL aggtable5

#+BEGIN RECEIVE ORGTBL aggtable6
| q | prod(z) |       sdev(z) |       pvar(z) |      psdev(z) |
|---+---------+---------------+---------------+---------------|
| b |   19440 | 3.07679486912 | 7.88888888889 | 2.80871659106 |
| a |    4096 | 2.85356919364 | 6.97959183673 | 2.64189171556 |
#+END RECEIVE ORGTBL aggtable6

#+BEGIN RECEIVE ORGTBL aggtable7
| q | prod(z) | cov(x,y)                                                                  | corr(z,z) |
|---+---------+---------------------------------------------------------------------------+-----------|
| b |   19440 | 0.133333333334 b^3 - 3.63333333335 b - 0.766666666667 b^2 + 19.1999999999 |        1. |
| a |    4096 | 1.30952380953 a^2 - 5.57380952383 a + 2.5761904762                        |        1. |
#+END RECEIVE ORGTBL aggtable7

#+BEGIN RECEIVE ORGTBL aggtable8
| hline | min(d)                  | max(d)                  |                     mean(d) |
|-------+-------------------------+-------------------------+-----------------------------|
|     0 | <2011-09-24 sam. 13:54> | <2014-02-26 mer. 16:11> | <14089-07-11 mon 11:55> / 7 |
|     1 | <2012-12-25 mar. 00:00> | <2015-09-14 lun. 13:07> |               735354.373438 |
|     2 | <2015-10-02 ven. 17:42> | <2016-01-28 jeu. 15:06> |               735932.683334 |
#+END RECEIVE ORGTBL aggtable8

#+BEGIN RECEIVE ORGTBL aggtable9
| sum(x)  | q | sum(y)  | mean(z) | x*x             | min(z) | max(z) |
|---------+---+---------+---------+-----------------+--------+--------|
| 2 b + 3 | b | b + b^2 |       7 | 2 b^2 + 6 b + 9 |      6 |      8 |
#+END RECEIVE ORGTBL aggtable9

#+BEGIN RECEIVE ORGTBL aggtablea
| sum(x)   | q | sum(y)       |       mean(z) | x*x               | min(z) | max(z) |
|----------+---+--------------+---------------+-------------------+--------+--------|
| 2 b + 45 | b | b + b^2 + 32 | 6.33333333333 | 2 b^2 + 6 b + 459 |      1 |      9 |
#+END RECEIVE ORGTBL aggtablea

* Test PULL
Pull = aggregated table knows how to compute itself,
       source table is unaware of the aggregation.

** Source table
Not changed in any way by the aggregate process.
(Note: non-ascii characters are used as column names)

#+TBLNAME: pulledtable
| pé | qû |  xà |   yÿ | zö | déf |
|----+----+-----+------+----+-----|
|  1 | b  |  12 |    8 |  9 |     |
|  3 | b  |  12 |    8 |  9 |     |
|  1 | a  |   3 |    2 |  4 |   1 |
|  2 | a  |   3 |    2 |  2 |     |
|  3 | a  |   3 |    2 |  1 |   1 |
|  3 | a  |   5 |    4 |  2 |   1 |
|  1 | a  | 5.1 |    2 |  8 |   1 |
|  2 | b  |   9 |    8 |  5 |     |
|  3 | b  |   9 |    8 |  1 |     |
|  4 | a  |   a |    a |  8 |     |
|  5 | a  |   a | 10*a |  4 |   1 |
|  4 | b  |   b |    b |  6 |   1 |
|  5 | b  | b+3 |  b*b |  8 |     |

** Resulting tables
Type C-c C-c within each to refresh

Note the =:formula= parameter to add a new column after the aggregation has been computed.

#+BEGIN: aggregate :table pulledtable :cols ("qû" "mean(zö)") :formula "$3=$2*100"
| qû |      mean(zö) |           |
|----+---------------+-----------|
| b  | 6.33333333333 | 633.33333 |
| a  | 4.14285714286 | 414.28571 |
#+TBLFM: $3=$2*100
#+END

Note the additional =$8= column automatically computed after the aggregation

#+BEGIN: aggregate :table pulledtable :cols "sum(xà) qû sum(yÿ) mean(zö) xà*xà min(zö) max(zö)"
| sum(xà)    | qû | sum(yÿ)      |      mean(zö) | xà*xà             | min(zö) | max(zö) |     |
|------------+----+--------------+---------------+-------------------+---------+---------+-----|
| 2 b + 45   | b  | b + b^2 + 32 | 6.33333333333 | 2 b^2 + 6 b + 459 |       1 |       9 |   5 |
| 2 a + 19.1 | a  | 11 a + 12    | 4.14285714286 | 2 a^2 + 78.01     |       1 |       8 | 4.5 |
#+TBLFM: $8=($6+$7)/2
#+END

#+BEGIN: aggregate :table pulledtable :cols "pé count() sum($4) mean(zö) sum(zö*zö) (xà) min(yÿ) max(yÿ)"
| pé | count() |    sum($4) | mean(zö) | sum(zö*zö) | (xà)          |        min(yÿ) |        max(yÿ) |
|----+---------+------------+----------+------------+---------------+----------------+----------------|
|  1 |       3 |         12 |        7 |        161 | [12, 3, 5.1]  |              2 |              8 |
|  3 |       4 |         22 |     3.25 |         87 | [12, 3, 5, 9] |              2 |              8 |
|  2 |       2 |         10 |      3.5 |         29 | [3, 9]        |              2 |              8 |
|  4 |       2 |      a + b |        7 |        100 | [a, b]        |      min(a, b) |      max(a, b) |
|  5 |       2 | 10 a + b^2 |        6 |         80 | [a, b + 3]    | min(10 a, b^2) | max(10 a, b^2) |
#+END

#+BEGIN: aggregate :table pulledtable :cols "count() mean(xà) mean(yÿ) mean(zö)"
| count() | mean(xà)                                            | mean(yÿ)                                             |      mean(zö) |
|---------+-----------------------------------------------------+------------------------------------------------------+---------------|
|      13 | 0.153846153846 a + 0.153846153846 b + 4.93076923077 | 0.846153846154 a + b / 13 + b^2 / 13 + 3.38461538462 | 5.15384615385 |
#+END

#+BEGIN: aggregate :table pulledtable :cols "pé count() mean(zö) meane(zö) gmean(zö) hmean(zö) median(zö)"
| pé | count() | mean(zö) | meane(zö)              |     gmean(zö) |     hmean(zö) | median(zö) |
|----+---------+----------+------------------------+---------------+---------------+------------|
|  1 |       3 |        7 | 7 +/- 1.52752523165    | 6.60385449779 | 6.17142857143 |          8 |
|  3 |       4 |     3.25 | 3.25 +/- 1.93110503771 | 2.05976714391 | 1.53191489362 |        1.5 |
|  2 |       2 |      3.5 | 3.5 +/- 1.5            | 3.16227766017 | 2.85714285714 |        3.5 |
|  4 |       2 |        7 | 7 +/- 1                | 6.92820323028 | 6.85714285714 |          7 |
|  5 |       2 |        6 | 6 +/- 2                | 5.65685424949 | 5.33333333333 |          6 |
#+END

#+BEGIN: aggregate :table pulledtable :cols "qû count() prod(zö) sdev(zö) pvar(zö) psdev(zö)"
| qû | count() | prod(zö) |      sdev(zö) |      pvar(zö) |     psdev(zö) |
|----+---------+----------+---------------+---------------+---------------|
| b  |       6 |    19440 | 3.07679486912 | 7.88888888889 | 2.80871659106 |
| a  |       7 |     4096 | 2.85356919364 | 6.97959183673 | 2.64189171556 |
#+END

#+BEGIN: aggregate :table pulledtable :cols "qû count() cov(zö,xà) pcov(zö,zö) corr(zö,zö)"
| qû | count() | cov(zö,xà)                       |   pcov(zö,zö) | corr(zö,zö) |
|----+---------+----------------------------------+---------------+-------------|
| b  |       6 | 0.266666666667 b + 1.79999999998 | 7.88888888889 |          1. |
| a  |       7 | 0.619047619049 a - 1.22142857143 | 6.97959183673 |          1. |
#+END

* Test :cond PUSH

** Source table
Only the second group (5 rows) is considered with the test =hline=1=.

#+ORGTBL: SEND aggtable15 orgtbl-to-aggregated-table :cond (equal hline "1") :cols "count() q mean(x) mean(y) mean(z) hline"
| p | q |   x |    y | z |
|---+---+-----+------+---|
| 1 | b |  12 |    8 | 9 |
| 3 | b |  12 |    8 | 9 |
| 1 | a |   3 |    2 | 4 |
| 2 | a |   3 |    2 | 2 |
| 3 | a |   3 |    2 | 1 |
| 3 | a |   5 |    4 | 2 |
| 1 | a | 5.1 |    2 | 8 |
|---+---+-----+------+---|
| 2 | b |   9 |    8 | 5 |
| 3 | b |   9 |    8 | 1 |
| 4 | a |   a |    a | 8 |
| 5 | a |   a | 10*a | 4 |
| 4 | b |   b |    b | 6 |
|---+---+-----+------+---|
| 5 | b | b+3 |  b*b | 8 |

** Aggregated table

#+BEGIN RECEIVE ORGTBL aggtable15
| count() | q | mean(x)   | mean(y)               | mean(z) | hline |
|---------+---+-----------+-----------------------+---------+-------|
|       3 | b | b / 3 + 6 | b / 3 + 5.33333333333 |       4 |     1 |
|       2 | a | a         | 5.5 a                 |       6 |     1 |
#+END RECEIVE ORGTBL aggtable15

* Test :cond PULL
The =:cond= parameter takes a lisp expression
to filter-out resulting rows.

** Resulting tables
Only consider rows for which column q have the value "b"

#+BEGIN: aggregate :table pulledtable :cols "qû count() mean(zö)" :cond (equal qû "b")
| qû | count() |      mean(zö) |
|----+---------+---------------|
| b  |       6 | 6.33333333333 |
#+END

Only consider rows for which column =p= is greater than =3=.
Note the =string-to-number= call, because cells always contain strings.

#+BEGIN: aggregate :table pulledtable :cols "qû count() mean(zö)" :cond (>= (string-to-number pé) 3)
| qû | count() | mean(zö) |
|----+---------+----------|
| b  |       4 |        6 |
| a  |       4 |     3.75 |
#+END

Only consider rows for which the =def= column is not blank.

#+BEGIN: aggregate :table pulledtable :cols "qû count() mean(zö) déf" :cond (not (equal déf ""))
| qû | count() | mean(zö) | déf |
|----+---------+----------+-----|
| a  |       5 |      3.8 |   1 |
| b  |       1 |        6 |   1 |
#+END

* Test correlation
Are two columns correlated ?

** Source table
Contains columns correlated with some noise.
: y = 10* + noise             (x y are highly correlated)
: z = pure noise              (x z are not correlated)
: t = pure noise              (z t are not correlated)
: m = 10*x in reverse order   (x m are negative correlated)

#+TBLNAME: correlated
| tag   |  x |       y |     z |     t |   m |
|-------+----+---------+-------+-------+-----|
| small |  1 |  10.414 | 78.30 |  1.70 | 120 |
| small |  2 |  20.616 | 48.20 | 80.40 | 110 |
| small |  3 |  30.210 | 93.50 | 25.10 | 100 |
| small |  4 |  41.692 | 85.90 | 16.30 |  90 |
| small |  5 |  50.576 | 11.70 | 37.00 |  80 |
| large |  6 |  60.026 | 46.60 |  6.00 |  70 |
| large |  7 |  71.236 |  3.30 | 35.70 |  60 |
| large |  8 |  81.204 | 78.80 | 46.30 |  50 |
| large |  9 |  90.862 | 89.60 | 98.40 |  40 |
| large | 10 | 101.240 |  0.60 |  8.80 |  30 |
| large | 11 | 111.924 | 32.40 | 63.70 |  20 |
| large | 12 | 120.490 | 35.50 | 98.20 |  10 |

The following line was appended to the table to generate the random noise.
It is thrown away to avoid recomputing new noise, and thus invalidating the test.
: #+TBLFM: $3=$2*10+random(1000)/500;%.3f::$4=random(1000)/10;%.2f::$5=random(1000)/10;%.2f

** Resulting table
Type C-c C-c within resulting table to refresh.

#+BEGIN: aggregate :table correlated :cols "tag corr(x,y) corr(x,z) corr(x,m) corr(z,t)"
| tag   |      corr(x,y) |       corr(x,z) | corr(x,m) |      corr(z,t) |
|-------+----------------+-----------------+-----------+----------------|
| small | 0.999449791325 | -0.448296141593 |        -1 | -0.49786310458 |
| large | 0.999657841285 | -0.120566390616 |        -1 | 0.486014333463 |
#+END

* Test without headers
What if the source table does not have headers?
Then columns should be named =$1=, =$2=, =$3= and so on.

** Source table

#+TBLNAME: noheader
| 0 | z |   t |    x | y |
| 1 | b |  12 |    8 | 9 |
| 3 | b |  12 |    8 | 9 |
| 1 | a |   3 |    2 | 4 |
| 2 | a |   3 |    2 | 2 |
| 3 | a |   3 |    2 | 1 |
| 3 | a |   5 |    4 | 2 |
| 1 | a | 5.1 |    2 | 8 |
| 2 | b |   9 |    8 | 5 |
| 3 | b |   9 |    8 | 1 |
| 4 | a |   a |    a | 8 |
| 5 | a |   a | 10*a | 4 |
| 4 | b |   b |    b | 6 |
| 5 | b | b+3 |  b*b | 8 |

** Aggregated table

#+BEGIN: aggregate :table noheader :cols "hline $1 mean($3) sum($4)"
| hline | $1 | mean($3)            | sum($4)    |
|-------+----+---------------------+------------|
|     0 |  0 | t                   | x          |
|     0 |  1 | 6.7                 | 12         |
|     0 |  3 | 7.25                | 22         |
|     0 |  2 | 6                   | 10         |
|     0 |  4 | a / 2 + b / 2       | a + b      |
|     0 |  5 | a / 2 + b / 2 + 1.5 | 10 a + b^2 |
#+END

* Test hline
Horizontal lines naturally create groups withing the source table.
Those groups can be accessed through the =hline= virtual column.

** Source table
It contains four groups separated by horizontal lines.

#+TBLNAME: hlinetable
| p | q |   x |    y | z | f |
|---+---+-----+------+---+---|
| 1 | b |  12 |    8 | 9 | 0 |
| 3 | b |  12 |    8 | 9 | 0 |
| 1 | a |   3 |    2 | 4 | 0 |
| 2 | a |   3 |    2 | 2 | 0 |
| 3 | a |   3 |    2 | 1 | 0 |
|---+---+-----+------+---+---|
| 3 | a |   5 |    4 | 2 | 1 |
| 1 | a | 5.1 |    2 | 8 | 1 |
|---+---+-----+------+---+---|
| 2 | b |   9 |    8 | 5 | 1 |
| 3 | b |   9 |    8 | 1 | 1 |
| 4 | a |   a |    a | 8 | 1 |
|---+---+-----+------+---+---|
| 5 | a |   a | 10*a | 4 | 1 |
| 4 | b |   b |    b | 6 | 1 |
| 5 | b | b+3 |  b*b | 8 | 1 |

** Aggregated table
The =hline= column groups data 

#+BEGIN: aggregate :table hlinetable :cols "q hline vcount()" :cond (equal f "1")
| q | hline | vcount() |
|---+-------+----------|
| a |     1 |        2 |
| b |     2 |        2 |
| a |     2 |        1 |
| a |     3 |        1 |
| b |     3 |        2 |
#+END

* Test dates
Some (limited) handling of dates is available.

** Source table
#+tblname: datetable
| n | d                       |
|---+-------------------------|
| 1 | [2013-12-22 dim. 09:01] |
| 2 | [2013-11-23 sam. 13:04] |
| 3 | [2011-09-24 sam. 13:54] |
| 4 | [2013-09-25 mer. 03:54] |
| 5 | [2014-02-26 mer. 16:11] |
| 6 | [2014-01-18 sam. 03:51] |
| 7 | [2013-12-25 mer. 00:00] |
| 8 | [2012-12-25 mar. 00:00] |

** Aggregated table

#+BEGIN: aggregate :table datetable :cols "min(d) max(d) min(n) max(n) mean(d)"
| min(d)                 | max(d)                 | min(n) | max(n) |       mean(d) |
|------------------------+------------------------+--------+--------+---------------|
| <2011-09-24 sat 13:54> | <2014-02-26 wed 16:11> |      1 |      8 | 735073.937066 |
#+END

* Test symbolic
The Emacs Calc symbolic calculator is used by the aggregate package.
Therefore, symbolic calculations are available.

** Source table
Contains the variables =x= and =a=, which are not numeric.

#+TBLNAME: symtable
| Day       | Color |  Level | Quantity |
|-----------+-------+--------+----------|
| Monday    | Red   |   30+x |     11+a |
| Monday    | Blue  | 25+3*x |        3 |
| Thuesday  | Red   | 51+2*x |       12 |
| Thuesday  | Red   |   45-x |       15 |
| Thuesday  | Blue  |     33 |       18 |
| Wednesday | Red   |     27 |       23 |
| Wednesday | Blue  |   12+x |       16 |
| Wednesday | Blue  |     15 |   15-6*a |
| Turdsday  | Red   |     39 |   24-5*a |
| Turdsday  | Red   |     41 |       29 |
| Turdsday  | Red   |   49+x |   30+9*a |
| Friday    | Blue  |      7 |      5+a |
| Friday    | Blue  |      6 |        8 |
| Friday    | Blue  |     11 |        9 |

** Aggregated table
Result is variabilized with =x= and =a=.

#+BEGIN: aggregate :table "symtable" :cols "Day mean(Level) sum(Quantity)"
| Day       | mean(Level)           | sum(Quantity) |
|-----------+-----------------------+---------------|
| Monday    | 2. x + 27.5           | a + 14        |
| Thuesday  | 0.333333333334 x + 43 | 45            |
| Wednesday | x / 3 + 18            | 54 - 6 a      |
| Turdsday  | x / 3 + 43.           | 4 a + 83      |
| Friday    | 8                     | a + 22        |
#+END

* Test zero output
The following test produces sums which happen to be zero, either
because input is empty, or by chance (1-1 = 0).
Zeros are no longer translated to empty cells.

#+TBLNAME: resultzero
| Item | Value |
|------+-------|
| a2   |     1 |
| a2   |     1 |
| a0   |    -1 |
| a0   |     1 |
| b2   |     2 |
| b2   |       |
| b0   |     0 |
| b0   |       |
| c    |       |
| c    |       |

#+BEGIN: aggregate :table resultzero :cols "Item vsum(Value) vmean(Value)"
| Item | vsum(Value) | vmean(Value) |
|------+-------------+--------------|
| a2   |           2 |            1 |
| a0   |           0 |            0 |
| b2   |           2 |            2 |
| b0   |           0 |            0 |
| c    |           0 |    vmean([]) |
#+END

* Test empty inputs
Empty input cells are most often ignored.
- This makes no difference for =sum= and =count=.
- For =prod=, empty input do not result in zero.
- For =mean=, only non-empty cells participate
  (if empty cells were zero, they would count in the division).
- For =min= and =max=, a possibly empty list of values is possible,
  resulting in =inf= or =-inf=

Some aggregation functions operate on two columns.
In this case, a pair of empty cells is ignored.
But a pair of an empty and a non-empty cell is
added to the aggregation, by replacing the missing
value with zero.

#+tblname: emptyinput
| T                |  Q |   R |
|------------------+----+-----|
| no-blank         |  1 |  10 |
| no-blank         |  2 |  20 |
| no-blank         |  3 |  30 |
| 1-left-blank     |  4 |  40 |
| 1-left-blank     |    |  50 |
| 1-left-blank     |  6 |  60 |
| 1-left-blank     |  7 |  70 |
| all-blank        |    |     |
| all-blank        |    |     |
| all-blank        |    |     |
| 2-left-blank     | 11 | 110 |
| 2-left-blank     | 12 | 120 |
| 2-left-blank     | 13 | 130 |
| 2-left-blank     | 14 | 140 |
| 1-dual-blank     | 15 | 150 |
| 1-dual-blank     |    |     |
| 1-dual-blank     | 17 | 170 |
| single-non-blank | 18 | 180 |
| single-non-blank |    |     |
| single-non-blank |    |     |

#+BEGIN: aggregate :table "emptyinput" :cols "T sum(Q) prod(Q) (Q) min(Q) max(Q)"
| T                | sum(Q) | prod(Q) | (Q)              | min(Q) | max(Q) |
|------------------+--------+---------+------------------+--------+--------|
| no-blank         |      6 |       6 | [1, 2, 3]        |      1 |      3 |
| 1-left-blank     |     17 |     168 | [4, 6, 7]        |      4 |      7 |
| all-blank        |      0 |       1 | []               |    inf |   -inf |
| 2-left-blank     |     50 |   24024 | [11, 12, 13, 14] |     11 |     14 |
| 1-dual-blank     |     32 |     255 | [15, 17]         |     15 |     17 |
| single-non-blank |     18 |      18 | [18]             |     18 |     18 |
#+END:

#+BEGIN: aggregate :table "emptyinput" :cols "T mean(Q) meane(Q) gmean(Q) hmean(Q)"
| T                |       mean(Q) | meane(Q)                         |      gmean(Q) |      hmean(Q) |
|------------------+---------------+----------------------------------+---------------+---------------|
| no-blank         |             2 | 2 +/- 0.577350269189             | 1.81712059283 | 1.63636363636 |
| 1-left-blank     | 5.66666666667 | 5.66666666667 +/- 0.881917103688 | 5.51784835276 | 5.36170212766 |
| all-blank        |     vmean([]) | vmeane([])                       |    vgmean([]) |    vhmean([]) |
| 2-left-blank     |          12.5 | 12.5 +/- 0.645497224368          | 12.4497700445 |  12.399483871 |
| 1-dual-blank     |            16 | 16 +/- 1                         | 15.9687194227 |       15.9375 |
| single-non-blank |            18 | vmeane([18])                     |            18 |           18. |
#+END:

#+BEGIN: aggregate :table "emptyinput" :cols "T min(Q) max(Q)"
| T                | min(Q) | max(Q) |
|------------------+--------+--------|
| no-blank         |      1 |      3 |
| 1-left-blank     |      4 |      7 |
| all-blank        |    inf |   -inf |
| 2-left-blank     |     11 |     14 |
| 1-dual-blank     |     15 |     17 |
| single-non-blank |     18 |     18 |
#+END:

#+BEGIN: aggregate :table "emptyinput" :cols "T pvar(Q) sdev(Q) psdev(Q)"
| T                |        pvar(Q) |       sdev(Q) |       psdev(Q) |
|------------------+----------------+---------------+----------------|
| no-blank         | 0.666666666667 |             1 | 0.816496580928 |
| 1-left-blank     |  1.55555555556 | 1.52752523165 |  1.24721912893 |
| all-blank        |      vpvar([]) |     vsdev([]) |     vpsdev([]) |
| 2-left-blank     |           1.25 | 1.29099444874 |  1.11803398875 |
| 1-dual-blank     |              1 | 1.41421356237 |              1 |
| single-non-blank |              0 |   vsdev([18]) |              0 |
#+END:

#+BEGIN: aggregate :table "emptyinput" :cols "T corr(Q,R);EN cov(Q,R);EN pcov(Q,R);EN"
| T                |                corr(Q,R);EN |   cov(Q,R);EN |  pcov(Q,R);EN |
|------------------+-----------------------------+---------------+---------------|
| no-blank         |                           1 |            10 | 6.66666666667 |
| 1-left-blank     |              0.625543242171 |           25. |         18.75 |
| all-blank        | vcorr([0, 0, 0], [0, 0, 0]) |             0 |             0 |
| 2-left-blank     |                          1. | 16.6666666667 |          12.5 |
| 1-dual-blank     |                          1. | 863.333333333 | 575.555555556 |
| single-non-blank |                           1 |          1080 |           720 |
#+END:

#+BEGIN: aggregate :table "emptyinput" :cols "T count() (Q) (R)"
| T                | count() | (Q)              | (R)                  |
|------------------+---------+------------------+----------------------|
| no-blank         |       3 | [1, 2, 3]        | [10, 20, 30]         |
| 1-left-blank     |       4 | [4, 6, 7]        | [40, 50, 60, 70]     |
| all-blank        |       3 | []               | []                   |
| 2-left-blank     |       4 | [11, 12, 13, 14] | [110, 120, 130, 140] |
| 1-dual-blank     |       3 | [15, 17]         | [150, 170]           |
| single-non-blank |       3 | [18]             | [180]                |
#+END:

* Test empty and non-numeric

#+tblname: nonnumeric
|  X |
|----|
|  1 |
|  2 |
| aa |
|    |
|  4 |

#+BEGIN: aggregate :table "nonnumeric" :cols "(X) (X);E (X);N (X);EN"
| (X)           | (X);E              | (X);N        | (X);EN          |
|---------------+--------------------+--------------+-----------------|
| [1, 2, aa, 4] | [1, 2, aa, nan, 4] | [1, 2, 0, 4] | [1, 2, 0, 0, 4] |
#+END:

#+BEGIN: aggregate :table "nonnumeric" :cols "mean(X) mean(X);E mean(X);N mean(X);EN"
| mean(X)       | mean(X);E | mean(X);N | mean(X);EN |
|---------------+-----------+-----------+------------|
| aa / 4 + 1.75 |       nan |      1.75 |        1.4 |
#+END:

Comparison with the spreadsheet:

| 1                  |                 1 |
| 2                  |                 2 |
| aa                 |                aa |
|                    |                   |
| 4                  |                 4 |
|--------------------+-------------------|
| [1, 2, aa, 4]      | 0.75 + aa / 4 + 1 |
| [1, 2, aa, nan, 4] |               nan |
| [1, 2, 0, 4]       |              1.75 |
| [1, 2, 0, 0, 4]    |               1.4 |
#+TBLFM: @6$1=@1..@5 :: @7$1=@1..@5;E :: @8$1=@1..@5;N :: @9$1=@1..@5;EN :: @6$2=vmean(@1..@5) :: @7$2=vmean(@1..@5);E :: @8$2=vmean(@1..@5);N :: @9$2=vmean(@1..@5);EN

* Test input errors

#+tblname: inputerrors
| A |  Q |     R |         Z | D            |
|---+----+-------+-----------+--------------|
| a |  3 |    10 | 2.3025851 | [2014-11-05] |
| a | 4+ |    20 | 2.9957323 | [2014-11-21] |
| b |  t | (88*) |    #ERROR | [2014-12-07] |
| b |  1 |    41 | 3.7135721 | [2014-12-23] |
| b |  2 |   111 | 4.7095302 | [2015-01-08] |
| c |  8 |   z ' |    #ERROR |              |
| c | 4= |     4 | 1.3862944 |              |
#+TBLFM: $4=log($3)

#+BEGIN: aggregate :table "inputerrors" :cols "A sum(Q) sum(R)"
| A | sum(Q)                             | sum(R)                               |
|---+------------------------------------+--------------------------------------|
| a | error(2, '"Expected a number") + 3 | 30                                   |
| b | t + 3                              | error(4, '"Expected a number") + 152 |
| c | error(2, '"Expected a number") + 8 | error(2, '"Syntax error") + 4        |
#+END:

#+BEGIN: aggregate :table "inputerrors" :cols "A (Q) (R)"
| A | (Q)                                 | (R)                                       |
|---+-------------------------------------+-------------------------------------------|
| a | [3, error(2, '"Expected a number")] | [10, 20]                                  |
| b | [t, 1, 2]                           | [error(4, '"Expected a number"), 41, 111] |
| c | [8, error(2, '"Expected a number")] | [error(2, '"Syntax error"), 4]            |
#+END:

* Test modifiers

#+tblname: bigprec
| A  | Q     |                   N |
|----+-------+---------------------|
| a  | 12    |                  20 |
| a  | t+1   |   3.000000000000007 |
| bb | 77    |                   4 |
| bb | 2*t   | 5.12345678987654321 |
| bb | 2*t+1 |                   6 |

#+BEGIN: aggregate :table "bigprec" :cols "A sum(Q) mean(Q);FS (Q)"
| A  | sum(Q)   | mean(Q);FS   | (Q)                |
|----+----------+--------------+--------------------|
| a  | t + 13   | t / 2 + 13:2 | [12, t + 1]        |
| bb | 4 t + 78 | 4:3 t + 26   | [77, 2 t, 2 t + 1] |
#+END:

#+BEGIN: aggregate :table "bigprec" :cols "A sum(N);p20f18 sum(N);%.5f mean(N);f15 (N);f3"
| A  |         sum(N);p20f18 | sum(N);%.5f |        mean(N);f15 | (N);f3        |
|----+-----------------------+-------------+--------------------+---------------|
| a  | 23.000000000000007000 |    23.00000 | 11.500000000000000 | [20, 3.000]   |
| bb | 15.123456789876543210 |    15.12346 |  5.041152263290000 | [4, 5.123, 6] |
#+END:
* Test chaining

Result of an aggregation can be further processed, for example with another aggregation.

** chaining 3 aggregations

#+TBLNAME: amx
| A | M | X |
|---+---+---|
| a | m | 1 |
| a | p | 2 |
| a | m | 3 |
|---+---+---|
| b | p | 4 |
| b | m | 5 |
| b | p | 6 |
| b | m | 7 |

#+TBLNAME: amsx
#+BEGIN: aggregate :table "amx" :cols "A M sum(X)"
| A | M | SX |
|---+---+----|
| a | m |  4 |
| a | p |  2 |
| b | p | 10 |
| b | m | 12 |
#+TBLFM: @1$3=SX
#+END:

#+TBLNAME: asx
#+BEGIN: aggregate :table "amsx" :cols "A sum(SX)"
| A | SSX |
|---+-----|
| a |   6 |
| b |  22 |
#+TBLFM: @1$2=SSX
#+END:

#+BEGIN: aggregate :table "asx" :cols "sum(SSX)"
| sum(SSX) |
|----------|
|       28 |
#+END:

** chaining 2 transpositions

#+TBLNAME: tamx
#+BEGIN: transpose :table "amx"
| A |   | a | a | a |   | b | b | b | b |
| M |   | m | p | m |   | p | m | p | m |
| X |   | 1 | 2 | 3 |   | 4 | 5 | 6 | 7 |
#+END:

#+BEGIN: transpose :table "tamx"
| A | M | X |
|---+---+---|
| a | m | 1 |
| a | p | 2 |
| a | m | 3 |
|---+---+---|
| b | p | 4 |
| b | m | 5 |
| b | p | 6 |
| b | m | 7 |
#+END:

The double transposition is identical to the original "amx" table,
including horizontal lines
* Test funny column names
Name of columns are not unnecessarily alphanumeric words.
They need to be single or double quoted in formulas.
In a :cond lisp formula, only double quotes work.

** Source table

#+NAME: funnynames
| first column | observed;number | computed/expected |
|--------------+-----------------+-------------------|
| a/experiment |             2.3 |               2.4 |
| a/experiment |            15.4 |              12.1 |
| a/experiment |             8.2 |               6.9 |
| b/test       |           -98.7 |               0.0 |
| b/test       |             4.5 |               3.4 |
| b/test       |             2.2 |               2.9 |
| zero         |               0 |                 0 |

#+BEGIN: aggregate :table "funnynames" :cols "\"first column\" mean('observed;number');%.3f mean('computed/expected');%.4f" :cond (and (>= (string-to-number "observed;number") 0) (not (equal "first column" "zero")))
| "first column" | mean('observed;number');%.3f | mean('computed/expected');%.4f |
|----------------+------------------------------+--------------------------------|
| a/experiment   |                        8.633 |                         7.1333 |
| b/test         |                        3.350 |                         3.1500 |
#+END:

#+BEGIN: aggregate :table "funnynames" :cols ("'first column'" "mean('observed;number');%.3f" "mean('computed/expected');%.4f") :cond "(and (>= (string-to-number \"observed;number\") 0) (not (equal \"first column\" \"zero\")))" 
| 'first column' | mean('observed;number');%.3f | mean('computed/expected');%.4f |
|----------------+------------------------------+--------------------------------|
| a/experiment   |                        8.633 |                         7.1333 |
| b/test         |                        3.350 |                         3.1500 |
#+END:

#+BEGIN: transpose :table "funnynames" :cols ("first column" "computed/expected" "observed;number")
| first column      |   | a/experiment | a/experiment | a/experiment | b/test | b/test | b/test | zero |
| computed/expected |   |          2.4 |         12.1 |          6.9 |    0.0 |    3.4 |    2.9 |    0 |
| observed;number   |   |          2.3 |         15.4 |          8.2 |  -98.7 |    4.5 |    2.2 |    0 |
#+END:

#+BEGIN: transpose :table "funnynames" :cols "'first column' 'computed/expected' 'observed;number'"
| first column      |   | a/experiment | a/experiment | a/experiment | b/test | b/test | b/test | zero |
| computed/expected |   |          2.4 |         12.1 |          6.9 |    0.0 |    3.4 |    2.9 |    0 |
| observed;number   |   |          2.3 |         15.4 |          8.2 |  -98.7 |    4.5 |    2.2 |    0 |
#+END:
