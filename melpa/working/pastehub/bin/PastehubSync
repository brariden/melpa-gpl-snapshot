#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#
# PastehubSync - PasteHub's sync program for UNIX client.
#  
#   Copyright (c) 2013-2014  Kiyoka Nishiyama  <kiyoka@sumibi.org>
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#  
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#  
#   3. Neither the name of the authors nor the names of its contributors
#      may be used to endorse or promote products derived from this
#      software without specific prior written permission.
#  
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  
#
require 'thread'
require 'pastehub'
require 'optparse'

PasteHub::Config.instance.loadClient


def setup( argv )
  if not PasteHub.setupDirectory( )
    exit( 1 )
  end

  if 0 < argv.size
    case argv[0]
    when "batch"
      return [ :ok, PasteHub.hostname( ) ]
    else
      exit( 1 )
    end
  else
    return [ :ok, PasteHub.hostname( ) ]
  end
end

def main( argv )
  params = OptionParser.getopts( argv, "v" )
  config = PasteHub::Config.instance()
  if params[ 'v' ]
    config.setVerbose( true )
  end

  ret = setup( argv )
  errorCode = ret[0]
  hostname  = ret[1]

  if not :ok == errorCode
    exit( 1 )
  end

  # save pid file
  PasteHub.savePid( Process.pid )

  # create clientSync
  clientSync = PasteHub::ClientSync.new( hostname, 1.0 )
  clientSync.display_config()

  while true
    signals = 0
    
    case RbConfig::CONFIG['host_os']
    when /mingw32|mswin|windows/i
      # Windows
    else
      # Other
      Signal.trap( :SIGUSR1 ) {
        STDERR.puts( "Info: caught USR1 signal." )
        signals += 1
      }
      Signal.trap( :SIGTERM ) {
        STDERR.puts( "Info: caught TERM signal to terminate." )
        exit( 0 )
      }
    end
    
    if hostname
      threads = []
      threads.push(Thread.new { clientSync.sync_main( ) })
      threads.push(Thread.new { clientSync.clipboard_check( ) })
      threads.each {|t| t.join}
    end
  end
end

main( ARGV )
