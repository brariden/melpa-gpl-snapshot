#+title: Org Mode 
#+begin-src
(emagician-expect-package 'org-plus-contrib)

(require 'org)
#+end_src
* Fixes																	:fix:
** Saveplace 
   From Worg, http://orgmode.org/worg/org-hacks.html#sec-2-2
#+begin_src emacs-lisp
  (defun emagician-org/fix-saveplace ()
    "Fixes a bit of brokenness with saveplace.el and org-mode"
    (when (outline-invisible-p)
      (save-excursion
        (outline-previous-visible-heading 1)
        (org-show-subtree))))
  
  (add-hook 'org-mode-hook 'emagician-org/fix-saveplace)
#+end_src
* Todo task states

At first I was using the Bernt Hansen method of nested todos for projects, but that makes the weekly review very difficult to complete. 
Now I am using dedicated project tags, which will make things much easier.

#+begin_src emacs-lisp
  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "STARTED(g)" "|" "DONE(d@/!)")
      (sequence "PROJECT(p)" "|" "FINISHED(f)")
      (sequence "WAITING(w@/!)")
      (sequence "SOMEDAY(s)" "TODO")))
  
  (setq org-todo-keyword-faces
        `(("TODO" :foreground "red" 
                  :background "red4" :weight bold :box (:line-width 2 :color "red3" :style released-button))
          ("PROJECT" :foreground "cyan" :background "cyan4" :weight bold :box (:line-width 2 :color "cyan3" :style released-button))
          ("NEXT" :foreground "DodgerBlue4" :background "DodgerBlue2" :weight bold :box (:line-width 2 :color "DodgerBlue2" :style released-button))
          ("STARTED" :foreground "blue" :background "blue4" :weight bold :box (:line-width 2 :color "blue3" :style released-button))
          ("DONE" :foreground "chartreuse" 
                  :background "chartreuse4" :weight bold :box (:line-width 2 :color "chartreuse3" :style released-button))
          ("WAITING" :foreground "orange" 
                     :background "orange4" :weight bold :box (:line-width 2 :color "orange3" :style released-button))
          ("SOMEDAY" :foreground "purple1"
                     :background "purple4" :weight bold :box (:line-width 2 :color "purple3" :style released-butotn))))
#+end_src
** Quick task selection 
#+begin_src emacs-lisp 
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

*** Specialized set-task-as-next

#+BEGIN_SRC emacs-lisp
  (defun emagician-org/todo-to-next ()
    "sets the todo state of the current headline to next."
    (interactive)
    (org-todo "NEXT")
    (org-set-tags))
  
  (emagician/define-mode-key org-mode "C-c n" emagician-org/todo-to-next)

  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

* Agenda
** Set up a better agenda

#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks t)
#+end_src

*** Main agenda
	- Week at a glance at top
	- Next items in a list, ordered by org file

#+begin_src emacs-lisp :noweb yes
  (global-set-key (kbd "C-c a") 'org-agenda)
  
  (defun emagician-agenda/daily-wisdom (&rest args)
    "Show some daily wisdom in the agenda"
      (setq buffer-read-only nil) 
      (insert (org-add-props "                                              -|-+-|-                                              \n"
                  nil 'face 'org-agenda-structure))
      (insert (concat (emagician/cookie) "\n" ))
      (insert "\n")
      (insert (make-string (window-width) org-agenda-block-separator) "\n"))
  
  (let ((refile-tasks '(tags "REFILE" 
                             ((org-agenda-overriding-header "Tasks to Refile")
                              (org-tags-match-list-sublevels))))
        (stuck-projects '(tags-todo "TODO=\"TODO\""
                                    ((org-agenda-overriding-header "Stuck Projects\n")
                                     (org-agenda-skip-function 'bh/skip-non-stuck-projects))))
        (next-tasks '(tags-todo "TODO=\"NEXT\""
                                ((org-agenda-overriding-header "Next Actions\n")
                                 (org-agenda-skip-function 'bh/skip-projects-and-habits)
                                 (org-tags-match-list-sublevels t))))
        (waiting-tasks '(tags-todo "TODO=\"WAITING\""
                                   ((org-agenda-overriding-header "Waiting on\n"))))
        (project-tasks '(tags-todo "TODO=\"TODO\""
                                   ((org-agenda-overriding-header "Projects\n")
                                    (org-agenda-skip-function 'bh/skip-non-projects))))
        (someday-maybe '(tags-todo "TODO=\"SOMEDAY\""
                                   ((org-agenda-overriding-header "Someday Maybe\n")))))
    (setq org-agenda-custom-commands
          `((" " "Agenda"
             ((agenda "" nil) 
              (emagician-agenda/daily-wisdom  "" nil)
              ,next-tasks
              ,stuck-projects
              ,waiting-tasks))
            ("y" "Wisdom... YOW!"
             ((emagician-agenda/daily-wisdom "" nil)))
            ("W" "Weekly Review"
             ((agenda "" nil)
              ,next-tasks
              ,stuck-projects
              ,waiting-tasks
              ,project-tasks
              ,someday-maybe)))))
  
#+end_src


#+begin_src emacs-lisp
(setq org-stuck-projects (quote ("" nil nil "")))
#+end_src
*** TODO figure out context
**** NEXT set up contexts in a list
**** TODO Add to tags
**** TODO Set up as agenda views, via macro if need be. 

** Org agenda files
*** Load up all the agenda files
#+begin_src emacs-lisp
  (defun emagician/start-agenda-hook ()
    "Hook for showing the agenda on startup"
    (org-agenda 'nil "a"))
  
  (add-hook 'emacs-startup-hook 'emagician/start-agenda-hook)
#+end_src
**** TODO warn user of org-agenda is empty
**** TODO [#A] Fix agenda to load itself after a set idle time. 

** Stuck projects

Using Brent Hansens concept of projects and stuck projects.  There is
also quite a number of groovy helper functions

Originally from http://doc.norang.ca/org-mode.html#Projects

#+begin_src emacs-lisp
(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun bh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun bh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun bh/skip-non-projects ()
  "Skip trees that are not projects"
  (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (bh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((and (bh/is-project-p)
                 (marker-buffer org-agenda-restrict-begin))
            nil)
           ((and (bh/is-project-p)
                 (not (marker-buffer org-agenda-restrict-begin))
                 (not (bh/is-project-subtree-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun bh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((bh/is-project-p)
        next-headline)
       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun bh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (bh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (bh/is-subproject-p)
        nil
      next-headline)))
#+end_src

#+RESULTS:
: bh/skip-non-subprojects

#+begin_src emacs-lisp
  (defun emagician-org/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))
  
  
    (defun emagician-org/is-project-p ()
      "Any task with a todo keyword subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task has-subtask))))
    
    (defun emagician-org/is-project-subtree-p ()
      "Any task with a todo keyword that is in a project subtree.
    Callers of this function already widen the buffer view."
      (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                  (point))))
        (save-excursion
          (emagician-org/find-project-task)
          (if (equal (point) task)
              nil
            t))))
    
    (defun emagician-org/is-task-p ()
      "Any task with a todo keyword and no subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task (not has-subtask)))))
    
    (defun emagician-org/is-subproject-p ()
      "Any task which is a subtask of another project"
      (let ((is-subproject)
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (while (and (not is-subproject) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq is-subproject t))))
        (and is-a-task is-subproject)))
    
    (defun emagician-org/list-sublevels-for-projects-indented ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels 'indented)
        (setq org-tags-match-list-sublevels nil))
      nil)
    
    (defun emagician-org/list-sublevels-for-projects ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels t)
        (setq org-tags-match-list-sublevels nil))
      nil)
    
    (defun emagician-org/skip-non-stuck-projects ()
      "Skip trees that are not stuck projects"
      (emagician-org/list-sublevels-for-projects-indented)
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (emagician-org/is-project-p)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (has-next ))
                (save-excursion
                  (forward-line 1)
                  (while (and (not has-next) 
                              (< (point) subtree-end) 
                              (re-search-forward "^\\*+ NEXT " subtree-end t))
                    (unless (member "WAITING" (org-get-tags-at))
                        (setq has-next t))))
                (if has-next
                    next-headline
                  nil)) ; a stuck project, has subtasks but no next task
            next-headline))))
    
    (defun emagician-org/skip-non-projects ()
      "Skip trees that are not projects"
      (emagician-org/list-sublevels-for-projects-indented)
      (if (save-excursion (emagician-org/skip-non-stuck-projects))
          (save-restriction
            (widen)
            (let ((subtree-end (save-excursion (org-end-of-subtree t))))
              (if (emagician-org/is-project-p)
                  nil
                subtree-end)))
        (org-end-of-subtree t)))
    
    (defun emagician-org/skip-project-trees-and-habits ()
      "Skip trees that are projects"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((emagician-org/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))
    
    (defun emagician-org/skip-projects-and-habits-and-single-tasks ()
      "Skip trees that are projects, tasks that are habits, single non-project tasks"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((org-is-habit-p)
            next-headline)
           ((emagician-org/is-project-p)
            next-headline)
           ((and (emagician-org/is-task-p) (not (emagician-org/is-project-subtree-p)))
            next-headline)
           (t
            nil)))))
    
    (defun emagician-org/skip-project-tasks-maybe ()
      "Show tasks related to the current restriction.
    When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
    When not restricted, skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
               (next-headline (save-excursion (or (outline-next-heading) (point-max))))
               (limit-to-project (marker-buffer org-agenda-restrict-begin)))
          (cond
           ((emagician-org/is-project-p)
            next-headline)
           ((org-is-habit-p)
            subtree-end)
           ((and (not limit-to-project)
                 (emagician-org/is-project-subtree-p))
            subtree-end)
           ((and limit-to-project
                 (emagician-org/is-project-subtree-p)
                 (member (org-get-todo-state) (list "NEXT")))
            subtree-end)
           (t
            nil)))))
    
    (defun emagician-org/skip-projects-and-habits ()
      "Skip trees that are projects and tasks that are habits"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((emagician-org/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))
    
    (defun emagician-org/skip-non-subprojects ()
      "Skip trees that are not projects"
      (let ((next-headline (save-excursion (outline-next-heading))))
        (if (emagician-org/is-subproject-p)
            nil
          next-headline)))
    
#+end_src


*** TODO Figure out a cool way to add to the agenda
(tags-todo "-CANCELLED/!"
           ((org-agenda-overriding-header "Stuck Projects")
		   (org-agenda-skip-function 'bh/skip-non-stuck-projects)))

** Agenda and the sky.
*** Sunset/Sunrise/Lunar Calendar
%%(diary-sunrise-sunset)
*** Lunar Phases
    :PROPERTIES:
	:CATEGORY: Lunar
	:END:
 %%(lunar-phases)

#+begin_src emacs-lisp
  (setq lunar-phase-names
        '("● New Moon" ; Unicode symbol: 🌑 Use full circle as fallback
          "☽ First Quarter Moon"
          "○ Full Moon" ; Unicode symbol: 🌕 Use empty circle as fallback
          "☾ Last Quarter Moon"))
  
  (org-no-warnings (defvar date))
  (defun lunar-phases ()
    "Show lunar phase in Agenda buffer."
    (require 'lunar)
    (let* ((phase-list (lunar-phase-list (nth 0 date) (nth 2 date)))
           (phase (find-if (lambda (phase) (equal (car phase) date))
                              phase-list)))
      (when phase
        (setq ret (concat (lunar-phase-name (nth 2 phase)) " "
                          (substring (nth 1 phase) 0 5))))))
#+end_src emacs-lisp

*** TODO Location aware org...?
**** NEXT someone has else done this.  Find it.
**** NEXT look at simple webservice:
	 http://freegeoip.net/static/index.html
** TODO [#A] Custom weekly review agenda that shows all the things
*** TODO List of Next actions
*** TODO List of projects
**** NEXT re-read http://doc.norang.ca/org-mode.html to see if there is an easy wasy to do this. 
*** TODO List of Waiting fors
*** TODO List of someday maybes
* Capture 										   :fixme:require:keybinding:
Thanks Brent Hansen!  [fn:1]

#+begin_src emacs-lisp 
(require 'org-capture)
;; This is kinda dumb. Sorry. 
(setq org-default-notes-file "~/org/GTD.org")

(global-set-key (kbd "C-c r") 'org-capture)
#+end_src

** Basic capture template 
#+begin_src emacs-lisp
  (setq org-capture-templates
        `(("i" "Incoming task" entry (file+headline ,org-default-notes-file "Inbox" )
           "** TODO %?    ")))
  
#+end_src
** Journal Entry 
#+begin_src emacs-lisp
    (add-to-list 'org-capture-templates
                 `("j" "Journal" entry (file+headline ,org-default-notes-file "Journal")
                   "*** %(format-time-string \"<%Y-%m-%d>\")\n    %?"))
#+end_src 
** TODO org-protocol
* Habits										   :fixme:require:
   Thanks to this: http://orgmode.org/worg/org-tutorials/tracking-habits.html

#+begin_src emacs-lisp
(require 'org-habit)

;; Shoulda used add-to-list.  Derp.
(setq org-todo-keywords (append org-todo-keywords '((sequence "HABIT(h)" "|" "DONE(d!)"))))
(setq org-todokeyword-faces (append org-todo-keyword-faces '(("HABIT" :forground "cyan" :background "cyan4" :weight bold :box (:line-width 2 :color "cyan3" :style released-button)))))
#+end_src
   
** Set up a capture template to make making Habits easy
#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates 
    `("h" "Habit" 
      entry 
      (file ,org-default-notes-file)
      ,(concat  "* HABIT %?      :habit:\n" 
                "  SCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n" 
                "  :PROPERTIES:\n" 
                "  :STYLE: habit\n"
                "  :REPEAT_TO_STATE: NEXT\n" 
                "  :END:\n")))
  (setq org-habit-completed-glyph ?✓)
  (setq org-habit-show-all-today t)
  
#+end_src
** TODO Add org-checklist so that we can automagickally reset the checkboxes on completion
*** NEXT find org-checklist... grr. 
#+begin_src emacs-lisp :tangle no
(require 'org-checklist)
#+end_src

** NEXT switch to add-to-list

* Org Babel

  Some no-brainer org babel setup.
  
** Handling of source in org files

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
(setq org-src-fontify-natively t)
#+end_src

** Inline images

Wherever possible we always want ot display inline images
#+begin_src emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'emagician/display-inline-images 'append)
  
  (setq org-startup-with-inline-images t)
  
  (defun emagician/display-inline-images ()
    (condition-case nil
        (org-display-inline-images)
      (error nil)))
#+end_src

** Gnuplot setup 

#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
(setq gnuplot-program "/usr/local/bin/gnuplot")
#+end_src

** Some standard langauges that should come out of the box
#+begin_src emacs-lisp
  ;; active Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sh . t)
     (emacs-lisp . t)
     (calc . t)
     (ditaa . t)
     (C . t)
     (gnuplot . t)))
#+end_src

** Don't confirm on non-destructive languages
#+begin_src emacs-lisp
 (defun emagician/org-confirm-babel-evaluate (lang body)
            (not (or (string= lang "ditaa")
                     (string= lang "calc"))))

 (setq org-confirm-babel-evaluate 'emagician/org-confirm-babel-evaluate)
#+end_src

** Graphing
*** TODO Plantuml
**** TODO get plantuml jar, throw in distbin or something
**** TODO make sure to add some kind of update code somwerhesrs for bins like this. even if its just a todo 
**** TODO set up  (setq org-plantuml-jar-path "~/Downloads/plantuml.jar")
*** ditaa
#+begin_src emacs-lisp
  (setq org-ditaa-jar-path (expand-file-name "ditaa.jar" (concat emagician-dir "assets/bin/ditaa/")))
  
  
  
#+end_src  
** Eschulte Magick
*** TODO browse http://eschulte.github.io/org-scraps/


* TODO Time clocking
(defun org-dblock-write:rangereport (params)
  "Display day-by-day time reports."
  (let* ((ts (plist-get params :tstart))
         (te (plist-get params :tend))
         (start (time-to-seconds
                 (apply 'encode-time (org-parse-time-string ts))))
         (end (time-to-seconds
               (apply 'encode-time (org-parse-time-string te))))
         day-numbers)
    (setq params (plist-put params :tstart nil))
    (setq params (plist-put params :end nil))
    (while (<= start end)
      (save-excursion
        (insert "\n\n"
                (format-time-string (car org-time-stamp-formats)
                                    (seconds-to-time start))
                "----------------\n")
        (org-dblock-write:clocktable
         (plist-put
          (plist-put
           params
           :tstart
           (format-time-string (car org-time-stamp-formats)
                               (seconds-to-time start)))
          :tend
          (format-time-string (car org-time-stamp-formats)
                              (seconds-to-time end))))
        (setq start (+ 86400 start))))))
* Links
** Set keybinding for links										 :keybinding:
#+begin_src emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)

(setq org-return-follows-link t)
#+end_src

** Store info pages as links
#+begin_src emacs-lisp
(require 'org-info)
#+end_src
 


* TODO org-elisp-symbol
* TODO tidy
#+begin_src emacs-lisp :tangle no
    (let ((buf (org-element-parse-buffer))) ;; convert current buffer to ELisp
      (dolist (rule cleanup-rules) ;; run cleanup transformations on the buffer
        (setq buf (funcall rule buf)))
      (delete-region (point-min) (point-max)) ;; replace the buffer contents
      (insert (org-element-interpret-data buf))) ;; with the cleaned results
#+end_src
*  Auto-complete
#+begin_src emacs-lisp 
  (add-hook 'org-mode-hook 'auto-complete-mode)
#+end_src


** Set up some custom sources
#+begin_src emacs-lisp :tangle no
  (defvar emagician/ac-candidates-org-properties
    '(("TODO" . "The TODO keyword of the entry.")
      ("TAGS" . "The tags defined directly in the headline.")
      ("ALLTAGS" . "All tags, including inherited ones.")
      ("CATEGORY" . "The category of an entry.")
      ("PRIORITY" . "The priority of the entry, a string with a single letter.")
      ("DEADLINE" . "The deadline time string, without the angular brackets.")
      ("SCHEDULED" . "The scheduling timestamp, without the angular brackets.")
      ("CLOSED" . "When was this entry closed?")
      ("TIMESTAMP" . "The first keyword-less timestamp in the entry.")
      ("TIMESTAMP_IA" . "The first inactive timestamp in the entry.")
      ("CLOCKSUM" . "The sum of CLOCK intervals in the subtree.  `org-clock-sum' must be run first to compute the values in the current buffer.")
      ("BLOCKED" . "`t' if task is currently blocked by children or siblings")
      ("ITEM" . "The content of the entry.")
      ("FILE" . "The filename the entry is located in.")
      ("END" . "End a drawer")))
  
  (defvar ac-source-org-properties
    '((candidates . (mapcar 'car emagician/ac-candidates-org-properties))
      (document   . (mapcar 'cdr emagician/ac-candidates-org-properties))
      (symbol     . prop)))
#+end_src

#+begin_src emacs-lisp :tangle no  
  (defvar emagician/ac-candidates-org-sheplus
    '((("BEGIN_CENTER" . "Center block")
       ("END_CENTER" . "End Center block")
       ("BEGIN_COMMENT" . "Text to not be exported.")
       ("END_COMMENT" . "End comment block.")
       ("BEGIN_DOCBOOK" . "Inserted into docbook export literally")
       ("END_DOCBOOK" . "")
       ("BEGIN_HTML" . "Inserted into html export literally")
       ("HTML" . "single line literal HTML for export")
       ("END_HTML" . "")
       ("BEGIN_LaTeX" . "Inserted into latex export literally")
       ("LaTeX" . "Single line literal Latex for export")
       ("END_LaTeX" . "Inserted into latex export literally")
       ("BEGIN_EXAMPLE" . "Verbatim example")
       ("END_EXAMPLE" . "End Verbatim example")
       ("BEGIN_QUOTE" . "Multi-line quote.")
       ("END_QUOTE" . "End of quote block.")
       ("BEGIN_SRC" . "Source block. ")
       ("END_SRC" . "End of source block")
       ("BEGIN_VERSE" . "keep linebreaks, but maintain formatting")
       ("END_VERSE" . "end of verse block.")
       ("CALL" . "Eval a code block.
  ,#+CALL: name[header args](args) end of header args
  ,#+CALL: double(n=4)
  ,#+CALL: double[:results output](n=4)
  ,#+CALL: double{:results html](n=4) :results html")
       ("CAPTION" . "Image or table caption")
       ("INCLUDE" . "Include a file.  
  ,#+INCLUDE: \"file.org\" :prefix1 \"  + \" :prefix: \" \" str :minlevel 3
  ,#+INCLUDE: \"~/.emacs\" src emacs-lisp
  ,#+INCLUDE: \"somefoo\" quote 
  ,#+INCLUDE: \"somefoo\" example
  ,#+INCLUDE: \"somefoo\" :lines \"5-10\"
  ,#+INCLUDE: \"somefoo\" :lines \"5-10\"
  ,#+INCLUDE: \"somefoo\" :lines \"5-10\"")
       ("INDEX" . "Add entry to index.  #+INDEX: Foo!Bar")
       ("LABEL" . "Internal cross reference, i.e. tbl:some-foo or fig:SED-hR4049")
       ("MACRO" . "#+MACRO: name     replacement text with $1 and $2 as arguments."))))
  
  (defvar emagician/ac-candidates-org-sheplushead
    '(("TITLE" . "Title of the document")
      ("ARCHIVE" . "Archive location.  #+ARCHIVE: %s_foo::")
      ("CATEGORY" . "category for document")
      ("COLUMNS" . "Set column properties, i.e. #+COLUMNS: %25FOo %TAGS %PRIORITY %TODO")
      ("CONSTANTS" . "Set constants.  i.e. #+CONTANTS: pi=3.14, tau=6.28")
      ("DRAWERS" . "List of drawer names.  #+DRAWERS: HIDDEN PROPERTIES STATE")
      ("FILETAGS" . "Tags that this file should inherit")
      ("TAGS" . "#+TAGS: foo(f) bar baz \\n new line of tags")
      ("LINK" . "Link Abbreviation,  #+LINK: foo http://example.com/")
      ("STARTUP" . "Startup options.
  noptag to turn offorg-ta-persistent-alist")
  
      ("OPTIONS" . "Change options, i.e. #+OPTIONS: H:4 toc:nil
  H:org-export-headline-levels
  num: 
  toc:org-export-with-toc
  skip:org-export-skip-text-before-1st-heading
  @:
  ::
  |:
  ^:
  -:
  F:
  todo:
  tasks:
  pri:
  Tags:
  <:
  ,*:
  TeX:
  LaTeX:
  skip:
  author:
  email:
  creator:
  timestamp:
  d:
  "
  )))
  
  (defvar emagician/ac-candidates-org-export-sheplushead
    "AUTHOR"
    "DATE"
    "DESCRIPTION"
    "EMAIL"
    "KEYWORDS"
    "LANGUAGE"
    "TEXT"
    "BIND"
    "LINK_UP"
    "LINK_HOME"
    "LATEX_HEADER"
    "EXPORT_SELECT_TAGS"
    "EXPORT_EXCLUDE_TAGS"
    "XSLT")
  
#+end_src

* Pomodoro magick
** TODO find out if test works, and turn into proper emagician code
  testing this for now

  - fix clock in bug. 

#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-timer)
(setq org-timer-default-timer 25)

(add-hook 'org-clock-in-hook '(lambda () 
      (if (not org-timer-current-timer) 
      (org-timer-set-timer '(16)))))
#+end_src

* Gamification magick
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "dist/gamify" emagician-dir)) 
  (setq gamify-org-p t)
  (require 'gamify)
  (gamify-start)
#+end_src

* TODO Refiling
  Again, thanks to Bernt Hansen.[[fn:2]]

#+begin_src emacs-lisp
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))


;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+end_src

#+begin_src emacs-lisp :tangle no
; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido nil)
(setq ido-everywhere nil)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
#+end_src

* TODO Quick key
** TODO install popup thinger 
*** NEXT check old emacs if it is there
** TODO bind to F4
** TODO write helm thing to set the current project 

* TODO do something with this coolness
(defun jonnay-org-remember-loop ()
  "Go to a special place for rapid task entry and refiling"
  (interactive)
  (org-open-link-from-string "file:~/Dropbox/org/GTD.org::* Org-Loop")
  (next-line)
  (let ((heat-death-of-the-universe '()))
	(loop until heat-death-of-the-universe
	      do (org-remember nil ?i))))

* TODO Super beautifying
** Unicode characters that will rule 
        0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   F00x	🀀	🀁	🀂	🀃	🀄	🀅	🀆	🀇	🀈	🀉	🀊	🀋	🀌	🀍	🀎	🀏
   F01x	🀐	🀑	🀒	🀓	🀔	🀕	🀖	🀗	🀘	🀙	🀚	🀛	🀜	🀝	🀞	🀟
   F02x	🀠	🀡	🀢	🀣	🀤	🀥	🀦	🀧	🀨	🀩	🀪	🀫	🀬	🀭	🀮	🀯
   F03x	🀰	🀱	🀲	🀳	🀴	🀵	🀶	🀷	🀸	🀹	🀺	🀻	🀼	🀽	🀾	🀿
   F04x	🁀	🁁	🁂	🁃	🁄	🁅	🁆	🁇	🁈	🁉	🁊	🁋	🁌	🁍	🁎	🁏
   F05x	🁐	🁑	🁒	🁓	🁔	🁕	🁖	🁗	🁘	🁙	🁚	🁛	🁜	🁝	🁞	🁟
   F06x	🁠	🁡	🁢	🁣	🁤	🁥	🁦	🁧	🁨	🁩	🁪	🁫	🁬	🁭	🁮	🁯
   F07x	🁰	🁱	🁲	🁳	🁴	🁵	🁶	🁷	🁸	🁹	🁺	🁻	🁼	🁽	🁾	🁿
   F08x	🂀	🂁	🂂	🂃	🂄	🂅	🂆	🂇	🂈	🂉	🂊	🂋	🂌	🂍	🂎	🂏
   F09x	🂐	🂑	🂒	🂓	🂔	🂕	🂖	🂗	🂘	🂙	🂚	🂛	🂜	🂝	🂞	🂟
   F0Ax	🂠	🂡	🂢	🂣	🂤	🂥	🂦	🂧	🂨	🂩	🂪	🂫	🂬	🂭	🂮	🂯
   F0Bx	🂰	🂱	🂲	🂳	🂴	🂵	🂶	🂷	🂸	🂹	🂺	🂻	🂼	🂽	🂾	🂿
   F0Cx	🃀	🃁	🃂	🃃	🃄	🃅	🃆	🃇	🃈	🃉	🃊	🃋	🃌	🃍	🃎	🃏
   F0Dx	🃐	🃑	🃒	🃓	🃔	🃕	🃖	🃗	🃘	🃙	🃚	🃛	🃜	🃝	🃞	🃟
   F0Ex	🃠	🃡	🃢	🃣	🃤	🃥	🃦	🃧	🃨	🃩	🃪	🃫	🃬	🃭	🃮	🃯
   F0Fx	🃰	🃱	🃲	🃳	🃴	🃵	🃶	🃷	🃸	🃹	🃺	🃻	🃼	🃽	🃾	🃿
-----------------------------------------------------------------------
        0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   F10x	🄀	🄁	🄂	🄃	🄄	🄅	🄆	🄇	🄈	🄉	🄊	🄋	🄌	🄍	🄎	🄏
   F11x	🄐	🄑	🄒	🄓	🄔	🄕	🄖	🄗	🄘	🄙	🄚	🄛	🄜	🄝	🄞	🄟
   F12x	🄠	🄡	🄢	🄣	🄤	🄥	🄦	🄧	🄨	🄩	🄪	🄫	🄬	🄭	🄮	🄯
   F13x	🄰	🄱	🄲	🄳	🄴	🄵	🄶	🄷	🄸	🄹	🄺	🄻	🄼	🄽	🄾	🄿
   F14x	🅀	🅁	🅂	🅃	🅄	🅅	🅆	🅇	🅈	🅉	🅊	🅋	🅌	🅍	🅎	🅏
   F15x	🅐	🅑	🅒	🅓	🅔	🅕	🅖	🅗	🅘	🅙	🅚	🅛	🅜	🅝	🅞	🅟
   F16x	🅠	🅡	🅢	🅣	🅤	🅥	🅦	🅧	🅨	🅩	🅪	🅫	🅬	🅭	🅮	🅯
   F17x	🅰	🅱	🅲	🅳	🅴	🅵	🅶	🅷	🅸	🅹	🅺	🅻	🅼	🅽	🅾	🅿
   F18x	🆀	🆁	🆂	🆃	🆄	🆅	🆆	🆇	🆈	🆉	🆊	🆋	🆌	🆍	🆎	🆏
   F19x	🆐	🆑	🆒	🆓	🆔	🆕	🆖	🆗	🆘	🆙	🆚	🆛	🆜	🆝	🆞	🆟
   F1Ax	🆠	🆡	🆢	🆣	🆤	🆥	🆦	🆧	🆨	🆩	🆪	🆫	🆬	🆭	🆮	🆯
   F1Bx	🆰	🆱	🆲	🆳	🆴	🆵	🆶	🆷	🆸	🆹	🆺	🆻	🆼	🆽	🆾	🆿
   F1Cx	🇀	🇁	🇂	🇃	🇄	🇅	🇆	🇇	🇈	🇉	🇊	🇋	🇌	🇍	🇎	🇏
   F1Dx	🇐	🇑	🇒	🇓	🇔	🇕	🇖	🇗	🇘	🇙	🇚	🇛	🇜	🇝	🇞	🇟
   F1Ex	🇠	🇡	🇢	🇣	🇤	🇥	🇦	🇧	🇨	🇩	🇪	🇫	🇬	🇭	🇮	🇯
   F1Fx	🇰	🇱	🇲	🇳	🇴	🇵	🇶	🇷	🇸	🇹	🇺	🇻	🇼	🇽	🇾	🇿
-----------------------------------------------------------------------
        0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   F20x	🈀	🈁	🈂	🈃	🈄	🈅	🈆	🈇	🈈	🈉	🈊	🈋	🈌	🈍	🈎	🈏
   F21x	🈐	🈑	🈒	🈓	🈔	🈕	🈖	🈗	🈘	🈙	🈚	🈛	🈜	🈝	🈞	🈟
   F22x	🈠	🈡	🈢	🈣	🈤	🈥	🈦	🈧	🈨	🈩	🈪	🈫	🈬	🈭	🈮	🈯
   F23x	🈰	🈱	🈲	🈳	🈴	🈵	🈶	🈷	🈸	🈹	🈺	🈻	🈼	🈽	🈾	🈿
   F24x	🉀	🉁	🉂	🉃	🉄	🉅	🉆	🉇	🉈	🉉	🉊	🉋	🉌	🉍	🉎	🉏
   F25x	🉐	🉑	🉒	🉓	🉔	🉕	🉖	🉗	🉘	🉙	🉚	🉛	🉜	🉝	🉞	🉟
   F26x	🉠	🉡	🉢	🉣	🉤	🉥	🉦	🉧	🉨	🉩	🉪	🉫	🉬	🉭	🉮	🉯
   F27x	🉰	🉱	🉲	🉳	🉴	🉵	🉶	🉷	🉸	🉹	🉺	🉻	🉼	🉽	🉾	🉿
   F28x	🊀	🊁	🊂	🊃	🊄	🊅	🊆	🊇	🊈	🊉	🊊	🊋	🊌	🊍	🊎	🊏
   F29x	🊐	🊑	🊒	🊓	🊔	🊕	🊖	🊗	🊘	🊙	🊚	🊛	🊜	🊝	🊞	🊟
   F2Ax	🊠	🊡	🊢	🊣	🊤	🊥	🊦	🊧	🊨	🊩	🊪	🊫	🊬	🊭	🊮	🊯
   F2Bx	🊰	🊱	🊲	🊳	🊴	🊵	🊶	🊷	🊸	🊹	🊺	🊻	🊼	🊽	🊾	🊿
   F2Cx	🋀	🋁	🋂	🋃	🋄	🋅	🋆	🋇	🋈	🋉	🋊	🋋	🋌	🋍	🋎	🋏
   F2Dx	🋐	🋑	🋒	🋓	🋔	🋕	🋖	🋗	🋘	🋙	🋚	🋛	🋜	🋝	🋞	🋟
   F2Ex	🋠	🋡	🋢	🋣	🋤	🋥	🋦	🋧	🋨	🋩	🋪	🋫	🋬	🋭	🋮	🋯
   F2Fx	🋰	🋱	🋲	🋳	🋴	🋵	🋶	🋷	🋸	🋹	🋺	🋻	🋼	🋽	🋾	🋿
-----------------------------------------------------------------------
        0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   F30x	🌀	🌁	🌂	🌃	🌄	🌅	🌆	🌇	🌈	🌉	🌊	🌋	🌌	🌍	🌎	🌏
   F31x	🌐	🌑	🌒	🌓	🌔	🌕	🌖	🌗	🌘	🌙	🌚	🌛	🌜	🌝	🌞	🌟
   F32x	🌠	🌡	🌢	🌣	🌤	🌥	🌦	🌧	🌨	🌩	🌪	🌫	🌬	🌭	🌮	🌯
   F33x	🌰	🌱	🌲	🌳	🌴	🌵	🌶	🌷	🌸	🌹	🌺	🌻	🌼	🌽	🌾	🌿
   F34x	🍀	🍁	🍂	🍃	🍄	🍅	🍆	🍇	🍈	🍉	🍊	🍋	🍌	🍍	🍎	🍏
   F35x	🍐	🍑	🍒	🍓	🍔	🍕	🍖	🍗	🍘	🍙	🍚	🍛	🍜	🍝	🍞	🍟
   F36x	🍠	🍡	🍢	🍣	🍤	🍥	🍦	🍧	🍨	🍩	🍪	🍫	🍬	🍭	🍮	🍯
   F37x	🍰	🍱	🍲	🍳	🍴	🍵	🍶	🍷	🍸	🍹	🍺	🍻	🍼	🍽	🍾	🍿
   F38x	🎀	🎁	🎂	🎃	🎄	🎅	🎆	🎇	🎈	🎉	🎊	🎋	🎌	🎍	🎎	🎏
   F39x	🎐	🎑	🎒	🎓	🎔	🎕	🎖	🎗	🎘	🎙	🎚	🎛	🎜	🎝	🎞	🎟
   F3Ax	🎠	🎡	🎢	🎣	🎤	🎥	🎦	🎧	🎨	🎩	🎪	🎫	🎬	🎭	🎮	🎯
   F3Bx	🎰	🎱	🎲	🎳	🎴	🎵	🎶	🎷	🎸	🎹	🎺	🎻	🎼	🎽	🎾	🎿
   F3Cx	🏀	🏁	🏂	🏃	🏄	🏅	🏆	🏇	🏈	🏉	🏊	🏋	🏌	🏍	🏎	🏏
   F3Dx	🏐	🏑	🏒	🏓	🏔	🏕	🏖	🏗	🏘	🏙	🏚	🏛	🏜	🏝	🏞	🏟
   F3Ex	🏠	🏡	🏢	🏣	🏤	🏥	🏦	🏧	🏨	🏩	🏪	🏫	🏬	🏭	🏮	🏯
   F3Fx	🏰	🏱	🏲	🏳	🏴	🏵	🏶	🏷	🏸	🏹	🏺	🏻	🏼	🏽	🏾	🏿
-----------------------------------------------------------------------
        0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   F40x	🐀	🐁	🐂	🐃	🐄	🐅	🐆	🐇	🐈	🐉	🐊	🐋	🐌	🐍	🐎	🐏
   F41x	🐐	🐑	🐒	🐓	🐔	🐕	🐖	🐗	🐘	🐙	🐚	🐛	🐜	🐝	🐞	🐟
   F42x	🐠	🐡	🐢	🐣	🐤	🐥	🐦	🐧	🐨	🐩	🐪	🐫	🐬	🐭	🐮	🐯
   F43x	🐰	🐱	🐲	🐳	🐴	🐵	🐶	🐷	🐸	🐹	🐺	🐻	🐼	🐽	🐾	🐿
   F44x	👀	👁	👂	👃	👄	👅	👆	👇	👈	👉	👊	👋	👌	👍	👎	👏
   F45x	👐	👑	👒	👓	👔	👕	👖	👗	👘	👙	👚	👛	👜	👝	👞	👟
   F46x	👠	👡	👢	👣	👤	👥	👦	👧	👨	👩	👪	👫	👬	👭	👮	👯
   F47x	👰	👱	👲	👳	👴	👵	👶	👷	👸	👹	👺	👻	👼	👽	👾	👿
   F48x	💀	💁	💂	💃	💄	💅	💆	💇	💈	💉	💊	💋	💌	💍	💎	💏
   F49x	💐	💑	💒	💓	💔	💕	💖	💗	💘	💙	💚	💛	💜	💝	💞	💟
   F4Ax	💠	💡	💢	💣	💤	💥	💦	💧	💨	💩	💪	💫	💬	💭	💮	💯
   F4Bx	💰	💱	💲	💳	💴	💵	💶	💷	💸	💹	💺	💻	💼	💽	💾	💿
   F4Cx	📀	📁	📂	📃	📄	📅	📆	📇	📈	📉	📊	📋	📌	📍	📎	📏
   F4Dx	📐	📑	📒	📓	📔	📕	📖	📗	📘	📙	📚	📛	📜	📝	📞	📟
   F4Ex	📠	📡	📢	📣	📤	📥	📦	📧	📨	📩	📪	📫	📬	📭	📮	📯
   F4Fx	📰	📱	📲	📳	📴	📵	📶	📷	📸	📹	📺	📻	📼	📽	📾	📿
-----------------------------------------------------------------------
        0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   F50x	🔀	🔁	🔂	🔃	🔄	🔅	🔆	🔇	🔈	🔉	🔊	🔋	🔌	🔍	🔎	🔏
   F51x	🔐	🔑	🔒	🔓	🔔	🔕	🔖	🔗	🔘	🔙	🔚	🔛	🔜	🔝	🔞	🔟
   F52x	🔠	🔡	🔢	🔣	🔤	🔥	🔦	🔧	🔨	🔩	🔪	🔫	🔬	🔭	🔮	🔯
   F53x	🔰	🔱	🔲	🔳	🔴	🔵	🔶	🔷	🔸	🔹	🔺	🔻	🔼	🔽	🔾	🔿
   F54x	🕀	🕁	🕂	🕃	🕄	🕅	🕆	🕇	🕈	🕉	🕊	🕋	🕌	🕍	🕎	🕏
   F55x	🕐	🕑	🕒	🕓	🕔	🕕	🕖	🕗	🕘	🕙	🕚	🕛	🕜	🕝	🕞	🕟
   F56x	🕠	🕡	🕢	🕣	🕤	🕥	🕦	🕧	🕨	🕩	🕪	🕫	🕬	🕭	🕮	🕯
   F57x	🕰	🕱	🕲	🕳	🕴	🕵	🕶	🕷	🕸	🕹	🕺	🕻	🕼	🕽	🕾	🕿
   F58x	🖀	🖁	🖂	🖃	🖄	🖅	🖆	🖇	🖈	🖉	🖊	🖋	🖌	🖍	🖎	🖏
   F59x	🖐	🖑	🖒	🖓	🖔	🖕	🖖	🖗	🖘	🖙	🖚	🖛	🖜	🖝	🖞	🖟
   F5Ax	🖠	🖡	🖢	🖣	🖤	🖥	🖦	🖧	🖨	🖩	🖪	🖫	🖬	🖭	🖮	🖯
   F5Bx	🖰	🖱	🖲	🖳	🖴	🖵	🖶	🖷	🖸	🖹	🖺	🖻	🖼	🖽	🖾	🖿
   F5Cx	🗀	🗁	🗂	🗃	🗄	🗅	🗆	🗇	🗈	🗉	🗊	🗋	🗌	🗍	🗎	🗏
   F5Dx	🗐	🗑	🗒	🗓	🗔	🗕	🗖	🗗	🗘	🗙	🗚	🗛	🗜	🗝	🗞	🗟
   F5Ex	🗠	🗡	🗢	🗣	🗤	🗥	🗦	🗧	🗨	🗩	🗪	🗫	🗬	🗭	🗮	🗯
   F5Fx	🗰	🗱	🗲	🗳	🗴	🗵	🗶	🗷	🗸	🗹	🗺	🗻	🗼	🗽	🗾	🗿
-----------------------------------------------------------------------
        0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   F60x	😀	😁	😂	😃	😄	😅	😆	😇	😈	😉	😊	😋	😌	😍	😎	😏
   F61x	😐	😑	😒	😓	😔	😕	😖	😗	😘	😙	😚	😛	😜	😝	😞	😟
   F62x	😠	😡	😢	😣	😤	😥	😦	😧	😨	😩	😪	😫	😬	😭	😮	😯
   F63x	😰	😱	😲	😳	😴	😵	😶	😷	😸	😹	😺	😻	😼	😽	😾	😿
   F64x	🙀	🙁	🙂	🙃	🙄	🙅	🙆	🙇	🙈	🙉	🙊	🙋	🙌	🙍	🙎	🙏
   F65x	🙐	🙑	🙒	🙓	🙔	🙕	🙖	🙗	🙘	🙙	🙚	🙛	🙜	🙝	🙞	🙟
   F66x	🙠	🙡	🙢	🙣	🙤	🙥	🙦	🙧	🙨	🙩	🙪	🙫	🙬	🙭	🙮	🙯
   F67x	🙰	🙱	🙲	🙳	🙴	🙵	🙶	🙷	🙸	🙹	🙺	🙻	🙼	🙽	🙾	🙿
   F68x	🚀	🚁	🚂	🚃	🚄	🚅	🚆	🚇	🚈	🚉	🚊	🚋	🚌	🚍	🚎	🚏
   F69x	🚐	🚑	🚒	🚓	🚔	🚕	🚖	🚗	🚘	🚙	🚚	🚛	🚜	🚝	🚞	🚟
   F6Ax	🚠	🚡	🚢	🚣	🚤	🚥	🚦	🚧	🚨	🚩	🚪	🚫	🚬	🚭	🚮	🚯
   F6Bx	🚰	🚱	🚲	🚳	🚴	🚵	🚶	🚷	🚸	🚹	🚺	🚻	🚼	🚽	🚾	🚿
   F6Cx	🛀	🛁	🛂	🛃	🛄	🛅	🛆	🛇	🛈	🛉	🛊	🛋	🛌	🛍	🛎	🛏
   F6Dx	🛐	🛑	🛒	🛓	🛔	🛕	🛖	🛗	🛘	🛙	🛚	🛛	🛜	🛝	🛞	🛟
   F6Ex	🛠	🛡	🛢	🛣	🛤	🛥	🛦	🛧	🛨	🛩	🛪	🛫	🛬	🛭	🛮	🛯
   F6Fx	🛰	🛱	🛲	🛳	🛴	🛵	🛶	🛷	🛸	🛹	🛺	🛻	🛼	🛽	🛾	🛿
-----------------------------------------------------------------------
        0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   F70x	🜀	🜁	🜂	🜃	🜄	🜅	🜆	🜇	🜈	🜉	🜊	🜋	🜌	🜍	🜎	🜏
   F71x	🜐	🜑	🜒	🜓	🜔	🜕	🜖	🜗	🜘	🜙	🜚	🜛	🜜	🜝	🜞	🜟
   F72x	🜠	🜡	🜢	🜣	🜤	🜥	🜦	🜧	🜨	🜩	🜪	🜫	🜬	🜭	🜮	🜯
   F73x	🜰	🜱	🜲	🜳	🜴	🜵	🜶	🜷	🜸	🜹	🜺	🜻	🜼	🜽	🜾	🜿
   F74x	🝀	🝁	🝂	🝃	🝄	🝅	🝆	🝇	🝈	🝉	🝊	🝋	🝌	🝍	🝎	🝏
   F75x	🝐	🝑	🝒	🝓	🝔	🝕	🝖	🝗	🝘	🝙	🝚	🝛	🝜	🝝	🝞	🝟
   F76x	🝠	🝡	🝢	🝣	🝤	🝥	🝦	🝧	🝨	🝩	🝪	🝫	🝬	🝭	🝮	🝯
   F77x	🝰	🝱	🝲	🝳	🝴	🝵	🝶	🝷	🝸	🝹	🝺	🝻	🝼	🝽	🝾	🝿
   F78x	🞀	🞁	🞂	🞃	🞄	🞅	🞆	🞇	🞈	🞉	🞊	🞋	🞌	🞍	🞎	🞏
   F79x	🞐	🞑	🞒	🞓	🞔	🞕	🞖	🞗	🞘	🞙	🞚	🞛	🞜	🞝	🞞	🞟
   F7Ax	🞠	🞡	🞢	🞣	🞤	🞥	🞦	🞧	🞨	🞩	🞪	🞫	🞬	🞭	🞮	🞯
   F7Bx	🞰	🞱	🞲	🞳	🞴	🞵	🞶	🞷	🞸	🞹	🞺	🞻	🞼	🞽	🞾	🞿
   F7Cx	🟀	🟁	🟂	🟃	🟄	🟅	🟆	🟇	🟈	🟉	🟊	🟋	🟌	🟍	🟎	🟏
   F7Dx	🟐	🟑	🟒	🟓	🟔	🟕	🟖	🟗	🟘	🟙	🟚	🟛	🟜	🟝	🟞	🟟
   F7Ex	🟠	🟡	🟢	🟣	🟤	🟥	🟦	🟧	🟨	🟩	🟪	🟫	🟬	🟭	🟮	🟯
   F7Fx	🟰	🟱	🟲	🟳	🟴	🟵	🟶	🟷	🟸	🟹	🟺	🟻	🟼	🟽	🟾	🟿
-----------------------------------------------------------------------
        0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
   F80x	🠀	🠁	🠂	🠃	🠄	🠅	🠆	🠇	🠈	🠉	🠊	🠋	🠌	🠍	🠎	🠏
   F81x	🠐	🠑	🠒	🠓	🠔	🠕	🠖	🠗	🠘	🠙	🠚	🠛	🠜	🠝	🠞	🠟
   F82x	🠠	🠡	🠢	🠣	🠤	🠥	🠦	🠧	🠨	🠩	🠪	🠫	🠬	🠭	🠮	🠯
   F83x	🠰	🠱	🠲	🠳	🠴	🠵	🠶	🠷	🠸	🠹	🠺	🠻	🠼	🠽	🠾	🠿
   F84x	🡀	🡁	🡂	🡃	🡄	🡅	🡆	🡇	🡈	🡉	🡊	🡋	🡌	🡍	🡎	🡏
   F85x	🡐	🡑	🡒	🡓	🡔	🡕	🡖	🡗	🡘	🡙	🡚	🡛	🡜	🡝	🡞	🡟
   F86x	🡠	🡡	🡢	🡣	🡤	🡥	🡦	🡧	🡨	🡩	🡪	🡫	🡬	🡭	🡮	🡯
   F87x	🡰	🡱	🡲	🡳	🡴	🡵	🡶	🡷	🡸	🡹	🡺	🡻	🡼	🡽	🡾	🡿
   F88x	🢀	🢁	🢂	🢃	🢄	🢅	🢆	🢇	🢈	🢉	🢊	🢋	🢌	🢍	🢎	🢏
   F89x	🢐	🢑	🢒	🢓	🢔	🢕	🢖	🢗	🢘	🢙	🢚	🢛	🢜	🢝	🢞	🢟
   F8Ax	🢠	🢡	🢢	🢣	🢤	🢥	🢦	🢧	🢨	🢩	🢪	🢫	🢬	🢭	🢮	🢯
   F8Bx	🢰	🢱	🢲	🢳	🢴	🢵	🢶	🢷	🢸	🢹	🢺	🢻	🢼	🢽	🢾	🢿
   F8Cx	🣀	🣁	🣂	🣃	🣄	🣅	🣆	🣇	🣈	🣉	🣊	🣋	🣌	🣍	🣎	🣏
   F8Dx	🣐	🣑	🣒	🣓	🣔	🣕	🣖	🣗	🣘	🣙	🣚	🣛	🣜	🣝	🣞	🣟
   F8Ex	🣠	🣡	🣢	🣣	🣤	🣥	🣦	🣧	🣨	🣩	🣪	🣫	🣬	🣭	🣮	🣯
   F8Fx	🣰	🣱	🣲	🣳	🣴	🣵	🣶	🣷	🣸	🣹	🣺	🣻	🣼	🣽	🣾	🣿
-----------------------------------------------------------------------



Miscellaneous Symbols[1]
Unicode.org chart (PDF)
 	0	1	2	3	4	5	6	7	8	9	A	B	C	D	E	F
U+260x	☀	☁	☂	☃	☄	★	☆	☇	☈	☉	☊	☋	☌	☍	☎	☏
U+261x	☐	☑	☒	☓	☔	☕	☖	☗	☘	☙	☚	☛	☜	☝	☞	☟
U+262x	☠	☡	☢	☣	☤	☥	☦	☧	☨	☩	☪	☫	☬	☭	☮	☯
U+263x	☰	☱	☲	☳	☴	☵	☶	☷	☸	☹	☺	☻	☼	☽	☾	☿
U+264x	♀	♁	♂	♃	♄	♅	♆	♇	♈	♉	♊	♋	♌	♍	♎	♏
U+265x	♐	♑	♒	♓	♔	♕	♖	♗	♘	♙	♚	♛	♜	♝	♞	♟
U+266x	♠	♡	♢	♣	♤	♥	♦	♧	♨	♩	♪	♫	♬	♭	♮	♯
U+267x	♰	♱	♲	♳	♴	♵	♶	♷	♸	♹	♺	♻	♼	♽	♾	♿
U+268x	⚀	⚁	⚂	⚃	⚄	⚅	⚆	⚇	⚈	⚉	⚊	⚋	⚌	⚍	⚎	⚏
U+269x	⚐	⚑	⚒	⚓	⚔	⚕	⚖	⚗	⚘	⚙	⚚	⚛	⚜	⚝	⚞	⚟
U+26Ax	⚠	⚡	⚢	⚣	⚤	⚥	⚦	⚧	⚨	⚩	⚪	⚫	⚬	⚭	⚮	⚯
U+26Bx	⚰	⚱	⚲	⚳	⚴	⚵	⚶	⚷	⚸	⚹	⚺	⚻	⚼	⚽	⚾	⚿
U+26Cx	⛀	⛁	⛂	⛃	⛄	⛅	⛆	⛇	⛈	⛉	⛊	⛋	⛌	⛍	⛎	⛏
U+26Dx	⛐	⛑	⛒	⛓	⛔	⛕	⛖	⛗	⛘	⛙	⛚	⛛	⛜	⛝	⛞	⛟
U+26Ex	⛠	⛡	⛢	⛣	⛤	⛥	⛦	⛧	⛨	⛩	⛪	⛫	⛬	⛭	⛮	⛯
U+26Fx	⛰	⛱	⛲	⛳	⛴	⛵	⛶	⛷	⛸	⛹	⛺	⛻	⛼	⛽	⛾	⛿
Notes
1.^ As of Unicode version 6.1

Miscellaneous Symbols And Pictographs[1]
Unicode chart (PDF)
 	0	1	2	3	4	5	6	7	8	9	A	B	C	D	E	F
U+1F30x	🌀	🌁	🌂	🌃	🌄	🌅	🌆	🌇	🌈	🌉	🌊	🌋	🌌	🌍	🌎	🌏
U+1F31x	🌐	🌑	🌒	🌓	🌔	🌕	🌖	🌗	🌘	🌙	🌚	🌛	🌜	🌝	🌞	🌟
U+1F32x	🌠															
U+1F33x	🌰	🌱	🌲	🌳	🌴	🌵		🌷	🌸	🌹	🌺	🌻	🌼	🌽	🌾	🌿
U+1F34x	🍀	🍁	🍂	🍃	🍄	🍅	🍆	🍇	🍈	🍉	🍊	🍋	🍌	🍍	🍎	🍏
U+1F35x	🍐	🍑	🍒	🍓	🍔	🍕	🍖	🍗	🍘	🍙	🍚	🍛	🍜	🍝	🍞	🍟
U+1F36x	🍠	🍡	🍢	🍣	🍤	🍥	🍦	🍧	🍨	🍩	🍪	🍫	🍬	🍭	🍮	🍯
U+1F37x	🍰	🍱	🍲	🍳	🍴	🍵	🍶	🍷	🍸	🍹	🍺	🍻	🍼			
U+1F38x	🎀	🎁	🎂	🎃	🎄	🎅	🎆	🎇	🎈	🎉	🎊	🎋	🎌	🎍	🎎	🎏
U+1F39x	🎐	🎑	🎒	🎓												
U+1F3Ax	🎠	🎡	🎢	🎣	🎤	🎥	🎦	🎧	🎨	🎩	🎪	🎫	🎬	🎭	🎮	🎯
U+1F3Bx	🎰	🎱	🎲	🎳	🎴	🎵	🎶	🎷	🎸	🎹	🎺	🎻	🎼	🎽	🎾	🎿
U+1F3Cx	🏀	🏁	🏂	🏃	🏄		🏆	🏇	🏈	🏉	🏊					
U+1F3Dx																
U+1F3Ex	🏠	🏡	🏢	🏣	🏤	🏥	🏦	🏧	🏨	🏩	🏪	🏫	🏬	🏭	🏮	🏯
U+1F3Fx	🏰															
U+1F40x	🐀	🐁	🐂	🐃	🐄	🐅	🐆	🐇	🐈	🐉	🐊	🐋	🐌	🐍	🐎	🐏
U+1F41x	🐐	🐑	🐒	🐓	🐔	🐕	🐖	🐗	🐘	🐙	🐚	🐛	🐜	🐝	🐞	🐟
U+1F42x	🐠	🐡	🐢	🐣	🐤	🐥	🐦	🐧	🐨	🐩	🐪	🐫	🐬	🐭	🐮	🐯
U+1F43x	🐰	🐱	🐲	🐳	🐴	🐵	🐶	🐷	🐸	🐹	🐺	🐻	🐼	🐽	🐾	
U+1F44x	👀		👂	👃	👄	👅	👆	👇	👈	👉	👊	👋	👌	👍	👎	👏
U+1F45x	👐	👑	👒	👓	👔	👕	👖	👗	👘	👙	👚	👛	👜	👝	👞	👟
U+1F46x	👠	👡	👢	👣	👤	👥	👦	👧	👨	👩	👪	👫	👬	👭	👮	👯
U+1F47x	👰	👱	👲	👳	👴	👵	👶	👷	👸	👹	👺	👻	👼	👽	👾	👿
U+1F48x	💀	💁	💂	💃	💄	💅	💆	💇	💈	💉	💊	💋	💌	💍	💎	💏
U+1F49x	💐	💑	💒	💓	💔	💕	💖	💗	💘	💙	💚	💛	💜	💝	💞	💟
U+1F4Ax	💠	💡	💢	💣	💤	💥	💦	💧	💨	💩	💪	💫	💬	💭	💮	💯
U+1F4Bx	💰	💱	💲	💳	💴	💵	💶	💷	💸	💹	💺	💻	💼	💽	💾	💿
U+1F4Cx	📀	📁	📂	📃	📄	📅	📆	📇	📈	📉	📊	📋	📌	📍	📎	📏
U+1F4Dx	📐	📑	📒	📓	📔	📕	📖	📗	📘	📙	📚	📛	📜	📝	📞	📟
U+1F4Ex	📠	📡	📢	📣	📤	📥	📦	📧	📨	📩	📪	📫	📬	📭	📮	📯
U+1F4Fx	📰	📱	📲	📳	📴	📵	📶	📷		📹	📺	📻	📼			
U+1F50x	🔀	🔁	🔂	🔃	🔄	🔅	🔆	🔇	🔈	🔉	🔊	🔋	🔌	🔍	🔎	🔏
U+1F51x	🔐	🔑	🔒	🔓	🔔	🔕	🔖	🔗	🔘	🔙	🔚	🔛	🔜	🔝	🔞	🔟
U+1F52x	🔠	🔡	🔢	🔣	🔤	🔥	🔦	🔧	🔨	🔩	🔪	🔫	🔬	🔭	🔮	🔯
U+1F53x	🔰	🔱	🔲	🔳	🔴	🔵	🔶	🔷	🔸	🔹	🔺	🔻	🔼	🔽		
U+1F54x	🕀	🕁	🕂	🕃												
U+1F55x	🕐	🕑	🕒	🕓	🕔	🕕	🕖	🕗	🕘	🕙	🕚	🕛	🕜	🕝	🕞	🕟
U+1F56x	🕠	🕡	🕢	🕣	🕤	🕥	🕦	🕧								
U+1F57x																
U+1F58x																
U+1F59x																
U+1F5Ax																
U+1F5Bx																
U+1F5Cx																
U+1F5Dx																
U+1F5Ex																
U+1F5Fx												🗻	🗼	🗽	🗾	🗿
Notes
1. ^ As of Unicode version 6.1
Emoticons[1]
Unicode.org chart (PDF)
 	0	1	2	3	4	5	6	7	8	9	A	B	C	D	E	F
U+1F60x	😀	😁	😂	😃	😄	😅	😆	😇	😈	😉	😊	😋	😌	😍	😎	😏
U+1F61x	😐	😑	😒	😓	😔	😕	😖	😗	😘	😙	😚	😛	😜	😝	😞	😟
U+1F62x	😠	😡	😢	😣	😤	😥	😦	😧	😨	😩	😪	😫	😬	😭	😮	😯
U+1F63x	😰	😱	😲	😳	😴	😵	😶	😷	😸	😹	😺	😻	😼	😽	😾	😿
U+1F64x	🙀					🙅	🙆	🙇	🙈	🙉	🙊	🙋	🙌	🙍	🙎	🙏
Notes
1.^ As of Unicode version 6.1
Transport and Map Symbols[1]
Unicode.org chart (PDF)
 	0	1	2	3	4	5	6	7	8	9	A	B	C	D	E	F
U+1F68x	🚀	🚁	🚂	🚃	🚄	🚅	🚆	🚇	🚈	🚉	🚊	🚋	🚌	🚍	🚎	🚏
U+1F69x	🚐	🚑	🚒	🚓	🚔	🚕	🚖	🚗	🚘	🚙	🚚	🚛	🚜	🚝	🚞	🚟
U+1F6Ax	🚠	🚡	🚢	🚣	🚤	🚥	🚦	🚧	🚨	🚩	🚪	🚫	🚬	🚭	🚮	🚯
U+1F6Bx	🚰	🚱	🚲	🚳	🚴	🚵	🚶	🚷	🚸	🚹	🚺	🚻	🚼	🚽	🚾	🚿
U+1F6Cx	🛀	🛁	🛂	🛃	🛄	🛅										
U+1F6Dx																
U+1F6Ex																
U+1F6Fx																
Notes


# 0 1 2 3 4 5 6 7 8 9 ⃣ 
🇦 🇧 🇨 🇩 🇪 🇫 🇬 🇭 🇮 🇯 🇰 🇱 🇲 🇳 🇴 🇵 🇶 🇷 🇸 🇹 🇺 🇻 🇼 🇽 🇾 🇿
#⃣0⃣1⃣2⃣3⃣4⃣5⃣6⃣7⃣8⃣9⃣©®
‼⁉
™ℹ
↔↕↖↗↘↙↩↪
⌚⌛
⏩⏪⏫⏬⏰⏳
Ⓜ
▪▫▶◀◻◼◽◾
☀☁☎☑☔☕☝☺♈♉♊♋♌♍♎♏♐♑♒♓♠♣♥♦♨♻♿⚓⚠⚡⚪⚫⚽⚾⛄⛅⛎⛔⛪⛲⛳⛵⛺⛽
✂✅✈✉✊✋✌✏✒✔✖✨✳✴❄❇❌❎❓❔❕❗❤➕➖➗➡➰➿
⤴⤵
⬅⬆⬇⬛⬜⭐⭕
〰〽
㊗㊙

🀄🃏🅰🅱🅾🅿🆎🆑🆒🆓🆔🆕🆖🆗🆘🆙🆚
🇨🇳🇩🇪🇪🇸🇫🇷🇬🇧🇮🇹🇯🇵🇰🇷🇷🇺🇺🇸
🈁🈂🈚🈯🈲🈳🈴🈵🈶🈷🈸🈹🈺🉐🉑
🌀🌁🌂🌃🌄🌅🌆🌇🌈🌉🌊🌋🌌🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌝🌞🌟🌠
🌰🌱🌲🌳🌴🌵🌷🌸🌹🌺🌻🌼🌽🌾🌿🍀🍁🍂🍃🍄🍅🍆🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓🍔🍕🍖🍗🍘🍙🍚🍛🍜🍝🍞🍟
🍠🍡🍢🍣🍤🍥🍦🍧🍨🍩🍪🍫🍬🍭🍮🍯🍰🍱🍲🍳🍴🍵🍶🍷🍸🍹🍺🍻🍼🎀🎁🎂🎃🎄🎅🎆🎇🎈🎉🎊🎋🎌🎍🎎🎏🎐🎑🎒🎓
🎠🎡🎢🎣🎤🎥🎦🎧🎨🎩🎪🎫🎬🎭🎮🎯🎰🎱🎲🎳🎴🎵🎶🎷🎸🎹🎺🎻🎼🎽🎾🎿🏀🏁🏂🏃🏄🏅🏆🏇🏈🏉🏊
🏠🏡🏢🏣🏤🏥🏦🏧🏨🏩🏪🏫🏬🏭🏮🏯🏰🐀🐁🐂🐃🐄🐅🐆🐇🐈🐉🐊🐋🐌🐍🐎🐏🐐🐑🐒🐓🐔🐕🐖🐗🐘🐙🐚🐛🐜🐝🐞🐟
🐠🐡🐢🐣🐤🐥🐦🐧🐨🐩🐪🐫🐬🐭🐮🐯🐰🐱🐲🐳🐴🐵🐶🐷🐸🐹🐺🐻🐼🐽🐾👀👂👃👄👅👆👇👈👉👊👋👌👍👎👏
👐👑👒👓👔👕👖👗👘👙👚👛👜👝👞👟👠👡👢👣👤👥👦👧👨👩👪👫👬👭👮👯👰👱👲👳👴👵👶👷👸👹👺👻👼👽👾👿
💀💁💂💃💄💅💆💇💈💉💊💋💌💍💎💏💐💑💒💓💔💕💖💘💙💚💛💜💝💞💟💠💡💢💣💤💥💦💧💨💩💪💫💬💭💮💯
💰💱💲💳💴💵💶💷💸💹💺💻💼💽💾💿📀📁📂📃📄📅📆📇📈📉📊📋📌📍📎📏📐📑📒📓📔📕📖📗📘📙📚📛📜📝📞📟
📠📡📢📣📤📥📦📧📨📩📪📫📬📭📮📯📰📱📲📳📴📵📶📷📹📺📻📼🔀🔁🔂🔃🔄🔅🔆🔇🔈🔉🔊🔋🔌🔍🔎🔏
🔐🔑🔒🔓🔔🔕🔖🔗🔘🔙🔚🔛🔜🔝🔞🔟🔠🔡🔢🔣🔤🔥🔦🔧🔨🔩🔪🔫🔬🔭🔮🔯🔰🔱🔲🔳🔴🔵🔶🔷🔸🔹🔺🔻🔼🔽
🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛🕜🕝🕞🕟🕠🕡🕢🕣🕤🕥🕦🕧🗻🗼🗽🗾🗿
😁😂😃😄😅😆😇😈😉😊😋😌😍😎😏😐😒😓😔😖😘😚😜😝😞😠😡😢😣😤😥😨😩😪😫😭😰😱😲😳😵😶😷
😸😹😺😻😼😽😾😿🙀🙅🙆🙇🙈🙉🙊🙋🙌🙍🙎🙏
🚀🚁🚂🚃🚄🚅🚆🚇🚈🚉🚊🚋🚌🚍🚎🚏🚐🚑🚒🚓🚔🚕🚖🚗🚘🚙🚚🚛🚜🚝🚞🚟🚠🚡🚢🚣🚤🚥🚦🚧🚨🚩🚪
🚫🚬🚭🚮🚯🚰🚱🚲🚳🚴🚵🚶🚷🚸🚹🚺🚻🚼🚽🚾🚿🛀🛁🛂🛃🛄🛅


* Footnotes

[fn:1] http://doc.norang.ca/org-mode.html#Capture

[fn:2] http://doc.norang.ca/org-mode.html#Refiling

