* Working with the starer kit
** As an org file

   Because the Emagician starter kit is an org file, it can be peppered with todo's tags, etc. which gives us a great way to view this source-code.

*** ~TODO~ Items 

	The GTD Methodology is pretty solid. At the very least the Emagician Starter kit follow the formula of:
	
	- ~TODO~ items are items to be done.  Any todo item that has subtasks is a project.  This allows for infinitely nesting projects.
	- ~NEXT~ items are next actions.
	- ~TODO~ items with sub items and no ~NEXT~ items are stuck.

	For more info, please see [[file:Emagician-Org.org]].

*** Tags 
	
	Configs usually have crosscutting concerns.  Like Keys.

	So yea. Tags FTW.
	
	- asset :: contains a src block that is an asset (i.e. a snippet, cookie file, css file) rather then elisp
	- keybinding :: modify the binding of a key. hurdur.
	- osx :: Mac specific junk.
	- experimental :: Stuff that is being worked on, in progress, and probably half-baked.

**** TODO pull out a list of tags via the agenda.

*** Agendas

**** Show all Stuck Emagician Projects

**** Show all emagician next tasks. 

** Helm Source
#+begin_src emacs-lisp
  (helm-ff-directory-files emagician-dir)
  
  (defvar emagician/helm-c-source-files
    `((name  . "Find Emagician Files")
      (header-name . (lambda (_)))
      (candidates . ,(lambda () 
                      (when (file-accessible-directory-p emagician-dir)
                        (directory-files emagician-dir t))))
      (keymap . ,helm-generic-files-map)
      (candidate-transformer . emagician/helm-ct-is-org-file)
      (help-message . helm-generic-file-help-message)
      (mode-line . ,helm-generic-file-mode-line-string)
      (type . file)))
  
  (defun emagician/helm-ct-is-org-file (candidates)
    (remove-if-not (lambda (c)
                     (and (string= (substring c -4) ".org")
                          (not (string= (substring (file-name-nondirectory c) 0 2) ".#"))))
                   candidates))
  
  
  (defun emagician/helm-emagician-dir () 
    "List all the org files in the Emagician dir"
    (interactive)
    (helm :sources emagician/helm-c-source-files
          :candidate-number-limit 40
          :buffer "*emagician-|-+-|-files*"))
  
  (global-set-key (kbd "S-<f3>") 'emagician/helm-emagician-dir)
    
    
#+end_src



* Exporting as a website
** TODO Save website to a separate directory
** TODO do some magic to auto-commit to the git branch
   http://help.github.com/pages/
   http://ryanfitzer.org/2011/11/easy-syncing-of-github-pages/
** Set up stylesheets
#+begin_src emacs-lisp :tangle no
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages '((less . t))))
#+end_src


#+begin_src less :tangle export/main.less :noweb yes 
<<colors>>
<<org-structures>>
#+end_src

#+RESULTS:

*** Solarized style colors 
#+name: colors
#+begin_src  less
$base03:    #002b36;
$base02:    #073642;
$base01:    #586e75;
$base00:    #657b83;
$base0:     #839496;
$base1:     #93a1a1;
$base2:     #eee8d5;
$base3:     #fdf6e3;
$yellow:    #b58900;
$orange:    #cb4b16;
$red:       #dc322f;
$magenta:   #d33682;
$violet:    #6c71c4;
$blue:      #268bd2;
$cyan:      #2aa198;
$green:     #859900;
#+end_src

*** Main org structures
#+name: org-structures
#+begin_src less

#+end_src 

** Specialized export command

#+begin_src emacs-lisp
  (require 'org-publish)
  (defun emagician-export/export ()
    "Main export function"
    (interactive)
    (org-babel-tangle-file (expand-file-name "Emagician-Meta.org" emagician-dir))
    (let ((org-export-with-section-numbers t)
          (org-html-include-timestamps nil)
          (org-src-fontify-natively t)
          (org-export-hml-inline-images t)
          (org-publish-project-alist `(("emagician-org"
                                        :base-directory ,emagician-dir
                                        :base-extension "org"
                                        :publishing-directory "export"
                                        :author-info t
                                        :creator-info t
                                        :publishing-function org-publish-org-to-html
                                        :auto-sitemap t
                                        :recursive t
                                        :exclude "\\(jarkell.org\\|jonny.org\\|jonnay.org\\)"
                                        :html-head-extra "<link rel=\"stylesheet\" href=\"\">"
                                        :htmlized-source t)
                                       ("emagician-extra"
                                        :base-directory ,emagician-dir
                                        :base-extension "css\\|pdf\\|png\\|jpg"
                                        :publishing-function org-publish-attachment
                                        :author nil)
                                       )))
      (org-publish "emagician-org")))
#+end_src

** Reference code

*** From Guerry
#+begin_src emacs-lisp :tangle no
   ("cours-images"
         :base-directory "~/install/git/CoursCreationSiteWeb/images/"
         :base-extension "png\\|jpg\\|gif"
         :publishing-directory "~/public_html/org/homepage/cours-creation-site-web/images/"
         :publishing-function org-publish-attachment)

        ("dotemacs"
         :base-directory "~/install/git/dotemacs/"
         :html-extension "html"
         :base-extension "org"
         :publishing-directory "/home/guerry/public_html/org/homepage/"
         :publishing-function (org-html-publish-to-html)
         :auto-sitemap nil
         :recursive t
         :makeindex t
         :preserve-breaks nil
         :sitemap-sort-files chronologically
         :section-numbers nil
         :with-toc nil
         :html-head-extra "<link rel=\"stylesheet\" href=\"http://lumiere.ens.fr/~guerry/u/org.css\" type=\"text/css\" />"
         :html-preamble nil
         :htmlized-source t
         :html-postamble nil)
#+end_src

*** From NOrang
#+begin_src emacs-lisp tangle no
  ; Inline images in HTML instead of producting links to the image
  (setq org-export-html-inline-images t)
  ; Do not use sub or superscripts - I currently don't need this functionality in my documents
  (setq org-export-with-sub-superscripts nil)
  ; Use org.css from the norang website for export document stylesheets

  (setq org-export-html-style-include-default nil)
  ; Do not generate internal css formatting for HTML exports
  (setq org-export-htmlize-output-type (quote css))
  ; Export with LaTeX fragments
  (setq org-export-with-LaTeX-fragments t)
  
  (setq emagician-org/publish-project-alist
        ;
        ; http://www.norang.ca/  (norang website)
        ; norang-org are the org-files that generate the content
        ; norang-extra are images and css files that need to be included
        ; norang is the top-level project that gets published
        (quote (("emagician-org"
                 :base-directory "~/git/www.norang.ca"
                 :publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs"
                 :recursive t
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function org-publish-org-to-html
                 :style-include-default nil
                 :section-numbers nil
                 :table-of-contents t
                 :style "<link rel=\"stylesheet\" href=\"emagician.css\" type=\"text/css\" />"
                 :author-info t
                 :creator-info t)
                ("emagician-extra"
                 :base-directory "~/git/www.norang.ca/"
                 :publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs"
                 :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                 :publishing-function org-publish-attachment
                 :recursive t
                 :author nil)
                ("emagician"
                 :components ("emagician-org" "emagician-extra")))))
  
  (defun emagician-meta/save-then-publish ()
    (interactive)
    (save-buffer)
    (org-save-all-org-buffers)
    (org-publish-current-project))
  
  
#+end_src

   
* TODO Emagician Package Archive							   :experimental:

  Why not?  Some packages Aren't available on ELPA, or MELPA.  So it'd be nice to have another location for them.

  This will also serve as documentation and examples on how to work with Elpakit. 

** Elpakit basic setup
#+begin_src emacs-lisp :tangle no
(emagician-expect-package 'elpakit)

(emagician/expect-dir "empa")
(emagician/expect-dir "empa/packages")
(emagician/expect-dir "empa/archives")
(emagician/expect-dir "empa/recipies")

  (defvar emagician/archive/package-dir
    (expand-file-name "empa/packages" emagician-dir)
    "Directory where packages are built") 
#+end_src


** Define the archive
#+begin_src emacs-lisp
  
  (defvar emagician/archive/packages 
    '(memopop 
      achievements)
    "A list of packages to be built")
#+end_src


#+begin_src emacs-lisp :tangle no
  (mapcar (lambda (p) 
            (emagician/expect-dir (expand-file-name (symbol-name p) 
                                                    emagician/archive/package-dir)))
          emagician/archive/packages)
  
  (elpakit (expand-file-name "empa/archive" emagician-dir)
           (mapcar (lambda (p)
                     (concat "empa/packages/" (symbol-name p)))
                   emagician/archive/packages))
  
#+end_src

** Recipes

   Maybe they should be moved?  Maybe they should say? I don't know.


#+begin_src emacs-lisp :tangle empa/recipies/memopop
  (memopop
    :doc Helps you pop up and pop out a specific file buffer easily.
    :description 
    :fetcher 'wiki)
#+end_src

was in  
#+begin_src emacs-lisp :tangle empa/recipies/emacs-achievements
      (emacs-achievements 
       :doc "a fun way to learn about Emacs."
       :repo "abingham/prosjekt" 
       :fetcher github)
#+end_src
