#+title: Riff Raff

* HTML page for serving
** Set up webserver

#+begin_src emacs-lisp
  (defun riff-raff-start ()
    "Start Riff Raff!"
    (interactive)
    (riff-raff-ws-start)
    (elnode-make-webserver "." 8023))
#+end_src

** And the HTML
#+begin_src nxml :tangle index.html
  <!DOCTYPE html>
  <html lang="en">
  <head>
  <meta charset="utf-8" />
  <title>HTML5 Doctor | Element Index</title>
  <link rel="stylesheet" href="style.css" />
  <script src="ender.js"></script>
  <script src="socket.io.js"></script>      
  <script src="rad-socket.io.js"></script>
  <script src="riff-raff.js"></script>
  </head>
  <body>
  <header> 
      <h1>Riff Raff </h1>
      <h2> Jonnay's Emacs Web Servator.</h2>
  </header>
  <section id="status">
      <h2> Status </h2>
      <div id="status-block">
          <dl>
              <dt>Socket IO</dt><dd id="socketio">nothing</dd>
              <dt>Mindwave</dt><dd id="mindwave">nothing</dd>
              <dt>Ergore</dt><dd id="ergore">nothing</dd>
          </dl>
      </div>
      <a href="javascript:false">Beep Jonnay!</a>
  </section>
  <section id="ergore">
      <h2> Ergore connection </h2>
  </section>
  <section id="mindwave">
      <dl>
          <dt> Conncetion status </dt>
          <dd id="connection"> </dd>
  
          <dt> Attention </dt>
          <dd id="attention"></dd>
  
          <dt> Meditation </dt>
          <dd id="meditation"></dd>
      </dl>
  </section>
  </body>
  </html>
#+end_src
** And the CSS
#+begin_src less 
.connected { background-color: #0f0; }
.disconnected { background-color: #f00; }
#+end_src

* Websocket Server
#+begin_src emacs-lisp :output nil
  (defvar riff-raff-server nil)
  
  (defun riff-raff-ws-start () 
    "Start the riffraff websocket server"
    (interactive)
    (if (and (not (null riff-raff-server))
             (process-live-p riff-raff-server)
             (websocket-server-p riff-raff-server))
        riff-raff-server
      (setq riff-raff-server 
            (websocket-server 8032 :on-message 'riff-raff-event :on-error 'riff-raff-error))))
  
  (defun riff-raff-ws-stop
    "Stops the web socket server" ()
    (interactive)
    (unless (null riff-raff-server)
      (websocket-server-close riff-raff-server)
      (setq riff-raff-server nil)))
  
  (defun riff-raff-event (ws frame)
    "Main message handler for riffraff"
    (message "Websocket: got frame: %s" (websocket-frame-payload frame)))
#+end_src

#+RESULTS:
: riff-raff-event


* Javascript
** Ender! Use Ender!
*** Ender Install
#+begin_src sh :results output
npm install -g ender
#+end_src

#+RESULTS:
: /usr/local/share/npm/bin/ender -> /usr/local/share/npm/lib/node_modules/ender/bin/ender
: ender@0.8.11 /usr/local/share/npm/lib/node_modules/ender
: â”œâ”€â”€ colors@0.6.0-1
: â”œâ”€â”€ sink-test@1.0.2
: â”œâ”€â”€ async@0.1.22
: â”œâ”€â”€ uglify-js@1.3.0
: â””â”€â”€ npm@1.1.26

*** Now Lets get a basic package set happening
**** Baseline  packages
#+begin_src sh :results output
ender build underscore jeesh radio
#+end_src

#+RESULTS:
#+begin_example
[31mWelcome to ENDER - The no-library library[39m
-----------------------------------------
installing packages: "ender-js underscore jeesh radio"...
[33mthis can take a minute...[39m
ender-js@0.4.4 ./node_modules/ender-js 
underscore@1.4.2 ./node_modules/underscore 
radio@0.2.0 ./node_modules/radio 
jeesh@0.0.6 ./node_modules/jeesh 
â”œâ”€â”€ bonzo@1.2.3
â”œâ”€â”€ domready@0.2.11
â”œâ”€â”€ qwery@3.3.11
â””â”€â”€ bean@1.0.1
successfully finished installing packages
assembling packages...
[33mender.js successfully built![39m
[33mender.min.js successfully built![39m
#+end_example



** Our Own Ender Package

*** Start with some source code first
#+begin_src js :tangle rad-socket.io.js
  (function() {
      // not entirely sure we need to wrap this yet.  But keeping it around for a bit
      var socket = require('io');
      var emit = socket.emit
      socket.emit = function() {
          emit.apply(socket, arguments);
      };
  
      /*
       * This is where some magick happens.
       * we're going to de-couple socket.io, and allow some serious decoupling via pubsub. 
       * this is an example of:  
       *   - 'Aspect oriented programming'  with Javascript.  Lisp rules.
       * 
       */
  
      // Store a local copy of the socket io emit function 
      var $emit = socket.$emit;  
  
      // Re-define it now. 
      socket.$emit = function() {
          // get the arguments as an array
          var args = Array.prototype.slice.call(arguments);
          
          // now, execute the original function 
          $emit.apply(socket, arguments);
  
          // then pass it off to pubsub, so we can subscribe to arbitrary events
          $.radio(args[0]).broadcast.apply(undefined, args.slice(1));
      };
  })();
  
#+end_src


** Riff Raff . js
*** TODO fix localhost shit.

#+begin_src js :tangle riff-raff.js
  
  $.domReady(function() {
  
      var socketio = require('io');
      socketio.transports=['websocket'];
      var socket = new socketio.connect('ws://localhost:8032/', {'try multiple transports': false, transports: ['websocket']});
      socket.on('connect', function() {
          $('socketio').text("connected").addClass("status connected"); 
      });
  
      $('#beep').on('click', function() {
          $.socket.emit('beep');
      });
  });
#+end_src 

