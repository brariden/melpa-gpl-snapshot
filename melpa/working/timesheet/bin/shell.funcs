#!/bin/sh
# shell.funcs - Common POSIX shell functions
# Copyright (c) 2014 Informatique, Inc.
# Licensed under MIT http://opensource.org/licenses/MIT
#
# This file should be source from POSIX shell as
# . shell.funcs

# expect the user will override these
program=${program-$0}
logfile=${logfile-/dev/null}
# set verbose to non-empty for verbose mode

vecho() {
  [ -z "$verbose" ] || echo >&2 "$@"
}

log() {
  echo "$*" >> "$logfile"
  vecho "$*"
}

lognote() {
  echo "# $*" >> "$logfile"
  vecho "# $*"
}

vcmd() {
  vecho $*
  $*
}

logcmd() {
  echo "$*" >> "$logfile"
  vcmd $*
}

err() {
  # echo "${program}: $*"
  echo >&2 "E: $*"
}

logerr() {
  echo "E: $*" | tee -a "$logfile"
}

warn() {
  echo >&2 "W: $*"
}

logwarn() {
  echo "# W: $*" >> "$logfile"
  echo >&2 "W: $*"
}

vtee() {
  local args=""
  local append=""
  local outfile=""
  while test $# -ne 0; do
    case "$1" in
      -a)
        append="$1"
        args="$args $1"
        ;;
      -*)
        args="$args $1"
        ;;
      *)
        if [ -z "$outfile" ]; then
          outfile="$1"
        else
          err "vtee: at most one output file may be specified"
        fi
        ;;
    esac
    shift
  done
  if [ -z "$outfile" ]; then
    err "vtee: no output file specified (sending to stdout)"
    cat
  else
    if [ -z "$verbose" ]; then
      tee $args $outfile
    else
      if [ -z "$append" ]; then
        cat > $outfile
      else
        cat >> $outfile
      fi
    fi
  fi
}

vcat() {
  if [ -n "$verbose" ]; then
    echo >&2 "# --- $1 --begin"
    cat >&2 "$@"
    echo >&2 "# --- $1 --end"
  fi
}

update_env() {
  local v
  local val

  for v in $*; do
    val="$(eval echo \$$v)"
    lognote "updating environment: $v=$val"
    if [ -e "$env" ]; then
      mv "$env" "$env.old"
      echo "#${program} updated environment for $appname on `date`" > "$env"
      # ignore egrep error code
      egrep -v "(^#${program}|^${v}=)" "$env.old" >> "$env" || true
    else
      echo "#${program} created environment for $appname on `date`" >> "$env"
    fi
    echo "$v=\"$val\"" >> "$env"
    rm -f "$env.old"
  done
}

startswith() {
  start=$1
  str=$2
  if [ "${str#$start}" = "$str" ]; then
    return 1
  fi
  return 0
}

# Certain operating systems (bash) already set OSTYPE
# we must not make any assumptions about it being valid
OSNAME=""
if [ -z "$OSNAME" ]; then
  # What platform are we on?
  case "`uname -m`" in
      i[36]86) ARCH=i686    ;; # NORMALLY i686 # 32-bit
      x86_64)  ARCH=x86_64  ;; # 64-bit
      ia64)    ARCH=ia64    ;; # 64-bit
      amd64)   ARCH=amd64   ;; # 64-bit
      *)       ARCH=unknown ;;
  esac
  case "`uname -s`" in
      # Force 64-bit Windows users to use 32-bit
      #CYGWIN*-WOW64) OSNAME=cygwin; ARCH=x86_64 ;;
      # CYGWIN*)       OSNAME=cygwin; ARCH=i686 ;;
      CYGWIN*)       OSNAME=cygwin ;;
      Darwin)        OSNAME=darwin ;;
      SunOS)         OSNAME=solaris ;;
      [Ll]inux*)     OSNAME=linux
          if [ "$ARCH" = "x86_64" ]; then
              ARCH=amd64      # canonical for Linux 64-bit
          fi
          ;;
      *)             OSNAME=unknown ;;
  esac
fi
export ARCH
export OSNAME

readlink_canonicalize () {
  local p="$1"
  local f=""
  local c=""
  local i=0
  local max=100
  if [ "$OSNAME" != "darwin" ]; then
    echo $(readlink --canonicalize "$p")
  else
    if [ "$p" = "." ]; then
        # special case to avoid dirname=basename=.
      p="$(pwd -P)"
    fi
    f=$(basename "$p")
    p=$(dirname "$p")
    cd "$p"
    p="$(pwd -P)"
    while [ "$p" != "/" ] && [ $i -lt $max ]; do
      if [ -L "$f" ]; then
        p=$(readlink "$f")
        f=$(basename "$p")
        p=$(dirname "$p")
        cd "$p"
        p="$(pwd -P)"
      else
        if [ -z "$c" ]; then
          c="$f"
        else
          c="$f/$c"
        fi
        f=$(basename "$p")
        p=$(dirname "$p")
        cd "$p"
        p="$(pwd -P)"
      fi
      i=$((i + 1))
    done
    if [ -z "$c" ]; then
      c="$f"
    else
      c="$f/$c"
    fi
    echo "${p}${c}"
  fi
  return 0
}

verify_vars() {
    for v in $*; do
        val=$(eval echo \$$v)
        if [ -z "$val" ]; then
            err "Please set the environment variable $v"
            exit 1
        fi
    done
}
