;;;;;;
;;;;;;
;;;;;; IO
;;;;;;
;;;;;;

;;;
;;; IO
;;;
(define $print
  (lambda [$x]
    (do {[(write x)]
         [(write "\n")]
         [(flush)]
         })))

(define $print-to-port
  (lambda [$port $x]
    (do {[(write-to-port port x)]
         [(write-to-port port "\n")]
         })))

(define $display (compose show print))

(define $display-to-port
  (lambda [$port $x]
    (print-to-port port $ (show x))))

(define $each-line
  (lambda [$proc]
    (do {[$eof (eof?)]}
      (if eof
        (return [])
        (do {[$line (read-line)]
             [(proc line)]}
          (each-line proc))))))

(define $each-line-from-port
  (lambda [$port $proc]
    (do {[$eof (eof-port? port)]}
      (if eof
        (return [])
        (do {[$line (read-line-from-port port)]
             [(proc line)]}
          (each-line-from-port port proc))))))

(define $each-file
  (lambda [$files $proc]
    (match files (list string)
      {[<nil> (return [])]
       [<cons $file $rest>
        (do {[$port (open-input-file file)]
             [(each-line-from-port port proc)]
             [(close-input-port port)]}
          (each-file rest proc))]})))

;;;
;;; Collection
;;;
(define $each
  (lambda [$proc $xs]
    (match xs (list something)
      {[<nil> (do {})]
       [<cons $x $rs>
        (do {[(proc x)]}
          (each proc rs))]})))

;;;
;;; Debug
;;;
(define $debug
  (macro [$expr]
    (io (do {[(print (show expr))]}
          (return expr)))))
             
    