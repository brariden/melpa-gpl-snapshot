
(1 (zzz-to-char . [(20160122 640) ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) "Fancy version of `zap-to-char' command" single ((:keywords "convenience") (:url . "https://github.com/mrkkrp/zzz-to-char"))]) (zygospore . [(20140703 352) nil "reversible C-x 1 (delete-other-windows)" single ((:url . "https://github.com/louiskottmann/zygospore.el"))]) (ztree . [(20160127 1742) ((cl-lib (0))) "Text mode directory tree" tar ((:keywords "files" "tools") (:url . "https://github.com/fourier/ztree"))]) (zotxt . [(20160427 2122) ((request-deferred (0 2 0))) "Tools to integrate emacs with Zotero via the zotxt plugin." tar nil]) (zotelo . [(20160602 449) ((cl-lib (0 5))) "Manage Zotero collections from emacs" single ((:keywords "zotero" "emacs" "reftex" "bibtex" "mozrepl" "bibliography manager") (:url . "https://github.com/vitoshka/zotelo"))]) (zossima . [(20121123 1835) ((inf-ruby (2 2 3))) "Ruby from Emacs" tar ((:keywords "ruby" "convenience") (:url . "https://github.com/technomancy/zossima"))]) (zop-to-char . [(20160212 308) ((cl-lib (0 5))) "A replacement of zap-to-char." single ((:url . "https://github.com/thierryvolpiatto/zop-to-char"))]) (zoom-window . [(20160527 938) ((emacs (24)) (cl-lib (0 5))) "Zoom window like tmux" single ((:url . "https://github.com/syohex/emacs-zoom-window"))]) (zoom-frm . [(20151231 1825) ((frame-fns (0)) (frame-cmds (0))) "Commands to zoom frame font size." single ((:keywords "frames" "extensions" "convenience") (:url . "http://www.emacswiki.org/zoom-frm.el"))]) (zonokai-theme . [(20160321 2125) nil "No description available." tar nil]) (zones . [(20160209 1120) nil "Zones of text - like multiple regions" single ((:keywords "narrow" "restriction" "widen" "region" "zone") (:url . "http://www.emacswiki.org/zones.el"))]) (zone-sl . [(20160201 610) ((emacs (24 3))) "Zone out with steam locomotives." single ((:keywords "games") (:url . "https://github.com/kawabata/zone-sl"))]) (zone-select . [(20160118 819) ((emacs (24 3)) (dash (2 8))) "Select zone programs." single ((:keywords "games") (:url . "https://github.com/kawabata/zone-select"))]) (zone-rainbow . [(20160120 734) ((emacs (24 3))) "Zone out with rainbow." single ((:keywords "games") (:url . "https://github.com/kawabata/zone-rainbow"))]) (zone-nyan . [(20160102 1656) ((esxml (0 3 1))) "Zone out with nyan cat" single ((:keywords "zone") (:url . "https://github.com/wasamasa/zone-nyan"))]) (zombie-trellys-mode . [(20150304 848) ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) "A minor mode for interaction with Zombie Trellys" single ((:keywords "languages"))]) (zombie . [(20141222 1016) nil "major mode for editing ZOMBIE programs" single ((:url . "http://hins11.yu-yake.com/"))]) (zlc . [(20151010 2057) nil "Provides zsh like completion system to Emacs" single ((:keywords "matching" "convenience"))]) (zenity-color-picker . [(20160302 554) ((emacs (24 4))) "Insert and adjust colors using Zenity" single ((:keywords "colors") (:url . "https://bitbucket.org/Soft/zenity-color-picker.el"))]) (zencoding-mode . [(20140213 222) nil "Unfold CSS-selector-like expressions to markup" single ((:keywords "convenience") (:url . "https://github.com/rooney/zencoding"))]) (zenburn-theme . [(20160501 949) nil "A low contrast color theme for Emacs." single ((:url . "http://github.com/bbatsov/zenburn-emacs"))]) (zen-and-art-theme . [(20120622 937) nil "zen and art color theme for GNU Emacs 24" single nil]) (zeitgeist . [(20131228 1209) nil "No description available." single nil]) (z3-mode . [(20151120 1655) ((flycheck (0 23)) (emacs (24))) "A z3/SMTLIBv2 interactive development environment" single ((:keywords "z3" "yices" "mathsat" "smt" "beaver") (:url . "https://github.com/zv/z3-mode"))]) (youdao-dictionary . [(20150914 144) ((popup (0 5 0)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) "Youdao Dictionary interface for Emacs" single ((:keywords "convenience" "chinese" "dictionary") (:url . "https://github.com/xuchunyang/youdao-dictionary.el"))]) (yoshi-theme . [(20160304 1718) nil "Theme named after my cat" single ((:keywords "faces") (:url . "http://projects.ryuslash.org/yoshi-theme/"))]) (yesql-ghosts . [(20150220 637) ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) "Display ghostly yesql defqueries inline" single nil]) (ycmd . [(20160530 242) ((emacs (24 3)) (dash (2 12 0)) (s (1 10 0)) (deferred (0 3 2)) (popup (0 5 0)) (cl-lib (0 5)) (let-alist (1 0 4)) (request (0 2 0)) (request-deferred (0 2 0))) "emacs bindings to the ycmd completion server" tar ((:url . "https://github.com/abingham/emacs-ycmd"))]) (ycm . [(20150822 1336) nil "Emacs client for the YouCompleteMe auto-completion server." single ((:keywords "c" "abbrev"))]) (yaxception . [(20150105 852) nil "Provide framework about exception like Java for Elisp" single ((:keywords "exception" "error" "signal") (:url . "https://github.com/aki2o/yaxception"))]) (yatemplate . [(20160601 1603) ((yasnippet (0 8 1))) "File templates with yasnippet" tar ((:keywords "files" "convenience") (:url . "https://github.com/mineo/yatemplate"))]) (yasnippet . [(20160530 1921) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." tar ((:keywords "convenience" "emulation") (:url . "http://github.com/capitaomorte/yasnippet"))]) (yascroll . [(20150315 805) ((cl-lib (0 3))) "Yet Another Scroll Bar Mode" single ((:keywords "convenience"))]) (yari . [(20151128 139) nil "Yet Another RI interface for Emacs" single ((:keywords "tools"))]) (yaoddmuse . [(20150712 621) nil "Major mode for EmacsWiki and other Oddmuse wikis" single ((:keywords "yaoddmuse" "oddmuse") (:url . "http://www.emacswiki.org/emacs/download/yaoddmuse.el"))]) (yandex-weather . [(20160311 1437) nil "Fetch Yandex Weather forecasts." tar nil]) (yaml-mode . [(20160528 1600) ((emacs (24 1))) "Major mode for editing YAML files" single ((:keywords "data" "yaml"))]) (yalinum . [(20130217 443) nil "yet another display line numbers." single ((:keywords "convenience" "tools"))]) (yahoo-weather . [(20160426 729) ((emacs (24))) "Displays weather information in mode-line" single ((:keywords "weather" "mode-line") (:url . "https://github.com/lujun9972/yahoo-weather-mode"))]) (yagist . [(20160418 8) ((cl-lib (0 3))) "Yet Another Emacs integration for gist.github.com" single ((:keywords "tools") (:url . "https://github.com/mhayashi1120/yagist.el"))]) (yafolding . [(20141202 2256) nil "Yet another folding extension for Emacs" single ((:keywords "folding"))]) (yabin . [(20140205 2151) nil "Yet Another Bignum package (A thin wrapper of calc.el)." single ((:keywords "data"))]) (xtest . [(20141214 1106) ((cl-lib (0 5))) "Simple Testing with Emacs & ERT" single ((:keywords "testing" "ert") (:url . "https://github.com/promethial/xtest"))]) (xterm-title . [(20091203 1223) nil "Update xterm titles" single nil]) (xterm-keybinder . [(20160522 1956) ((emacs (24 3)) (cl-lib (0 5)) (let-alist (1 0 1))) "Let you extra keybinds in xterm/urxvt" tar ((:keywords "convenient"))]) (xterm-frobs . [(20091211 1755) nil "manipulate xterm when running emacs in tty mode" single nil]) (xterm-color . [(20160401 2225) nil "ANSI & XTERM 256 color support" single nil]) (xresources-theme . [(20160331 902) nil "Use your .Xresources as your emacs theme" single ((:keywords "xresources" "theme"))]) (xref-js2 . [(20160521 648) ((emacs (25)) (js2-mode (20150909))) "Jump to references/definitions using ag & js2-mode's AST" single ((:keywords "javascript" "convenience" "tools"))]) (xquery-tool . [(20160203 1153) nil "A simple interface to saxonb's xquery." single ((:keywords "xml" "xquery" "emacs") (:url . "https://github.com/paddymcall/xquery-tool.el"))]) (xquery-mode . [(20140121 1143) nil "A simple mode for editing xquery programs" tar nil]) (xo . [(20160403 146) nil "XO linter integration with compilation mode" single ((:keywords "processes"))]) (xmlunicode . [(20160319 1112) nil "Unicode support for XML" tar ((:keywords "utf-8" "unicode" "xml" "characters"))]) (xmlgen . [(20130219 419) nil "A DSL for generating XML." single nil]) (xml-rpc . [(20160430 1658) nil "An elisp implementation of clientside XML-RPC" single ((:keywords "xml" "rpc" "network") (:url . "http://github.com/hexmode/xml-rpc-el"))]) (xml-quotes . [(20151230 1649) nil "read quotations from an XML document" tar ((:keywords "xml" "quotations") (:url . "https://github.com/ndw/xml-quotes"))]) (xkcd . [(20160419 630) ((json (1 3))) "View xkcd from Emacs" single ((:keywords "xkcd" "webcomic") (:url . "https://github.com/vibhavp/emacs-xkcd"))]) (xcscope . [(20160513 1406) nil "cscope interface for (X)Emacs" single ((:keywords "languages" "c") (:url . "https://github.com/dkogan/xcscope.el"))]) (xbm-life . [(20160103 417) nil "A XBM version of Conway's Game of Life" single ((:keywords "games") (:url . "https://github.com/wasamasa/xbm-life"))]) (xahk-mode . [(20150504 1811) nil "Major mode for editing AutoHotkey scripts." single ((:keywords "languages") (:url . "http://xahlee.info/mswin/emacs_autohotkey_mode.html"))]) (xah-replace-pairs . [(20150522 533) nil "Multi-pair find/replace in strings and region." single ((:keywords "lisp" "tools" "find replace") (:url . "http://ergoemacs.org/emacs/elisp_replace_string_region.html"))]) (xah-math-input . [(20160127 1608) nil "a minor mode for inputting math and Unicode symbols." single ((:keywords "abbrev" "convenience" "unicode" "math" "latex") (:url . "http://ergoemacs.org/emacs/xmsi-math-symbols-input.html"))]) (xah-lookup . [(20150602 1346) nil "look up word on internet" single ((:keywords "help" "docs" "convenience") (:url . "http://ergoemacs.org/emacs/emacs_lookup_ref.html"))]) (xah-get-thing . [(20150712 1630) nil "get thing or selection at point." single ((:keywords "extensions" "lisp" "tools") (:url . "http://ergoemacs.org/emacs/elisp_get-selection-or-unit.html"))]) (xah-fly-keys . [(20160601 536) nil "A efficient modal keybinding set minor mode based on ergonomics." single ((:keywords "convenience" "emulations" "vim" "ergoemacs") (:url . "http://ergoemacs.org/misc/ergoemacs_vi_mode.html"))]) (xah-find . [(20160210 2102) nil "find replace in pure emacs lisp. Purpose similar to unix grep/sed." single ((:keywords "convenience" "extensions" "files" "tools" "unix") (:url . "http://ergoemacs.org/emacs/elisp-xah-find-text.html"))]) (xah-elisp-mode . [(20160409 527) nil "Major mode for editing emacs lisp." single ((:keywords "lisp" "languages") (:url . "http://ergoemacs.org/emacs/xah-elisp-mode.html"))]) (x86-lookup . [(20160525 2021) ((emacs (24 3)) (cl-lib (0 3))) "jump to x86 instruction documentation" single ((:url . "https://github.com/skeeto/x86-lookup"))]) (x-dict . [(20091203 1223) nil "emacs interface for several online dictionaries" single nil]) (wwtime . [(20151122 1010) nil "Insert a time of day with appropriate world-wide localization" single ((:keywords "time"))]) (wsd-mode . [(20160511 51) nil "Emacs major-mode for www.websequencediagrams.com" tar ((:keywords "wsd" "diagrams" "design" "process" "modelling" "uml") (:url . "https://github.com/josteink/wsd-mode"))]) (ws-butler . [(20150126 959) nil "Unobtrusively remove trailing whitespace." single ((:url . "https://github.com/lewang/ws-butler"))]) (writegood-mode . [(20150325 1315) nil "Polish up poor writing on the fly" single ((:keywords "writing" "weasel-words" "grammar") (:url . "http://github.com/bnbeckwith/writegood-mode"))]) (wrap-region . [(20140117 120) ((dash (1 0 3))) "Wrap text with punctation or tag" single ((:keywords "speed" "convenience") (:url . "http://github.com/rejeep/wrap-region"))]) (world-time-mode . [(20140627 307) nil "show whole days of world-time diffs" single ((:keywords "tools" "calendar"))]) (workgroups2 . [(20141102 1322) ((cl-lib (0 4)) (dash (2 8 0)) (anaphora (1 0 0)) (f (0 17))) "New workspaces for Emacs" single ((:keywords "session" "management" "window-configuration" "persistence") (:url . "https://github.com/pashinin/workgroups2"))]) (workgroups . [(20110726 1141) nil "workgroups for windows (for Emacs)" single ((:keywords "session" "management" "window-configuration" "persistence"))]) (worf . [(20160422 916) ((swiper (0 7 0)) (ace-link (0 1 0)) (hydra (0 13 0))) "A warrior does not press so many keys! (in org-mode)" tar ((:keywords "lisp") (:url . "https://github.com/abo-abo/worf"))]) (wolfram-mode . [(20140118 957) ((emacs (24 3))) "Mathematica editing and inferior mode." single ((:keywords "languages" "processes" "tools") (:url . "https://github.com/kawabata/wolfram-mode/"))]) (wn-mode . [(20151109 2352) ((emacs (24))) "numeric window switching shortcuts" single ((:keywords "buffers" "windows" "switching-windows") (:url . "https://github.com/luismbo/wn-mode"))]) (with-namespace . [(20130407 1322) ((dash (1 1 0)) (loop (1 1))) "interoperable elisp namespaces" single ((:keywords "namespaces"))]) (with-editor . [(20160408 401) ((emacs (24 4)) (async (1 5)) (dash (2 12 1))) "Use the Emacsclient as $EDITOR" tar ((:keywords "tools") (:url . "https://github.com/magit/with-editor"))]) (wisp-mode . [(20160419 1432) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" single ((:keywords "languages" "lisp"))]) (winring . [(20150804 1308) nil "Window configuration rings" single ((:keywords "frames" "tools") (:url . "https://gitlab.com/warsaw/winring"))]) (winpoint . [(20131023 1213) nil "Remember buffer positions per-window, not per buffer" single ((:keywords "convenience") (:url . "https://github.com/jorgenschaefer/winpoint"))]) (windsize . [(20151121 740) nil "Simple, intuitive window resizing" single ((:keywords "window" "resizing" "convenience") (:url . "http://github.com/grammati/windsize"))]) (window-purpose . [(20160310 628) ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) "Purpose-based window management for Emacs" tar ((:keywords "frames") (:url . "https://github.com/bmag/emacs-purpose"))]) (window-numbering . [(20150228 1447) nil "Numbered window shortcuts" single ((:keywords "faces" "matching") (:url . "http://nschum.de/src/emacs/window-numbering-mode/"))]) (window-number . [(20141106 2029) nil "Select windows by numbers." single ((:keywords "windows") (:url . "https://github.com/nikolas/window-number"))]) (window-layout . [(20150717 7) nil "window layout manager" single ((:keywords "window" "layout"))]) (window+ . [(20151231 1824) nil "Extensions to `window.el'." single ((:keywords "internal" "window") (:url . "http://www.emacswiki.org/window%2b.el"))]) (windata . [(20080412 955) nil "convert window configuration to list" single ((:keywords "convenience" "frames"))]) (win-switch . [(20150208 2111) nil "fast, dynamic bindings for window-switching/resizing" single ((:keywords "window" "switch" "key bindings" "ergonomic" "efficient") (:url . "http://www.stat.cmu.edu/~genovese/emacs/win-switch/"))]) (wimpy-del . [(20151231 1823) nil "Require confirmation for large region deletion." single ((:keywords "region" "cut" "kill" "copy") (:url . "http://www.emacswiki.org/wimpy-del.el"))]) (widget-mvc . [(20150101 2206) nil "MVC framework for the emacs widgets" single ((:keywords "lisp" "widget"))]) (wide-column . [(20120814 312) nil "Calls functions dependant on column position." single ((:keywords "minor mode" "cursor colour" "column width"))]) (wid-edit+ . [(20151231 1822) nil "Extensions to standard library `wid-edit.el'." single ((:keywords "widget" "color") (:url . "http://www.emacswiki.org/wid-edit%2b.el"))]) (whole-line-or-region . [(20110901 330) nil "operate on current line if region undefined" single ((:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines"))]) (whitespace-cleanup-mode . [(20150603 647) nil "Intelligently call whitespace-cleanup on save" single ((:keywords "convenience") (:url . "https://github.com/purcell/whitespace-cleanup-mode"))]) (white-sand-theme . [(20151117 1048) ((emacs (24))) "Emacs theme with a light background." single nil]) (whitaker . [(20150814 622) ((dash (2 10 0))) "Comint interface for Whitaker's Words" single ((:keywords "processes"))]) (which-key . [(20160527 835) ((emacs (24 3))) "Display available keybindings in popup" single ((:url . "https://github.com/justbur/emacs-which-key"))]) (what-the-commit . [(20150901 816) nil "Random commit message generator" single ((:keywords "git" "commit" "message") (:url . "http://barbarito.me/"))]) (wgrep-pt . [(20140510 1731) ((wgrep (2 1 5))) "Writable pt buffer and apply the changes to files" single ((:keywords "grep" "edit" "extensions") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-pt.el"))]) (wgrep-helm . [(20140528 1627) ((wgrep (2 1 1))) "Writable helm-grep-mode buffer and apply the changes to files" single ((:keywords "grep" "edit" "extensions") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-helm.el"))]) (wgrep-ag . [(20141012 511) ((wgrep (2 1 5))) "Writable ag buffer and apply the changes to files" single ((:keywords "grep" "edit" "extensions") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ag.el"))]) (wgrep-ack . [(20141012 511) ((wgrep (2 1 1))) "Writable ack-and-a-half buffer and apply the changes to files" single ((:keywords "grep" "edit" "extensions") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ack.el"))]) (wgrep . [(20141016 1856) nil "Writable grep buffer and apply the changes to files" single ((:keywords "grep" "edit" "extensions") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el"))]) (weibo . [(20150307 1642) ((cl-lib (0 5))) "Weibo client for Emacs" tar ((:keywords "weibo") (:url . "https://github.com/austin-----/weibo.emacs"))]) (weechat-alert . [(20160416 748) ((weechat (0 3 1)) (cl-lib (0 5)) (alert (1 2))) "Weechat notifier using alerts" single ((:keywords "irc" "chat" "network" "weechat") (:url . "https://github.com/kungi/weechat-alert"))]) (weechat . [(20160229 1448) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar nil]) (websocket . [(20160510 2201) nil "Emacs WebSocket client and server" single ((:keywords "communication" "websocket" "server"))]) (web-server . [(20140905 1906) ((emacs (24 3))) "Emacs Web Server" tar ((:keywords "http" "server" "network") (:url . "https://github.com/eschulte/emacs-web-server"))]) (web-mode . [(20160529 1348) nil "major mode for editing web templates" single ((:keywords "languages") (:url . "http://web-mode.org"))]) (web-completion-data . [(20160318 348) nil "Shared completion data for ac-html and company-web" tar ((:keywords "html" "auto-complete" "company") (:url . "https://github.com/osv/web-completion-data"))]) (web-beautify . [(20160410 1205) nil "Format HTML, CSS and JavaScript/JSON by js-beautify" single ((:url . "https://github.com/yasuyk/web-beautify"))]) (web . [(20141231 1401) ((dash (2 9 0)) (s (1 5 0))) "useful HTTP client" single ((:keywords "lisp" "http" "hypermedia") (:url . "http://github.com/nicferrier/emacs-web"))]) (weather-metno . [(20150831 2007) ((emacs (24)) (cl-lib (0 3))) "Weather data from met.no in Emacs" tar nil]) (wcheck-mode . [(20160208 1336) nil "General interface for text checkers" tar nil]) (wc-mode . [(20131121 1026) nil "Running word count with goals (minor mode)" single ((:url . "https://github.com/bnbeckwith/wc-mode"))]) (wc-goal-mode . [(20140829 859) nil "Running word count with goals (minor mode)" single ((:url . "https://github.com/bnbeckwith/wc-goal-mode"))]) (watch-buffer . [(20120331 1544) nil "run a shell command when saving a buffer" single ((:keywords "automation" "convenience") (:url . "https://github.com/mjsteger/watch-buffer"))]) (warm-night-theme . [(20150607 941) ((emacs (24))) "Emacs 24 theme with a dark background." single nil]) (wanderlust . [(20160429 1838) ((semi (1 14 7))) "Yet Another Message Interface on Emacsen" tar nil]) (wand . [(20141104 1845) ((dash (2 5 0))) "Magic wand for Emacs - Selecting and executing" tar ((:keywords "extensions" "tools") (:url . "https://github.com/cmpitg/wand"))]) (wakatime-mode . [(20160417 309) nil "Automatic time tracking extension for WakaTime" single ((:keywords "calendar" "comm"))]) (waher-theme . [(20141115 630) ((emacs (24 1))) "Emacs 24 theme based on waher for st2 by dduckster" single ((:url . "https://github.com/jasonm23/emacs-waher-theme"))]) (wacspace . [(20140827 32) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" tar nil]) (w32browser-dlgopen . [(20151231 1821) nil "Use w32browser with standard Windows Open File box." single ((:keywords "files" "extensions" "convenience" "dialog") (:url . "http://www.emacswiki.org/w32browser-dlgopen.el"))]) (w32-browser . [(20151231 1820) nil "Run Windows application associated with a file." single ((:keywords "mouse" "dired" "w32" "explorer") (:url . "http://www.emacswiki.org/w32-browser.el"))]) (vue-mode . [(20160411 2254) ((mmm-mode (0 5 4))) "Major mode for vue component based on web-mode and mmm-mode" single ((:keywords "languages"))]) (volume . [(20150718 1509) nil "tweak your sound card volume from Emacs" single ((:url . "http://www.brockman.se/software/volume-el/"))]) (volatile-highlights . [(20160520 2206) nil "Minor mode for visual feedback on some operations." single ((:keywords "emulations" "convenience" "wp") (:url . "http://www.emacswiki.org/emacs/download/volatile-highlights.el"))]) (voca-builder . [(20150625 1333) nil "No description available." single nil]) (vline . [(20120108 645) nil "show vertical line (column highlighting) mode." single ((:keywords "faces" "editing" "emulating") (:url . "http://www.emacswiki.org/cgi-bin/wiki/vline.el"))]) (vlf . [(20150101 918) nil "View Large Files" tar ((:keywords "large files" "utilities") (:url . "https://github.com/m00natic/vlfi"))]) (visual-regexp-steroids . [(20160516 1438) ((visual-regexp (1 0))) "Extends visual-regexp to support other regexp engines" tar ((:keywords "external" "foreign" "regexp" "replace" "python" "visual" "feedback") (:url . "https://github.com/benma/visual-regexp-steroids.el/"))]) (visual-regexp . [(20160520 600) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" single ((:keywords "regexp" "replace" "visual" "feedback") (:url . "https://github.com/benma/visual-regexp.el/"))]) (visual-fill-column . [(20160411 720) ((emacs (24 3))) "fill-column for visual-line-mode" single nil]) (visual-ascii-mode . [(20150129 446) nil "Visualize ascii code (small integer) on buffer." single ((:keywords "presentation") (:url . "https://github.com/Dewdrops/visual-ascii-mode"))]) (visible-mark . [(20150623 2350) nil "Make marks visible." single ((:keywords "marking" "color" "faces") (:url . "https://gitlab.com/iankelling/visible-mark"))]) (virtualenv . [(20140220 1701) nil "Virtualenv for Python" single ((:keywords "python" "virtualenv"))]) (vimrc-mode . [(20150607 1113) nil "Major mode for vimrc files" single ((:keywords "languages" "vim") (:url . "https://github.com/mcandre/vimrc-mode"))]) (vimish-fold . [(20160531 1132) ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) "Fold text like in Vim" single ((:keywords "convenience") (:url . "https://github.com/mrkkrp/vimish-fold"))]) (vimgolf . [(20140814 1648) nil "VimGolf interface for the One True Editor" single ((:keywords "games" "vimgolf" "vim"))]) (vim-region . [(20140329 1124) ((expand-region (20140127))) "Select region as vim" single ((:url . "https://github.com/ongaeshi/emacs-vim-region"))]) (vim-empty-lines-mode . [(20150110 2226) ((emacs (23))) "Vim-like empty line indicator at end of files." single ((:keywords "emulations") (:url . "https://github.com/jmickelin/vim-empty-lines-mode"))]) (viking-mode . [(20160529 537) nil "kill first, ask later" single ((:keywords "kill" "delete") (:url . "https://github.com/tlinden/viking-mode"))]) (viewer . [(20141021 1336) nil "View-mode extension" single ((:keywords "view" "extensions") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/viewer.el"))]) (vi-tilde-fringe . [(20141027 2142) ((emacs (24))) "Displays tildes in the fringe on empty lines a la Vi." single ((:keywords "emulation") (:url . "https://github.com/syl20bnr/vi-tilde-fringe"))]) (vhdl-tools . [(20160501 1211) ((ggtags (0 8 11)) (emacs (24 3)) (outshine (2 0)) (projectile (0 13 0)) (helm (1 9 2))) "Utilities for navigating vhdl sources." single ((:keywords "vhdl") (:url . "https://github.com/csantosb/vhdl-tools"))]) (vhdl-capf . [(20160221 1134) nil "Completion at point function (capf) for vhdl-mode." single ((:keywords "convenience" "usability" "vhdl" "completion") (:url . "https://github.com/sh-ow/vhdl-capf"))]) (vertigo . [(20160429 2305) ((dash (2 11 0))) "Jump across lines using the home row." single ((:keywords "vim" "vertigo") (:url . "https://github.com/noctuid/vertigo.el"))]) (vertica . [(20131217 911) ((sql (3 0))) "Vertica SQL mode extension" single ((:keywords "sql" "vertica"))]) (verify-url . [(20160426 728) ((cl-lib (0 5))) "find out invalid urls in the buffer or region" single ((:keywords "convenience" "usability" "url") (:url . "https://github.com/lujun9972/verify-url"))]) (vdirel . [(20151216 55) ((emacs (24 4)) (org-vcard (0 1 0)) (helm (1 7 0)) (seq (1 11))) "Manipulate vdir (i.e., vCard) repositories" single ((:keywords "vdirsyncer" "vdir" "vcard" "carddav" "contact" "addressbook" "helm"))]) (vcomp . [(20140906 1708) nil "compare version strings" single ((:keywords "versions") (:url . "https://github.com/tarsius/vcomp"))]) (vc-osc . [(20120910 411) nil "non-resident support for osc version-control" single nil]) (vc-darcs . [(20151225 1428) nil "a VC backend for darcs" single ((:keywords "vc"))]) (vc-check-status . [(20160108 416) nil "Warn you when quitting emacs and leaving repo dirty." tar ((:keywords "vc" "convenience") (:url . "https://github.com/thisirs/vc-check-status"))]) (vc-auto-commit . [(20160108 415) nil "Auto-committing feature for your repository" tar ((:keywords "vc" "convenience") (:url . "http://github.com/thisirs/vc-auto-commit.git"))]) (vbasense . [(20140221 1753) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a environment like Visual Basic Editor." tar ((:keywords "vba" "completion") (:url . "https://github.com/aki2o/emacs-vbasense"))]) (vala-mode . [(20150324 1725) nil "Vala mode derived mode" single ((:keywords "vala" "languages" "oop"))]) (vagrant-tramp . [(20160427 1832) ((dash (2 12 0))) "Vagrant method for TRAMP" tar ((:keywords "vagrant") (:url . "https://github.com/dougm/vagrant-tramp"))]) (vagrant . [(20160505 330) nil "Manage a vagrant box from emacs" single ((:keywords "vagrant" "chef") (:url . "https://github.com/ottbot/vagrant.el"))]) (uuidgen . [(20140918 1801) nil "Provides various UUID generating functions" single ((:keywords "extensions" "lisp" "tools"))]) (uuid . [(20120910 351) nil "UUID's for EmacsLisp" single ((:keywords "lisp"))]) (utop . [(20151105 447) ((emacs (24))) "Universal toplevel for OCaml" single ((:keywords "ocaml" "languages") (:url . "https://github.com/diml/utop"))]) (use-package . [(20160403 1329) ((bind-key (1 0)) (diminish (0 44))) "A use-package declaration for simplifying your .emacs" single ((:keywords "dotemacs" "startup" "speed" "config" "package") (:url . "https://github.com/jwiegley/use-package"))]) (usage-memo . [(20110722 1051) nil "integration of Emacs help system and memo" single ((:keywords "convenience" "languages" "lisp" "help" "tools" "docs") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/usage-memo.el"))]) (urlenc . [(20140116 856) nil "URL encoding/decoding utility for Emacs." single ((:keywords "url") (:url . "https://github.com/buzztaiki/urlenc-el"))]) (unkillable-scratch . [(20160504 2103) nil "Disallow buffers from being killed by regexp -- default is *scratch* buffer" single ((:keywords "scratch"))]) (unison-mode . [(20160513 1001) nil "Syntax highlighting for unison file synchronization program" single ((:keywords "symchronization" "unison") (:url . "https://github.com/impaktor/unison-mode"))]) (unipoint . [(20140113 1624) nil "a simple way to insert unicode characters by TeX name" single ((:url . "https://github.com/apgwoz/unipoint"))]) (unify-opening . [(20151116 1848) ((emacs (24 4))) "Make everything use the same mechanism to open files" single ((:keywords "dired" "org" "mu4e" "open" "runner" "extension" "file") (:url . "https://github.com/DamienCassou/unify-opening"))]) (unicode-progress-reporter . [(20140508 1541) ((emacs (24 1 0)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Progress-reporter with fancy characters" single ((:keywords "interface") (:url . "http://github.com/rolandwalker/unicode-progress-reporter"))]) (unicode-input . [(20141219 120) nil "Support for unicode character input" single ((:keywords "unicode" "input"))]) (unicode-emoticons . [(20150204 508) nil "Shortcuts for common unicode emoticons" single ((:keywords "games" "entertainment" "comms") (:url . "https://github.com/hagleitn/unicode-emoticons"))]) (undohist . [(20150315 742) ((cl-lib (1 0))) "Persistent undo history for GNU Emacs" single ((:keywords "convenience"))]) (undo-tree . [(20140509 722) nil "Treat undo history as a tree" single ((:keywords "convenience" "files" "undo" "redo" "history" "tree") (:url . "http://www.dr-qubit.org/emacs.php"))]) (underwater-theme . [(20131117 1802) nil "A gentle, deep blue color theme" single ((:keywords "faces"))]) (uncrustify-mode . [(20130707 859) nil "Minor mode to automatically uncrustify." single ((:keywords "uncrustify"))]) (unbound . [(20160506 155) nil "Find convenient unbound keystrokes" single ((:keywords "keyboard"))]) (ukrainian-holidays . [(20130720 849) nil "Ukrainian holidays for Emacs calendar." single ((:url . "https://github.com/abo-abo/ukrainian-holidays"))]) (uimage . [(20160426 726) nil "An iimage like mode with the ability to display url images" single ((:keywords "lisp" "url" "image"))]) (ucs-cmds . [(20151231 1816) nil "Macro to create commands that insert Unicode chars." single ((:keywords "unicode" "characters" "encoding" "commands" "ucs-names") (:url . "http://www.emacswiki.org/ucs-cmds.el"))]) (ubuntu-theme . [(20150805 1006) nil "A theme inspired by the default terminal colors in Ubuntu" single ((:url . "http://github.com/rocher/ubuntu-theme"))]) (typo . [(20160121 530) nil "Minor mode for typographic editing" single ((:keywords "convenience" "wp") (:url . "https://github.com/jorgenschaefer/typoel"))]) (typit . [(20160531 1131) ((emacs (24 4)) (f (0 18)) (mmt (0 1 1))) "Typing game similar to tests on 10 fast fingers" tar ((:keywords "games") (:url . "https://github.com/mrkkrp/typit"))]) (typing-game . [(20160426 720) nil "a simple typing game" single ((:keywords "lisp" "game"))]) (typing . [(20121026 1618) nil "The Typing Of Emacs" single ((:keywords "games") (:url . "http://www.emacswiki.org/emacs/TypingOfEmacs"))]) (typescript-mode . [(20160126 608) nil "Major mode for editing typescript" single ((:keywords "typescript" "languages") (:url . "http://github.com/ananthakumaran/typescript.el"))]) (typed-clojure-mode . [(20151003 1322) ((clojure-mode (2 1 1)) (cider (0 10 0 -4))) "Typed Clojure minor mode for Emacs" tar ((:url . "https://github.com/typedclojure/typed-clojure-mode"))]) (twittering-mode . [(20160313 1136) nil "Major mode for Twitter" single ((:keywords "twitter" "web") (:url . "http://twmode.sf.net/"))]) (twig-mode . [(20130220 1250) nil "A major mode for twig" single nil]) (turnip . [(20150309 129) ((dash (2 6 0)) (s (1 9 0))) "Interacting with tmux from Emacs" single ((:keywords "terminals" "tools"))]) (tup-mode . [(20140410 1114) nil "Major mode for editing files for Tup" single ((:url . "https://github.com/ejmr/tup-mode"))]) (tumble . [(20160112 129) ((http-post-simple (0)) (cl-lib (0 5))) "an Tumblr mode for Emacs" single ((:keywords "tumblr"))]) (tuareg . [(20160408 1331) ((caml (3 12 0 1))) "OCaml mode for Emacs." tar ((:keywords "ocaml" "languages") (:url . "https://github.com/ocaml/tuareg"))]) (ttrss . [(20130409 1249) ((emacs (23 1))) "Tiny Tiny RSS elisp bindings" single ((:keywords "news" "local") (:url . "https://github.com/pedros/ttrss.el"))]) (tss . [(20150913 908) ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a interface for auto-complete.el/flymake.el on typescript-mode." tar ((:keywords "typescript" "completion") (:url . "https://github.com/aki2o/emacs-tss"))]) (try . [(20160226 930) ((emacs (24))) "Try out Emacs packages." single ((:keywords "packages") (:url . "http://github.com/larstvei/try"))]) (trident-mode . [(20130726 1407) ((emacs (24)) (slime (20130526)) (skewer-mode (1 5 0)) (dash (1 0 3))) "Live Parenscript interaction" single ((:keywords "languages" "lisp" "processes" "tools") (:url . "https://github.com/johnmastro/trident-mode.el"))]) (tree-mode . [(20151104 731) nil "A mode to manage tree widgets" single ((:keywords "help" "convenience" "widget"))]) (travis . [(20150825 638) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Travis" tar ((:keywords "travis") (:url . "https://github.com/nlamirault/emacs-travis"))]) (transpose-mark . [(20150405 216) nil "Transpose data using the Emacs mark" single ((:keywords "transpose" "convenience"))]) (transmission . [(20160527 2256) ((emacs (24 4)) (let-alist (1 0 3))) "Interface to a Transmission session" single ((:keywords "comm" "tools"))]) (tramp-term . [(20141104 1545) nil "Automatic setup of directory tracking in ssh sessions." single ((:keywords "tramp" "ssh") (:url . "https://github.com/randymorris/tramp-term.el"))]) (tramp-hdfs . [(20151028 2236) nil "Tramp extension to access hadoop/hdfs file system in Emacs" single ((:keywords "tramp" "emacs" "hdfs" "hadoop" "webhdfs" "rest"))]) (tracwiki-mode . [(20150119 1021) ((xml-rpc (1 6 8))) "Emacs Major mode for working with Trac" single ((:keywords "trac" "wiki" "tickets"))]) (tracking . [(20151129 519) nil "Buffer modification tracking" tar ((:url . "https://github.com/jorgenschaefer/circe/wiki/Tracking"))]) (toxi-theme . [(20160424 1626) ((emacs (24))) "A dark color theme by toxi" single ((:url . "http://bitbucket.org/postspectacular/toxi-theme/"))]) (tox . [(20141004 1603) nil "Launch current python test with tox" single ((:keywords "convenience" "tox" "python" "tests") (:url . "https://github.com/chmouel/tox.el"))]) (totd . [(20150519 940) ((s (1 9 0)) (cl-lib (0 5))) "Display a random daily emacs command." single ((:keywords "help"))]) (tornado-template-mode . [(20141128 408) nil "A major mode for editing tornado templates" single nil]) (top-mode . [(20130605 1239) nil "run \"top\" from emacs" single ((:keywords "extensions" "processes"))]) (tool-bar+ . [(20151231 1815) nil "Extensions to standard library tool-bar.el" single ((:keywords "tool-bar" "convenience" "mouse" "button" "frame") (:url . "http://www.emacswiki.org/tool-bar%2b.el"))]) (tommyh-theme . [(20131004 1830) nil "A bright, bold-colored theme for emacs" single nil]) (toml-mode . [(20150818 320) nil "Mojor mode for editing TOML files" single ((:keywords "data" "toml") (:url . "https://github.com/dryman/toml-mode.el"))]) (toml . [(20130903 755) nil "TOML (Tom's Obvious, Minimal Language) parser" single ((:keywords "toml" "parser") (:url . "https://github.com/gongo/emacs-toml"))]) (tomatinho . [(20160531 1528) nil "Tomatinho" tar ((:keywords "time" "productivity" "pomodoro technique"))]) (toggle-window . [(20141207 948) nil "toggle current window size between half and full" single ((:keywords "hide" "window") (:url . "https://github.com/deadghost/toggle-window"))]) (toggle-test . [(20140723 37) nil "Toggle between source and test files in various programming languages" single ((:keywords "tdd" "test" "toggle" "productivity") (:url . "https://github.com/rags/toggle-test"))]) (toggle-quotes . [(20140710 426) nil "Toggle between single and double quoted string" single ((:keywords "convenience" "quotes") (:url . "https://github.com/toctan/toggle-quotes.el"))]) (toggle . [(20160331 300) ((cl-lib (0 5))) "quickly open corresponding file (eg test vs impl)." single ((:keywords "files" "extensions" "convenience"))]) (togetherly . [(20150820 338) ((cl-lib (0 3))) "allow multiple clients to edit a single buffer online" single ((:url . "http://hins11.yu-yake.com/"))]) (todotxt . [(20150513 2129) nil "A major mode for editing todo.txt files" single ((:keywords "todo.txt" "todotxt" "todotxt.el") (:url . "https://github.com/rpdillon/todotxt.el"))]) (todochiku . [(20150112 1454) nil "A mode for interfacing with Growl, Snarl, and the like." single nil]) (toc-org . [(20160422 805) nil "add table of contents to org-mode files (formerly, org-toc)" single ((:keywords "org-mode" "org-toc" "toc-org" "org" "toc" "table" "of" "contents") (:url . "https://github.com/snosov1/toc-org"))]) (tmmofl . [(20121025 601) nil "Calls functions dependant on font lock highlighting at point" single ((:keywords "minor mode" "font lock" "toggling."))]) (tiny-menu . [(20160531 1732) ((emacs (24 4))) "Display tiny menus." single ((:keywords "menu" "tools") (:url . "https://github.com/aaronbieber/tiny-menu.el"))]) (tiny . [(20151208 405) nil "Quickly generate linear ranges in Emacs" single ((:keywords "convenience") (:url . "https://github.com/abo-abo/tiny"))]) (tinkerer . [(20150220 49) ((s (1 2 0))) "Elisp wrapper for Tinkerer Blogging Engine." single ((:keywords "tinkerer" "blog" "wrapper") (:url . "https://github.com/yyr/tinkerer.el"))]) (timp . [(20160521 353) ((emacs (24 4)) (cl-lib (0 5)) (fifo-class (1 0)) (signal (1 0))) "Multithreading library" tar ((:keywords "internal" "lisp" "processes" "tools") (:url . "https://github.com/mola-T/timp"))]) (timesheet . [(20160530 1645) ((s (1)) (org (7)) (auctex (11))) "Timesheet management add-on for org-mode" tar ((:keywords "org" "timesheet") (:url . "https://github.com/tmarble/timesheet.el"))]) (timer-revert . [(20150122 1432) nil "minor mode to revert buffer for a given time interval." tar nil]) (timecop . [(20160520 552) ((cl-lib (0 5)) (datetime-format (0 0 1))) "Freeze Time for testing" single ((:keywords "datetime" "testing") (:url . "https://github.com/zonuexe/emacs-datetime"))]) (time-ext . [(20100515 1940) nil "No description available." single nil]) (tidy . [(20111222 1156) nil "Interface to the HTML Tidy program" single ((:keywords "languages") (:url . "http://www.emacswiki.org/elisp/tidy.el"))]) (tide . [(20160527 2332) ((dash (2 10 0)) (flycheck (27)) (emacs (24 1)) (typescript-mode (0 1))) "Typescript Interactive Development Environment" tar ((:keywords "typescript") (:url . "http://github.com/ananthakumaran/tide"))]) (thumb-through . [(20120118 2334) nil "Plain text reader of HTML documents" single ((:keywords "html"))]) (thumb-frm . [(20151231 1812) ((frame-fns (0)) (frame-cmds (0))) "Commands for thumbnail frames." single ((:keywords "frame" "icon") (:url . "http://www.emacswiki.org/thumb-frm.el"))]) (thrift . [(20140312 1548) nil "Major mode for Apache Thrift files" single ((:keywords "files"))]) (thingopt . [(20160520 1818) nil "Thing at Point optional utilities" single ((:keywords "convenience"))]) (thingatpt+ . [(20151231 1810) nil "Extensions to `thingatpt.el'." single ((:keywords "extensions" "matching" "mouse") (:url . "http://www.emacswiki.org/thingatpt%2b.el"))]) (thing-cmds . [(20151231 1809) ((hide-comnt (0))) "Commands that use things, as defined by `thingatpt.el'." single ((:keywords "thingatpt" "thing" "region" "selection") (:url . "http://www.emacswiki.org/thing-cmds.el"))]) (theme-looper . [(20150723 1304) ((cl-lib (0 5))) "Loop thru the available color-themes" single ((:keywords "convenience" "color-themes") (:url . "http://ismail.teamfluxion.com"))]) (textmate-to-yas . [(20160409 1208) nil "Import Textmate macros into yasnippet syntax" tar ((:keywords "yasnippet" "textmate") (:url . "https://github.com/mlf176f2/textmate-to-yas.el/"))]) (textmate . [(20110816 1646) nil "TextMate minor mode for Emacs" single ((:keywords "textmate" "osx" "mac"))]) (textile-mode . [(20151203 253) nil "Textile markup editing major mode" single nil]) (test-simple . [(20160303 236) ((cl-lib (0))) "Simple Unit Test Framework for Emacs Lisp" single ((:keywords "unit-test") (:url . "http://github.com/rocky/emacs-test-simple"))]) (test-kitchen . [(20160516 1548) nil "Run test-kitchen inside of emacs" single ((:keywords "chef" "ruby" "test-kitchen") (:url . "http://github.com/jjasghar/test-kitchen-el"))]) (test-case-mode . [(20130525 934) ((fringe-helper (0 1 1))) "unit test front-end" single ((:keywords "tools") (:url . "http://nschum.de/src/emacs/test-case-mode/"))]) (terraform-mode . [(20160502 1917) ((hcl-mode (0 2)) (cl-lib (0 5))) "Major mode for terraform configuration file" single ((:url . "https://github.com/syohex/emacs-terraform-mode"))]) (tern-django . [(20160221 1323) ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) "Create tern projects for django applications." tar ((:url . "https://github.com/proofit404/tern-django"))]) (tern . [(20160425 859) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single ((:url . "http://ternjs.net/"))]) (term-run . [(20151228 305) nil "Run arbitrary command in terminal buffer" single ((:keywords "utility" "shell" "command" "term-mode") (:url . "https://github.com/10sr/term-run-el"))]) (term-cmd . [(20160517 545) ((emacs (24 0)) (dash (2 12 0)) (f (0 18 2))) "Send commands from programs running in term.el." tar nil]) (term-alert . [(20160517 548) ((emacs (24 0)) (term-cmd (1 1)) (alert (1 1)) (f (0 18 2))) "Notifications when commands complete in term.el." tar nil]) (term+mux . [(20140211 149) ((term+ (0 1)) (tab-group (0 1))) "term+ terminal multiplexer and session management" single ((:keywords "terminal" "emulation") (:url . "http://github.com/tarao/term+-el"))]) (term+key-intercept . [(20140211 150) ((term+ (0 1)) (key-intercept (0 1))) "term+ intercept key mapping" single ((:keywords "terminal" "emulation") (:url . "http://github.com/tarao/term+-el"))]) (term+ . [(20160404 555) nil "term-mode enhancement" tar ((:keywords "terminal" "emulation") (:url . "https://github.com/tarao/term-plus-el"))]) (ten-hundred-mode . [(20160409 751) ((cl-lib (0 5))) "use only the ten hundred most usual words" tar nil]) (telephone-line . [(20160302 1715) ((emacs (24 4)) (cl-lib (0 5)) (cl-generic (0 2)) (seq (1 8))) "Rewrite of Powerline" tar ((:keywords "mode-line") (:url . "https://github.com/dbordak/telephone-line"))]) (telepathy . [(20131209 658) nil "Access Telepathy from Emacs" single ((:keywords "telepathy" "tools"))]) (tea-time . [(20120331 320) nil "Simple timer package, useful to make perfect tea." single ((:keywords "timer" "tea-time"))]) (tdd-status-mode-line . [(20131123 1116) nil "TDD status on the mode-line" single ((:keywords "faces" "tdd") (:url . "https://github.com/algernon/tdd-status-mode-line"))]) (tco . [(20140412 812) ((dash (1 2 0)) (emacs (24))) "tail-call optimisation for Emacs lisp" single nil]) (tc . [(20150113 2126) nil "a Japanese input method with T-Code on Emacs" tar nil]) (tbx2org . [(20140224 959) ((dash (2 5 0)) (s (1 8 0)) (cl-lib (0 4))) "Tinderbox to org-mode conversion" single ((:keywords "org-mode") (:url . "https://github.com/istib/tbx2org"))]) (tawny-mode . [(20160504 1246) ((cider (0 12)) (emacs (25))) "Ontology Editing with Tawny-OWL" single nil]) (tao-theme . [(20160330 850) nil "Light & dark themes with greyscale palettes generated from the golden mean" tar nil]) (tangotango-theme . [(20150702 304) nil "Tango Palette color theme for Emacs 24." single ((:keywords "tango" "palette" "color" "theme" "emacs") (:url . "https://github.com/juba/color-theme-tangotango"))]) (tango-plus-theme . [(20140425 1711) nil "A color theme based on the tango palette" single ((:url . "https://github.com/tmalsburg/tango-plus-theme"))]) (tango-2-theme . [(20120312 1525) nil "Tango 2 color theme for GNU Emacs 24" single nil]) (take-off . [(20140531 417) ((emacs (24 3)) (web-server (0 1 0))) "Emacs remote web access" tar ((:url . "https://github.com/tburette/take-off"))]) (tagedit . [(20160516 954) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single ((:keywords "convenience"))]) (tabula-rasa . [(20141215 2347) ((emacs (24 4))) "Distraction free writing mode" single ((:keywords "distraction free" "writing") (:url . "https://github.com/idomagal/Tabula-Rasa/blob/master/tabula-rasa.el"))]) (tablist . [(20160424 435) ((emacs (24 3))) "Extended tabulated-list-mode" tar ((:keywords "extensions" "lisp"))]) (tabbar-ruler . [(20160526 2348) ((tabbar (2 0 1)) (powerline (2 3)) (mode-icons (0 4 0)) (cl-lib (0 5))) "Pretty tabbar, autohide, use both tabbar/ruler" tar ((:keywords "tabbar" "ruler mode" "menu" "tool bar.") (:url . "http://github.com/mlf176f2/tabbar-ruler.el"))]) (tabbar . [(20160524 1601) nil "Display a tab bar in the header line" tar ((:keywords "convenience"))]) (tab-jump-out . [(20151005 2030) ((dash (2 10)) (emacs (24 4))) "Use tab to jump out of delimiter pairs." single ((:keywords "tab" "editing"))]) (tab-group . [(20140306 850) nil "Grouped tabs and their tabbar" single ((:keywords "convenience" "tabs") (:url . "http://github.com/tarao/tab-group-el"))]) (ta . [(20150604 1224) ((emacs (24 3)) (cl-lib (0 5))) "A tool to deal with Chinese homophonic characters" single ((:keywords "tools") (:url . "http://github.com/kuanyui/ta.el"))]) (systemtap-mode . [(20151122 1340) nil "A mode for SystemTap" single ((:keywords "tools" "languages") (:url . "https://github.com/ruediger/systemtap-mode"))]) (systemd . [(20160514 915) ((emacs (24 4))) "Major mode for editing systemd units" tar ((:keywords "tools" "unix"))]) (system-specific-settings . [(20140818 957) nil "Apply settings only on certain systems" single ((:keywords "configuration") (:url . "https://github.com/DarwinAwardWinner/emacs-system-specific-settings"))]) (syslog-mode . [(20160525 2114) ((hide-lines (20130623))) "Major-mode for viewing log files" single ((:keywords "unix") (:url . "https://github.com/vapniks/syslog-mode"))]) (syntax-subword . [(20160519 1405) nil "make operations on words more fine-grained" single nil]) (synosaurus . [(20151119 1249) ((cl-lib (0 5))) "An extensible thesaurus supporting lookup and substitution." tar ((:url . "https://github.com/rootzlevel/synosaurus"))]) (synonyms . [(20160328 854) nil "Look up synonyms for a word or phrase in a thesaurus." single ((:keywords "text" "dictionary" "thesaurus" "spelling" "apropos" "help") (:url . "http://www.emacswiki.org/synonyms.el"))]) (synonymous . [(20150909 1034) ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) "A thesaurus at your fingertips" single ((:keywords "utility") (:url . "http://github.com/toroidal-code/synonymous.el"))]) (syndicate . [(20160529 1930) ((evil (1 0))) "evil keybindings for org-mode" single ((:keywords "evil" "org" "bindings") (:url . "https://github.com/KNX32542/syndicate.git"))]) (sync-recentf . [(20160326 1501) nil "Synchronize the recent files list between Emacs instances" single ((:keywords "recentf") (:url . "https://github.com/ffevotte/sync-recentf"))]) (symon-lingr . [(20150719 842) ((symon (1 1 2)) (cl-lib (0 5))) "A notification-based Lingr client powered by symon.el" single ((:url . "http://hins11.yu-yake.com/"))]) (symon . [(20160514 2104) nil "tiny graphical system monitor" single ((:url . "http://hins11.yu-yake.com/"))]) (sx . [(20160125 1801) ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" tar ((:keywords "help" "hypermedia" "tools") (:url . "https://github.com/vermiculus/sx.el/"))]) (swoop . [(20160120 1115) ((ht (2 0)) (pcre2el (1 5)) (async (1 1)) (emacs (24))) "Peculiar buffer navigation for Emacs" tar ((:keywords "swoop" "inner" "buffer" "search" "navigation") (:url . "https://github.com/ShingoFukuyama/emacs-swoop"))]) (swiper-helm . [(20151116 530) ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) "Helm version of Swiper." single ((:keywords "matching") (:url . "https://github.com/abo-abo/swiper-helm"))]) (swiper . [(20160602 218) ((emacs (24 1)) (ivy (0 8 0))) "Isearch with an overview. Oh, man!" single ((:keywords "matching") (:url . "https://github.com/abo-abo/swiper"))]) (swift-mode . [(20160124 436) ((emacs (24 4))) "Major-mode for Apple's Swift programming language." single ((:keywords "languages" "swift"))]) (sweetgreen . [(20151207 1116) ((dash (2 12 1)) (helm (1 5 6)) (request (0 2 0)) (cl-lib (0 5))) "Order Salads from sweetgreen.com" single ((:keywords "salad" "food" "sweetgreen" "request") (:url . "https://www.github.com/CestDiego/sweetgreen.el"))]) (swbuff-x . [(20130607 514) ((swbuff (19991231 1800))) "Modifications to David Ponce's swbuff" single ((:keywords "files" "convenience") (:url . "http://www.emacswiki.org/elisp/swbuff-x.el"))]) (swap-regions . [(20160413 1223) ((emacs (24 3))) "Swap two regions of text" single ((:keywords "convenience") (:url . "https://github.com/xuchunyang/swap-regions.el"))]) (svg-mode-line-themes . [(20150425 1506) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar ((:url . "https://github.com/sabof/svg-mode-line-themes"))]) (supergenpass . [(20130329 48) nil "SuperGenPass for Emacs" single ((:keywords "supergenpass"))]) (super-save . [(20160426 929) ((emacs (24 4))) "Auto-save buffers, based on your activity." single ((:keywords "convenience") (:url . "https://github.com/bbatsov/super-save"))]) (sunshine . [(20160410 1517) ((cl-lib (0 5))) "Provide weather and forecast information." single ((:keywords "tools" "weather") (:url . "https://github.com/aaronbieber/sunshine.el"))]) (sunny-day-theme . [(20140413 1625) nil "Emacs24 theme with a light background." single ((:url . "http://github.com/mswift42/sunny-day-theme"))]) (summarye . [(20130328 527) nil "list up matched strings from a buffer, and display them in summary buffer" single nil]) (sudo-ext . [(20110117 110) nil "No description available." single nil]) (sudo-edit . [(20160304 26) nil "Utilities for opening files with sudo" single nil]) (subr+ . [(20151231 1807) nil "Extensions to standard library `subr.el'." single ((:keywords "strings" "text") (:url . "http://www.emacswiki.org/simple%2b.el"))]) (sublimity . [(20151230 927) nil "smooth-scrolling, minimap and distraction-free mode" tar ((:url . "http://hins11.yu-yake.com/"))]) (sublime-themes . [(20160111 322) nil "A collection of themes based on Sublime Text" tar ((:keywords "faces"))]) (subemacs . [(20160105 559) nil "Evaluating expressions in a fresh Emacs subprocess" single ((:keywords "extensions" "lisp" "multiprocessing") (:url . "https://github.com/kbauer/subemacs"))]) (subatomic256-theme . [(20130620 2110) nil "Fork of subatomic-theme for terminals." single ((:url . "https://github.com/cryon/subatomic256"))]) (subatomic-theme . [(20160126 938) nil "Low contrast bluish color theme" single ((:keywords "color-theme" "blue" "low contrast") (:url . "https://github.com/cryon/subatomic"))]) (stupid-indent-mode . [(20130816 1554) nil "Plain stupid indentation minor mode" single nil]) (stumpwm-mode . [(20140130 2016) nil "special lisp mode for evaluating code into running stumpwm" single ((:keywords "comm" "lisp" "tools"))]) (stripe-buffer . [(20141208 908) ((cl-lib (1 0))) "Use a different background for even and odd lines" single ((:url . "https://github.com/sabof/stripe-buffer"))]) (strings . [(20151231 1807) nil "Miscellaneous string functions." single ((:keywords "internal" "strings" "text") (:url . "http://www.emacswiki.org/strings.el"))]) (string-inflection . [(20150805 456) nil "underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names" single ((:keywords "elisp"))]) (string-edit . [(20160411 156) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single nil]) (strie . [(20160211 1622) ((cl-lib (0 5))) "A simple trie data structure implementation" single nil]) (stock-ticker . [(20150204 452) ((s (1 9 0)) (request (0 2 0))) "Show stock prices in mode line" single ((:keywords "comms") (:url . "https://github.com/hagleitn/stock-ticker"))]) (stickyfunc-enhance . [(20150429 1314) ((emacs (24 3))) "An enhancement to stock `semantic-stickyfunc-mode'" single ((:keywords "c" "languages" "tools") (:url . "https://github.com/tuhdo/semantic-stickyfunc-enhance"))]) (sticky . [(20101129 2052) nil "Sticky key for capital letters" single ((:keywords "convenience") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sticky.el"))]) (stem . [(20131102 609) nil "Routines for stemming" single ((:keywords "stemming") (:url . "https://github.com/yuutayamada/stem"))]) (status . [(20151230 808) nil "This package adds support for status icons to Emacs." tar nil]) (state . [(20160422 750) ((emacs (24))) "Quick navigation between workspaces" single ((:keywords "convenience" "workspaces") (:url . "https://github.com/thisirs/state.git"))]) (stash . [(20151117 827) nil "lightweight persistent caching" single ((:keywords "extensions" "data" "internal" "lisp") (:url . "https://www.github.com/vermiculus/stash.el/"))]) (start-menu . [(20160426 725) ((cl-lib (0 5)) (config-parser (0 1))) "start-menu for executing external program like in windows" single ((:keywords "convenience" "menu") (:url . "https://github.com/lujun9972/el-start-menu"))]) (standoff-mode . [(20150628 1842) nil "Create stand-off markup, also called external markup." tar nil]) (stan-snippets . [(20160117 47) ((stan-mode (9 0 5)) (yasnippet (0 8 0))) "Yasnippets for Stan" tar ((:keywords "snippets") (:url . "http://github.com/stan-dev/stan-mode"))]) (stan-mode . [(20160117 47) nil "Major mode for editing Stan files" tar ((:keywords "languanges") (:url . "http://github.com/stan-dev/stan-mode"))]) (ssh-agency . [(20160101 1635) ((emacs (24 4)) (dash (2 10 0))) "use ssh-agent on win32 from Emacs" single ((:url . "https://github.com/magit/ssh-agency"))]) (ssh . [(20120904 1542) nil "Support for remote logins using ssh." single ((:keywords "unix" "comm"))]) (srefactor . [(20160420 233) ((emacs (24 4))) "A refactoring tool based on Semantic parser framework" tar ((:keywords "c" "languages" "tools") (:url . "https://github.com/tuhdo/semantic-refactor"))]) (sr-speedbar . [(20150804 1151) nil "Same frame speedbar" single ((:keywords "speedbar" "sr-speedbar.el") (:url . "http://www.emacswiki.org/emacs/download/sr-speedbar.el"))]) (sqlup-mode . [(20160531 653) nil "Upcase SQL words for you" single ((:keywords "sql" "tools") (:url . "https://github.com/trevoke/sqlup-mode.el"))]) (sqlplus . [(20141009 939) nil "User friendly interface to SQL*Plus and support for PL/SQL compilation" single ((:keywords "sql" "sqlplus" "oracle" "plsql"))]) (sqlite . [(20150417 15) nil "use sqlite via elisp" single nil]) (sql-mssql . [(20160512 337) ((emacs (24 4))) "Connect Microsoft SQL Server with sql.el in Linux/Unix environment" single ((:url . "https://github.com/tumashu/sql-mssql"))]) (sql-indent . [(20150424 1916) nil "indentation of SQL statements" single ((:keywords "languages") (:url . "https://github.com/bsvingen/sql-indent"))]) (sql-impala . [(20160427 1858) nil "comint support for Cloudera Impala" single ((:keywords "sql" "impala") (:url . "https://github.com/jterk/sql-impala"))]) (spu . [(20160515 357) ((emacs (24 4)) (signal (1 0)) (timp (1 2 0))) "Silently upgrade package in the background" tar ((:keywords "convenience" "package") (:url . "https://github.com/mola-T/spu"))]) (sprunge . [(20160229 2043) ((request (0 2 0)) (cl-lib (0 5))) "Upload pastes to sprunge.us" single ((:keywords "tools"))]) (springboard . [(20160329 1309) ((helm (1 6 9))) "Temporarily change default-directory for one command" single ((:keywords "helm") (:url . "https://github.com/jwiegley/springboard"))]) (spray . [(20160304 1620) nil "a speed reading mode" single ((:keywords "convenience") (:url . "https://github.com/ian-kelling/spray"))]) (spotlight . [(20150929 255) ((emacs (24 1)) (swiper (0 6 0)) (counsel (0 6 0))) "search files with Mac OS X spotlight" single ((:keywords "search" "external") (:url . "http://www.pragmaticemacs.com"))]) (spotify . [(20160128 306) ((cl-lib (0 5))) "Control the spotify application from emacs" single ((:keywords "convenience") (:url . "https://github.com/remvee/spotify-el"))]) (splitjoin . [(20150505 932) ((cl-lib (0 5))) "Transition between multiline and single-line code" single ((:url . "https://github.com/syohex/emacs-splitjoin"))]) (sphinx-frontend . [(20151122 412) nil "Launch build process for rst documents via sphinx." single ((:keywords "compile" "sphinx" "restructuredtext") (:url . "https://github.com/kostafey/sphinx-frontend"))]) (speed-type . [(20150120 2234) ((cl-lib (0 3))) "Practice touch and speed typing" single ((:keywords "games") (:url . "https://github.com/hagleitn/speed-type"))]) (speechd-el . [(20141025 1112) nil "Client to speech synthesizers and Braille displays." tar nil]) (speech-tagger . [(20160224 202) ((cl-lib (0 5))) "tag parts of speech using coreNLP" tar ((:keywords "speech" "tag" "nlp" "language" "corenlp" "parsing" "natural") (:url . "https://github.com/cosmicexplorer/speech-tagger"))]) (speck . [(20140901 1335) nil "minor mode for spell checking" single ((:keywords "spell" "checking"))]) (sparql-mode . [(20160316 1004) ((cl-lib (0 5)) (async (1 6))) "Edit and interactively evaluate SPARQL queries." tar ((:url . "https://github.com/ljos/sparql-mode"))]) (spaces . [(20130610 249) nil "Create and switch between named window configurations." single ((:keywords "frames" "convenience") (:url . "https://github.com/chumpage/chumpy-windows"))]) (spacemacs-theme . [(20160508 1415) nil "Color theme with a dark and light versions" tar ((:keywords "color" "theme") (:url . "https://github.com/nashamri/spacemacs-theme"))]) (spaceline . [(20160527 718) ((emacs (24 3)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) "Modeline configuration library for powerline" tar ((:keywords "mode-line" "powerline" "spacemacs") (:url . "https://github.com/TheBB/spaceline"))]) (spacegray-theme . [(20150719 1431) ((emacs (24 1))) "A Hyperminimal UI Theme" single ((:keywords "themes") (:url . "http://github.com/bruce/emacs-spacegray-theme"))]) (sourcemap . [(20160511 2337) ((cl-lib (0 5)) (emacs (24))) "Sourcemap parser" single ((:url . "https://github.com/syohex/emacs-sourcemap"))]) (sourcekit . [(20160510 2217) ((emacs (24 3)) (dash (2 12 1)) (dash-functional (1 2 0))) "Library to interact with sourcekittendaemon" single ((:keywords "tools" "processes") (:url . "https://github.com/nathankot/company-sourcekit"))]) (soundklaus . [(20160314 731) ((dash (2 12 1)) (emacs (24)) (emms (4 0)) (s (1 11 0)) (pkg-info (0 4)) (cl-lib (0 5)) (request (0 2 0))) "Play music on SoundCloud with Emacs via EMMS" tar ((:keywords "soundcloud" "music" "emms") (:url . "https://github.com/r0man/soundklaus.el"))]) (soundcloud . [(20150501 2226) ((emms (20131016)) (json (1 2)) (deferred (0 3 1)) (string-utils (0 3 2)) (request (20140316 417)) (request-deferred (20130526 1015))) "a SoundCloud client for Emacs" single ((:keywords "soundcloud" "music" "audio"))]) (sound-wav . [(20140303 657) ((deferred (0 3 1)) (cl-lib (0 5))) "Play wav file" single ((:url . "https://github.com/syohex/emacs-sound-wav"))]) (sotlisp . [(20160509 1704) ((emacs (24 1))) "Write lisp at the speed of thought." single ((:keywords "convenience" "lisp") (:url . "https://github.com/Malabarba/speed-of-thought-lisp"))]) (sotclojure . [(20160421 2011) ((emacs (24 1)) (clojure-mode (4 0 0)) (cider (0 8)) (sotlisp (1 3))) "Write clojure at the speed of thought." single ((:keywords "convenience" "clojure") (:url . "https://github.com/Malabarba/speed-of-thought-clojure"))]) (sos . [(20141214 2203) ((org (7))) "StackOverflow Search" single ((:keywords "tools" "search" "questions") (:url . "https://github.com/omouse/emacs-sos"))]) (soothe-theme . [(20141027 941) ((emacs (24 1))) "a dark colorful theme for Emacs24." single ((:url . "https://github.com/jasonm23/emacs-soothe-theme"))]) (sonic-pi . [(20150919 530) ((cl-lib (0 5)) (osc (0 1)) (dash (2 2 0)) (emacs (24))) "A Emacs client for SonicPi" tar ((:keywords "sonicpi" "ruby") (:url . "http://www.github.com/repl-electric/sonic-pi.el"))]) (solidity-mode . [(20160505 403) nil "Major mode for ethereum's solidity language" single ((:keywords "languages"))]) (solarized-theme . [(20160515 642) ((emacs (24 1)) (cl-lib (0 5)) (dash (2 6 0))) "The Solarized color theme, ported to Emacs." tar nil]) (soft-stone-theme . [(20140614 335) ((emacs (24))) "Emacs 24 theme with a light background." single ((:url . "http://github.com/mswift42/soft-stone-theme"))]) (soft-morning-theme . [(20150918 1541) nil "Emacs24 theme with a light background." single ((:url . "http://github.com/mswift42/soft-morning-theme"))]) (soft-charcoal-theme . [(20140420 1143) nil "Dark charcoal theme with soft colors" single ((:url . "http://github.com/mswift42/soft-charcoal-theme"))]) (snippet . [(20130210 1715) nil "Insert snippets of text into a buffer" single nil]) (snapshot-timemachine . [(20160222 332) ((emacs (24 4)) (cl-lib (0 5))) "Step through (Btrfs, ZFS, ...) snapshots of files" single ((:url . "https://github.com/mrBliss/snapshot-timemachine"))]) (snakemake-mode . [(20160527 2052) ((emacs (24)) (cl-lib (0 5)) (magit-popup (2 4 0))) "Major mode for editing Snakemake files" tar ((:keywords "tools") (:url . "https://github.com/kyleam/snakemake-mode"))]) (smyx-theme . [(20141127 228) nil "smyx Color Theme" single ((:keywords "color" "theme" "smyx"))]) (smtpmail-multi . [(20160218 1749) nil "Use different smtp servers for sending mail" single ((:keywords "comm") (:url . "https://github.com/vapniks/smtpmail-multi"))]) (smotitah . [(20150218 430) nil "Modular emacs configuration framework" tar nil]) (smooth-scrolling . [(20160526 432) nil "Make emacs scroll smoothly" single ((:keywords "convenience") (:url . "http://github.com/aspiers/smooth-scrolling/"))]) (smooth-scroll . [(20130321 2314) nil "Minor mode for smooth scrolling and in-place scrolling." single ((:keywords "convenience" "emulations" "frames") (:url . "http://www.emacswiki.org/emacs/download/smooth-scroll.el"))]) (smex . [(20151212 1609) ((emacs (24))) "M-x interface with Ido-style fuzzy matching." single ((:keywords "convenience" "usability") (:url . "http://github.com/nonsequitur/smex/"))]) (smeargle . [(20151014 42) ((cl-lib (0 5)) (emacs (24))) "Highlighting region by last updated time" single ((:url . "https://github.com/syohex/emacs-smeargle"))]) (smarty-mode . [(20100703 658) nil "major mode for editing smarty templates" single ((:keywords "smarty" "php" "languages" "templates") (:url . "none yet"))]) (smartwin . [(20160513 256) ((emacs (24 4))) "A minor mode shows shell like buffers." single ((:keywords "convenience") (:url . "https://github.com/jerryxgh/smartwin"))]) (smartscan . [(20131230 939) nil "Jumps between other symbols found at point" single ((:keywords "extensions"))]) (smartrep . [(20150508 2130) nil "Support sequential operation which omitted prefix keys." single ((:keywords "convenience") (:url . "https://github.com/myuhe/smartrep.el"))]) (smartparens . [(20160521 708) ((dash (2 12 1)) (cl-lib (0 3))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar nil]) (smart-window . [(20130214 1342) nil "vim-like window controlling plugin" single ((:keywords "window") (:url . "https://github.com/dryman/smart-window.el"))]) (smart-tabs-mode . [(20140331 1829) nil "Intelligently indent with tabs, align with spaces!" single ((:keywords "languages") (:url . "http://www.emacswiki.org/emacs/SmartTabs"))]) (smart-tab . [(20150703 1117) nil "Intelligent tab completion and indentation." single ((:keywords "extensions") (:url . "http://github.com/genehack/smart-tab/tree/master"))]) (smart-shift . [(20150203 125) nil "Smart shift text left/right." single ((:keywords "convenience" "tools") (:url . "https://github.com/hbin/smart-shift"))]) (smart-region . [(20150903 903) ((emacs (24 4)) (expand-region (0 10 0)) (multiple-cursors (1 3 0)) (cl-lib (0 5))) "Smartly select region, rectangle, multi cursors" single ((:keywords "marking" "region") (:url . "https://github.com/uk-ar/smart-region"))]) (smart-newline . [(20131207 2140) nil "Provide smart newline for one keybind." single nil]) (smart-mode-line-powerline-theme . [(20160520 1054) ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) "smart-mode-line theme that mimics the powerline appearance." tar ((:keywords "mode-line" "faces" "themes") (:url . "http://github.com/Bruce-Connor/smart-mode-line"))]) (smart-mode-line . [(20160506 947) ((emacs (24 3)) (rich-minority (0 1 1))) "A color coded smart mode-line." tar ((:keywords "mode-line" "faces" "themes") (:url . "http://github.com/Malabarba/smart-mode-line"))]) (smart-mark . [(20150911 2110) nil "Restore point after C-g when mark" single ((:keywords "mark" "restore"))]) (smart-indent-rigidly . [(20141205 1815) nil "Smart rigid indenting" single ((:keywords "indenting" "coffee-mode" "haml-mode" "sass-mode") (:url . "https://github.com/re5et/smart-indent-rigidly"))]) (smart-forward . [(20140430 213) ((expand-region (0 8 0))) "Semantic navigation" single ((:keywords "navigation"))]) (smart-cursor-color . [(20141124 1119) nil "Change cursor color dynamically" single ((:keywords "cursor" "color" "face") (:url . "https://github.com/7696122/smart-cursor-color/"))]) (smart-compile . [(20150519 1147) nil "an interface to `compile'" single ((:keywords "tools" "unix"))]) (smart-comment . [(20160322 1339) nil "smarter commenting" single ((:keywords "lisp"))]) (sly-repl-ansi-color . [(20160214 218) ((sly (0)) (cl-lib (0 5))) "Add ANSI colors support to the sly mrepl." single ((:keywords "sly") (:url . "https://github.com/PuercoPop/sly-repl-ansi-color"))]) (sly-quicklisp . [(20160204 1015) ((sly (1 0 0 -2 2))) "A template SLY contrib" tar ((:keywords "languages" "lisp" "sly") (:url . "https://github.com/capitaomorte/sly-quicklisp"))]) (sly-named-readtables . [(20150817 1016) ((sly (1 0 0 -2 2))) "Support named readtables in Common Lisp files" tar ((:keywords "languages" "lisp" "sly") (:url . "https://github.com/capitaomorte/sly-named-readtables"))]) (sly-macrostep . [(20160119 634) ((sly (1 0 0 -2 2)) (macrostep (0 9))) "fancy macro-expansion via macrostep.el" tar ((:keywords "languages" "lisp" "sly") (:url . "https://github.com/capitaomorte/sly-macrostep"))]) (sly-hello-world . [(20160119 836) ((sly (1 0 0 -2 2))) "A template SLY contrib" tar ((:keywords "languages" "lisp" "sly") (:url . "https://github.com/capitaomorte/sly-hello-world"))]) (sly-company . [(20160308 757) ((sly (1 0 0 -3)) (company (0 7)) (emacs (24 3))) "sly completion backend for company mode" single ((:keywords "convenience" "lisp" "abbrev"))]) (sly . [(20160522 1127) ((emacs (24 3))) "Sylvester the Cat's Common Lisp IDE" tar ((:keywords "languages" "lisp" "sly") (:url . "https://github.com/joaotavora/sly"))]) (slovak-holidays . [(20150418 355) nil "Adds a list of slovak holidays to Emacs calendar" single ((:keywords "calendar"))]) (slime-volleyball . [(20140717 2341) nil "An SVG Slime Volleyball Game" tar ((:keywords "games"))]) (slime-ritz . [(20130218 1737) nil "slime extensions for ritz" single ((:keywords "languages" "lisp" "slime") (:url . "https://github.com/pallet/ritz"))]) (slime-docker . [(20160506 1608) ((emacs (24)) (slime (2 16)) (docker-tramp (0 1)) (cl-lib (0 5))) "Integration of SLIME with Docker containers." tar ((:keywords "docker" "lisp" "slime") (:url . "https://github.com/daewok/slime-docker"))]) (slime-company . [(20151210 814) ((slime (2 13)) (company (0 9 0))) "slime completion backend for company mode" single ((:keywords "convenience" "lisp" "abbrev"))]) (slime . [(20160521 1115) ((cl-lib (0 5)) (macrostep (0 9))) "Superior Lisp Interaction Mode for Emacs" tar ((:keywords "languages" "lisp" "slime") (:url . "https://github.com/slime/slime"))]) (slideview . [(20150324 1740) ((cl-lib (0 3))) "File slideshow" single ((:keywords "files") (:url . "https://github.com/mhayashi1120/Emacs-slideview"))]) (slamhound . [(20140506 1818) nil "Rip Clojure namespaces apart and rebuild them." single ((:keywords "tools" "lisp") (:url . "https://github.com/technomancy/slamhound"))]) (slack . [(20160521 922) ((websocket (1 5)) (request (0 2 0)) (oauth2 (0 10)) (circe (2 2)) (alert (1 2)) (emojify (0 2))) "Slack client for Emacs" tar ((:url . "https://github.com/yuya373/emacs-slack"))]) (skype . [(20131001 2318) nil "skype UI for emacs users.." tar ((:keywords "skype" "chat"))]) (skewer-reload-stylesheets . [(20160527 700) ((skewer-mode (1 5 3))) "live-edit CSS/SCSS/Less/etc stylesheets." tar nil]) (skewer-mode . [(20150914 1504) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar nil]) (skewer-less . [(20131015 822) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single ((:keywords "languages" "tools"))]) (skeletor . [(20151220 2254) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar nil]) (simplezen . [(20130421 500) ((s (1 4 0)) (dash (1 1 0))) "A simple subset of zencoding-mode for Emacs." single nil]) (simplenote2 . [(20160318 803) ((request-deferred (0 2 0))) "Interact with simple-note.appspot.com" single ((:keywords "simplenote"))]) (simplenote . [(20141118 840) nil "Interact with simple-note.appspot.com" single ((:keywords "simplenote"))]) (simple-screen . [(20141023 958) nil "Simple screen configuration manager" single ((:keywords "tools") (:url . "https://github.com/wachikun/simple-screen"))]) (simple-mpc . [(20160524 1351) nil "provides a simple interface to mpc" tar ((:keywords "multimedia" "mpd" "mpc"))]) (simple-httpd . [(20150430 1955) ((cl-lib (0 3))) "pure elisp HTTP server" single ((:url . "https://github.com/skeeto/emacs-http-server"))]) (simple-call-tree . [(20160319 1216) ((emacs (24 3)) (anaphora (1 0 0))) "analyze source code based on font-lock text-properties" single ((:keywords "programming") (:url . "http://www.emacswiki.org/emacs/download/simple-call-tree.el"))]) (simple+ . [(20151231 1800) ((strings (0))) "Extensions to standard library `simple.el'." single ((:keywords "internal" "lisp" "extensions" "abbrev") (:url . "http://www.emacswiki.org/simple%2b.el"))]) (simp . [(20160315 1124) nil "Simple project definition, chiefly for file finding, and grepping" tar ((:keywords "project" "grep" "find") (:url . "https://github.com/re5et/simp"))]) (silkworm-theme . [(20160217 709) ((emacs (24))) "Light theme with pleasant, low contrast colors." single nil]) (signature . [(20140730 1449) nil "Signature Survey" tar nil]) (signal . [(20160424 210) ((emacs (24)) (cl-lib (0 5))) "Advanced hook" single ((:keywords "internal" "lisp" "processes" "tools") (:url . "https://github.com/mola-T/signal"))]) (sift . [(20160107 415) nil "Front-end for sift, a fast and powerful grep alternative" single ((:keywords "sift" "ack" "pt" "ag" "grep" "search") (:url . "https://github.com/nlamirault/sift.el"))]) (sibilant-mode . [(20151119 1545) nil "Support for the Sibilant programming language" single ((:keywords "languages") (:url . "http://sibilantjs.info"))]) (shut-up . [(20150423 722) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" single ((:url . "http://github.com/rejeep/shut-up.el"))]) (shrink-whitespace . [(20150916 1415) nil "Whitespace removal DWIM key" single ((:keywords "editing") (:url . "https://github.com/jcpetkovich/shrink-whitespace.el"))]) (shpec-mode . [(20150530 422) nil "Minor mode for shpec specification" single ((:keywords "languages" "tools") (:url . "http://github.com/shpec/shpec-mode"))]) (showtip . [(20080329 2159) nil "Show tip at cursor" single ((:keywords "help"))]) (showkey . [(20151231 1759) nil "Show keys as you use them." single ((:keywords "help" "keys" "mouse") (:url . "http://www.emacswiki.org/showkey.el"))]) (show-marks . [(20130805 949) ((fm (1 0))) "Navigate and visualize the mark-ring" single ((:keywords "convenience") (:url . "https://github.com/vapniks/mark"))]) (show-css . [(20160210 808) ((doom (1 3)) (s (1 10 0))) "Show the css of the html attribute the cursor is on" tar ((:keywords "hypermedia") (:url . "https://github.com/smmcg/showcss-mode"))]) (shoulda . [(20140616 1333) ((cl-lib (0 5))) "Shoulda test support for ruby" single ((:keywords "ruby" "tests" "shoulda"))]) (shm . [(20160529 241) nil "Structured Haskell Mode" tar ((:keywords "development" "haskell" "structured"))]) (shift-text . [(20130831 1155) ((cl-lib (1 0)) (es-lib (0 3))) "Move the region in 4 directions, in a way similar to Eclipse's" single ((:url . "https://github.com/sabof/shift-text"))]) (shift-number . [(20160419 1457) nil "Increase/decrease the number at point" single ((:keywords "convenience") (:url . "https://github.com/alezost/shift-number.el"))]) (shen-elisp . [(20160602 712) ((emacs (24 3))) "Shen implementation in Elisp" tar ((:keywords "shen" "elisp") (:url . "http://github.com/deech/shen-elisp"))]) (shelldoc . [(20151114 2125) ((cl-lib (0 3)) (s (1 9 0))) "shell command editing support with man page." single ((:keywords "applications") (:url . "http://github.com/mhayashi1120/Emacs-shelldoc"))]) (shell-toggle . [(20150226 811) nil "Toggle to and from the shell buffer" single ((:keywords "processes") (:url . "https://github.com/knu/shell-toggle.el"))]) (shell-switcher . [(20160112 135) ((emacs (24))) "Provide fast switching between shell buffers." tar nil]) (shell-split-string . [(20151224 408) nil "Split strings using shell-like syntax" single ((:keywords "utility" "library" "shell" "string") (:url . "https://github.com/10sr/shell-split-string-el"))]) (shell-pop . [(20160425 954) ((emacs (24))) "helps you to use shell easily on Emacs. Only one key action to work." single ((:keywords "shell" "terminal" "tools") (:url . "http://github.com/kyagi/shell-pop-el"))]) (shell-history . [(20100504 350) nil "integration with shell history" single ((:keywords "processes" "convenience") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/shell-history.el"))]) (shell-here . [(20150728 1204) nil "Open a shell relative to the working directory" single ((:keywords "unix" "tools" "processes"))]) (shell-current-directory . [(20140101 1754) nil "create new shell based on buffer directory" single ((:keywords "shell" "comint"))]) (shell-command . [(20090621 832) nil "enables tab-completion for `shell-command'" single ((:keywords "shell"))]) (shakespeare-mode . [(20150708 912) nil "A major mode for editing Shakespearean templates." single ((:keywords "shakespeare" "hamlet" "lucius" "julius" "mode") (:url . "http://github.com/CodyReichert/shakespeare-mode"))]) (shader-mode . [(20151030 904) ((emacs (24))) "Major mode for shader" single ((:url . "https://github.com/midnightSuyama/shader-mode"))]) (shadchen . [(20141102 1239) nil "pattern matching for elisp" single nil]) (shackle . [(20160516 619) ((cl-lib (0 5))) "Enforce rules for popups" single ((:keywords "convenience") (:url . "https://github.com/wasamasa/shackle"))]) (sexp-move . [(20150915 1230) nil "Improved S-Expression Movement" single ((:keywords "sexp") (:url . "https://gitlab.com/elzair/sexp-move"))]) (seti-theme . [(20150314 322) nil "A dark colored theme, inspired by Seti Atom Theme" single ((:keywords "themes") (:url . "https://github.com/caisah/seti-theme"))]) (session . [(20120510 1900) nil "use variables, registers and buffer places across sessions" single ((:keywords "session" "session management" "desktop" "data" "tools") (:url . "http://emacs-session.sourceforge.net/"))]) (serverspec . [(20150623 655) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) "Serverspec minor mode" tar ((:url . "http://101000lab.org"))]) (servant . [(20140216 619) ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) "ELPA server written in Emacs Lisp" tar ((:keywords "elpa" "server") (:url . "http://github.com/rejeep/servant.el"))]) (sequential-command . [(20151207 1603) nil "Many commands into one command" tar ((:keywords "convenience" "lisp") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sequential-command.el"))]) (sequences . [(20130908 1322) ((emacs (24))) "Ports of some Clojure sequence functions." single ((:keywords "convenience"))]) (sentence-navigation . [(20150914 2346) ((ample-regexps (0 1)) (emacs (24 4))) "Commands to navigate one-spaced sentences." single ((:keywords "sentence" "evil") (:url . "https://github.com/noctuid/emacs-sentence-navigation"))]) (sendto . [(20160425 750) ((emacs (24 4))) "send the region content to a function" single ((:keywords "convenience" "region") (:url . "https://github.com/lujun9972/sendto.el"))]) (semi . [(20160301 900) ((flim (1 14 9))) "A library to provide MIME features." tar nil]) (selectric-mode . [(20151201 918) nil "IBM Selectric mode for Emacs" tar ((:keywords "multimedia" "convenience" "typewriter" "selectric"))]) (select-themes . [(20160220 1906) nil "Color theme selection with completing-read" single ((:url . "https://github.com/jasonm23/emacs-select-themes"))]) (sekka . [(20150708 659) ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 2))) "A client for Sekka IME server" single ((:keywords "ime" "skk" "japanese") (:url . "https://github.com/kiyoka/sekka"))]) (seethru . [(20150218 1229) ((shadchen (1 4))) "Easily change Emacs' transparency" single ((:keywords "lisp" "tools" "alpha" "transparency") (:url . "http://github.com/benaiah/seethru"))]) (seeing-is-believing . [(20160602 918) nil "minor mode for running the seeing-is-believing ruby gem" single nil]) (second-sel . [(20151231 1753) nil "Secondary selection commands" single ((:keywords "region" "selection" "yank" "paste" "edit") (:url . "http://www.emacswiki.org/second-sel.el"))]) (seclusion-mode . [(20121118 1753) nil "Edit in seclusion. A Dark Room mode." single ((:url . "http://github.com/dleslie/seclusion-mode"))]) (searchq . [(20150829 711) ((emacs (24 3))) "Framework of queued search tasks using GREP, ACK, AG and more." tar nil]) (search-web . [(20150312 603) nil "Post web search queries using `browse-url'." single nil]) (scss-mode . [(20150107 1600) nil "Major mode for editing SCSS files" single ((:keywords "scss" "css" "mode") (:url . "https://github.com/antonj/scss-mode"))]) (scrooge . [(20160529 2120) ((emacs (24)) (thrift (0 9 3))) "Major mode for Twitter Scrooge files" single ((:keywords "scrooge" "thrift"))]) (screenshot . [(20120509 605) nil "Take a screenshot in Emacs" single ((:keywords "images" "hypermedia") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/screenshot.el"))]) (scratches . [(20151005 2316) ((dash (2 11 0)) (f (0 17 0))) "Multiple scratches in any language" single ((:keywords "scratch"))]) (scratch-pop . [(20150820 339) ((popwin (0 7 0 -3))) "Generate, popup (& optionally backup) scratch buffer(s)." single ((:url . "http://hins11.yu-yake.com/"))]) (scratch-palette . [(20150225 242) ((popwin (0 7 0 -3))) "make scratch buffer for each files" single ((:url . "http://hins11.yu-yake.com/"))]) (scratch-message . [(20160526 509) nil "Changing message in your scratch buffer" single ((:keywords "util" "scratch") (:url . "https://github.com/thisirs/scratch-message.git"))]) (scratch-log . [(20141115 143) nil "Utility for *scratch* buffer." single nil]) (scratch . [(20120830 1228) nil "Mode-specific scratch buffers" tar ((:keywords "editing"))]) (scpaste . [(20151208 1935) ((htmlize (1 39))) "Paste to the web via scp." single ((:keywords "convenience" "hypermedia") (:url . "https://github.com/technomancy/scpaste"))]) (sclang-snippets . [(20130513 251) ((yasnippet (0 8 0))) "Snippets for the SuperCollider Emacs mode" tar ((:keywords "snippets"))]) (sclang-extensions . [(20160508 2238) ((auto-complete (1 4 0)) (s (1 3 1)) (dash (1 2 0)) (emacs (24 1))) "Extensions for the SuperCollider Emacs mode." tar ((:keywords "sclang" "supercollider" "languages" "tools"))]) (scion . [(20130315 755) nil "Haskell Minor Mode for Interacting with the Scion Library" single ((:url . "https://code.google.com/p/scion-lib/"))]) (scheme-here . [(20141028 218) nil "cmuscheme extension for multiple inferior processes" single ((:keywords "scheme") (:url . "https://github.com/kaihaosw/scheme-here"))]) (scf-mode . [(20151121 2048) nil "shorten file-names in compilation type buffers" single ((:keywords "compilation") (:url . "https://github.com/lewang/scf-mode"))]) (scala-mode . [(20160519 931) nil "Major mode for editing Scala" tar ((:keywords "languages") (:url . "https://github.com/ensime/emacs-scala-mode"))]) (scad-preview . [(20160206 736) ((scad-mode (91 0))) "Preview SCAD models in real-time within Emacs" single ((:url . "http://hins11.yu-yake.com/"))]) (scad-mode . [(20160205 1243) nil "A major mode for editing OpenSCAD code" single ((:keywords "languages") (:url . "https://raw.github.com/openscad/openscad/master/contrib/scad-mode.el"))]) (sbt-mode . [(20160516 1736) nil "Interactive support for sbt projects" tar ((:keywords "languages") (:url . "https://github.com/ensime/emacs-sbt-mode"))]) (say-what-im-doing . [(20160512 1355) nil "dictate what you're doing with text to speech" single ((:keywords "text to speech" "dumb" "funny") (:url . "http://github.com/benaiah/say-what-im-doing"))]) (savekill . [(20140417 2129) nil "Save kill ring to disk" single ((:keywords "tools") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/savekill.el"))]) (save-visited-files . [(20151021 1243) nil "save opened files across sessions" single ((:url . "http://github.com/nflath/save-visited-files"))]) (save-load-path . [(20140206 614) nil "save load-path and reuse it to test" single ((:keywords "lisp") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/save-load-path.el"))]) (sauron . [(20160501 1245) nil "Track (erc/org/dbus/...) events and react to them." tar nil]) (salt-mode . [(20150904 1313) ((yaml-mode (0 0 12)) (mmm-mode (0 5 4)) (mmm-jinja2 (0 0 1))) "Major mode for Salt States" single ((:keywords "languages") (:url . "https://github.com/beardedprojamz/salt-mode"))]) (sage-shell-mode . [(20160527 48) ((cl-lib (0 5)) (deferred (0 3 1)) (emacs (24))) "A front-end for Sage Math" tar ((:keywords "sage" "math") (:url . "https://github.com/stakemori/sage-shell-mode"))]) (sackspace . [(20130719 456) nil "A better backspace" single ((:keywords "delete" "convenience") (:url . "http://github.com/cofi/sackspace.el"))]) (s-buffer . [(20130605 1624) ((s (1 6 0)) (noflet (0 0 3))) "s operations for buffers" single ((:keywords "lisp") (:url . "http://github.com/nicferrier/emacs-s-buffer"))]) (s . [(20160509 157) nil "The long lost Emacs string manipulation library." single ((:keywords "strings"))]) (rvm . [(20150402 942) nil "Emacs integration for rvm" single ((:keywords "ruby" "rvm") (:url . "http://www.emacswiki.org/emacs/RvmEl"))]) (rustfmt . [(20160217 742) ((emacs (24))) "Format rust code using rustfmt" single ((:keywords "convenience") (:url . "https://github.com/fbergroth/emacs-rustfmt"))]) (runtests . [(20150807 331) nil "Run unit tests from Emacs" single ((:keywords "test") (:url . "https://github.com/sunesimonsen/emacs-runtests"))]) (runner . [(20160524 243) nil "Improved \"open with\" suggestions for dired" single ((:keywords "shell command" "dired" "file extension" "open with") (:url . "https://github.com/thamer/runner"))]) (ruby-tools . [(20151209 1015) nil "Collection of handy functions for ruby-mode." tar nil]) (ruby-test-mode . [(20160509 1250) ((ruby-mode (1 0)) (pcre2el (1 8))) "Minor mode for Behaviour and Test Driven" single ((:keywords "ruby" "unit" "test" "rspec"))]) (ruby-refactor . [(20160214 1050) ((ruby-mode (1 2))) "A minor mode which presents various Ruby refactoring helpers." single ((:keywords "refactor" "ruby") (:url . "https://github.com/ajvargo/ruby-refactor"))]) (ruby-interpolation . [(20131112 1052) nil "Ruby string interpolation helpers" single ((:url . "http://github.com/leoc/ruby-interpolation.el"))]) (ruby-hash-syntax . [(20141010 1039) nil "Toggle ruby hash syntax between classic and 1.9 styles" single ((:keywords "languages") (:url . "https://github.com/purcell/ruby-hash-syntax"))]) (ruby-factory . [(20160102 121) ((inflections (1 1))) "Minor mode for Ruby test object generation libraries" tar ((:keywords "ruby" "rails" "convenience") (:url . "http://github.com/sshaw/ruby-factory-mode"))]) (ruby-end . [(20141215 623) nil "Automatic insertion of end blocks for Ruby" single ((:keywords "speed" "convenience" "ruby") (:url . "http://github.com/rejeep/ruby-end"))]) (ruby-compilation . [(20150709 140) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single ((:keywords "test" "convenience") (:url . "https://github.com/eschulte/rinari"))]) (ruby-block . [(20131210 2131) nil "highlight matching block" single ((:keywords "languages" "faces" "ruby"))]) (rubocop . [(20151123 2337) ((dash (1 0 0)) (emacs (24))) "An Emacs interface for RuboCop" single ((:keywords "project" "convenience") (:url . "https://github.com/bbatsov/rubocop-emacs"))]) (rtm . [(20160116 1127) ((cl-lib (1 0))) "An elisp implementation of the Remember The Milk API" single ((:keywords "remember" "the" "milk" "productivity" "todo") (:url . "https://github.com/pmiddend/emacs-rtm"))]) (rtags . [(20160602 44) nil "A front-end for rtags" tar ((:url . "http://rtags.net"))]) (rspec-mode . [(20160425 1657) ((ruby-mode (1 0)) (cl-lib (0 4))) "Enhance ruby-mode for RSpec" tar ((:keywords "rspec" "ruby") (:url . "http://github.com/pezra/rspec-mode"))]) (rsense . [(20100510 2305) nil "RSense client for Emacs" single ((:keywords "convenience"))]) (rpn-calc . [(20150302 734) ((popup (0 4))) "quick RPN calculator for hackers" single ((:url . "http://hins11.yu-yake.com/"))]) (rpm-spec-mode . [(20150411 1055) nil "RPM spec file editing commands for Emacs/XEmacs" single ((:keywords "unix" "languages"))]) (roy-mode . [(20121208 558) nil "Roy major mode" single ((:keywords "extensions") (:url . "https://github.com/folone/roy-mode"))]) (rotate . [(20160215 118) nil "Rotate the layout of emacs" single ((:keywords "window" "layout") (:url . "https://github.com/daic-h/emacs-rotate"))]) (rope-read-mode . [(20160602 1307) nil "Rearrange lines to read text smoothly" single ((:keywords "reading" "convenience" "chill") (:url . "https://github.com/marcowahl/rope-read-mode"))]) (roguel-ike . [(20160119 2102) ((popup (0 5 0))) "A coffee-break roguelike" tar nil]) (robots-txt-mode . [(20160312 951) nil "Major mode for editing robots.txt" single ((:keywords "web"))]) (robe . [(20160518 459) ((inf-ruby (2 3 0))) "Code navigation, documentation lookup and completion for Ruby" tar ((:keywords "ruby" "convenience" "rails") (:url . "https://github.com/dgutov/robe"))]) (rings . [(20160531 1527) nil "Buffer rings. Like tabs, but better." single ((:keywords "utilities" "productivity") (:url . "http://github.com/konr/rings"))]) (rinari . [(20150709 140) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) "Rinari Is Not A Rails IDE" single ((:keywords "ruby" "rails" "project" "convenience" "web") (:url . "https://github.com/eschulte/rinari"))]) (rigid-tabs . [(20150807 1056) ((emacs (24 3))) "Rigidify and adjust the visual alignment of TABs" single ((:keywords "diff" "whitespace" "version control" "magit") (:url . "https://github.com/wavexx/rigid-tabs.el"))]) (rich-minority . [(20151201 600) ((cl-lib (0 5))) "Clean-up and Beautify the list of minor-modes." single ((:keywords "mode-line" "faces") (:url . "https://github.com/Malabarba/rich-minority"))]) (rhtml-mode . [(20130422 811) nil "major mode for editing RHTML files" tar nil]) (reykjavik-theme . [(20160109 200) ((emacs (24))) "Theme with a dark background." single nil]) (review-mode . [(20150110 812) nil "major mode for ReVIEW" single ((:url . "https://github.com/kmuto/review-el"))]) (reverse-theme . [(20141204 1945) nil "Reverse theme for Emacs" single ((:url . "https://github.com/syohex/emacs-reverse-theme"))]) (reveal-next . [(20151231 1750) nil "Progressively reveal text after the cursor." single ((:keywords "hide" "show" "invisible" "learning") (:url . "http://www.emacswiki.org/reveal-next.el"))]) (reveal-in-osx-finder . [(20150802 1157) nil "Reveal file associated with buffer in OS X Finder" single ((:keywords "os x" "finder") (:url . "https://github.com/kaz-yos/reveal-in-osx-finder"))]) (restclient-test . [(20160517 1240) ((emacs (24 4)) (restclient (0))) "Run tests with restclient.el" single ((:url . "https://github.com/simenheg/restclient-test.el"))]) (restclient . [(20160525 705) nil "An interactive HTTP client for Emacs" single ((:keywords "http"))]) (restart-emacs . [(20160530 822) nil "Restart emacs from within emacs" single ((:keywords "convenience") (:url . "https://github.com/iqbalansari/restart-emacs"))]) (resize-window . [(20160511 2205) ((emacs (24))) "easily resize windows" single ((:keywords "window" "resize") (:url . "https://github.com/dpsutton/resize-mode"))]) (requirejs-mode . [(20130215 1504) nil "Improved AMD module management" single ((:keywords "javascript" "amd" "requirejs"))]) (requirejs . [(20151204 119) ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5)) (yasnippet (20151011 1823))) "Requirejs import manipulation and source traversal." tar ((:keywords "javascript" "requirejs") (:url . "https://github.com/joeheyming/requirejs-emacs"))]) (request-deferred . [(20160419 1805) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" single nil]) (request . [(20160424 2232) ((emacs (24)) (cl-lib (0 5))) "Compatible layer for URL request in Emacs" single nil]) (req-package . [(20160602 1339) ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0)) (ht (0))) "A use-package wrapper for package runtime dependencies management" tar ((:keywords "dotemacs" "startup" "speed" "config" "package") (:url . "https://github.com/edvorg/req-package"))]) (repo . [(20160114 1314) ((emacs (24 3))) "Running repo from Emacs" single ((:keywords "convenience") (:url . "https://github.com/canatella/repo-el"))]) (replace-pairs . [(20160207 651) ((emacs (24 4))) "Query-replace pairs of things" single ((:url . "https://github.com/davidshepherd7/replace-pairs"))]) (replace-from-region . [(20150406 1929) nil "Replace commands whose query is from region" single ((:keywords "replace" "search" "region") (:url . "http://www.emacswiki.org/emacs/download/replace-from-region.el"))]) (replace+ . [(20160508 1043) nil "Extensions to `replace.el'." single ((:keywords "matching" "help" "internal" "tools" "local") (:url . "http://www.emacswiki.org/replace%2b.el"))]) (repl-toggle . [(20160119 621) ((fullframe (0 0 5))) "Switch to/from repl buffer for current major-mode" single ((:keywords "repl" "buffers" "toggle"))]) (repeatable-motion . [(20150629 1312) ((emacs (24))) "Make repeatable versions of motions" tar ((:keywords "motion" "repeatable") (:url . "https://github.com/willghatch/emacs-repeatable-motion"))]) (remark-mode . [(20151004 1155) ((markdown-mode (2 0))) "Major mode for the remark slideshow tool" tar ((:keywords "remark" "slideshow" "markdown"))]) (relax . [(20131029 1634) ((json (1 2))) "For browsing and interacting with CouchDB" single ((:keywords "database" "http") (:url . "http://github.com/technomancy/relax.el"))]) (relative-buffers . [(20160221 1323) ((cl-lib (0 5)) (dash (2 6 0)) (s (1 9 0)) (f (0 16 2))) "Emacs buffers naming convention" single ((:url . "https://github.com/proofit404/relative-buffers"))]) (region-state . [(20151128 438) nil "Show the number of chars/lines or rows/columns in the region" single ((:keywords "convenience") (:url . "https://github.com/xuchunyang/region-state.el"))]) (region-bindings-mode . [(20140407 1714) nil "Enable custom bindings when mark is active." single ((:keywords "convenience") (:url . "https://github.com/fgallina/region-bindings-mode"))]) (regex-tool . [(20131104 1634) nil "A regular expression evaluation tool for programmers" single ((:keywords "regex" "languages" "programming" "development") (:url . "http://www.newartisans.com/"))]) (regex-dsl . [(20100124 428) nil "lisp syntax for regexps" single nil]) (redtick . [(20160516 1616) ((emacs (24))) "Smallest pomodoro timer (1 char)" tar ((:keywords "pomodoro" "timer") (:url . "http://github.com/ferfebles/redtick"))]) (redo+ . [(20131117 551) nil "Redo/undo system for Emacs" single ((:keywords "lisp" "extensions"))]) (redis . [(20150531 1448) ((emacs (24)) (cl-lib (0 5))) "Redis integration" single ((:keywords "convenience") (:url . "https://github.com/emacs-pe/redis.el"))]) (recursive-narrow . [(20140902 1227) nil "narrow-to-region that operates recursively" single ((:url . "http://github.com/nflath/recursive-narrow"))]) (rectangle-utils . [(20160427 1224) ((emacs (24)) (cl-lib (0 5))) "Some useful rectangle functions." single ((:url . "https://github.com/thierryvolpiatto/rectangle-utils"))]) (rect+ . [(20150620 1944) nil "Extensions to rect.el" single ((:keywords "extensions" "data" "tools") (:url . "https://github.com/mhayashi1120/Emacs-rectplus"))]) (recompile-on-save . [(20151126 846) ((dash (1 1 0)) (cl-lib (0 5))) "Trigger recompilation on file save." single ((:keywords "convenience" "files" "processes" "tools") (:url . "https://github.com/maio/recompile-on-save.el"))]) (recentf-ext . [(20130130 1550) nil "Recentf extensions" single ((:keywords "convenience" "files") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/recentf-ext.el"))]) (rebox2 . [(20121113 700) nil "Handling of comment boxes in various styles." single ((:url . "https://github.com/lewang/rebox2"))]) (realgud-rdb2 . [(20160303 243) ((realgud (1 3))) "realgud front-end for interacting with Ruby debugger2" tar ((:url . "http://github.com/rocky/realgud-ruby-debugger2"))]) (realgud-pry . [(20160303 254) ((realgud (1 3))) "realgud front-end to the Ruby pry debugger" tar ((:url . "http://github.com/rocky/realgud-pry"))]) (realgud-old-debuggers . [(20160303 254) ((realgud (1 3))) "realgud front-end to older lesser-used debuggers" tar ((:url . "http://github.com/rocky/realgud-old-debuggers"))]) (realgud-byebug . [(20160303 640) ((realgud (1 3))) "realgud front-end to the Ruby byebug debugger" tar ((:url . "http://github.com/rocky/realgud-byebug"))]) (realgud . [(20160602 2241) ((load-relative (1 0)) (list-utils (0 4 2)) (loc-changes (1 1)) (test-simple (1 0))) "A modular front-end for interacting with external debuggers" tar ((:url . "http://github.com/rocky/emacs-dbgr"))]) (real-auto-save . [(20150701 1015) nil "Automatically save your all your buffers/files at regular intervals." single nil]) (readline-complete . [(20150708 937) nil "offers completions in shell mode" single nil]) (readability . [(20140715 1927) ((oauth (1 4)) (ov (1 0)) (emacs (24 3))) "Read articles from Readability in Emacs" single ((:keywords "readability" "oauth") (:url . "https://github.com/ShingoFukuyama/emacs-readability"))]) (react-snippets . [(20151104 1740) ((yasnippet (0 7 0))) "Yasnippets for React" tar nil]) (rdp . [(20120928 2054) nil "Recursive Descent Parser library" single ((:url . "https://github.com/skeeto/rdp"))]) (rdf-prefix . [(20160517 1323) nil "Prefix lookup for RDF" single ((:keywords "convenience" "abbrev") (:url . "https://github.com/simenheg/rdf-prefix"))]) (rcirc-styles . [(20160206 2050) ((cl-lib (0 5))) "support mIRC-style color and attribute codes" single nil]) (rcirc-notify . [(20150219 1604) nil "libnotify popups" single ((:keywords "lisp" "rcirc" "irc" "notify" "growl"))]) (rcirc-color . [(20151130 958) nil "color nicks" single ((:keywords "comm"))]) (rcirc-alertify . [(20140406 2019) ((alert (20140406 1353))) "Cross platform notifications for rcirc" single ((:keywords "comm" "convenience"))]) (rcirc-alert . [(20141127 447) nil "Configurable alert messages on top of RCIRC" tar ((:keywords "lisp" "rcirc" "irc" "alert" "awesome"))]) (rbenv . [(20141120 149) nil "Emacs integration for rbenv" single ((:keywords "ruby" "rbenv") (:url . "https://github.com/senny/rbenv.el"))]) (rats . [(20160315 1345) ((s (1 10 0)) (go-mode (1 3 1)) (cl-lib (0 5))) "Rapid testing suite for Go" single ((:keywords "go"))]) (rase . [(20120928 1545) nil "Run At Sun Event daemon" single ((:keywords "solar" "sunrise" "sunset" "midday" "midnight") (:url . "https://github.com/m00natic/rase/"))]) (ranger . [(20160531 239) ((emacs (24 4))) "Make dired more like ranger" single ((:keywords "files" "convenience") (:url . "https://github.com/ralesi/ranger"))]) (rand-theme . [(20151219 1735) ((cl-lib (0 5))) "Random Emacs theme at start-up!" single ((:url . "https://github.com/gopar/rand-theme"))]) (rally-mode . [(20160326 1102) ((popwin (1 0 0))) "a mode to interact with the Rally Software web site." single ((:keywords "rally" "ca" "agile") (:url . "https://pragcraft.wordpress.com/"))]) (rake . [(20150831 358) ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) "Run rake commands" single ((:keywords "rake" "ruby") (:url . "https://github.com/asok/rake.el"))]) (rainbow-identifiers . [(20141102 926) ((emacs (24))) "Highlight identifiers according to their names" single ((:url . "https://github.com/Fanael/rainbow-identifiers"))]) (rainbow-delimiters . [(20160501 158) nil "Highlight brackets according to their depth" single ((:keywords "faces" "convenience" "lisp" "tools") (:url . "https://github.com/Fanael/rainbow-delimiters"))]) (rainbow-blocks . [(20140306 1233) nil "Block syntax highlighting for lisp code" single ((:url . "https://github.com/istib/rainbow-blocks"))]) (rails-log-mode . [(20140407 2325) nil "Major mode for viewing Rails log files" single ((:keywords "rails" "log"))]) (racket-mode . [(20160602 1632) ((emacs (24 3)) (faceup (0 0 2)) (s (1 9 0))) "Major mode for Racket language." tar ((:url . "https://github.com/greghendershott/racket-mode"))]) (racer . [(20160419 1625) ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 11 0)) (s (1 10 0))) "Rust completion and code navigation via racer" single ((:keywords "abbrev" "convenience" "matching" "rust" "tools") (:url . "https://github.com/racer-rust/emacs-racer"))]) (r-autoyas . [(20140101 910) ((ess (0)) (yasnippet (0 8 0))) "Provides automatically created yasnippets for R function argument lists." tar ((:keywords "r" "yasnippet") (:url . "https://github.com/mlf176f2/r-autoyas.el"))]) (quiet . [(20160508 756) nil "disconnect from the online world for a while" single ((:keywords "quiet" "distraction" "network" "detachment" "offline") (:url . "https://github.com/zzkt/quiet"))]) (quickrun . [(20160307 518) ((emacs (24)) (cl-lib (0 5))) "Run commands quickly" single ((:url . "https://github.com/syohex/emacs-quickrun"))]) (quick-preview . [(20150828 2339) nil "quick preview using GNOME sushi, gloobus or quick look" single ((:keywords "files" "hypermedia") (:url . "https://github.com/myuhe/quick-preview.el"))]) (quelpa-use-package . [(20150805 528) ((emacs (24 3)) (quelpa (0)) (use-package (2))) "quelpa handler for use-package" single ((:keywords "package" "management" "elpa" "use-package") (:url . "https://github.com/quelpa/quelpa-use-package"))]) (quelpa . [(20160325 829) ((package-build (0)) (emacs (24 3))) "Emacs Lisp packages built directly from source" tar ((:keywords "package" "management" "build" "source" "elpa") (:url . "https://github.com/quelpa/quelpa"))]) (quasi-monochrome-theme . [(20150801 1525) nil "High contrast quasi monochrome color theme" single ((:keywords "color-theme" "monochrome" "high contrast") (:url . "https://github.com/lbolla/emacs-quasi-monochrome"))]) (quack . [(20160410 407) nil "enhanced support for editing and running Scheme code" single nil]) (qml-mode . [(20160108 904) nil "Major mode for editing QT Declarative (QML) code." single ((:keywords "qml" "qt" "qt declarative") (:url . "https://github.com/coldnew/qml-mode"))]) (qiita . [(20140118 244) ((helm (1 5 9)) (markdown-mode (2 0))) "Qiita API Library for emacs" single ((:keywords "qiita") (:url . "https://github.com/gongo/qiita-el"))]) (pyvenv . [(20160527 642) nil "Python virtual environment interface" single ((:keywords "python" "virtualenv" "tools") (:url . "http://github.com/jorgenschaefer/pyvenv"))]) (pythonic . [(20160221 1323) ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) "Utility functions for writing pythonic emacs package." single ((:url . "https://github.com/proofit404/pythonic"))]) (python-x . [(20160313 836) ((python (0 24)) (folding (0)) (cl-lib (0 5))) "python.el extras for interactive evaluation" tar ((:keywords "python" "eval" "folding") (:url . "https://github.com/wavexx/python-x.el") (:author . "Yuri D'Elia <wavexx@thregr.org>"))]) (python-mode . [(20160521 210) nil "Python major mode" tar nil]) (python-info . [(20151228 1252) nil "Python info manual for Emacs" tar nil]) (python-environment . [(20150310 353) ((deferred (0 3 1))) "virtualenv API for Emacs Lisp" tar ((:keywords "applications" "tools"))]) (python-django . [(20150821 2304) nil "A Jazzy package for managing Django projects" single ((:keywords "languages") (:url . "https://github.com/fgallina/python-django.el"))]) (python-cell . [(20131029 1816) nil "Support for MATLAB-like cells in python mode" single ((:keywords "python" "matlab" "cell"))]) (pylint . [(20160505 444) nil "minor mode for running `pylint'" single ((:keywords "languages" "python"))]) (pyimpsort . [(20160129 2253) ((emacs (24 3))) "Sort python imports." tar ((:keywords "convenience") (:url . "https://github.com/emacs-pe/pyimpsort.el"))]) (pyfmt . [(20150521 1556) nil "Emacs interface to pyfmt" single ((:keywords "tools") (:url . "https://github.com/aheaume/pyfmt.el"))]) (pyenv-mode-auto . [(20160123 141) ((pyenv-mode (0 1 0)) (s (1 11 0)) (f (0 17 0))) "Automatically activates pyenv version if .python-version file exists." single ((:keywords "python" "pyenv") (:url . "https://github.com/ssbb/pyenv-mode-auto"))]) (pyenv-mode . [(20160221 1323) ((pythonic (0 1 0))) "Integrate pyenv with python-mode" single ((:url . "https://github.com/proofit404/pyenv-mode"))]) (pydoc-info . [(20110301 234) nil "Better Python support for info-lookup-symbol." tar nil]) (pydoc . [(20160529 1839) nil "functional, syntax highlighted pydoc navigation" single ((:keywords "pydoc" "python") (:url . "https://github.com/statmobile/pydoc"))]) (pycarddavel . [(20150831 716) ((helm (1 7 0)) (emacs (24 0))) "Integrate pycarddav" single ((:keywords "helm" "pyccarddav" "carddav" "message" "mu4e" "contacts"))]) (py-yapf . [(20160101 612) nil "Use yapf to beautify a Python buffer" single ((:url . "https://github.com/paetzke/py-yapf.el"))]) (py-smart-operator . [(20150824 2110) ((s (1 9 0))) "smart-operator for python-mode" single ((:keywords "python" "convenience" "smart-operator"))]) (py-isort . [(20150422 1039) nil "Use isort to sort the imports in a Python buffer" single ((:url . "http://paetzke.me/project/py-isort.el"))]) (py-import-check . [(20130802 611) nil "Finds the unused python imports using importchecker" single ((:keywords "python" "import" "check") (:url . "https://github.com/psibi/emacs-py-import-check"))]) (py-autopep8 . [(20151231 814) nil "Use autopep8 to beautify a Python buffer" single ((:url . "http://paetzke.me/project/py-autopep8.el"))]) (px . [(20141006 748) nil "preview inline latex in any mode" single ((:url . "http://github.com/aaptel/preview-latex"))]) (pushbullet . [(20140809 732) ((grapnel (0 5 2)) (json (1 2))) "Emacs client for the PushBullet Android app" single ((:keywords "convenience") (:url . "http://www.github.com/theanalyst/revolver"))]) (purty-mode . [(20131004 1759) nil "Safely pretty-print greek letters, mathematical symbols, or anything else." single nil]) (purple-haze-theme . [(20141014 2129) ((emacs (24 0))) "an overtly purple color theme for Emacs24." single ((:url . "https://github.com/jasonm23/emacs-purple-haze-theme"))]) (purescript-mode . [(20150316 2028) nil "A PureScript editing mode" tar nil]) (puppet-mode . [(20160416 1136) ((emacs (24 1)) (pkg-info (0 4))) "Major mode for Puppet manifests" single ((:keywords "languages") (:url . "https://github.com/lunaryorn/puppet-mode"))]) (punpun-theme . [(20160527 430) nil "A bleak theme" tar nil]) (pungi . [(20150222 646) ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) "Integrates jedi with virtualenv and buildout python environments" single ((:keywords "convenience"))]) (punctuality-logger . [(20141120 1431) nil "Punctuality logger for Emacs" single ((:keywords "reminder" "calendar") (:url . "https://gitlab.com/elzair/punctuality-logger"))]) (puml-mode . [(20160324 1725) nil "Major mode for PlantUML" single ((:keywords "uml" "plantuml" "ascii"))]) (pt . [(20160119 1017) nil "A front-end for pt, The Platinum Searcher." single ((:keywords "pt" "ack" "ag" "grep" "search") (:url . "https://github.com/bling/pt.el"))]) (psysh . [(20160509 908) nil "PsySH, PHP interactive shell (REPL)" single ((:keywords "process" "php") (:url . "https://github.com/zonuexe/psysh.el"))]) (psvn . [(20151103 1242) nil "Subversion interface for emacs" single nil]) (psession . [(20160515 159) ((emacs (24)) (cl-lib (0 5))) "Persistent save of elisp objects." single ((:url . "https://github.com/thierryvolpiatto/psession"))]) (psci . [(20150328 1401) ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) "Major mode for purescript repl psci" tar ((:keywords "purescript" "psci" "repl" "major" "mode") (:url . "https://github.com/ardumont/emacs-psci"))]) (protobuf-mode . [(20150521 2211) nil "major mode for editing protocol buffers." single ((:keywords "google" "protobuf" "languages"))]) (propfont-mixed . [(20150113 1611) ((emacs (24)) (cl-lib (0 5))) "Use proportional fonts with space-based indentation." single ((:keywords "faces") (:url . "https://github.com/ikirill/propfont-mixed"))]) (prop-menu . [(20150728 618) ((emacs (24 3)) (cl-lib (0 5))) "Create and display a context menu based on text and overlay properties" single ((:keywords "convenience") (:url . "https://github.com/david-christiansen/prop-menu-el"))]) (prompt-text . [(20160106 809) nil "Various information in minibuffer prompt" single ((:keywords "utility" "minibuffer") (:url . "https://github.com/10sr/prompt-text-el"))]) (projmake-mode . [(20150619 1620) ((dash (20150611 922)) (indicators (20130217 1405))) "Project oriented automatic builder and error highlighter, flymake for projects" tar nil]) (projectile-speedbar . [(20150629 1353) ((projectile (0 11 0))) "projectile integration for speedbar" single ((:keywords "project" "convenience" "speedbar" "projectile") (:url . "https://github.com/anshulverma/projectile-speedbar"))]) (projectile-sift . [(20160107 415) ((sift (0 2 0)) (projectile (0 13 0))) "Run a sift with Projectile" single ((:keywords "sift" "projectile") (:url . "https://github.com/nlamirault/sift.el"))]) (projectile-rails . [(20160519 239) ((emacs (24 3)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects based on projectile-mode" single ((:keywords "rails" "projectile") (:url . "https://github.com/asok/projectile-rails"))]) (projectile-hanami . [(20160505 811) ((emacs (24 3)) (projectile (0 12 0)) (rake (0 3 2)) (inf-ruby (2 2 6))) "Minor mode for Hanami projects based on projectile" single ((:keywords "hanami" "ruby" "projectile") (:url . "https://github.com/avdgaag/projectile-hanami"))]) (projectile-direnv . [(20160305 1938) ((emacs (24)) (s (1 11 0)) (dash (2 12 0)) (projectile (0 13 0))) "Set environment variables from .envrc" single ((:keywords "convenience") (:url . "https://github.com/christianromney/projectile-direnv"))]) (projectile . [(20160526 1032) ((dash (2 11 0)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single ((:keywords "project" "convenience") (:url . "https://github.com/bbatsov/projectile"))]) (project-root . [(20110206 1430) nil "Define a project root and take actions based upon it." single nil]) (project-persist-drawer . [(20151108 622) ((project-persist (0 3))) "Use a project drawer with project-persist." tar nil]) (project-persist . [(20150519 1524) nil "A minor mode to allow loading and saving of project settings." tar nil]) (project-local-variables . [(20080502 1152) nil "Set project-local variables from a file." single ((:keywords "project" "convenience") (:url . "http://www.emacswiki.org/cgi-bin/wiki/ProjectLocalVariables"))]) (project-explorer . [(20150503 1914) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single ((:url . "https://github.com/sabof/project-explorer"))]) (programmer-dvorak . [(20150426 2037) nil "Input method for Programmer Dvorak." single ((:keywords "dvorak" "programmer-dvorak" "input-method") (:url . "https://github.com/yangchenyun/programmer-dvorak"))]) (prognth . [(20130920 1259) nil "Extend prog1 to arbitrary index" single ((:keywords "lisp"))]) (professional-theme . [(20150315 600) nil "Emacs port of Vim's professional theme" single ((:keywords "theme" "light" "professional") (:url . "https://github.com/juanjux/emacs-professional-theme"))]) (prodigy . [(20160429 154) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single ((:url . "http://github.com/rejeep/prodigy.el"))]) (processing-snippets . [(20140426 928) ((yasnippet (0 8 0))) "Snippets for processing-mode" tar nil]) (processing-mode . [(20150217 632) nil "Major mode for Processing 2.0" single ((:keywords "languages" "snippets") (:url . "https://github.com/ptrv/processing2-emacs"))]) (proc-net . [(20130321 1912) nil "network process tools" single ((:keywords "processes") (:url . "http://github.com/nicferrier/emacs-procnet"))]) (private-diary . [(20151216 1057) ((emacs (24 0))) "maintain a private diary in Emacs" single ((:keywords "diary" "encryption") (:url . "https://github.com/cacology/private-diary"))]) (private . [(20150121 1957) ((aes (0 6))) "take care of your private configuration files." single ((:keywords "private" "configuration" "backup" "recover") (:url . "https://github.com/cheunghy/private"))]) (pretty-symbols . [(20140814 459) nil "Draw tokens as Unicode glyphs." single ((:keywords "faces") (:url . "http://github.com/drothlis/pretty-symbols"))]) (pretty-sha-path . [(20141105 1226) nil "Prettify Guix/Nix store paths" single ((:keywords "faces" "convenience") (:url . "https://gitorious.org/alezost-emacs/pretty-sha-path"))]) (pretty-mode . [(20160416 934) nil "Redisplay parts of the buffer as pretty symbols." single ((:keywords "pretty" "unicode" "symbols") (:url . "https://github.com/akatov/pretty-mode"))]) (pretty-lambdada . [(20151231 1748) nil "Show the word `lambda' as the Greek letter." single ((:keywords "convenience" "display") (:url . "http://www.emacswiki.org/pretty-lambdada.el"))]) (preproc-font-lock . [(20151107 1418) nil "Highlight C-style preprocessor directives." single ((:keywords "c" "languages" "faces") (:url . "https://github.com/Lindydancer/preproc-font-lock"))]) (ppd-sr-speedbar . [(20151108 624) ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 4))) "Sr Speedbar adaptor for project-persist-drawer." tar nil]) (pp-c-l . [(20151231 1747) nil "Display Control-l characters in a pretty way" single ((:keywords "display" "convenience" "faces") (:url . "http://www.emacswiki.org/pp-c-l.el"))]) (pp+ . [(20160523 1639) nil "Extensions to `pp.el'." single ((:keywords "lisp") (:url . "http://www.emacswiki.org/pp%2b.el"))]) (powershell . [(20160210 2058) ((emacs (24))) "Mode for editing Powershell scripts" single ((:keywords "powershell" "languages") (:url . "http://github.com/jschaf/powershell.el"))]) (powerline-evil . [(20151112 910) ((evil (1 0 8)) (powerline (2 3))) "Utilities for better Evil support for Powerline" tar ((:keywords "evil" "mode-line" "powerline") (:url . "http://github.com/raugturi/powerline-evil/"))]) (powerline . [(20160601 924) ((cl-lib (0 2))) "Rewrite of Powerline" tar ((:keywords "mode-line") (:url . "http://github.com/milkypostman/powerline/"))]) (pow . [(20140420 306) ((emacs (24)) (cl-lib (0 5))) "pow (http://pow.cx/) manager for emacs" tar ((:keywords "develop" "web" "pow") (:url . "http://github.com/yukihr/emacs-pow"))]) (pov-mode . [(20120825 916) nil "Major mode for editing POV-Ray scene files." tar nil]) (pos-tip . [(20150318 1013) nil "Show tooltip at point" single ((:keywords "tooltip"))]) (portage-navi . [(20141208 755) ((concurrent (0 3 1)) (ctable (0 1 2))) "portage viewer" single ((:keywords "tools" "gentoo") (:url . "https://github.com/kiwanami/emacs-portage-navi"))]) (popwin . [(20150315 800) nil "Popup Window Manager." single ((:keywords "convenience"))]) (popup-switcher . [(20160518 539) ((cl-lib (0 3)) (popup (0 5 3))) "switch to other buffers and files via popup." single ((:keywords "popup" "switch" "buffers" "functions") (:url . "https://github.com/kostafey/popup-switcher"))]) (popup-kill-ring . [(20131020 1354) ((popup (0 4)) (pos-tip (0 4))) "interactively insert item from kill-ring" single ((:keywords "popup" "kill-ring" "pos-tip") (:url . "https://github.com/waymondo/popup-kill-ring"))]) (popup-imenu . [(20160409 710) ((dash (2 12 1)) (popup (0 5 3)) (flx-ido (0 6 1))) "imenu index popup" single ((:keywords "popup" "imenu") (:url . "https://github.com/ancane/popup-imenu"))]) (popup-complete . [(20141108 2108) ((popup (0 5 0))) "completion with popup" single ((:url . "https://github.com/syohex/emacs-popup-complete"))]) (popup . [(20160531 625) ((cl-lib (0 5))) "Visual Popup User Interface" single ((:keywords "lisp"))]) (poporg . [(20150603 2047) nil "Pop a comment or string to an empty buffer for text editing" single ((:keywords "outlines" "tools") (:url . "https://github.com/QBobWatson/poporg"))]) (pophint . [(20150930 1234) ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" tar ((:keywords "popup") (:url . "https://github.com/aki2o/emacs-pophint"))]) (pony-snippets . [(20160204 2211) ((yasnippet (0 8 0))) "Yasnippets for Pony" tar ((:keywords "snippets" "pony") (:url . "https://github.com/seantallen/pony-snippets"))]) (pony-mode . [(20151028 502) nil "Minor mode for working with Django Projects" tar nil]) (pomodoro . [(20150716 1246) nil "A timer for the Pomodoro Technique" single nil]) (polymode . [(20160520 2029) ((emacs (24))) "Versatile multiple modes with extensive literate programming support" tar ((:url . "https://github.com/vitoshka/polymode"))]) (pointback . [(20100210 952) nil "Restore window points when returning to buffers" single ((:keywords "convenience"))]) (point-undo . [(20100504 329) nil "undo/redo position" single nil]) (pocket-api . [(20160530 938) ((emacs (24 4)) (request (0 2))) "another pocket api" single ((:keywords "convenience" "pocket") (:url . "https://github.com/lujun9972/pocket-api.el"))]) (pmdm . [(20151109 1236) nil "poor man's desktop-mode alternative." single ((:url . "https://bitbucket.com/inigoserna/pmdm.el"))]) (plur . [(20160504 424) ((emacs (24 4))) "Easily search and replace multiple variants of a word" single ((:url . "https://github.com/xuchunyang/plur"))]) (plsql . [(20121115 443) nil "Programming support for PL/SQL code" single ((:keywords "languages") (:url . "http://www.emacswiki.org/elisp/plsql.el"))]) (plsense-direx . [(20140520 1508) ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perl Package Explorer" single ((:keywords "perl" "convenience") (:url . "https://github.com/aki2o/plsense-direx"))]) (plsense . [(20151104 845) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) "provide interface for PlSense that is a development tool for Perl." single ((:keywords "perl" "completion") (:url . "https://github.com/aki2o/emacs-plsense"))]) (plenv . [(20130707 116) nil "A plenv wrapper for Emacs" single ((:keywords "emacs" "perl"))]) (platformio-mode . [(20160327 2020) ((projectile (0 13 0))) "PlatformIO integration" single ((:url . "https://github.com/zachmassia/platformio-mode"))]) (plantuml-mode . [(20150601 131) nil "No description available." single nil]) (planet-theme . [(20160425 2258) ((emacs (24))) "A dark theme inspired by Gmail's 'Planets' theme of yore" single ((:keywords "themes") (:url . "https://github.com/cmack/emacs-planet-theme"))]) (plan9-theme . [(20160111 2123) nil "A color theme for Emacs based on Plan9" single ((:url . "https://github.com/john2x/plan9-theme.el"))]) (pkgbuild-mode . [(20151010 936) nil "Interface to the ArchLinux package manager" single nil]) (pkg-info . [(20150517 643) ((epl (0 8))) "Information about packages" single ((:keywords "convenience") (:url . "https://github.com/lunaryorn/pkg-info.el"))]) (pixiv-novel-mode . [(20160220 821) nil "Major mode for pixiv novel" single ((:keywords "novel" "pixiv"))]) (pixie-mode . [(20150121 2324) ((clojure-mode (3 0 1)) (inf-clojure (1 0 0))) "Major mode for Pixie-lang" single ((:url . "https://github.com/johnwalker/pixie-mode"))]) (pivotal-tracker . [(20151203 1350) nil "Interact with Pivotal Tracker through its API" single ((:url . "http://github.com/jxa/pivotal-tracker"))]) (pip-requirements . [(20160131 1126) ((dash (2 8 0))) "A major mode for editing pip requirements files." single nil]) (pinyinlib . [(20160505 1448) nil "Convert first letter of Pinyin to Simplified/Traditional Chinese characters" single ((:keywords "extensions"))]) (pinyin-search . [(20160514 2258) ((pinyinlib (0 1 0))) "Search Chinese by Pinyin" single ((:keywords "chinese" "search") (:url . "https://github.com/xuchunyang/pinyin-search.el"))]) (pinot . [(20140211 1426) nil "Emacs interface to pinot-search" tar nil]) (pinboard-api . [(20140324 648) nil "Rudimentary http://pinboard.in integration" single ((:keywords "pinboard" "www") (:url . "https://github.com/danieroux/pinboard-api-el"))]) (pillar . [(20141112 1211) ((makey (0 3))) "Major mode for editing Pillar files" tar ((:keywords "markup" "major-mode") (:url . "http://github.com/DamienCassou/pillar-mode"))]) (pig-snippets . [(20130913 124) ((yasnippet (0 8 0))) "Snippets for pig-mode" tar nil]) (pig-mode . [(20140617 1258) nil "Major mode for Pig files" single nil]) (picolisp-mode . [(20150516 355) nil "Major mode for PicoLisp programming." single ((:keywords "picolisp" "lisp" "programming") (:url . "https://github.com/flexibeast/picolisp-mode"))]) (pianobar . [(20120128 1501) nil "thin wrapper for Pianobar, a Pandora Radio client" single ((:url . "http://github.com/agrif/pianobar.el"))]) (phpunit . [(20160531 927) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5)) (cl-lib (0 5)) (emacs (24 3))) "Launch PHP unit tests using phpunit" tar ((:keywords "php" "tests" "phpunit") (:url . "https://github.com/nlamirault/phpunit.el"))]) (phpcbf . [(20150302 728) ((s (1 9 0))) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" single ((:keywords "tools" "php") (:url . "https://github.com/nishimaki10/emacs-phpcbf"))]) (php-refactor-mode . [(20160417 1646) nil "Minor mode to quickly and safely perform common refactorings" single ((:keywords "php" "refactor") (:url . "https://github.com/keelerm84/php-refactor-mode.el"))]) (php-mode . [(20160526 625) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing PHP code" tar ((:url . "https://github.com/ejmr/php-mode"))]) (php-eldoc . [(20140202 1341) nil "eldoc backend for php" tar ((:url . "https://github.com/sabof/php-eldoc"))]) (php-boris-minor-mode . [(20140209 1235) ((php-boris (0 0 1)) (highlight (0))) "a minor mode to evaluate PHP code in the Boris repl" single ((:keywords "php" "repl" "eval") (:url . "https://github.com/steckerhalter/php-boris-minor-mode"))]) (php-boris . [(20130527 321) nil "Run boris php REPL" single ((:keywords "php" "commint" "repl" "boris"))]) (php-auto-yasnippets . [(20141128 1611) ((php-mode (1 11)) (yasnippet (0 8 0))) "Creates snippets for PHP functions" tar ((:url . "https://github.com/ejmr/php-auto-yasnippets"))]) (php+-mode . [(20121129 1452) nil "A better PHP mode with Zend Framework 1 support." tar nil]) (phi-search-migemo . [(20150116 706) ((phi-search (2 2 0)) (migemo (1 9 1))) "migemo extension for phi-search" single ((:url . "http://hins11.yu-yake.com/"))]) (phi-search-dired . [(20150405 214) ((phi-search (2 2 0))) "interactive filtering for dired powered by phi-search" single ((:url . "http://hins11.yu-yake.com/"))]) (phi-search . [(20150807 312) nil "another incremental search & replace, compatible with \"multiple-cursors\"" tar ((:url . "http://hins11.yu-yake.com/"))]) (phi-rectangle . [(20151208 54) nil "another rectangle-mark command (rewrite of rect-mark)" single ((:url . "http://hins11.yu-yake.com/"))]) (phi-grep . [(20150212 924) ((cl-lib (0 1))) "Interactively-editable recursive grep implementation in elisp" single ((:url . "http://hins11.yu-yake.com/"))]) (phi-autopair . [(20150527 423) ((paredit (20))) "another simple-minded autopair implementation" single ((:url . "http://hins11.yu-yake.com/"))]) (ph . [(20130312 1337) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar nil]) (pg . [(20130731 1642) nil "Emacs Lisp interface to the PostgreSQL RDBMS" single ((:keywords "data" "comm" "database" "postgresql"))]) (perspective . [(20160219 1822) ((cl-lib (0 5))) "switch between named \"perspectives\" of the editor" single ((:keywords "workspace" "convenience" "frames") (:url . "http://github.com/nex3/perspective-el"))]) (persp-projectile . [(20151220 630) ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) "Perspective integration with Projectile" single ((:keywords "project" "convenience"))]) (persp-mode . [(20160528 1138) nil "\"perspectives\" shared among frames + save/load - bugs." single ((:keywords "perspectives" "session" "workspace" "persistence" "windows" "buffers" "convenience") (:url . "https://github.com/Bad-ptr/persp-mode.el"))]) (persistent-overlays . [(20160426 1421) nil "Minor mode to store selected overlays to be loaded later" tar ((:keywords "overlays" "persistent") (:url . "https://github.com/mneilly/Emacs-Persistent-Overlays"))]) (perlbrew . [(20130127 524) nil "A perlbrew wrapper for Emacs" single ((:keywords "emacs" "perl"))]) (perl6-mode . [(20160117 1309) ((emacs (24 4)) (pkg-info (0 1))) "Major mode for editing Perl 6 code" tar ((:keywords "languages") (:url . "https://github.com/hinrik/perl6-mode"))]) (perl-completion . [(20090528 136) nil "No description available." single nil]) (per-buffer-theme . [(20160318 1701) ((cl-lib (0 5))) "Change theme according to buffer name or major mode." single ((:keywords "themes") (:url . "https://bitbucket.com/inigoserna/per-buffer-theme.el"))]) (peg . [(20150708 141) nil "Parsing Expression Grammars in Emacs Lisp" single nil]) (peep-dired . [(20160321 1737) nil "Peep at files in another window from dired buffers" single ((:keywords "files" "convenience"))]) (pdf-tools . [(20160525 1120) ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) "Support library for PDF documents." tar ((:keywords "files" "multimedia"))]) (pdb-mode . [(20150128 1151) nil "Major mode for editing Protein Data Bank files" single ((:keywords "data" "pdb") (:url . "http://bondxray.org/software/pdb-mode/"))]) (pcsv . [(20150220 531) nil "Parser of csv" single ((:keywords "data") (:url . "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el"))]) (pcre2el . [(20151213 434) ((emacs (24)) (cl-lib (0 3))) "regexp syntax converter" single ((:url . "https://github.com/joddie/pcre2el"))]) (pcomplete-extension . [(20140604 1147) ((emacs (24)) (cl-lib (0 5))) "additional completion for pcomplete" single ((:url . "https://github.com/thierryvolpiatto/pcomplete-extension"))]) (pcmpl-pip . [(20141024 348) nil "pcomplete for pip" single ((:keywords "pcomplete" "pip" "python" "tools"))]) (pcmpl-homebrew . [(20150506 2052) nil "pcomplete for homebrew" single ((:keywords "pcomplete" "homebrew" "tools"))]) (pcmpl-args . [(20120912 24) nil "Enhanced shell command completion" single ((:keywords "abbrev" "completion" "convenience" "processes" "terminals" "unix") (:url . "https://github.com/JonWaltman/pcmpl-args.el"))]) (pcache . [(20151109 839) ((eieio (1 3))) "persistent caching for Emacs." single nil]) (pc-bufsw . [(20150923 213) nil "PC style quick buffer switcher" single ((:keywords "buffer") (:url . "https://github.com/ibukanov/pc-bufsw"))]) (pbcopy . [(20150224 2259) nil "Emacs Interface to pbcopy" single ((:keywords "mac" "osx" "pbcopy") (:url . "https://github.com/jkp/pbcopy.el"))]) (paxedit . [(20160102 2021) ((cl-lib (0 5)) (paredit (23))) "Structured, Context Driven LISP Editing and Refactoring" single ((:keywords "lisp" "refactoring" "context") (:url . "https://github.com/promethial/paxedit"))]) (pathify . [(20160423 346) nil "Symlink your scripts into a PATH directory" single ((:keywords "convenience") (:url . "https://gitlab.com/alezost-emacs/pathify"))]) (path-headerline-mode . [(20140423 832) nil "Displaying file path on headerline." single ((:keywords "headerline") (:url . "https://github.com/7696122/path-headerline-mode"))]) (pastehub . [(20140615 120) nil "A client for the PasteHub cloud service" single ((:url . "https://github.com/kiyoka/pastehub"))]) (pastebin . [(20101125 1402) nil "A simple interface to the www.pastebin.com webservice" single nil]) (password-store . [(20151027 1649) ((f (0 11 0)) (s (1 9 0))) "Password store (pass) support" single ((:keywords "pass"))]) (passthword . [(20141201 323) ((cl-lib (0 5))) "Simple password manager" single nil]) (pass . [(20160214 435) ((emacs (24)) (password-store (0 1)) (f (0 17))) "Major mode for password-store.el" single ((:keywords "password-store" "password" "keychain"))]) (parent-mode . [(20150824 1800) nil "get major mode's parent modes" single ((:url . "https://github.com/Fanael/parent-mode"))]) (paren-face . [(20160521 955) nil "a face for parentheses in lisp modes" single ((:url . "http://github.com/tarsius/paren-face"))]) (paren-completer . [(20160501 552) ((emacs (24 3))) "Automatically, language agnostically, fill in delimiters." single ((:keywords "convenience") (:url . "https://github.com/MatthewBregg/paren-completer"))]) (paredit-menu . [(20160128 1133) ((paredit (25))) "Adds a menu to paredit.el as memory aid" single ((:keywords "paredit"))]) (paredit-everywhere . [(20150821 2344) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single ((:keywords "languages" "convenience"))]) (paredit . [(20160324 1415) nil "minor mode for editing parentheses" single ((:keywords "lisp"))]) (paradox . [(20160525 936) ((emacs (24 4)) (seq (1 7)) (let-alist (1 0 3)) (spinner (1 4)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar ((:keywords "package" "packages") (:url . "https://github.com/Malabarba/paradox"))]) (pangu-spacing . [(20150927 224) nil "Minor-mode to add space between Chinese and English characters." single ((:url . "http://github.com/coldnew/pangu-spacing"))]) (pallet . [(20150512 202) ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) "A package management tool for Emacs, using Cask." tar nil]) (palimpsest . [(20130731 1021) nil "Various deletion strategies when editing" single nil]) (palette . [(20151231 1745) ((hexrgb (0))) "Color palette useful with RGB, HSV, and color names" single ((:keywords "color" "rgb" "hsv" "hexadecimal" "face" "frame") (:url . "http://www.emacswiki.org/palette.el"))]) (pager-default-keybindings . [(20130719 1557) ((pager (1 0))) "Add the default keybindings suggested for pager.el" single ((:url . "http://github.com/nflath/pager-default-keybindings"))]) (pager . [(20100330 1331) nil "windows-scroll commands" single nil]) (page-break-lines . [(20160109 2013) nil "Display ugly ^L page breaks as tidy horizontal lines" single ((:keywords "convenience" "faces") (:url . "https://github.com/purcell/page-break-lines"))]) (packed . [(20160523 800) ((emacs (24 3)) (dash (2 12 1))) "package manager agnostic Emacs Lisp package utilities" single ((:keywords "compile" "convenience" "lisp" "package" "library") (:url . "https://github.com/tarsius/packed"))]) (package-utils . [(20160307 320) nil "No description available." single nil]) (package-build . [(20160530 128) ((cl-lib (0 5))) "Tools for assembling a package archive" single ((:keywords "tools"))]) (pabbrev . [(20160320 1601) nil "Predictive abbreviation expansion" single nil]) (p4 . [(20150721 1437) nil "Simple Perforce-Emacs Integration" single ((:url . "https://github.com/gareth-rees/p4.el"))]) (ox-twiki . [(20160306 1115) ((org (8)) (cl-lib (0 5))) "org Twiki and Foswiki export" single ((:keywords "org") (:url . "https://github.com/dfeich/org8-wikiexporters"))]) (ox-twbs . [(20160307 58) nil "Bootstrap compatible HTML Back-End for Org" single ((:keywords "org" "html" "publish" "twitter" "bootstrap") (:url . "https://github.com/marsmining/ox-twbs"))]) (ox-trac . [(20151102 1155) ((org (8 0))) "Org Export Backend to Trac WikiFormat" single ((:keywords "org-mode" "trac") (:url . "https://github.com/JalapenoGremlin/ox-trac"))]) (ox-tiddly . [(20151206 440) ((org (8)) (cl-lib (0 5))) "org TiddlyWiki exporter" single ((:keywords "org") (:url . "https://github.com/dfeich/org8-wikiexporters"))]) (ox-textile . [(20151114 2225) ((org (8 1))) "Textile Back-End for Org Export Engine" single ((:keywords "org" "textile") (:url . "https://github.com/yashi/org-textile"))]) (ox-rst . [(20151115 143) ((emacs (24 4)) (org (8 2 4))) "Export reStructuredText using org-mode." single ((:keywords "org" "rst" "rest" "restructuredtext") (:url . "https://github.com/masayuko/ox-rst"))]) (ox-reveal . [(20160504 2208) ((org (20150330))) "reveal.js Presentation Back-End for Org Export Engine" single ((:keywords "outlines" "hypermedia" "slideshow" "presentation"))]) (ox-pukiwiki . [(20150124 1116) ((org (8 1))) "Pukiwiki Back-End for Org Export Engine" single ((:keywords "org" "pukiwiki") (:url . "https://github.com/yashi/org-pukiwiki"))]) (ox-nikola . [(20151114 516) ((emacs (24 4)) (org (8 2 4)) (ox-rst (0 2))) "Export Nikola articles using org-mode." single ((:keywords "org" "nikola") (:url . "https://github.com/masayuko/ox-nikola"))]) (ox-mediawiki . [(20150923 1102) ((cl-lib (0 5)) (s (1 9 0))) "Mediawiki Back-End for Org Export Engine" single ((:keywords "org" "wp" "mediawiki") (:url . "https://github.com/tomalexander/orgmode-mediawiki"))]) (ox-latex-chinese . [(20160513 1928) ((emacs (24 4))) "An example org latex exporter configure for Chinese users" single ((:url . "https://github.com/tumashu/ox-latex-chinese"))]) (ox-jira . [(20160426 753) ((org (8 0))) "JIRA Backend for Org Export Engine" single ((:keywords "outlines" "hypermedia" "wp") (:url . "https://github.com/stig/ox-jira.el"))]) (ox-ioslide . [(20160120 1005) ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2)) (makey (0 3))) "Export org-mode to Google I/O HTML5 slide." tar ((:keywords "html" "presentation") (:url . "http://github.com/coldnew/org-ioslide"))]) (ox-impress-js . [(20150412 1216) ((org (8))) "impress.js Back-End for Org Export Engine" tar ((:keywords "outlines" "hypermedia" "calendar" "wp") (:url . "https://github.com/kinjo/org-impress-js.el"))]) (ox-html5slide . [(20131228 6) ((org (8 0))) "Export org-mode to HTML5 slide." single ((:keywords "html" "presentation") (:url . "http://github.com/coldnew/org-html5slide"))]) (ox-gfm . [(20160520 1642) nil "Github Flavored Markdown Back-End for Org Export Engine" single ((:keywords "org" "wp" "markdown" "github"))]) (ox-bibtex-chinese . [(20160510 706) ((emacs (24 4))) "Let ox-bibtex work well for Chinese users" single ((:url . "https://github.com/tumashu/ox-bibtex-chinese.git"))]) (ox-asciidoc . [(20160120 723) ((org (8 1))) "AsciiDoc Back-End for Org Export Engine" single ((:keywords "org" "asciidoc") (:url . "https://github.com/yashi/org-asciidoc"))]) (owdriver . [(20141011 938) ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) "Quickly perform various actions on other windows" single ((:keywords "convenience") (:url . "https://github.com/aki2o/owdriver"))]) (overseer . [(20160518 143) ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4)) (f (0 18 1))) "Ert-runner Integration Into Emacs" single ((:url . "http://www.github.com/tonini/overseer.el"))]) (ov . [(20150312 28) ((emacs (24 3))) "Overlay library for Emacs Lisp" single ((:keywords "overlay") (:url . "https://github.com/ShingoFukuyama/ov.el"))]) (outshine . [(20160416 1046) ((outorg (2 0)) (cl-lib (0 5))) "outline with outshine outshines outline" tar ((:url . "https://github.com/tj64/outshine"))]) (outorg . [(20160327 332) nil "Org-style comment editing" single ((:url . "https://github.com/tj64/outorg"))]) (outlined-elisp-mode . [(20131108 527) nil "outline-minor-mode settings for emacs lisp" single ((:url . "http://hins11.yu-yake.com/"))]) (outline-magic . [(20150209 1626) nil "outline mode extensions for Emacs" single ((:keywords "outlines"))]) (osx-trash . [(20160520 800) ((emacs (24 1))) "System trash for OS X" tar ((:keywords "files" "convenience" "tools" "unix") (:url . "https://github.com/lunaryorn/osx-trash.el"))]) (osx-pseudo-daemon . [(20131026 1930) nil "Daemon mode that plays nice with OSX." single ((:keywords "convenience" "osx") (:url . "https://github.com/DarwinAwardWinner/osx-pseudo-daemon"))]) (osx-plist . [(20101130 648) nil "Apple plist file parser" single ((:keywords "convenience"))]) (osx-org-clock-menubar . [(20150205 1511) nil "simple menubar integration for org-clock" tar ((:keywords "org" "osx") (:url . "https://github.com/jordonbiondo/osx-org-clock-menubar"))]) (osx-location . [(20150613 417) nil "Watch and respond to changes in geographical location on OS X" tar nil]) (osx-lib . [(20160402 136) ((emacs (24 4))) "Basic function for Apple/OSX." single ((:keywords "apple" "applescript" "osx" "finder" "emacs" "elisp" "vpn" "speech"))]) (osx-dictionary . [(20160215 926) ((cl-lib (0 5))) "Interface for OSX Dictionary.app" tar ((:keywords "mac" "dictionary") (:url . "https://github.com/xuchunyang/osx-dictionary.el"))]) (osx-clipboard . [(20141012 217) nil "Use the OS X clipboard from terminal Emacs" single ((:url . "https://github.com/joddie/osx-clipboard-mode"))]) (orgtbl-show-header . [(20141023 337) nil "Show the header of the current column in the minibuffer" single nil]) (orgtbl-join . [(20150121 1646) ((cl-lib (0 5))) "join columns from another table" tar ((:keywords "org" "table" "join" "filtering"))]) (orgtbl-ascii-plot . [(20151215 1551) nil "ascii-art bar plots in org-mode tables" single ((:keywords "org" "table" "ascii" "plot"))]) (orgtbl-aggregate . [(20160421 926) nil "Create an aggregated Org table from another one" tar ((:keywords "org" "table" "aggregation" "filtering"))]) (orglink . [(20160521 930) ((emacs (24 3)) (dash (2 12 1)) (org (8 3))) "use Org Mode links in other modes" single ((:keywords "hypertext") (:url . "http://github.com/tarsius/orglink"))]) (orgit . [(20160119 1624) ((emacs (24 4)) (dash (2 12 1)) (magit (2 4 1)) (org (8 3 3))) "support for Org links to Magit buffers" single ((:url . "https://github.com/magit/orgit"))]) (orgbox . [(20140528 2026) ((org (8 0)) (cl-lib (0 5))) "Mailbox-like task scheduling Org." single ((:keywords "org") (:url . "https://github.com/yasuhito/orgbox"))]) (organic-green-theme . [(20160531 518) nil "Low-contrast green color theme." single nil]) (org2jekyll . [(20160519 1204) ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1)) (kv (0 0 19))) "Minor mode to publish org-mode post to jekyll without specific yaml" tar ((:keywords "org-mode" "jekyll" "blog" "publish") (:url . "https://github.com/ardumont/org2jekyll"))]) (org2issue . [(20160426 2018) ((org (8 0)) (emacs (24 4)) (ox-gfm (0 1)) (gh (0 1)) (s (20160405 920))) "export org to github issue" single ((:keywords "convenience" "github" "org") (:url . "https://github.com/lujun9972/org2issue"))]) (org2blog . [(20160502 2021) ((org (8 1)) (xml-rpc (1 6 8)) (metaweblog (0 1))) "Blog from Org mode to wordpress" tar nil]) (org-wunderlist . [(20150817 2113) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4)) (s (1 9 0))) "Org sync with Wunderlist" single ((:keywords "convenience") (:url . "https://github.com/myuhe/org-wunderlist.el"))]) (org-webpage . [(20160307 226) ((cl-lib (1 0)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (web-server (0 1))) "a static site generator based on org mode." tar nil]) (org-vcard . [(20151214 22) nil "org-mode support for vCard export and import." tar ((:keywords "outlines" "org" "vcard") (:url . "https://github.com/flexibeast/org-vcard"))]) (org-trello . [(20160301 1141) ((request-deferred (0 2 0)) (deferred (0 4 0)) (s (1 11 0)) (dash-functional (2 12 1)) (dash (2 12 1)) (emacs (24))) "Minor mode to synchronize org-mode buffer and trello board" tar nil]) (org-tree-slide . [(20160514 125) nil "A presentation tool for org-mode" single ((:keywords "org-mode" "presentation" "narrowing"))]) (org-transform-tree-table . [(20150110 833) ((dash (2 10 0)) (s (1 3 0))) "Transform org-mode tree with properties to a table, and the other way around" single ((:keywords "org-mode" "table" "org-table" "tree" "csv" "convert") (:url . "https://github.com/jplindstrom/emacs-org-transform-tree-table"))]) (org-tracktable . [(20160420 845) ((emacs (24)) (cl-lib (0 5))) "Track your writing progress in an org-table" single ((:keywords "org" "writing") (:url . "https://github.com/tty-tourist/org-tracktable"))]) (org-toodledo . [(20150301 513) ((request-deferred (0 2 0)) (emacs (24)) (cl-lib (0 5))) "Toodledo integration for Emacs Org mode" tar ((:keywords "outlines" "data"))]) (org-time-budgets . [(20151111 201) ((alert (0 5 10)) (cl-lib (0 5))) "Define time budgets and display clocked time." single nil]) (org-themis . [(20160121 2204) ((cl-lib (0 4))) "Experimental project management mode for org-mode" single ((:keywords "org-mode" "elisp" "project") (:url . "http://github.com/zellio/org-themis"))]) (org-tfl . [(20160407 1640) ((org (0 16 2)) (cl-lib (0 5)) (emacs (24 1))) "Transport for London meets Orgmode" tar ((:keywords "org" "tfl") (:url . "https://github.com/storax/org-tfl"))]) (org-table-comment . [(20120209 1251) nil "Org table comment modes." single ((:keywords "org-mode" "orgtbl") (:url . "http://github.com/mlf176f2/org-table-comment.el"))]) (org-sync . [(20150817 954) ((cl-lib (0 5)) (org (8 2)) (emacs (24))) "Synchronize Org documents with External Issue Trackers" tar ((:keywords "org" "synchronization" "issue tracking" "github" "redmine") (:url . "https://github.com/arbox/org-sync"))]) (org-repo-todo . [(20160307 1229) nil "Simple repository todo management with org-mode" single ((:keywords "convenience") (:url . "https://github.com/waymondo/org-repo-todo"))]) (org-ref . [(20160527 1331) ((dash (2 11 0)) (parsebib (1 0)) (hydra (0 13 2)) (key-chord (0)) (s (1 10 0)) (f (0 18 0)) (emacs (24 4))) "citations, cross-references and bibliographies in org-mode" tar ((:keywords "org-mode" "cite" "ref" "label") (:url . "https://github.com/jkitchin/org-ref"))]) (org-readme . [(20151204 617) ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0)) (cl-lib (0 5))) "Integrates Readme.org and Commentary/Change-logs." tar ((:keywords "header2" "readme.org" "emacswiki" "git") (:url . "https://github.com/mlf176f2/org-readme"))]) (org-random-todo . [(20160208 626) ((emacs (24 3)) (alert (1 2))) "notify of random TODO's" single ((:keywords "org" "todo" "notification"))]) (org-protocol-jekyll . [(20151119 1038) ((cl-lib (0 5))) "Jekyll's handler for org-protocol" single nil]) (org-projectile . [(20160520 1714) ((projectile (0 11 0)) (dash (2 10 0))) "Repository todo management for org-mode" single ((:keywords "org" "projectile" "todo") (:url . "https://github.com/IvanMalison/org-projectile"))]) (org-present . [(20141109 1956) ((org (7))) "Minimalist presentation minor-mode for Emacs org-mode." single ((:url . "https://github.com/rlister/org-present"))]) (org-pomodoro . [(20151217 753) ((alert (0 5 10)) (cl-lib (0 5))) "Pomodoro implementation for org-mode." tar ((:url . "https://github.com/lolownia/org-pomodoro"))]) (org-pdfview . [(20160125 1454) ((org (6 1)) (pdf-tools (0 40))) "Support for links to documents in pdfview mode" single ((:keywords "org" "pdf-view" "pdf-tools"))]) (org-password-manager . [(20160430 2051) ((org (8 2 10)) (s (1 9 0))) "Minimal password manager for Emacs Org Mode." single ((:keywords "password") (:url . "https://git.leafac.com/leafac/org-password-manager"))]) (org-page . [(20160413 529) ((ht (1 5)) (simple-httpd (1 4 6)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (cl-lib (0 5)) (git (0 1 1))) "a static site generator based on org mode" tar nil]) (org-outlook . [(20150914 747) nil "Outlook org" tar ((:keywords "org-outlook") (:url . "https://github.com/mlf176f2/org-outlook.el"))]) (org-multiple-keymap . [(20150328 2006) ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) "Set keymap to elements, such as timestamp and priority." single ((:keywords "convenience" "org-mode") (:url . "https://github.com/myuhe/org-multiple-keymap.el"))]) (org-mobile-sync . [(20131118 1316) ((emacs (24 3 50)) (org (8 0))) "automatically sync org-mobile on changes" single ((:keywords "org-mode" "org" "mobile" "sync" "todo") (:url . "https://github.com/steckerhalter/org-mobile-sync"))]) (org-mac-link . [(20160109 1643) nil "Insert org-mode links to items selected in various Mac apps" single ((:keywords "org" "mac" "hyperlink"))]) (org-mac-iCal . [(20140107 719) nil "Imports events from iCal.app to the Emacs diary" single ((:keywords "outlines" "calendar"))]) (org-linkany . [(20160206 2211) ((log4e (0 2 0)) (yaxception (0 1))) "Insert link using anything.el/helm.el on org-mode" single ((:keywords "org" "completion") (:url . "https://github.com/aki2o/org-linkany"))]) (org-link-travis . [(20140405 1827) ((org (7))) "Insert/Export the link of Travis CI on org-mode" single ((:keywords "org") (:url . "https://github.com/aki2o/org-link-travis"))]) (org-jira . [(20150911 758) nil "Syncing between Jira and Org-mode." tar ((:url . "https://github.com/baohaojun/org-jira"))]) (org-iv . [(20160602 152) ((impatient-mode (1 0 0)) (org (8 0)) (cl-lib (0 5))) "a tool used to view html (in browser) generated by org-file once the org-file changes" tar nil]) (org-if . [(20150920 1013) nil "Interactive Fiction Authoring System for Org-Mode." tar nil]) (org-grep . [(20151202 629) ((cl-lib (0 5))) "Kind of M-x rgrep adapted for Org mode." single ((:url . "https://github.com/pinard/org-grep"))]) (org-gnome . [(20150614 957) ((alert (1 2)) (telepathy (0 1)) (gnome-calendar (0 1))) "Orgmode integration with the GNOME desktop" single ((:keywords "org" "gnome"))]) (org-gcal . [(20160307 1406) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) "Org sync with Google Calendar" single ((:keywords "convenience") (:url . "https://github.com/myuhe/org-gcal.el"))]) (org-fstree . [(20090723 1019) nil "include a filesystem subtree into an org file" single ((:keywords "org-mode" "filesystem" "tree") (:url . "http://www.burtzlaff.de/org-fstree/org-fstree.el"))]) (org-eww . [(20160521 1658) ((org (8 0)) (emacs (24 4))) "automatically use eww to preview current org-file when save" single ((:keywords "convenience" "eww" "org") (:url . "https://github.com/lujun9972/org-eww"))]) (org-elisp-help . [(20130423 1745) ((cl-lib (0 2)) (org (8 0))) "org links to emacs-lisp documentation" single ((:keywords "org" "remember" "lisp") (:url . "https://github.com/tarsius/org-elisp-help"))]) (org-ehtml . [(20150506 1858) ((web-server (20140109 2200)) (emacs (24 3))) "Export Org-mode files as editable web pages" tar nil]) (org-dropbox . [(20150113 2309) ((dash (2 2)) (names (20150000)) (emacs (24))) "move Dropbox notes from phone into org-mode datetree" single ((:keywords "dropbox" "android" "notes" "org-mode") (:url . "https://github.com/heikkil/org-dropbox"))]) (org-drill-table . [(20140117 337) ((s (1 7 0)) (dash (2 2 0)) (cl-lib (0 3)) (org-plus-contrib (8 2)) (emacs (24 1))) "Generate drill cards from org tables" single nil]) (org-dp . [(20160326 803) ((cl-lib (0 5))) "Declarative Local Programming with Org Elements" tar ((:url . "https://github.com/tj64/org-dp"))]) (org-download . [(20160411 910) ((async (1 2))) "Image drag-and-drop for Emacs org-mode" single ((:keywords "images" "screenshots" "download") (:url . "https://github.com/abo-abo/org-download"))]) (org-dotemacs . [(20151119 1222) ((org (7 9 3)) (cl-lib (1 0))) "Store your emacs config as an org file, and choose which bits to load." single ((:keywords "local") (:url . "https://github.com/vapniks/org-dotemacs"))]) (org-doing . [(20150824 901) nil "Keep track of what you're doing" tar ((:keywords "tools" "org") (:url . "https://github.com/omouse/org-doing"))]) (org-dashboard . [(20150812 502) ((cl-lib (0 5))) "Visually summarize progress in org files" single ((:keywords "outlines" "calendar") (:url . "http://github.com/bard/org-dashboard"))]) (org-cua-dwim . [(20120202 2334) nil "Org-mode and Cua mode compatibility layer" single ((:keywords "org-mode" "cua-mode"))]) (org-context . [(20160108 414) nil "Contextual capture and agenda commands for Org-mode" single ((:keywords "org" "capture" "agenda" "convenience") (:url . "https://github.com/thisirs/org-context"))]) (org-clock-convenience . [(20160529 923) ((cl-lib (0 5)) (org (8)) (emacs (24 3))) "convenience functions for org time tracking" single ((:keywords "org") (:url . "https://github.com/dfeich/org-clock-convenience"))]) (org-chinese-utils . [(20160510 909) nil "Some org-mode utils for Chinese users" single ((:url . "https://github.com/tumashu/org-chinese-utils.git"))]) (org-capture-pop-frame . [(20160518 508) ((emacs (24 4))) "Run org-capture in a new pop frame" single ((:url . "https://github.com/tumashu/org-capture-pop-frame.git"))]) (org-caldav . [(20160306 837) ((org (7))) "Sync org files with external calendar through CalDAV" single ((:keywords "calendar" "caldav"))]) (org-bullets . [(20140918 1337) nil "Show bullets in org-mode as UTF-8 characters" single ((:url . "https://github.com/sabof/org-bullets"))]) (org-bookmark-heading . [(20160326 159) ((emacs (24 4))) "Emacs bookmark support for org-mode" single ((:keywords "hypermedia" "outlines") (:url . "http://github.com/alphapapa/org-bookmark-heading"))]) (org-beautify-theme . [(20150106 1156) nil "A sub-theme to make org-mode more beautiful." single ((:keywords "org" "theme"))]) (org-autolist . [(20150922 905) nil "Improved list management in org-mode" single ((:keywords "lists" "checklists" "org-mode") (:url . "https://github.com/calvinwyoung/org-autolist"))]) (org-attach-screenshot . [(20160529 937) nil "screenshots integrated with org attachment dirs" single ((:keywords "org") (:url . "https://github.com/dfeich/org-screenshot"))]) (org-alert . [(20151007 537) ((s (1 10 0)) (dash (2 12 0)) (alert (1 2))) "Notify org deadlines via notify-send" single ((:keywords "org" "org-mode" "notify" "notifications") (:url . "https://github.com/groksteve/org-alert"))]) (org-agenda-property . [(20140626 1616) ((emacs (24 2))) "Display org properties in the agenda buffer." single ((:keywords "calendar") (:url . "http://github.com/Bruce-Connor/org-agenda-property"))]) (org-ac . [(20140302 613) ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) "Some auto-complete sources for org-mode" single ((:keywords "org" "completion") (:url . "https://github.com/aki2o/org-ac"))]) (openwith . [(20120531 1636) nil "Open files with external programs" single ((:keywords "files" "processes") (:url . "https://bitbucket.org/jpkotta/openwith"))]) (opencl-mode . [(20160220 1109) nil "Syntax coloring for opencl kernels" single ((:keywords "c" "opencl") (:url . "https://github.com/salmanebah/opencl-mode"))]) (open-junk-file . [(20160514 1725) nil "Open a junk (memo) file to try-and-error" single ((:keywords "convenience" "tools") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/open-junk-file.el"))]) (opam . [(20150719 720) ((emacs (24 1))) "OPAM tools" single ((:keywords "convenience") (:url . "https://github.com/lunaryorn/opam.el"))]) (oneonone . [(20151231 1741) ((hexrgb (0))) "Frame configuration that uses one frame per window." single ((:keywords "local" "frames") (:url . "http://www.emacswiki.org/oneonone.el"))]) (on-screen . [(20160302 350) ((cl-lib (0))) "guide your eyes while scrolling" single ((:keywords "convenience") (:url . "https://github.com/michael-heerdegen/on-screen.el"))]) (on-parens . [(20150702 1706) ((dash (2 10 0)) (emacs (24)) (evil (1 1 6)) (smartparens (1 6 3))) "smartparens wrapper to fit with evil-mode/vim normal-state" single ((:keywords "evil" "smartparens"))]) (omtose-phellack-theme . [(20160412 628) ((emacs (24))) "A dark, soothing theme with a cold bluish touch." tar ((:url . "http:/github.com/franksn/omtose-phellack-theme/"))]) (omni-tags . [(20150513 1253) ((pcre2el (1 7)) (cl-lib (0 5))) "Highlight and Actions for 'Tags'" tar ((:keywords "convenience") (:url . "http://github.com/AdrieanKhisbe/omni-tags.el"))]) (omni-scratch . [(20151211 1059) nil "Easy and mode-specific draft buffers" single ((:keywords "convenience" "languages" "tools") (:url . "https://github.com/AdrieanKhisbe/omni-scratch.el"))]) (omni-quotes . [(20150604 1257) ((dash (2 8)) (omni-log (0 1 2))) "Random quotes displayer" tar ((:keywords "convenience") (:url . "https://github.com/AdrieanKhisbe/omni-quotes.el"))]) (omni-log . [(20150604 1238) ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (1 8 0))) "Logging utilities" tar ((:keywords "convenience" "languages" "tools") (:url . "https://github.com/AdrieanKhisbe/omni-log.el"))]) (omni-kill . [(20150527 149) nil "Kill all the things" single ((:keywords "convenience" "editing" "tools"))]) (om-mode . [(20140915 1610) nil "Insert Om component template with life cycle." single ((:keywords "clojurescript"))]) (olivetti . [(20160412 2322) nil "Minor mode for a nice writing environment" single ((:keywords "wp"))]) (oldlace-theme . [(20150705 800) ((emacs (24))) "Emacs 24 theme with an 'oldlace' background." single nil]) (offlineimap . [(20150916 658) nil "Run OfflineIMAP from Emacs" single ((:url . "http://julien.danjou.info/offlineimap-el.html"))]) (octicons . [(20151031 2240) ((cl-lib (0 5))) "octicons utility" tar ((:url . "https://github.com/syohex/emacs-octicons"))]) (ocodo-svg-modelines . [(20150516 919) ((svg-mode-line-themes (0))) "A collection of beautiful SVG modelines" tar nil]) (occur-x . [(20130610 843) nil "Extra functionality for occur" single ((:keywords "occur" "search" "convenience"))]) (occur-context-resize . [(20151227 2202) nil "dynamically resize context around matches in occur-mode" single ((:keywords "matching") (:url . "https://github.com/dgtized/occur-context-resize.el"))]) (occidental-theme . [(20130312 1458) nil "Custom theme for faces based on Adwaita" single ((:url . "http://github.com/olcai/occidental-theme"))]) (objc-font-lock . [(20141021 1322) nil "Highlight Objective-C method calls." single ((:keywords "languages" "faces") (:url . "https://github.com/Lindydancer/objc-font-lock"))]) (oberon . [(20120715 409) nil "Major mode for editing Oberon/Oberon-2 program texts" single ((:keywords "oberon" "oberon-2" "languages" "oop"))]) (ob-typescript . [(20150804 730) ((emacs (24)) (org (8 0))) "org-babel functions for typescript evaluation" single ((:keywords "literate programming" "reproducible research" "typescript") (:url . "https://github.com/lurdan/ob-typescript"))]) (ob-swift . [(20151205 111) ((org (8))) "org-babel functions for swift evaluation" single ((:keywords "org" "babel" "swift") (:url . "http://github.com/zweifisch/ob-swift"))]) (ob-sml . [(20130829 1343) ((sml-mode (6 4))) "org-babel functions for template evaluation" single ((:keywords "literate programming" "reproducible research") (:url . "http://orgmode.org"))]) (ob-sagemath . [(20160517 1928) ((sage-shell-mode (0 0 8)) (s (1 8 0)) (emacs (24))) "org-babel functions for SageMath evaluation" tar ((:keywords "sagemath" "org-babel") (:url . "https://github.com/stakemori/ob-sagemath"))]) (ob-restclient . [(20160324 105) ((restclient (0))) "org-babel functions for restclient-mode" single ((:keywords "literate programming" "reproducible research") (:url . "http://orgmode.org"))]) (ob-redis . [(20160411 2213) ((org (8))) "Execute Redis queries within org-mode blocks." single ((:keywords "org" "babel" "redis") (:url . "https://github.com/stardiviner/ob-redis"))]) (ob-prolog . [(20150530 1137) nil "org-babel functions for prolog evaluation." single ((:keywords "literate programming" "reproducible research") (:url . "https://github.com/ljos/ob-prolog"))]) (ob-php . [(20160505 419) ((org (8))) "Execute PHP within org-mode blocks." single ((:keywords "org" "babel" "php") (:url . "https://github.com/stardiviner/ob-php"))]) (ob-ml-marklogic . [(20160508 1132) nil "org-babel functions for MarkLogic evaluation" tar ((:keywords "marklogic" "xquery" "javascript" "sparql") (:url . "http://github.com/ndw/ob-ml-marklogic"))]) (ob-lua . [(20160411 2224) ((org (8))) "Execute Lua code within org-mode blocks." single ((:keywords "org" "babel" "lua") (:url . "https://github.com/stardiviner/ob-lua"))]) (ob-http . [(20160415 2332) ((s (1 9 0)) (cl-lib (0 5))) "http request in org-mode babel" tar ((:url . "http://github.com/zweifisch/ob-http"))]) (ob-go . [(20160318 1452) nil "org-babel functions for go evaluation" tar ((:keywords "golang" "go" "literate programming" "reproducible research") (:url . "http://orgmode.org"))]) (ob-axiom . [(20160310 1553) ((emacs (24 2)) (axiom-environment (20150801))) "org-babel for the axiom-environment system" single ((:keywords "axiom" "openaxiom" "fricas"))]) (oauth . [(20130127 1951) nil "Oauth library." tar ((:keywords "comm"))]) (nyan-mode . [(20160429 1523) nil "Nyan Cat shows position in current buffer in mode-line." tar ((:keywords "nyan" "cat" "lulz" "scrolling" "pop tart cat" "build something amazing") (:url . "https://github.com/TeMPOraL/nyan-mode/"))]) (nvm . [(20151113 255) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (dash-functional (2 4 0))) "Manage Node versions within Emacs" single ((:keywords "node" "nvm") (:url . "http://github.com/rejeep/nvm.el"))]) (nummm-mode . [(20131117 414) nil "Display the number of minor modes instead of their names" single ((:url . "http://github.com/agpchil/nummm-mode"))]) (number . [(20141127 1204) nil "Working with numbers at point." single nil]) (nu-mode . [(20160520 814) ((undo-tree (0 6 5)) (transpose-frame (0)) (helm (20140902 1005))) "Modern Emacs Prompts Based Keybinding." tar nil]) (nsis-mode . [(20150914 746) nil "NSIS-mode" tar ((:keywords "nsis") (:url . "http://github.com/mlf176f2/nsis-mode"))]) (nrepl-sync . [(20140807 1054) ((cider (0 6))) "connect to nrepl port and eval .sync.clj." single ((:url . "https://github.com/phillord/lein-sync"))]) (nrepl-eval-sexp-fu . [(20140311 541) ((highlight (0 0 0)) (smartparens (0 0 0)) (thingatpt (0 0 0))) "Tiny functionality enhancements for evaluating sexps." single ((:keywords "lisp" "highlight" "convenience"))]) (noxml-fold . [(20151216 1021) nil "Fold away XML things." single ((:keywords "xml" "folding") (:url . "https://github.com/paddymcall/noxml-fold"))]) (novice+ . [(20151231 1740) nil "Extensions to `novice.el'." single ((:keywords "internal" "help") (:url . "http://www.emacswiki.org/novice+.el"))]) (notmuch-labeler . [(20131230 1119) ((notmuch (0))) "Improve notmuch way of displaying labels" tar ((:keywords "emacs" "package" "elisp" "notmuch" "emails") (:url . "https://github.com/DamienCassou/notmuch-labeler"))]) (notmuch . [(20160519 553) nil "run notmuch within emacs" tar ((:url . "https://notmuchmail.org/"))]) (noflet . [(20141102 854) nil "locally override functions" single ((:keywords "lisp") (:url . "https://github.com/nicferrier/emacs-noflet"))]) (nodejs-repl . [(20151229 803) nil "Run Node.js REPL" single nil]) (node-resolver . [(20140930 1223) ((cl-lib (0 5))) "hook to install node modules in background" single ((:keywords "convenience" "nodejs" "javascript" "npm") (:url . "https://github.com/meandavejustice/node-resolver.el"))]) (noccur . [(20150514 1620) nil "Run multi-occur on project/dired files" single ((:keywords "convenience"))]) (nm . [(20151110 1310) ((notmuch (0 21)) (peg (0 6)) (company (0)) (emacs (24 3))) "NEVERMORE: an email interface for Notmuch" tar ((:url . "https://github.com/tjim/nevermore"))]) (nlinum-relative . [(20160526 208) ((emacs (24 4)) (nlinum (1 5))) "Relative line number with nlinum" single ((:keywords "convenience"))]) (nix-mode . [(20160502 837) nil "Major mode for editing Nix expressions" single ((:url . "https://github.com/NixOS/nix/tree/master/misc/emacs"))]) (nim-mode . [(20160510 2155) ((emacs (24 4)) (epc (0 1 1)) (let-alist (1 0 1)) (commenter (0 5 1)) (flycheck (0 25 1)) (company (0 8 12))) "A major mode for the Nim programming language" tar ((:keywords "nim" "languages"))]) (niceify-info . [(20160416 744) nil "improve usability of Info pages" single nil]) (nginx-mode . [(20150824 1611) nil "major mode for editing nginx config files" single ((:keywords "nginx"))]) (nexus . [(20140114 705) nil "REST Client for Nexus Maven Repository servers" tar ((:keywords "comm"))]) (newlisp-mode . [(20160226 945) nil "newLISP editing mode for Emacs" single ((:keywords "language" "lisp" "newlisp") (:url . "https://github.com/kosh04/newlisp-mode"))]) (never-comment . [(20140104 1607) nil "Never blocks are comment" single ((:url . "http://stackoverflow.com/a/4554658/89376"))]) (netherlands-holidays . [(20150202 1017) nil "Netherlands holidays for Emacs calendar." single ((:keywords "calendar") (:url . "https://github.com/abo-abo/netherlands-holidays"))]) (neotree . [(20160306 930) nil "A tree plugin like NerdTree for Vim" tar ((:url . "https://github.com/jaypei/emacs-neotree"))]) (nemerle . [(20130328 946) nil "major mode for editing nemerle programs" single ((:keywords "nemerle" "mode" "languages"))]) (nclip . [(20130617 1515) nil "Network (HTTP) Clipboard" tar ((:keywords "nclip" "clipboard" "network") (:url . "http://www.github.com/maio/nclip.el"))]) (ncl-mode . [(20150525 1129) ((emacs (24))) "Major Mode for editing NCL scripts and other goodies" tar nil]) (navorski . [(20141203 1224) ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) "Helping you live in the terminal, like Viktor did." single ((:keywords "terminal"))]) (navi2ch . [(20150329 2116) nil "Navigator for 2ch for Emacsen" tar ((:keywords "network" "2ch"))]) (navi-mode . [(20160327 334) ((outshine (2 0)) (outorg (2 0))) "major-mode for easy buffer-navigation" single ((:url . "https://github.com/tj64/navi"))]) (nav . [(20120507 207) nil "Emacs mode for filesystem navigation" tar nil]) (nasm-mode . [(20160525 2026) ((emacs (24 3))) "NASM x86 assembly major mode" single ((:url . "https://github.com/skeeto/nasm-mode"))]) (narrowed-page-navigation . [(20150108 2319) ((emacs (24)) (cl-lib (0 5))) "A minor mode for showing one page at a time" single ((:keywords "outlines"))]) (narrow-reindent . [(20150722 1406) ((emacs (24 4))) "Defines a minor mode to left-align narrowed regions." single ((:url . "https://github.com/emallson/narrow-reindent.el"))]) (narrow-indirect . [(20151231 1739) nil "Narrow using an indirect buffer that is a clone" single ((:keywords "narrow" "indirect" "buffer" "clone" "view" "multiple-modes") (:url . "http://www.emacswiki.org/narrow-indirect.el"))]) (naquadah-theme . [(20150923 341) nil "A theme based on Tango color set" single nil]) (nanowrimo . [(20151104 2028) nil "Track progress for nanowrimo" single ((:url . "https://bitbucket.org/gvol/nanowrimo-mode"))]) (nand2tetris-assembler . [(20151027 1636) ((names (0 3 0)) (nand2tetris (0 0 1))) "Assembler For the Nand2tetris Course" single ((:keywords "nand2tetris-assembler" "hdl") (:url . "http://www.github.com/CestDiego/nand2tetris-assembler.el/"))]) (nand2tetris . [(20151027 1651) ((names (0 3 0))) "Major mode for HDL files in the nand2tetris course" tar ((:keywords "nand2tetris" "hdl") (:url . "http://www.github.com/CestDiego/nand2tetris.el/"))]) (names . [(20151201 604) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." tar ((:keywords "extensions" "lisp") (:url . "https://github.com/Malabarba/names"))]) (nameless . [(20160403 1313) ((emacs (24 4))) "Hide package namespace in your emacs-lisp code" single ((:keywords "convenience" "lisp") (:url . "https://github.com/Malabarba/nameless"))]) (nameframe-projectile . [(20151018 407) ((nameframe (0 4 0 -2)) (projectile (0 13 0))) "Nameframe integration with Projectile" single ((:url . "https://github.com/john2x/nameframe"))]) (nameframe-perspective . [(20151018 407) ((nameframe (0 4 0 -2)) (perspective (1 12))) "Nameframe integration with perspective.el" single ((:url . "https://github.com/john2x/nameframe"))]) (nameframe . [(20151017 2319) nil "Manage frames by name." single ((:url . "https://github.com/john2x/nameframe"))]) (naked . [(20151231 1727) nil "Provide for naked key descriptions: no angle brackets." single ((:keywords "lisp" "key" "print" "format" "help") (:url . "http://www.emacswiki.org/naked.el"))]) (n4js . [(20150713 2131) ((emacs (24)) (cypher-mode (0))) "Neo4j Shell" single ((:keywords "neo4j" "shell" "comint") (:url . "https://github.com/tmtxt/n4js.el"))]) (myterminal-controls . [(20160119 2230) ((emacs (24)) (cl-lib (0 5))) "Quick toggle controls at a key-stroke" single ((:keywords "convenience" "shortcuts") (:url . "http://ismail.teamfluxion.com"))]) (mynt-mode . [(20150512 1549) ((virtualenvwrapper (20131514))) "Minor mode to work with the mynt static site generator" single ((:keywords "convenience") (:url . "https://github.com/crshd/mynt-mode"))]) (mykie . [(20150808 1705) ((emacs (24 3)) (cl-lib (0 5))) "Command multiplexer: Register multiple functions to a keybind" tar ((:keywords "emacs" "configuration" "keybind") (:url . "https://github.com/yuutayamada/mykie-el"))]) (myanmar-input-methods . [(20160106 937) nil "Emacs Input Method for Myanmar" single ((:keywords "myanmar" "unicode" "keyboard") (:url . "http://github.com/yelinkyaw/emacs-myanmar-input-methods"))]) (mwim . [(20150822 1436) nil "Move to the beginning/end of line or code" single ((:keywords "convenience") (:url . "https://github.com/alezost/mwim.el"))]) (mwe-log-commands . [(20100703 741) nil "log keyboard commands to buffer" single ((:keywords "help"))]) (mvn . [(20160211 943) nil "helpers for compiling with maven" single ((:keywords "compilation" "maven" "java") (:url . "https://github.com/apgwoz/mvn-el"))]) (muttrc-mode . [(20090804 1752) nil "Major mode to edit muttrc under Emacs" single nil]) (mutant . [(20160124 753) ((emacs (24 4)) (dash (2 1 0))) "An interface for the Mutant testing tool" single ((:keywords "mutant" "testing") (:url . "http://github.com/p-lambert/mutant.el"))]) (mustache-mode . [(20141024 932) nil "A major mode for editing Mustache files." single nil]) (mustache . [(20131117 1607) ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) "a mustache templating library in emacs lisp" tar nil]) (multiple-cursors . [(20160523 1443) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar nil]) (multifiles . [(20130615 1633) nil "View and edit parts of multiple files in one buffer" single ((:keywords "multiple" "files"))]) (multicolumn . [(20150202 1651) nil "Creating and managing multiple side-by-side windows." single ((:url . "https://github.com/Lindydancer/multicolumn"))]) (multi-web-mode . [(20130823 2254) nil "multiple major mode support for web editing" tar ((:keywords "convenience" "languages" "wp") (:url . "https://github.com/fgallina/multi-web-mode"))]) (multi-term . [(20150220 720) nil "Managing multiple terminal buffers in Emacs." single ((:keywords "term" "terminal" "multiple buffer") (:url . "http://www.emacswiki.org/emacs/download/multi-term.el"))]) (multi-project . [(20150314 944) nil "Easily work with multiple projects." single ((:keywords "project" "management") (:url . "https://bitbucket.org/ellisvelo/multi-project/overview"))]) (multi-line . [(20160601 1645) ((emacs (24)) (s (1 9 0))) "multi-line statements" tar ((:keywords "multi" "line" "length" "whitespace" "programming") (:url . "https://github.com/IvanMalison/multi-line"))]) (multi-eshell . [(20120608 1335) nil "Create and manage multiple shells within Emacs" single ((:url . "http://cims.nyu.edu/~stucchio"))]) (multi-compile . [(20160306 1623) ((emacs (24)) (dash (2 12 1))) "Multi target interface to compile." single ((:keywords "tools" "compile" "build") (:url . "https://github.com/ReanGD/emacs-multi-compile"))]) (multi . [(20131013 1044) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single ((:keywords "multimethod" "generic" "predicate" "dispatch") (:url . "http://github.com/kurisuwhyte/emacs-multi"))]) (mu4e-maildirs-extension . [(20160126 239) ((dash (0 0 0))) "Show mu4e maildirs summary in mu4e-main-view" single ((:url . "http://github.com/agpchil/mu4e-maildirs-extension"))]) (mu4e-alert . [(20160601 13) ((alert (1 2)) (s (1 10 0)) (ht (2 0)) (emacs (24 1))) "Desktop notification for mu4e" single ((:keywords "mail" "convenience") (:url . "https://github.com/iqbalansari/mu4e-alert"))]) (mu-cite . [(20160130 500) ((flim (1 14 9))) "A library to provide MIME features." tar nil]) (msvc . [(20150530 351) ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (1 2 0))) "Microsoft Visual C/C++ mode" tar ((:keywords "languages" "completion" "syntax check" "mode" "intellisense") (:url . "https://github.com/yaruopooner/msvc"))]) (mpv . [(20150218 318) ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (names (0 5 4)) (org (8 0))) "control mpv for easy note-taking" single ((:keywords "tools" "multimedia") (:url . "https://github.com/kljohann/mpv.el"))]) (mozc-temp . [(20160228 240) ((emacs (24)) (dash (2 10 0)) (mozc (0))) "Use mozc temporarily" single ((:url . "https://github.com/HKey/mozc-temp"))]) (mozc-popup . [(20150223 1834) ((popup (0 5 2)) (mozc (0))) "Mozc with popup" single ((:keywords "i18n" "extentions"))]) (mozc-im . [(20160411 1922) ((mozc (0))) "Mozc with input-method-function interface." single ((:keywords "i18n" "extentions"))]) (mozc . [(20160102 1706) nil "minor mode to input Japanese with Mozc" single ((:keywords "mule" "multilingual" "input method"))]) (moz-controller . [(20151208 2006) ((moz (0))) "Control Firefox from Emacs" single ((:url . "https://github.com/RenWenshan/emacs-moz-controller"))]) (moz . [(20150805 1206) nil "Lets current buffer interact with inferior mozilla." single ((:url . "http://github.com/bard/mozrepl/raw/master/chrome/content/moz.el"))]) (mowedline . [(20150601 1209) nil "elisp utilities for using mowedline" single nil]) (move-text . [(20160430 1930) nil "Move current line or region with M-up or M-down." single ((:keywords "edit"))]) (move-dup . [(20140925 1008) nil "Eclipse-like moving and duplicating lines or rectangles." single ((:keywords "convenience" "wp"))]) (mouse3 . [(20151231 1726) nil "Customizable behavior for `mouse-3'." single ((:keywords "mouse" "menu" "keymap" "kill" "rectangle" "region") (:url . "http://www.emacswiki.org/mouse3.el"))]) (mouse-slider-mode . [(20150910 1600) ((emacs (24 3)) (cl-lib (0 3))) "scale numbers dragged under the mouse" single ((:url . "https://github.com/skeeto/mouse-slider-mode"))]) (mouse+ . [(20151231 1725) nil "Extensions to `mouse.el'." single ((:keywords "mouse") (:url . "http://www.emacswiki.org/mouse+.el"))]) (morlock . [(20160521 930) nil "more font-lock keywords for elisp" single ((:keywords "convenience") (:url . "http://github.com/tarsius/morlock"))]) (monroe . [(20160421 640) nil "Yet another client for nREPL" single ((:keywords "languages" "clojure" "nrepl" "lisp") (:url . "http://www.github.com/sanel/monroe"))]) (monokai-theme . [(20160515 1604) nil "A fruity color theme for Emacs." single ((:url . "http://github.com/oneKelvinSmith/monokai-emacs"))]) (monochrome-theme . [(20140326 550) nil "A dark Emacs 24 theme for your focused hacking sessions" tar nil]) (monky . [(20160315 2251) nil "Control Hg from Emacs." tar nil]) (mongo . [(20150315 719) nil "MongoDB driver for Emacs Lisp" tar ((:keywords "convenience"))]) (molokai-theme . [(20151016 1045) nil "molokai theme with Emacs theme engine" single ((:url . "https://github.com/alloy-d/color-theme-molokai"))]) (moe-theme . [(20160322 315) nil "A colorful eye-candy theme. Moe, moe, kyun!" tar ((:url . "https://github.com/kuanyui/moe-theme.el"))]) (modtime-skip-mode . [(20140128 1601) nil "Minor mode for disabling modtime and supersession checks on files." single ((:url . "http://www.github.com/jordonbiondo/modtime-skip-mode"))]) (modern-cpp-font-lock . [(20160601 1450) nil "Font-locking for \"Modern C++\"" single ((:keywords "languages" "c++" "cpp" "font-lock") (:url . "https://github.com/ludwigpacifici/modern-cpp-font-lock"))]) (modeline-posn . [(20160112 849) nil "Set up `mode-line-position'." single ((:keywords "mode-line" "region" "column") (:url . "http://www.emacswiki.org/modeline-posn.el"))]) (modeline-char . [(20160523 1720) nil "In the mode-line, show the value of the character after point." single ((:keywords "mode-line" "character") (:url . "http://www.emacswiki.org/modeline-char.el"))]) (mode-line-debug . [(20150307 712) nil "show status of `debug-on-error' in the mode-line" single ((:keywords "convenience" "lisp") (:url . "https://github.com/tarsius/mode-line-debug"))]) (mode-icons . [(20160531 1908) ((emacs (24)) (cl-lib (0 5))) "Show icons for modes" tar ((:keywords "multimedia") (:url . "http://ryuslash.org/projects/mode-icons.html"))]) (modalka . [(20160531 1112) ((emacs (24 4))) "Easily introduce native modal editing of your own design" single ((:keywords "modal" "editing") (:url . "https://github.com/mrkkrp/modalka"))]) (mocker . [(20150916 2054) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single ((:keywords "lisp" "testing"))]) (mocha-snippets . [(20160211 1032) ((yasnippet (0 8 0))) "Yasnippets for the Mocha JS Testing Framework" tar ((:keywords "test" "javascript"))]) (mocha . [(20160524 923) ((js2-mode (20150909)) (f (0 18))) "Run Mocha or Jasmine tests" single ((:keywords "javascript" "mocha" "jasmine") (:url . "http://github.com/scottaj/mocha.el"))]) (mobdebug-mode . [(20140109 2146) ((lua-mode (20130419)) (emacs (24))) "Major mode for MobDebug" single ((:url . "https://github.com/deftsp/mobdebug-mode"))]) (mo-vi-ment-mode . [(20131029 133) nil "Provide vi-like cursor movement that's easy on the fingers" single ((:keywords "convenience"))]) (mmt . [(20150906 1159) ((emacs (24 1)) (cl-lib (0 3))) "Missing macro tools for Emacs Lisp" single ((:keywords "macro" "emacs-lisp") (:url . "https://github.com/mrkkrp/mmt"))]) (mmm-mode . [(20150828 1916) nil "Allow Multiple Major Modes in a buffer" tar ((:keywords "convenience" "faces" "languages" "tools") (:url . "https://github.com/purcell/mmm-mode"))]) (mmm-mako . [(20121020 151) ((mmm-mode (0 4 8))) "MMM submode class for Mako Templates" single ((:url . "https://bitbucket.org/pjenvey/mmm-mako"))]) (mmm-jinja2 . [(20150904 1334) ((mmm-mode (0 5 4))) "MMM submode class for Jinja2 Templates" single ((:url . "https://github.com/beardedprojamz/mmm-jinja2"))]) (misc-fns . [(20160529 1652) nil "Miscellaneous non-interactive functions." single ((:keywords "internal" "unix" "lisp" "extensions" "local") (:url . "http://www.emacswiki.org/misc-fns.el"))]) (misc-cmds . [(20151231 1623) nil "Miscellaneous commands (interactive functions)." single ((:keywords "internal" "unix" "extensions" "maint" "local") (:url . "http://www.emacswiki.org/misc-cmds.el"))]) (mip-mode . [(20151127 17) nil "virtual projects for emacs." single ((:keywords "workspaces" "workspace" "project" "projects" "mip-mode"))]) (minor-mode-hack . [(20141226 1420) nil "Change priority of minor-mode keymaps" single ((:keywords "lisp") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/minor-mode-hack.el"))]) (minizinc-mode . [(20151214 758) ((emacs (24 1))) "Major mode for MiniZinc code" single ((:keywords "languages" "minizinc") (:url . "http://github.com/m00nlight/minizinc-mode"))]) (minimal-theme . [(20140409 1801) nil "A light/dark minimalistic Emacs 24 theme." tar ((:keywords "color" "theme" "minimal") (:url . "http://github.com/ikame/minimal-theme"))]) (miniedit . [(20100419 1245) nil "Enhanced editing for minibuffer fields." single nil]) (minibuffer-complete-cycle . [(20130813 1145) nil "Cycle through the *Completions* buffer" single ((:keywords "completion") (:url . "https://github.com/knu/minibuffer-complete-cycle"))]) (minibuf-isearch . [(20151226 1343) nil "incremental search on minibuffer history" single ((:keywords "minibuffer" "history" "incremental search"))]) (mingus . [(20160321 1117) ((libmpdee (2 1))) "MPD Interface" tar ((:keywords "multimedia" "elisp" "music" "mpd") (:url . "https://github.com/pft/mingus"))]) (minesweeper . [(20150414 22) nil "play minesweeper in Emacs" single ((:keywords "game" "fun" "minesweeper" "inane" "diversion") (:url . "https://bitbucket.org/zck/minesweeper.el"))]) (migemo . [(20150412 941) ((cl-lib (0 5))) "Japanese incremental search through dynamic pattern expansion" single ((:url . "https://github.com/emacs-jp/migemo"))]) (micgoline . [(20160414 2226) ((emacs (24 3)) (powerline (2 3))) "powerline mode, color schemes from microsoft and google's logo." single ((:keywords "mode-line" "powerline" "theme") (:url . "https://github.com/yzprofile/micgoline"))]) (mic-paren . [(20150110 2016) nil "advanced highlighting of matching parentheses" single ((:keywords "languages" "faces" "parenthesis" "matching"))]) (mexican-holidays . [(20160109 1542) nil "Mexico holidays for Emacs calendar." single ((:keywords "calendar") (:url . "https://github.com/shopClerk/mexican-holidays"))]) (mew . [(20150814 154) nil "Messaging in the Emacs World" tar nil]) (metaweblog . [(20141130 805) ((xml-rpc (1 6 8))) "An emacs library to access metaweblog based weblogs" tar nil]) (metascript-mode . [(20150708 1957) ((emacs (24 3))) "Major mode for the Metascript programming language" single ((:keywords "languages" "metascript" "mjs") (:url . "http://github.com/metascript/metascript-mode"))]) (metafmt . [(20160221 1055) nil "Run metafmt on buffers when saving them" single ((:keywords "languages" "tools") (:url . "https://github.com/lvillani/metafmt"))]) (meta-presenter . [(20150501 610) nil "A simple multi-file presentation tool for Emacs" single ((:keywords "productivity" "presentation") (:url . "http://ismail.teamfluxion.com"))]) (message-x . [(20151029 918) nil "customizable completion in message headers" single ((:keywords "news" "mail" "compose" "completion"))]) (merlin . [(20160229 828) nil "Mode for Merlin, an assistant for OCaml." tar ((:keywords "ocaml" "languages") (:url . "http://github.com/the-lambda-church/merlin"))]) (menu-bar+ . [(20160512 1914) nil "Extensions to `menu-bar.el'." single ((:keywords "internal" "local" "convenience") (:url . "http://www.emacswiki.org/menu-bar+.el"))]) (mentor . [(20140904 1910) ((xml-rpc (1 6 9))) "Frontend for the rTorrent bittorrent client" tar ((:keywords "bittorrent" "rtorrent"))]) (memolist . [(20150804 1221) ((markdown-mode (22 0)) (ag (0 45))) "memolist.el is Emacs port of memolist.vim." single ((:keywords "markdown" "memo") (:url . "http://github.com/mikanfactory/emacs-memolist"))]) (memoize . [(20130421 1434) nil "Memoization functions" single ((:url . "https://github.com/skeeto/emacs-memoize"))]) (melpa-upstream-visit . [(20130720 533) ((s (1 6 0))) "A set of kludges to visit a melpa-hosted package's homepage" single ((:keywords "convenience"))]) (meacupla-theme . [(20151027 1717) nil "meacupla theme for emacs" single ((:keywords "color" "theme" "meacupla" "faces") (:url . "https://gitlab.com/jtecca/meacupla-theme"))]) (md-readme . [(20150506 159) nil "Markdown-formatted READMEs for your ELisp" tar ((:keywords "lisp" "help" "readme" "markdown" "header" "documentation" "github") (:url . "http://github.com/thomas11/md-readme/tree/master"))]) (mbe . [(20151126 534) ((emacs (24)) (cl-lib (0 5))) "Macros by Example" single ((:keywords "tools" "macros") (:url . "https://github.com/ijp/mbe.el"))]) (mb-url . [(20160602 602) ((cl-lib (0))) "Multiple Backends for Emacs URL package." tar ((:url . "https://github.com/dochang/mb-url") (:keywords "url"))]) (mb-depth+ . [(20151231 1621) nil "Indicate minibuffer-depth in prompt" single ((:keywords "convenience") (:url . "http://www.emacswiki.org/mb-depth+.el"))]) (maxframe . [(20140916 954) nil "maximize the emacs frame based on display size" single ((:keywords "display" "frame" "window" "maximize"))]) (maven-test-mode . [(20141219 2357) ((s (1 9)) (emacs (24))) "Utilities for navigating test files and running maven test tasks." single ((:keywords "java" "maven" "test") (:url . "http://github.com/rranelli/maven-test-mode"))]) (maude-mode . [(20160222 1007) nil "Emacs mode for the programming language Maude" single ((:keywords "maude"))]) (matrix-client . [(20160424 2359) ((json (1 4)) (request (0 2 0))) "A minimal chat client for the Matrix.org RPC" tar ((:keywords "web") (:url . "http://doc.rix.si/matrix.html"))]) (matlab-mode . [(20160527 1552) nil "Major mode for MATLAB(R) dot-m files" tar ((:url . "http://sourceforge.net/projects/matlab-emacs/") (:keywords "matlab" "programming" "language" "(X)emacs"))]) (math-symbol-lists . [(20160302 1631) nil "Lists of Unicode math symbols and latex commands" tar ((:keywords "unicode" "symbols" "mathematics") (:url . "https://github.com/vspinu/math-symbol-lists"))]) (marshal . [(20150916 2057) ((eieio (1 4)) (json (1 3))) "eieio extension for automatic (un)marshalling" single ((:keywords "eieio") (:url . "https://github.com/sigma/marshal.el"))]) (marmalade-client . [(20141231 1407) ((web (0 5 2)) (kv (0 0 19)) (gh (0 8 0))) "client for marmalade API from emacs" tar ((:keywords "lisp") (:url . "https://github.com/nicferrier/emacs-marmalade-upload"))]) (marmalade . [(20110602 1822) ((furl (0 0 2))) "Elisp interface for the Emacs Lisp package server." single ((:url . "http://code.google.com/p/marmalade"))]) (markup-faces . [(20141110 217) nil "collection of faces for markup language modes" single ((:keywords "wp" "faces") (:url . "https://github.com/sensorflo/markup-faces"))]) (markup . [(20130207 1509) nil "Simple markup generation helpers." single ((:keywords "convenience" "markup" "html") (:url . "http://github.com/leoc/markup.el"))]) (markdown-toc . [(20160227 508) ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 1))) "A simple TOC generator for markdown file" tar nil]) (markdown-preview-mode . [(20160215 1049) ((websocket (1 5)) (markdown-mode (2 1)) (cl-lib (0 5))) "markdown realtime preview minor mode." tar ((:keywords "markdown" "preview") (:url . "https://github.com/ancane/markdown-preview-mode"))]) (markdown-mode . [(20160527 435) ((emacs (24)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" single ((:keywords "markdown" "github flavored markdown" "itex") (:url . "http://jblevins.org/projects/markdown-mode/"))]) (markdown-mode+ . [(20120829 710) ((markdown-mode (20111229))) "extra functions for markdown-mode" tar ((:keywords "markdown" "latex" "osx" "rtf") (:url . "http://github.com/milkypostman/markdown-mode+.el"))]) (markdown-mac-link . [(20160520 421) ((emacs (24))) "Insert Markdown links to items selected in various Mac apps" single ((:keywords "markdown" "mac" "hyperlink") (:url . "https://github.com/xuchunyang/markdown-mac-link"))]) (mark-tools . [(20130614 525) nil "Some simple tools to access the mark-ring in Emacs" single ((:url . "https://github.com/stsquad/emacs-mark-tools"))]) (mark-multiple . [(20121118 954) nil "Sorta lets you mark several regions at once." tar nil]) (marcopolo . [(20160421 504) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client to the Docker HUB/Registry API" tar ((:keywords "docker") (:url . "https://github.com/nlamirault/marcopolo"))]) (map-regexp . [(20130522 1603) ((cl-lib (0 2))) "map over matches of a regular expression" single ((:keywords "convenience") (:url . "https://github.com/tarsius/map-regexp"))]) (map-progress . [(20140310 1632) nil "mapping macros that report progress" single ((:keywords "convenience") (:url . "https://github.com/tarsius/map-progress/"))]) (mandoku . [(20160523 308) ((org (8 0)) (magit (20151028)) (github-clone (20150705)) (git (20140128))) "A tool to access repositories of premodern Chinese texts" tar nil]) (manage-minor-mode . [(20140310 1100) ((emacs (24 3))) "Manage your minor-modes easily" single ((:keywords "minor-mode" "manage" "emacs") (:url . "https://github.com/ShingoFukuyama/manage-minor-mode"))]) (man-commands . [(20151221 1621) ((cl-lib (0 5))) "Add interactive commands for every manpages installed in your computer." single ((:url . "http://github.com/nflath/man-commands"))]) (mallard-snippets . [(20131023 1351) ((yasnippet (0 8 0)) (mallard-mode (0 1 1))) "Yasnippets for Mallard" tar ((:keywords "snippets" "mallard") (:url . "https://github.com/jhradilek/emacs-mallard-snippets"))]) (mallard-mode . [(20131203 2225) nil "Major mode for editing Mallard files" tar ((:keywords "xml" "mallard") (:url . "https://github.com/jhradilek/emacs-mallard-mode"))]) (malinka . [(20160402 329) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) "A C/C++ project configuration package for Emacs" single ((:keywords "c" "c++" "project-management") (:url . "https://github.com/LefterisJP/malinka"))]) (malabar-mode . [(20150720 1255) ((fringe-helper (1 0 1)) (groovy-mode (0))) "JVM Integration mode for EMACS" tar ((:keywords "java" "maven" "groovy" "language" "malabar") (:url . "http://www.github.com/m0smith/malabar-mode"))]) (makey . [(20131231 830) ((cl-lib (0 2))) "interactive commandline mode" single nil]) (make-it-so . [(20150319 1407) ((helm (1 5 3)) (emacs (24))) "Transform files with Makefile recipes." tar ((:keywords "make" "dired") (:url . "https://github.com/abo-abo/make-it-so"))]) (make-color . [(20140625 650) nil "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" single ((:keywords "color") (:url . "https://github.com/alezost/make-color.el"))]) (majapahit-theme . [(20160412 632) nil "Color theme with a dark and light versions" tar ((:keywords "color" "theme") (:url . "https://gitlab.com/franksn/majapahit-theme"))]) (magnatune . [(20151030 1435) ((dash (2 9 0)) (s (1 9 0))) "browse magnatune's music catalog" tar nil]) (magma-mode . [(20160304 608) ((cl-lib (0 3)) (dash (2 6 0)) (f (0 17 1))) "Magma mode for Emacs" tar ((:url . "https://github.com/ThibautVerron/magma-mode"))]) (magit-popup . [(20160529 2245) ((emacs (24 4)) (async (20150909 2257)) (dash (20151021 113))) "Define prefix-infix-suffix command combos" tar ((:keywords "bindings") (:url . "https://github.com/magit/magit"))]) (magit-gitflow . [(20160529 600) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" single ((:keywords "vc" "tools") (:url . "https://github.com/jtatarik/magit-gitflow"))]) (magit . [(20160601 1123) ((emacs (24 4)) (async (20150909 2257)) (dash (20151021 113)) (with-editor (20160408 201)) (git-commit (20160425 430)) (magit-popup (20160512 328))) "A Git porcelain inside Emacs" tar ((:keywords "git" "tools" "vc") (:url . "https://github.com/magit/magit"))]) (magic-latex-buffer . [(20160212 803) ((cl-lib (0 5)) (emacs (24 3))) "Magically enhance LaTeX-mode font-locking for semi-WYSIWYG editing" single ((:url . "http://hins11.yu-yake.com/"))]) (magic-filetype . [(20160522 929) ((emacs (24)) (s (1 9 0))) "Enhance filetype major mode" single ((:keywords "vim" "ft" "file" "magic-mode") (:url . "https://github.com/zonuexe/magic-filetype.el"))]) (mag-menu . [(20150505 1350) ((splitter (0 1 0))) "Intuitive keyboard-centric menu system" single ((:keywords "convenience") (:url . "https://github.com/chumpage/mag-menu"))]) (macrostep . [(20151213 345) ((cl-lib (0 5))) "interactive macro expander" tar ((:keywords "lisp" "languages" "macro" "debugging") (:url . "https://github.com/joddie/macrostep"))]) (macros+ . [(20151231 1619) nil "Extensions to `macros.el'." single ((:keywords "abbrev" "local") (:url . "http://www.emacswiki.org/macros+.el"))]) (macro-math . [(20130328 1104) nil "in-buffer mathematical operations" single ((:keywords "convenience") (:url . "http://nschum.de/src/emacs/macro-math/"))]) (m-buffer . [(20160125 1503) ((dash (2 8 0)) (emacs (24 3))) "List-Oriented, Functional Buffer Manipulation" tar nil]) (lxc . [(20140410 1522) nil "lxc integration with Emacs" single ((:keywords "processes") (:url . "https://github.com/nicferrier/emacs-lxc"))]) (lua-mode . [(20160502 1341) nil "a major-mode for editing Lua scripts" tar ((:keywords "languages" "processes" "tools") (:url . "http://immerrr.github.com/lua-mode"))]) (love-minor-mode . [(20130429 1659) ((lua-mode (20130419))) "Minor mode for working on LÖVE projects" single ((:url . "https://github.com/ejmr/love-minor-mode"))]) (lorem-ipsum . [(20140911 1608) nil "Insert dummy pseudo Latin text." single ((:keywords "tools" "language" "convenience"))]) (loop . [(20151228 521) nil "friendly imperative loop structures" single ((:keywords "loop" "while" "for each" "break" "continue"))]) (look-mode . [(20151211 1226) nil "quick file viewer for image and text file browsing" single nil]) (look-dired . [(20160529 1601) ((look-mode (1 0))) "Extensions to look-mode for dired buffers" single ((:keywords "convenience") (:url . "https://github.com/vapniks/look-dired"))]) (lolcode-mode . [(20111002 347) nil "Major mode for editing LOLCODE" single ((:keywords "lolcode" "major" "mode") (:url . "http://github.com/bodil/lolcode-mode"))]) (logview . [(20160520 1541) ((emacs (24 1)) (datetime (0 1))) "Major mode for viewing log files" single ((:keywords "files" "tools") (:url . "https://github.com/doublep/logview"))]) (logstash-conf . [(20150308 718) nil "basic mode for editing logstash configuration" single nil]) (logalimacs . [(20131021 1329) ((popwin (0 6 2)) (popup (0 5 0)) (stem (20130120))) "Front-end to logaling-command for Ruby gems" single ((:keywords "translation" "logaling-command") (:url . "https://github.com/logaling/logalimacs"))]) (log4j-mode . [(20160108 1318) nil "major mode for viewing log files" single ((:keywords "tools") (:url . "http://log4j-mode.sourceforge.net"))]) (log4e . [(20150105 705) nil "provide logging framework for elisp" single ((:keywords "log") (:url . "https://github.com/aki2o/log4e"))]) (lodgeit . [(20150312 849) nil "Paste to a lodgeit powered pastebin" single ((:keywords "pastebin" "lodgeit") (:url . "https://github.com/ionrock/lodgeit-el"))]) (loccur . [(20160129 1422) ((cl-lib (0))) "Perform an occur-like folding in current buffer" single ((:keywords "matching") (:url . "https://github.com/fourier/loccur"))]) (loc-changes . [(20150302 1048) nil "keep track of positions even after buffer changes" single ((:url . "http://github.com/rocky/emacs-loc-changes"))]) (load-theme-buffer-local . [(20120702 1536) nil "Install emacs24 color themes by buffer." single ((:keywords "faces") (:url . "http://github.com/vic/color-theme-buffer-local"))]) (load-relative . [(20160505 219) nil "relative file load (within a multi-file Emacs package)" single ((:keywords "internal") (:url . "http://github.com/rocky/emacs-load-relative"))]) (livid-mode . [(20131116 744) ((skewer-mode (1 5 3)) (s (1 8 0))) "Live browser eval of JavaScript every time a buffer changes" single ((:url . "https://github.com/pandeiro/livid-mode"))]) (livescript-mode . [(20140612 2321) nil "Major mode for editing LiveScript files" single ((:keywords "languages" "livescript") (:url . "https://github.com/yhisamatsu/livescript-mode"))]) (live-code-talks . [(20150115 1623) ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) "Support for slides with live code in them" single ((:keywords "docs" "multimedia"))]) (literate-starter-kit . [(20150730 1354) ((emacs (24 3))) "A literate starter kit to configure Emacs using Org-mode files." tar nil]) (literate-coffee-mode . [(20160114 634) ((coffee-mode (0 5 0))) "major-mode for Literate CoffeeScript" single ((:url . "https://github.com/syohex/emacs-literate-coffee-mode"))]) (litecoin-ticker . [(20160514 705) nil "No description available." single nil]) (litable . [(20150908 909) ((dash (2 6 0))) "dynamic evaluation replacement with emacs" single ((:keywords "lisp"))]) (lit-mode . [(20141123 1136) nil "Major mode for lit" single ((:keywords "languages" "tools"))]) (list-unicode-display . [(20150219 301) ((cl-lib (0 5))) "Search for and list unicode characters by name" single ((:keywords "convenience"))]) (list-register . [(20091203 1215) nil "List register" single nil]) (list-processes+ . [(20131117 1335) nil "Add process management to `list-processes'" single ((:url . "not distributed yet"))]) (list-packages-ext . [(20151115 1116) ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) "Extras for list-packages" single ((:keywords "convenience" "tools"))]) (list-environment . [(20151226 2056) nil "A tabulated process environment editor" single ((:keywords "processes" "unix"))]) (lispy . [(20160529 815) ((emacs (24 1)) (ace-window (0 9 0)) (iedit (0 9 9)) (swiper (0 7 0)) (hydra (0 13 4))) "vi-like Paredit" tar nil]) (lispxmp . [(20130824 707) nil "Automagic emacs lisp code annotation" single ((:keywords "lisp" "convenience") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/lispxmp.el"))]) (lisp-extra-font-lock . [(20160507 1702) nil "Highlight bound variables and quoted exprs." single ((:keywords "languages" "faces") (:url . "https://github.com/Lindydancer/lisp-extra-font-lock"))]) (liso-theme . [(20160410 1529) nil "Eclectic Dark Theme for GNU Emacs" single ((:keywords "theme" "themes") (:url . "https://github.com/caisah/liso-theme"))]) (linum-relative . [(20160510 318) nil "display relative line number in emacs." single ((:keywords "converience") (:url . "http://github.com/coldnew/linum-relative"))]) (linum-off . [(20160217 1537) nil "Provides an interface for turning line-numbering off" single ((:keywords "line" "numbering") (:url . "http://www.emacswiki.org/emacs/auto-indent-mode.el "))]) (linphone . [(20130524 609) nil "Emacs interface to Linphone" tar ((:keywords "comm") (:url . "https://github.com/zabbal/emacs-linphone"))]) (link-hint . [(20160413 18) ((avy (0 3 0)) (emacs (24 1)) (cl-lib (0 5))) "Use avy to open or copy visible urls." single ((:keywords "url") (:url . "https://github.com/noctuid/link-hint.el"))]) (link . [(20140717 2229) nil "Hypertext links in text buffers" single ((:keywords "interface" "hypermedia"))]) (lingr . [(20100807 1231) nil "Lingr Client for GNU Emacs" single ((:keywords "chat" "client" "internet") (:url . "http://github.com/lugecy/lingr-el"))]) (light-soap-theme . [(20150607 945) ((emacs (24))) "Emacs 24 theme with a light background." single nil]) (libmpdee . [(20160117 1701) nil "Client end library for mpd, a music playing daemon" single ((:keywords "music" "mpd"))]) (lib-requires . [(20151231 1610) nil "Commands to list Emacs Lisp library dependencies." single ((:keywords "libraries" "files") (:url . "http://www.emacswiki.org/lib-requires.el"))]) (lexbind-mode . [(20141027 929) nil "Puts the value of lexical-binding in the mode line" single ((:keywords "convenience" "lisp") (:url . "https://github.com/spacebat/lexbind-mode"))]) (levenshtein . [(20051013 1256) nil "Edit distance between two strings." single ((:keywords "lisp"))]) (leuven-theme . [(20160601 1426) nil "Awesome Emacs color theme on white background" single ((:keywords "color" "theme") (:url . "https://github.com/fniessen/emacs-leuven-theme"))]) (letcheck . [(20160202 1348) nil "Check the erroneous assignments in let forms" single ((:keywords "convenience") (:url . "https://github.com/Fuco1/letcheck"))]) (less-css-mode . [(20150511 519) nil "Major mode for editing LESS CSS files (lesscss.org)" single ((:keywords "less" "css" "mode") (:url . "https://github.com/purcell/less-css-mode"))]) (lentic-server . [(20150320 826) ((lentic (0 8)) (web-server (0 1 1))) "Web Server for Emacs Literate Source" single nil]) (lentic . [(20160526 1522) ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) "One buffer as a view of another" tar nil]) (lenlen-theme . [(20150307 211) ((color-theme-solarized (20150110))) "a solarized-based kawaii light theme" single ((:url . "http://hins11.yu-yake.com/"))]) (lemon-mode . [(20130216 704) nil "A major mode for editing lemon grammar files" single ((:keywords "lemon"))]) (legalese . [(20150820 1224) nil "Add legalese to your program files" single ((:keywords "convenience") (:url . "https://github.com/jorgenschaefer/legalese"))]) (leerzeichen . [(20151106 28) nil "Minor mode to display whitespace characters." single ((:keywords "whitespace" "characters") (:url . "http://github.com/fgeller/leerzeichen.el"))]) (ledger-mode . [(20160504 2043) nil "Helper code for use with the \"ledger\" command-line tool" tar nil]) (ldap-mode . [(20091203 1215) nil "major modes for editing LDAP schema and LDIF files" single ((:keywords "data") (:url . "http://www.loveshack.ukfsn.org/emacs"))]) (launchctl . [(20150518 809) ((emacs (24 1))) "Interface to launchctl on Mac OS X." single ((:keywords "tools" "convenience") (:url . "http://github.com/pekingduck/launchctl-el"))]) (launch . [(20130619 1704) nil "launch files with OS-standard associated applications." single ((:keywords "convenience" "processes") (:url . "https://github.com/sfllaw/emacs-launch"))]) (latex-preview-pane . [(20151023 1503) nil "Makes LaTeX editing less painful by providing a updatable preview pane" tar nil]) (latex-pretty-symbols . [(20151112 444) nil "Display many latex symbols as their unicode counterparts" single ((:keywords "convenience" "display") (:url . "https://bitbucket.org/mortiferus/latex-pretty-symbols.el"))]) (latex-math-preview . [(20160321 2359) nil "preview LaTeX mathematical expressions." single ((:keywords "latex" "tex") (:url . "https://gitlab.com/latex-math-preview/latex-math-preview"))]) (latex-extra . [(20160328 1921) ((auctex (11 86 1)) (cl-lib (0 5))) "Adds several useful functionalities to LaTeX-mode." single ((:keywords "tex") (:url . "http://github.com/Malabarba/latex-extra"))]) (langtool . [(20160116 1854) ((cl-lib (0 3))) "Grammar check utility using LanguageTool" single ((:keywords "docs") (:url . "https://github.com/mhayashi1120/Emacs-langtool"))]) (langdoc . [(20150218 45) ((cl-lib (0 2))) "Help to define help document mode for various languages" single ((:keywords "convenience" "eldoc") (:url . "https://github.com/tom-tan/langdoc/"))]) (lang-refactor-perl . [(20131122 1527) nil "Simple refactorings, primarily for Perl" single ((:keywords "languages" "refactoring" "perl") (:url . "https://github.com/jplindstrom/emacs-lang-refactor-perl"))]) (lacarte . [(20151231 1609) nil "Execute menu items as commands, with completion." single ((:keywords "menu-bar" "menu" "command" "help" "abbrev" "minibuffer" "keys" "completion" "matching" "local" "internal" "extensions") (:url . "http://www.emacswiki.org/lacarte.el"))]) (labburn-theme . [(20160519 336) nil "A lab color space zenburn theme." single ((:keywords "theme" "zenburn") (:url . "https://github.com/ksjogo/labburn-theme"))]) (kwin . [(20150308 1312) nil "communicatewith the KWin window manager" single ((:url . "http://github.com/reactormonk/kwin-minor-mode"))]) (kv . [(20140108 934) nil "key/value data structure functions" single ((:keywords "lisp"))]) (kroman . [(20150827 1840) nil "Korean hangul romanization" single ((:keywords "korean" "roman"))]) (kooten-theme . [(20160214 651) ((emacs (24 1))) "Dark color theme" single ((:keywords "themes") (:url . "http://github.com/kootenpv/emacs-kooten-theme"))]) (know-your-http-well . [(20160208 1704) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar nil]) (kixtart-mode . [(20150611 1104) ((emacs (24))) "major mode for Kixtart scripting files" single ((:keywords "languages") (:url . "https://github.com/ryrun/kixtart-mode"))]) (kivy-mode . [(20140524 757) nil "Emacs major mode for editing Kivy files" single nil]) (kite-mini . [(20160508 606) ((dash (2 11 0)) (websocket (1 5))) "Remotely evaluate JavaScript in the WebKit debugger" tar ((:keywords "webkit") (:url . "https://github.com/tungd/kite-mini.el"))]) (kite . [(20130201 1338) ((json (1 2)) (websocket (0 93 1))) "WebKit inspector front-end" tar ((:keywords "tools"))]) (killer . [(20120808 622) nil "kill and delete text" single ((:keywords "convenience") (:url . "http://github.com/tarsius/killer"))]) (kill-ring-search . [(20140422 1055) nil "incremental search for the kill ring" single ((:keywords "convenience" "matching") (:url . "http://nschum.de/src/emacs/kill-ring-search/"))]) (kill-or-bury-alive . [(20160531 1108) ((emacs (24 4)) (cl-lib (0 5))) "Precise control over buffer killing in Emacs" single ((:keywords "buffer" "killing" "convenience") (:url . "https://github.com/mrkkrp/kill-or-bury-alive"))]) (kibit-helper . [(20150508 1033) ((s (0 8)) (emacs (24))) "Conveniently use the Kibit Leiningen plugin from Emacs" single ((:keywords "languages" "clojure" "kibit") (:url . "http://www.github.com/brunchboy/kibit-helper"))]) (keyword-search . [(20160526 223) nil "browser keyword search from Emacs" tar ((:keywords "web" "search" "keyword") (:url . "https://github.com/juhp/keyword-search"))]) (keyset . [(20150219 2330) ((dash (2 8 0)) (cl-lib (0 5))) "A small library for structuring key bindings." single ((:url . "https://github.com/HKey/keyset"))]) (keymap-utils . [(20160523 745) ((cl-lib (0 3))) "keymap utilities" single ((:keywords "convenience" "extensions") (:url . "https://github.com/tarsius/keymap-utils"))]) (keyfreq . [(20160516 916) ((cl-lib (0 5))) "track command frequencies" single nil]) (keychain-environment . [(20160424 646) nil "load keychain environment variables" single ((:keywords "gnupg" "pgp" "ssh") (:url . "https://github.com/tarsius/keychain-environment"))]) (key-seq . [(20150907 256) ((key-chord (0 6))) "map pairs of sequentially pressed keys to commands" single ((:keywords "convenience" "keyboard" "keybindings") (:url . "http://github.com/vlevit/key-seq.el"))]) (key-leap . [(20160109 1437) ((emacs (24 3))) "Leap between lines by typing keywords" single ((:keywords "point" "convenience") (:url . "https://github.com/MartinRykfors/key-leap"))]) (key-intercept . [(20140211 149) nil "Intercept prefix keys" single ((:keywords "keyboard") (:url . "http://github.com/tarao/key-intercept-el"))]) (key-combo . [(20150324 939) nil "map key sequence to commands" single ((:keywords "keyboard" "input") (:url . "https://github.com/uk-ar/key-combo"))]) (key-chord . [(20160227 638) nil "map pairs of simultaneously pressed keys to commands" single ((:keywords "keyboard" "chord" "input"))]) (kerl . [(20150424 1505) nil "Emacs integration for kerl" single ((:keywords "tools") (:url . "http://github.com/correl/kerl.el/"))]) (karma . [(20160220 645) ((pkg-info (0 4)) (emacs (24))) "Karma Test Runner Emacs Integration" single ((:keywords "language" "javascript" "js" "karma" "testing") (:url . "http://github.com/tonini/karma.el"))]) (kanji-mode . [(20150202 225) nil "View stroke order for kanji characters at cursor" tar ((:url . "http://github.com/wsgac/kanji-mode "))]) (kanban . [(20150930 1117) nil "Parse org-todo headlines to use org-tables as Kanban tables" single ((:keywords "outlines" "convenience"))]) (kakapo-mode . [(20150906 2352) ((cl-lib (0 5))) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single ((:keywords "indentation") (:url . "https://github.com/listx/kakapo-mode"))]) (kaesar-mode . [(20160128 408) ((kaesar (0 1 4)) (cl-lib (0 3))) "Encrypt/Decrypt buffer by AES with password." single ((:keywords "data" "convenience") (:url . "https://github.com/mhayashi1120/Emacs-kaesar"))]) (kaesar-file . [(20160128 408) ((kaesar (0 1 1))) "Encrypt/Decrypt file by AES with password." single ((:keywords "data" "files") (:url . "https://github.com/mhayashi1120/Emacs-kaesar"))]) (kaesar . [(20160128 408) ((cl-lib (0 3))) "Another AES algorithm encrypt/decrypt string with password." single ((:keywords "data") (:url . "https://github.com/mhayashi1120/Emacs-kaesar"))]) (jvm-mode . [(20150422 208) ((dash (2 6 0)) (emacs (24))) "Monitor and manage your JVMs" single ((:keywords "convenience") (:url . "https://github.com/martintrojer/jvm-mode.el"))]) (jumplist . [(20151119 2145) ((cl-lib (0 5))) "Jump like vim jumplist or ex jumplist" single ((:keywords "jumplist" "vim") (:url . "https://github.com/ganmacs/jumplist"))]) (jump-to-line . [(20130122 1053) nil "Jump to line number at point." single ((:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl"))]) (jump-char . [(20160505 1051) nil "navigation by char" single ((:url . "https://github.com/lewang/jump-char"))]) (jump . [(20151009 329) ((findr (0 7)) (inflections (1 1))) "build functions which contextually jump between files" single ((:keywords "project" "convenience" "navigation") (:url . "http://github.com/eschulte/jump.el/tree/master"))]) (julia-shell . [(20160514 928) ((julia-mode (0 3))) "Major mode for an inferior Julia shell" tar nil]) (judge-indent . [(20160524 620) nil "judge indent and tab widths" single ((:keywords "indent" "tab"))]) (jtags . [(20160211 1429) nil "enhanced tags functionality for Java development" tar ((:keywords "languages" "tools") (:url . "http://jtags.sourceforge.net"))]) (jst . [(20150604 638) ((s (1 9)) (f (0 17)) (dash (2 10)) (pcache (0 3)) (emacs (24 4))) "JS test mode" single ((:keywords "js" "javascript" "jasmine" "coffee" "coffeescript") (:url . "https://github.com/cheunghy/jst-mode"))]) (jss . [(20130508 923) ((emacs (24 1)) (websocket (0)) (js2-mode (0))) "An emacs interface to webkit and mozilla debuggers" tar ((:keywords "languages"))]) (json-snatcher . [(20150511 2247) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single ((:url . "http://github.com/sterlingg/json-snatcher"))]) (json-rpc . [(20160427 1007) ((emacs (24 1)) (cl-lib (0 5))) "JSON-RPC library" single ((:url . "https://github.com/skeeto/elisp-json-rpc"))]) (json-mode . [(20160601 556) ((json-reformat (0 0 5)) (json-snatcher (1 0 0))) "Major mode for editing JSON files" single ((:url . "https://github.com/joshwnj/json-mode"))]) (jscs . [(20151015 1249) ((emacs (24 1)) (cl-lib (0 5))) "Consistent JavaScript editing using JSCS" single ((:keywords "languages" "convenience") (:url . "https://github.com/papaeye/emacs-jscs"))]) (js3-mode . [(20160515 1050) nil "An improved JavaScript editing mode" tar ((:keywords "javascript" "languages"))]) (js2-refactor . [(20160525 313) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) "A JavaScript refactoring library for emacs." tar nil]) (js2-mode . [(20160528 1906) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar ((:keywords "languages" "javascript") (:url . "https://github.com/mooz/js2-mode/"))]) (js2-highlight-vars . [(20150914 308) ((js2-mode (20150908))) "highlight occurrences of the variable under cursor" single ((:url . "http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode/js2-highlight-vars-mode"))]) (js-doc . [(20160208 1907) nil "Insert JsDoc style comment easily" single ((:keywords "document" "comment") (:url . "https://github.com/mooz/js-doc"))]) (js-comint . [(20160220 550) ((nvm (0 2 0))) "Run a JavaScript interpreter in an inferior process window." single ((:keywords "javascript" "node" "inferior-mode" "convenience") (:url . "https://github.com/redguardtoo/js-comint"))]) (jquery-doc . [(20150812 258) nil "jQuery api documentation interface for emacs" tar ((:keywords "docs" "jquery"))]) (jq-mode . [(20160222 640) ((emacs (24 3))) "Edit jq scripts." tar ((:url . "https://github.com/ljos/jq-mode"))]) (jonprl-mode . [(20151203 342) ((emacs (24 3)) (cl-lib (0 5)) (yasnippet (0 8 0))) "A major mode for editing JonPRL files" tar ((:keywords "languages"))]) (jknav . [(20121006 1525) nil "Automatically enable j/k keys for line-based navigation" single ((:keywords "keyboard" "navigation"))]) (jist . [(20151228 1750) ((emacs (24 4)) (pkg-info (0 4)) (dash (2 12 0)) (let-alist (1 0 4)) (magit (2 1 0)) (request (0 2 0))) "Gist integration" single ((:keywords "convenience") (:url . "https://github.com/emacs-pe/jist.el"))]) (jira-markup-mode . [(20150601 1609) nil "Emacs Major mode for JIRA-markup-formatted text files" single ((:keywords "jira" "markup") (:url . "https://github.com/mnuessler/jira-markup-mode"))]) (jira . [(20131210 1222) nil "Connect to JIRA issue tracking software" single nil]) (jinja2-mode . [(20141128 407) nil "A major mode for jinja2" single nil]) (jenkins-watch . [(20121004 1826) nil "Watch continuous integration build status" single ((:url . "https://github.com/ataylor284/jenkins-watch"))]) (jenkins . [(20151114 2108) ((dash (2 12)) (emacs (24 3)) (json (1 4))) "Minimalistic Jenkins client for Emacs" single ((:keywords "jenkins" "convenience"))]) (jekyll-modes . [(20141117 714) ((polymode (0 2))) "Major modes (markdown and HTML) for authoring Jekyll content" single ((:keywords "docs") (:url . "https://github.com/fred-o/jekyll-modes"))]) (jedi-direx . [(20140310 436) ((jedi (0 1 2)) (direx (0 1 -3))) "Tree style source code viewer for Python buffer" single nil]) (jedi-core . [(20160501 2243) ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) "Common code of jedi.el and company-jedi.el" tar nil]) (jedi . [(20160425 2356) ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) "a Python auto-completion for Emacs" single nil]) (jdee . [(20160304 736) ((emacs (24 3))) "Java Development Environment for Emacs" tar ((:keywords "java" "tools") (:url . "http://github.com/jdee-emacs/jdee"))]) (jazz-theme . [(20160412 1236) nil "A warm color theme for Emacs 24." single ((:url . "https://github.com/donderom/jazz-theme"))]) (jaword . [(20150325 918) ((tinysegmenter (0 1))) "Minor-mode for handling Japanese words better" single ((:url . "http://hins11.yu-yake.com/"))]) (javadoc-lookup . [(20160213 1831) ((cl-lib (0 3))) "Javadoc Emacs integration with Maven" tar ((:url . "https://github.com/skeeto/javadoc-lookup"))]) (java-imports . [(20160311 1715) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Java imports" single ((:keywords "java") (:url . "http://www.github.com/dakrone/emacs-java-imports"))]) (jasminejs-mode . [(20150526 1905) nil "A minor mode for manipulating jasmine test files" tar ((:keywords "javascript" "jasmine") (:url . "https://github.com/stoltene2/jasminejs-mode"))]) (jar-manifest-mode . [(20160430 1926) nil "Major mode to edit JAR manifest files" single ((:keywords "convenience" "languages") (:url . "http://github.com/omajid/jar-manifest-mode"))]) (jape-mode . [(20140903 1006) nil "An Emacs editing mode mode for GATE's JAPE files" single ((:keywords "languages" "jape" "gate") (:url . "http://github.com/tanzoniteblack/jape-mode"))]) (japanlaw . [(20160129 220) ((cl-lib (0 5))) "Japan law from law.e-gov.go.jp" single ((:keywords "docs" "help"))]) (japanese-holidays . [(20150208 1937) ((cl-lib (0 3))) "calendar functions for the Japanese calendar" single ((:keywords "calendar") (:url . "https://github.com/emacs-jp/japanese-holidays"))]) (jammer . [(20160310 259) nil "Punish yourself for using Emacs inefficiently" single ((:keywords "games") (:url . "https://github.com/wasamasa/jammer"))]) (jack-connect . [(20141207 607) nil "Manage jack connections within Emacs" single nil]) (jabber-otr . [(20150918 644) ((emacs (24)) (jabber (0 8 92))) "Off-The-Record messaging for jabber.el" tar ((:keywords "comm") (:url . "https://github.com/legoscia/emacs-jabber-otr/"))]) (jabber . [(20160124 752) ((fsm (0 2))) "A Jabber client for Emacs." tar nil]) (j-mode . [(20140702 1009) nil "Major mode for editing J programs" tar ((:keywords "j" "langauges") (:url . "http://github.com/zellio/j-mode"))]) (iy-go-to-char . [(20141029 1046) nil "Go to next CHAR which is similar to \"f\" and \"t\" in vim" single ((:keywords "navigation" "search") (:url . "https://github.com/doitian/iy-go-to-char"))]) (ix . [(20131027 1129) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single ((:url . "http://www.github.com/theanalyst/ix.el"))]) (ivy-hydra . [(20160517 1549) ((emacs (24 1)) (ivy (0 8 0)) (hydra (0 13 4))) "Additional key bindings for Ivy" single ((:keywords "completion" "matching" "bindings") (:url . "https://github.com/abo-abo/swiper"))]) (ivy-erlang-complete . [(20160602 247) ((emacs (24 4)) (ivy (0 8 0)) (dash (2 12 1)) (s (1 11 0)) (erlang (20151013 157))) "Erlang completion at point using ivy." single ((:keywords "erlang" "ivy" "completion"))]) (ivy-bibtex . [(20160422 1800) ((swiper (0 7 0)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A BibTeX bibliography manager based on Ivy" tar nil]) (ivy . [(20160602 1234) ((emacs (24 1))) "Incremental Vertical completYon" tar ((:keywords "matching") (:url . "https://github.com/abo-abo/swiper"))]) (iterator . [(20160406 1406) ((emacs (24)) (cl-lib (0 5))) "A library to create and use elisp iterators objects." single ((:url . "https://github.com/thierryvolpiatto/iterator"))]) (itail . [(20151113 1035) nil "An interactive tail mode" single ((:keywords "tail") (:url . "https://github.com/re5et/itail"))]) (iss-mode . [(20141001 1413) nil "Mode for InnoSetup install scripts" single nil]) (isgd . [(20150414 436) nil "Shorten URLs using the isgd.com shortener service" single ((:url . "https://github.com/chmouel/isgd.el"))]) (isend-mode . [(20130419 458) nil "Interactively send parts of an Emacs buffer to an interpreter" single ((:url . "https://github.com/ffevotte/isend-mode.el"))]) (isearch-symbol-at-point . [(20130728 1721) nil "Use isearch to search for the symbol at point" single ((:keywords "isearch") (:url . "https://github.com/re5et/isearch-symbol-at-point"))]) (isearch-prop . [(20151231 1607) nil "Search text-property or overlay-property contexts." single ((:keywords "search" "matching" "invisible" "thing" "help") (:url . "http://www.emacswiki.org/isearch-prop.el"))]) (isearch-dabbrev . [(20141224 22) ((cl-lib (0 5))) "Use dabbrev in isearch" single ((:keywords "dabbrev" "isearch") (:url . "https://github.com/Dewdrops/isearch-dabbrev"))]) (isearch+ . [(20160227 1617) nil "Extensions to `isearch.el' (incremental search)." single ((:keywords "help" "matching" "internal" "local") (:url . "http://www.emacswiki.org/isearch+.el"))]) (irony-eldoc . [(20141227 19) ((emacs (24)) (cl-lib (0 5)) (irony (0 1))) "irony-mode support for eldoc-mode" single ((:keywords "c" "c++" "objc" "convenience" "tools") (:url . "https://github.com/ikirill/irony-eldoc"))]) (irony . [(20160531 1418) ((cl-lib (0 5)) (json (1 2))) "C/C++ minor mode powered by libclang" tar ((:keywords "c" "convenience" "tools") (:url . "https://github.com/Sarcasm/irony-mode"))]) (irfc . [(20130824 707) nil "Interface for IETF RFC document." single ((:keywords "rfc" "ietf") (:url . "http://www.emacswiki.org/emacs/download/irfc.el"))]) (iregister . [(20150515 1607) nil "Interactive register commands for Emacs." tar ((:keywords "convenience") (:url . "https://github.com/atykhonov/iregister.el"))]) (ir-black-theme . [(20130303 155) nil "Port of ir-black theme" single ((:keywords "faces"))]) (ipretty . [(20140407 20) nil "Interactive Emacs Lisp pretty-printing" single ((:keywords "pretty-print" "elisp" "buffer") (:url . "https://github.com/steckerhalter/ipretty"))]) (iplayer . [(20150101 455) nil "Browse and download BBC TV/radio shows" single ((:keywords "multimedia" "bbc") (:url . "https://github.com/csrhodes/iplayer-el"))]) (iodine-theme . [(20151031 1139) ((emacs (24))) "A light emacs color theme" single ((:keywords "themes") (:url . "https://github.com/srdja/iodine-theme"))]) (ioccur . [(20130822 48) nil "Incremental occur" single ((:url . "https://github.com/thierryvolpiatto/ioccur"))]) (io-mode-inf . [(20140128 1334) nil "Interaction with an Io interpreter." single ((:keywords "io" "languages") (:url . "https://github.com/slackorama/io-emacs"))]) (io-mode . [(20140814 521) nil "Major mode to edit Io language files in Emacs" single ((:keywords "languages" "io") (:url . "https://github.com/superbobry/io-mode"))]) (interval-tree . [(20130325 907) ((dash (1 1 0))) "Interval tree data structure for 1D range queries" single ((:keywords "extensions" "data structure") (:url . "https://github.com/Fuco1/interval-tree"))]) (interval-list . [(20150327 1218) ((dash (2 4 0)) (cl-lib (0 5)) (emacs (24 4))) "Interval list data structure for 1D selections" single ((:keywords "extensions" "data structure") (:url . "https://github.com/Fuco1/interval-list"))]) (interleave . [(20160517 1148) nil "Interleaving text books since 2015" single ((:url . "https://github.com/rudolfochrist/interleave"))]) (interaction-log . [(20160305 701) ((cl-lib (0))) "exhaustive log of interactions with Emacs" single ((:keywords "convenience") (:url . "https://github.com/michael-heerdegen/interaction-log.el"))]) (instapaper . [(20130104 821) nil "add URLs to instapaper from emacs" single ((:url . "htts://bitbucket.org/jfm/emacs-instapaper"))]) (insfactor . [(20141116 1802) nil "Client for a Clojure project with insfactor in it" single ((:keywords "clojure") (:url . "http://github.com/duelinmarkers/insfactor.el"))]) (insert-shebang . [(20160413 912) nil "Insert shebang line automatically." single ((:keywords "shebang" "tool" "convenience") (:url . "http://github.com/psachin/insert-shebang"))]) (inlineR . [(20120520 932) nil "insert Tag for inline image of R graphics" single ((:keywords "convenience" "iimage.el" "cacoo.el") (:url . "https://github.com/myuhe/inlineR.el"))]) (inline-crypt . [(20130409 707) nil "Simple inline encryption via openssl" tar nil]) (initsplit . [(20160113 853) nil "code to split customizations into different files" single ((:keywords "lisp") (:url . "http://www.gci-net.com/users/j/johnw/emacs.html"))]) (init-open-recentf . [(20160601 2200) ((emacs (24 4))) "Open recentf immediately after Emacs is started" single ((:keywords "file" "recentf" "after-init-hook"))]) (init-loader . [(20160528 815) nil "Loader for configuration files" single ((:url . "https://github.com/emacs-jp/init-loader/"))]) (info+ . [(20151231 1603) nil "Extensions to `info.el'." single ((:keywords "help" "docs" "internal") (:url . "http://www.emacswiki.org/info+.el"))]) (inflections . [(20121016 357) nil "convert english words between singular and plural" single ((:keywords "ruby" "rails" "languages" "oop") (:url . "https://github.com/eschulte/jump.el"))]) (inf-ruby . [(20160423 1037) nil "Run a Ruby process in a buffer" single ((:keywords "languages" "ruby") (:url . "http://github.com/nonsequitur/inf-ruby"))]) (inf-mongo . [(20131216 428) nil "Run a MongoDB shell process in a buffer" single ((:keywords "databases" "mongodb") (:url . "http://github.com/tobiassvn/inf-mongo"))]) (inf-clojure . [(20160404 2338) ((emacs (24 3)) (clojure-mode (5 3))) "Run an external Clojure process in an Emacs buffer" single ((:keywords "processes" "clojure") (:url . "http://github.com/clojure-emacs/inf-clojure"))]) (indy . [(20150610 1206) nil "A minor mode and EDSL to manage your mode's indentation rules." single ((:keywords "convenience" "matching" "tools"))]) (indicators . [(20130217 1605) nil "Display the buffer relative location of line in the fringe." single ((:keywords "fringe" "frames") (:url . "https://github.com/Fuco1/indicators.el"))]) (indent-guide . [(20151119 917) nil "show vertical lines to guide indentation" single ((:url . "http://hins11.yu-yake.com/"))]) (import-popwin . [(20150716 433) ((popwin (0 6)) (cl-lib (0 5))) "popwin buffer near by import statements with popwin" single ((:url . "https://github.com/syohex/emacs-import-popwin"))]) (impatient-mode . [(20150501 447) ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar ((:url . "https://github.com/netguy204/imp.el"))]) (immutant-server . [(20140311 1708) nil "Run your Immutant server in Emacs" single ((:url . "http://www.github.com/leathekd/immutant-server.el"))]) (immortal-scratch . [(20160517 1618) nil "respawn the scratch buffer when it's killed" single nil]) (imgur . [(20120307 425) ((anything (1 287))) "imgur client for Emacs" single ((:keywords "multimedia" "convenience"))]) (imenus . [(20160220 1532) ((cl-lib (0 5))) "Imenu for multiple buffers and without subgroups" single ((:keywords "tools" "convenience") (:url . "https://github.com/alezost/imenus.el"))]) (imenu-list . [(20160211 541) ((cl-lib (0 5))) "Show imenu entries in a seperate buffer" single ((:url . "https://github.com/bmag/imenu-list"))]) (imenu-anywhere . [(20160520 520) ((cl-lib (0 5))) "ido/helm imenu tag selection across all buffers with the same mode" single ((:keywords "ido" "imenu" "tags") (:url . "https://github.com/vitoshka/imenu-anywhere"))]) (imenu+ . [(20151231 1601) nil "Extensions to `imenu.el'." single ((:keywords "tools" "menus") (:url . "http://www.emacswiki.org/imenu+.el"))]) (imapfilter . [(20160419 446) nil "run the imapfilter executable" single ((:keywords "mail") (:url . "http://github.com/tarsius/imapfilter"))]) (imakado . [(20141024 423) nil "imakado's usefull macros and functions" single ((:keywords "convenience") (:url . "https://github.com/imakado/emacs-imakado"))]) (image-dired+ . [(20150430 44) ((cl-lib (0 3))) "Image-dired extensions" single ((:keywords "extensions" "multimedia") (:url . "https://github.com/mhayashi1120/Emacs-image-diredx"))]) (image-archive . [(20150620 2032) ((emacs (24)) (cl-lib (0 5))) "Image thumbnails in archive file with non-blocking" single ((:keywords "multimedia") (:url . "https://github.com/mhayashi1120/Emacs-image-archive"))]) (image+ . [(20150707 1116) ((cl-lib (0 3))) "Image manipulate extensions for Emacs" single ((:keywords "multimedia" "extensions") (:url . "https://github.com/mhayashi1120/Emacs-imagex"))]) (igv . [(20141210 627) nil "Control Integrative Genomic Viewer within Emacs" single nil]) (igrep . [(20130824 707) nil "An improved interface to `grep` and `find`" single ((:keywords "tools" "processes" "search"))]) (iedit . [(20160529 2055) nil "Edit multiple regions in the same way simultaneously." tar ((:keywords "occurrence" "region" "simultaneous" "refactoring") (:url . "http://www.emacswiki.org/emacs/Iedit"))]) (idris-mode . [(20160302 835) ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) "Major mode for editing Idris code" tar ((:keywords "languages") (:url . "https://github.com/idris-hackers/idris-mode"))]) (idomenu . [(20141123 1520) nil "imenu tag selection a la ido" single nil]) (ido-vertical-mode . [(20160429 1237) nil "Makes ido-mode display vertically." single ((:keywords "convenience") (:url . "https://github.com/creichert/ido-vertical-mode.el"))]) (ido-ubiquitous . [(20160320 138) ((emacs (24 1)) (ido-completing-read+ (3 13)) (cl-lib (0 5))) "Use ido (nearly) everywhere." single ((:keywords "convenience" "completion" "ido") (:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous"))]) (ido-springboard . [(20150505 1211) nil "Temporarily change default-directory for one command" single ((:keywords "ido") (:url . "https://github.com/jwiegley/springboard"))]) (ido-sort-mtime . [(20131117 730) nil "Sort Ido's file list by modification time" single ((:keywords "convenience" "files"))]) (ido-skk . [(20151111 350) ((emacs (24 4)) (ddskk (20150912 1820))) "ido interface for skk henkan" single ((:keywords "languages") (:url . "https://github.com/tsukimizake/ido-skk"))]) (ido-occur . [(20160527 609) ((dash (2 11 0))) "Yet another `occur' with `ido'." single ((:keywords "inner" "buffer" "search") (:url . "https://github.com/danil/ido-occur"))]) (ido-occasional . [(20150214 648) ((emacs (24 1))) "Use ido where you choose." single ((:keywords "completion") (:url . "https://github.com/abo-abo/ido-occasional"))]) (ido-migemo . [(20150921 1744) ((migemo (1 9 1))) "Migemo plug-in for Ido" single ((:keywords "files") (:url . "https://github.com/myuhe/ido-migemo.el"))]) (ido-hacks . [(20150331 1409) nil "Put more IDO in your IDO" single ((:keywords "convenience"))]) (ido-grid-mode . [(20160122 539) ((emacs (24 4))) "Display ido-prospects in the minibuffer in a grid." single ((:keywords "convenience") (:url . "https://github.com/larkery/ido-grid-mode.el"))]) (ido-gnus . [(20140216 1046) ((gnus (5 13))) "Access gnus groups or servers using ido" single ((:keywords "comm") (:url . "https://github.com/vapniks/ido-gnus"))]) (ido-describe-bindings . [(20160105 253) ((dash (2 11 0))) "Yet another `describe-bindings' with `ido'." single ((:keywords "help") (:url . "https://github.com/danil/ido-describe-bindings"))]) (ido-completing-read+ . [(20160320 138) ((emacs (24 1)) (cl-lib (0 5))) "A completing-read-function using ido" single ((:keywords "ido" "completion" "convenience") (:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous"))]) (ido-complete-space-or-hyphen . [(20130228 408) nil "Complete SPACE or HYPHEN when type SPACE in ido" single ((:keywords "ido" "completion") (:url . "https://github.com/doitian/ido-complete-space-or-hyphen"))]) (ido-at-point . [(20151021 257) ((emacs (24))) "ido-style completion-at-point" single ((:keywords "convenience" "abbrev") (:url . "https://github.com/katspaugh/ido-at-point"))]) (idle-require . [(20090715 1703) nil "load elisp libraries while Emacs is idle" single ((:keywords "internal") (:url . "http://nschum.de/src/emacs/idle-require/"))]) (idle-highlight-mode . [(20120920 1148) nil "highlight the word the point is on" single ((:keywords "convenience") (:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight"))]) (identica-mode . [(20130204 1653) nil "Major mode API client for status.net open microblogging" tar ((:keywords "identica" "web") (:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/"))]) (idea-darkula-theme . [(20160416 1803) ((emacs (24 1))) "Color theme based on IntelliJ IDEA Darkula color theme" single ((:keywords "themes") (:url . "http://github.com/fourier/idea-darkula-theme"))]) (id-manager . [(20160425 416) nil "id-password management" single ((:keywords "password" "convenience"))]) (icomplete+ . [(20151231 1600) nil "Extensions to `icomplete.el'." single ((:keywords "help" "abbrev" "internal" "extensions" "local" "completion" "matching") (:url . "http://www.emacswiki.org/icomplete+.el"))]) (icicles . [(20160529 1846) nil "Minibuffer input completion and cycling." tar ((:keywords "extensions" "help" "abbrev" "local" "minibuffer" "projects" "keys" "apropos" "completion" "matching" "regexp" "command") (:url . "http://www.emacswiki.org/icicles.el"))]) (ibuffer-vc . [(20150714 1520) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single ((:keywords "themes") (:url . "http://github.com/purcell/ibuffer-vc"))]) (ibuffer-tramp . [(20151118 1139) nil "Group ibuffer's list by TRAMP connection" single ((:keywords "convenience") (:url . "http://github.com/svend/ibuffer-tramp"))]) (ibuffer-rcirc . [(20150215 1518) ((cl-lib (0 2))) "Ibuffer integration for rcirc" single ((:keywords "buffer" "convenience" "comm") (:url . "https://github.com/fgallina/ibuffer-rcirc"))]) (ibuffer-projectile . [(20150121 1037) ((projectile (0 11 0))) "Group ibuffer's list by projectile root" single ((:keywords "themes") (:url . "http://github.com/purcell/ibuffer-projectile"))]) (i2b2-mode . [(20140709 2004) nil "Highlights corresponding PHI data in the text portion of an i2b2 XML Document." single ((:keywords "xml" "phi" "i2b2" "deidi2b2"))]) (hydra . [(20160518 921) ((cl-lib (0 5))) "Make bindings that stick around." tar ((:keywords "bindings") (:url . "https://github.com/abo-abo/hydra"))]) (hyde . [(20160507 2208) nil "Major mode to help create and manage Jekyll blogs" tar nil]) (hydandata-light-theme . [(20160122 1953) nil "A light color theme that is easy on your eyes" single ((:keywords "color-theme" "theme"))]) (hyai . [(20160319 2035) ((cl-lib (0 5)) (emacs (24))) "Haskell Yet Another Indentation" single ((:url . "https://github.com/iquiw/hyai"))]) (hy-mode . [(20151025 743) nil "Major mode for Hy code" single ((:keywords "languages" "lisp") (:url . "http://github.com/hylang/hy-mode"))]) (hungry-delete . [(20151203 1514) nil "hungry delete minor mode" single ((:url . "http://github.com/nflath/hungry-delete"))]) (httpcode . [(20121001 2245) nil "explains the meaning of an HTTP status code" single ((:url . "http://github.com/rspivak/httpcode.el"))]) (http-post-simple . [(20131010 2258) nil "HTTP POST requests using the url library" single ((:keywords "comm" "data" "processes" "hypermedia"))]) (http . [(20160523 1917) ((emacs (24 4)) (request (0 2 0))) "Yet another HTTP client" single ((:keywords "convenience") (:url . "https://github.com/emacs-pe/http.el"))]) (htmlize . [(20130207 1402) nil "Convert buffer text and decorations to HTML." single ((:keywords "hypermedia" "extensions"))]) (html-to-markdown . [(20151105 240) ((cl-lib (0 5))) "HTML to Markdown converter written in Emacs-lisp." single ((:keywords "tools" "wp" "languages") (:url . "http://github.com/Bruce-Connor/html-to-markdown"))]) (html-script-src . [(20120403 1315) nil "Insert <script src=\"..\"> for popular JavaScript libraries" single ((:keywords "tools" "convenience") (:url . "http://github.com/rejeep/html-script-src"))]) (html-check-frag . [(20160130 2335) ((emacs (24 3))) "Check html-fragments" single ((:keywords "html"))]) (ht . [(20150830 1315) nil "The missing hash table library for Emacs" single ((:keywords "hash table" "hash map" "hash"))]) (howm . [(20160405 718) ((cl-lib (0 5))) "Wiki-like note-taking tool" tar ((:url . "http://howm.osdn.jp"))]) (howdoi . [(20150203 1843) nil "Instant coding answers via Emacs." tar nil]) (how-many-lines-in-project . [(20140806 2342) nil "Calculate how many lines are there in your project." single ((:keywords "project" "convenience"))]) (hound . [(20150217 1149) ((web (1 0)) (cl-lib (0 5))) "Display hound search results in a compilation window" single nil]) (hookify . [(20141216 1609) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single ((:keywords "hook" "convenience") (:url . "https://github.com/Silex/hookify"))]) (homebrew-mode . [(20160406 1125) ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) "minor mode for editing Homebrew formulae" single ((:keywords "homebrew" "brew" "ruby") (:url . "https://github.com/dunn/homebrew-mode"))]) (hoa-mode . [(20151203 1050) nil "Major mode for the Hanoi Omega Automata format" single ((:keywords "major-mode" "automata" "convenience") (:url . "https://gitlab.lrde.epita.fr/spot/emacs-modes"))]) (hlinum . [(20160521 2312) ((cl-lib (0 2))) "Extension for linum.el to highlight current line number" single ((:keywords "convenience" "extensions") (:url . "https://github.com/tom-tan/hlinum-mode/"))]) (hl-todo . [(20160521 929) nil "highlight TODO keywords" single ((:keywords "convenience") (:url . "http://github.com/tarsius/hl-todo"))]) (hl-spotlight . [(20151231 1540) nil "Extension of hl-line.el to spotlight current few lines." single ((:keywords "highlight" "cursor" "accessibility") (:url . "http://www.emacswiki.org/hl-spotlight.el"))]) (hl-sexp . [(20101130 643) nil "highlight the current sexp" single ((:keywords "faces" "frames" "emulation"))]) (hl-sentence . [(20140802 1120) nil "highlight a sentence based on customizable face" single ((:keywords "highlighting") (:url . "http://github.com/milkypostman/hl-sentence"))]) (hl-line+ . [(20151231 1539) nil "Extensions to hl-line.el." single ((:keywords "highlight" "cursor" "accessibility") (:url . "http://www.emacswiki.org/hl-line+.el"))]) (hl-indent . [(20141227 1530) ((emacs (24)) (cl-lib (0 5))) "Highlight irregular indentation." single ((:keywords "convenience" "faces") (:url . "https://github.com/ikirill/hl-indent"))]) (hl-defined . [(20151231 1538) nil "Highlight defined or undefined symbols in Emacs-Lisp." single ((:keywords "highlight" "lisp" "functions") (:url . "http://www.emacswiki.org/hl-defined.el"))]) (hl-anything . [(20160422 1208) ((emacs (24 3))) "Highlight symbols, selections, enclosing parens and more." tar nil]) (hiwin . [(20150825 327) nil "Visible active window mode." single ((:keywords "faces" "editing" "emulating"))]) (hive . [(20131217 912) ((sql (3 0))) "Hive SQL mode extension" single ((:keywords "sql" "hive"))]) (historyf . [(20151123 1959) nil "file history library like browser" single ((:url . "https://github.com/k1LoW/emacs-historyf"))]) (history . [(20150409 1934) ((emacs (24 3))) "History utility for source code navigation" tar ((:url . "https://github.com/boyw165/history"))]) (hippie-exp-ext . [(20160502 1826) nil "Extension of hippie-expand" single ((:keywords "abbrev" "convenience" "completions" "hippie-expand") (:url . "http://www.emacswiki.org/emacs/download/hippie-exp-ext.el"))]) (hindent . [(20151113 224) ((cl-lib (0 5))) "Indent haskell code using the \"hindent\" program" single ((:url . "https://github.com/chrisdone/hindent"))]) (highlight2clipboard . [(20151020 1340) ((htmlize (1 47))) "Copy text to clipboard with highlighting." tar ((:keywords "tools"))]) (highlight-unique-symbol . [(20130612 42) ((deferred (0 3 2))) "highlight symbols which not appear in the repository" single ((:url . "https://github.com/hitode909/emacs-highlight-unique-symbol"))]) (highlight-thing . [(20160220 1842) nil "Minimalistic minor mode to highlight current thing under point." single ((:keywords "highlight" "thing" "symbol") (:url . "https://github.com/fgeller/highlight-thing.el"))]) (highlight-tail . [(20140415 2041) nil "draw a colourful \"tail\" while you write" single ((:keywords "highlight" "tail" "eye-candy" "visual-effect" "light" "color" "burn"))]) (highlight-symbol . [(20160102 1409) nil "automatic and manual symbol highlighting" single ((:keywords "faces" "matching") (:url . "http://nschum.de/src/emacs/highlight-symbol/"))]) (highlight-stages . [(20150421 2257) nil "highlight staged (quasi-quoted) expressions" single ((:url . "http://hins11.yu-yake.com/"))]) (highlight-parentheses . [(20151108 116) nil "highlight surrounding parentheses" single ((:keywords "faces" "matching") (:url . "https://github.com/tsdh/highlight-parentheses.el"))]) (highlight-operators . [(20160517 1549) nil "a face for operators in programming modes" single nil]) (highlight-numbers . [(20160516 459) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single ((:url . "https://github.com/Fanael/highlight-numbers"))]) (highlight-leading-spaces . [(20151216 622) ((emacs (24 4))) "Highlight leading spaces" single ((:url . "https://github.com/mrBliss/highlight-leading-spaces"))]) (highlight-indentation . [(20150307 408) nil "Minor modes for highlighting indentation" single ((:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs"))]) (highlight-escape-sequences . [(20151231 612) nil "Highlight escape sequences" single ((:keywords "convenience") (:url . "https://github.com/dgutov/highlight-escape-sequences"))]) (highlight-current-line . [(20051013 1256) nil "highlight line where the cursor is." single ((:keywords "faces"))]) (highlight-cl . [(20091012 1230) nil "Highlighting `cl' functions." single ((:keywords "faces") (:url . "http://www.emacswiki.org/emacs/highlight-cl.el"))]) (highlight-chars . [(20151231 1535) nil "Highlight specified sets of characters, including whitespace." single ((:keywords "highlight" "whitespace" "characters" "unicode") (:url . "http://www.emacswiki.org/highlight-chars.el"))]) (highlight . [(20151231 1537) nil "Highlighting commands." single ((:keywords "faces" "help" "local") (:url . "http://www.emacswiki.org/highlight.el"))]) (hideshowvis . [(20130824 700) nil "Add markers to the fringe for regions foldable by hideshow.el" single nil]) (hideshow-org . [(20120223 1650) nil "Provides org-mode like hide and show for hideshow.el" single ((:keywords "c" "c++" "java" "lisp" "tools" "editing" "comments" "blocks" "hiding" "outlines" "org-mode"))]) (hide-region . [(20140201 514) nil "hide regions of text using overlays" single ((:keywords "hide" "region") (:url . "http://mathias.dahl.net/pgm/emacs/elisp/hide-region.el"))]) (hide-lines . [(20151127 1240) nil "Commands for hiding lines based on a regexp" single ((:keywords "convenience") (:url . "https://github.com/vapniks/hide-lines"))]) (hide-comnt . [(20151231 1533) nil "Hide/show comments in code." single ((:keywords "comment" "hide" "show") (:url . "http://www.emacswiki.org/hide-comnt.el"))]) (hi2 . [(20141005 1431) nil "indentation module for Haskell Mode" single ((:keywords "indentation" "haskell") (:url . "https://github.com/errge/hi2"))]) (hgrc-mode . [(20150409 1543) nil "major mode for editing hgrc files" single ((:keywords "convenience" "vc" "hg") (:url . "http://github.com/omajid/hgrc-mode"))]) (hgignore-mode . [(20160430 1907) nil "a major mode for editing hgignore files" single ((:keywords "convenience" "vc" "hg") (:url . "http://github.com/omajid/hgignore-mode"))]) (hfst-mode . [(20160524 653) nil "major mode for editing HFST files" single ((:keywords "languages") (:url . "http://wiki.apertium.org/wiki/Emacs"))]) (hexrgb . [(20151231 1532) nil "Functions to manipulate colors, including RGB hex strings." single ((:keywords "number" "hex" "rgb" "color" "background" "frames" "display") (:url . "http://www.emacswiki.org/hexrgb.el"))]) (hemisu-theme . [(20130508 1344) nil "Hemisu for Emacs." tar ((:url . "http://github/anrzejsliwa/django-theme"))]) (help-mode+ . [(20151231 1531) nil "Extensions to `help-mode.el'" single ((:keywords "help") (:url . "http://www.emacswiki.org/help-mode+.el"))]) (help-fns+ . [(20151215 837) nil "Extensions to `help-fns.el'." single ((:keywords "help" "faces" "characters" "packages" "description") (:url . "http://www.emacswiki.org/help-fns+.el"))]) (help+ . [(20151231 1528) nil "Extensions to `help.el'." single ((:keywords "help") (:url . "http://www.emacswiki.org/help+.el"))]) (helm-zhihu-daily . [(20151006 319) ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm interface for 知乎日报 (http://daily.zhihu.com)" single ((:url . "https://github.com/xuchunyang/helm-zhihu-daily"))]) (helm-xcdoc . [(20160116 418) ((helm (1 5)) (emacs (24 4))) "Search Xcode Document by docsetutil and eww with helm interface" single ((:url . "https://github.com/fujimisakari/emacs-helm-xcdoc"))]) (helm-words . [(20150413 1518) nil "No description available." single nil]) (helm-wordnet . [(20160128 907) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "Helm interface to local wordnet dictionary" single ((:keywords "dictionary" "wordnet" "emacs" "elisp" "helm") (:url . "https://github.com/raghavgautam/helm-wordnet"))]) (helm-w3m . [(20150722 1024) ((helm (1 5)) (w3m (0 0)) (cl-lib (0 5)) (emacs (24 1))) "W3m bookmark - helm interface." single nil]) (helm-unicode . [(20150428 1354) ((helm (1 6)) (emacs (24 4))) "Helm command for unicode characters." single nil]) (helm-themes . [(20151009 121) ((helm-core (1 7 7))) "Color theme selection with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-themes"))]) (helm-systemd . [(20160518 133) ((emacs (24 4)) (helm (1 9 2)) (with-editor (2 5 0))) "helm's systemd interface" single ((:keywords "convenience"))]) (helm-swoop . [(20160417 1657) ((helm (1 0)) (emacs (24 3))) "Efficiently hopping squeezed lines powered by helm interface" single ((:keywords "helm" "swoop" "inner" "buffer" "search") (:url . "https://github.com/ShingoFukuyama/helm-swoop"))]) (helm-spaces . [(20160319 954) ((helm (1 9 3)) (spaces (0 1 0))) "helm sources for spaces" single ((:keywords "helm" "frames" "convenience") (:url . "https://github.com/yasuyk/helm-spaces"))]) (helm-smex . [(20160530 1436) ((emacs (24)) (smex (3 0)) (helm (1 7 7))) "Helm interface for smex" single ((:keywords "convenience"))]) (helm-sheet . [(20130630 739) ((helm (1 0))) "helm sources for sheet" single ((:keywords "helm" "sheet") (:url . "https://github.com/yasuyk/helm-sheet"))]) (helm-sage . [(20160514 245) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 1 0))) "A helm extension for sage-shell-mode." single ((:keywords "sage" "math" "helm") (:url . "https://github.com/stakemori/helm-sage"))]) (helm-safari . [(20160403 2224) ((helm (1 9 1)) (emacs (24))) "Browse your Safari bookmarks and history" single ((:keywords "tools") (:url . "https://github.com/xuchunyang/helm-safari"))]) (helm-rubygems-org . [(20140826 656) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single ((:keywords "ruby" "rubygems" "gemfile" "helm") (:url . "https://github.com/neomantic/helm-rubygems-org"))]) (helm-rubygems-local . [(20130711 2011) ((helm (1 5 3))) "Installed local rubygems find-file for helm" single ((:url . "https://github.com/f-kubotar/helm-rubygems-local"))]) (helm-robe . [(20151208 2155) ((helm (1 7 7))) "completing read function for robe" single ((:url . "https://github.com/syohex/emacs-helm-robe"))]) (helm-rhythmbox . [(20160524 658) ((helm (1 5 0)) (cl-lib (0 5))) "control Rhythmbox's play queue via Helm" single ((:url . "https://github.com/mrBliss/helm-rhythmbox"))]) (helm-recoll . [(20160601 1741) ((helm (1 9 5))) "helm interface for the recoll desktop search tool." single ((:keywords "convenience") (:url . "https://github.com/emacs-helm/helm-recoll"))]) (helm-rb . [(20131123 1039) ((helm (1 0)) (helm-ag-r (20131123))) "Search Ruby's method by ag and display helm" tar ((:keywords "searching" "ruby") (:url . "https://github.com/yuutayamada/helm-rb"))]) (helm-rails . [(20130424 1019) ((helm (1 5 1)) (inflections (1 1))) "Helm extension for Rails projects." single ((:keywords "helm" "rails" "git") (:url . "https://github.com/asok/helm-rails"))]) (helm-qiita . [(20160528 811) ((helm (1 9 5))) "Qiita with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-qiita"))]) (helm-pydoc . [(20151008 924) ((helm-core (1 7 4)) (cl-lib (0 5))) "pydoc with helm interface" tar ((:url . "https://github.com/syohex/emacs-helm-pydoc"))]) (helm-purpose . [(20160218 1209) ((emacs (24)) (helm (1 9 2)) (window-purpose (1 4))) "Helm Interface for Purpose" single ((:url . "https://github.com/bmag/helm-purpose"))]) (helm-pt . [(20160214 1742) ((helm (1 5 6))) "Helm interface to the platinum searcher" tar ((:keywords "helm" "platinum searcher"))]) (helm-projectile . [(20160602 2311) ((helm (1 7 7)) (projectile (0 13 0)) (dash (1 5 0)) (cl-lib (0 3))) "Helm integration for Projectile" single ((:keywords "project" "convenience") (:url . "https://github.com/bbatsov/helm-projectile"))]) (helm-project-persist . [(20151210 943) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single ((:keywords "project-persist" "project" "helm"))]) (helm-proc . [(20160514 918) ((helm (1 6 0))) "Helm interface for managing system processes" tar nil]) (helm-phpunit . [(20160513 353) ((helm (1 9 5)) (phpunit (0 7 0))) "Helm integration for phpunit.el" single ((:keywords "phpunit" "helm" "php") (:url . "https://github.com/eric-hansen/phpunit-helm"))]) (helm-perldoc . [(20151031 2227) ((helm-core (1 7 7)) (deferred (0 3 1)) (cl-lib (0 5))) "perldoc with helm interface" tar ((:url . "https://github.com/syohex/emacs-helm-perldoc"))]) (helm-pages . [(20160321 2113) ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) "Pages in current buffer as Helm datasource" single ((:keywords "convenience" "helm" "outlines"))]) (helm-package . [(20151210 248) ((helm (1 7 7)) (cl-lib (0 5))) "Listing ELPA packages with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-package"))]) (helm-orgcard . [(20151001 1024) ((helm-core (1 7 7))) "browse the orgcard by helm" single ((:keywords "convenience" "helm" "org") (:url . "https://github.com/emacs-jp/helm-orgcard"))]) (helm-org-rifle . [(20160420 1018) ((emacs (24 4)) (dash (2 12)) (f (0 18 1)) (helm (1 9 4)) (s (1 10 0))) "Rifle through your Org files" single ((:keywords "hypermedia" "outlines") (:url . "http://github.com/alphapapa/helm-org-rifle"))]) (helm-notmuch . [(20160412 1406) ((helm (1 9 3)) (notmuch (0 21))) "Search emails with Notmuch and Helm" single ((:keywords "mail") (:url . "https://github.com/xuchunyang/helm-notmuch"))]) (helm-mu . [(20160531 1231) ((helm (1 5 5))) "Helm sources for searching emails and contacts" single ((:url . "https://github.com/emacs-helm/helm-mu"))]) (helm-mt . [(20151104 2320) ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) "helm multi-term management." single ((:keywords "helm" "multi-term") (:url . "https://github.com/dfdeshom/helm-mt"))]) (helm-mode-manager . [(20151124 338) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single ((:url . "https://github.com/istib/helm-mode-manager"))]) (helm-migemo . [(20151009 2256) ((emacs (24 4)) (helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) "Migemo plug-in for helm" single ((:keywords "matching" "convenience" "tools" "i18n") (:url . "https://github.com/emacs-jp/helm-migemo"))]) (helm-make . [(20160331 954) ((helm (1 5 3)) (projectile (0 11 0))) "Select a Makefile target with helm" single ((:keywords "makefile") (:url . "https://github.com/abo-abo/helm-make"))]) (helm-ls-hg . [(20150909 43) ((helm (1 7 8))) "List hg files in hg project." single nil]) (helm-lobsters . [(20150213 946) ((helm (1 0)) (cl-lib (0 5))) "helm front-end for lobste.rs" single ((:url . "https://github.com/julienXX/helm-lobste.rs"))]) (helm-jstack . [(20150602 2322) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "Helm interface to Jps & Jstack for Java/JVM processes" single ((:keywords "java" "jps" "jstack" "jvm" "emacs" "elisp" "helm"))]) (helm-j-cheatsheet . [(20131228 641) ((helm (1 5 3))) "Quick J reference for Emacs" single ((:url . "https://github.com/abo-abo/helm-j-cheatsheet"))]) (helm-ispell . [(20151231 253) ((helm-core (1 7 7))) "ispell-complete-word with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ispell"))]) (helm-img-tiqav . [(20151224 1722) ((helm-img (0 0 1))) "An helm-source for joking." single ((:keywords "convenience") (:url . "https://github.com/l3msh0/helm-img"))]) (helm-img . [(20151224 1721) ((helm (1 7 7)) (cl-lib (0 5))) "Utilities for making image sources for helm." tar ((:keywords "convenience") (:url . "https://github.com/l3msh0/helm-img"))]) (helm-idris . [(20141202 1157) ((helm (0 0 0)) (idris-mode (0 9 14))) "A Helm datasource for Idris documentation, queried from the compiler" single ((:keywords "languages" "helm"))]) (helm-hoogle . [(20150919 232) ((helm (1 6 2)) (emacs (24 4))) "Use helm to navigate query results from Hoogle" single ((:keywords "haskell" "programming" "hoogle") (:url . "https://github.com/jwiegley/haskell-config"))]) (helm-helm-commands . [(20130902 1248) ((helm (1 5 4))) "List all helm commands with helm" single ((:keywords "convenience") (:url . "https://github.com/vapniks/helm-helm-commands"))]) (helm-hayoo . [(20151014 151) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single ((:keywords "helm"))]) (helm-hatena-bookmark . [(20160528 814) ((helm (1 9 5))) "Hatena::Bookmark with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark"))]) (helm-gtags . [(20160417 755) ((emacs (24 3)) (helm (1 7 7))) "GNU GLOBAL helm interface" single ((:url . "https://github.com/syohex/emacs-helm-gtags"))]) (helm-growthforecast . [(20140119 2144) ((helm (1 5 9))) "helm extensions for growthforecast." single ((:url . "https://github.com/daic-h/helm-growthforecast"))]) (helm-grepint . [(20160303 1426) ((helm (1 0)) (emacs (24))) "Generic helm interface to grep" single ((:keywords "grep" "grepping" "searching" "helm") (:url . "https://github.com/kopoli/helm-grepint"))]) (helm-google . [(20160226 1420) ((helm (0)) (google (0))) "Emacs Helm Interface for quick Google searches" single ((:keywords "helm" "google" "search" "browse") (:url . "https://github.com/steckerhalter/helm-google"))]) (helm-go-package . [(20160321 315) ((helm (1 9 3)) (go-mode (1 3 1)) (deferred (0 4 0))) "helm sources for Go programming language's package" single ((:keywords "helm" "go") (:url . "https://github.com/yasuyk/helm-go-package"))]) (helm-gitignore . [(20150517 2256) ((gitignore-mode (1 1 0)) (helm (1 7 0)) (request (0 1 0)) (cl-lib (0 5))) "Generate .gitignore files with gitignore.io." single ((:keywords "helm" "gitignore" "gitignore.io") (:url . "https://github.com/jupl/helm-gitignore"))]) (helm-git . [(20120630 1603) nil "Helm extension for Git." single ((:keywords "helm" "git") (:url . "https://github.com/maio/helm-git"))]) (helm-ghq . [(20160203 927) ((helm (1 8 0))) "ghq with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-ghq"))]) (helm-ghc . [(20141105 859) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single ((:keywords "languages" "helm"))]) (helm-fuzzy-find . [(20150613 549) ((emacs (24 1)) (helm (1 7 0))) "Find file using Fuzzy Search" single ((:keywords "helm" "fuzzy" "find" "file") (:url . "https://github.com/xuchunyang/helm-fuzzy-find"))]) (helm-fuzzier . [(20160220 240) ((emacs (24 3)) (helm (1 7 0))) "Better fuzzy matching for Helm" single ((:keywords "convenience" "helm" "fuzzy") (:url . "http://github.com/EphramPerdition/helm-fuzzier"))]) (helm-flyspell . [(20151026 1112) ((helm (1 6 5))) "Helm extension for correcting words with flyspell" single nil]) (helm-flymake . [(20130717 44) ((helm (1 0))) "helm interface for flymake" single ((:url . "https://github.com/tam17aki"))]) (helm-flycheck . [(20160319 117) ((dash (2 12 1)) (flycheck (0 25 1)) (helm (1 9 3))) "Show flycheck errors with helm" single ((:keywords "helm" "flycheck") (:url . "https://github.com/yasuyk/helm-flycheck"))]) (helm-flx . [(20160227 1852) ((emacs (24 4)) (helm (1 7 9)) (flx (0 5))) "Sort helm candidates by flx score" single ((:keywords "convenience" "helm" "fuzzy" "flx") (:url . "https://github.com/PythonNut/helm-flx"))]) (helm-firefox . [(20160419 758) ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) "Firefox bookmarks" single ((:url . "https://github.com/emacs-helm/helm-firefox"))]) (helm-filesets . [(20140929 1335) ((helm (1 6 3)) (filesets+ (0))) "A helm source for emacs filesets" single ((:keywords "filesets") (:url . "https://github.com/gcla/helm-filesets"))]) (helm-emms . [(20151001 1528) ((helm (1 5)) (emms (0 0)) (cl-lib (0 5)) (emacs (24 1))) "Emms for Helm." single nil]) (helm-emmet . [(20131014 129) ((helm (1 0)) (emmet-mode (1 0 2))) "helm sources for emmet-mode's snippets" single ((:keywords "convenience" "helm" "emmet") (:url . "https://github.com/yasuyk/helm-emmet"))]) (helm-dirset . [(20151208 1812) ((f (0 16 2)) (helm (1 6 1)) (s (1 9 0)) (cl-lib (0 5))) "helm sources for multi directories" single ((:keywords "files" "directories") (:url . "http://101000lab.org"))]) (helm-dired-recent-dirs . [(20131228 814) ((helm (1 0))) "Show recent dirs with helm.el support." single ((:keywords "helm" "dired" "zsh"))]) (helm-dictionary . [(20160601 1048) ((helm (1 5 5))) "Helm source for looking up dictionaries" single ((:url . "https://github.com/emacs-helm/helm-dictionary"))]) (helm-describe-modes . [(20160211 2318) ((helm (1 9)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface to major and minor modes." single ((:keywords "docs" "convenience") (:url . "https://github.com/emacs-helm/helm-describe-modes"))]) (helm-descbinds . [(20160108 2147) ((helm (1 5))) "A convenient `describe-bindings' with `helm'" single ((:keywords "helm" "help") (:url . "https://github.com/emacs-helm/helm-descbinds"))]) (helm-dash . [(20160416 1908) ((helm (1 9 2)) (cl-lib (0 5))) "Offline documentation browser for +150 APIs using Dash docsets." single ((:keywords "docs") (:url . "http://github.com/areina/helm-dash"))]) (helm-ctest . [(20150823 608) ((s (1 9 0)) (dash (2 11 0)) (helm-core (1 7 4))) "Run ctest from within emacs" single ((:keywords "helm" "ctest"))]) (helm-css-scss . [(20140626 1925) ((helm (1 0)) (emacs (24))) "CSS/SCSS/LESS Selectors with helm interface" single ((:keywords "scss" "css" "less" "selector" "helm") (:url . "https://github.com/ShingoFukuyama/helm-css-scss"))]) (helm-cscope . [(20150609 849) ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface for xcscope.el." single ((:keywords "cscope" "helm") (:url . "https://github.com/alpha22jp/helm-cscope.el"))]) (helm-core . [(20160601 1514) ((emacs (24 3)) (async (1 9))) "Development files for Helm" tar ((:url . "https://emacs-helm.github.io/helm/"))]) (helm-company . [(20160517 58) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" single ((:url . "https://github.com/yasuyk/helm-company"))]) (helm-commandlinefu . [(20150611 45) ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) "Search and browse commandlinefu.com from helm" single ((:keywords "commandlinefu.com") (:url . "https://github.com/xuchunyang/helm-commandlinefu"))]) (helm-codesearch . [(20160123 513) ((s (1 10 0)) (dash (2 12 0)) (helm (1 7 7)) (cl-lib (0 5))) "helm interface for codesearch" single ((:keywords "tools"))]) (helm-cmd-t . [(20150823 1357) nil "cmd-t style completion" tar ((:keywords "helm" "project-management" "completion" "convenience" "cmd-t" "textmate") (:url . "https://github.com/lewang/helm-cmd-t"))]) (helm-clojuredocs . [(20160405 223) ((edn (1 1 2)) (helm (1 5 7))) "search for help in clojuredocs.org" single ((:keywords "helm" "clojure") (:url . "https://github.com/mbuczko/helm-clojuredocs"))]) (helm-circe . [(20160207 52) ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) "helm circe buffer management." single ((:keywords "helm" "circe") (:url . "https://github.com/lesharris/helm-circe"))]) (helm-cider-history . [(20150719 1620) ((helm (1 4 0)) (cider (0 9 0))) "Helm interface for cider history" single ((:keywords "convenience") (:url . "https://github.com/Kungi/helm-cider-history"))]) (helm-chronos . [(20150528 1536) ((chronos (1 2)) (helm (1 7 1))) "helm interface for chronos timers" tar ((:keywords "calendar") (:url . "http://github.com/dxknight/helm-chronos"))]) (helm-chrome . [(20151222 1958) ((helm (1 5)) (cl-lib (0 3)) (emacs (24))) "Helm interface for Chrome bookmarks" single ((:keywords "tools") (:url . "https://github.com/kawabata/helm-chrome"))]) (helm-c-yasnippet . [(20151231 210) ((helm (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single ((:keywords "convenience" "emulation"))]) (helm-c-moccur . [(20151230 324) ((helm (20120811)) (color-moccur (2 71))) "helm source for color-moccur.el" single ((:keywords "convenience" "emulation"))]) (helm-bundle-show . [(20151221 630) ((helm (1 8 0))) "bundle show with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-bundle-show"))]) (helm-bm . [(20160321 831) ((bm (1 0)) (cl-lib (0 5)) (helm (1 9 3)) (s (1 11 0))) "helm sources for bm.el" single ((:keywords "helm" "bookmark") (:url . "https://github.com/yasuyk/helm-bm"))]) (helm-bind-key . [(20141108 2315) ((bind-key (1 0)) (helm (1 6 4))) "helm-source for for bind-key." single ((:keywords "convenience" "emulation"))]) (helm-bibtexkey . [(20140214 904) ((helm (1 5 8))) "Bibtexkey source for helm" tar ((:keywords "bib" "tex") (:url . "https://github.com/kenbeese/helm-bibtexkey"))]) (helm-bibtex . [(20160422 1800) ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A BibTeX bibliography manager based on Helm" tar nil]) (helm-backup . [(20151213 1247) ((helm (1 5 5)) (s (1 8 0)) (cl-lib (0))) "Backup each file change using git" single ((:keywords "backup" "convenience" "files" "tools" "vc") (:url . "http://github.com/antham/helm-backup"))]) (helm-aws . [(20151124 333) ((helm (1 5 3)) (cl-lib (0 5)) (s (1 9 0))) "Manage AWS EC2 server instances directly from Emacs" single ((:url . "https://github.com/istib/helm-aws"))]) (helm-anything . [(20141126 431) ((helm (20130406)) (anything (20120101))) "Bridge between anything and helm" single ((:keywords "helm" "anything" "convenience" "search" "tools") (:url . "http://www.emacswiki.org/emacs/download/helm-anything.el"))]) (helm-ag-r . [(20131123 931) ((helm (1 0))) "Search something by ag and display by helm" single ((:keywords "searching") (:url . "https://github.com/yuutayamada/helm-ag-r"))]) (helm-ag . [(20160527 954) ((emacs (24 3)) (helm (1 7 7))) "the silver searcher with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ag"))]) (helm-ad . [(20151209 415) ((dash (2 8 0)) (helm (1 6 2))) "helm source for Active Directory" single ((:keywords "comm"))]) (helm-ack . [(20141030 726) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ack"))]) (helm-R . [(20120819 1914) ((helm (20120517)) (ess (20120509))) "helm-sources and some utilities for GNU R." single ((:keywords "convenience") (:url . "https://github.com/myuhe/helm-R.el"))]) (helm . [(20160603 142) ((emacs (24 3)) (async (1 9)) (popup (0 5 3)) (helm-core (1 9 6))) "Helm is an Emacs incremental and narrowing framework" tar ((:url . "https://emacs-helm.github.io/helm/"))]) (headlong . [(20150417 1026) nil "reckless completion" single ((:keywords "completion") (:url . "https://github.com/abo-abo/headlong"))]) (header2 . [(20151231 1526) nil "Support for creation and update of file headers." single ((:keywords "tools" "docs" "maint" "abbrev" "local") (:url . "http://www.emacswiki.org/header2.el"))]) (hcl-mode . [(20160502 1900) ((emacs (24)) (cl-lib (0 5))) "Major mode for Hashicorp" single ((:url . "https://github.com/syohex/emacs-hcl-mode"))]) (hc-zenburn-theme . [(20150928 1133) nil "An higher contrast version of the Zenburn theme." single ((:url . "https:github.com/edran/hc-zenburn-emacs"))]) (hayoo . [(20140831 721) ((emacs (24)) (json (1 3))) "Query hayoo and show results in a tabulated buffer." single ((:keywords "hayoo" "haskell") (:url . "https://github.com/benma/hayoo.el/"))]) (haxe-mode . [(20131004 342) nil "An Emacs major mode for Haxe" single ((:url . "http://people.debian.org/~jps/misc/haxe-mode.el"))]) (haste . [(20141030 1534) ((json (1 2))) "Emacs client for hastebin (http://hastebin.com/about.md)" single ((:url . "http://github.com/rlister/emacs-haste-client"))]) (haskell-tab-indent . [(20151205 1359) nil "tab-based indentation for haskell-mode" single ((:keywords "indentation" "haskell") (:url . "https://spwhitton.name/tech/code/haskell-tab-indent/"))]) (haskell-mode . [(20160602 2247) ((emacs (24 3))) "A Haskell editing mode" tar ((:keywords "haskell" "cabal" "ghc" "repl") (:url . "https://github.com/haskell/haskell-mode"))]) (haskell-emacs-text . [(20150713 916) ((haskell-emacs (2 4 0))) "Haskell functions from Data.Text" tar ((:keywords "haskell" "emacs" "ffi") (:url . "https://github.com/knupfer/haskell-emacs/modules/text"))]) (haskell-emacs-base . [(20150714 1059) ((haskell-emacs (2 4 0))) "Haskell functions from Prelude" tar ((:keywords "haskell" "emacs" "ffi") (:url . "https://github.com/knupfer/haskell-emacs/modules/base"))]) (haskell-emacs . [(20160223 550) nil "Write emacs extensions in haskell" tar ((:keywords "haskell" "emacs" "ffi") (:url . "https://github.com/knupfer/haskell-emacs"))]) (harvest . [(20160405 1143) ((swiper (0 7 0)) (hydra (0 13 0)) (s (1 11 0))) "Harvest integration" single ((:keywords "harvest") (:url . "https://github.com/kostajh/harvest.el"))]) (hardcore-mode . [(20151114 101) nil "Disable arrow keys + optionally backspace and return" single nil]) (handoff . [(20150917 100) nil "Get your hand off that mouse, damn it!" single ((:url . "http://github.com/rejeep/handoff.el"))]) (handlebars-sgml-mode . [(20130623 1833) nil "Add Handlebars contextual indenting support to sgml-mode" single ((:url . "http://github.com/jacott/handlebars-sgml-mode"))]) (handlebars-mode . [(20150211 1149) nil "A major mode for editing Handlebars files." single nil]) (hamburg-theme . [(20160123 140) ((emacs (24))) "Color Theme with a dark blue background." single nil]) (ham-mode . [(20150811 806) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown" single ((:keywords "convenience" "emulation" "wp") (:url . "http://github.com/Bruce-Connor/ham-mode"))]) (hackernews . [(20160326 925) ((json (1 2))) "Access the hackernews aggregator from Emacs" tar nil]) (gvpr-mode . [(20131208 1118) nil "A major mode offering basic syntax coloring for gvpr scripts." single ((:keywords "graphviz" "gv" "dot" "gvpr" "graph") (:url . "https://raw.github.com/rodw/gvpr-lib/master/extra/gvpr-mode.el"))]) (guru-mode . [(20160415 2121) nil "Become an Emacs guru" single ((:keywords "convenience") (:url . "https://github.com/bbatsov/guru-mode"))]) (guide-key-tip . [(20140406 2020) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single ((:keywords "help" "convenience" "tooltip") (:url . "https://github.com/aki2o/guide-key-tip"))]) (guide-key . [(20150108 35) ((dash (2 10 0)) (popwin (0 3 0)) (s (1 9 0))) "Guide the following key bindings automatically and dynamically" single ((:keywords "help" "convenience") (:url . "https://github.com/kai2nenobu/guide-key"))]) (gscholar-bibtex . [(20160525 2301) nil "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" single ((:keywords "extensions"))]) (gs-mode . [(20151202 406) nil "Major mode for editing GrADS script files" single ((:keywords "grads" "script" "major-mode"))]) (grunt . [(20160316 1028) ((dash (2 9 0)) (ansi-color (3 4 2)) (emacs (24 3))) "Some glue to stick Emacs and Gruntfiles together" single ((:keywords "convenience" "grunt") (:url . "https://github.com/gempesaw/grunt.el"))]) (groovy-mode . [(20160504 411) nil "Major mode for Groovy source files" tar ((:keywords "languages"))]) (grizzl . [(20160131 151) ((cl-lib (0 5)) (emacs (24 3))) "Fast fuzzy search index for Emacs." single ((:keywords "convenience" "usability") (:url . "https://github.com/grizzl/grizzl"))]) (grin . [(20110806 158) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single ((:keywords "python" "grin" "grind" "grep" "find") (:url . "http://bitbucket.org/dariusp686/emacs-grin"))]) (greymatters-theme . [(20150621 623) ((emacs (24))) "Emacs 24 theme with a light background." single nil]) (grep-a-lot . [(20131006 847) nil "manages multiple search results buffers for grep.el" single ((:keywords "tools" "convenience" "search") (:url . "https://github.com/ZungBang/emacs-grep-a-lot"))]) (grep+ . [(20160212 825) nil "Extensions to standard library `grep.el'." single ((:keywords "tools" "processes" "compile") (:url . "http://www.emacswiki.org/grep+.el"))]) (gregorio-mode . [(20151026 920) nil "Gregorio Mode for .gabc files" single ((:keywords "gregorio" "chant") (:url . "http://chant.fsspx.pl/gregorio-mode/docs/"))]) (grass-mode . [(20160317 814) ((cl-lib (0 2)) (dash (2 8 0))) "Provides Emacs modes for interacting with the GRASS GIS program" single ((:keywords "grass" "gis"))]) (grapnel . [(20131001 1034) nil "HTTP request lib with flexible callback dispatch" single ((:url . "http://www.github.com/leathekd/grapnel"))]) (graphviz-dot-mode . [(20151127 821) nil "Mode for the dot-language used by graphviz (att)." single ((:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att") (:url . "http://ppareit.github.com/graphviz-dot-mode/"))]) (graphene-meta-theme . [(20151108 400) nil "Integrated theming for common packages" single ((:keywords "defaults") (:url . "https://github.com/rdallasgray/graphene"))]) (graphene . [(20151109 140) ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-ubiquitous (3 6)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 6 3)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) "Friendly Emacs defaults" tar nil]) (grandshell-theme . [(20150404 701) nil "Dark color theme for Emacs > 24 with intensive colors." tar nil]) (grails-projectile-mode . [(20160327 824) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." tar ((:keywords "grails" "projectile") (:url . "https://github.com/yveszoundi/grails-projectile-mode"))]) (grails-mode . [(20160504 411) nil "minor-mode that adds some Grails project management to a grails project" single ((:keywords "languages") (:url . "http://blog.wolfman.com"))]) (grails . [(20160417 136) ((emacs (24))) "Minor mode for Grails projects" single ((:url . "https://github.com/lifeisfoo/emacs-grails"))]) (gradle-mode . [(20150313 1405) ((s (1 8 0))) "Gradle integration with Emacs' compile" single ((:keywords "gradle") (:url . "http://github.com/jacobono/emacs-gradle-mode"))]) (gplusify . [(20150312 1444) nil "Add Google Plus markup to a piece of code" single ((:url . "https://github.com/jorgenschaefer/gplusify"))]) (govc . [(20160201 1146) ((emacs (24 3)) (dash (1 5 0)) (s (1 9 0)) (magit-popup (2 0 50)) (json-mode (1 6 0))) "Interface to govc for managing VMware ESXi and vCenter" single ((:keywords "convenience") (:url . "https://github.com/vmware/govmomi/tree/master/govc/emacs"))]) (goto-last-change . [(20150109 1223) nil "Move point through buffer-undo-list positions" single ((:keywords "convenience") (:url . "https://github.com/camdez/goto-last-change.el"))]) (goto-gem . [(20140729 1345) ((s (1 9 0))) "Open dired in gem directory" single ((:keywords "gemfile" "convenience"))]) (goto-chg . [(20131228 859) nil "goto last change" single ((:keywords "convenience" "matching"))]) (gotham-theme . [(20160517 755) nil "A very dark Emacs color theme." single ((:url . "https://github.com/wasamasa/gotham-theme"))]) (gotest . [(20160414 325) ((emacs (24 3)) (s (1 11 0)) (f (0 17 3)) (go-mode (1 3 1))) "Launch GO unit tests" single ((:keywords "languages" "go" "tests") (:url . "https://github.com/nlamirault/gotest.el"))]) (gorepl-mode . [(20151121 622) ((emacs (24))) "Go REPL Interactive Development in top of Gore" single ((:keywords "languages" "go" "golang" "gorepl") (:url . "http://www.github.com/manute/gorepl-mode"))]) (gore-mode . [(20151123 1327) ((go-mode (1 0 0))) "Simple mode for gore, a command-line evaluator for golang." single ((:keywords "go" "repl"))]) (goose-theme . [(20160401 33) ((emacs (24 1))) "A gray color theme" single ((:url . "https://github.com/thwg/goose-theme"))]) (google-translate . [(20160513 1725) nil "Emacs interface to Google Translate." tar nil]) (google-this . [(20160513 1212) ((emacs (24 1))) "A set of functions and bindings to google under point." single ((:keywords "convenience" "hypermedia") (:url . "http://github.com/Malabarba/emacs-google-this"))]) (google-maps . [(20130412 430) nil "Access Google Maps from Emacs" tar ((:keywords "comm"))]) (google-contacts . [(20160111 411) ((oauth2 (0 10))) "Support for Google Contacts in Emacs" tar ((:keywords "comm") (:url . "http://julien.danjou.info/projects/emacs-packages#google-contacts"))]) (google . [(20140416 1248) nil "Emacs interface to the Google API" single ((:keywords "comm" "processes" "tools"))]) (gom-mode . [(20131007 2153) nil "Major mode for Gomfile" single ((:url . "https://github.com/syohex/emacs-gom-mode"))]) (golden-ratio-scroll-screen . [(20151211 430) nil "Scroll half screen down or up, and highlight current line" single ((:keywords "scroll" "screen" "highlight") (:url . "https://github.com/jixiuf/golden-ratio-scroll-screen"))]) (golden-ratio . [(20150819 620) nil "Automatic resizing of Emacs windows to the golden ratio" single ((:keywords "window" "resizing"))]) (god-mode . [(20151005 1125) nil "God-like command entering minor mode" tar ((:url . "https://github.com/chrisdone/god-mode"))]) (go-stacktracer . [(20150430 1642) nil "parse Go stack traces" single ((:keywords "tools") (:url . "https://github.com/samertm/go-stacktracer.el"))]) (go-snippets . [(20151122 57) ((yasnippet (0 8 0))) "Yasnippets for go" tar nil]) (go-scratch . [(20150809 2340) ((go-mode (1 3 1)) (emacs (24))) "*scratch* buffer for Go" single ((:keywords "languages" "go"))]) (go-projectile . [(20160418 1817) ((projectile (0 10 0)) (go-mode (0)) (go-eldoc (0 16)) (go-rename (0)) (go-guru (0))) "Go add-ons for Projectile" single ((:keywords "project" "convenience") (:url . "https://github.com/dougm/go-projectile"))]) (go-playground . [(20160426 1428) ((emacs (24)) (go-mode (1 0 0)) (gotest (0 40 0))) "Local Golang playground for short snippets." single ((:keywords "tools" "golang") (:url . "https://github.com/grafov/go-playground"))]) (go-mode . [(20160512 310) nil "Major mode for the Go programming language" tar ((:keywords "languages" "go") (:url . "https://github.com/dominikh/go-mode.el"))]) (go-impl . [(20160522 2349) ((emacs (24)) (go-mode (1 3 0))) "impl integration for go-mode" single ((:url . "https://github.com/syohex/emacs-go-impl"))]) (go-eldoc . [(20160307 816) ((go-mode (1 0 0)) (cl-lib (0 5))) "eldoc for go-mode" single ((:url . "https://github.com/syohex/emacs-go-eldoc"))]) (go-dlv . [(20160517 1546) ((go-mode (1 3 1))) "Go Delve - Debug Go programs interactively with the GUD." single ((:keywords "go" "debug" "debugger" "delve" "interactive" "gud") (:url . "https://github.com/benma/go-dlv.el/"))]) (go-direx . [(20150315 2043) ((direx (1 0 0)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single ((:url . "https://github.com/syohex/emacs-go-direx"))]) (go-complete . [(20151015 428) ((go-mode (0)) (cl-lib (0 5))) "Native code completion for Go" single ((:keywords "go" "golang" "completion") (:url . "https://github.com/vibhavp/go-complete"))]) (go-autocomplete . [(20150903 2140) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single ((:keywords "languages"))]) (go . [(20160430 1939) ((emacs (24))) "Play GO, translate and transfer between GO back ends" tar ((:keywords "game" "go" "sgf") (:url . "http://eschulte.github.io/el-go/"))]) (gnus-x-gm-raw . [(20140610 231) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single ((:keywords "gnus") (:url . "https://github.com/aki2o/gnus-x-gm-raw"))]) (gnus-summary-ext . [(20160531 1124) nil "Extra limit and process mark commands for the gnus summary buffer" single ((:keywords "comm") (:url . "https://github.com/vapniks/gnus-summary-ext"))]) (gnus-spotlight . [(20130901 935) nil "Search mail with Spotlight" single ((:keywords "mail" "searching" "spotlight"))]) (gnus-desktop-notify . [(20160210 447) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single ((:url . "http://www.thregr.org/~wavexx/software/gnus-desktop-notify.el/"))]) (gnus-alias . [(20150315 1942) nil "an alternative to gnus-posting-styles" single ((:keywords "personality" "identity" "news" "mail" "gnus"))]) (gnuplot . [(20141231 1537) nil "drive gnuplot from within emacs" tar ((:keywords "gnuplot" "plotting"))]) (gnu-apl-mode . [(20160505 2340) ((emacs (24))) "Integrate GNU APL with Emacs" tar ((:keywords "languages" "apl") (:url . "https://github.com/lokedhs/gnu-apl-mode"))]) (gntp . [(20141024 2150) nil "Growl Notification Protocol for Emacs" single nil]) (gnomenm . [(20150316 1418) ((s (1 9 0)) (dash (2 3 0)) (kv (0 0 19))) "Emacs interface to Gnome nmcli command" single ((:keywords "processes" "hardware") (:url . "http://github.com/nicferrier/emacs-nm"))]) (gnome-calendar . [(20140112 559) nil "Integration with the GNOME Shell calendar" single ((:keywords "gnome" "calendar"))]) (gmpl-mode . [(20151116 1349) ((emacs (24))) "Major mode for editing GMPL(MathProg) files" single ((:keywords "extensions"))]) (gmail2bbdb . [(20150909 2039) nil "import email and name into bbdb from vcard." single ((:keywords "vcard" "bbdb" "email" "contact" "gmail") (:url . "http://github.com/redguardtoo/gmail2bbdb"))]) (gmail-message-mode . [(20140815 1016) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single ((:keywords "mail" "convenience" "emulation") (:url . "http://github.com/Bruce-Connor/gmail-message-mode"))]) (gitty . [(20151121 148) nil "vc-mode extension for fast git interaction" single ((:keywords "vc") (:url . "https://github.com/jorgenschaefer/gitty"))]) (gitolite-clone . [(20150819 839) ((dash (2 10 0)) (s (1 9 0)) (pcache (0 3 1)) (emacs (24))) "Clone gitolite repositories from a completing list" single ((:keywords "gitolite" "clone" "git") (:url . "https://github.com/IvanMalison/gitolite-clone"))]) (gitlab . [(20160519 503) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar ((:keywords "gitlab") (:url . "https://github.com/nlamirault/emacs-gitlab"))]) (gitignore-mode . [(20160319 502) nil "Major mode for editing .gitignore files" single ((:keywords "convenience" "vc" "git") (:url . "https://github.com/magit/git-modes"))]) (github-notifier . [(20160505 2) ((emacs (24))) "Displays your GitHub notifications unread count in mode-line" single ((:keywords "github" "mode-line") (:url . "https://github.com/xuchunyang/github-notifier.el"))]) (github-issues . [(20120425 1735) nil "Emacs utility functions and modes for managing GitHub projects' issues" single ((:keywords "github" "issues") (:url . "http://inkel.github.com/github-issues.el/"))]) (github-clone . [(20160114 853) ((gh (0 7 2)) (magit (2 1 0)) (emacs (24 4))) "Fork and clone github repos" single ((:keywords "vc" "tools") (:url . "https://github.com/dgtized/github-clone.el"))]) (github-browse-file . [(20160205 827) ((cl-lib (0 5))) "View the file you're editing on GitHub" single ((:keywords "convenience" "vc" "git" "github") (:url . "https://github.com/osener/github-browse-file"))]) (gitconfig-mode . [(20160319 502) nil "Major mode for editing .gitconfig files" single ((:keywords "convenience" "vc" "git") (:url . "https://github.com/magit/git-modes"))]) (gitconfig . [(20130718 435) nil "Emacs lisp interface to work with git-config variables" single ((:keywords "git" "gitconfig" "git-config"))]) (gitattributes-mode . [(20160319 502) nil "Major mode for editing .gitattributes files" single ((:keywords "convenience" "vc" "git") (:url . "https://github.com/magit/git-modes"))]) (git-wip-timemachine . [(20150408 506) ((s (1 9 0))) "Walk through git-wip revisions of a file" single ((:keywords "git") (:url . "https://github.com/itsjeyd/git-wip-timemachine"))]) (git-timemachine . [(20160323 1440) nil "Walk through git revisions of a file" single ((:keywords "git") (:url . "https://github.com/pidu/git-timemachine"))]) (git-messenger . [(20160602 910) ((popup (0 5 0)) (cl-lib (0 5))) "Pop up last commit information of current line" single ((:url . "https://github.com/syohex/emacs-git-messenger"))]) (git-link . [(20160401 2050) nil "Get the GitHub/Bitbucket/GitLab URL for a buffer location" single ((:keywords "git") (:url . "http://github.com/sshaw/git-link"))]) (git-lens . [(20160204 37) ((emacs (24 4))) "Show new, deleted or modified files in branch" single ((:keywords "vc" "convenience"))]) (git-gutter-fringe . [(20160520 1856) ((git-gutter (0 88)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single ((:url . "https://github.com/syohex/emacs-git-gutter-fringe"))]) (git-gutter-fringe+ . [(20140729 603) ((git-gutter+ (0 1)) (fringe-helper (1 0 1))) "Fringe version of git-gutter+.el" single ((:url . "https://github.com/nonsequitur/git-gutter-fringe-plus"))]) (git-gutter . [(20160520 1855) ((cl-lib (0 5)) (emacs (24))) "Port of Sublime Text plugin GitGutter" single ((:url . "https://github.com/syohex/emacs-git-gutter"))]) (git-gutter+ . [(20151204 1123) ((git-commit (0)) (dash (0))) "Manage Git hunks straight from the buffer" single ((:keywords "git" "vc") (:url . "https://github.com/nonsequitur/git-gutter-plus"))]) (git-dwim . [(20100718 1636) nil "No description available." single nil]) (git-commit-insert-issue . [(20160122 949) ((helm (0)) (projectile (0)) (s (0)) (github-issues (0))) "Get issues list when typing \"Fixes #\"" single ((:keywords "git" "commit" "issues") (:url . "https://gitlab.com/emacs-stuff/git-commit-insert-issue/"))]) (git-commit . [(20160519 1150) ((emacs (24 4)) (dash (20151021 113)) (with-editor (20160408 201))) "Edit Git commit messages" single ((:keywords "git" "tools" "vc") (:url . "https://github.com/magit/magit"))]) (git-command . [(20160111 703) ((term-run (0 1 4)) (with-editor (2 3 1))) "Yet another Git interface" single ((:keywords "utility" "git") (:url . "https://github.com/10sr/git-command-el"))]) (git-blame . [(20110509 1126) nil "Minor mode for incremental blame for Git" single ((:keywords "git" "version control" "release management"))]) (git-auto-commit-mode . [(20150404 951) nil "Emacs Minor mode to automatically commit and push" single ((:keywords "vc") (:url . "http://projects.ryuslash.org/git-auto-commit-mode/"))]) (git-annex . [(20160215 1311) nil "Mode for easy editing of git-annex'd files" single ((:keywords "files" "data" "git" "annex") (:url . "https://github.com/jwiegley/git-annex-el"))]) (git . [(20140128 441) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single ((:keywords "git") (:url . "http://github.com/rejeep/git.el"))]) (gist . [(20160118 1856) ((emacs (24 1)) (gh (0 9 2))) "Emacs integration for gist.github.com" single ((:keywords "tools") (:url . "https://github.com/defunkt/gist.el"))]) (gildas-mode . [(20150919 1701) ((polymode (0)) (emacs (24 3))) "Major mode for Gildas" single ((:keywords "languages" "gildas") (:url . "https://github.com/smaret/gildas-mode"))]) (ghq . [(20151130 318) nil "Ghq interface for emacs" single ((:keywords "ghq"))]) (gh-md . [(20151207 1140) ((emacs (24))) "Render markdown using the Github api" single ((:keywords "convenience") (:url . "https://github.com/emacs-pe/gh-md.el"))]) (gh . [(20160222 2011) ((emacs (24 4)) (pcache (0 3 1)) (logito (0 1))) "A GitHub library for Emacs" tar nil]) (ggtags . [(20151214 1544) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single ((:keywords "tools" "convenience") (:url . "https://github.com/leoliu/ggtags"))]) (ggo-mode . [(20130524 643) nil "Gengetopt major mode" single ((:keywords "extensions" "convenience" "local"))]) (gerrit-download . [(20150714 908) ((emacs (24 0)) (magit (2 1 0))) "Show gerrit reviews in a diff buffer." single ((:keywords "tools" "gerrit" "git") (:url . "https://github.com/chmouel/gerrit-download.el"))]) (german-holidays . [(20151102 943) nil "German holidays for Emacs calendar" single ((:url . "https://github.com/rudolfochrist/german-holidays"))]) (genrnc . [(20140612 737) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar ((:keywords "xml") (:url . "https://github.com/aki2o/emacs-genrnc"))]) (general-close . [(20160501 244) nil "Insert closing delimiter" tar ((:keywords "languages" "lisp"))]) (general . [(20160602 1918) ((cl-lib (0 5))) "Convenience wrappers for keybindings." tar ((:keywords "vim" "evil" "leader" "keybindings" "keys") (:url . "https://github.com/noctuid/general.el"))]) (geiser . [(20160528 2039) nil "GNU Emacs and Scheme talk to each other" tar nil]) (geeknote . [(20150223 1015) ((emacs (24))) "Use Evernote in Emacs through geeknote" single ((:keywords "evernote" "geeknote" "note" "emacs-evernote" "evernote-mode") (:url . "http://github.com/avendael/emacs-geeknote"))]) (geben-helm-projectile . [(20160430 48) ((emacs (24)) (geben (0 26)) (helm-projectile (0 13 0))) "Integrate helm-projectile with geben" single ((:keywords "ahungry" "emacs" "geben" "helm" "projectile" "debug") (:url . "https://github.com/ahungry/geben-helm-projectile"))]) (geben . [(20160509 1629) ((emacs (24)) (cl-lib (0 5))) "DBGp protocol frontend, a script debugger" tar ((:keywords "dbgp" "debugger" "php" "xdebug" "perl" "python" "ruby" "tcl" "komodo") (:url . "https://github.com/ahungry/geben"))]) (gather . [(20141230 738) nil "Gather string in buffer." single ((:keywords "matching" "convenience" "tools") (:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el"))]) (gandalf-theme . [(20130809 447) nil "Gandalf color theme" single ((:keywords "color" "theme"))]) (gams-mode . [(20160320 428) nil "Major mode for editing GAMS (General Algebraic Modeling System) files." single ((:keywords "gams") (:url . "http://shirotakeda.org/en/gams/gams-mode/"))]) (fzf . [(20151129 833) ((emacs (24 4))) "A front-end for fzf." single ((:keywords "fzf" "fuzzy" "search") (:url . "https://github.com/bling/fzf.el"))]) (fyure . [(20130216 714) nil "An interface to fix Japanese hyoki-yure" tar ((:keywords "languages"))]) (fwb-cmds . [(20160523 735) nil "misc frame, window and buffer commands" single ((:keywords "convenience") (:url . "https://github.com/tarsius/fwb-cmds"))]) (fvwm-mode . [(20160411 638) nil "A major mode for editing Fvwm configuration files" single ((:keywords "files") (:url . "https://github.com/theBlackDragon/fvwm-mode"))]) (fuzzy-match . [(20151231 1523) nil "fuzzy matching" single ((:keywords "matching" "completion" "string") (:url . "http://www.emacswiki.org/fuzzy-match.el"))]) (fuzzy-format . [(20130824 700) nil "select indent-tabs-mode and format code automatically." single ((:url . "http://code.101000lab.org, http://trac.codecheck.in"))]) (fuzzy . [(20150729 2237) nil "Fuzzy Matching" single ((:keywords "convenience"))]) (function-args . [(20160206 717) ((swiper (0 2 0))) "C++ completion for GNU Emacs" tar ((:url . "https://github.com/abo-abo/function-args"))]) (fullframe . [(20160504 949) ((cl-lib (0 5))) "Generalized automatic execution in a single frame" single ((:keywords "fullscreen"))]) (full-ack . [(20140223 1132) nil "a front-end for ack" single ((:keywords "tools" "matching") (:url . "http://nschum.de/src/emacs/full-ack/"))]) (fsharp-mode . [(20160427 1048) ((company (0 8 0)) (company-quickhelp (1 2 0)) (popup (0 5 3)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) "F# mode for Emacs" tar nil]) (fringe-helper . [(20140620 1609) nil "helper functions for fringe bitmaps" single ((:keywords "lisp") (:url . "http://nschum.de/src/emacs/fringe-helper/"))]) (free-keys . [(20151202 522) ((cl-lib (0 3))) "Show free keybindings for modkeys or prefixes" single ((:keywords "convenience") (:url . "https://github.com/Fuco1/free-keys"))]) (framesize . [(20131017 1632) ((key-chord (0 5 20080915))) "change the size of frames in Emacs" single ((:keywords "frames") (:url . "http://github.com/nicferrier/emacs-framesize"))]) (frame-tag . [(20151121 118) ((cl-lib (0 5))) "Minor mode that assigns a unique number to each frame for easy switching" single ((:keywords "frame" "movement") (:url . "http://github.com/liangzan/frame-tag.el"))]) (frame-restore . [(20140811 1609) ((emacs (24 1))) "Restore Emacs frame" single ((:keywords "frames" "convenience") (:url . "https://github.com/lunaryorn/frame-restore.el"))]) (frame-fns . [(20151231 1522) nil "Non-interactive frame and window functions." single ((:keywords "internal" "extensions" "local" "frames") (:url . "http://www.emacswiki.org/frame-fns.el"))]) (frame-cmds . [(20160124 1026) ((frame-fns (0))) "Frame and window commands (interactive functions)." single ((:keywords "internal" "extensions" "mouse" "frames" "windows" "convenience") (:url . "http://www.emacswiki.org/frame-cmds.el"))]) (fountain-mode . [(20160221 707) ((emacs (24 4 0)) (s (1 9 0))) "Major mode for screenwriting in Fountain markup" single ((:keywords "wp") (:url . "https://github.com/rnkn/fountain-mode"))]) (fortune-cookie . [(20151111 35) nil "Print a fortune in your scratch buffer." single ((:keywords "fortune" "cowsay" "scratch" "startup") (:url . "https://github.com/andschwa/fortune-cookie"))]) (fortpy . [(20150715 1532) ((epc (0 1 0)) (auto-complete (1 4)) (python-environment (0 0 2)) (pos-tip (0 4 5))) "a Fortran auto-completion for Emacs" tar nil]) (format-sql . [(20150422 833) nil "Use format-sql to make your SQL readable in directly Emacs." single ((:url . "https://github.com/paetzke/format-sql.el"))]) (form-feed . [(20160102 1653) nil "Display ^L glyphs as horizontal lines" single ((:keywords "faces") (:url . "https://github.com/wasamasa/form-feed"))]) (foreign-regexp . [(20160318 1107) nil "search and replace by foreign regexp." tar ((:keywords "convenience" "emulations" "matching" "tools" "unix" "wp"))]) (forecast . [(20160513 1359) ((emacs (24 4))) "Display a forecast.io weather report in a buffer" single ((:keywords "weather" "forecast") (:url . "http://gkayaalp.com/emacs.html#forecast.el"))]) (fontawesome . [(20151202 830) ((helm-core (1 7 7)) (cl-lib (0 5))) "fontawesome utility" tar ((:url . "https://github.com/syohex/emacs-fontawesome"))]) (font-lock-studio . [(20141201 1858) ((emacs (24 3))) "interactive debugger for Font Lock keywords." single ((:keywords "faces" "tools") (:url . "https://github.com/Lindydancer/font-lock-studio"))]) (font-lock+ . [(20151231 1519) nil "Enhancements to standard library `font-lock.el'." single ((:keywords "languages" "faces" "highlighting") (:url . "http://www.emacswiki.org/font-lock+.el"))]) (folding . [(20140401 203) nil "A folding-editor-like minor mode." single ((:keywords "tools"))]) (fold-this . [(20150601 542) nil "Just fold this region please" single ((:keywords "convenience"))]) (fold-dwim-org . [(20131203 751) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single ((:keywords "folding" "emacs" "org-mode") (:url . "https://github.com/mlf176f2/fold-dwim-org"))]) (fold-dwim . [(20140208 1037) nil "Unified user interface for Emacs folding modes" single ((:url . "http://www.dur.ac.uk/p.j.heslin/Software/Emacs"))]) (foggy-night-theme . [(20160209 908) ((emacs (24))) "Dark low contrast theme with soft and muted colors." single nil]) (focus-autosave-mode . [(20160519 1616) ((emacs (24 4))) "Automatically save files in focus-out-hook." single ((:keywords "convenience" "files" "frames" "mouse"))]) (focus . [(20160131 1618) ((emacs (24)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" single ((:url . "http://github.com/larstvei/Focus"))]) (fm . [(20130126 1818) nil "follow mode for compilation/output buffers" single ((:keywords "outlines"))]) (flyspell-popup . [(20150926 1003) ((popup (0 5 0))) "Correcting words with Flyspell in popup menus" single ((:keywords "convenience") (:url . "https://github.com/xuchunyang/flyspell-popup"))]) (flyparens . [(20140723 1346) nil "Check for unbalanced parens on the fly" tar ((:keywords "faces" "convenience" "lisp" "matching" "parentheses" "parens"))]) (flymd . [(20160523 259) ((cl-lib (0 5))) "On the fly markdown preview" tar ((:keywords "markdown" "convenience") (:url . "https://github.com/mola-T/flymd"))]) (flymake-yaml . [(20130423 1048) ((flymake-easy (0 1))) "A flymake handler for YAML" single ((:keywords "yaml") (:url . "https://github.com/yasuyk/flymake-yaml"))]) (flymake-vala . [(20150326 31) ((flymake-easy (0 1))) "A flymake handler for vala-mode files" single ((:keywords "convenience" "vala") (:url . "https://github.com/daniellawrence/flymake-vala"))]) (flymake-phpcs . [(20140713 131) ((flymake-easy (0 9))) "making flymake work with PHP CodeSniffer" single ((:keywords "flymake" "phpcs" "php") (:url . "https://github.com/senda-akiha/flymake-phpcs/"))]) (flymake-php . [(20121104 1302) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single ((:url . "https://github.com/purcell/flymake-php"))]) (flymake-perlcritic . [(20120328 314) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar ((:url . "https://github.com/illusori/emacs-flymake-perlcritic"))]) (flymake-less . [(20151111 138) ((less-css-mode (0 15)) (flymake-easy (0 1))) "Flymake handler for LESS stylesheets (lesscss.org)" single ((:keywords "languages"))]) (flymake-jshint . [(20140319 1700) ((flymake-easy (0 8))) "making flymake work with JSHint" single ((:keywords "flymake" "jshint" "javascript"))]) (flymake-google-cpplint . [(20140205 725) ((flymake-easy (0 9))) "Help to comply with the Google C++ Style Guide" single ((:keywords "flymake" "c" "c++") (:url . "https://github.com/senda-akiha/flymake-google-cpplint/"))]) (flymake-go . [(20150714 233) nil "A flymake handler for go-mode files" single ((:keywords "go" "flymake") (:url . "https://github.com/robert-zaremba/flymake-go"))]) (flymake-gjshint . [(20130327 732) nil "A flymake handler for javascript using both jshint and gjslint" single ((:keywords "flymake" "javascript" "jshint" "gjslint"))]) (flymake-elixir . [(20130810 917) nil "A flymake handler for elixir-mode .ex files." single nil]) (flymake-easy . [(20140818 255) nil "Helpers for easily building flymake checkers" single ((:keywords "convenience" "internal") (:url . "https://github.com/purcell/flymake-easy"))]) (flymake-cppcheck . [(20140415 757) ((flymake-easy (0 9))) "Flymake work with Cppcheck for C/C++" single ((:keywords "flymake" "cppcheck" "c" "c++") (:url . "https://github.com/senda-akiha/flymake-cppcheck/"))]) (flycheck-ycmd . [(20160320 624) ((emacs (24)) (dash (1 2 0)) (flycheck (0 22)) (ycmd (0 9)) (let-alist (1 0 4))) "flycheck integration for ycmd" single ((:url . "https://github.com/abingham/emacs-ycmd"))]) (flycheck-tip . [(20160318 2034) ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) "Show flycheck/flymake errors by tooltip" tar ((:keywords "flycheck") (:url . "https://github.com/yuutayamada/flycheck-tip"))]) (flycheck-status-emoji . [(20160207 1651) ((emacs (24)) (flycheck (0 20)) (let-alist (1 0))) "Show flycheck status using cute, compact emoji" single ((:keywords "convenience" "languages" "tools") (:url . "https://github.com/liblit/flycheck-status-emoji"))]) (flycheck-stack . [(20160520 444) ((flycheck (26)) (haskell-mode (13))) "Flychecker using stack ghci" single nil]) (flycheck-rust . [(20160511 1550) ((emacs (24 1)) (flycheck (0 20)) (dash (2 4 0)) (seq (2 15))) "Flycheck: Rust additions and Cargo support" single ((:keywords "tools" "convenience") (:url . "https://github.com/flycheck/flycheck-rust"))]) (flycheck-pyflakes . [(20140630 1721) ((flycheck (0 18))) "Support pyflakes in flycheck" single nil]) (flycheck-purescript . [(20160512 2145) ((emacs (24 3)) (flycheck (0 22)) (dash (2 12 0)) (let-alist (1 0 4)) (seq (1 11))) "Flycheck: PureScript support" single ((:keywords "convenience" "tools" "languages") (:url . "https://github.com/emacs-pe/flycheck-purescript"))]) (flycheck-protobuf . [(20160211 900) ((protobuf-mode (0))) "protobuf checker for flycheck" single ((:keywords "flycheck") (:url . "https://github.com/edvorg/flycheck-protobuf"))]) (flycheck-pos-tip . [(20160323 329) ((dash (2 12)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" single ((:keywords "tools" "convenience") (:url . "https://github.com/flycheck/flycheck-pos-tip"))]) (flycheck-pony . [(20160501 1617) ((flycheck (0 25 1))) "Pony support in Flycheck" single ((:keywords "tools" "convenience") (:url . "https://github.com/seantallen/flycheck-pony"))]) (flycheck-pkg-config . [(20160430 1711) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "configure flycheck using pkg-config" single ((:keywords "flycheck"))]) (flycheck-perl6 . [(20150414 2032) ((emacs (24 3)) (flycheck (0 22))) "Perl 6 support in Flycheck" single ((:keywords "tools" "convenience") (:url . "https://github.com/hinrik/flycheck-perl6"))]) (flycheck-package . [(20160502 335) ((cl-lib (0 5)) (flycheck (0 22)) (emacs (24))) "A Flycheck checker for elisp package authors" single ((:keywords "lisp"))]) (flycheck-ocaml . [(20151103 412) ((emacs (24 1)) (flycheck (0 22)) (merlin (2 3)) (let-alist (1 0 3))) "Flycheck: OCaml support" single ((:keywords "convenience" "tools" "languages") (:url . "https://github.com/flycheck/flycheck-ocaml"))]) (flycheck-nim . [(20150911 1847) ((dash (2 4 0)) (flycheck (0 20))) "Defines a flycheck syntax checker for nim" single ((:url . "https://github.com/ALSchwalm/flycheck-nim"))]) (flycheck-mypy . [(20160220 1632) ((flycheck (0 18))) "Support mypy in flycheck" single nil]) (flycheck-mercury . [(20151123 134) ((flycheck (0 22)) (s (1 9 0)) (dash (2 4 0))) "Mercury support in Flycheck" single ((:keywords "convenience" "languages" "tools") (:url . "https://github.com/flycheck/flycheck-mercury"))]) (flycheck-ledger . [(20140605 1346) ((flycheck (0 15))) "Flycheck integration for ledger files" single ((:keywords "convenience" "languages" "tools"))]) (flycheck-irony . [(20160317 1736) ((emacs (24 1)) (flycheck (0 22)) (irony (0 2 0))) "Flycheck: C/C++ support via Irony" single ((:keywords "convenience" "tools" "c") (:url . "https://github.com/Sarcasm/flycheck-irony/"))]) (flycheck-hdevtools . [(20160109 2014) ((flycheck (0 21 -4 1)) (dash (2 0))) "A flycheck checker for Haskell using hdevtools" single ((:keywords "convenience" "languages" "tools") (:url . "https://github.com/flycheck/flycheck-hdevtools"))]) (flycheck-haskell . [(20160524 317) ((emacs (24 3)) (flycheck (0 25)) (haskell-mode (13 7)) (dash (2 4 0)) (seq (1 11)) (let-alist (1 0 1))) "Flycheck: Automatic Haskell configuration" tar ((:keywords "tools" "convenience") (:url . "https://github.com/flycheck/flycheck-haskell"))]) (flycheck-google-cpplint . [(20140806 1125) ((flycheck (0 20 -4 1))) "Help to comply with the Google C++ Style Guide" single ((:keywords "flycheck" "c" "c++") (:url . "https://github.com/flycheck/flycheck-google-cpplint/"))]) (flycheck-ghcmod . [(20150114 32) ((flycheck (0 21 -4 1)) (dash (2 0))) "A flycheck checker for Haskell using ghcmod" single ((:keywords "convenience" "languages" "tools") (:url . "https://github.com/scturtle/flycheck-ghcmod"))]) (flycheck-flow . [(20151218 604) ((flycheck (0 18))) "Support Flow in flycheck" single nil]) (flycheck-elm . [(20151204 924) ((flycheck (0 24)) (emacs (24 4))) "Flycheck support for the elm language" single ((:url . "https://github.com/bsermons/flycheck-elm"))]) (flycheck-elixir . [(20160404 231) ((flycheck (0 25))) "Support Elixir in flycheck" single nil]) (flycheck-dmd-dub . [(20160601 1209) ((flycheck (0 24)) (f (0 18 2))) "Sets flycheck-dmd-include-paths from dub package information" single ((:keywords "languages") (:url . "http://github.com/atilaneves/flycheck-dmd-dub"))]) (flycheck-dialyzer . [(20160326 930) ((flycheck (0 18))) "Support dialyzer in flycheck" single nil]) (flycheck-d-unittest . [(20160521 2317) ((flycheck (0 21 -4 1)) (dash (1 4 0))) "Add D unittest support to flycheck" single ((:keywords "flycheck" "d") (:url . "https://github.com/tom-tan/flycheck-d-unittest/"))]) (flycheck-cython . [(20160327 1428) ((flycheck (0 25))) "Support Cython in flycheck" single nil]) (flycheck-cstyle . [(20160320 1808) ((flycheck (0 24)) (emacs (24 4))) "Integrate cstyle with flycheck" single ((:url . "https://github.com/alexmurray/flycheck-cstyle"))]) (flycheck-css-colorguard . [(20151122 347) ((flycheck (0 22)) (emacs (24))) "Detect similar colors in CSS" single ((:keywords "flycheck" "css" "colorguard") (:url . "https://github.com/Simplify/flycheck-css-colorguard/"))]) (flycheck-color-mode-line . [(20131125 2338) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single ((:keywords "convenience" "language" "tools"))]) (flycheck-clojure . [(20160319 958) ((cider (0 8 1)) (flycheck (0 22 -4 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" single ((:url . "https://github.com/clojure-emacs/squiggly-clojure"))]) (flycheck-clangcheck . [(20150712 210) ((cl-lib (0 5)) (seq (1 7)) (flycheck (0 17))) "A Flycheck checker difinition for ClangCheck." single ((:url . "https://github.com/kumar8600/flycheck-clangcheck"))]) (flycheck-cask . [(20150920 653) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single ((:keywords "tools" "convenience") (:url . "https://github.com/flycheck/flycheck-cask"))]) (flycheck-apertium . [(20160406 818) ((flycheck (0 25))) "Apertium checkers in flycheck" tar ((:keywords "convenience" "tools" "xml") (:url . "http://wiki.apertium.org/wiki/Emacs"))]) (flycheck . [(20160602 1411) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "On-the-fly syntax checking" tar ((:keywords "convenience" "languages" "tools") (:url . "http://www.flycheck.org"))]) (flx-isearch . [(20160105 1417) ((emacs (24)) (flx (20140821)) (cl-lib (0 5))) "Fuzzy incremental searching for emacs" single ((:keywords "convenience" "search" "flx") (:url . "https://github.com/pythonnut/flx-isearch"))]) (flx-ido . [(20151030 1312) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single ((:url . "https://github.com/lewang/flx"))]) (flx . [(20151030 1312) ((cl-lib (0 3))) "fuzzy matching with good sorting" single ((:url . "https://github.com/lewang/flx"))]) (floobits . [(20160517 1752) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar ((:keywords "comm" "tools") (:url . "http://github.com/Floobits/floobits-emacs"))]) (flim . [(20160311 1737) ((apel (10 8))) "A library to provide basic features about message representation or encoding." tar nil]) (flex-isearch . [(20130508 1703) nil "Flex matching (like ido) in isearch." single ((:keywords "convenience" "search") (:url . "https://bitbucket.org/jpkotta/flex-isearch"))]) (flex-autopair . [(20120809 718) nil "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." single ((:keywords "keyboard" "input") (:url . "https://github.com/uk-ar/flex-autopair.el"))]) (flatui-theme . [(20150531 343) nil "A color theme for Emacs based on flatuicolors.com" single ((:url . "https://github.com/john2x/flatui-theme.el"))]) (flatland-theme . [(20140805 505) nil "A simple theme for Emacs based on the Flatland theme for Sublime Text" single ((:url . "http://github.com/gregchapple/flatland-emacs"))]) (flash-region . [(20130923 1317) nil "Flash a region" single ((:keywords "utility"))]) (fix-word . [(20150716 802) ((emacs (24 1)) (cl-lib (0 5))) "Convenient word transformation" single ((:keywords "word" "convenience") (:url . "https://github.com/mrkkrp/fix-word"))]) (fix-input . [(20160122 2319) ((emacs (24 4))) "Make input methods play nicely with alternative keyboard layout on OS level" single ((:keywords "input" "method") (:url . "https://github.com/mrkkrp/fix-input"))]) (fit-frame . [(20151231 1514) nil "Resize a frame.  In particular, fit a frame to its buffers." single ((:keywords "internal" "extensions" "convenience" "local") (:url . "http://www.emacswiki.org/fit-frame.el"))]) (fish-mode . [(20160429 2257) ((emacs (24))) "Major mode for fish shell scripts" single ((:keywords "fish" "shell"))]) (firestarter . [(20160318 1542) nil "Execute (shell) commands on save" single ((:keywords "convenience") (:url . "https://github.com/wasamasa/firestarter"))]) (fireplace . [(20160101 1247) nil "A cozy fireplace for emacs" single ((:keywords "games") (:url . "https://github.com/johanvts/emacs-fireplace"))]) (firefox-controller . [(20160320 1347) ((moz (0)) (popwin (1 0 0)) (cl-lib (0 5))) "An improved Firefox controller" single ((:keywords "extensions") (:url . "https://github.com/cute-jumper/emacs-firefox-controller"))]) (fingers . [(20150809 1916) nil "Modal editing with universal text manipulation helpers." tar ((:keywords "fingers" "modal" "editing" "workman") (:url . "http://github.com/fgeller/fingers.el"))]) (findr . [(20130824 707) nil "Breadth-first file-finding facility for (X)Emacs" single ((:keywords "files"))]) (finder+ . [(20151231 1513) nil "Extensions to standard library finder.el" single ((:keywords "help") (:url . "http://www.emacswiki.org/finder+.el"))]) (find-things-fast . [(20150519 1726) nil "Find things fast, leveraging the power of git" single ((:keywords "project" "convenience"))]) (find-temp-file . [(20160108 413) nil "Open quickly a temporary file" single ((:keywords "convenience") (:url . "https://github.com/thisirs/find-temp-file.git"))]) (find-file-in-repository . [(20151113 719) nil "Quickly find files in a git, mercurial or other repository" single ((:keywords "files" "convenience" "repository" "project" "source control") (:url . "https://github.com/hoffstaetter/find-file-in-repository"))]) (find-file-in-project . [(20160516 54) ((swiper (0 7 0)) (emacs (24 3))) "Find files in a project quickly, on any OS" single ((:keywords "project" "convenience") (:url . "https://github.com/technomancy/find-file-in-project"))]) (find-dired+ . [(20160515 1150) nil "Extensions to `find-dired.el'." single ((:keywords "internal" "unix" "tools" "matching" "local") (:url . "http://www.emacswiki.org/find-dired+.el"))]) (find-by-pinyin-dired . [(20150202 416) nil "Find file by first Pinyin characters of Chinese Hanzi" tar nil]) (finalize . [(20140127 1246) ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar nil]) (fill-column-indicator . [(20151030 1433) nil "Graphically indicate the fill column" single ((:keywords "convenience"))]) (filesets+ . [(20151231 1508) nil "Extensions to `filesets.el'." single ((:url . "http://www.emacswiki.org/filesets+.el"))]) (files+ . [(20151231 1507) nil "Enhancements of standard library `files.el'." single ((:keywords "internal" "extensions" "local") (:url . "http://www.emacswiki.org/files+.el"))]) (figlet . [(20160218 1637) nil "Annoy people with big, ascii art text" single nil]) (fifo-class . [(20160425 58) nil "First in first out abstract class" single ((:keywords "lisp") (:url . "https://github.com/mola-T/fifo-class"))]) (fic-mode . [(20160209 1211) nil "Show FIXME/TODO/BUG(...) in special face only in comments and strings" single ((:url . "https://github.com/lewang/fic-mode"))]) (feature-mode . [(20141121 1230) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar nil]) (fcopy . [(20150304 803) nil "Funny Copy, set past point HERE then search copy text" single ((:keywords "convenience") (:url . "https://github.com/ataka/fcopy"))]) (fcitx . [(20160518 1154) nil "Make fcitx better in Emacs" single ((:keywords "extensions") (:url . "https://github.com/cute-jumper/fcitx.el"))]) (faust-mode . [(20160119 1120) nil "Basic faust syntax colorizer for emacs." single ((:keywords "languages") (:url . "https://github.com/magnetophon/emacs-faust-mode"))]) (fastnav . [(20120211 857) nil "Fast navigation and editing routines." single ((:keywords "nav" "fast" "fastnav" "navigation"))]) (fastdef . [(20160517 720) ((ivy (0 7 0)) (w3m (0 0))) "Insert terminology from Google top search results" single ((:keywords "terminology" "org-mode" "markdown") (:url . "http://github.com/redguardtoo/fastdef"))]) (fasd . [(20151208 116) ((grizzl (0))) "Emacs integration for the command-line productivity booster `fasd'" single ((:keywords "cli" "bash" "zsh" "autojump") (:url . "https://github.com/steckerhalter/emacs-fasd"))]) (farmhouse-theme . [(20150506 2327) nil "Farmhouse Theme, Emacs edition" tar ((:keywords "color" "theme") (:url . "https://github.com/mattly/emacs-farmhouse-theme"))]) (fancy-narrow . [(20160124 603) nil "narrow-to-region with more eye candy." single ((:keywords "faces" "convenience") (:url . "http://github.com/Bruce-Connor/fancy-narrow"))]) (fancy-battery . [(20150101 604) ((emacs (24 1))) "Fancy battery display" single ((:keywords "convenience" "tools" "hardware") (:url . "https://github.com/lunaryorn/fancy-battery.el"))]) (fakir . [(20140729 1152) ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) "fakeing bits of Emacs" single ((:keywords "lisp" "tools") (:url . "http://github.com/nicferrier/emacs-fakir"))]) (fakespace . [(20120817 1906) nil "fake namespaces with defpackage" single ((:url . "https://github.com/skeeto/elisp-fakespace"))]) (faff-theme . [(20160424 1052) nil "Light Emacs color theme on ivory3 background" single ((:keywords "color" "theme") (:url . "https://github.com/WJCFerguson/emacs-faff-theme"))]) (factlog . [(20130209 1940) ((deferred (0 3 1))) "File activity logger" single ((:url . "https://github.com/tkf/factlog"))]) (faceup . [(20150215 1548) nil "Regression test system for font-lock" single ((:keywords "faces" "languages") (:url . "https://github.com/Lindydancer/faceup"))]) (faces+ . [(20151231 1505) nil "Extensions to `faces.el'." single ((:keywords "faces" "local") (:url . "http://www.emacswiki.org/faces+.el"))]) (facemenu+ . [(20151231 1505) nil "Extensions to `facemenu.el'." single ((:keywords "faces" "extensions" "convenience" "menus" "local") (:url . "http://www.emacswiki.org/facemenu+.el"))]) (face-remap+ . [(20151231 1502) nil "Extensions to standard library `face-remap.el'." single ((:keywords "window" "frame" "face" "font") (:url . "http://www.emacswiki.org/face-remap+.el"))]) (fabric . [(20141024 522) nil "Launch Fabric using Emacs" tar ((:keywords "python" "fabric") (:url . "https://github.com/nlamirault/fabric.el"))]) (f . [(20160426 727) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single ((:keywords "files" "directories") (:url . "http://github.com/rejeep/f.el"))]) (ez-query-replace . [(20140810 717) ((dash (1 2 0))) "a smarter context-sensitive query-replace that can be reapplied" single nil]) (eyuml . [(20141028 1727) ((request (0 2 0)) (s (1 8 0))) "Write textual uml diagram from emacs using yuml.me" single ((:keywords "uml") (:url . "http://github.com/antham/eyuml"))]) (eyedropper . [(20151231 1501) ((hexrgb (0))) "Pick foreground and background colors at cursor or pointer." single ((:keywords "color" "rgb" "hsv" "hexadecimal" "face" "frame") (:url . "http://www.emacswiki.org/eyedropper.el"))]) (eyebrowse . [(20160102 1649) ((dash (2 7 0)) (emacs (24 3 1))) "Easy window config switching" single ((:keywords "convenience") (:url . "https://github.com/wasamasa/eyebrowse"))]) (exwm-x . [(20160307 255) ((cl-lib (0 5)) (exwm (0 1)) (switch-window (0 10)) (dmenu (0 1)) (start-menu (0 1))) "Addition tools for exwm (emacs x window manager)" tar ((:keywords "window-manager" "exwm") (:url . "https://github.com/tumashu/exwm-x"))]) (extend-dnd . [(20151122 1250) nil "R drag and Drop" tar ((:keywords "extend" "drag and drop") (:url . "https://github.com/mlf176f2/extend-dnd"))]) (expand-region . [(20150902 758) nil "Increase selected region by semantic units." tar nil]) (expand-line . [(20151005 2107) nil "Expand selection by line" single nil]) (exec-path-from-shell . [(20160113 46) nil "Get environment variables such as $PATH from the shell" single ((:keywords "environment") (:url . "https://github.com/purcell/exec-path-from-shell"))]) (eww-lnum . [(20150102 912) nil "Conkeror-like functionality for eww" single ((:keywords "eww" "browse" "conkeror") (:url . "https://github.com/m00natic/eww-lnum"))]) (ewmctrl . [(20150630 338) nil "Use `wmctrl' to manage desktop windows." single ((:keywords "desktop" "windows") (:url . "https://github.com/flexibeast/ewmctrl"))]) (evm . [(20141007 656) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single ((:url . "http://github.com/rejeep/evm"))]) (evil-visualstar . [(20160222 1848) ((evil (0))) "Starts a * or # search from the visual selection" single ((:keywords "evil" "vim" "visualstar") (:url . "https://github.com/bling/evil-visualstar"))]) (evil-visual-mark-mode . [(20150202 1200) ((evil (1 0 9)) (dash (2 10))) "Display evil marks on buffer" single ((:keywords "evil"))]) (evil-vimish-fold . [(20160430 640) ((emacs (24 4)) (evil (1 0 0)) (vimish-fold (0 2 0))) "Integrate vimish-fold with evil" single ((:url . "https://github.com/alexmurray/evil-vimish-fold"))]) (evil-tutor . [(20150103 50) ((evil (1 0 9))) "Vimtutor adapted to Evil and wrapped in a major-mode" tar ((:keywords "convenience" "editing" "evil") (:url . "https://github.com/syl20bnr/evil-tutor"))]) (evil-textobj-column . [(20151228 1544) ((names (0 5)) (emacs (24)) (evil (0))) "Provides column text objects." single ((:keywords "evil" "column" "text-object") (:url . "https://github.com/noctuid/evil-textobj-column"))]) (evil-textobj-anyblock . [(20151017 1617) ((cl-lib (0 5)) (evil (1 1 0))) "Textobject for the closest user-defined blocks." single ((:keywords "evil") (:url . "https://github.com/noctuid/evil-textobj-anyblock"))]) (evil-terminal-cursor-changer . [(20150827 2151) ((evil (1 0 8))) "Change cursor shape and color by evil state in terminal" single ((:keywords "evil" "terminal" "cursor") (:url . "https://github.com/7696122/evil-terminal-cursor-changer"))]) (evil-surround . [(20160501 1904) ((evil (1 2 12))) "emulate surround.vim from Vim" single ((:keywords "emulation" "vi" "evil"))]) (evil-space . [(20151208 628) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single ((:keywords "space" "repeat" "motion") (:url . "http://github.com/linktohack/evil-space"))]) (evil-smartparens . [(20160502 355) ((evil (1 0)) (emacs (24 4)) (smartparens (1 6 3))) "Evil support for smartparens" single ((:keywords "evil" "smartparens") (:url . "https://www.github.com/expez/evil-smartparens"))]) (evil-search-highlight-persist . [(20151215 438) ((highlight (0))) "Persistent highlights after search" single nil]) (evil-rsi . [(20160221 1504) ((evil (1 0 0))) "Use emacs motion keys in evil, inspired by vim-rsi" single ((:keywords "evil" "rsi" "evil-rsi") (:url . "http://github.com/linktohack/evil-rsi"))]) (evil-rails . [(20150803 646) ((evil (1 0)) (projectile-rails (1 0))) "Rails support for Evil Mode" single ((:keywords "ruby" "rails" "vim" "project" "convenience" "web" "evil" "projectile") (:url . "https://github.com/antono/evil-rails"))]) (evil-quickscope . [(20160202 1324) ((evil (0))) "Highlight unique characters in words for f,F,t,T navigation" single ((:keywords "faces" "emulation" "vim" "evil") (:url . "http://github.com/blorbx/evil-quickscope"))]) (evil-org . [(20151203 147) ((evil (0)) (org (0)) (evil-leader (0))) "evil keybindings for org-mode" single ((:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets") (:url . "https://github.com/edwtjo/evil-org-mode.git"))]) (evil-numbers . [(20140606 751) nil "increment/decrement numbers like in vim" single ((:keywords "numbers" "increment" "decrement" "octal" "hex" "binary") (:url . "http://github.com/cofi/evil-numbers"))]) (evil-nerd-commenter . [(20160524 600) nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar nil]) (evil-mu4e . [(20160214 522) ((emacs (24 4)) (dash (2 12 0)) (evil (1 2 10))) "evil-based key bindings for mu4e" single ((:url . "https://github.com/JorisE/evil-mu4e"))]) (evil-mc . [(20160507 7) ((emacs (24 3)) (evil (1 2 11)) (cl-lib (0 5))) "Multiple cursors for evil-mode" tar ((:keywords "evil" "editing" "multiple-cursors" "vim" "evil-multiple-cursors" "evil-mc" "evil-mc") (:url . "https://github.com/gabesoft/evil-mc"))]) (evil-matchit . [(20160413 825) nil "Vim matchit ported into Emacs (requires EVIL)" tar nil]) (evil-mark-replace . [(20150424 218) ((evil (1 0 8))) "replace the thing in marked area" single ((:keywords "mark" "replace" "evil") (:url . "http://github.com/redguardtoo/evil-mark-replace"))]) (evil-magit . [(20160420 615) ((evil (1 2 3)) (magit (2 6 0))) "evil-based key bindings for magit" single ((:url . "https://github.com/justbur/evil-magit"))]) (evil-lispy . [(20160522 1306) ((lispy (0 26 0)) (evil (1 2 12)) (hydra (0 13 5))) "precision Lisp editing with Evil and Lispy" tar ((:keywords "lisp") (:url . "https://github.com/sp3ctum/evil-lispy"))]) (evil-lisp-state . [(20160403 2148) ((evil (1 0 9)) (bind-map (0)) (smartparens (1 6 1))) "An evil state to edit Lisp code" single ((:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic") (:url . "https://github.com/syl20bnr/evil-lisp-state"))]) (evil-leader . [(20140606 743) ((evil (0))) "let there be <leader>" single ((:keywords "evil" "vim-emulation" "leader") (:url . "http://github.com/cofi/evil-leader"))]) (evil-indent-textobject . [(20130831 1719) ((evil (0))) "evil textobjects based on indentation" single ((:keywords "convenience" "evil") (:url . "http://github.com/cofi/evil-indent-textobject"))]) (evil-indent-plus . [(20151109 1306) ((evil (0)) (cl-lib (0 5))) "Evil textobjects based on indentation" single ((:keywords "convenience" "evil") (:url . "http://github.com/TheBB/evil-indent-plus"))]) (evil-iedit-state . [(20160313 1356) ((evil (1 0 9)) (iedit (0 97))) "Evil states to interface iedit mode." single ((:keywords "convenience" "editing" "evil" "iedit" "mnemonic") (:url . "https://github.com/syl20bnr/evil-iedit-state"))]) (evil-god-state . [(20141116 2055) ((evil (1 0 8)) (god-mode (2 12 0))) "use god-mode keybindings in evil-mode" single ((:keywords "evil" "leader" "god-mode") (:url . "https://github.com/gridaphobe/evil-god-state"))]) (evil-find-char-pinyin . [(20160514 1541) ((evil (1 2 12)) (pinyinlib (0 1 0))) "Evil's f/F/t/T/evil-snipe commands with Pinyin support" single ((:keywords "extensions"))]) (evil-extra-operator . [(20160407 122) ((evil (1 0 7))) "Evil operator for evaluating codes, taking notes, searching via google, etc." single ((:keywords "evil" "plugin") (:url . "http://github.com/Dewdrops/evil-extra-operator"))]) (evil-exchange . [(20160407 2318) ((evil (1 2 8)) (cl-lib (0 3))) "Exchange text more easily within Evil" single ((:keywords "evil" "plugin") (:url . "http://github.com/Dewdrops/evil-exchange"))]) (evil-escape . [(20160313 1405) ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) "Escape from anything with a customizable key sequence" single ((:keywords "convenience" "editing" "evil") (:url . "https://github.com/syl20bnr/evil-escape"))]) (evil-embrace . [(20160519 1329) ((emacs (24 4)) (embrace (0 1 0)) (evil-surround (0))) "Evil integration of embrace.el" single ((:keywords "extensions"))]) (evil-ediff . [(20160202 1441) ((evil (1 2 3))) "Make ediff a little evil" single ((:url . "https://github.com/justbur/evil-ediff"))]) (evil-easymotion . [(20160510 1209) ((emacs (24)) (avy (0 3 0)) (cl-lib (0 5))) "A port of vim's easymotion to emacs" single ((:keywords "convenience" "evil") (:url . "https://github.com/pythonnut/evil-easymotion"))]) (evil-dvorak . [(20160416 1341) ((evil (1 0 8))) "evil keybindings for that work with dvorak mode" tar ((:keywords "evil" "vim-emulation" "dvorak" "keyboard") (:url . "https://github.com/jbranso/evil-dvorak.git"))]) (evil-commentary . [(20160221 1430) ((evil (1 0 0))) "Comment stuff out. A port of vim-commentary." tar ((:keywords "evil" "comment" "commentary" "evil-commentary") (:url . "http://github.com/linktohack/evil-commentary"))]) (evil-avy . [(20150908 248) ((emacs (24 1)) (cl-lib (0 5)) (avy (0 3 0)) (evil (1 2 3))) "set-based completion" single ((:keywords "point" "location" "evil" "vim") (:url . "https://github.com/louy2/evil-avy"))]) (evil-args . [(20140329 1629) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single ((:keywords "evil" "vim-emulation") (:url . "http://github.com/wcsmith/evil-args"))]) (evil-anzu . [(20150124 1809) ((evil (1 0 0)) (anzu (0 46))) "anzu for evil-mode" single ((:url . "https://github.com/syohex/emacs-evil-anzu"))]) (evil . [(20160525 1348) ((undo-tree (0 6 3)) (goto-chg (1 6))) "Extensible Vi layer for Emacs." tar nil]) (evalator-clojure . [(20160208 1548) ((cider (0 10 0)) (evalator (1 0 0))) "Clojure evaluation context for evalator via CIDER." tar ((:keywords "languages" "clojure" "cider" "helm") (:url . "http://www.github.com/seanirby/evalator-clojure"))]) (evalator . [(20160212 1928) ((helm-core (1 9 1))) "Package for interactive transformation of data with helm" tar ((:keywords "languages" "elisp" "helm") (:url . "http://www.github.com/seanirby/evalator"))]) (eval-sexp-fu . [(20131230 1551) ((highlight (0))) "Tiny functionality enhancements for evaluating sexps." single ((:keywords "lisp" "highlight" "convenience"))]) (eval-in-repl . [(20160418 2043) ((dash (0 0 0)) (paredit (0 0 0)) (ace-window (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar ((:url . "https://github.com/kaz-yos/eval-in-repl/"))]) (etags-table . [(20130824 657) nil "Set tags table(s) based on current file" single ((:keywords "etags" "tags" "tag"))]) (etags-select . [(20130824 700) nil "Select from multiple tags" single ((:keywords "etags" "tags" "tag" "select"))]) (etable . [(20150327 1216) ((dash (2 9 0)) (interval-list (0 1)) (emacs (24 4))) "Implementation of javax.swing.JTable for Emacs." tar nil]) (esxml . [(20151013 1328) ((kv (0 0 5))) "Library for working with xml via esxml and sxml" single ((:keywords "tools" "lisp" "comm"))]) (esup . [(20151227 1150) ((cl-lib (0 5)) (emacs (24))) "the Emacs StartUp Profiler (ESUP)" tar ((:keywords "convenience" "processes") (:url . "http://github.com/jschaf/esup"))]) (ess-view . [(20160309 1515) ((ess (15)) (s (1 8 0)) (f (0 16 0))) "View R dataframes in a spreadsheet software" single ((:keywords "extensions" "ess") (:url . "https://github.com/GioBo/ess-view"))]) (ess-smart-underscore . [(20131229 2051) ((ess (0))) "Ess Smart Underscore" tar ((:keywords "ess" "underscore") (:url . "http://github.com/mlf176f2/ess-smart-underscore.el"))]) (ess-smart-equals . [(20150202 1) ((emacs (24)) (ess (5 0))) "better smart-assignment with =-key in R and S" single ((:keywords "r" "s" "ess" "convenience") (:url . "https://github.com/genovese/ess-smart-equals"))]) (ess-R-data-view . [(20130509 658) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single ((:keywords "convenience") (:url . "https://github.com/myuhe/ess-R-data-view.el"))]) (ess . [(20160602 403) ((julia-mode (0 3))) "Emacs Speaks Statistics" tar ((:url . "http://ess.r-project.org"))]) (esqlite-helm . [(20151116 250) ((esqlite (0 2 0)) (helm (20131207 845))) "Define helm source for sqlite database" single ((:keywords "data") (:url . "https://github.com/mhayashi1120/Emacs-esqlite"))]) (esqlite . [(20151206 606) ((pcsv (1 3 3))) "Manipulate sqlite file from Emacs" single ((:keywords "data") (:url . "https://github.com/mhayashi1120/Emacs-esqlite"))]) (espuds . [(20151114 959) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" single ((:keywords "test") (:url . "http://github.com/ecukes/espuds"))]) (eshell-z . [(20151110 2246) ((cl-lib (0 5))) "cd to frequent directory in eshell" single ((:keywords "convenience") (:url . "https://github.com/xuchunyang/eshell-z"))]) (eshell-prompt-extras . [(20160418 1030) nil "Display extra information for your eshell prompt." single ((:keywords "eshell" "prompt"))]) (eshell-fringe-status . [(20160224 616) nil "Show last status in fringe" single ((:url . "http://projects.ryuslash.org/eshell-fringe-status/"))]) (eshell-did-you-mean . [(20150915 1452) ((emacs (24 1)) (cl-lib (0 5))) "command not found (\"did you mean…\" feature) in Eshell" single ((:keywords "eshell") (:url . "https://github.com/xuchunyang/eshell-did-you-mean"))]) (eshell-autojump . [(20150927 224) nil "autojump command for Eshell" single ((:url . "http://github.com/coldnew/eshell-autojump"))]) (esh-help . [(20140107 422) ((dash (1 4 0))) "Add some help functions and support for Eshell" single ((:keywords "eshell" "extensions") (:url . "https://github.com/tom-tan/esh-help/"))]) (esh-buf-stack . [(20140107 418) nil "Add a buffer stack feature to Eshell" single ((:keywords "eshell" "extensions"))]) (escreen . [(20091203 1213) nil "emacs window session manager" single ((:keywords "extensions"))]) (esa . [(20160501 140) ((cl-lib (0 5))) "Interface to esa.io" single ((:keywords "tools" "esa") (:url . "https://github.com/nabinno/esa.el"))]) (es-windows . [(20140211 304) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single ((:url . "https://github.com/sabof/es-windows"))]) (es-mode . [(20160516 1450) ((dash (2 11 0)) (cl-lib (0 5)) (spark (1 0))) "A major mode for editing Elasticsearch queries" tar ((:keywords "elasticsearch") (:url . "http://www.github.com/dakrone/es-mode"))]) (es-lib . [(20141111 1230) ((cl-lib (0 3))) "A collection of emacs utilities" tar ((:url . "https://github.com/sabof/es-lib"))]) (ert-runner . [(20160330 106) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar ((:keywords "test") (:url . "http://github.com/rejeep/ert-runner.el"))]) (ert-modeline . [(20140115 415) ((s (1 3 1)) (dash (1 2 0)) (emacs (24 1)) (projectile (0 9 1))) "displays ert test results in the modeline." single ((:keywords "tools" "tests" "convenience"))]) (ert-junit . [(20140830 1721) ((ert (0))) "JUnit XML reports from ert results" single ((:keywords "tools" "test" "unittest" "ert") (:url . "http://bitbucket.org/olanilsson/ert-junit"))]) (ert-expectations . [(20130824 700) nil "The simplest unit test framework in the world" single ((:keywords "test" "unittest" "ert" "expectations") (:url . "http://www.emacswiki.org/emacs/download/ert-expectations.el"))]) (ert-async . [(20151011 859) nil "Async support for ERT" single ((:keywords "test") (:url . "http://github.com/rejeep/ert-async.el"))]) (erlang . [(20151013 357) nil "Erlang major mode" tar nil]) (ergoemacs-status . [(20160318 38) ((powerline (2 3)) (mode-icons (0 1 0))) "Adaptive Status Bar / Mode Line" single nil]) (ergoemacs-mode . [(20160526 2359) nil "No description available." tar nil]) (erefactor . [(20160121 359) ((cl-lib (0 3))) "Emacs-Lisp refactoring utilities" single ((:keywords "extensions" "tools" "maint") (:url . "https://github.com/mhayashi1120/Emacs-erefactor"))]) (eredis . [(20120808 2207) nil "eredis, a Redis client in emacs lisp" single ((:url . "http://code.google.com/p/eredis/"))]) (ercn . [(20150523 1003) nil "Flexible ERC notifications" single ((:url . "http://www.github.com/leathekd/ercn"))]) (erc-yt . [(20150426 749) ((dash (2 10 0))) "An erc module to display youtube links nicely" single ((:keywords "multimedia"))]) (erc-youtube . [(20150603 1636) nil "Show info about a YouTube URL in an ERC buffer." single ((:keywords "multimedia"))]) (erc-twitch . [(20160522 1059) ((json (1 3)) (erc (5 0))) "Support for Twitch emotes for ERC." single ((:keywords "twitch" "erc" "emotes") (:url . "https://github.com/vibhavp/erc-twitch"))]) (erc-tweet . [(20150920 758) nil "shows text of a tweet when an url is posted in erc buffers" single ((:keywords "extensions"))]) (erc-track-score . [(20130328 715) nil "Add score support to tracked channel buffers" single ((:url . "http://julien.danjou.info/erc-track-score.html"))]) (erc-terminal-notifier . [(20140115 424) nil "OSX notifications via the terminal-notifier gem for Emacs ERC." single ((:keywords "erc" "terminal-notifier" "nick") (:url . "http://github.com/julienXX/"))]) (erc-social-graph . [(20150508 704) nil "A social network graph module for ERC." single ((:keywords "erc" "graph") (:url . "https://github.com/vibhavp/erc-social-graph"))]) (erc-image . [(20150914 514) nil "Show received image urls in the ERC buffer" single ((:keywords "multimedia"))]) (erc-hl-nicks . [(20160202 1350) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single ((:url . "http://www.github.com/leathekd/erc-hl-nicks"))]) (erc-hipchatify . [(20160504 1345) ((emacs (24 4)) (s (1 10 0)) (alert (1 2)) (request (0 2 0))) "Provide emoticons and html rendering for HipChat" single ((:keywords "erc" "bitlbee" "hipchat" "multimedia") (:url . "https://bitbucket.org/seanfarley/erc-hipchatify"))]) (erc-colorize . [(20160108 420) nil "Per user colorization of whole message" single ((:keywords "erc" "convenience") (:url . "https://github.com/thisirs/erc-colorize.git"))]) (eproject . [(20151205 2330) ((helm (1 6 4))) "assign files to projects, programatically" tar ((:keywords "programming" "projects"))]) (eprime-mode . [(20140513 1316) nil "An E-prime checking mode for Emacs" single ((:keywords "e-prime" "english" "grammar") (:url . "https://github.com/AndrewHynes/eprime-mode"))]) (epresent . [(20160410 2101) ((org (8)) (cl-lib (0 5))) "Simple presentation mode for Emacs Org-mode" single ((:keywords "gui") (:url . "https://github.com/dakrone/epresent"))]) (epm . [(20160601 202) ((emacs (24 3)) (epl (0 8))) "Emacs Package Manager" tar ((:url . "https://github.com/xuchunyang/epm"))]) (epl . [(20150517 633) ((cl-lib (0 3))) "Emacs Package Library" single ((:keywords "convenience") (:url . "http://github.com/cask/epl"))]) (epkg . [(20160515 1009) ((closql (0 1 0)) (dash (2 12 1)) (emacs (25 0 92))) "browse the Emacsmirror package database" tar ((:keywords "tools") (:url . "https://gitlab.com/tarsius/epkg"))]) (epc . [(20140610 34) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar ((:keywords "lisp" "rpc") (:url . "https://github.com/kiwanami/emacs-epc"))]) (eopengrok . [(20160214 147) ((s (1 9 0)) (dash (2 10 0)) (magit (2 1 0)) (cl-lib (0 5))) "opengrok interface for emacs" single ((:keywords "tools"))]) (envdir . [(20160221 1323) ((emacs (24)) (dash (2 10 0)) (f (0 17 2))) "Modify environment according to files in a specified directory" single ((:url . "https://github.com/proofit404/envdir-mode"))]) (ensime . [(20160602 1303) ((scala-mode (0 22)) (sbt-mode (0 2)) (yasnippet (0 9 1)) (company (0 8 12)) (dash (2 11 0)) (s (1 10 0)) (popup (0 5 3))) "ENhanced Scala Interaction Mode for Emacs" tar ((:keywords "languages") (:url . "https://github.com/ensime/ensime-emacs"))]) (enotify . [(20130407 848) nil "A networked notification system for emacs" tar nil]) (eno . [(20160110 434) ((dash (2 12 1)) (edit-at-point (1 0))) "Goto/copy/cut any word/symbol/line in view, similar to ace-jump/easymotion" single ((:url . "http://github.com/enoson/eno.el"))]) (enh-ruby-mode . [(20151123 341) nil "Major mode for editing Ruby files" tar ((:keywords "languages elisp" "ruby") (:url . "http://github.com/zenspider/Enhanced-Ruby-Mode"))]) (engine-mode . [(20150902 1235) nil "Define and query search engines from within Emacs." single ((:url . "https://github.com/hrs/engine-mode/engine-mode.el"))]) (encourage-mode . [(20151128 305) ((emacs (24 4))) "Encourages you in your work. :D" single ((:keywords "fun") (:url . "https://github.com/halbtuerke/encourage-mode.el"))]) (enclose . [(20121008 1114) nil "Enclose cursor within punctuation pairs." tar nil]) (emr . [(20160218 1947) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1)) (clang-format (0)) (iedit (0 97))) "Emacs refactoring system." tar ((:keywords "tools" "convenience" "refactoring"))]) (emojify . [(20160316 1148) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar ((:keywords "multimedia" "convenience") (:url . "https://github.com/iqbalansari/emacs-emojify"))]) (emoji-fontset . [(20151107 2247) nil "Set font face for Emoji." single ((:keywords "emoji" "font" "config"))]) (emoji-display . [(20140117 413) nil "emoji displaying module" single ((:keywords "emoji") (:url . "https://github.com/ikazuhiro/emoji-display"))]) (emoji-cheat-sheet-plus . [(20150617 831) ((emacs (24)) (helm (1 6 4))) "emoji-cheat-sheet for emacs" tar ((:keywords "emacs" "emoji") (:url . "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus"))]) (emms-state . [(20160504 305) ((emms (0))) "Display track description and playing time in the mode line" single ((:keywords "emms") (:url . "https://github.com/alezost/emms-state.el"))]) (emms-soundcloud . [(20131221 545) ((emms (20131016)) (json (1 2))) "EMMS source for Soundcloud audio sharing platform" single ((:keywords "emms" "soundcloud") (:url . "http://github.com/osener/emms-soundcloud"))]) (emms-player-simple-mpv . [(20151020 801) ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) "An extension of emms-player-simple.el for mpv JSON IPC" tar ((:keywords "emms" "mpv") (:url . "https://github.com/momomo5717/emms-player-simple-mpv"))]) (emms-player-mpv-jp-radios . [(20160501 833) ((emacs (24)) (cl-lib (0 5)) (emms (4 0)) (emms-player-simple-mpv (0 1 7))) "EMMS players and stream lists of Japan radio stations" tar ((:keywords "emms" "mpv" "radio") (:url . "https://github.com/momomo5717/emms-player-mpv-jp-radios"))]) (emms-player-mpv . [(20160319 208) ((emms (0))) "mpv support for EMMS" single ((:keywords "emms" "mpv") (:url . "https://github.com/dochang/emms-player-mpv/"))]) (emms-mode-line-cycle . [(20160221 520) ((emacs (24)) (emms (4 0))) "Display the emms mode line as a ticker" single ((:keywords "emms" "mode-line") (:url . "https://github.com/momomo5717/emms-mode-line-cycle"))]) (emms-mark-ext . [(20130528 2227) ((emms (3 0))) "Extra functions for emms-mark-mode and emms-tag-edit-mode" single ((:keywords "convenience" "multimedia") (:url . "https://github.com/vapniks/emms-mark-ext"))]) (emms-info-mediainfo . [(20131223 700) ((emms (0))) "Info-method for EMMS using medianfo" single ((:keywords "multimedia" "processes"))]) (emms . [(20160531 1123) nil "The Emacs Multimedia System" tar ((:keywords "emms" "mp3" "mpeg" "multimedia"))]) (emmet-mode . [(20160501 1351) nil "Unofficial Emmet's support for emacs" single ((:keywords "convenience") (:url . "https://github.com/smihica/emmet-mode"))]) (embrace . [(20160513 2113) ((cl-lib (0 5)) (expand-region (0 10 0))) "Add/Change/Delete pairs based on `expand-region'" single ((:keywords "extensions"))]) (ember-yasnippets . [(20160526 1158) ((yasnippet (0 8 0))) "Snippets for Ember.js development" tar ((:keywords "tools" "abbrev" "languages"))]) (emamux-ruby-test . [(20130812 1139) ((emamux (0 1)) (projectile (0 9 1))) "Ruby test with emamux" single ((:url . "https://github.com/syohex/emamux-ruby-test"))]) (emamux . [(20160602 853) ((emacs (24)) (cl-lib (0 5))) "Interact with tmux" single ((:url . "https://github.com/syohex/emacs-emamux"))]) (emagician-fix-spell-memory . [(20141229 1634) nil "Simple hack into ispell to fix (muscle) memory problems" single ((:keywords "erc" "bitlbee" "bot"))]) (emacsshot . [(20160504 332) nil "Snapshot a frame or window from within Emacs" single ((:keywords "convenience") (:url . "https://github.com/marcowahl/emacsshot"))]) (emacsql-sqlite . [(20160311 1438) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "EmacSQL back-end for SQLite" tar ((:url . "https://github.com/skeeto/emacsql"))]) (emacsql-psql . [(20151004 915) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) "EmacSQL back-end for PostgreSQL via psql and pg" tar ((:url . "https://github.com/skeeto/emacsql"))]) (emacsql-mysql . [(20151004 915) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "EmacSQL back-end for MySQL" single ((:url . "https://github.com/skeeto/emacsql"))]) (emacsql . [(20160424 947) ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) "high-level SQL database front-end" tar ((:url . "https://github.com/skeeto/emacsql"))]) (emacsist-view . [(20160426 723) nil "Mode for viewing emacsist.com" single ((:keywords "convenience" "usability") (:url . "https://github.com/lujun9972/emacsist-view"))]) (emacsagist . [(20140331 1330) ((cl-lib (0 5))) "Search Packagist.org packages without leaving Emacs" single ((:keywords "tools") (:url . "http://github.com/echosa/emacsagist"))]) (emacs-eclim . [(20160411 1117) ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0)) (cl-lib (0 5))) "An interface to the Eclipse IDE." tar nil]) (elx . [(20160523 728) ((emacs (24 4))) "extract information from Emacs Lisp libraries" single ((:keywords "docs" "libraries" "packages") (:url . "https://github.com/tarsius/elx"))]) (elwm . [(20150817 507) ((dash (1 1 0))) "Minimalistic window manager for emacs" single ((:keywords "docs") (:url . "https://github.com/Fuco1/elwm"))]) (elscreen-separate-buffer-list . [(20150522 145) ((emacs (24 4)) (elscreen (1 4 6))) "Separate buffer list manager for elscreen" single ((:keywords "elscreen"))]) (elscreen-persist . [(20160505 2029) ((elscreen (1 4 6)) (revive (2 19))) "persist the elscreen across sessions" single ((:keywords "elscreen" "frames"))]) (elscreen-multi-term . [(20151021 2133) ((emacs (24 4)) (elscreen (1 4 6)) (multi-term (1 3))) "Multi term for elscreen" single ((:keywords "elscreen" "multi term"))]) (elscreen-mew . [(20160504 1335) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single ((:url . "https://github.com/masutaka/elscreen-mew"))]) (elscreen . [(20151025 2000) nil "Emacs window session manager" tar nil]) (elpy . [(20160528 1410) ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0))) "Emacs Python Development Environment" tar nil]) (elpa-mirror . [(20160512 4) nil "Create local package repository" single ((:keywords "cloud" "mirror" "elpa") (:url . "http://github.com/redguardtoo/elpa-mirror"))]) (elpa-audit . [(20141023 831) nil "Handy functions for inspecting and comparing package archives" single ((:keywords "maint") (:url . "https://github.com/purcell/elpa-audit"))]) (elogcat . [(20151120 1841) ((s (1 9 0)) (dash (2 10 0))) "logcat interface" single ((:keywords "tools"))]) (elog . [(20160426 722) ((eieio (1 3))) "logging library extended from logito" single ((:keywords "lisp" "tool" "log"))]) (elnode . [(20140203 1706) ((web (0 1 4)) (dash (1 1 0)) (noflet (0 0 7)) (s (1 5 0)) (creole (0 8 14)) (fakir (0 1 6)) (db (0 0 5)) (kv (0 0 17))) "The Emacs webserver." tar nil]) (elmine . [(20151121 623) ((s (1 10 0))) "Redmine API access via elisp." single ((:keywords "tools") (:url . "http://github.com/leoc/elmine"))]) (elmacro . [(20160224 1131) ((s (1 9 0)) (dash (1 5 0))) "Convert keyboard macros to elisp" single ((:keywords "macro" "elisp" "convenience") (:url . "https://github.com/Silex/elmacro"))]) (elm-mode . [(20160528 617) ((f (0 17)) (let-alist (1 0 4)) (s (1 7 0)) (emacs (24))) "Major mode for Elm" tar ((:url . "https://github.com/jcollard/elm-mode"))]) (elixir-mode . [(20160601 231) ((emacs (24)) (pkg-info (0 4))) "Major mode for editing Elixir files" tar ((:keywords "languages" "elixir") (:url . "https://github.com/elixir-lang/emacs-elixir"))]) (elisp-slime-nav . [(20160128 1309) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single ((:keywords "navigation" "slime" "elisp" "emacs-lisp") (:url . "https://github.com/purcell/elisp-slime-nav"))]) (elisp-lint . [(20150430 1758) nil "basic linting for Emacs Lisp" single ((:keywords "lisp") (:url . "http://github.com/nschum/elisp-lint/"))]) (elisp-format . [(20160508 452) nil "Format elisp code" single ((:url . "https://github.com/Yuki-Inoue/elisp-format"))]) (elisp-depend . [(20120428 1504) nil "Parse depend libraries of elisp file." single ((:keywords "elisp-depend") (:url . "http://www.emacswiki.org/emacs/download/elisp-depend.el"))]) (elfeed-web . [(20160525 716) ((simple-httpd (1 4 3)) (elfeed (1 4 0)) (emacs (24 1))) "web interface to Elfeed" tar nil]) (elfeed-org . [(20151003 531) ((elfeed (1 1 1)) (org (8 2 7)) (dash (2 10 0)) (s (1 9 0))) "Configure elfeed with one or more org-mode files" single ((:keywords "news") (:url . "https://github.com/remyhonig/elfeed-org"))]) (elfeed-goodies . [(20160317 624) ((popwin (1 0 0)) (powerline (2 2)) (elfeed (20151201 1742)) (cl-lib (0 5)) (noflet (0 0 10)) (ace-jump-mode (2 0))) "Elfeed goodies" tar ((:url . "https://github.com/algernon/elfeed-goodies"))]) (elfeed . [(20160525 716) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar nil]) (elein . [(20120120 516) nil "running leiningen commands from emacs" single ((:keywords "tools" "processes") (:url . "https://github.com/remvee/elein"))]) (electric-spacing . [(20151209 936) nil "Insert operators with surrounding spaces smartly" single nil]) (electric-operator . [(20160511 131) ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) "Automatically add spaces around operators" single ((:keywords "electric") (:url . "https://github.com/davidshepherd7/electric-operator"))]) (electric-case . [(20150417 612) nil "insert camelCase, snake_case words without \"Shift\"ing" single ((:url . "http://hins11.yu-yake.com/"))]) (eldoc-extension . [(20140306 845) nil "Some extension for eldoc" single ((:keywords "eldoc"))]) (eldoc-eval . [(20150512 706) nil "Enable eldoc support when minibuffer is in use." single nil]) (elang . [(20160104 856) ((names (20151201 404))) "A Python-like language for the Emacs VM" tar nil]) (el2markdown . [(20150516 1538) nil "Convert commentary section of elisp files to markdown." single ((:url . "https://github.com/Lindydancer/el2markdown"))]) (el-x . [(20140111 1601) nil "main entry point for el-x package" tar ((:keywords "lisp"))]) (el-swank-fuzzy . [(20130824 657) nil "fuzzy symbol completion." single ((:keywords "matching" "completion" "string"))]) (el-spy . [(20131226 1408) nil "Mocking framework for Emacs lisp. It also support spy, proxy." single ((:keywords "test") (:url . "https://github.com/uk-ar/el-spy"))]) (el-sprunge . [(20140106 1939) ((web-server (20140105 2246)) (htmlize (20130207 1202)) (emacs (24 3))) "Command line paste server with Emacs highlighting" tar nil]) (el-spice . [(20140805 1338) ((thingatpt+ (0))) "Extra spice for emacs lisp programming" tar ((:keywords "languages" "extensions") (:url . "https://github.com/vedang/el-spice"))]) (el-spec . [(20121018 204) nil "ruby's rspec like syntax test frame work" single ((:keywords "test") (:url . "https://github.com/uk-ar/el-spec"))]) (el-mock . [(20150906 521) nil "Tiny Mock and Stub framework in Emacs Lisp" single ((:keywords "lisp" "testing" "unittest") (:url . "http://github.com/rejeep/el-mock.el"))]) (el-init-viewer . [(20150303 228) ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) "Record viewer for el-init" single ((:url . "https://github.com/HKey/el-init-viewer"))]) (el-init . [(20150728 420) ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) "A loader inspired by init-loader" single ((:url . "https://github.com/HKey/el-init"))]) (el-autoyas . [(20120918 817) nil "Automatically create Emacs-Lisp Yasnippets" tar ((:keywords "emacs" "lisp" "mode" "yasnippet") (:url . "https://github.com/mlf176f2/el-autoyas.el"))]) (ejc-sql . [(20160514 927) ((emacs (24 4)) (clomacs (0 0 2)) (dash (2 12 1)) (auto-complete (1 5 1))) "Emacs SQL client uses Clojure JDBC." tar ((:keywords "sql" "jdbc") (:url . "https://github.com/kostafey/ejc-sql"))]) (eink-theme . [(20160522 103) nil "E Ink color theme" single ((:url . "http://github.com/maio/eink-emacs"))]) (ein-mumamo . [(20150301 1828) ((ein (0 4))) "Multiple major mode support for Emacs IPython Notebook" single nil]) (ein . [(20160422 829) ((websocket (1 5)) (request (0 2)) (cl-generic (0 2))) "Emacs IPython Notebook" tar nil]) (eimp . [(20120826 1539) nil "Emacs Image Manipulation Package" single ((:keywords "files" "frames"))]) (eide . [(20160210 1438) nil "IDE interface" tar nil]) (ego . [(20160602 33) ((emacs (24 5)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (simple-httpd (1 4 5))) "a static site generator based on org mode, forked from org-page." tar nil]) (egg . [(20160330 2247) nil "Emacs Got Git - Emacs interface to Git" tar ((:keywords "git" "version control" "release management"))]) (efire . [(20151009 1531) ((circe (1 2))) "Use campfire from Emacs" single ((:keywords "convenience" "tools") (:url . "https://github.com/capitaomorte/efire"))]) (edts . [(20160430 831) ((auto-complete (1 3 1)) (auto-highlight-symbol (1 53)) (dash (1 5 0)) (eproject (1 5)) (erlang (2 4 1)) (f (0 16 0)) (popup (0 4)) (s (1 9 0))) "Erlang Development Tool Suite" tar nil]) (edn . [(20160215 619) ((cl-lib (0 3)) (emacs (24 1)) (peg (0 6))) "Support for reading and writing the edn data format from elisp" single ((:keywords "edn" "clojure") (:url . "https://www.github.com/expez/edn.el"))]) (editorconfig . [(20160531 340) ((cl-lib (0 5))) "EditorConfig Emacs Plugin" tar ((:url . "https://github.com/editorconfig/editorconfig-emacs#readme"))]) (edit-server-htmlize . [(20130329 1748) ((edit-server (1 9))) "(de)HTMLization hooks for edit-server.el" single ((:url . "https://github.com/frobtech/edit-server-htmlize"))]) (edit-server . [(20141231 1558) nil "server that responds to edit requests from Chrome" single ((:url . "https://github.com/stsquad/emacs_chrome"))]) (edit-list . [(20100930 943) nil "edit a single list" single ((:url . "http://mwolson.org/static/dist/elisp/edit-list.el"))]) (edit-color-stamp . [(20130529 1233) ((es-lib (0 2)) (cl-lib (1 0))) "Edit a hex color stamp, using a QT or the internal color picker" tar ((:url . "https://github.com/sabof/edit-color-stamp"))]) (edebug-x . [(20130616 125) nil "Extensions for Edebug" single ((:keywords "extensions") (:url . "https://github.com/ScottyB/edebug-x"))]) (ede-compdb . [(20150920 1533) ((ede (1 2)) (semantic (2 2)) (cl-lib (0 4))) "Support for compilation database projects in EDE" single ((:keywords "development" "ninja" "build" "cedet" "ede"))]) (edbi-sqlite . [(20160221 1323) ((emacs (24)) (edbi (0 1 3))) "Open sqlite files with edbi" single ((:url . "https://github.com/proofit404/edbi-sqlite"))]) (edbi-minor-mode . [(20160221 1323) ((edbi (0 1 3))) "Use edbi with regular SQL files." single ((:url . "https://github.com/proofit404/edbi-minor-mode"))]) (edbi-django . [(20160221 1323) ((emacs (24)) (edbi (0 1 3)) (f (0 17 1))) "Run edbi with django settings" tar ((:url . "https://github.com/proofit404/edbi-django"))]) (edbi-database-url . [(20160221 1323) ((emacs (24)) (edbi (0 1 3))) "Run edbi with database url" single ((:url . "https://github.com/proofit404/edbi-database-url"))]) (edbi . [(20160224 1941) ((concurrent (0 3 1)) (ctable (0 1 2)) (epc (0 1 1))) "Emacs Database Interface" tar nil]) (ecukes . [(20150717 848) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar nil]) (eclipse-theme . [(20160430 522) nil "Theme based on Eclipse circa 2010" single ((:keywords "themes") (:url . "https://github.com/abo-abo/eclipse-theme"))]) (echo-bell . [(20151231 1456) nil "Show visual bell at right in the echo area." single ((:keywords "echo area" "bell" "ding") (:url . "http://www.emacswiki.org/echo-bell.el"))]) (ecb . [(20140215 314) nil "a code browser for Emacs" tar ((:keywords "browser" "code" "programming" "tools"))]) (ebib-handy . [(20160509 1756) ((emacs (24 4)) (ebib (1 0)) (chinese-pyim (0 1))) "ebib window as a cite chooser when write org file" single ((:url . "https://github.com/tumashu/ebib-handy"))]) (ebib . [(20160410 1944) ((dash (2 5 0)) (parsebib (1 0)) (emacs (24 3))) "a BibTeX database manager" tar ((:keywords "text" "bibtex"))]) (ebal . [(20160531 1106) ((emacs (24 4)) (f (0 18 0)) (ido-completing-read+ (3 6))) "Emacs interface to Cabal and Stack" single ((:keywords "convenience" "cabal" "haskell") (:url . "https://github.com/mrkkrp/ebal"))]) (easy-repeat . [(20150516 348) ((emacs (24 4))) "Repeat easily" single ((:keywords "repeat" "convenience") (:url . "https://github.com/xuchunyang/easy-repeat.el"))]) (easy-lentic . [(20160530 130) ((lentic (0 10)) (cl-lib (0 5))) "Write org style comment with lentic" single ((:keywords "convenience") (:url . "https://github.com/tumashu/easy-lentic"))]) (easy-kill . [(20151031 29) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" single ((:keywords "killing" "convenience") (:url . "https://github.com/leoliu/easy-kill"))]) (easy-escape . [(20150718 2133) nil "Improve readability of escape characters in regular expressions" single ((:keywords "convenience" "lisp" "tools") (:url . "https://github.com/cpitclaudel/easy-escape"))]) (e2wm-term . [(20141009 808) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single ((:keywords "tools" "window manager") (:url . "https://github.com/aki2o/e2wm-term"))]) (e2wm-sww . [(20140524 358) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single ((:keywords "tools" "window manager") (:url . "https://github.com/aki2o/e2wm-sww"))]) (e2wm-svg-clock . [(20150106 706) ((e2wm (20130225 1602)) (svg-clock (0 4))) "e2wm plugin for svg-clock" single ((:keywords "convenience" "e2wm") (:url . "https://github.com/myuhe/e2wm-svg-clock.el"))]) (e2wm-pkgex4pl . [(20140525 547) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single ((:keywords "tools" "window manager" "perl") (:url . "https://github.com/aki2o/e2wm-pkgex4pl"))]) (e2wm-direx . [(20140815 1813) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single ((:keywords "tools" "window manager" "convenience") (:url . "https://github.com/aki2o/e2wm-direx"))]) (e2wm-bookmark . [(20151122 2321) ((e2wm (1 2))) "Bookmark plugin for e2wm.el" single ((:keywords "convenience"))]) (e2wm-R . [(20151230 326) ((e2wm (1 3)) (inlineR (1 0)) (ess (15 3))) "some e2wm plugin and perspective for GNU R" single ((:keywords "convenience" "e2wm") (:url . "https://github.com/myuhe/e2wm-R.el"))]) (e2wm . [(20150608 1923) ((window-layout (1 2))) "simple window manager for emacs" tar ((:keywords "tools" "window manager"))]) (e2ansi . [(20150220 1713) nil "Syntax highlighting support for `less', powered by Emacs." tar ((:keywords "faces" "languages") (:url . "https://github.com/Lindydancer/e2ansi"))]) (dynamic-ruler . [(20160602 308) nil "Displays a dynamic ruler at point." single ((:keywords "ruler" "tools" "convenience") (:url . "http://rocher.github.io/dynamic-ruler"))]) (dylan-mode . [(20160405 1714) nil "Major mode for editing Dylan programs." tar nil]) (dyalog-mode . [(20160315 1049) ((cl-lib (0 2))) "Major mode for editing Dyalog APL source code" tar ((:keywords "languages") (:url . "https://bitbucket.org/harsman/dyalog-mode/"))]) (duplicate-thing . [(20120515 1148) nil "Duplicate current line & selection" single ((:keywords "command" "duplicate" "line" "selection"))]) (dummyparens . [(20141009 524) nil "parenthesis auto-pairing and wrapping" single ((:keywords "dummyparens" "auto-pair" "wrapping") (:url . "https://github.com/snosov1/dummyparens"))]) (dummy-h-mode . [(20160209 529) nil "switch major mode to c-/c++-/objc-mode on .h file" single ((:keywords "c-mode" "c++-mode" "objc-mode"))]) (dumb-jump . [(20160601 1248) ((emacs (24 4)) (f (0 17 3)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "jump to definition for multiple languages without configuration." single ((:keywords "programming"))]) (ducpel . [(20140419 16) ((cl-lib (0 5))) "Logic game with sokoban elements" tar ((:keywords "games") (:url . "https://github.com/alezost/ducpel"))]) (dts-mode . [(20150403 1804) nil "Major mode for Devicetree source code" single ((:keywords "languages"))]) (dtrt-indent . [(20160523 1518) nil "Adapt to foreign indentation offsets" tar ((:keywords "convenience" "files" "languages" "c"))]) (drupal-spell . [(20130520 1155) nil "Aspell extra dictionary for Drupal" tar ((:keywords "wp") (:url . "https://github.com/arnested/drupal-spell"))]) (drupal-mode . [(20160420 1458) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar ((:keywords "programming" "php" "drupal") (:url . "https://github.com/arnested/drupal-mode"))]) (dropdown-list . [(20120329 1136) nil "Drop-down menu interface" single ((:keywords "menu" "convenience" "dropdown") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/dropdown-list.el"))]) (dropbox . [(20130513 1737) ((json (1 2)) (oauth (1 0 3))) "Emacs backend for dropbox" single ((:keywords "dropbox"))]) (drill-instructor-AZIK-force . [(20151122 2314) ((popup (0 5))) "Support AZIK input" tar nil]) (drawille . [(20160418 1338) ((cl-lib (0 5))) "Drawille implementation in elisp" tar ((:keywords "graphics") (:url . "https://github.com/sshbio/elisp-drawille"))]) (drag-stuff . [(20160520 1359) nil "Drag stuff (lines, words, region, etc...) around" tar nil]) (draft-mode . [(20140609 956) nil "Rough drafting for Emacs." single ((:keywords "draft" "drafting") (:url . "https://github.com/gaudecker/draft-mode"))]) (dpaste . [(20160303 1512) nil "Emacs integration for dpaste.com" single ((:keywords "paste" "pastie" "pastebin" "dpaste" "python"))]) (downplay-mode . [(20151125 1409) nil "focus attention on a region of the buffer" single ((:url . "https://github.com/tobias/downplay-mode/"))]) (download-region . [(20160430 1316) ((cl-lib (0 3))) "Simple in-buffer download manager" single ((:url . "http://hins11.yu-yake.com/"))]) (dot-mode . [(20151029 855) nil "minor mode to repeat typing or commands" single nil]) (dos . [(20140808 1635) nil "Major mode for editing Dos scripts" single ((:keywords "languages"))]) (doremi-mac . [(20151231 1454) nil "A macro for defining Do Re Mi commands." single ((:keywords "extensions" "convenience" "keys" "repeat" "cycle") (:url . "http://www.emacswiki.org/doremi-mac.el"))]) (doremi-frm . [(20151231 1453) ((doremi (0)) (faces+ (0)) (frame-fns (0)) (hexrgb (0))) "Incrementally adjust face attributes and frame parameters." single ((:keywords "frames" "extensions" "convenience" "keys" "repeat" "cycle") (:url . "http://www.emacswiki.org/doremi-frm.el"))]) (doremi-cmd . [(20160512 1912) ((doremi (0))) "Miscellaneous Do Re Mi commands" single ((:keywords "keys" "cycle" "repeat") (:url . "http://www.emacswiki.org/doremi-cmd.el"))]) (doremi . [(20151231 1455) nil "Do Re Mi: Incremental change using arrow keys or mouse wheel." single ((:keywords "keys" "cycle" "repeat" "higher-order") (:url . "http://www.emacswiki.org/doremi.el"))]) (doom . [(20160121 922) ((cl-lib (0 5))) "DOM implementation and manipulation library" single ((:keywords "xml" "doom") (:url . "http://www.github.com/toroidal-code/doom.el/"))]) (dollaro . [(20151123 702) ((s (1 6 0))) "simple text templates" single ((:keywords "tools" "convenience"))]) (dokuwiki-mode . [(20160129 207) nil "Major mode for DokuWiki document" single ((:keywords "dokuwiki") (:url . "https://github.com/kai2nenobu/emacs-dokuwiki-mode"))]) (docker-tramp . [(20160113 2152) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" single ((:keywords "docker" "convenience") (:url . "https://github.com/emacs-pe/docker-tramp.el"))]) (docker-api . [(20160525 220) ((dash (2 12 1)) (request (0 2 0)) (s (1 11 0))) "Emacs interface to the Docker API" tar ((:url . "https://github.com/Silex/docker-api.el"))]) (docker . [(20160529 1052) ((emacs (24 4)) (dash (2 12 1)) (docker-tramp (0 1)) (magit-popup (2 6 0)) (s (1 11 0)) (tablist (0 70))) "Emacs interface to Docker" tar ((:keywords "filename" "convenience") (:url . "https://github.com/Silex/docker.el"))]) (docean . [(20150927 1318) ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) "Interact with DigitalOcean from Emacs." single ((:keywords "convenience") (:url . "https://github.com/emacs-pe/docean.el"))]) (docbook-snippets . [(20150714 1125) ((yasnippet (0 8 0))) "Yasnippets for DocBook" tar ((:keywords "snippets" "docbook") (:url . "https://github.com/jhradilek/emacs-docbook-snippets"))]) (dmenu . [(20160228 827) ((cl-lib (0 5))) "simulate the dmenu command line program" single ((:keywords "convenience" "usability"))]) (dkmisc . [(20131110 515) ((emacs (24 1))) "Miscellaneous functions required by dk* packages." tar nil]) (dklrt . [(20131110 741) ((dkmisc (0 50)) (ledger-mode (20130908 1357)) (emacs (24 1))) "Ledger Recurring Transactions." tar nil]) (dkdo . [(20131110 519) ((dkmisc (0 50)) (emacs (24 1))) "Do List major mode based on org-mode." tar nil]) (django-theme . [(20131022 402) nil "Custom face theme for Emacs" single ((:url . "http://github/anrzejsliwa/django-theme"))]) (django-snippets . [(20131229 1011) ((yasnippet (0 8 0))) "Yasnippets for django" tar ((:url . "https://github.com/myfreeweb/django-mode"))]) (django-mode . [(20150207 717) nil "Major mode for Django web framework." tar ((:keywords "languages"))]) (django-manage . [(20151025 130) ((hydra (0 13 2))) "Django minor mode for commanding manage.py" single ((:keywords "languages"))]) (dizzee . [(20111009 816) nil "A more pleasant way to manage your project's subprocesses in Emacs." tar nil]) (dix-evil . [(20160601 624) ((dix (0 3 0)) (evil (1 0 7))) "optional evil-integration with dix.el" single ((:keywords "languages") (:url . "http://wiki.apertium.org/wiki/Emacs"))]) (dix . [(20160602 1526) ((cl-lib (0 5))) "minor mode for editing Apertium XML dictionary files" tar ((:keywords "languages") (:url . "http://wiki.apertium.org/wiki/Emacs"))]) (display-theme . [(20140115 956) ((emacs (24))) "display current theme(s) at mode-line" single ((:keywords "tools") (:url . "https://github.com/kawabata/emacs-display-theme/"))]) (disk . [(20081128 906) nil "simplified find-file, revert-file, save-buffer interface" single ((:keywords "convenience") (:url . "http://www.emacswiki.org/emacs/DiskKey"))]) (discover-my-major . [(20160108 1241) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single ((:keywords "discover" "help" "major-mode" "keys") (:url . "https://github.com/steckerhalter/discover-my-major"))]) (discover-js2-refactor . [(20140129 952) ((js2-refactor (20131221 501)) (discover (20140103 1339))) "Adds discover context menu for js2-refactor" single ((:keywords "js2-refactor" "discover"))]) (discover-clj-refactor . [(20150328 959) ((clj-refactor (0 14 0)) (discover (0 3))) "Adds discover context menu for clj-refactor" single ((:keywords "clj-refactor" "discover" "convenience"))]) (discover . [(20140103 1539) ((makey (0 3))) "discover more of Emacs" single nil]) (disaster . [(20130509 1255) nil "Disassemble C/C++ code under cursor in Emacs" single ((:keywords "tools") (:url . "https://github.com/jart/disaster"))]) (dirtree . [(20140129 232) ((tree-mode (1 1 1 1)) (windata (0))) "Directory tree views" single nil]) (direx-grep . [(20140515 1006) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single ((:keywords "convenience") (:url . "https://github.com/aki2o/direx-grep"))]) (direx . [(20151023 1806) nil "Simple Directory Explorer" tar ((:keywords "convenience"))]) (diredful . [(20160529 1517) nil "colorful file names in dired buffers" single ((:keywords "dired" "colors" "extension" "widget") (:url . "https://github.com/thamer/diredful"))]) (dired-toggle . [(20140907 1549) nil "provide a simple way to toggle dired buffer for current directory" single ((:keywords "dired" "toggle") (:url . "https://github.com/fasheng/dired-toggle"))]) (dired-subtree . [(20150908 1233) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Insert subdirectories in a tree-like fashion" single ((:keywords "files"))]) (dired-sort-menu . [(20130824 707) nil "provide menu/dialogue for dired sort options" single ((:keywords "dired" "sort" "menu" "dialogue") (:url . "http://centaur.maths.qmw.ac.uk/Emacs/"))]) (dired-sort-menu+ . [(20151231 1451) ((dired-sort-menu (0))) "Extensions to `dired-sort-menu.el'" single ((:keywords "directories" "diredp" "dired") (:url . "http://www.emacswiki.org/dired-sort-menu+.el"))]) (dired-sort . [(20090208 2238) nil "Sort files in dired." single ((:keywords "dired" "sort") (:url . "http://www.emacswiki.org/emacs/download/dired-sort.el"))]) (dired-single . [(20151230 1958) nil "Reuse the current dired buffer to visit a directory" single ((:keywords "dired" "reuse" "buffer"))]) (dired-ranger . [(20160528 1231) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Implementation of useful ranger features for dired" single ((:keywords "files"))]) (dired-rainbow . [(20141214 743) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Extended file highlighting according to its type" single ((:keywords "files"))]) (dired-quick-sort . [(20160524 538) ((hydra (0 13 0))) "Persistent quick sorting of dired buffers in various ways." single ((:keywords "convenience" "files") (:url . "https://gitlab.com/xuhdev/dired-quick-sort#dired-quick-sort"))]) (dired-open . [(20160205 1413) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Open files from dired using using custom actions" single ((:keywords "files"))]) (dired-narrow . [(20160130 1045) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Live-narrowing of search results for dired" single ((:keywords "files"))]) (dired-k . [(20160330 2113) ((cl-lib (0 5)) (emacs (24))) "highlight dired buffer by file size, modified time, git status" tar ((:url . "https://github.com/syohex/emacs-dired-k"))]) (dired-imenu . [(20140109 1010) nil "imenu binding for dired mode" single ((:keywords "dired" "imenu") (:url . "https://github.com/DamienCassou/dired-imenu"))]) (dired-hacks-utils . [(20160527 1636) ((dash (2 5 0))) "Utilities and helpers for dired-hacks collection" single ((:keywords "files"))]) (dired-filter . [(20160526 1536) ((dash (2 10 0)) (dired-hacks-utils (0 0 1)) (f (0 17 0)) (cl-lib (0 3))) "Ibuffer-like filtering for dired" single ((:keywords "files"))]) (dired-filetype-face . [(20160217 247) nil "Set different faces for different filetypes in dired" single ((:keywords "dired" "filetype" "face") (:url . "https://github.com/jixiuf/dired-filetype-face"))]) (dired-efap . [(20140122 1056) nil "Edit Filename At Point in a dired buffer" single ((:keywords "dired" "environment" "files" "renaming") (:url . "https://github.com/juan-leon/dired-efap"))]) (dired-dups . [(20130527 1625) nil "Find duplicate files and display them in a dired buffer" single ((:keywords "unix") (:url . "https://github.com/vapniks/dired-dups"))]) (dired-details . [(20130824 658) nil "make file details hide-able in dired" single ((:keywords "dired" "hide"))]) (dired-details+ . [(20151231 1450) ((dired-details (0))) "Enhancements to library `dired-details+.el'." single ((:keywords "dired" "frames") (:url . "http://www.emacswiki.org/dired-details+.el"))]) (dired-avfs . [(20160526 1536) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "AVFS support for dired" single ((:keywords "files"))]) (dired-atool . [(20160208 633) ((emacs (24))) "Pack/unpack files with atool on dired." single ((:keywords "files") (:url . "https://github.com/HKey/dired-atool"))]) (dired+ . [(20160528 948) nil "Extensions to Dired." single ((:keywords "unix" "mouse" "directories" "diredp" "dired") (:url . "http://www.emacswiki.org/dired+.el"))]) (dircmp . [(20141204 1156) nil "Compare and sync directories." tar ((:keywords "unix" "tools") (:url . "https://github.com/matthewlmcclure/dircmp-mode"))]) (dionysos . [(20151013 303) ((libmpdee (2 1 0)) (alert (1 2)) (s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Dionysos, a music player for Emacs" tar ((:keywords "music") (:url . "https://github.com/nlamirault/dionysos"))]) (diminish . [(20151215 1115) nil "Diminished modes are minor modes with no modeline display" single ((:keywords "extensions" "diminish" "minor" "codeprose") (:url . "https://github.com/myrjola/diminish.el"))]) (dim-autoload . [(20160521 928) nil "dim complete autoload cookie lines" single ((:keywords "convenience") (:url . "http://github.com/tarsius/dim-autoload"))]) (dim . [(20151226 315) ((emacs (24 4))) "Change mode-line names of major/minor modes" single ((:keywords "convenience") (:url . "https://github.com/alezost/dim.el"))]) (digistar-mode . [(20160218 1355) nil "major mode for Digistar scripts" single ((:keywords "languages"))]) (diffview . [(20150929 11) nil "View diffs in side-by-side format" single ((:keywords "convenience" "diff") (:url . "https://github.com/mgalgs/diffview-mode"))]) (diffscuss-mode . [(20141014 1857) nil "Major mode for diffscuss files." single ((:keywords "tools"))]) (diff-hl . [(20160517 1831) ((cl-lib (0 2))) "Highlight uncommitted changes using VC" tar ((:keywords "vc" "diff") (:url . "https://github.com/dgutov/diff-hl"))]) (dictionary . [(20140717 2229) ((connection (1 10)) (link (1 10))) "Client for rfc2229 dictionary servers" single ((:keywords "interface" "dictionary"))]) (dictcc . [(20151221 557) ((emacs (24)) (cl-lib (0 5)) (s (1 0)) (dash (2 0)) (helm (1 0))) "Look up translations on dict.cc" single ((:keywords "convenience"))]) (devdocs . [(20160412 1408) nil "Launch DevDocs search" single ((:url . "https://github.com/xuchunyang/DevDocs.el"))]) (desktop-registry . [(20140119 1543) nil "Keep a central registry of desktop files" single ((:keywords "convenience") (:url . "http://projects.ryuslash.org/desktop-registry/"))]) (desktop+ . [(20160330 812) ((emacs (24 4)) (dash (2 11 0)) (f (0 17 2))) "Handle special buffers when saving & restoring sessions" single ((:url . "https://github.com/ffevotte/desktop-plus"))]) (describe-number . [(20151031 1955) ((yabin (1 1))) "Describe arbitrarily large number at point." single ((:keywords "describe" "value" "help") (:url . "https://github.com/netromdk/describe-number"))]) (demo-it . [(20160525 846) nil "Utility functions for creating demonstrations" single ((:keywords "demonstration" "presentation"))]) (demangle-mode . [(20151109 1453) ((emacs (24)) (cl-lib (0 1))) "Automatically demangle C++ symbols" single ((:keywords "c" "tools") (:url . "https://github.com/liblit/demangle-mode"))]) (delim-kill . [(20100517 120) nil "Kill text between delimiters." single ((:keywords "convenience" "languages") (:url . "http://github.com/thomas11/delim-kill/tree/master"))]) (delight . [(20160305 1751) nil "A dimmer switch for your lighter text." single ((:keywords "convenience") (:url . "http://www.emacswiki.org/emacs/DelightedModes"))]) (defproject . [(20151201 1619) ((emacs (24))) "Manager dir-locals and project specific variables" single ((:keywords "convenience") (:url . "https://github.com/kotfic/defproject"))]) (define-word . [(20150709 1423) ((emacs (24 1))) "display the definition of word at point." single ((:keywords "dictionary" "convenience") (:url . "https://github.com/abo-abo/define-word"))]) (deferred . [(20160109 2246) nil "Simple asynchronous functions for emacs lisp" single ((:keywords "deferred" "async") (:url . "https://github.com/kiwanami/emacs-deferred"))]) (default-text-scale . [(20150227 1156) nil "Easily adjust the font size in all frames" single ((:keywords "frames" "faces"))]) (dedicated . [(20090428 1431) nil "A very simple minor mode for dedicated buffers" single ((:keywords "dedicated" "buffer"))]) (decl . [(20151231 2223) ((dash (2 5 0)) (emacs (24 3)) (cl-lib (0 3))) "Library for organizing code declaratively" single ((:url . "https://github.com/preetpalS/decl.el"))]) (decide . [(20160314 1448) nil "rolling dice and other random things" single nil]) (debug-print . [(20140125 1819) ((emacs (24))) "A nice printf debugging environment by the way Gauche do" single ((:keywords "extensions" "lisp" "tools" "maint") (:url . "https://github.com/kenoss/debug-print"))]) (debpaste . [(20160113 1747) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" single ((:keywords "paste") (:url . "http://github.com/alezost/debpaste.el"))]) (ddskk . [(20160315 908) ((ccc (1 43)) (cdb (20141201 754))) "Simple Kana to Kanji conversion program." tar nil]) (db-pg . [(20130131 1302) ((pg (0 12)) (db (0 0 6))) "A PostgreSQL adapter for emacs-db" single ((:keywords "data" "comm" "database" "postgresql"))]) (db . [(20140421 1611) ((kv (0 0 11))) "A database for EmacsLisp" single ((:keywords "data" "lisp"))]) (dayone . [(20160105 640) ((uuid (0 0 3)) (mustache (0 22)) (ht (1 5))) "Utility script for Day One" tar ((:keywords "day one" "tools" "convenience") (:url . "https://github.com/mori-dev/emacs-dayone"))]) (datomic-snippets . [(20130707 1515) ((s (1 4 0)) (dash (1 2 0)) (yasnippet (0 6 1))) "Yasnippets for Datomic" tar nil]) (datetime-format . [(20160520 522) nil "Datetime functions" single ((:keywords "datetime" "calendar") (:url . "https://github.com/zonuexe/emacs-datetime"))]) (datetime . [(20160521 1503) ((emacs (24 1))) "Parsing, formatting and matching timestamps" single ((:keywords "lisp" "i18n") (:url . "https://github.com/doublep/datetime"))]) (date-field . [(20141128 1905) ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) "Date widget" single ((:keywords "widgets") (:url . "https://github.com/aki2o/emacs-date-field"))]) (date-at-point . [(20150108 618) nil "Add `date' to `thing-at-point' function" single ((:keywords "convenience") (:url . "https://gitorious.org/alezost-emacs/date-at-point"))]) (dash-functional . [(20160601 1218) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single ((:keywords "lisp" "functions" "combinators"))]) (dash . [(20160510 1327) nil "A modern list library for Emacs" single ((:keywords "lists"))]) (dart-mode . [(20160212 1321) ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23))) "Major mode for editing Dart files" single ((:keywords "language") (:url . "http://code.google.com/p/dart-mode"))]) (darkburn-theme . [(20151003 300) nil "A not-so-low contrast color theme for Emacs." single ((:url . "http://github.com/gorauskas/darkburn-theme"))]) (dark-mint-theme . [(20160302 42) nil "dark & minty fresh theme" single nil]) (darcula-theme . [(20160305 421) nil "Inspired by IntelliJ's Darcula theme" single ((:keywords "faces") (:url . "https://github.com/fommil/darcula-theme-emacs"))]) (danneskjold-theme . [(20160409 1217) nil "No description available." single nil]) (dactyl-mode . [(20140906 1225) nil "Major mode for editing Pentadactyl config files" single ((:keywords "languages" "vim") (:url . "https://github.com/luxbock/dactyl-mode"))]) (d-mode . [(20160504 1155) nil "D Programming Language major mode for (X)Emacs" single ((:keywords "d" "programming" "language" "emacs" "cc-mode"))]) (czech-holidays . [(20160113 1152) nil "Adds a list of Czech public holidays to Emacs calendar" single ((:keywords "calendar"))]) (cython-mode . [(20140705 1429) nil "Major mode for editing Cython files" single nil]) (cypher-mode . [(20151110 542) nil "major mode for editing cypher scripts" single ((:keywords "cypher" "graph") (:url . "http://github.com/fxbois/cypher-mode"))]) (cyphejor . [(20160531 1105) ((emacs (24 4))) "Shorten major mode names using user-defined rules" single ((:keywords "mode-line" "major-mode") (:url . "https://github.com/mrkkrp/cyphejor"))]) (cygwin-mount . [(20131111 1546) nil "Teach EMACS about cygwin styles and mount points." single ((:keywords "files" "mount" "cygwin"))]) (cycle-themes . [(20150402 2209) ((cl-lib (0 5))) "A global minor mode to make switching themes easier" single ((:keywords "themes" "utility" "global minor mode") (:url . "http://github.com/toroidal-code/cycle-themes.el"))]) (cycle-resize . [(20160521 1057) nil "Cycle resize the current window horizontally or vertically" single ((:url . "https://github.com/pierre-lecocq/cycle-resize"))]) (cycbuf . [(20131203 1437) nil "Cycle buffers, inspired by swbuff.el, swbuff-x.el, and bs.el" single ((:keywords "files" "convenience" "buffer switching") (:url . "https://github.com/martinp26/cycbuf"))]) (cyberpunk-theme . [(20160121 1912) nil "Cyberpunk Color Theme" single ((:keywords "color" "theme" "cyberpunk"))]) (cus-edit+ . [(20160529 1637) nil "Enhancements to `cus-edit.el'." single ((:keywords "help" "customize" "help" "faces") (:url . "http://www.emacswiki.org/cus-edit+.el"))]) (cursor-test . [(20131207 1132) ((emacs (24))) "testing library for cursor position in emacs." single ((:url . "https://github.com/ainame/cursor-test.el"))]) (cursor-in-brackets . [(20160520 438) nil "move cursor in brackets/quotes when right bracket/quote is inserted" single ((:keywords "cursor" "bracket" "quote"))]) (cursor-chg . [(20151231 1440) nil "Change cursor dynamically, depending on the context." single ((:keywords "cursor" "accessibility") (:url . "http://www.emacswiki.org/cursor-chg.el"))]) (cuda-mode . [(20151213 2121) nil "NVIDIA CUDA Major Mode" single ((:keywords "c" "languages"))]) (cucumber-goto-step . [(20131209 2319) ((pcre2el (1 5))) "Jump to cucumber step definition" single ((:url . "http://orthogonal.me"))]) (ctxmenu . [(20140303 1542) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar ((:keywords "popup") (:url . "https://github.com/aki2o/emacs-ctxmenu"))]) (ctl-mode . [(20151202 406) nil "Major mode for editing GrADS script files" single ((:keywords "grads" "script" "major-mode"))]) (ctags-update . [(20150427 2214) nil "(auto) update TAGS in parent directory using exuberant-ctags" single ((:keywords "exuberant-ctags" "etags") (:url . "https://github.com/jixiuf/helm-etags-plus"))]) (ctags . [(20110911 504) nil "Exuberant Ctags utilities for Emacs" single ((:keywords "tags" "ctags" "etags") (:url . "https://bitbucket.org/semente/ctags.el"))]) (ctable . [(20140304 1859) nil "Table component for Emacs Lisp" single ((:keywords "table") (:url . "https://github.com/kiwanami/emacs-ctable"))]) (csv-nav . [(20130407 1320) nil "navigate and edit CSV files" single nil]) (cssh . [(20150810 1209) nil "clusterssh implementation for emacs" single ((:keywords "clusterssh" "ssh" "cssh") (:url . "http://tapoueh.org/emacs/cssh.html"))]) (css-eldoc . [(20150124 2123) nil "an eldoc-mode plugin for CSS source code" tar nil]) (csharp-mode . [(20160603 153) nil "C# mode derived mode" single ((:keywords "c#" "languages" "oop" "mode") (:url . "https://github.com/josteink/csharp-mode"))]) (cryptsy-public-api . [(20141008 728) ((json (1 2))) "Library for working with the Cryptsy public API" single ((:keywords "cryptsy" "bitcoin" "litecoin" "dogecoin"))]) (cryptol-mode . [(20140426 1204) nil "Cryptol major mode for Emacs" single ((:keywords "cryptol" "cryptography") (:url . "http://github.com/thoughtpolice/cryptol-mode"))]) (crux . [(20160530 2354) ((seq (1 11))) "A Collection of Ridiculously Useful eXtensions" single ((:keywords "convenience") (:url . "https://github.com/bbatsov/crux"))]) (crosshairs . [(20151231 1438) ((hl-line+ (0)) (col-highlight (0)) (vline (0))) "Highlight the current line and column." single ((:keywords "faces" "frames" "emulation" "highlight" "cursor" "accessibility") (:url . "http://www.emacswiki.org/crosshairs.el"))]) (crm-custom . [(20160116 1806) ((cl-lib (0 5))) "Alternate `completing-read-multiple' that uses `completing-read'" single ((:keywords "completion" "minibuffer" "multiple elements") (:url . "https://github.com/DarwinAwardWinner/crm-custom"))]) (cricbuzz . [(20160601 1539) ((enlive (0 0 1))) "Cricket scores from cricbuzz in emacs" single ((:keywords "cricket" "score") (:url . "https://github.com/lepisma/cricbuzz.el"))]) (creole-mode . [(20130721 1950) nil "a markup mode for creole" single ((:keywords "hypermedia" "wp") (:url . "https://github.com/nicferrier/creole-mode"))]) (creole . [(20140924 1000) ((noflet (0 0 3)) (kv (0 0 17))) "A parser for the Creole Wiki language" single ((:keywords "lisp" "creole" "wiki"))]) (creds . [(20140510 1206) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar nil]) (crappy-jsp-mode . [(20140311 431) nil "A pretty crappy major-mode for jsp." single ((:keywords "jsp" "major" "mode"))]) (cql-mode . [(20160413 1943) ((emacs (24))) "Major mode for editting CQLs" single ((:keywords "cql" "cassandra") (:url . "https://github.com/Yuki-Inoue/cql-mode"))]) (cpputils-cmake . [(20160515 303) nil "Easy real time C++ syntax check and intellisense if you use CMake" tar nil]) (cp5022x . [(20120323 1835) nil "cp50220, cp50221, cp50222 coding system" single ((:keywords "languages" "cp50220" "cp50221" "cp50222" "cp51932" "cp932"))]) (coverlay . [(20160507 1155) ((emacs (24 1)) (cl-lib (0 5))) "Test coverage overlays" single ((:keywords "coverage" "overlay") (:url . "https://github.com/twada/coverlay.el"))]) (counsel-projectile . [(20160507 1222) ((counsel (0 7 0)) (projectile (0 13 0))) "Ivy integration for Projectile" single ((:keywords "project" "convenience") (:url . "https://github.com/ericdanan/counsel-projectile"))]) (counsel . [(20160524 1442) ((emacs (24 1)) (swiper (0 8 0))) "Various completion functions using Ivy" single ((:keywords "completion" "matching") (:url . "https://github.com/abo-abo/swiper"))]) (corral . [(20160502 201) nil "Quickly surround text with delimiters" single ((:url . "http://github.com/nivekuil/corral"))]) (control-mode . [(20140218 807) nil "A \"control\" mode, similar to vim's \"normal\" mode" single ((:keywords "convenience" "emulations") (:url . "https://github.com/stephendavidmarsh/control-mode"))]) (contextual . [(20160131 1237) ((emacs (24)) (dash (2 12 1)) (cl-lib (0 5))) "Contextual profile management system" single ((:keywords "convenience" "tools") (:url . "https://github.com/lshift-de/contextual"))]) (connection . [(20140717 2229) nil "TCP-based client connection" single ((:keywords "network"))]) (conkeror-minor-mode . [(20150114 1004) nil "Mode for editing conkeror javascript files." single ((:keywords "programming" "tools") (:url . "http://github.com/Bruce-Connor/conkeror-minor-mode"))]) (config-parser . [(20160426 719) ((emacs (24 4))) "a library for parsing config file" single ((:keywords "convenience" "config") (:url . "https://github.com/lujun9972/el-config-parser"))]) (concurrent . [(20160109 2246) ((deferred (0 4 0))) "Concurrent utility functions for emacs lisp" single ((:keywords "deferred" "async" "concurrent") (:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown"))]) (composable . [(20160519 1257) ((emacs (24 4))) "composable editing" tar ((:keywords "lisp"))]) (company-ycmd . [(20160504 102) ((ycmd (0 1)) (company (0 8 3)) (deferred (0 2 0)) (s (1 9 0)) (dash (1 2 0)) (let-alist (1 0 4))) "company-mode backend for ycmd" single ((:url . "https://github.com/abingham/emacs-ycmd"))]) (company-ycm . [(20140904 1317) ((ycm (0 1))) "company-ycm" single ((:keywords "abbrev"))]) (company-web . [(20160502 858) ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" tar ((:keywords "html" "company") (:url . "https://github.com/osv/company-web"))]) (company-try-hard . [(20150902 1706) ((emacs (24 3)) (company (0 8 0)) (dash (2 0))) "get all completions from company backends" single ((:keywords "matching"))]) (company-tern . [(20160510 851) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single ((:url . "https://github.com/proofit404/company-tern"))]) (company-sourcekit . [(20160510 2217) ((emacs (24 3)) (company (0 8 12)) (dash (2 12 1)) (dash-functional (1 2 0)) (sourcekit (0 1 7))) "company-mode completion backend for SourceKit" single ((:keywords "abbrev") (:url . "https://github.com/nathankot/company-sourcekit"))]) (company-shell . [(20160528 707) ((company (0 8 12)) (dash (2 12 0)) (cl-lib (0 5))) "Company mode backend for shell functions" single ((:keywords "company" "shell") (:url . "https://github.com/Alexander-Miller/company-shell"))]) (company-racer . [(20150628 2133) ((emacs (24)) (cl-lib (0 5)) (company (0 8 0)) (deferred (0 3 1))) "Company integration for racer" single ((:keywords "convenience") (:url . "https://github.com/emacs-pe/company-racer"))]) (company-quickhelp . [(20160211 918) ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" single ((:keywords "company" "popup" "documentation" "quickhelp") (:url . "https://www.github.com/expez/company-quickhelp"))]) (company-qml . [(20160212 1712) ((qml-mode (0 1)) (company (0 8 12))) "Company backend for QML files" tar ((:keywords "extensions"))]) (company-ngram . [(20160530 55) ((cl-lib (0 5)) (company (0 8 0))) "N-gram based completion" tar ((:url . "https://github.com/kshramt/company-ngram"))]) (company-nand2tetris . [(20151027 1636) ((names (0 3 0)) (nand2tetris (0 0 1)) (company (0 5)) (cl-lib (0 5 0))) "Company backend for nand2tetris major mode" single ((:keywords "nand2tetris" "hdl" "company") (:url . "http://www.github.com/CestDiego/nand2tetris.el/"))]) (company-math . [(20160229 932) ((company (0 8 0)) (math-symbol-lists (1 0))) "Completion backends for unicode math symbols and latex tags" single ((:keywords "unicode" "symbols" "completion") (:url . "https://github.com/vspinu/company-math"))]) (company-lua . [(20160514 1620) ((company (0 8 12)) (s (1 10 0)) (f (0 17 0)) (lua-mode (20151025))) "Company backend for Lua" tar nil]) (company-jedi . [(20151216 2121) ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 7))) "company-mode completion back-end for Python JEDI" single nil]) (company-irony-c-headers . [(20151018 409) ((cl-lib (0 5)) (company (0 9 0)) (irony (0 2 0))) "Company mode backend for C/C++ header files with Irony" single ((:keywords "c" "company") (:url . "https://github.com/hotpxl/company-irony-c-headers"))]) (company-irony . [(20160321 1603) ((emacs (24 1)) (company (0 8 0)) (irony (0 2 0)) (cl-lib (0 5))) "company-mode completion back-end for irony-mode" single ((:keywords "convenience") (:url . "https://github.com/Sarcasm/company-irony/"))]) (company-inf-ruby . [(20140805 1554) ((company (0 6 10)) (inf-ruby (2 2 7)) (emacs (24 1))) "company-mode completion back-end for inf-ruby" single ((:url . "https://github.com/company-mode/company-inf-ruby"))]) (company-go . [(20160306 1555) ((company (0 8 0)) (go-mode (1 0 0))) "company-mode backend for Go (using gocode)" single ((:keywords "languages"))]) (company-ghci . [(20160310 2000) ((company (0 8 11)) (haskell-mode (13))) "company backend which uses the current ghci process." single nil]) (company-ghc . [(20160315 910) ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 4 0 0)) (emacs (24))) "company-mode ghc-mod backend" single ((:keywords "haskell" "completion") (:url . "https://github.com/iquiw/company-ghc"))]) (company-flx . [(20160423 1913) ((emacs (24)) (company (0 8 12)) (flx (0 5))) "flx based fuzzy matching for company" single ((:keywords "convenience" "company" "fuzzy" "flx") (:url . "https://github.com/PythonNut/company-flx"))]) (company-emoji . [(20160331 1841) ((cl-lib (0 5)) (company (0 8 0))) "company-mode backend for emoji" single ((:keywords "emoji" "company" "honk") (:url . "https://github.com/dunn/company-emoji.git"))]) (company-edbi . [(20160221 1323) ((company (0 8 5)) (edbi (0 1 3)) (cl-lib (0 5 0)) (s (1 9 0))) "Edbi backend for company-mode" single ((:url . "https://github.com/proofit404/company-edbi"))]) (company-dcd . [(20160406 2248) ((company (0 9)) (flycheck-dmd-dub (0 7)) (yasnippet (0 8)) (popwin (0 7)) (cl-lib (0 5)) (helm (1 5 6))) "Company backend for Dlang using DCD." tar ((:keywords "languages") (:url . "http://github.com/tsukimizake/company-dcd"))]) (company-coq . [(20160316 1314) ((company-math (1 1)) (company (0 8 12)) (yasnippet (0 9 0 1)) (dash (2 12 1)) (cl-lib (0 5))) "A collection of extensions for Proof General's Coq mode" tar nil]) (company-cabal . [(20151216 920) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) "company-mode cabal backend" tar ((:url . "https://github.com/iquiw/company-cabal"))]) (company-c-headers . [(20150801 1101) ((emacs (24 1)) (company (0 8))) "Company mode backend for C/C++ header files" single ((:keywords "development" "company"))]) (company-auctex . [(20151102 843) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) "Company-mode auto-completion for AUCTeX" single ((:url . "https://github.com/alexeyr/company-auctex/"))]) (company-arduino . [(20160306 1139) ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5)) (company-irony (0 1 0)) (company-c-headers (20140930)) (arduino-mode (1 0))) "company-mode for Arduino" single ((:keywords "convenience" "development" "company") (:url . "https://github.com/yuutayamada/company-arduino"))]) (company-anaconda . [(20160509 617) ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) "Anaconda backend for company-mode" single ((:url . "https://github.com/proofit404/anaconda-mode"))]) (company . [(20160522 2035) ((emacs (24 1)) (cl-lib (0 5))) "Modular text completion framework" tar ((:keywords "abbrev" "convenience" "matching") (:url . "http://company-mode.github.io/"))]) (common-lisp-snippets . [(20160531 1103) ((yasnippet (0 8 0))) "Yasnippets for Common Lisp" tar ((:keywords "snippets") (:url . "https://github.com/mrkkrp/common-lisp-snippets"))]) (commify . [(20151110 338) ((s (1 9 0))) "Toggle grouping commas in numbers" single ((:keywords "convenience" "editing" "numbers" "grouping" "commas") (:url . "https://github.com/ddoherty03/commify"))]) (commenter . [(20160219 1027) ((emacs (24 4)) (let-alist (1 0 4))) "multiline-comment support package" single ((:keywords "comment") (:url . "https://github.com/yuutayamada/commenter"))]) (comment-dwim-2 . [(20150825 1749) nil "An all-in-one comment command to rule them all" single ((:keywords "convenience") (:url . "https://github.com/remyferre/comment-dwim-2"))]) (commander . [(20140120 1252) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single ((:keywords "cli" "argv") (:url . "http://github.com/rejeep/commander.el"))]) (command-queue . [(20160328 1225) ((emacs (24 3))) "shell command queue" single ((:url . "https://github.com/Yuki-Inoue/command-queue"))]) (command-log-mode . [(20160412 2347) nil "log keyboard commands to buffer" single ((:keywords "help") (:url . "https://github.com/lewang/command-log-mode"))]) (column-marker . [(20121128 243) nil "Highlight certain character columns" single ((:keywords "tools" "convenience" "highlight"))]) (column-enforce-mode . [(20140902 1149) nil "Highlight text that extends beyond a  column" single ((:url . "www.github.com/jordonbiondo/column-enforce-mode"))]) (color-theme-sanityinc-tomorrow . [(20160601 614) nil "A version of Chris Kempson's various Tomorrow themes" tar nil]) (color-theme-sanityinc-solarized . [(20160429 2103) nil "A version of Ethan Schoonover's Solarized themes" tar nil]) (color-theme-modern . [(20160411 2046) ((emacs (24))) "Reimplement colortheme with Emacs 24 theme framework." tar ((:url . "https://github.com/emacs-jp/replace-colorthemes/"))]) (color-theme-buffer-local . [(20151012 1828) ((color-theme (0))) "Install color-themes by buffer." single ((:keywords "faces") (:url . "http://github.com/vic/color-theme-buffer-local"))]) (color-moccur . [(20141222 1835) nil "multi-buffer occur (grep) mode" single ((:keywords "convenience") (:url . "http://www.bookshelf.jp/elc/color-moccur.el"))]) (color-identifiers-mode . [(20160519 1346) ((dash (2 5 0)) (emacs (24))) "Color identifiers based on their names" single ((:keywords "faces" "languages") (:url . "https://github.com/ankurdave/color-identifiers-mode"))]) (colemak-evil . [(20140508 1812) ((evil (1 0 8))) "Colemak-friendly keybindings for Evil." single ((:url . "https://github.com/patbl/colemak-evil"))]) (col-highlight . [(20151231 1433) ((vline (0))) "Highlight the current column." single ((:keywords "faces" "frames" "emulation" "highlight" "cursor" "accessibility") (:url . "http://www.emacswiki.org/col-highlight.el"))]) (coffee-mode . [(20160520 346) ((emacs (24 1)) (cl-lib (0 5))) "Major mode for CoffeeScript code" single ((:keywords "coffeescript" "major" "mode") (:url . "http://github.com/defunkt/coffee-mode"))]) (coffee-fof . [(20131012 730) ((coffee-mode (0 4 1))) "A coffee-mode configuration for `ff-find-other-file'." single ((:keywords "coffee-mode") (:url . "http://github.com/yasuyk/coffee-fof"))]) (codic . [(20150926 627) ((emacs (24)) (cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar ((:url . "https://github.com/syohex/emacs-codic"))]) (codesearch . [(20160111 855) ((dash (2 8 0))) "Easy access to the codesearch tools" single ((:keywords "tools" "development" "search") (:url . "https://github.com/abingham/codesearch.el"))]) (codebug . [(20140929 1637) nil "Interact with codebug" single ((:url . "http://www.shanedowling.com/"))]) (code-library . [(20160426 718) ((gist (1 3 1))) "use org-mode to collect code snippets" single ((:keywords "lisp" "code"))]) (cobra-mode . [(20140116 1516) nil "Major mode for .NET-based Cobra language" single ((:keywords "languages") (:url . "http://github.com/Nekroze/cobra-mode"))]) (cn-outline . [(20100321 1114) nil "No description available." single nil]) (cmds-menu . [(20151231 1430) nil "`Recent Commands' submenu for the menu-bar `Tools' menu." single ((:keywords "convenience" "command" "menu") (:url . "http://www.emacswiki.org/cmds-menu.el"))]) (cmake-project . [(20150720 1559) nil "Integrates CMake build process with Emacs" single ((:keywords "c" "cmake" "languages" "tools") (:url . "http://github.com/alamaison/emacs-cmake-project"))]) (cmake-mode . [(20160510 1340) nil "major-mode for editing CMake sources" single nil]) (cmake-ide . [(20160531 218) ((emacs (24 1)) (cl-lib (0 5)) (seq (1 11)) (levenshtein (0))) "Calls CMake to find out include paths and other compiler flags" single ((:keywords "languages") (:url . "http://github.com/atilaneves/cmake-ide"))]) (cmake-font-lock . [(20150828 1527) ((cmake-mode (0 0))) "Advanced, type aware, highlight support for CMake" single ((:keywords "faces" "languages") (:url . "https://github.com/Lindydancer/cmake-font-lock"))]) (clues-theme . [(20140922 2256) ((emacs (24 0))) "an Emacs 24 theme which may well be fully awesome..." single ((:url . "https://github.com/jasonm23/emacs-clues-theme"))]) (cloud-to-butt-erc . [(20130627 1808) nil "Replace 'the cloud' with 'my butt'" single ((:url . "http://www.github.com/leathekd/cloud-to-butt-erc"))]) (closure-lint-mode . [(20101118 1524) nil "minor mode for the Closure Linter" single ((:keywords "tools" "closure" "javascript" "lint" "flymake") (:url . "https://github.com/r0man/closure-lint-mode"))]) (closql . [(20160415 2116) ((emacs (25 0 92)) (emacsql-sqlite (2 0 1))) "store EIEIO objects using EmacSQL" single ((:keywords "extensions") (:url . "https://gitlab.com/tarsius/closql"))]) (clomacs . [(20160513 353) ((emacs (24 3)) (cider (0 11))) "Simplifies Emacs Lisp interaction with Clojure." single ((:keywords "clojure" "interaction") (:url . "https://github.com/clojure-emacs/clomacs"))]) (clojure-snippets . [(20160305 802) ((yasnippet (0 8 0))) "Yasnippets for clojure" tar nil]) (clojure-quick-repls . [(20150814 236) ((cider (0 8 1)) (dash (2 9 0))) "Quickly create Clojure and ClojureScript repls for a project." single ((:keywords "languages" "clojure" "cider" "clojurescript") (:url . "https://github.com/symfrog/clojure-quick-repls"))]) (clojure-mode-extra-font-locking . [(20160307 614) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single ((:keywords "languages" "lisp") (:url . "http://github.com/clojure-emacs/clojure-mode"))]) (clojure-mode . [(20160521 1309) ((emacs (24 3))) "Major mode for Clojure code" single ((:keywords "languages" "clojure" "clojurescript" "lisp") (:url . "http://github.com/clojure-emacs/clojure-mode"))]) (clojars . [(20160518 2335) ((request-deferred (0 2 0))) "clojars.org search interface" single ((:keywords "docs" "help" "tools") (:url . "https://github.com/joshuamiller/clojars.el"))]) (clocker . [(20160125 1705) ((projectile (0 11 0)) (dash (2 10))) "Note taker and clock-in enforcer" single ((:keywords "org"))]) (cloc . [(20151007 401) ((cl-lib (0 5))) "count lines of code over emacs buffers" single ((:keywords "cloc" "count" "source" "code" "lines") (:url . "https://github.com/cosmicexplorer/cloc-emacs"))]) (clmemo . [(20160326 1123) nil "Change Log MEMO" tar ((:keywords "convenience") (:url . "https://github.com/ataka/clmemo"))]) (cljsbuild-mode . [(20160402 1200) nil "A minor mode for the ClojureScript 'lein cljsbuild' command" single ((:keywords "clojure" "clojurescript" "leiningen" "compilation") (:url . "http://github.com/kototama/cljsbuild-mode"))]) (cljr-helm . [(20150425 1507) ((clj-refactor (0 13 0)) (helm (1 5 6))) "Wraps clojure refactor commands with helm" single ((:keywords "helm" "clojure" "refactor") (:url . "https://github.com/philjackson/cljr-helm"))]) (clj-refactor . [(20160524 346) ((emacs (24 4)) (s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (clojure-mode (5 4 0)) (cider (0 11 0)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) "A collection of clojure refactoring functions" tar ((:keywords "convenience" "clojure" "cider"))]) (clips-mode . [(20131012 1601) nil "Major mode for editing CLIPS code and REPL" tar nil]) (clippy . [(20140417 614) ((pos-tip (1 0))) "Show tooltip with function documentation at point" single ((:keywords "docs") (:url . "https://github.com/Fuco1/clippy.el"))]) (clipmon . [(20160128 1204) nil "Clipboard monitor - watch system clipboard, add changes to kill ring/autoinsert" tar ((:keywords "convenience") (:url . "https://github.com/bburns/clipmon"))]) (cliphist . [(20160502 2112) ((popup (0 5 0))) "Read clipboard history from Parcellite on Linux and Flycut on OS X" tar ((:keywords "clipboard" "manager" "history") (:url . "http://github.com/redguardtoo/cliphist"))]) (clevercss . [(20131228 1955) nil "A major mode for editing CleverCSS files" single ((:keywords "languages" "css"))]) (clear-text . [(20160406 1543) nil "Make you use clear text" tar ((:keywords "convenience") (:url . "https://github.com/xuchunyang/clear-text.el"))]) (clean-buffers . [(20160529 1759) ((cl-lib (0 5))) "clean useless buffers" single ((:keywords "convenience" "usability" "buffers"))]) (clean-aindent-mode . [(20150816 2229) nil "Simple indent and unindent, trims indent white-space" single ((:keywords "indentation" "whitespace" "backspace") (:url . "https://github.com/pmarinov/clean-aindent-mode"))]) (cl-lib-highlight . [(20140127 1512) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single ((:url . "https://github.com/skeeto/cl-lib-highlight"))]) (cl-format . [(20160412 1945) nil "CL format routine." tar nil]) (circe . [(20160527 822) ((cl-lib (0 5))) "Client for IRC in Emacs" tar ((:url . "https://github.com/jorgenschaefer/circe"))]) (cider-spy . [(20160313 940) ((emacs (24 4)) (cider (0 10 0)) (dash (2 5 0)) (cl-lib (0 5)) (noflet (0 0 15))) "Spy on CIDER to get info" single ((:keywords "languages" "clojure" "cider" "nrepl") (:url . "http://www.github.com/jonpither/cider-spy"))]) (cider-profile . [(20141120 825) ((cider (0 8 0))) "CIDER profiling support" single ((:keywords "cider" "clojure" "profiling") (:url . "http://github.com/thunknyc/nrepl-profile"))]) (cider-eval-sexp-fu . [(20160412 128) ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) "Briefly highlights an evaluated sexps." single ((:keywords "languages" "clojure" "cider"))]) (cider-decompile . [(20151121 2337) ((cider (0 3 0)) (javap-mode (9))) "decompilation extension for cider" single ((:keywords "languages" "clojure" "cider") (:url . "http://www.github.com/clojure-emacs/cider-decompile"))]) (cider . [(20160602 1009) ((emacs (24 3)) (clojure-mode (5 3 0)) (pkg-info (0 4)) (queue (0 1 1)) (spinner (1 7)) (seq (2 14))) "Clojure Interactive Development Environment that Rocks" tar ((:keywords "languages" "clojure" "cider") (:url . "http://www.github.com/clojure-emacs/cider"))]) (chruby . [(20151204 630) nil "Emacs integration for chruby" single ((:keywords "ruby" "chruby") (:url . "http://www.emacswiki.org/emacs/ChrubyEl"))]) (chronos . [(20150602 1029) nil "multiple simultaneous countdown / countup timers" tar ((:keywords "calendar") (:url . "http://github.com/dxknight/chronos"))]) (chm-view . [(20110616 1219) nil "View CHM file." single ((:keywords "chm" "chm-view") (:url . "http://www.emacswiki.org/emacs/download/chm-view.el"))]) (chinese-yasdcv . [(20150702 816) ((cl-lib (0 5)) (chinese-pyim (0 0 1))) "Yet another frontend for the StarDict command-line program" single ((:keywords "convenience" "chinese" "dictionary") (:url . "https://github.com/tumashu/chinese-yasdcv"))]) (chinese-word-at-point . [(20150618 2038) ((cl-lib (0 5))) "Add `chinese-word' thing to `thing-at-point'" single ((:keywords "convenience" "chinese") (:url . "https://github.com/xuchunyang/chinese-word-at-point.el"))]) (chinese-wbim . [(20150623 2250) nil "Enable Wubi Input Method in Emacs." tar nil]) (chinese-remote-input . [(20150110 2303) nil "Input Chinese with a remote input method (e.g. Android Voice Input Method)" single ((:keywords "convenience" "chinese") (:url . "https://github.com/tumashu/chinese-remote-input"))]) (chinese-pyim . [(20160602 1716) ((cl-lib (0 5)) (pos-tip (0 4)) (popup (0 1))) "Chinese pinyin input method" tar ((:keywords "convenience" "chinese" "pinyin" "input-method") (:url . "https://github.com/tumashu/chinese-pyim"))]) (chinese-fonts-setup . [(20160602 106) ((cl-lib (0 5))) "Emacs fonts config tool enforcing double-width Chinese character display" single ((:keywords "convenience" "chinese" "font") (:url . "https://github.com/tumashu/chinese-fonts-setup"))]) (chinese-conv . [(20160218 1515) ((cl-lib (0 5))) "Conversion between Chinese Characters with opencc or cconv" single ((:url . "https://github.com/gucong/emacs-chinese-conv"))]) (chicken-scheme . [(20141116 1339) nil "Scheme-mode extensions for Chicken Scheme" single ((:url . "http://github.com/dleslie/chicken-scheme"))]) (cherry-blossom-theme . [(20150621 2242) ((emacs (24 0))) "a soothing color theme for Emacs24." single ((:url . "https://github.com/inlinestyle/emacs-cherry-blossom-theme"))]) (cheerilee . [(20160313 1335) ((xelb (0 1))) "Toolkit library" tar ((:keywords "tools"))]) (chee . [(20160531 1536) ((dash (2 12 1)) (s (1 10 0)) (f (0 18 2))) "Interface to chee using dired and image-dired" tar ((:url . "https://github.com/eikek/chee/tree/master/emacs"))]) (checkbox . [(20141116 1858) ((emacs (24)) (cl-lib (0 5))) "Quick manipulation of textual checkboxes" single ((:keywords "convenience") (:url . "http://github.com/camdez/checkbox.el"))]) (cheatsheet . [(20151203 351) ((emacs (24)) (cl-lib (0 5))) "create your own cheatsheet" single ((:keywords "convenience" "usability") (:url . "http://github.com/darksmile/cheatsheet/"))]) (chatwork . [(20150807 2148) nil "ChatWork client for Emacs" single ((:keywords "web") (:url . "https://github.com/ataka/chatwork"))]) (charmap . [(20160309 346) nil "Unicode table for Emacs" single ((:keywords "unicode" "character" "ucs") (:url . "https://github.com/lateau/charmap"))]) (character-fold+ . [(20160227 1703) nil "Extensions to `character-fold.el'" single ((:keywords "isearch" "search" "unicode") (:url . "http://www.emacswiki.org/character-fold+.el"))]) (char-menu . [(20160204 15) ((emacs (24 3)) (avy-menu (0 1))) "Create your own menu for fast insertion of arbitrary symbols" single ((:keywords "convenience" "editing") (:url . "https://github.com/mrkkrp/char-menu"))]) (chapel-mode . [(20160504 308) nil "a CC Mode for Chapel derived from derived-mode-ex.el" single ((:keywords "chapel" "languages" "oop"))]) (change-inner . [(20150707 1044) ((expand-region (0 7))) "Change contents based on semantic units" single ((:keywords "convenience" "extensions"))]) (cff . [(20160118 1418) ((cl-lib (0 5)) (emacs (24))) "Search of the C/C++ file header by the source and vice versa" single ((:keywords "find-file") (:url . "https://github.com/fourier/cff"))]) (cfengine-code-style . [(20131209 611) nil "C code style for CFEngine project." single ((:url . "https://github.com/cfengine/core"))]) (cerbere . [(20140418 915) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar ((:keywords "python" "go" "php" "tests" "tdd") (:url . "https://github.com/nlamirault/cerbere"))]) (centimacro . [(20140306 827) nil "Assign multiple macros as global key bindings" single ((:keywords "macros") (:url . "https://github.com/abo-abo/centimacro"))]) (centered-window-mode . [(20160210 447) ((s (1 10 0))) "Center the text when there's only one window" single ((:keywords "faces" "windows") (:url . "https://github.com/anler/centered-window-mode"))]) (centered-cursor-mode . [(20151001 834) nil "cursor stays vertically centered" single ((:keywords "convenience") (:url . "http://www.emacswiki.org/cgi-bin/wiki/centered-cursor-mode.el"))]) (celery . [(20150812 347) ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) "a minor mode to draw stats from celery and more?" single ((:keywords "celery" "convenience") (:url . "https://github.com/ardumont/emacs-celery"))]) (cedit . [(20141231 1014) nil "paredit-like commands for c-like languages" single ((:url . "http://hins11.yu-yake.com/"))]) (cdnjs . [(20140217 1512) ((cl-lib (0 3)) (dash (2 5 0)) (deferred (0 3 2)) (f (0 16 0)) (pkg-info (0 4))) "A front end for http://cdnjs.com" single ((:keywords "tools") (:url . "https://github.com/yasuyk/cdnjs.el"))]) (cdlatex . [(20140707 626) nil "Fast input methods for LaTeX environments and math" single ((:keywords "tex"))]) (cdb . [(20151205 743) nil "constant database (cdb) reader for Emacs Lisp" single ((:keywords "cdb"))]) (cd-compile . [(20141108 1357) nil "run compile in a specific directory" single nil]) (ccc . [(20151205 743) nil "buffer local cursor color control library" single ((:keywords "cursor") (:url . "https://github.com/skk-dev/ddskk/blob/master/READMEs/README.ccc.org"))]) (cbm . [(20160131 1106) ((cl-lib (0 5))) "Switch to \"similiar\" buffers." single ((:keywords "buffers") (:url . "http://github.com/akermu/cbm.el"))]) (caskxy . [(20140513 1039) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single ((:keywords "convenience") (:url . "https://github.com/aki2o/caskxy"))]) (cask-package-toolset . [(20160102 337) ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Toolsettize your package" tar ((:keywords "convenience" "tools") (:url . "http://github.com/AdrieanKhisbe/cask-package-toolset.el"))]) (cask-mode . [(20160410 949) ((emacs (24 3))) "major mode for editing Cask files" single nil]) (cask . [(20151123 728) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) "Cask: Project management for Emacs package development" tar ((:keywords "speed" "convenience") (:url . "http://github.com/cask/cask"))]) (caseformat . [(20160115 1015) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (s (1 10 0))) "Format based letter case converter" single ((:keywords "convenience") (:url . "https://github.com/HKey/caseformat"))]) (caroline-theme . [(20160318 20) ((emacs (24))) "A trip down to New Orleans..." single ((:url . "https://github.com/xjackk/carolines-theme"))]) (cargo . [(20160525 719) ((emacs (24 3)) (rust-mode (0 2 0))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar ((:keywords "tools"))]) (capture . [(20130828 1144) nil "screencasting with \"avconv\" or \"ffmpeg\"" tar nil]) (camcorder . [(20160404 2334) ((emacs (24)) (names (20150000)) (cl-lib (0 5))) "Record screencasts in gif or other formats." single ((:keywords "multimedia" "screencast") (:url . "http://github.com/Bruce-Connor/camcorder.el"))]) (calmer-forest-theme . [(20130926 10) nil "Darkish theme with green/orange tint" single ((:url . "https://github.com/caldwell/calmer-forest-theme"))]) (calfw-gcal . [(20120111 400) nil "edit Google calendar for calfw.el." tar ((:keywords "convenience" "calendar" "calfw.el") (:url . "https://github.com/myuhe/calfw-gcal.el"))]) (calfw . [(20160302 2058) ((google-maps (20130412 230))) "Calendar view framework on Emacs" tar ((:keywords "calendar") (:url . "https://github.com/kiwanami/emacs-calfw"))]) (cal-china-x . [(20160102 324) ((cl-lib (0 5))) "Chinese localization, lunar/horoscope/zodiac info and more..." tar ((:url . "https://github.com/xwl/cal-china-x"))]) (cake2 . [(20140626 742) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP2 Minor Mode" tar ((:url . "http://code.101000lab.org"))]) (cake-inflector . [(20140415 358) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single ((:url . "https://github.com/k1LoW/emacs-cake-inflector"))]) (cake . [(20140603 2331) ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP Minor Mode" tar ((:url . "https://github.com/k1LoW/emacs-cake"))]) (cacoo . [(20120319 1859) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar nil]) (cache . [(20111019 1800) nil "implementation of a hash table whose key-value pairs expire" single nil]) (cabledolphin . [(20160204 338) ((emacs (24 4)) (seq (1 0))) "capture Emacs network traffic" single ((:keywords "comm"))]) (c0-mode . [(20151110 1252) nil "Major mode for editing C0 files" tar ((:keywords "c0" "languages") (:url . "http://c0.typesafety.net/"))]) (c-eldoc . [(20150904 332) nil "helpful description of the arguments to C functions" single ((:url . "http://github.com/nflath/c-eldoc"))]) (c-c-combo . [(20151223 2055) nil "Make stuff happen when you reach a target wpm" tar ((:url . "https://www.github.com/CestDiego/c-c-combo.el"))]) (buttercup . [(20160514 234) nil "Behavior-Driven Emacs Lisp Testing" tar nil]) (butler . [(20150811 1908) ((deferred (0 3 2)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar nil]) (buster-snippets . [(20151125 410) ((yasnippet (0 8 0))) "Yasnippets for the Buster javascript testing framework" tar ((:keywords "snippets"))]) (buster-mode . [(20140928 713) nil "Minor mode to speed up development when writing tests with Buster.js" single ((:keywords "buster" "testing" "javascript"))]) (bury-successful-compilation . [(20150328 1928) nil "Bury the *compilation* buffer after successful compilation" single ((:keywords "compilation"))]) (bundler . [(20160121 524) ((inf-ruby (2 1)) (cl-lib (0 5))) "Interact with Bundler from Emacs" single ((:keywords "bundler" "ruby") (:url . "http://github.com/tobiassvn/"))]) (buffer-stack . [(20101223 420) nil "Enhanced intelligent switch-to-other-buffer replacement." single ((:keywords "buffer" "buffers" "switching buffers") (:url . "http://www.sixfingeredman.net/proj/xemacs"))]) (buffer-move . [(20160108 908) nil "easily swap buffers" single ((:keywords "lisp" "convenience") (:url . "https://github.com/lukhas/buffer-move"))]) (buffer-flip . [(20160109 2054) ((key-chord (20150808))) "Use key-chord to cycle through buffers like Alt-Tab in Windows" single ((:keywords "convenience") (:url . "https://github.com/killdash9/buffer-flip.el"))]) (buffer-buttons . [(20150106 839) nil "Define, save, and load code-safe buttons in files for emacs" single ((:url . "https://github.com/rpav/buffer-buttons"))]) (bubbleberry-theme . [(20141017 444) ((emacs (24 1))) "A theme based on LightTable for Emacs24" single ((:url . "https://github.com/jasonm23/emacs-bubbleberry-theme"))]) (bts . [(20151109 733) ((widget-mvc (0 0 2)) (log4e (0 3 0)) (yaxception (0 3 3)) (dash (2 9 0)) (s (1 9 0)) (pos-tip (0 4 5))) "A unified UI for various bug tracking systems" single ((:keywords "convenience") (:url . "https://github.com/aki2o/emacs-bts"))]) (btc-ticker . [(20151113 859) ((json (1 2)) (request (0 2 0))) "Shows latest bitcoin price" single ((:keywords "news"))]) (bs-ext . [(20130824 659) nil "Extensions to emacs buffer-selection library (bs.el)" single ((:keywords "convenience" "files") (:url . "http://www.emacswiki.org/emacs/download/bs-ext.el"))]) (browse-kill-ring . [(20160125 209) nil "interactively insert items from kill-ring" single ((:keywords "convenience") (:url . "https://github.com/browse-kill-ring/browse-kill-ring"))]) (browse-kill-ring+ . [(20151231 1421) ((browse-kill-ring (0))) "Extensions to `browse-kill-ring.el'." single ((:keywords "convenience") (:url . "http://www.emacswiki.org/browse-kill-ring+.el"))]) (browse-at-remote . [(20160413 1921) ((f (0 17 2)) (s (1 9 0)) (cl-lib (0 5))) "Open github/gitlab/bitbucket page from Emacs" single ((:keywords "github" "gitlab" "bitbucket" "convenience"))]) (broadcast . [(20151204 2012) ((emacs (24 4))) "Links buffers together for simultaneous editing." single ((:keywords "convenience" "frames" "link" "cursors") (:url . "https://github.com/killdash9/broadcast.el"))]) (brainfuck-mode . [(20150113 242) ((langdoc (20130601 1450))) "Brainfuck mode for Emacs" single ((:keywords "brainfuck" "langdoc") (:url . "https://github.com/tom-tan/brainfuck-mode/"))]) (bracketed-paste . [(20160407 1848) ((emacs (24 3))) "bracketed paste mode support within emacs -nw" single ((:keywords "terminals"))]) (bpe . [(20141228 1605) ((emacs (24 1))) "Blog from Org mode to Blogger" single ((:keywords "blogger" "blog") (:url . "https://github.com/yuutayamada/bpe"))]) (borland-blue-theme . [(20160117 721) ((emacs (24 1))) "Blue/yellow theme based on old DOS Borland/Turbo C IDE" single ((:keywords "themes") (:url . "http://github.com/fourier/borland-blue-theme"))]) (boon . [(20160502 806) ((emacs (24 5)) (expand-region (0 10 0)) (multiple-cursors (1 3 0))) "Ergonomic Command Mode for Emacs." tar nil]) (bookmark+ . [(20160530 1600) nil "Bookmark+: extensions to standard library `bookmark.el'." tar ((:keywords "bookmarks" "bookmark+" "projects" "placeholders" "annotations" "search" "info" "url" "w3m" "gnus") (:url . "http://www.emacswiki.org/bookmark+.el"))]) (bonjourmadame . [(20160112 356) nil "Say \"Hello ma'am!\"" single nil]) (bongo . [(20160313 917) ((cl-lib (0 5)) (emacs (24 1))) "play music with Emacs" tar nil]) (bog . [(20160523 47) ((cl-lib (0 5))) "Extensions for research notes in Org mode" single ((:keywords "bib" "outlines") (:url . "https://github.com/kyleam/bog"))]) (bm . [(20151222 1803) nil "Visible bookmarks in buffer." single ((:keywords "bookmark" "highlight" "faces" "persistent") (:url . "https://github.com/joodland/bm"))]) (blog-admin . [(20160531 150) ((ctable (0 1 1)) (s (1 10 0)) (f (0 17 3)) (names (20151201 0))) "Blog admin for emacs with hexo/org-page supported" tar ((:keywords "tools" "blog" "org" "hexo" "org-page"))]) (blockdiag-mode . [(20160427 24) ((emacs (24 3))) "Major mode for editing blockdiag files" single ((:url . "https://github.com/xcezx/xdiag-mode"))]) (blgrep . [(20150401 916) ((clmemo (20140321 715))) "Block grep" tar ((:keywords "tools" "convenience"))]) (blank-mode . [(20130824 659) nil "minor mode to visualize TAB, (HARD) SPACE, NEWLINE" single ((:keywords "data" "wp") (:url . "http://www.emacswiki.org/cgi-bin/wiki/ViniciusJoseLatorre"))]) (bitly . [(20151125 1048) nil "Shorten URLs using the bitly.com shortener service" single ((:url . "https://github.com/jorgenschaefer/bitly-el"))]) (bitbake . [(20160104 254) ((emacs (24 1)) (dash (2 6 0)) (mmm-mode (0 5 4)) (s (1 10 0))) "Running bitbake from emacs" single ((:keywords "convenience") (:url . "https://github.com/canatella/bitbake-mode"))]) (bison-mode . [(20141119 243) nil "Major mode for editing bison, yacc and lex files." single ((:keywords "bison-mode" "yacc-mode"))]) (birds-of-paradise-plus-theme . [(20130419 1629) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single ((:keywords "themes") (:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el"))]) (bing-dict . [(20160514 1559) nil "Minimalists' English-Chinese Bing dictionary" single ((:keywords "extensions") (:url . "https://github.com/cute-jumper/bing-dict.el"))]) (bind-map . [(20160510 1248) ((emacs (24 3))) "Bind personal keymaps in multiple locations" single ((:url . "https://github.com/justbur/emacs-bind-map"))]) (bind-key . [(20160227 248) nil "A simple way to manage personal keybindings" single ((:keywords "keys" "keybinding" "config" "dotemacs") (:url . "https://github.com/jwiegley/use-package"))]) (bibtex-utils . [(20150924 847) nil "Provides utilities for extending BibTeX mode" single ((:keywords "bibtex") (:url . "https://github.com/plantarum/bibtex-utils"))]) (bibslurp . [(20151202 1746) ((s (1 6 0)) (dash (1 5 0))) "retrieve BibTeX entries from NASA ADS" single ((:keywords "bibliography" "nasa ads") (:url . "https://github.com/mkmcc/bibslurp"))]) (bibretrieve . [(20131013 1332) ((auctex (11 87)) (emacs (24 3))) "Retrieving BibTeX entries from the web" tar ((:keywords "bibtex" "latex" "mathscinet" "arxiv" "zbmath"))]) (biblio-core . [(20160529 1748) ((emacs (24 3)) (let-alist (1 0 4)) (seq (1 11)) (dash (2 12 1))) "A framework for looking up and displaying bibliographic entries" single ((:keywords "bib" "tex" "convenience" "hypermedia") (:url . "http://github.com/cpitclaudel/biblio.el"))]) (biblio . [(20160407 427) ((emacs (24 3)) (biblio-core (0 2))) "Browse and import bibliographic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org" tar nil]) (bfbuilder . [(20150924 1150) ((cl-lib (0 3))) "A brainfuck development environment with interactive debugger" single ((:url . "http://hins11.yu-yake.com/"))]) (bf-mode . [(20130403 942) nil "Browse file persistently on dired" single ((:keywords "convenience") (:url . "https://github.com/emacs-jp/bf-mode"))]) (better-registers . [(20140813 319) nil "facilities for more powerful registers" single ((:keywords "register" "macro"))]) (better-defaults . [(20160601 1419) nil "Fixing weird quirks and poor defaults" single ((:keywords "convenience") (:url . "https://github.com/technomancy/better-defaults"))]) (bert . [(20131117 414) nil "BERT serialization library for Emacs" single ((:keywords "comm" "data"))]) (benchmark-init . [(20150905 438) nil "Benchmarks Emacs require and load calls" tar ((:keywords "benchmark"))]) (beginend . [(20150607 1201) ((emacs (24 4))) "Redefine M-< and M-> for some modes" single ((:keywords "dired" "message" "mu4e" "begin" "end" "beginning" "buffer"))]) (beeminder . [(20160209 2103) ((org (7))) "Emacs interface for Beeminder" single ((:keywords "beeminder") (:url . "http://www.philnewton.net/code/beeminder-el/"))]) (beacon . [(20160526 1950) ((seq (2 14))) "Highlight the cursor whenever the window scrolls" single ((:keywords "convenience") (:url . "https://github.com/Malabarba/beacon"))]) (bbyac . [(20150316 501) ((browse-kill-ring (1 3)) (cl-lib (0 5))) "Type a little Bit, and Bang! You Are Completed." single ((:keywords "abbrev") (:url . "https://github.com/baohaojun/bbyac"))]) (bbdb2erc . [(20130607 129) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single ((:keywords "irc" "contacts" "chat" "client" "internet"))]) (bbdb-vcard . [(20150713 1550) ((bbdb (3 0))) "vCard import/export for BBDB" tar ((:keywords "data" "calendar" "mail" "news") (:url . "http://github.com/vgeddes/bbdb-vcard"))]) (bbdb-handy . [(20150707 1952) ((bbdb (3 1))) "BBDB window as email-address chooser when write an email" single ((:url . "https://github.com/tumashu/bbdb-handy"))]) (bbdb-ext . [(20151220 1413) ((bbdb (2 36))) "Extra commands for BBDB" single ((:keywords "extensions") (:url . "https://github.com/vapniks/bbdb-ext"))]) (bbdb-csv-import . [(20140802 642) ((pcsv (1 3 3)) (dash (2 5 0)) (bbdb (20140412 1949))) "import csv to bbdb version 3+" single ((:keywords "csv" "util" "bbdb") (:url . "https://gitlab.com/iankelling/bbdb-csv-import"))]) (bbdb-china . [(20150615 2056) ((bbdb-vcard (0 4 1)) (chinese-pyim (0 0 1))) "BBDB utils, which let Chinese BBDB users feel easy" single ((:url . "https://github.com/tumashu/bbdb-china"))]) (bbdb-android . [(20150706 24) ((bbdb-vcard (20150705 341))) "Android phone contacts import/export for BBDB" single ((:url . "https://github.com/tumashu/bbdb-android"))]) (bbdb . [(20151114 1741) nil "The Insidious Big Brother Database for GNU Emacs" tar nil]) (bbdb- . [(20140221 1754) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single ((:keywords "bbdb" "news" "mail") (:url . "https://github.com/aki2o/bbdb-"))]) (bbcode-mode . [(20141103 1541) nil "Major mode for writing BBCode markup" single ((:url . "https://github.com/ejmr/bbcode-mode"))]) (bats-mode . [(20160514 115) nil "Emacs mode for editing and running Bats tests" single ((:keywords "bats" "tests") (:url . "https://github.com/dougm/bats-mode"))]) (batch-mode . [(20140807 1550) nil "major mode for editing ESRI batch scrips" single nil]) (basic-theme . [(20151010 307) ((emacs (24))) "Minimalistic light color theme" single ((:keywords "theme" "basic" "minimal" "colors") (:url . "http://github.com/fgeller/basic-theme.el"))]) (bash-completion . [(20150514 928) nil "BASH completion for the shell buffer" tar nil]) (baidu-life . [(20160426 719) ((cl-lib (0 5))) "Use baidu api to do some interesting things" single ((:keywords "lisp" "baidu"))]) (badwolf-theme . [(20160521 655) ((emacs (24))) "Bad Wolf color theme" single ((:keywords "themes") (:url . "https://github.com/bkruczyk/badwolf-emacs"))]) (badger-theme . [(20140716 2132) nil "A dark theme for Emacs 24." single ((:url . "https://github.com/ccann/badger-theme"))]) (backup-walker . [(20130720 1016) nil "quickly traverse all backups of a file" single ((:keywords "backup") (:url . "https://github.com/lewang/backup-walker"))]) (backup-each-save . [(20130704 932) nil "backup each savepoint of a file" single nil]) (babel-repl . [(20160504 1701) ((emacs (24))) "Run babel REPL" single ((:keywords "babel" "javascript" "es6") (:url . "https://github.com/hung-phan/babel-repl/"))]) (babel . [(20131231 925) nil "interface to web translation services such as Babelfish" single ((:keywords "translation" "web") (:url . "http://github.com/juergenhoetzel/babel.el"))]) (axiom-environment . [(20160325 1715) ((emacs (24 2))) "An environment for using Axiom/OpenAxiom/FriCAS" tar ((:keywords "axiom" "openaxiom" "fricas"))]) (aws-ec2 . [(20160603 353) ((emacs (24 4)) (dash (2 12 1)) (dash-functional (1 2 0)) (magit-popup (2 6 0)) (tablist (0 70))) "Manage AWS EC2 instances" single ((:url . "AWS, Amazon Web Service"))]) (awk-it . [(20130917 1348) nil "Run AWK interactively on region!" single ((:keywords "awk"))]) (avy-zap . [(20160330 1330) ((avy (0 2 0))) "Zap to char using `avy'" single ((:keywords "extensions") (:url . "https://github.com/cute-jumper/avy-zap"))]) (avy-migemo . [(20160521 826) ((emacs (24 4)) (avy (0 4 0)) (migemo (1 9))) "avy with migemo" tar ((:keywords "avy" "migemo") (:url . "https://github.com/momomo5717/avy-migemo"))]) (avy-menu . [(20160126 625) ((emacs (24 3)) (avy (0 3 0))) "Library providing avy-powered popup menu" single ((:keywords "popup" "menu") (:url . "https://github.com/mrkkrp/avy-menu"))]) (avy . [(20160601 58) ((emacs (24 1)) (cl-lib (0 5))) "tree-based completion" single ((:keywords "point" "location") (:url . "https://github.com/abo-abo/avy"))]) (autotetris-mode . [(20141114 1046) ((cl-lib (0 5))) "automatically play tetris" single ((:url . "https://github.com/skeeto/autotetris-mode"))]) (autotest . [(20150130 425) nil "ZenTest's autotest integration with emacs." single ((:keywords "testing" "ruby" "convenience") (:url . "https://github.com/zenspider/elisp/blob/master/autotest.el"))]) (autopair . [(20160304 637) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single ((:keywords "convenience" "emulations") (:url . "https://github.com/capitaomorte/autopair"))]) (automargin . [(20131112 214) nil "add margins to windows not-splitted, and center them" single ((:url . "http://hins11.yu-yake.com/"))]) (autofit-frame . [(20151231 1409) ((fit-frame (0))) "Automatically resize one-window frames to fit" single ((:keywords "internal" "extensions" "convenience" "local") (:url . "http://www.emacswiki.org/autofit-frame.el"))]) (autodisass-llvm-bitcode . [(20150410 2025) nil "Automatically disassemble LLVM bitcode" tar nil]) (autodisass-java-bytecode . [(20151005 1112) nil "Automatically disassemble Java bytecode" tar nil]) (autobookmarks . [(20160430 1421) ((dash (2 10 0)) (cl-lib (0 5))) "Save recently visited files and buffers" single ((:keywords "files"))]) (auto-yasnippet . [(20160524 818) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single ((:url . "https://github.com/abo-abo/auto-yasnippet"))]) (auto-virtualenv . [(20160220 836) ((cl-lib (0 5)) (pyvenv (1 9)) (s (1 10 0))) "Auto activate python virtualenvs" single ((:keywords "python" "virtualenv" "tools") (:url . "http://github.com/marcwebbie/auto-virtualenv"))]) (auto-shell-command . [(20150416 1257) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single ((:keywords "shell" "save" "async" "deferred" "auto"))]) (auto-save-buffers-enhanced . [(20130607 2149) nil "Automatically save buffers in a decent way" single nil]) (auto-pause . [(20160426 716) ((emacs (24 4))) "Run processes which will be paused when Emacs is idle" single ((:keywords "convenience" "menu") (:url . "https://github.com/lujun9972/auto-pause"))]) (auto-package-update . [(20151026 111) ((emacs (24 4)) (dash (2 1 0))) "Automatically update Emacs packages." single ((:keywords "package" "update") (:url . "http://github.com/rranelli/auto-package-update.el"))]) (auto-install . [(20150418 1902) nil "Auto install elisp file" single ((:keywords "auto-install") (:url . "http://www.emacswiki.org/emacs/download/auto-install.el"))]) (auto-indent-mode . [(20160426 2222) nil "Auto indent Minor mode" tar ((:keywords "auto" "indentation") (:url . "https://github.com/mlf176f2/auto-indent-mode.el/"))]) (auto-highlight-symbol . [(20130313 443) nil "Automatic highlighting current symbol minor mode" single ((:keywords "highlight" "face" "match" "convenience") (:url . "http://github.com/gennad/auto-highlight-symbol/raw/master/auto-highlight-symbol.el"))]) (auto-dim-other-buffers . [(20160128 1146) nil "Makes non-current buffers less prominent" single ((:url . "https://github.com/mina86/auto-dim-other-buffers.el"))]) (auto-dictionary . [(20150410 1110) nil "automatic dictionary switcher for flyspell" single ((:keywords "wp") (:url . "http://nschum.de/src/emacs/auto-dictionary/"))]) (auto-complete-sage . [(20160514 251) ((auto-complete (1 5 1)) (sage-shell-mode (0 1 0))) "An auto-complete source for sage-shell-mode." single ((:keywords "sage" "math" "auto-complete") (:url . "https://github.com/stakemori/auto-complete-sage"))]) (auto-complete-rst . [(20140225 344) ((auto-complete (1 4))) "Auto-complete extension for ReST and Sphinx" tar ((:url . "https://github.com/tkf/auto-complete-rst"))]) (auto-complete-pcmp . [(20140227 51) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single ((:keywords "completion") (:url . "https://github.com/aki2o/auto-complete-pcmp"))]) (auto-complete-nxml . [(20140220 2258) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single ((:keywords "completion" "html" "xml") (:url . "https://github.com/aki2o/auto-complete-nxml"))]) (auto-complete-exuberant-ctags . [(20140320 224) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single ((:keywords "anto-complete" "exuberant ctags") (:url . "http://code.101000lab.org"))]) (auto-complete-clang-async . [(20130526 1014) nil "Auto Completion source for clang for GNU Emacs" single ((:keywords "completion" "convenience"))]) (auto-complete-clang . [(20140409 252) ((auto-complete (1 3 1))) "Auto Completion source for clang for GNU Emacs" single ((:keywords "completion" "convenience") (:url . "https://github.com/brianjcj/auto-complete-clang"))]) (auto-complete-chunk . [(20140225 346) ((auto-complete (1 4))) "Auto-completion for dot.separated.words." single ((:url . "https://github.com/tkf/auto-complete-chunk"))]) (auto-complete-c-headers . [(20150911 2223) ((auto-complete (1 4))) "An auto-complete source for C/C++ header files" single ((:keywords "c"))]) (auto-complete-auctex . [(20140223 1158) ((yasnippet (0 6 1)) (auto-complete (1 4))) "auto-completion for auctex" single nil]) (auto-complete . [(20160416 804) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar nil]) (auto-compile . [(20160424 618) ((emacs (24 3)) (dash (2 12 1)) (packed (0 5 3))) "automatically compile Emacs Lisp libraries" single ((:keywords "compile" "convenience" "lisp") (:url . "https://github.com/tarsius/auto-compile"))]) (auto-capitalize . [(20160415 1603) nil "Automatically capitalize (or upcase) words" single ((:keywords "text" "wp" "convenience"))]) (auto-auto-indent . [(20131106 1303) ((es-lib (0 1)) (cl-lib (1 0))) "Indents code as you type" single ((:url . "https://github.com/sabof/auto-auto-indent"))]) (auto-async-byte-compile . [(20120322 1641) nil "No description available." single nil]) (auth-password-store . [(20160228 823) ((emacs (24 4)) (password-store (0 1)) (seq (1 9)) (cl-lib (0 5))) "Integrate auth-source with password-store" single ((:keywords "pass" "password-store" "auth-source" "username" "password" "login"))]) (aurel . [(20160309 236) ((emacs (24 3))) "Search, get info, vote and download AUR packages" single ((:keywords "tools") (:url . "https://github.com/alezost/aurel"))]) (audio-notes-mode . [(20140204 1354) nil "Play audio notes synced from somewhere else." single ((:keywords "hypermedia" "convenience") (:url . "http://github.com/Bruce-Connor/audio-notes-mode"))]) (auctex-lua . [(20151121 1010) ((auctex (11 86)) (lua-mode (20130419))) "Lua editing support for AUCTeX" single ((:keywords "latex" "lua") (:url . "http://github.com/vermiculus/auctex-lua"))]) (auctex-latexmk . [(20160522 1250) ((auctex (11 87))) "Add LatexMk support to AUCTeX" single ((:keywords "tex") (:url . "https://github.com/tom-tan/auctex-latexmk/"))]) (atom-dark-theme . [(20151120 135) nil "An Emacs port of the Atom Dark theme from Atom.io." single ((:keywords "themes" "atom" "dark") (:url . "https://github.com/whitlockjc/atom-dark-theme-emacs"))]) (async . [(20160513 328) nil "Asynchronous processing in Emacs" tar ((:keywords "async") (:url . "http://elpa.gnu.org/packages/async.html"))]) (assess . [(20160523 1522) ((emacs (24 4)) (m-buffer (0 14)) (dash (2 12 0))) "Test support functions" tar nil]) (asn1-mode . [(20151124 28) ((emacs (24 3)) (s (1 10 0))) "ASN.1/GDMO mode for GNU Emacs" single ((:keywords "languages" "processes" "tools") (:url . "https://github.com/kawabata/asn1-mode/"))]) (ascii . [(20130824 700) nil "ASCII code display." single ((:keywords "data" "ascii") (:url . "http://www.emacswiki.org/cgi-bin/wiki/ViniciusJoseLatorre"))]) (arview . [(20160419 1609) nil "extract and view archives in the temporary directory" single ((:keywords "files") (:url . "https://github.com/afainer/arview"))]) (arjen-grey-theme . [(20160403 1415) nil "A soothing dark grey theme" single ((:keywords "faces") (:url . "https://github.com/credmp/arjen-grey"))]) (ariadne . [(20131117 1111) ((bert (0 1))) "Ariadne plugin for Emacs" single ((:keywords "comm" "convenience" "processes"))]) (arduino-mode . [(20151018 135) nil "Major mode for the Arduino language" single ((:keywords "languages" "arduino"))]) (archive-region . [(20140201 1742) nil "Move region to archive file instead of killing" single ((:keywords "languages") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/archive-region.el"))]) (apu . [(20151231 1408) nil "Apropos Unicode characters." single ((:keywords "unicode" "characters" "encoding" "commands" "ucs-names") (:url . "http://www.emacswiki.org/apu.el"))]) (apropospriate-theme . [(20160212 1130) nil "A colorful, low-contrast, light & dark theme set for Emacs with a fun name." tar nil]) (apropos-fn+var . [(20151231 1405) nil "Apropos for functions and variables" single ((:keywords "apropos") (:url . "http://www.emacswiki.org/apropos-fn+var.el"))]) (aproject . [(20150605 406) nil "Basic project framework for Emacs" tar ((:keywords "environment" "project") (:url . "https://github.com/vietor/aproject"))]) (apples-mode . [(20110120 2218) nil "Major mode for editing and executing AppleScript code" tar ((:keywords "applescript" "languages"))]) (apel . [(20160427 352) nil "APEL (A Portable Emacs Library) provides support for portable Emacs Lisp programs" tar nil]) (apache-mode . [(20150828 914) nil "major mode for editing Apache configuration files" single ((:keywords "languages" "faces"))]) (aozora-view . [(20140310 817) nil "Aozora Bunko text Emacs viewer." tar ((:keywords "text") (:url . "https://github.com/kawabata/aozora-view"))]) (aok . [(20130824 627) nil "various useful ways to do `multi-occur'" single nil]) (anzu . [(20160405 18) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" single ((:url . "https://github.com/syohex/emacs-anzu"))]) (anything-sage . [(20141005 613) ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) "An anything extension for sage-shell-mode." single ((:keywords "sage" "math" "anything") (:url . "https://github.com/stakemori/anything-sage"))]) (anything-replace-string . [(20140317 536) ((anything (1 3 9))) "`replace-string' and `query-replace' `anything.el' interface" single ((:url . "http://code.101000lab.org"))]) (anything-project . [(20141024 427) ((imakado (0 12)) (anything (1 3 9))) "finding any resource of a project" single ((:keywords "convenience") (:url . "https://github.com/imakado/anything-project"))]) (anything-exuberant-ctags . [(20140316 1837) ((anything (1 3 9))) "Exuberant ctags anything.el interface" single ((:keywords "anything" "exuberant ctags") (:url . "http://code.101000lab.org"))]) (anything . [(20151018 2103) nil "open anything / QuickSilver-like candidate-selection framework" tar ((:keywords "files" "frames" "help" "matching" "outlines") (:url . "http://repo.or.cz/w/anything-config.git"))]) (anyins . [(20131229 441) nil "Insert content at multiple places from shell command or kill-ring" single ((:keywords "insert" "rectangular") (:url . "http://github.com/antham/anyins"))]) (anybar . [(20160112 1002) nil "Control AnyBar from Emacs" single ((:keywords "anybar"))]) (anx-api . [(20140208 914) nil "Interact with the AppNexus API from Emacs." single ((:keywords "convenience" "json" "rest" "api" "appnexus"))]) (anti-zenburn-theme . [(20160501 1850) nil "Low-contrast Zenburn-inverted theme" single ((:url . "https://github.com/m00natic/anti-zenburn-theme"))]) (ant . [(20160211 943) nil "helpers for compiling with ant" single ((:keywords "compilation" "ant" "java"))]) (ansible-doc . [(20150524 1205) ((emacs (24 1))) "Ansible documentation Minor Mode" single ((:keywords "tools" "help") (:url . "https://github.com/lunaryorn/ansible-doc.el"))]) (ansible . [(20160326 1031) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar ((:url . "http://101000lab.org"))]) (ansi . [(20150703 326) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" single ((:keywords "color" "ansi") (:url . "http://github.com/rejeep/ansi"))]) (annoying-arrows-mode . [(20151113 1102) nil "Ring the bell if using arrows too much" single nil]) (annotate-depth . [(20160520 1540) nil "Annotate buffer if indentation depth is beyond threshold." single ((:keywords "convenience") (:url . "https://github.com/netromdk/annotate-depth"))]) (annotate . [(20151227 1022) nil "annotate files without changing them" single ((:url . "https://github.com/bastibe/annotate.el"))]) (angular-snippets . [(20140514 23) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar nil]) (angular-mode . [(20151201 1527) nil "Major mode for Angular.js" tar ((:keywords "languages" "javascript") (:url . "https://github.com/omouse/angularjs-mode"))]) (angry-police-captain . [(20120829 752) nil "Show quote from http://theangrypolicecaptain.com in the minibuffer" single ((:keywords "games" "web" "fun"))]) (android-mode . [(20160408 723) nil "Minor mode for Android application development" single ((:keywords "tools" "processes") (:url . "https://github.com/remvee/android-mode"))]) (anchored-transpose . [(20080905 54) nil "Transposes a phrase around an anchor phrase" single ((:keywords "tools" "convenience"))]) (anaconda-mode . [(20160527 712) ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" single ((:url . "https://github.com/proofit404/anaconda-mode"))]) (ample-zen-theme . [(20150119 1554) nil "AmpleZen Theme for Emacs 24" single ((:keywords "theme" "dark" "emacs 24") (:url . "https://github.com/mjwall/ample-zen"))]) (ample-theme . [(20150814 1301) nil "Calm Dark Theme for Emacs" tar ((:keywords "theme" "dark") (:url . "https://github.com/jordonbiondo/ample-theme"))]) (ample-regexps . [(20151023 500) nil "ample regular expressions for Emacs" tar ((:keywords "regexps" "extensions" "tools"))]) (amd-mode . [(20160320 431) ((projectile (0 10 0)) (ag (0 47)) (s (1 9 0)) (f (0 16 2)) (dash (2 5 0)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) "Minor mode for handling JavaScript AMD module requirements." single ((:keywords "javascript" "amd" "projectile"))]) (all-ext . [(20160529 2028) ((all (1 0))) "M-x all with helm(-swoop)/anything/multiple-cursors/line-number" single ((:keywords "all" "search" "replace" "anything" "helm" "helm-swoop" "occur") (:url . "http://www.emacswiki.org/emacs/download/all-ext.el"))]) (align-cljlet . [(20160112 1501) ((clojure-mode (1 11 5))) "Space align various Clojure forms" single ((:url . "https://github.com/gstamp/align-cljlet"))]) (alert . [(20160506 2021) ((gntp (0 1)) (log4e (0 3 0))) "Growl-style notification system for Emacs" single ((:keywords "notification" "emacs" "message") (:url . "https://github.com/jwiegley/alert"))]) (alect-themes . [(20160414 314) ((emacs (24 0))) "Configurable light, dark and black themes for Emacs 24 or later" tar ((:keywords "color" "theme") (:url . "https://github.com/alezost/alect-themes"))]) (alda-mode . [(20160322 200) ((emacs (24 0))) "A simple major mode for the musical programming language Alda" single ((:keywords "alda" "highlight") (:url . "http://github.com/jgkamat/alda-mode"))]) (alchemist . [(20160603 141) ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) "Elixir tooling integration into Emacs" tar ((:keywords "languages" "elixir" "elixirc" "mix" "hex" "alchemist") (:url . "http://www.github.com/tonini/alchemist.el"))]) (ahungry-theme . [(20160516 2258) ((emacs (24))) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." single ((:keywords "ahungry" "palette" "color" "theme" "emacs" "color-theme" "deftheme") (:url . "https://github.com/ahungry/color-theme-ahungry"))]) (ahk-mode . [(20160320 1721) ((emacs (24 3))) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" single ((:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation") (:url . "https://github.com/ralesi/ahk-mode"))]) (ahg . [(20160513 336) nil "Alberto's Emacs interface for Mercurial (Hg)" single ((:url . "https://bitbucket.org/agriggio/ahg"))]) (aggressive-indent . [(20160518 1814) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single ((:keywords "indent" "lisp" "maint" "tools") (:url . "https://github.com/Malabarba/aggressive-indent-mode"))]) (aggressive-fill-paragraph . [(20160301 1614) ((dash (2 10 0))) "A mode to automatically keep paragraphs filled" single ((:keywords "fill-paragraph" "automatic" "comments") (:url . "https://github.com/davidshepherd7/aggressive-fill-paragraph-mode"))]) (ag . [(20160321 1806) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." single nil]) (afternoon-theme . [(20140104 1259) ((emacs (24 1))) "Dark color theme with a deep blue background" single ((:keywords "themes") (:url . "http://github.com/osener/emacs-afternoon-theme"))]) (aes . [(20160121 1437) nil "Implementation of AES" single ((:keywords "data" "tools") (:url . "https://github.com/Sauermann/emacs-aes"))]) (adoc-mode . [(20160314 1630) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single ((:keywords "wp" "asciidoc") (:url . "https://github.com/sensorflo/adoc-mode/wiki"))]) (addressbook-bookmark . [(20160317 103) ((emacs (24))) "An address book based on Standard Emacs bookmarks." single ((:url . "https://github.com/thierryvolpiatto/addressbook-bookmark"))]) (actionscript-mode . [(20140605 1328) nil "A simple mode for editing Actionscript 3 files" single ((:keywords "language" "modes"))]) (ack-menu . [(20150504 1522) ((mag-menu (0 1 0))) "A menu-based front-end for ack" single ((:keywords "tools" "matching" "convenience") (:url . "https://github.com/chumpage/ack-menu"))]) (achievements . [(20150530 1326) ((keyfreq (0 0 3))) "Achievements for emacs usage." tar nil]) (ace-window . [(20160225 1019) ((avy (0 2 0))) "Quickly switch windows." single ((:keywords "window" "location") (:url . "https://github.com/abo-abo/ace-window"))]) (ace-popup-menu . [(20160522 719) ((emacs (24 3)) (avy-menu (0 1))) "Replace GUI popup menu with something more efficient" single ((:keywords "convenience" "popup" "menu") (:url . "https://github.com/mrkkrp/ace-popup-menu"))]) (ace-pinyin . [(20160515 2337) ((ace-jump-mode (2 0)) (avy (0 2 0)) (pinyinlib (0 1 0))) "Jump to Chinese characters using ace-jump-mode or avy" single ((:keywords "extensions") (:url . "https://github.com/cute-jumper/ace-pinyin"))]) (ace-mc . [(20160408 1937) ((ace-jump-mode (1 0)) (multiple-cursors (1 0)) (dash (2 10 0))) "Add multiple cursors quickly using ace jump" single ((:keywords "motion" "location" "cursor") (:url . "https://github.com/mm--/ace-mc"))]) (ace-link . [(20160530 150) ((avy (0 2 0))) "Quickly follow links" single ((:keywords "convenience" "links") (:url . "https://github.com/abo-abo/ace-link"))]) (ace-jump-mode . [(20140616 315) nil "a quick cursor location minor mode for emacs" single ((:keywords "motion" "location" "cursor") (:url . "https://github.com/winterTTr/ace-jump-mode/"))]) (ace-jump-helm-line . [(20160329 1418) ((avy (0 4 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" single ((:keywords "extensions") (:url . "https://github.com/cute-jumper/ace-jump-helm-line"))]) (ace-isearch . [(20150808 756) ((ace-jump-mode (2 0)) (avy (0 3)) (helm-swoop (1 4)) (emacs (24))) "A seamless bridge between isearch, ace-jump-mode, avy and helm-swoop" single ((:url . "https://github.com/tam17aki/ace-isearch"))]) (ace-flyspell . [(20150523 1315) ((ace-jump-mode (2 0))) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" single ((:keywords "extensions") (:url . "https://github.com/cute-jumper/ace-flyspell"))]) (ac-slime . [(20150729 2235) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single ((:url . "https://github.com/purcell/ac-slime"))]) (ac-skk . [(20141229 1919) ((auto-complete (1 3 1)) (ddskk (16 0 50)) (tinysegmenter (0)) (cl-lib (0 5))) "auto-complete-mode source for DDSKK a.k.a Japanese input method" single ((:keywords "convenience" "auto-complete") (:url . "https://github.com/myuhe/ac-skk.el"))]) (ac-racer . [(20160518 20) ((auto-complete (1 5 0)) (racer (0 0 2)) (cl-lib (0 5))) "auto-complete source of racer" single ((:url . "https://github.com/syohex/emacs-ac-racer"))]) (ac-php . [(20160525 126) ((emacs (24)) (dash (1)) (php-mode (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0)) (xcscope (1)) (s (1)) (f (0 17 0)) (popup (0 5 0))) "auto-completion source for php for GNU Emacs" tar ((:keywords "completion" "convenience" "intellisense") (:url . "https://github.com/xcwen/ac-php"))]) (ac-octave . [(20150111 1908) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single ((:keywords "octave" "auto-complete" "completion") (:url . "https://github.com/coldnew/ac-octave"))]) (ac-mozc . [(20150227 1019) ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) "auto-complete sources for Japanese input using Mozc" single ((:url . "https://github.com/igjit/ac-mozc"))]) (ac-math . [(20141116 1527) ((auto-complete (1 4)) (math-symbol-lists (1 0))) "Auto-complete sources for input of mathematical symbols and latex tags" single ((:keywords "latex" "auto-complete" "unicode" "symbols") (:url . "https://github.com/vitoshka/ac-math"))]) (ac-js2 . [(20140906 642) ((js2-mode (20090723)) (skewer-mode (1 4))) "Auto-complete source for Js2-mode, with navigation" tar ((:url . "https://github.com/ScottyB/ac-js2"))]) (ac-ispell . [(20151031 2126) ((auto-complete (1 4)) (cl-lib (0 5))) "ispell completion source for auto-complete" single ((:url . "https://github.com/syohex/emacs-ac-ispell"))]) (ac-inf-ruby . [(20131115 550) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single ((:keywords "languages" "tools"))]) (ac-html-csswatcher . [(20151208 1513) ((web-completion-data (0 1))) "css/less class/id completion with `ac-html' or `company-web'" single ((:keywords "html" "css" "less" "auto-complete") (:url . "https://github.com/osv/ac-html-csswatcher"))]) (ac-html-bootstrap . [(20160302 1101) ((web-completion-data (0 1))) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" tar ((:keywords "html" "auto-complete" "bootstrap" "cssx") (:url . "https://github.com/osv/ac-html-bootstrap"))]) (ac-html-angular . [(20151225 119) ((web-completion-data (0 1))) "auto complete angular15 data for `ac-html' and `company-web'" tar ((:keywords "html" "auto-complete" "angular") (:url . "https://github.com/osv/ac-html-bootstrap"))]) (ac-html . [(20151005 231) ((auto-complete (1 4)) (s (1 9)) (f (0 17)) (dash (2 10))) "auto complete source for html tags and attributes" tar ((:keywords "html" "auto-complete" "slim" "haml" "jade") (:url . "https://github.com/cheunghy/ac-html"))]) (ac-helm . [(20160318 2133) ((helm (1 6 3)) (auto-complete (1 4 0)) (popup (0 5 0)) (cl-lib (0 5))) "Helm interface for auto-complete" single ((:keywords "completion" "convenience" "helm"))]) (ac-haskell-process . [(20150423 902) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single ((:keywords "languages"))]) (ac-geiser . [(20130929 147) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar nil]) (ac-etags . [(20151031 2121) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single ((:url . "https://github.com/syohex/emacs-ac-etags"))]) (ac-emoji . [(20150823 211) ((auto-complete (1 5 0)) (cl-lib (0 5))) "auto-complete source of Emoji" tar ((:url . "https://github.com/syohex/emacs-ac-emoji"))]) (ac-emmet . [(20131015 1058) ((emmet-mode (1 0 2)) (auto-complete (1 4))) "auto-complete sources for emmet-mode's snippets" single ((:keywords "completion" "convenience" "emmet") (:url . "https://github.com/yasuyk/ac-emmet"))]) (ac-dcd . [(20160311 817) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single ((:keywords "languages") (:url . "http://github.com/atilaneves/ac-dcd"))]) (ac-dabbrev . [(20130906 18) nil "auto-complete.el source for dabbrev" single nil]) (ac-clang . [(20150906 1208) ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) "Auto Completion source by libclang for GNU Emacs" tar ((:keywords "completion" "convenience" "intellisense") (:url . "https://github.com/yaruopooner/ac-clang"))]) (ac-cider . [(20160530 658) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single ((:keywords "languages" "clojure" "nrepl" "cider" "compliment") (:url . "https://github.com/clojure-emacs/ac-cider"))]) (ac-capf . [(20151031 2117) ((auto-complete (1 4)) (cl-lib (0 5))) "auto-complete source with completion-at-point" single ((:url . "https://github.com/syohex/emacs-ac-capf"))]) (ac-cake2 . [(20140320 208) ((cake2 (1 1 2)) (auto-complete (1 4 0))) "CakePHP 2 Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org"))]) (ac-cake . [(20140315 1129) ((cake (1 4 2)) (auto-complete (1 4 0))) "CakePHP Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org"))]) (ac-c-headers . [(20151021 334) ((auto-complete (1 3 1))) "auto-complete source for C headers" single ((:url . "http://hins11.yu-yake.com/"))]) (ac-anaconda . [(20160221 1323) ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) "Anaconda sources for auto-complete-mode" single ((:url . "https://github.com/proofit404/ac-anaconda"))]) (ac-alchemist . [(20150908 156) ((auto-complete (1 5 0)) (alchemist (1 5 0)) (cl-lib (0 5))) "auto-complete source for alchemist" single ((:url . "https://github.com/syohex/emacs-ac-alchemist"))]) (abl-mode . [(20160129 431) nil "Python TDD minor mode" single ((:url . "http://github.com/afroisalreadyinu/abl-mode"))]) (abc-mode . [(20140225 1144) nil "Major mode for editing abc music files" single ((:keywords "local" "docs"))]) (aa-edit-mode . [(20160228 17) ((emacs (24)) (navi2ch (2 0 0))) "Major mode for editing AA" single ((:keywords "text" "shiftjis"))]) (@ . [(20140707 720) ((queue (0 1)) (emacs (24))) "multiple-inheritance prototype-based objects DSL" tar ((:url . "https://github.com/skeeto/at-el"))]) (4clojure . [(20131014 1707) ((json (1 2)) (request (0 2 0))) "Open and evaluate 4clojure.com questions" single ((:keywords "languages" "data"))]) (2048-game . [(20151026 1433) nil "play 2048 in Emacs" single ((:url . "https://bitbucket.org/zck/2048.el"))]) (0blayout . [(20151021 549) nil "Layout grouping with ease" single ((:keywords "convenience" "window-management") (:url . "https://github.com/etu/0blayout"))]))
